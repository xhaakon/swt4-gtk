diff --git a/.topdeps b/.topdeps
new file mode 100644
index 0000000..0459513
--- /dev/null
+++ b/.topdeps
@@ -0,0 +1 @@
+upstream
diff --git a/.topmsg b/.topmsg
new file mode 100644
index 0000000..798fccb
--- /dev/null
+++ b/.topmsg
@@ -0,0 +1,6 @@
+From: Adrian Perez <adrianperez.deb@gmail.com>
+Subject: [PATCH] debian/x86_64
+
+Diff against the x86_64 source distribution.
+
+Signed-off-by: Adrian Perez <adrianperez.deb@gmail.com>
diff --git a/build.sh b/build.sh
old mode 100755
new mode 100644
diff --git a/org/eclipse/swt/accessibility/Accessible.java b/org/eclipse/swt/accessibility/Accessible.java
index 6a2a5d5..233caf7 100644
--- a/org/eclipse/swt/accessibility/Accessible.java
+++ b/org/eclipse/swt/accessibility/Accessible.java
@@ -169,7 +169,7 @@ public class Accessible {
 		return result;
 	}
 
-	int /*long*/ getControlHandle () {
+	long /*int*/ getControlHandle () {
 		return control.handle;
 	}
 
diff --git a/org/eclipse/swt/accessibility/AccessibleFactory.java b/org/eclipse/swt/accessibility/AccessibleFactory.java
index c6f6300..4b7ad05 100644
--- a/org/eclipse/swt/accessibility/AccessibleFactory.java
+++ b/org/eclipse/swt/accessibility/AccessibleFactory.java
@@ -18,16 +18,16 @@ import org.eclipse.swt.internal.gtk.*;
 import org.eclipse.swt.*;
 
 class AccessibleFactory {
-	int /*long*/ handle;
-	int /*long*/ objectParentType;
-	int /*long*/ widgetTypeName;
+	long /*int*/ handle;
+	long /*int*/ objectParentType;
+	long /*int*/ widgetTypeName;
 	Callback atkObjectFactoryCB_create_accessible;
 	Callback gTypeInfo_base_init_factory;
 	Hashtable accessibles = new Hashtable (9);
 	
 	static final Hashtable Types = new Hashtable (9);
 	static final Hashtable Factories = new Hashtable (9);	
-	static final int /*long*/ DefaultParentType = OS.g_type_from_name (Converter.wcsToMbcs (null, "GtkAccessible", true)); //$NON-NLS-1$
+	static final long /*int*/ DefaultParentType = OS.g_type_from_name (Converter.wcsToMbcs (null, "GtkAccessible", true)); //$NON-NLS-1$
 	static final byte[] FACTORY_PARENTTYPENAME = Converter.wcsToMbcs (null, "AtkObjectFactory", true); //$NON-NLS-1$
 	static final byte[] SWT_TYPE_PREFIX = Converter.wcsToMbcs (null, "SWT", false); //$NON-NLS-1$
 	static final byte[] CHILD_TYPENAME = Converter.wcsToMbcs (null, "Child", false); //$NON-NLS-1$
@@ -83,12 +83,12 @@ class AccessibleFactory {
 	static final Callback InitSelectionIfaceCB;
 	static final Callback InitTextIfaceCB;
 	/* interface definitions */
-	static int /*long*/ ObjectIfaceDefinition;
-	static final int /*long*/ ActionIfaceDefinition;
-	static final int /*long*/ ComponentIfaceDefinition;
-	static final int /*long*/ HypertextIfaceDefinition;
-	static final int /*long*/ SelectionIfaceDefinition;
-	static final int /*long*/ TextIfaceDefinition;
+	static long /*int*/ ObjectIfaceDefinition;
+	static final long /*int*/ ActionIfaceDefinition;
+	static final long /*int*/ ComponentIfaceDefinition;
+	static final long /*int*/ HypertextIfaceDefinition;
+	static final long /*int*/ SelectionIfaceDefinition;
+	static final long /*int*/ TextIfaceDefinition;
 	static {
 		AtkActionCB_get_keybinding = newCallback (AccessibleObject.class, "atkAction_get_keybinding", 2); //$NON-NLS-1$
 		AtkActionCB_get_name = newCallback (AccessibleObject.class, "atkAction_get_name", 2); //$NON-NLS-1$
@@ -158,7 +158,7 @@ class AccessibleFactory {
 		return callback;
 	}
 
-	private AccessibleFactory (int /*long*/ widgetType) {
+	private AccessibleFactory (long /*int*/ widgetType) {
 		super ();
 		widgetTypeName = OS.g_type_name (widgetType);
 		int widgetTypeNameLength = OS.strlen (widgetTypeName) + 1;
@@ -169,40 +169,40 @@ class AccessibleFactory {
 		System.arraycopy (buffer, 0, factoryName, FACTORY_TYPENAME.length - 1, widgetTypeNameLength);
 		if (OS.g_type_from_name (factoryName) == 0) {
 			/* register the factory */
-			int /*long*/ registry = ATK.atk_get_default_registry ();
-			int /*long*/ previousFactory = ATK.atk_registry_get_factory (registry, widgetType);
+			long /*int*/ registry = ATK.atk_get_default_registry ();
+			long /*int*/ previousFactory = ATK.atk_registry_get_factory (registry, widgetType);
 			objectParentType = ATK.atk_object_factory_get_accessible_type (previousFactory);
 			if (objectParentType == 0) objectParentType = DefaultParentType;
-			int /*long*/ factoryParentType = OS.g_type_from_name (FACTORY_PARENTTYPENAME);
+			long /*int*/ factoryParentType = OS.g_type_from_name (FACTORY_PARENTTYPENAME);
 			gTypeInfo_base_init_factory  = new Callback (this, "gTypeInfo_base_init_factory", 1); //$NON-NLS-1$
-			int /*long*/ address = gTypeInfo_base_init_factory.getAddress ();
+			long /*int*/ address = gTypeInfo_base_init_factory.getAddress ();
 			if (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 			GTypeInfo typeInfo = new GTypeInfo ();
 			typeInfo.base_init = address;
 			typeInfo.class_size = (short)ATK.AtkObjectFactoryClass_sizeof ();
 			typeInfo.instance_size = (short)ATK.AtkObjectFactory_sizeof ();
-			int /*long*/ info = OS.g_malloc (GTypeInfo.sizeof); 
+			long /*int*/ info = OS.g_malloc (GTypeInfo.sizeof); 
 			OS.memmove (info, typeInfo, GTypeInfo.sizeof); 
-			int /*long*/ swtFactoryType = OS.g_type_register_static (factoryParentType, factoryName, info, 0);
+			long /*int*/ swtFactoryType = OS.g_type_register_static (factoryParentType, factoryName, info, 0);
 			ATK.atk_registry_set_factory_type (registry, widgetType, swtFactoryType);
 			handle = ATK.atk_registry_get_factory (registry, widgetType);
 		}
 	}
 
 	void addAccessible (Accessible accessible) {
-		int /*long*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ controlHandle = accessible.getControlHandle ();
 		accessibles.put (new LONG (controlHandle), accessible);
 		ATK.atk_object_factory_create_accessible (handle, controlHandle);
 	}
 
-	int /*long*/ atkObjectFactory_create_accessible (int /*long*/ widget) {
+	long /*int*/ atkObjectFactory_create_accessible (long /*int*/ widget) {
 		Accessible accessible = (Accessible) accessibles.get (new LONG (widget));
 		if (accessible == null) {
 			/*
 			* we don't care about this control, so create it with the parent's
 			* type so that its accessibility callbacks will not pass though here 
 			*/  
-			int /*long*/ result = OS.g_object_new (objectParentType, 0);
+			long /*int*/ result = OS.g_object_new (objectParentType, 0);
 			ATK.atk_object_initialize (result, widget);
 			return result;
 		}
@@ -213,21 +213,21 @@ class AccessibleFactory {
 		int typeNameLength = OS.strlen (widgetTypeName);
 		byte[] buffer = new byte [typeNameLength];
 		OS.memmove (buffer, widgetTypeName, typeNameLength);
-		int /*long*/ type = getType (buffer, accessible, objectParentType, ACC.CHILDID_SELF);
+		long /*int*/ type = getType (buffer, accessible, objectParentType, ACC.CHILDID_SELF);
 		AccessibleObject object = new AccessibleObject (type, widget, accessible, objectParentType, false);
 		accessible.accessibleObject = object;
 		return object.handle;
 	}
 	
-	static int /*long*/ getChildType (Accessible accessible, int childIndex) {
+	static long /*int*/ getChildType (Accessible accessible, int childIndex) {
 		return getType (CHILD_TYPENAME, accessible, DefaultParentType, childIndex);
 	}
 
-	static int /*long*/ getDefaultParentType () {
+	static long /*int*/ getDefaultParentType () {
 		return DefaultParentType;
 	}
 
-	static int /*long*/ getType (byte[] widgetTypeName, Accessible accessible, int /*long*/ parentType, int childId) {
+	static long /*int*/ getType (byte[] widgetTypeName, Accessible accessible, long /*int*/ parentType, int childId) {
 		AccessibleControlEvent event = new AccessibleControlEvent (accessible);
 		event.childID = childId;
 		AccessibleControlListener[] listeners = accessible.getControlListeners ();
@@ -270,13 +270,13 @@ class AccessibleFactory {
 		if (selection) swtTypeName += "Selection"; //$NON-NLS-1$
 		if (text) swtTypeName += "Text"; //$NON-NLS-1$
 
-		int /*long*/ type = 0;
+		long /*int*/ type = 0;
 		LONG typeInt = (LONG)Types.get (swtTypeName);
 		if (typeInt != null) {
 			type = typeInt.value;
 		} else {
 			/* define the type */
-			int /*long*/ queryPtr = OS.g_malloc (GTypeQuery.sizeof);
+			long /*int*/ queryPtr = OS.g_malloc (GTypeQuery.sizeof);
 			OS.g_type_query (parentType, queryPtr);
 			GTypeQuery query = new GTypeQuery ();
 			OS.memmove (query, queryPtr, GTypeQuery.sizeof);
@@ -299,19 +299,19 @@ class AccessibleFactory {
 		return type;
 	}
 
-	int /*long*/ gTypeInfo_base_init_factory (int /*long*/ klass) {
-		int /*long*/ atkObjectFactoryClass = ATK.ATK_OBJECT_FACTORY_CLASS (klass);
+	long /*int*/ gTypeInfo_base_init_factory (long /*int*/ klass) {
+		long /*int*/ atkObjectFactoryClass = ATK.ATK_OBJECT_FACTORY_CLASS (klass);
 		AtkObjectFactoryClass objectFactoryClassStruct = new AtkObjectFactoryClass ();
 		ATK.memmove (objectFactoryClassStruct, atkObjectFactoryClass);
 		atkObjectFactoryCB_create_accessible = new Callback (this, "atkObjectFactory_create_accessible", 1); //$NON-NLS-1$
-		int /*long*/ address = atkObjectFactoryCB_create_accessible.getAddress ();
+		long /*int*/ address = atkObjectFactoryCB_create_accessible.getAddress ();
 		if (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 		objectFactoryClassStruct.create_accessible = address;
 		ATK.memmove (atkObjectFactoryClass, objectFactoryClassStruct); 
 		return 0;
 	}
 	
-	static int /*long*/ gTypeInfo_base_init_type (int /*long*/ klass) {
+	static long /*int*/ gTypeInfo_base_init_type (long /*int*/ klass) {
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, klass);
 		objectClass.get_name = AtkObjectCB_get_name.getAddress ();
@@ -322,7 +322,7 @@ class AccessibleFactory {
 		objectClass.ref_state_set = AtkObjectCB_ref_state_set.getAddress ();
 		objectClass.get_index_in_parent = AtkObjectCB_get_index_in_parent.getAddress ();
 		objectClass.ref_child = AtkObjectCB_ref_child.getAddress ();
-		int /*long*/ gObjectClass = OS.G_OBJECT_CLASS (klass);
+		long /*int*/ gObjectClass = OS.G_OBJECT_CLASS (klass);
 		GObjectClass objectClassStruct = new GObjectClass ();
 		OS.memmove (objectClassStruct, gObjectClass);
 		objectClassStruct.finalize = GObjectClass_finalize.getAddress ();
@@ -331,7 +331,7 @@ class AccessibleFactory {
 		return 0;
 	}
 	
-	static int /*long*/ initActionIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initActionIfaceCB (long /*int*/ iface) {
 		AtkActionIface actionIface = new AtkActionIface ();
 		ATK.memmove (actionIface, iface);
 		actionIface.get_keybinding = AtkActionCB_get_keybinding.getAddress (); 
@@ -340,7 +340,7 @@ class AccessibleFactory {
 		return 0;
 	}
 	
-	static int /*long*/ initComponentIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initComponentIfaceCB (long /*int*/ iface) {
 		AtkComponentIface componentIface = new AtkComponentIface ();
 		ATK.memmove (componentIface, iface);
 		componentIface.get_extents = AtkComponentCB_get_extents.getAddress ();
@@ -351,7 +351,7 @@ class AccessibleFactory {
 		return 0;
 	}
 
-	static int /*long*/ initHypertextIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initHypertextIfaceCB (long /*int*/ iface) {
 		AtkHypertextIface hypertextIface = new AtkHypertextIface ();
 		ATK.memmove (hypertextIface, iface);
 		hypertextIface.get_link = AtkHypertextCB_get_link.getAddress (); 
@@ -361,7 +361,7 @@ class AccessibleFactory {
 		return 0;
 	}
 
-	static int /*long*/ initSelectionIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initSelectionIfaceCB (long /*int*/ iface) {
 		AtkSelectionIface selectionIface = new AtkSelectionIface ();
 		ATK.memmove (selectionIface, iface);
 		selectionIface.is_child_selected = AtkSelectionCB_is_child_selected.getAddress ();
@@ -370,7 +370,7 @@ class AccessibleFactory {
 		return 0;
 	}
 
-	static int /*long*/ initTextIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initTextIfaceCB (long /*int*/ iface) {
 		AtkTextIface textInterface = new AtkTextIface ();
 		ATK.memmove (textInterface, iface);
 		textInterface.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();
@@ -389,8 +389,8 @@ class AccessibleFactory {
 	static void registerAccessible (Accessible accessible) {
 		/* If DefaultParentType is 0 then OS accessibility is not active */
 		if (DefaultParentType == 0) return;
-		int /*long*/ controlHandle = accessible.getControlHandle ();
-		int /*long*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
+		long /*int*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
 		AccessibleFactory factory = (AccessibleFactory) Factories.get (new LONG (widgetType));
 		if (factory == null) {
 			factory = new AccessibleFactory (widgetType);
@@ -404,8 +404,8 @@ class AccessibleFactory {
 	}
 	
 	static void unregisterAccessible (Accessible accessible) {
-		int /*long*/ controlHandle = accessible.getControlHandle ();
-		int /*long*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
+		long /*int*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
 		AccessibleFactory factory = (AccessibleFactory) Factories.get (new LONG (widgetType));
 		if (factory != null) {
 			factory.removeAccessible (accessible);
diff --git a/org/eclipse/swt/accessibility/AccessibleObject.java b/org/eclipse/swt/accessibility/AccessibleObject.java
index 00b05d5..5fff8be 100644
--- a/org/eclipse/swt/accessibility/AccessibleObject.java
+++ b/org/eclipse/swt/accessibility/AccessibleObject.java
@@ -18,8 +18,8 @@ import org.eclipse.swt.internal.gtk.*;
 import org.eclipse.swt.widgets.*;
 
 class AccessibleObject {
-	int /*long*/ handle;
-	int /*long*/ parentType;
+	long /*int*/ handle;
+	long /*int*/ parentType;
 	int index = -1, id = ACC.CHILDID_SELF;
 	Accessible accessible;
 	AccessibleObject parent;
@@ -30,19 +30,19 @@ class AccessibleObject {
 	*/ 
 	boolean isLightweight = false;
 
-	static int /*long*/ actionNamePtr = -1;
-	static int /*long*/ descriptionPtr = -1;
-	static int /*long*/ keybindingPtr = -1;
-	static int /*long*/ namePtr = -1;
+	static long /*int*/ actionNamePtr = -1;
+	static long /*int*/ descriptionPtr = -1;
+	static long /*int*/ keybindingPtr = -1;
+	static long /*int*/ namePtr = -1;
 	static final Hashtable AccessibleObjects = new Hashtable (9);
-	static final int /*long*/ ATK_ACTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkAction", true));
-	static final int /*long*/ ATK_COMPONENT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkComponent", true));
-	static final int /*long*/ ATK_HYPERTEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkHypertext", true));
-	static final int /*long*/ ATK_SELECTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkSelection", true));		
-	static final int /*long*/ ATK_TEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkText", true));
+	static final long /*int*/ ATK_ACTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkAction", true));
+	static final long /*int*/ ATK_COMPONENT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkComponent", true));
+	static final long /*int*/ ATK_HYPERTEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkHypertext", true));
+	static final long /*int*/ ATK_SELECTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkSelection", true));		
+	static final long /*int*/ ATK_TEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkText", true));
 	static final boolean DEBUG = Display.DEBUG;
 
-	AccessibleObject (int /*long*/ type, int /*long*/ widget, Accessible accessible, int /*long*/ parentType, boolean isLightweight) {
+	AccessibleObject (long /*int*/ type, long /*int*/ widget, Accessible accessible, long /*int*/ parentType, boolean isLightweight) {
 		super ();
 		handle = ATK.g_object_new (type, 0);
 		this.parentType = parentType;
@@ -58,13 +58,13 @@ class AccessibleObject {
 		child.setParent (this);
 	}
 	
-	static int /*long*/ atkAction_get_keybinding (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkAction_get_keybinding (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkAction_get_keybinding");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
 			AtkActionIface actionIface = new AtkActionIface ();
 			ATK.memmove (actionIface, superType);
 			if (actionIface.get_keybinding != 0) {
@@ -93,13 +93,13 @@ class AccessibleObject {
 		return keybindingPtr; 	
 	}
 
-	static int /*long*/ atkAction_get_name (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkAction_get_name (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkAction_get_name");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
 			AtkActionIface actionIface = new AtkActionIface ();
 			ATK.memmove (actionIface, superType);
 			if (actionIface.get_name != 0) {
@@ -128,7 +128,7 @@ class AccessibleObject {
 		return actionNamePtr;
 	}	
 
-	static int /*long*/ atkComponent_get_extents (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ width, int /*long*/ height, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_extents (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ width, long /*int*/ height, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_extents");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -137,7 +137,7 @@ class AccessibleObject {
 		OS.memmove (width, new int[] {0}, 4);
 		OS.memmove (height, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -159,11 +159,11 @@ class AccessibleObject {
 		event.width = parentWidth [0]; event.height = parentHeight [0];
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -174,11 +174,11 @@ class AccessibleObject {
 		}
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate display -> control, for answering to the OS */ 
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x -= topWindowX [0];
@@ -191,14 +191,14 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_get_position (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_position (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_position, object: " + atkObject + " x: " + x + " y: " + y + " coord: " + coord_type);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (x, new int[] {0}, 4);
 		OS.memmove (y, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -216,11 +216,11 @@ class AccessibleObject {
 		event.x = parentX [0]; event.y = parentY [0];
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -231,11 +231,11 @@ class AccessibleObject {
 		}
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate display -> control, for answering to the OS */ 
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x -= topWindowX [0];
@@ -246,14 +246,14 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_get_size (int /*long*/ atkObject, int /*long*/ width, int /*long*/ height, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_size (long /*int*/ atkObject, long /*int*/ width, long /*int*/ height, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_size");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (width, new int[] {0}, 4);
 		OS.memmove (height, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -277,13 +277,13 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_ref_accessible_at_point (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_ref_accessible_at_point (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_ref_accessible_at_point");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.ref_accessible_at_point != 0) {
@@ -298,11 +298,11 @@ class AccessibleObject {
 		event.x = (int)/*64*/x; event.y = (int)/*64*/y;
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in the event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -321,27 +321,27 @@ class AccessibleObject {
 		return parentResult;
 	}	
 
-	static int /*long*/ atkHypertext_get_link (int /*long*/ atkObject, int /*long*/ link_index) {
+	static long /*int*/ atkHypertext_get_link (long /*int*/ atkObject, long /*int*/ link_index) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_link");
 		return 0;
 	}
 
-	static int /*long*/ atkHypertext_get_n_links (int /*long*/ atkObject) {
+	static long /*int*/ atkHypertext_get_n_links (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_n_links");
 		return 0;	/* read hyperlink's name */
 	}
 
-	static int /*long*/ atkHypertext_get_link_index (int /*long*/ atkObject, int /*long*/ char_index) {
+	static long /*int*/ atkHypertext_get_link_index (long /*int*/ atkObject, long /*int*/ char_index) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_link_index");
 		return 0;
 	}
 
-	static int /*long*/ atkObject_get_description (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_description (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_description");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_description != 0) {
@@ -369,12 +369,12 @@ class AccessibleObject {
 		return descriptionPtr; 
 	}
 
-	static int /*long*/ atkObject_get_name (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_name (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_name: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_name != 0) {
@@ -402,12 +402,12 @@ class AccessibleObject {
 		return namePtr; 
 	}	
 
-	static int /*long*/ atkObject_get_n_children (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_n_children (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_n_children: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_n_children != 0) { 
@@ -425,31 +425,31 @@ class AccessibleObject {
 		return event.detail;
 	}
 
-	static int /*long*/ atkObject_get_index_in_parent (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_index_in_parent (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObjectCB_get_index_in_parent.  ");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		if (object.index != -1) return object.index;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_index_in_parent == 0) return 0;
 		return ATK.call (objectClass.get_index_in_parent,object. handle);
 	}
 
-	static int /*long*/ atkObject_get_parent (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_parent (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_parent: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		if (object.parent != null) return object.parent.handle;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_parent == 0) return 0;
 		return ATK.call (objectClass.get_parent, object.handle);
 	}
 
-	static int /*long*/ atkObject_get_role (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_role (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_role: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -497,14 +497,14 @@ class AccessibleObject {
 				}
 			}
 		} 
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_role == 0) return 0;
 		return ATK.call (objectClass.get_role, object.handle);
 	}
 
-	static int /*long*/ atkObject_ref_child (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkObject_ref_child (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkObject_ref_child: " + index + " of: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -514,19 +514,19 @@ class AccessibleObject {
 			OS.g_object_ref (accObject.handle);	
 			return accObject.handle;
 		}
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.ref_child == 0) return 0;
 		return ATK.call (objectClass.ref_child, object.handle, index);
 	}
 
-	static int /*long*/ atkObject_ref_state_set (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_ref_state_set (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_ref_state_set");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.ref_state_set != 0) { 
@@ -535,7 +535,7 @@ class AccessibleObject {
 		AccessibleControlListener[] listeners = object.getControlListeners ();
 		if (listeners.length == 0) return parentResult;
 
-		int /*long*/ set = parentResult;
+		long /*int*/ set = parentResult;
 		AccessibleControlEvent event = new AccessibleControlEvent (object.accessible);
 		event.childID = object.id;
 		event.detail = -1;
@@ -564,13 +564,13 @@ class AccessibleObject {
 		return set;
 	}
 
-	static int /*long*/ atkSelection_is_child_selected (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkSelection_is_child_selected (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkSelection_is_child_selected");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
 			AtkSelectionIface selectionIface = new AtkSelectionIface ();
 			ATK.memmove (selectionIface, superType);
 			if (selectionIface.is_child_selected != 0) {
@@ -592,13 +592,13 @@ class AccessibleObject {
 		return parentResult;
 	}
 
-	static int /*long*/ atkSelection_ref_selection (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkSelection_ref_selection (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkSelection_ref_selection");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
 			AtkSelectionIface selectionIface = new AtkSelectionIface ();
 			ATK.memmove (selectionIface, superType);
 			if (selectionIface.ref_selection != 0) {
@@ -622,13 +622,13 @@ class AccessibleObject {
 		return parentResult;
 	}
 
-	static int /*long*/ atkText_get_caret_offset (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_caret_offset (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_caret_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_caret_offset != 0) {
@@ -647,14 +647,14 @@ class AccessibleObject {
 		return event.offset; 	
 	}
 	
-	static int /*long*/ atkText_get_character_at_offset (int /*long*/ atkObject, int /*long*/ offset) {
+	static long /*int*/ atkText_get_character_at_offset (long /*int*/ atkObject, long /*int*/ offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_character_at_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		String text = object.getText ();
 		if (text != null) return text.charAt ((int)/*64*/offset); // TODO
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+			long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_character_at_offset != 0) {
@@ -664,14 +664,14 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_character_count (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_character_count (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_character_count");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		String text = object.getText ();
 		if (text != null) return text.length ();
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+			long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_character_count != 0) {
@@ -681,13 +681,13 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_n_selections (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_n_selections (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_n_selections");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_n_selections != 0) {
@@ -705,14 +705,14 @@ class AccessibleObject {
 		return event.length == 0 ? parentResult : 1;
 	}
 
-	static int /*long*/ atkText_get_selection (int /*long*/ atkObject, int /*long*/ selection_num, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_selection (long /*int*/ atkObject, long /*int*/ selection_num, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_selection");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (start_offset, new int[] {0}, 4);
 		OS.memmove (end_offset, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_selection != 0) {
@@ -738,7 +738,7 @@ class AccessibleObject {
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text (int /*long*/ atkObject, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text (long /*int*/ atkObject, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text: " + start_offset + "," + end_offset);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -752,14 +752,14 @@ class AccessibleObject {
 			start_offset = Math.min (start_offset, end_offset);
 			text = text.substring ((int)/*64*/start_offset, (int)/*64*/end_offset);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		}
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_after_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_after_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_after_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -925,14 +925,14 @@ class AccessibleObject {
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_at_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_at_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_at_offset: " + offset_value + " start: " + start_offset + " end: " + end_offset);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -1041,14 +1041,14 @@ class AccessibleObject {
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_before_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_before_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_before_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -1162,7 +1162,7 @@ class AccessibleObject {
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
@@ -1175,11 +1175,11 @@ class AccessibleObject {
 		return result != null ? result : new AccessibleListener [0];
 	}
 
-	static AccessibleObject getAccessibleObject (int /*long*/ atkObject) {
+	static AccessibleObject getAccessibleObject (long /*int*/ atkObject) {
 		return (AccessibleObject)AccessibleObjects.get (new LONG (atkObject));
 	}
 	
-	AccessibleObject getChildByHandle (int /*long*/ handle) {
+	AccessibleObject getChildByHandle (long /*int*/ handle) {
 		return (AccessibleObject) children.get (new LONG (handle));	
 	}	
 
@@ -1209,13 +1209,13 @@ class AccessibleObject {
 	}
 
 	String getText () {
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		String parentText = "";	//$NON-NLS-1$
 		if (ATK.g_type_is_a (parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
-			int /*long*/ characterCount = 0;
+			long /*int*/ characterCount = 0;
 			if (textIface.get_character_count != 0) {
 				characterCount = ATK.call (textIface.get_character_count, handle);
 			}
@@ -1246,9 +1246,9 @@ class AccessibleObject {
 		return result != null ? result : new AccessibleTextListener [0];
 	}
 
-	static int /*long*/ gObjectClass_finalize (int /*long*/ atkObject) {
-		int /*long*/ superType = ATK.g_type_class_peek_parent (ATK.G_OBJECT_GET_CLASS (atkObject));
-		int /*long*/ gObjectClass = ATK.G_OBJECT_CLASS (superType);
+	static long /*int*/ gObjectClass_finalize (long /*int*/ atkObject) {
+		long /*int*/ superType = ATK.g_type_class_peek_parent (ATK.G_OBJECT_GET_CLASS (atkObject));
+		long /*int*/ gObjectClass = ATK.G_OBJECT_CLASS (superType);
 		GObjectClass objectClassStruct = new GObjectClass ();
 		ATK.memmove (objectClassStruct, gObjectClass);
 		ATK.call (objectClassStruct.finalize, atkObject);
@@ -1365,11 +1365,11 @@ class AccessibleObject {
 			Vector idsToKeep = new Vector (children.size ());
 			if (event.children [0] instanceof Integer) {
 				/*	an array of child id's (Integers) was answered */
-				int /*long*/ parentType = AccessibleFactory.getDefaultParentType ();
+				long /*int*/ parentType = AccessibleFactory.getDefaultParentType ();
 				for (int i = 0; i < event.children.length; i++) {
 					AccessibleObject object = getChildByIndex (i);
 					if (object == null) {
-						int /*long*/ childType = AccessibleFactory.getChildType (accessible, i);
+						long /*int*/ childType = AccessibleFactory.getChildType (accessible, i);
 						object = new AccessibleObject (childType, 0, accessible, parentType, true);
 						AccessibleObjects.put (new LONG (object.handle), object);
 						addChild (object);
diff --git a/org/eclipse/swt/awt/SWT_AWT.java b/org/eclipse/swt/awt/SWT_AWT.java
index 2dead66..0b69b27 100644
--- a/org/eclipse/swt/awt/SWT_AWT.java
+++ b/org/eclipse/swt/awt/SWT_AWT.java
@@ -64,7 +64,7 @@ public class SWT_AWT {
 
 static boolean loaded, swingInitialized;
 
-static native final int /*long*/ getAWTHandle (Object canvas);
+static native final long /*int*/ getAWTHandle (Object canvas);
 static native final void setDebug (Frame canvas, boolean debug);
 
 static synchronized void loadLibrary () {
@@ -152,7 +152,7 @@ public static Frame new_Frame (final Composite parent) {
 	if ((parent.getStyle () & SWT.EMBEDDED) == 0) {
 		SWT.error (SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ handle = parent.embeddedHandle;
+	long /*int*/ handle = parent.embeddedHandle;
 	/*
 	 * Some JREs have implemented the embedded frame constructor to take an integer
 	 * and other JREs take a long.  To handle this binary incompatibility, use
@@ -200,9 +200,9 @@ public static Frame new_Frame (final Composite parent) {
 							if (parent.isDisposed()) return;
 							Shell shell = parent.getShell();
 							loadLibrary();
-							int /*long*/ awtHandle = getAWTHandle(window);
+							long /*int*/ awtHandle = getAWTHandle(window);
 							if (awtHandle == 0) return;
-							int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid(OS.GTK_WIDGET_WINDOW(OS.gtk_widget_get_toplevel(shell.handle)));
+							long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid(OS.GTK_WIDGET_WINDOW(OS.gtk_widget_get_toplevel(shell.handle)));
 							OS.XSetTransientForHint(OS.GDK_DISPLAY(), awtHandle, xWindow);
 						}
 					});
@@ -300,7 +300,7 @@ public static Frame new_Frame (final Composite parent) {
 public static Shell new_Shell (final Display display, final Canvas parent) {
 	if (display == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
 	if (parent == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ handle = 0;
+	long /*int*/ handle = 0;
 	try {
 		loadLibrary ();
 		handle = getAWTHandle (parent);
diff --git a/org/eclipse/swt/browser/AppFileLocProvider.java b/org/eclipse/swt/browser/AppFileLocProvider.java
index 8971565..b0aead6 100644
--- a/org/eclipse/swt/browser/AppFileLocProvider.java
+++ b/org/eclipse/swt/browser/AppFileLocProvider.java
@@ -54,24 +54,24 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	directoryServiceProvider = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return getFile (args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return getFile (args[0], args[1], args[2]);}
 	};
 		
 	directoryServiceProvider2 = new XPCOMObject (new int[] {2, 0, 0, 3, 2}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return getFile (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return getFiles (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return getFile (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return getFiles (args[0], args[1]);}
 	};
 }
 
@@ -90,32 +90,32 @@ void disposeCOMInterfaces () {
 	}	
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return directoryServiceProvider.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDirectoryServiceProvider.NS_IDIRECTORYSERVICEPROVIDER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {directoryServiceProvider.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {directoryServiceProvider.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDirectoryServiceProvider2.NS_IDIRECTORYSERVICEPROVIDER2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {directoryServiceProvider2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {directoryServiceProvider2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -132,7 +132,7 @@ void setComponentsPath (String path) {
 void setProfilePath (String path) {
 	profilePath = path;
 	if (!Compatibility.fileExists (path, "")) { //$NON-NLS-1$
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsEmbedString pathString = new nsEmbedString (path);
 		int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -148,7 +148,7 @@ void setProfilePath (String path) {
 
 /* nsIDirectoryServiceProvider2 */
 
-int getFiles (int /*long*/ prop, int /*long*/ _retval) {
+int getFiles (long /*int*/ prop, long /*int*/ _retval) {
 	int size = XPCOM.strlen (prop);
 	byte[] bytes = new byte[size];
 	XPCOM.memmove (bytes, prop, size);
@@ -159,7 +159,7 @@ int getFiles (int /*long*/ prop, int /*long*/ _retval) {
 		if (pluginDirs == null) {
 			int index = 0;
 			/* set the first value(s) to the MOZ_PLUGIN_PATH environment variable value if it's defined */
-			int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_PLUGIN_PATH, true));
+			long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_PLUGIN_PATH, true));
 			if (ptr != 0) {
 				int length = C.strlen (ptr);
 				byte[] buffer = new byte[length];
@@ -210,9 +210,9 @@ int getFiles (int /*long*/ prop, int /*long*/ _retval) {
 		propertyValues = pluginDirs;
 	}
 
-	XPCOM.memmove(_retval, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove(_retval, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	if (propertyValues != null) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsISupports[] files = new nsISupports [propertyValues.length];
 		int index = 0;
 		for (int i = 0; i < propertyValues.length; i++) {
@@ -246,7 +246,7 @@ int getFiles (int /*long*/ prop, int /*long*/ _retval) {
 
 		SimpleEnumerator enumerator = new SimpleEnumerator (files);
 		enumerator.AddRef ();
-		XPCOM.memmove (_retval, new int /*long*/[] {enumerator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {enumerator.getAddress ()}, C.PTR_SIZEOF);
 		return XPCOM.NS_OK;
 	}
 
@@ -255,7 +255,7 @@ int getFiles (int /*long*/ prop, int /*long*/ _retval) {
 	
 /* nsIDirectoryServiceProvider implementation */
 
-int getFile(int /*long*/ prop, int /*long*/ persistent, int /*long*/ _retval) {
+int getFile(long /*int*/ prop, long /*int*/ persistent, long /*int*/ _retval) {
 	int size = XPCOM.strlen (prop);
 	byte[] bytes = new byte[size];
 	XPCOM.memmove (bytes, prop, size);
@@ -309,9 +309,9 @@ int getFile(int /*long*/ prop, int /*long*/ persistent, int /*long*/ _retval) {
 	}
 
 	XPCOM.memmove (persistent, new int[] {1}, 4); /* PRBool */
-	XPCOM.memmove (_retval, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (_retval, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	if (propertyValue != null && propertyValue.length () > 0) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsEmbedString pathString = new nsEmbedString (propertyValue);
 		int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -324,7 +324,7 @@ int getFile(int /*long*/ prop, int /*long*/ persistent, int /*long*/ _retval) {
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
 
-		XPCOM.memmove (_retval, new int /*long*/[] {result[0]}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {result[0]}, C.PTR_SIZEOF);
 		localFile.Release ();
 		return XPCOM.NS_OK;
 	}
diff --git a/org/eclipse/swt/browser/Download.java b/org/eclipse/swt/browser/Download.java
index b648b33..2414a65 100644
--- a/org/eclipse/swt/browser/Download.java
+++ b/org/eclipse/swt/browser/Download.java
@@ -46,63 +46,63 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	download = new XPCOMObject (new int[] {2, 0, 0, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetPersist (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDisplayName (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetListener (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetListener (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetPersist (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDisplayName (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetListener (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetListener (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return SetObserver (args[0]);}
 	};
 	
 	progressDialog = new XPCOMObject (new int[] {2, 0, 0, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetPersist (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDisplayName (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetListener (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetListener (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return SetObserver (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return Open (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetCancelDownloadOnClose (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetDialog (args[0]);}
-		public int /*long*/ method20 (int /*long*/[] args) {return SetDialog (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetPersist (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDisplayName (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetListener (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetListener (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return Open (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetCancelDownloadOnClose (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetDialog (args[0]);}
+		public long /*int*/ method20 (long /*int*/[] args) {return SetDialog (args[0]);}
 	};
 	
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 }
 
@@ -125,36 +125,36 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return progressDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDownload.NS_IDOWNLOAD_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIProgressDialog.NS_IPROGRESSDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -167,13 +167,13 @@ int Release () {
 /* nsIDownload */
 
 /* Note. The argument startTime is defined as a PRInt64. This translates into two java ints. */
-int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, int /*long*/ startTime1, int /*long*/ startTime2, int /*long*/ aPersist) {
+int Init (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long /*int*/ startTime1, long /*int*/ startTime2, long /*int*/ aPersist) {
 	nsIURI source = new nsIURI (aSource);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	int rc = source.GetHost (aSpec);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
@@ -186,12 +186,12 @@ int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName,
 	*/
 	String filename = null;
 	nsISupports supports = new nsISupports (aTarget);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = supports.QueryInterface (nsIURI.NS_IURI_IID, result);
 	if (rc == XPCOM.NS_OK) {	/* >= 1.7 */
 		nsIURI target = new nsIURI (result[0]);
 		result[0] = 0;
-		int /*long*/ aPath = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aPath = XPCOM.nsEmbedCString_new ();
 		rc = target.GetPath (aPath);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		length = XPCOM.nsEmbedCString_Length (aPath);
@@ -205,7 +205,7 @@ int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName,
 		target.Release ();
 	} else {	/* < 1.7 */
 		nsILocalFile target = new nsILocalFile (aTarget);
-		int /*long*/ aNativeTarget = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aNativeTarget = XPCOM.nsEmbedCString_new ();
 		rc = target.GetNativeLeafName (aNativeTarget);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		length = XPCOM.nsEmbedCString_Length (aNativeTarget);
@@ -259,54 +259,54 @@ int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName,
 	return XPCOM.NS_OK;
 }
 
-int GetSource (int /*long*/ aSource) {
+int GetSource (long /*int*/ aSource) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTarget (int /*long*/ aTarget) {
+int GetTarget (long /*int*/ aTarget) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPersist (int /*long*/ aPersist) {
+int GetPersist (long /*int*/ aPersist) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPercentComplete (int /*long*/ aPercentComplete) {
+int GetPercentComplete (long /*int*/ aPercentComplete) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDisplayName (int /*long*/ aDisplayName) {
+int GetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDisplayName (int /*long*/ aDisplayName) {
+int SetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetStartTime (int /*long*/ aStartTime) {
+int GetStartTime (long /*int*/ aStartTime) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetMIMEInfo (int /*long*/ aMIMEInfo) {
+int GetMIMEInfo (long /*int*/ aMIMEInfo) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetListener (int /*long*/ aListener) {
+int GetListener (long /*int*/ aListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetListener (int /*long*/ aListener) {
+int SetListener (long /*int*/ aListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetObserver (int /*long*/ aObserver) {
+int GetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetObserver (int /*long*/ aObserver) {
+int SetObserver (long /*int*/ aObserver) {
 	if (aObserver != 0) {
 		nsISupports supports = new nsISupports (aObserver);
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		int rc = supports.QueryInterface (nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -316,11 +316,11 @@ int SetObserver (int /*long*/ aObserver) {
 }
 
 /* nsIProgressDialog */
-int Open (int /*long*/ aParent) {
+int Open (long /*int*/ aParent) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetCancelDownloadOnClose (int /*long*/ aCancelDownloadOnClose) {
+int GetCancelDownloadOnClose (long /*int*/ aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
@@ -328,17 +328,17 @@ int SetCancelDownloadOnClose (int aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDialog (int /*long*/ aDialog) {
+int GetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDialog (int /*long*/ aDialog) {
+int SetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIWebProgressListener */
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_STOP) != 0) {
 		if (helperAppLauncher != null) helperAppLauncher.Release ();
 		helperAppLauncher = null;
@@ -348,7 +348,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	int currentKBytes = aCurTotalProgress / 1024;
 	int totalKBytes = aMaxTotalProgress / 1024;
 	if (shell != null && !shell.isDisposed ()) {
@@ -361,15 +361,15 @@ int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCur
 	return XPCOM.NS_OK;
 }
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	return XPCOM.NS_OK;
 }
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	return XPCOM.NS_OK;
 }
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 }
diff --git a/org/eclipse/swt/browser/DownloadFactory.java b/org/eclipse/swt/browser/DownloadFactory.java
index 901786c..a0e2f21 100644
--- a/org/eclipse/swt/browser/DownloadFactory.java
+++ b/org/eclipse/swt/browser/DownloadFactory.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@ int Release () {
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	Download download = new Download ();
 	download.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/DownloadFactory_1_8.java b/org/eclipse/swt/browser/DownloadFactory_1_8.java
index 1af0069..a6bf534 100644
--- a/org/eclipse/swt/browser/DownloadFactory_1_8.java
+++ b/org/eclipse/swt/browser/DownloadFactory_1_8.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@ int Release () {
 
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	Download_1_8 download = new Download_1_8 ();
 	download.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/Download_1_8.java b/org/eclipse/swt/browser/Download_1_8.java
index 82819f1..82ea408 100644
--- a/org/eclipse/swt/browser/Download_1_8.java
+++ b/org/eclipse/swt/browser/Download_1_8.java
@@ -48,97 +48,97 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	download = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3, is32 ? 10 : 6, is32 ? 8 : 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method8 (int /*long*/[] args) {
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method8 (long /*int*/[] args) {
 			if (args.length == 10) {
 				return OnProgressChange64_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
 			} else {
 				return OnProgressChange64 (args[0], args[1], args[2], args[3], args[4], args[5]);
 			}
 		}
-		public int /*long*/ method9 (int /*long*/[] args) {
+		public long /*int*/ method9 (long /*int*/[] args) {
 			if (args.length == 8) {
 				return Init_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
 			} else {
 				return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
 			}
 		}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetTargetFile (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetAmountTransferred (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return GetSize (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetCancelable (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetTargetFile (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetAmountTransferred (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return GetSize (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetCancelable (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
 	};
 
 	progressDialog = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3, is32 ? 10 : 6, is32 ? 8 : 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method8 (int /*long*/[] args) {
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method8 (long /*int*/[] args) {
 			if (args.length == 10) {
 				return OnProgressChange64_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
 			} else {
 				return OnProgressChange64 (args[0], args[1], args[2], args[3], args[4], args[5]);
 			}
 		}
-		public int /*long*/ method9 (int /*long*/[] args) {
+		public long /*int*/ method9 (long /*int*/[] args) {
 			if (args.length == 8) {
 				return Init_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
 			} else {
 				return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
 			}
 		}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetTargetFile (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetAmountTransferred (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return GetSize (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetCancelable (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method20 (int /*long*/[] args) {return Open (args[0]);}
-		public int /*long*/ method21 (int /*long*/[] args) {return GetCancelDownloadOnClose (args[0]);}
-		public int /*long*/ method22 (int /*long*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
-		public int /*long*/ method23 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method24 (int /*long*/[] args) {return SetObserver (args[0]);}
-		public int /*long*/ method25 (int /*long*/[] args) {return GetDialog (args[0]);}
-		public int /*long*/ method26 (int /*long*/[] args) {return SetDialog (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetTargetFile (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetAmountTransferred (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return GetSize (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetCancelable (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method20 (long /*int*/[] args) {return Open (args[0]);}
+		public long /*int*/ method21 (long /*int*/[] args) {return GetCancelDownloadOnClose (args[0]);}
+		public long /*int*/ method22 (long /*int*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
+		public long /*int*/ method23 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method24 (long /*int*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method25 (long /*int*/[] args) {return GetDialog (args[0]);}
+		public long /*int*/ method26 (long /*int*/[] args) {return SetDialog (args[0]);}
 	};
 
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 }
 
@@ -161,36 +161,36 @@ void disposeCOMInterfaces() {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return progressDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDownload_1_8.NS_IDOWNLOAD_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIProgressDialog_1_8.NS_IPROGRESSDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -203,26 +203,26 @@ int Release () {
 /* nsIDownload */
 
 /* Note. The argument startTime is defined as a PRInt64. This translates into two java ints. */
-int Init_32 (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, int /*long*/ startTime1, int /*long*/ startTime2, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+int Init_32 (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long /*int*/ startTime1, long /*int*/ startTime2, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 	long startTime = (startTime2 << 32) + startTime1;
 	return Init (aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aTempFile, aCancelable);
 }
 
-int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+int Init (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 	cancelable = new nsICancelable (aCancelable);
 	nsIURI source = new nsIURI (aSource);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	int rc = source.GetHost (aSpec);
 	if (rc != XPCOM.NS_OK) Mozilla.error(rc);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
 	String url = new String (dest);
 
 	nsIURI target = new nsIURI (aTarget);
-	int /*long*/ aPath = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aPath = XPCOM.nsEmbedCString_new ();
 	rc = target.GetPath (aPath);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	length = XPCOM.nsEmbedCString_Length (aPath);
@@ -277,60 +277,60 @@ int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName,
 	return XPCOM.NS_OK;
 }
 
-int GetAmountTransferred (int /*long*/ arg0) {
+int GetAmountTransferred (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetCancelable (int /*long*/ arg0) {
+int GetCancelable (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDisplayName (int /*long*/ aDisplayName) {
+int GetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetMIMEInfo (int /*long*/ aMIMEInfo) {
+int GetMIMEInfo (long /*int*/ aMIMEInfo) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPercentComplete (int /*long*/ aPercentComplete) {
+int GetPercentComplete (long /*int*/ aPercentComplete) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetSize (int /*long*/ arg0) {
+int GetSize (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetSource (int /*long*/ aSource) {
+int GetSource (long /*int*/ aSource) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetStartTime (int /*long*/ aStartTime) {
+int GetStartTime (long /*int*/ aStartTime) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTarget (int /*long*/ aTarget) {
+int GetTarget (long /*int*/ aTarget) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTargetFile (int /*long*/ arg0) {
+int GetTargetFile (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIProgressDialog */
-int GetCancelDownloadOnClose (int /*long*/ aCancelDownloadOnClose) {
+int GetCancelDownloadOnClose (long /*int*/ aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDialog (int /*long*/ aDialog) {
+int GetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetObserver (int /*long*/ aObserver) {
+int GetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Open (int /*long*/ aParent) {
+int Open (long /*int*/ aParent) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
@@ -338,26 +338,26 @@ int SetCancelDownloadOnClose (int aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDialog (int /*long*/ aDialog) {
+int SetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetObserver (int /*long*/ aObserver) {
+int SetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIWebProgressListener */
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	return OnProgressChange64 (aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 }
 
 /* Note. The last 4 args in the original interface are defined as PRInt64. These each translate into two java ints. */
-int OnProgressChange64_32 (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aCurSelfProgress1, int /*long*/ aCurSelfProgress2, int /*long*/ aMaxSelfProgress1, int /*long*/ aMaxSelfProgress2, int /*long*/ aCurTotalProgress1, int /*long*/ aCurTotalProgress2, int /*long*/ aMaxTotalProgress1, int /*long*/ aMaxTotalProgress2) {
+int OnProgressChange64_32 (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aCurSelfProgress1, long /*int*/ aCurSelfProgress2, long /*int*/ aMaxSelfProgress1, long /*int*/ aMaxSelfProgress2, long /*int*/ aCurTotalProgress1, long /*int*/ aCurTotalProgress2, long /*int*/ aMaxTotalProgress1, long /*int*/ aMaxTotalProgress2) {
 	long aCurSelfProgress = (aCurSelfProgress2 << 32) + aCurSelfProgress1;
 	long aMaxSelfProgress = (aMaxSelfProgress2 << 32) + aMaxSelfProgress1;
 	long aCurTotalProgress = (aCurTotalProgress2 << 32) + aCurTotalProgress1;
@@ -365,7 +365,7 @@ int OnProgressChange64_32 (int /*long*/ aWebProgress, int /*long*/ aRequest, int
 	return OnProgressChange64 (aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 }
 
-int OnProgressChange64 (int /*long*/ aWebProgress, int /*long*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
+int OnProgressChange64 (long /*int*/ aWebProgress, long /*int*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
 	long currentKBytes = aCurTotalProgress / 1024;
 	long totalKBytes = aMaxTotalProgress / 1024;
 	if (shell != null && !shell.isDisposed ()) {
@@ -378,11 +378,11 @@ int OnProgressChange64 (int /*long*/ aWebProgress, int /*long*/ aRequest, long a
 	return XPCOM.NS_OK;
 }
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_STOP) != 0) {
 		cancelable = null;
 		if (shell != null && !shell.isDisposed ()) shell.dispose ();
@@ -391,7 +391,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 	return XPCOM.NS_OK;
 }	
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	return XPCOM.NS_OK;
 }		
 }
diff --git a/org/eclipse/swt/browser/External.java b/org/eclipse/swt/browser/External.java
index 53ed58f..76141a7 100644
--- a/org/eclipse/swt/browser/External.java
+++ b/org/eclipse/swt/browser/External.java
@@ -39,40 +39,40 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	classInfo = new XPCOMObject (new int[] {2, 0, 0, 2, 2, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return getInterfaces (args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return getHelperForLanguage ((int)/*64*/args[0], args[1]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return getContractID (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return getClassDescription (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return getClassID (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return getImplementationLanguage (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return getFlags (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return getClassIDNoAlloc (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return getInterfaces (args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return getHelperForLanguage ((int)/*64*/args[0], args[1]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return getContractID (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return getClassDescription (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return getClassID (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return getImplementationLanguage (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return getFlags (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return getClassIDNoAlloc (args[0]);}
 	};
 
 	securityCheckedComponent = new XPCOMObject (new int[] {2, 0, 0, 2, 3, 3, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return canCreateWrapper (args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return canCallMethod (args[0], args[1], args[2]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return canGetProperty (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return canSetProperty (args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return canCreateWrapper (args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return canCallMethod (args[0], args[1], args[2]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return canGetProperty (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return canSetProperty (args[0], args[1], args[2]);}
 	};
 
 	external = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return callJava ((int)/*64*/args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return callJava ((int)/*64*/args[0], args[1], args[2]);}
 	};
 	
 }
@@ -88,37 +88,37 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return external.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIClassInfo.NS_ICLASSINFO_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {classInfo.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {classInfo.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {securityCheckedComponent.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {securityCheckedComponent.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (EXTERNAL_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {external.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {external.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -130,8 +130,8 @@ int Release () {
 
 /* nsIClassInfo */
 
-int getClassDescription (int /*long*/ _retValue) {
-	int /*long*/[] result = new int /*long*/[1];
+int getClassDescription (long /*int*/ _retValue) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -147,44 +147,44 @@ int getClassDescription (int /*long*/ _retValue) {
 	nsIMemory memory = new nsIMemory (result[0]);
 	result[0] = 0;
 	byte[] bytes = MozillaDelegate.wcsToMbcs (null, "external", true); //$NON-NLS-1$
-	int /*long*/ ptr = memory.Alloc (bytes.length);
+	long /*int*/ ptr = memory.Alloc (bytes.length);
 	C.memmove (ptr, bytes, bytes.length);
-	C.memmove (_retValue, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+	C.memmove (_retValue, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	return XPCOM.NS_OK;
 }
 
-int getClassID (int /*long*/ _retValue) {
+int getClassID (long /*int*/ _retValue) {
 	return XPCOM.NS_OK;
 }
 
-int getClassIDNoAlloc (int /*long*/ _retValue) {
+int getClassIDNoAlloc (long /*int*/ _retValue) {
 	return XPCOM.NS_OK;
 }
 
-int getContractID (int /*long*/ _retValue) {
+int getContractID (long /*int*/ _retValue) {
 	return XPCOM.NS_OK;
 }
 
-int getFlags (int /*long*/ flags) {
+int getFlags (long /*int*/ flags) {
 	C.memmove (flags, new int[] {nsIClassInfo.MAIN_THREAD_ONLY}, 4); /* PRUint32 */
 	return XPCOM.NS_OK;
 }
 
-int getHelperForLanguage (int language, int /*long*/ _retValue) {
-	C.memmove (_retValue, new int /*long*/[] {0}, C.PTR_SIZEOF);
+int getHelperForLanguage (int language, long /*int*/ _retValue) {
+	C.memmove (_retValue, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
-int getImplementationLanguage (int /*long*/ _retValue) {
+int getImplementationLanguage (long /*int*/ _retValue) {
 	C.memmove (_retValue, new int[] {5}, 4); /* nsIProgrammingLanguage.JAVA */ /* PRUint */
 	return XPCOM.NS_OK;
 }
 
 
-int getInterfaces (int /*long*/ count, int /*long*/ array) {
-	int /*long*/[] result = new int /*long*/[1];
+int getInterfaces (long /*int*/ count, long /*int*/ array) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -199,14 +199,14 @@ int getInterfaces (int /*long*/ count, int /*long*/ array) {
 
 	nsIMemory memory = new nsIMemory (result[0]);
 	result[0] = 0;
-	int /*long*/ securityCheckedComponentIID = memory.Alloc (nsID.sizeof);
+	long /*int*/ securityCheckedComponentIID = memory.Alloc (nsID.sizeof);
 	XPCOM.memmove (securityCheckedComponentIID, nsISecurityCheckedComponent.NS_ISECURITYCHECKEDCOMPONENT_IID, nsID.sizeof);
-	int /*long*/ externalIID = memory.Alloc (nsID.sizeof);
+	long /*int*/ externalIID = memory.Alloc (nsID.sizeof);
 	XPCOM.memmove (externalIID, EXTERNAL_IID, nsID.sizeof);
-	int /*long*/ ptrArray = memory.Alloc (2 * C.PTR_SIZEOF);
-	C.memmove (ptrArray, new int /*long*/[] {securityCheckedComponentIID}, C.PTR_SIZEOF);
-	C.memmove (ptrArray + C.PTR_SIZEOF, new int /*long*/[] {externalIID}, C.PTR_SIZEOF);
-	C.memmove (array, new int /*long*/[] {ptrArray}, C.PTR_SIZEOF);
+	long /*int*/ ptrArray = memory.Alloc (2 * C.PTR_SIZEOF);
+	C.memmove (ptrArray, new long /*int*/[] {securityCheckedComponentIID}, C.PTR_SIZEOF);
+	C.memmove (ptrArray + C.PTR_SIZEOF, new long /*int*/[] {externalIID}, C.PTR_SIZEOF);
+	C.memmove (array, new long /*int*/[] {ptrArray}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	C.memmove (count, new int[] {2}, 4); /* PRUint */
@@ -215,8 +215,8 @@ int getInterfaces (int /*long*/ count, int /*long*/ array) {
 
 /* nsISecurityCheckedComponent */
 
-int canCreateWrapper (int /*long*/ iid, int /*long*/ _retVal) {
-	int /*long*/[] result = new int /*long*/[1];
+int canCreateWrapper (long /*int*/ iid, long /*int*/ _retVal) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -232,16 +232,16 @@ int canCreateWrapper (int /*long*/ iid, int /*long*/ _retVal) {
 	nsIMemory memory = new nsIMemory (result[0]);
 	result[0] = 0;
 	byte[] bytes = MozillaDelegate.wcsToMbcs (null, "allAccess", true); //$NON-NLS-1$
-	int /*long*/ ptr = memory.Alloc (bytes.length);
+	long /*int*/ ptr = memory.Alloc (bytes.length);
 	C.memmove (ptr, bytes, bytes.length);
-	C.memmove (_retVal, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+	C.memmove (_retVal, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	return XPCOM.NS_OK;
 }
 
-int canCallMethod (int /*long*/ iid, int /*long*/ methodName, int /*long*/ _retVal) {
-	int /*long*/[] result = new int /*long*/[1];
+int canCallMethod (long /*int*/ iid, long /*int*/ methodName, long /*int*/ _retVal) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -266,16 +266,16 @@ int canCallMethod (int /*long*/ iid, int /*long*/ methodName, int /*long*/ _retV
 	} else {
 		bytes = MozillaDelegate.wcsToMbcs (null, "noAccess", true); //$NON-NLS-1$
 	}
-	int /*long*/ ptr = memory.Alloc (bytes.length);
+	long /*int*/ ptr = memory.Alloc (bytes.length);
 	C.memmove (ptr, bytes, bytes.length);
-	C.memmove (_retVal, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+	C.memmove (_retVal, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	return XPCOM.NS_OK;
 }
 
-int canGetProperty (int /*long*/ iid, int /*long*/ propertyName, int /*long*/ _retVal) {
-	int /*long*/[] result = new int /*long*/[1];
+int canGetProperty (long /*int*/ iid, long /*int*/ propertyName, long /*int*/ _retVal) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -291,16 +291,16 @@ int canGetProperty (int /*long*/ iid, int /*long*/ propertyName, int /*long*/ _r
 	nsIMemory memory = new nsIMemory (result[0]);
 	result[0] = 0;
 	byte[] bytes = MozillaDelegate.wcsToMbcs (null, "noAccess", true); //$NON-NLS-1$
-	int /*long*/ ptr = memory.Alloc (bytes.length);
+	long /*int*/ ptr = memory.Alloc (bytes.length);
 	C.memmove (ptr, bytes, bytes.length);
-	C.memmove (_retVal, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+	C.memmove (_retVal, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	return XPCOM.NS_OK;
 }
 
-int canSetProperty (int /*long*/ iid, int /*long*/ propertyName, int /*long*/ _retVal) {
-	int /*long*/[] result = new int /*long*/[1];
+int canSetProperty (long /*int*/ iid, long /*int*/ propertyName, long /*int*/ _retVal) {
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -316,9 +316,9 @@ int canSetProperty (int /*long*/ iid, int /*long*/ propertyName, int /*long*/ _r
 	nsIMemory memory = new nsIMemory (result[0]);
 	result[0] = 0;
 	byte[] bytes = MozillaDelegate.wcsToMbcs (null, "noAccess", true); //$NON-NLS-1$
-	int /*long*/ ptr = memory.Alloc (bytes.length);
+	long /*int*/ ptr = memory.Alloc (bytes.length);
 	C.memmove (ptr, bytes, bytes.length);
-	C.memmove (_retVal, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+	C.memmove (_retVal, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	memory.Release ();
 
 	return XPCOM.NS_OK;
@@ -344,7 +344,7 @@ Object convertToJava (nsIVariant variant, short type) {
 			if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 			return new Double (intResult[0]);
 		case nsIDataType.VTYPE_DOUBLE:
-			int /*long*/ doubleReturn = C.malloc (8);
+			long /*int*/ doubleReturn = C.malloc (8);
 			rc = variant.GetAsDouble (doubleReturn);
 			if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 			double[] doubleResult = new double[1];
@@ -353,7 +353,7 @@ Object convertToJava (nsIVariant variant, short type) {
 			return new Double (doubleResult[0]);
 		case nsIDataType.VTYPE_WSTRING_SIZE_IS:
 			int[] size = new int[1]; /* PRInt32 */
-			int /*long*/[] wString = new int /*long*/[1];
+			long /*int*/[] wString = new long /*int*/[1];
 			rc = variant.GetAsWStringWithSize (size, wString);
 			if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 			char[] chars = new char[size[0]];
@@ -361,11 +361,11 @@ Object convertToJava (nsIVariant variant, short type) {
 			return new String (chars);
 		case nsIDataType.VTYPE_ARRAY:
 			Object[] arrayReturn = new Object[0];
-			int /*long*/ iid = C.malloc (nsID.sizeof);
+			long /*int*/ iid = C.malloc (nsID.sizeof);
 			C.memset (iid, 0, nsID.sizeof);
 			int[] count = new int[1]; /* PRUint32 */
 			short[] currentType = new short[1];
-			int /*long*/[] ptr = new int /*long*/[1];
+			long /*int*/[] ptr = new long /*int*/[1];
 			rc = variant.GetAsArray (currentType, iid, count, ptr);
 			if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 			if (ptr[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NULL_POINTER);
@@ -373,7 +373,7 @@ Object convertToJava (nsIVariant variant, short type) {
 			XPCOM.memmove (id, iid, nsID.sizeof);
 			C.free (iid);
 
-			int /*long*/[] result = new int /*long*/[1];
+			long /*int*/[] result = new long /*int*/[1];
 			rc = XPCOM.NS_GetServiceManager (result);
 			if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 			if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -392,7 +392,7 @@ Object convertToJava (nsIVariant variant, short type) {
 			if (id.Equals (nsIVariant.NS_IVARIANT_IID)) {
 				arrayReturn = new Object[count[0]];
 				for (int i = 0; i < count[0]; i++) {
-					int /*long*/[] arrayPtr = new int /*long*/[1];
+					long /*int*/[] arrayPtr = new long /*int*/[1];
 					C.memmove (arrayPtr, ptr[0] + i * C.PTR_SIZEOF, C.PTR_SIZEOF);
 					nsISupports supports = new nsISupports (arrayPtr[0]);
 					rc = supports.QueryInterface (nsIVariant.NS_IVARIANT_IID, result);
@@ -444,8 +444,8 @@ Object convertToJava (nsIVariant variant, short type) {
 					case nsIDataType.VTYPE_WCHAR_STR:
 						arrayReturn = new Object[count[0]];
 						for (int i = 0; i < count[0]; i++) {
-							int /*long*/ currentPtr = ptr[0] + i * C.PTR_SIZEOF;
-							int /*long*/[] stringPtr = new int /*long*/[1]; 
+							long /*int*/ currentPtr = ptr[0] + i * C.PTR_SIZEOF;
+							long /*int*/[] stringPtr = new long /*int*/[1]; 
 							C.memmove (stringPtr, currentPtr, C.PTR_SIZEOF);
 							int length = XPCOM.strlen_PRUnichar (stringPtr[0]);
 							char[] dest = new char[length];
@@ -468,7 +468,7 @@ Object convertToJava (nsIVariant variant, short type) {
 }
 
 nsIVariant convertToJS (Object value, nsIComponentManager componentManager) {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	byte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_VARIANT_CONTRACTID, true);
 	int rc = componentManager.CreateInstanceByContractID (aContractID, 0, nsIWritableVariant.NS_IWRITABLEVARIANT_IID, result);
 	nsIWritableVariant variant = new nsIWritableVariant (result[0]);
@@ -504,26 +504,26 @@ nsIVariant convertToJS (Object value, nsIComponentManager componentManager) {
 		Object[] arrayValue = (Object[])value;
 		int length = arrayValue.length;
 		if (length > 0) {
-			int /*long*/ arrayPtr = C.malloc (C.PTR_SIZEOF * length);
+			long /*int*/ arrayPtr = C.malloc (C.PTR_SIZEOF * length);
 			for (int i = 0; i < length; i++) {
 				Object currentObject = arrayValue[i];
 				try {
 					nsIVariant currentVariant = convertToJS (currentObject, componentManager);
-					C.memmove (arrayPtr + C.PTR_SIZEOF * i, new int /*long*/[] {currentVariant.getAddress ()}, C.PTR_SIZEOF);
+					C.memmove (arrayPtr + C.PTR_SIZEOF * i, new long /*int*/[] {currentVariant.getAddress ()}, C.PTR_SIZEOF);
 				} catch (SWTException e) {
 					/* invalid return value type */
 					C.free (arrayPtr);
 					variant.Release ();
 					/* release the variants that had previously been added to the array */
 					for (int j = 0; j < i; j++) {
-						int /*long*/[] ptr = new int /*long*/[1];
+						long /*int*/[] ptr = new long /*int*/[1];
 						C.memmove (ptr, arrayPtr + C.PTR_SIZEOF * j, C.PTR_SIZEOF);
 						new nsISupports (ptr[0]).Release ();
 					}
 					throw e;
 				}
 			}
-			int /*long*/ idPtr = C.malloc (nsID.sizeof);
+			long /*int*/ idPtr = C.malloc (nsID.sizeof);
 			XPCOM.memmove (idPtr, nsIVariant.NS_IVARIANT_IID, nsID.sizeof);
 			rc = variant.SetAsArray (nsIDataType.VTYPE_INTERFACE_IS, idPtr, length, arrayPtr);
 			C.free (idPtr);
@@ -538,7 +538,7 @@ nsIVariant convertToJS (Object value, nsIComponentManager componentManager) {
 	return null;
 }
 
-int callJava (int functionId, int /*long*/ args, int /*long*/ returnPtr) {
+int callJava (int functionId, long /*int*/ args, long /*int*/ returnPtr) {
 	Object key = new Integer (functionId);
 	BrowserFunction function = (BrowserFunction)Mozilla.AllFunctions.get (key);
 	Object returnValue = null;
@@ -569,7 +569,7 @@ int callJava (int functionId, int /*long*/ args, int /*long*/ returnPtr) {
 		}
 	}
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetComponentManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -583,7 +583,7 @@ int callJava (int functionId, int /*long*/ args, int /*long*/ returnPtr) {
 		variant = convertToJS (WebBrowser.CreateErrorString (e.getLocalizedMessage ()), componentManager);
 	}
 	componentManager.Release ();
-	C.memmove (returnPtr, new int /*long*/[] {variant.getAddress ()}, C.PTR_SIZEOF);
+	C.memmove (returnPtr, new long /*int*/[] {variant.getAddress ()}, C.PTR_SIZEOF);
 
 	return XPCOM.NS_OK;
 }
diff --git a/org/eclipse/swt/browser/ExternalFactory.java b/org/eclipse/swt/browser/ExternalFactory.java
index 84462ec..f90ef3d 100644
--- a/org/eclipse/swt/browser/ExternalFactory.java
+++ b/org/eclipse/swt/browser/ExternalFactory.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -87,10 +87,10 @@ int Release () {
 
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	External external = new External ();
 	external.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {external.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {external.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/FilePicker.java b/org/eclipse/swt/browser/FilePicker.java
index cb7b397..b0f85d9 100644
--- a/org/eclipse/swt/browser/FilePicker.java
+++ b/org/eclipse/swt/browser/FilePicker.java
@@ -21,7 +21,7 @@ class FilePicker {
 
 	int refCount = 0;
 	short mode;
-	int /*long*/ parentHandle;
+	long /*int*/ parentHandle;
 	String[] files, masks;
 	String defaultFilename, directory, title;
 
@@ -39,30 +39,30 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	filePicker = new XPCOMObject (new int[] {2, 0, 0, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], (short)args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return AppendFilter (args[0], args[1]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetDefaultString (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetDefaultString (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDefaultExtension (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDefaultExtension (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetFilterIndex (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetDisplayDirectory (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetDisplayDirectory (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetFile (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetFileURL (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetFiles (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return Show (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], (short)args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return AppendFilter (args[0], args[1]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetDefaultString (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetDefaultString (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDefaultExtension (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDefaultExtension (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetFilterIndex (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetDisplayDirectory (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetDisplayDirectory (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetFile (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetFileURL (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetFiles (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return Show (args[0]);}
 	};
 }
 
@@ -77,32 +77,32 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return filePicker.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFilePicker.NS_IFILEPICKER_IID)) {
-		XPCOM.memmove(ppvObject, new int /*long*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove(ppvObject, new long /*int*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFilePicker_1_8.NS_IFILEPICKER_IID)) {
-		XPCOM.memmove(ppvObject, new int /*long*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove(ppvObject, new long /*int*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -112,7 +112,7 @@ int Release () {
 	return refCount;
 }
 
-Browser getBrowser (int /*long*/ aDOMWindow) {
+Browser getBrowser (long /*int*/ aDOMWindow) {
 	if (aDOMWindow == 0) return null;
 	nsIDOMWindow window = new nsIDOMWindow (aDOMWindow);
 	return Mozilla.findBrowser (window);
@@ -123,20 +123,20 @@ Browser getBrowser (int /*long*/ aDOMWindow) {
  * answers a java string based on the type of string that is appropriate for the Mozilla
  * version being used.
  */
-String parseAString (int /*long*/ string) {
+String parseAString (long /*int*/ string) {
 	return null;
 }
 
 /* nsIFilePicker */
 
-int Init (int /*long*/ parent, int /*long*/ title, short mode) {
+int Init (long /*int*/ parent, long /*int*/ title, short mode) {
 	parentHandle = parent;
 	this.mode = mode;
 	this.title = parseAString (title);
 	return XPCOM.NS_OK;
 }
 
-int Show (int /*long*/ _retval) {
+int Show (long /*int*/ _retval) {
 	if (mode == nsIFilePicker.modeGetFolder) {
 		/* picking a directory */
 		int result = showDirectoryPicker ();
@@ -186,20 +186,20 @@ int showDirectoryPicker () {
 	return directory == null ? nsIFilePicker.returnCancel : nsIFilePicker.returnOK;
 }
 
-int GetFiles (int /*long*/ aFiles) {
+int GetFiles (long /*int*/ aFiles) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFileURL (int /*long*/ aFileURL) {
+int GetFileURL (long /*int*/ aFileURL) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFile (int /*long*/ aFile) {
+int GetFile (long /*int*/ aFile) {
 	String filename = "";	//$NON-NLS-1$
 	if (directory != null) filename += directory + SEPARATOR;
 	if (files != null && files.length > 0) filename += files[0];
 	nsEmbedString path = new nsEmbedString (filename);
-	int /*long*/[] file = new int /*long*/[1];
+	long /*int*/[] file = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, file);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -208,13 +208,13 @@ int GetFile (int /*long*/ aFile) {
 	return XPCOM.NS_OK;
 }
 
-int SetDisplayDirectory (int /*long*/ aDisplayDirectory) {
+int SetDisplayDirectory (long /*int*/ aDisplayDirectory) {
 	if (aDisplayDirectory == 0) return XPCOM.NS_OK;
 	nsILocalFile file = new nsILocalFile (aDisplayDirectory);
-	int /*long*/ pathname = XPCOM.nsEmbedCString_new ();
+	long /*int*/ pathname = XPCOM.nsEmbedCString_new ();
 	file.GetNativePath (pathname);
 	int length = XPCOM.nsEmbedCString_Length (pathname);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (pathname);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (pathname);
 	byte[] bytes = new byte[length];
 	XPCOM.memmove (bytes, buffer, length);
 	XPCOM.nsEmbedCString_delete (pathname);
@@ -223,10 +223,10 @@ int SetDisplayDirectory (int /*long*/ aDisplayDirectory) {
 	return XPCOM.NS_OK;
 }
 
-int GetDisplayDirectory (int /*long*/ aDisplayDirectory) {
+int GetDisplayDirectory (long /*int*/ aDisplayDirectory) {
 	String directoryName = directory != null ? directory : "";	//$NON-NLS-1$
 	nsEmbedString path = new nsEmbedString (directoryName);
-	int /*long*/[] file = new int /*long*/[1];
+	long /*int*/[] file = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, file);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -239,31 +239,31 @@ int SetFilterIndex (int aFilterIndex) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFilterIndex (int /*long*/ aFilterIndex) {
+int GetFilterIndex (long /*int*/ aFilterIndex) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDefaultExtension (int /*long*/ aDefaultExtension) {
+int SetDefaultExtension (long /*int*/ aDefaultExtension) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDefaultExtension (int /*long*/ aDefaultExtension) {
+int GetDefaultExtension (long /*int*/ aDefaultExtension) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDefaultString (int /*long*/ aDefaultString) {
+int SetDefaultString (long /*int*/ aDefaultString) {
 	defaultFilename = parseAString (aDefaultString);
 	return XPCOM.NS_OK;
 }
 
-int GetDefaultString (int /*long*/ aDefaultString) {
+int GetDefaultString (long /*int*/ aDefaultString) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int AppendFilter (int /*long*/ title, int /*long*/ filter) {
+int AppendFilter (long /*int*/ title, long /*int*/ filter) {
 	/* note that the type of arguments 1 and 2 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
diff --git a/org/eclipse/swt/browser/FilePickerFactory.java b/org/eclipse/swt/browser/FilePickerFactory.java
index 44dbff1..e4c160c 100644
--- a/org/eclipse/swt/browser/FilePickerFactory.java
+++ b/org/eclipse/swt/browser/FilePickerFactory.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -87,10 +87,10 @@ int Release () {
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	FilePicker picker = new FilePicker ();
 	picker.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/FilePickerFactory_1_8.java b/org/eclipse/swt/browser/FilePickerFactory_1_8.java
index b47095b..856178d 100644
--- a/org/eclipse/swt/browser/FilePickerFactory_1_8.java
+++ b/org/eclipse/swt/browser/FilePickerFactory_1_8.java
@@ -18,26 +18,26 @@ class FilePickerFactory_1_8 extends FilePickerFactory {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	FilePicker_1_8 picker = new FilePicker_1_8 ();
 	picker.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/FilePicker_1_8.java b/org/eclipse/swt/browser/FilePicker_1_8.java
index a73840f..19e15e5 100644
--- a/org/eclipse/swt/browser/FilePicker_1_8.java
+++ b/org/eclipse/swt/browser/FilePicker_1_8.java
@@ -17,30 +17,30 @@ class FilePicker_1_8 extends FilePicker {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	filePicker = new XPCOMObject (new int[] {2, 0, 0, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], (short)args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return AppendFilter (args[0], args[1]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetDefaultString (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetDefaultString (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDefaultExtension (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDefaultExtension (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetFilterIndex (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetDisplayDirectory (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetDisplayDirectory (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetFile (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetFileURL (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetFiles (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return Show (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], (short)args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return AppendFilter (args[0], args[1]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetDefaultString (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetDefaultString (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDefaultExtension (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDefaultExtension (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetFilterIndex (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetDisplayDirectory (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetDisplayDirectory (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetFile (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetFileURL (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetFiles (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return Show (args[0]);}
 	};
 }
 
@@ -49,10 +49,10 @@ void createCOMInterfaces () {
  * answers a java string based on the type of string that is appropriate for the Mozilla
  * version being used.
  */
-String parseAString (int /*long*/ string) {
+String parseAString (long /*int*/ string) {
 	if (string == 0) return null;
 	int length = XPCOM.nsEmbedString_Length (string);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (string);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (string);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	return new String (chars);
diff --git a/org/eclipse/swt/browser/HelperAppLauncherDialog.java b/org/eclipse/swt/browser/HelperAppLauncherDialog.java
index 706ec08..a8d9d5a 100644
--- a/org/eclipse/swt/browser/HelperAppLauncherDialog.java
+++ b/org/eclipse/swt/browser/HelperAppLauncherDialog.java
@@ -38,17 +38,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	helperAppLauncherDialog = new XPCOMObject (new int[] {2, 0, 0, 3, 5}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], args[4]);}
 	};		
 }
 
@@ -63,27 +63,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return helperAppLauncherDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIHelperAppLauncherDialog.NS_IHELPERAPPLAUNCHERDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -102,14 +102,14 @@ int Release () {
 
 /* nsIHelperAppLauncherDialog */
 
-int Show (int /*long*/ aLauncher, int /*long*/ aContext, int aReason) {
+int Show (long /*int*/ aLauncher, long /*int*/ aContext, int aReason) {
 	/*
 	 * The interface for nsIHelperAppLauncher changed as of mozilla 1.8.  Query the received
 	 * nsIHelperAppLauncher for the new interface, and if it is not found then fall back to
 	 * the old interface. 
 	 */
 	nsISupports supports = new nsISupports (aLauncher);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = supports.QueryInterface (nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);
 	if (rc == XPCOM.NS_OK) {	/* >= 1.8 */
 		nsIHelperAppLauncher_1_8 helperAppLauncher = new nsIHelperAppLauncher_1_8 (aLauncher);
@@ -121,8 +121,8 @@ int Show (int /*long*/ aLauncher, int /*long*/ aContext, int aReason) {
 	return helperAppLauncher.SaveToDisk (0, 0);
 }
 
-int PromptForSaveToFile (int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {
-	int /*long*/ aDefaultFile, aSuggestedFileExtension, _retval;
+int PromptForSaveToFile (long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4) {
+	long /*int*/ aDefaultFile, aSuggestedFileExtension, _retval;
 	boolean hasLauncher = false;
 
 	/*
@@ -140,7 +140,7 @@ int PromptForSaveToFile (int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2
 	 */
  	boolean using_1_8 = false;
 	nsISupports support = new nsISupports (arg0);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = support.QueryInterface (nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);
 	if (rc == XPCOM.NS_OK) {
 		using_1_8 = true;
diff --git a/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java b/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java
index 21008f0..481d91e 100644
--- a/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java
+++ b/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,15 +87,15 @@ int Release () {
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	if (Mozilla.IsPre_1_9) {
 		HelperAppLauncherDialog helperAppLauncherDialog = new HelperAppLauncherDialog ();
 		helperAppLauncherDialog.AddRef ();
-		XPCOM.memmove (result, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (result, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 	} else {
 		HelperAppLauncherDialog_1_9 helperAppLauncherDialog = new HelperAppLauncherDialog_1_9 ();
 		helperAppLauncherDialog.AddRef ();
-		XPCOM.memmove (result, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (result, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 	}
 	return XPCOM.NS_OK;
 }
diff --git a/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java b/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java
index dd2e0cb..5599b9b 100644
--- a/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java
+++ b/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java
@@ -38,17 +38,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	helperAppLauncherDialog = new XPCOMObject (new int[] {2, 0, 0, 3, 6}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5]);}
 	};		
 }
 
@@ -63,27 +63,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return helperAppLauncherDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIHelperAppLauncherDialog_1_9.NS_IHELPERAPPLAUNCHERDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -102,12 +102,12 @@ int Release () {
 
 /* nsIHelperAppLauncherDialog */
 
-int Show (int /*long*/ aLauncher, int /*long*/ aContext, int aReason) {
+int Show (long /*int*/ aLauncher, long /*int*/ aContext, int aReason) {
 	nsIHelperAppLauncher_1_9 helperAppLauncher = new nsIHelperAppLauncher_1_9 (aLauncher);
 	return helperAppLauncher.SaveToDisk (0, 0);
 }
 
-int PromptForSaveToFile (int /*long*/ aLauncher, int /*long*/ aWindowContext, int /*long*/ aDefaultFileName, int /*long*/ aSuggestedFileExtension, int aForcePrompt, int /*long*/ _retval) {
+int PromptForSaveToFile (long /*int*/ aLauncher, long /*int*/ aWindowContext, long /*int*/ aDefaultFileName, long /*int*/ aSuggestedFileExtension, int aForcePrompt, long /*int*/ _retval) {
 	int length = XPCOM.strlen_PRUnichar (aDefaultFileName);
 	char[] dest = new char[length];
 	XPCOM.memmove (dest, aDefaultFileName, length * 2);
@@ -131,7 +131,7 @@ int PromptForSaveToFile (int /*long*/ aLauncher, int /*long*/ aWindowContext, in
 		return XPCOM.NS_ERROR_FAILURE;
 	}
 	nsEmbedString path = new nsEmbedString (name);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, result);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
diff --git a/org/eclipse/swt/browser/InputStream.java b/org/eclipse/swt/browser/InputStream.java
index 3440fbb..82b0288 100644
--- a/org/eclipse/swt/browser/InputStream.java
+++ b/org/eclipse/swt/browser/InputStream.java
@@ -34,14 +34,14 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	inputStream = new XPCOMObject (new int[] {2, 0, 0, 0, 1, 3, 4, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Close ();}
-		public int /*long*/ method4 (int /*long*/[] args) {return Available (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Read (args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ReadSegments (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return IsNonBlocking (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Close ();}
+		public long /*int*/ method4 (long /*int*/[] args) {return Available (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Read (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ReadSegments (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return IsNonBlocking (args[0]);}
 	};
 }
 
@@ -52,26 +52,26 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return inputStream.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIInputStream.NS_IINPUTSTREAM_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -89,13 +89,13 @@ int Close () {
 	return XPCOM.NS_OK;
 }
 
-int Available (int /*long*/ _retval) {
+int Available (long /*int*/ _retval) {
 	int available = buffer == null ? 0 : buffer.length - index;
 	XPCOM.memmove (_retval, new int[] {available}, 4);
 	return XPCOM.NS_OK;
 }
 
-int Read(int /*long*/ aBuf, int aCount, int /*long*/ _retval) {
+int Read(long /*int*/ aBuf, int aCount, long /*int*/ _retval) {
 	int max = Math.min (aCount, buffer == null ? 0 : buffer.length - index);
 	if (max > 0) {
 		byte[] src = new byte[max];
@@ -107,12 +107,12 @@ int Read(int /*long*/ aBuf, int aCount, int /*long*/ _retval) {
 	return XPCOM.NS_OK;
 }
 
-int ReadSegments (int /*long*/ aWriter, int /*long*/ aClosure, int aCount, int /*long*/ _retval) {
+int ReadSegments (long /*int*/ aWriter, long /*int*/ aClosure, int aCount, long /*int*/ _retval) {
 	int max = Math.min (aCount, buffer == null ? 0 : buffer.length - index);
 	int cnt = max;
 	while (cnt > 0) {
 		int[] aWriteCount = new int[1];
-		int /*long*/ rc = XPCOM.Call (aWriter, getAddress (), aClosure, buffer, index, cnt, aWriteCount);
+		long /*int*/ rc = XPCOM.Call (aWriter, getAddress (), aClosure, buffer, index, cnt, aWriteCount);
 		if (rc != XPCOM.NS_OK) break;
 		index += aWriteCount[0];
 		cnt -= aWriteCount[0];
@@ -121,7 +121,7 @@ int ReadSegments (int /*long*/ aWriter, int /*long*/ aClosure, int aCount, int /
 	return XPCOM.NS_OK;
 }
 
-int IsNonBlocking (int /*long*/ _retval) {
+int IsNonBlocking (long /*int*/ _retval) {
 	/* blocking */
 	XPCOM.memmove (_retval, new int[] {0}, 4);
 	return XPCOM.NS_OK;
diff --git a/org/eclipse/swt/browser/Mozilla.java b/org/eclipse/swt/browser/Mozilla.java
index 9cbf020..f6c0085 100644
--- a/org/eclipse/swt/browser/Mozilla.java
+++ b/org/eclipse/swt/browser/Mozilla.java
@@ -23,7 +23,7 @@ import org.eclipse.swt.internal.mozilla.init.*;
 import org.eclipse.swt.layout.*;
 
 class Mozilla extends WebBrowser {
-	int /*long*/ embedHandle;
+	long /*int*/ embedHandle;
 	nsIWebBrowser webBrowser;
 	Object webBrowserObject;
 	MozillaDelegate delegate;
@@ -44,7 +44,7 @@ class Mozilla extends WebBrowser {
 	XPCOMObject badCertListener;
 	int chromeFlags = nsIWebBrowserChrome.CHROME_DEFAULT;
 	int refCount, lastKeyCode, lastCharCode, authCount;
-	int /*long*/ request;
+	long /*int*/ request;
 	Point location, size;
 	boolean visible, isChild, ignoreDispose, isRetrievingBadCert, isViewingErrorPage;
 	Shell tip = null;
@@ -103,7 +103,7 @@ class Mozilla extends WebBrowser {
 		MozillaClearSessions = new Runnable () {
 			public void run () {
 				if (!Initialized) return;
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -133,9 +133,9 @@ class Mozilla extends WebBrowser {
 					rc = cookie.GetExpires (expires);
 					if (expires[0] == 0) {
 						/* indicates a session cookie */
-						int /*long*/ domain = XPCOM.nsEmbedCString_new ();
-						int /*long*/ name = XPCOM.nsEmbedCString_new ();
-						int /*long*/ path = XPCOM.nsEmbedCString_new ();
+						long /*int*/ domain = XPCOM.nsEmbedCString_new ();
+						long /*int*/ name = XPCOM.nsEmbedCString_new ();
+						long /*int*/ path = XPCOM.nsEmbedCString_new ();
 						cookie.GetHost (domain);
 						cookie.GetName (name);
 						cookie.GetPath (path);
@@ -158,7 +158,7 @@ class Mozilla extends WebBrowser {
 			public void run() {
 				if (!Initialized) return;
 
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -172,7 +172,7 @@ class Mozilla extends WebBrowser {
 				nsIIOService ioService = new nsIIOService (result[0]);
 				result[0] = 0;
 				byte[] bytes = MozillaDelegate.wcsToMbcs (null, CookieUrl, false);
-				int /*long*/ aSpec = XPCOM.nsEmbedCString_new (bytes, bytes.length);
+				long /*int*/ aSpec = XPCOM.nsEmbedCString_new (bytes, bytes.length);
 				rc = ioService.NewURI (aSpec, null, 0, result);
 				XPCOM.nsEmbedCString_delete (aSpec);
 				ioService.Release ();
@@ -186,7 +186,7 @@ class Mozilla extends WebBrowser {
 				result[0] = 0;
 				byte[] aContractID = MozillaDelegate.wcsToMbcs (null, XPCOM.NS_COOKIESERVICE_CONTRACTID, true);
 				rc = serviceManager.GetServiceByContractID (aContractID, nsICookieService.NS_ICOOKIESERVICE_IID, result);
-				int /*long*/ cookieString;
+				long /*int*/ cookieString;
 				if (rc == XPCOM.NS_OK && result[0] != 0) {
 					nsICookieService cookieService = new nsICookieService (result[0]);
 					result[0] = 0;
@@ -244,7 +244,7 @@ class Mozilla extends WebBrowser {
 			public void run() {
 				if (!Initialized) return;
 
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -258,7 +258,7 @@ class Mozilla extends WebBrowser {
 				nsIIOService ioService = new nsIIOService (result[0]);
 				result[0] = 0;
 				byte[] bytes = MozillaDelegate.wcsToMbcs (null, CookieUrl, false);
-				int /*long*/ aSpec = XPCOM.nsEmbedCString_new (bytes, bytes.length);
+				long /*int*/ aSpec = XPCOM.nsEmbedCString_new (bytes, bytes.length);
 				rc = ioService.NewURI (aSpec, null, 0, result);
 				XPCOM.nsEmbedCString_delete (aSpec);
 				ioService.Release ();
@@ -298,7 +298,7 @@ public void create (Composite parent, int style) {
 	delegate = new MozillaDelegate (browser);
 	final Display display = parent.getDisplay ();
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	if (!Initialized) {
 		boolean initLoaded = false;
 		boolean IsXULRunner = false;
@@ -353,20 +353,20 @@ public void create (Composite parent, int style) {
 			/* attempt to discover a XULRunner to use as the GRE */
 			GREVersionRange range = new GREVersionRange ();
 			byte[] bytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_LOWER, true);
-			int /*long*/ lower = C.malloc (bytes.length);
+			long /*int*/ lower = C.malloc (bytes.length);
 			C.memmove (lower, bytes, bytes.length);
 			range.lower = lower;
 			range.lowerInclusive = LowerRangeInclusive;
 
 			bytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_UPPER, true);
-			int /*long*/ upper = C.malloc (bytes.length);
+			long /*int*/ upper = C.malloc (bytes.length);
 			C.memmove (upper, bytes, bytes.length);
 			range.upper = upper;
 			range.upperInclusive = UpperRangeInclusive;
 
 			int length = XPCOMInit.PATH_MAX;
-			int /*long*/ greBuffer = C.malloc (length);
-			int /*long*/ propertiesPtr = C.malloc (2 * C.PTR_SIZEOF);
+			long /*int*/ greBuffer = C.malloc (length);
+			long /*int*/ propertiesPtr = C.malloc (2 * C.PTR_SIZEOF);
 			int rc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, propertiesPtr, 0, greBuffer, length);
 
 			/*
@@ -409,7 +409,7 @@ public void create (Composite parent, int style) {
 						if (Device.DEBUG) System.out.println ("cannot use detected XULRunner: " + mozillaPath); //$NON-NLS-1$
 
 						/* attempt to XPCOMGlueStartup the GRE pointed at by MOZILLA_FIVE_HOME */
-						int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
+						long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
 						if (ptr == 0) {
 							IsXULRunner = false;
 						} else {
@@ -473,7 +473,7 @@ public void create (Composite parent, int style) {
 			}
 
 			/* attempt to use the GRE pointed at by MOZILLA_FIVE_HOME */
-			int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
+			long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
 			if (ptr != 0) {
 				int length = C.strlen (ptr);
 				byte[] buffer = new byte[length];
@@ -547,7 +547,7 @@ public void create (Composite parent, int style) {
 				LocationProvider.setComponentsPath (componentsDir.getAbsolutePath ());
 			}
 
-			int /*long*/[] retVal = new int /*long*/[1];
+			long /*int*/[] retVal = new long /*int*/[1];
 			nsEmbedString pathString = new nsEmbedString (mozillaPath);
 			int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, retVal);
 			pathString.dispose ();
@@ -564,18 +564,18 @@ public void create (Composite parent, int style) {
 			if (IsXULRunner) {
 				int size = XPCOM.nsDynamicFunctionLoad_sizeof ();
 				/* alloc memory for two structs, the second is empty to signify the end of the list */
-				int /*long*/ ptr = C.malloc (size * 2);
+				long /*int*/ ptr = C.malloc (size * 2);
 				C.memset (ptr, 0, size * 2);
 				nsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();
 				byte[] bytes = MozillaDelegate.wcsToMbcs (null, "XRE_InitEmbedding", true); //$NON-NLS-1$
 				functionLoad.functionName = C.malloc (bytes.length);
 				C.memmove (functionLoad.functionName, bytes, bytes.length);
 				functionLoad.function = C.malloc (C.PTR_SIZEOF);
-				C.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);
+				C.memmove (functionLoad.function, new long /*int*/[] {0} , C.PTR_SIZEOF);
 				XPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());
 				XPCOM.XPCOMGlueLoadXULFunctions (ptr);
 				C.memmove (result, functionLoad.function, C.PTR_SIZEOF);
-				int /*long*/ functionPtr = result[0];
+				long /*int*/ functionPtr = result[0];
 				result[0] = 0;
 				C.free (functionLoad.function);
 				C.free (functionLoad.functionName);
@@ -744,14 +744,14 @@ public void create (Composite parent, int style) {
 
 			nsIFile profileDir = new nsIFile (result[0]);
 			result[0] = 0;
-			int /*long*/ path = XPCOM.nsEmbedCString_new ();
+			long /*int*/ path = XPCOM.nsEmbedCString_new ();
 			rc = profileDir.GetNativePath (path);
 			if (rc != XPCOM.NS_OK) {
 				browser.dispose ();
 				error (rc);
 			}
 			int length = XPCOM.nsEmbedCString_Length (path);
-			int /*long*/ ptr = XPCOM.nsEmbedCString_get (path);
+			long /*int*/ ptr = XPCOM.nsEmbedCString_get (path);
 			buffer = new byte [length];
 			XPCOM.memmove (buffer, ptr, length);
 			String profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;
@@ -801,11 +801,11 @@ public void create (Composite parent, int style) {
 				functionLoad.functionName = C.malloc (bytes.length);
 				C.memmove (functionLoad.functionName, bytes, bytes.length);
 				functionLoad.function = C.malloc (C.PTR_SIZEOF);
-				C.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);
+				C.memmove (functionLoad.function, new long /*int*/[] {0} , C.PTR_SIZEOF);
 				XPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());
 				XPCOM.XPCOMGlueLoadXULFunctions (ptr);
 				C.memmove (result, functionLoad.function, C.PTR_SIZEOF);
-				int /*long*/ functionPtr = result[0];
+				long /*int*/ functionPtr = result[0];
 				result[0] = 0;
 				C.free (functionLoad.function);
 				C.free (functionLoad.functionName);
@@ -1187,7 +1187,7 @@ public void create (Composite parent, int style) {
 			public void handleEvent (Event event) {
 				if (BrowserCount > 0) return; /* another display is still active */
 
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1258,18 +1258,18 @@ public void create (Composite parent, int style) {
 
 //					int size = XPCOM.nsDynamicFunctionLoad_sizeof ();
 //					/* alloc memory for two structs, the second is empty to signify the end of the list */
-//					int /*long*/ ptr = C.malloc (size * 2);
+//					long /*int*/ ptr = C.malloc (size * 2);
 //					C.memset (ptr, 0, size * 2);
 //					nsDynamicFunctionLoad functionLoad = new nsDynamicFunctionLoad ();
 //					byte[] bytes = MozillaDelegate.wcsToMbcs (null, "XRE_TermEmbedding", true); //$NON-NLS-1$
 //					functionLoad.functionName = C.malloc (bytes.length);
 //					C.memmove (functionLoad.functionName, bytes, bytes.length);
 //					functionLoad.function = C.malloc (C.PTR_SIZEOF);
-//					C.memmove (functionLoad.function, new int /*long*/[] {0} , C.PTR_SIZEOF);
+//					C.memmove (functionLoad.function, new long /*int*/[] {0} , C.PTR_SIZEOF);
 //					XPCOM.memmove (ptr, functionLoad, XPCOM.nsDynamicFunctionLoad_sizeof ());
 //					XPCOM.XPCOMGlueLoadXULFunctions (ptr);
 //					C.memmove (result, functionLoad.function, C.PTR_SIZEOF);
-//					int /*long*/ functionPtr = result[0];
+//					long /*int*/ functionPtr = result[0];
 //					result[0] = 0;
 //					C.free (functionLoad.function);
 //					C.free (functionLoad.functionName);
@@ -1530,7 +1530,7 @@ public void create (Composite parent, int style) {
 public boolean back () {
 	htmlBytes = null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1544,122 +1544,122 @@ public boolean back () {
 void createCOMInterfaces () {
 	// Create each of the interfaces that this object implements
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	weakReference = new XPCOMObject (new int[] {2, 0, 0, 2}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return QueryReferent (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return QueryReferent (args[0], args[1]);}
 	};
 
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 	
 	webBrowserChrome = new XPCOMObject (new int[] {2, 0, 0, 2, 1, 1, 1, 1, 0, 2, 0, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return SetStatus ((int)/*64*/args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetWebBrowser (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return SetWebBrowser (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetChromeFlags (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetChromeFlags ((int)/*64*/args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return DestroyBrowserWindow ();}
-		public int /*long*/ method9 (int /*long*/[] args) {return SizeBrowserTo ((int)/*64*/args[0], (int)/*64*/args[1]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return ShowAsModal ();}
-		public int /*long*/ method11 (int /*long*/[] args) {return IsWindowModal (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return ExitModalEventLoop ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return SetStatus ((int)/*64*/args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetWebBrowser (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return SetWebBrowser (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetChromeFlags (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetChromeFlags ((int)/*64*/args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return DestroyBrowserWindow ();}
+		public long /*int*/ method9 (long /*int*/[] args) {return SizeBrowserTo ((int)/*64*/args[0], (int)/*64*/args[1]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return ShowAsModal ();}
+		public long /*int*/ method11 (long /*int*/[] args) {return IsWindowModal (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return ExitModalEventLoop ((int)/*64*/args[0]);}
 	};
 	
 	webBrowserChromeFocus = new XPCOMObject (new int[] {2, 0, 0, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return FocusNextElement ();}
-		public int /*long*/ method4 (int /*long*/[] args) {return FocusPrevElement ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return FocusNextElement ();}
+		public long /*int*/ method4 (long /*int*/[] args) {return FocusPrevElement ();}
 	};
 		
 	embeddingSiteWindow = new XPCOMObject (new int[] {2, 0, 0, 5, 5, 0, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return SetDimensions ((int)/*64*/args[0], (int)/*64*/args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetDimensions ((int)/*64*/args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return SetFocus ();}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetVisibility (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetVisibility ((int)/*64*/args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetTitle (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetTitle (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetSiteWindow (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return SetDimensions ((int)/*64*/args[0], (int)/*64*/args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetDimensions ((int)/*64*/args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return SetFocus ();}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetVisibility (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetVisibility ((int)/*64*/args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetTitle (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetTitle (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetSiteWindow (args[0]);}
 	};
 	
 	interfaceRequestor = new XPCOMObject (new int[] {2, 0, 0, 2} ){
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return GetInterface (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return GetInterface (args[0], args[1]);}
 	};
 		
 	supportsWeakReference = new XPCOMObject (new int[] {2, 0, 0, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return GetWeakReference (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return GetWeakReference (args[0]);}
 	};
 	
 	contextMenuListener = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnShowContextMenu ((int)/*64*/args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnShowContextMenu ((int)/*64*/args[0], args[1], args[2]);}
 	};
 	
 	uriContentListener = new XPCOMObject (new int[] {2, 0, 0, 2, 5, 3, 4, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStartURIOpen (args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return DoContent (args[0], (int)/*64*/args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return IsPreferred (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return CanHandleContent (args[0], (int)/*64*/args[1], args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetLoadCookie (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return SetLoadCookie (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return GetParentContentListener (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return SetParentContentListener (args[0]);}		
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStartURIOpen (args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return DoContent (args[0], (int)/*64*/args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return IsPreferred (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return CanHandleContent (args[0], (int)/*64*/args[1], args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetLoadCookie (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return SetLoadCookie (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return GetParentContentListener (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return SetParentContentListener (args[0]);}		
 	};
 	
 	tooltipListener = new XPCOMObject (new int[] {2, 0, 0, 3, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnShowTooltip ((int)/*64*/args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnHideTooltip ();}		
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnShowTooltip ((int)/*64*/args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnHideTooltip ();}		
 	};
 
 	domEventListener = new XPCOMObject (new int[] {2, 0, 0, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return HandleEvent (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return HandleEvent (args[0]);}
 	};
 
 	badCertListener = new XPCOMObject (new int[] {2, 0, 0, 4}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return NotifyCertProblem (args[0], args[1], args[2], args[3]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return NotifyCertProblem (args[0], args[1], args[2], args[3]);}
 	};
 }
 
@@ -1738,7 +1738,7 @@ public boolean execute (String script) {
 	* workaround is to invoke the javascript handler directly via C++, which is
 	* exposed as of mozilla 1.9.
 	*/
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	if (!IsPre_1_9) {
 		int rc = XPCOM.NS_GetServiceManager (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -1785,12 +1785,12 @@ public boolean execute (String script) {
 			interfaceRequestor.Release ();
 
 			if (rc == XPCOM.NS_OK && result[0] != 0) {
-				int /*long*/ scriptGlobalObject = result[0];
+				long /*int*/ scriptGlobalObject = result[0];
 				result[0] = 0;
 				rc = (int/*64*/)XPCOM.nsIScriptGlobalObject_EnsureScriptEnvironment (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */
 				if (rc != XPCOM.NS_OK) error (rc);
-				int /*long*/ scriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */
-				int /*long*/ globalJSObject = XPCOM.nsIScriptGlobalObject_GetScriptGlobal (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */
+				long /*int*/ scriptContext = XPCOM.nsIScriptGlobalObject_GetScriptContext (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */
+				long /*int*/ globalJSObject = XPCOM.nsIScriptGlobalObject_GetScriptGlobal (scriptGlobalObject, 2); /* nsIProgrammingLanguage.JAVASCRIPT */
 				new nsISupports (scriptGlobalObject).Release ();
 
 				if (scriptContext != 0 && globalJSObject != 0) {
@@ -1801,7 +1801,7 @@ public boolean execute (String script) {
 						new nsISupports (result[0]).Release ();
 						result[0] = 0;
 
-						int /*long*/ nativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);
+						long /*int*/ nativeContext = XPCOM.nsIScriptContext_GetNativeContext (scriptContext);
 						if (nativeContext != 0) {
 							int length = script.length ();
 							char[] scriptChars = new char[length];
@@ -1809,7 +1809,7 @@ public boolean execute (String script) {
 							byte[] urlbytes = MozillaDelegate.wcsToMbcs (null, getUrl (), true);
 							rc = principal.GetJSPrincipals (nativeContext, result);
 							if (rc == XPCOM.NS_OK && result[0] != 0) {
-								int /*long*/ principals = result[0];
+								long /*int*/ principals = result[0];
 								result[0] = 0;
 								principal.Release ();
 								String mozillaPath = LocationProvider.mozillaPath + delegate.getJSLibraryName () + '\0';
@@ -1846,12 +1846,12 @@ public boolean execute (String script) {
 	return rc == XPCOM.NS_OK;
 }
 
-static Browser findBrowser (int /*long*/ handle) {
+static Browser findBrowser (long /*int*/ handle) {
 	return MozillaDelegate.findBrowser (handle);
 }
 
 static Browser findBrowser (nsIDOMWindow aDOMWindow) {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -1870,7 +1870,7 @@ static Browser findBrowser (nsIDOMWindow aDOMWindow) {
 	rc = aDOMWindow.GetTop (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
-	int /*long*/ topDOMWindow = result[0];
+	long /*int*/ topDOMWindow = result[0];
 	result[0] = 0;
 	rc = windowWatcher.GetChromeForWindow (topDOMWindow, result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -1898,7 +1898,7 @@ static Browser findBrowser (nsIDOMWindow aDOMWindow) {
 public boolean forward () {
 	htmlBytes = null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1919,7 +1919,7 @@ int getNextFunctionIndex () {
 }
 
 public String getText () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.GetContentDOMWindow (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1931,7 +1931,7 @@ public String getText () {
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
 	window.Release ();
 
-	int /*long*/ document = result[0];
+	long /*int*/ document = result[0];
 	result[0] = 0;
 	rc = XPCOM.NS_GetComponentManager (result);
 	if (rc != XPCOM.NS_OK) error (rc);
@@ -1948,12 +1948,12 @@ public String getText () {
 
 		nsIDOMSerializer_1_7 serializer = new nsIDOMSerializer_1_7 (result[0]);
 		result[0] = 0;
-		int /*long*/ string = XPCOM.nsEmbedString_new ();
+		long /*int*/ string = XPCOM.nsEmbedString_new ();
 		rc = serializer.SerializeToString (document, string);
 		serializer.Release ();
 
 		int length = XPCOM.nsEmbedString_Length (string);
-		int /*long*/ buffer = XPCOM.nsEmbedString_get (string);
+		long /*int*/ buffer = XPCOM.nsEmbedString_get (string);
 		chars = new char[length];
 		XPCOM.memmove (chars, buffer, length * 2);
 		XPCOM.nsEmbedString_delete (string);
@@ -1978,13 +1978,13 @@ public String getText () {
 }
 
 public String getUrl () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
 
 	nsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);
-	int /*long*/[] aCurrentURI = new int /*long*/[1];
+	long /*int*/[] aCurrentURI = new long /*int*/[1];
 	rc = webNavigation.GetCurrentURI (aCurrentURI);
 	if (rc != XPCOM.NS_OK) error (rc);
 	webNavigation.Release ();
@@ -1992,11 +1992,11 @@ public String getUrl () {
 	byte[] dest = null;
 	if (aCurrentURI[0] != 0) {
 		nsIURI uri = new nsIURI (aCurrentURI[0]);
-		int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 		rc = uri.GetSpec (aSpec);
 		if (rc != XPCOM.NS_OK) error (rc);
 		int length = XPCOM.nsEmbedCString_Length (aSpec);
-		int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+		long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 		dest = new byte[length];
 		XPCOM.memmove (dest, buffer, length);
 		XPCOM.nsEmbedCString_delete (aSpec);
@@ -2039,7 +2039,7 @@ public Object getWebBrowser () {
 }
 
 public boolean isBackEnabled () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2052,7 +2052,7 @@ public boolean isBackEnabled () {
 }
 
 public boolean isForwardEnabled () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2095,7 +2095,7 @@ void onDispose (Display display) {
 		listener = null;
 	}
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2139,7 +2139,7 @@ void onDispose (Display display) {
 }
 
 void Activate () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebBrowserFocus.NS_IWEBBROWSERFOCUS_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2151,7 +2151,7 @@ void Activate () {
 }
 
 void Deactivate () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebBrowserFocus.NS_IWEBBROWSERFOCUS_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2167,7 +2167,7 @@ void onResize () {
 	int width = Math.max (1, rect.width);
 	int height = Math.max (1, rect.height);
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2182,7 +2182,7 @@ void onResize () {
 public void refresh () {
 	htmlBytes = null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error(rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2244,7 +2244,7 @@ public boolean setText (String html) {
 	 */
 	delegate.removeWindowSubclass ();
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebBrowserStream.NS_IWEBBROWSERSTREAM_IID, result);
 	if (rc == XPCOM.NS_OK && result[0] != 0) {
 		/*
@@ -2277,9 +2277,9 @@ public boolean setText (String html) {
 		webNavigation.Release ();
 	} else {
 		byte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, "UTF-8", true);	//$NON-NLS-1$
-		int /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);
+		long /*int*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);
 		byte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, "text/html", true); // $NON-NLS-1$
-		int /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
+		long /*int*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
 
 		rc = XPCOM.NS_GetServiceManager (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -2300,7 +2300,7 @@ public boolean setText (String html) {
 		* is about:blank.  The fix is to specify the file protocol.
 		*/
 		byte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);
-		int /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
+		long /*int*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
 		rc = ioService.NewURI (aSpec, null, 0, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2345,7 +2345,7 @@ public boolean setText (String html) {
 public boolean setUrl (String url) {
 	htmlBytes = null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2368,7 +2368,7 @@ public boolean setUrl (String url) {
 public void stop () {
 	htmlBytes = null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2427,7 +2427,7 @@ void hookDOMListeners (nsIDOMEventTarget target, boolean isTop) {
 }
 
 void unhookDOMListeners () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.GetContentDOMWindow (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2518,73 +2518,73 @@ void unhookDOMListeners (nsIDOMEventTarget target) {
 
 /* nsISupports */
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWeakReference.NS_IWEAKREFERENCE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebBrowserChrome.NS_IWEBBROWSERCHROME_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebBrowserChromeFocus.NS_IWEBBROWSERCHROMEFOCUS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIEmbeddingSiteWindow.NS_IEMBEDDINGSITEWINDOW_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsISupportsWeakReference.NS_ISUPPORTSWEAKREFERENCE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIContextMenuListener.NS_ICONTEXTMENULISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIURIContentListener.NS_IURICONTENTLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsITooltipListener.NS_ITOOLTIPLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIBadCertListener2.NS_IBADCERTLISTENER2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {badCertListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {badCertListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -2601,18 +2601,18 @@ int Release () {
 
 /* nsIWeakReference */	
 	
-int QueryReferent (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryReferent (long /*int*/ riid, long /*int*/ ppvObject) {
 	return QueryInterface (riid, ppvObject);
 }
 
 /* nsIInterfaceRequestor */
 
-int GetInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int GetInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	if (guid.Equals (nsIDOMWindow.NS_IDOMWINDOW_IID)) {
-		int /*long*/[] aContentDOMWindow = new int /*long*/[1];
+		long /*int*/[] aContentDOMWindow = new long /*int*/[1];
 		int rc = webBrowser.GetContentDOMWindow (aContentDOMWindow);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (aContentDOMWindow[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2622,18 +2622,18 @@ int GetInterface (int /*long*/ riid, int /*long*/ ppvObject) {
 	return QueryInterface (riid, ppvObject);
 }
 
-int GetWeakReference (int /*long*/ ppvObject) {
-	XPCOM.memmove (ppvObject, new int /*long*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
+int GetWeakReference (long /*int*/ ppvObject) {
+	XPCOM.memmove (ppvObject, new long /*int*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
 	AddRef ();
 	return XPCOM.NS_OK;
 }
 
 /* nsIWebProgressListener */
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_IS_DOCUMENT) == 0) return XPCOM.NS_OK;
 	if ((aStateFlags & nsIWebProgressListener.STATE_START) != 0) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 
 		/*
 		* When navigating to a site that is known to have a bad certificate, request notification
@@ -2676,7 +2676,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 		* received for every window in a page, which is when these listeners
 		* are typically added.
 		*/
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsIWebProgress progress = new nsIWebProgress (aWebProgress);
 		int rc = progress.GetDOMWindow (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -2718,11 +2718,11 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 		 */
 		if (htmlBytes != null) {
 			nsIRequest req = new nsIRequest (aRequest);
-			int /*long*/ name = XPCOM.nsEmbedCString_new ();
+			long /*int*/ name = XPCOM.nsEmbedCString_new ();
 			rc = req.GetName (name);
 			if (rc != XPCOM.NS_OK) error (rc);
 			int length = XPCOM.nsEmbedCString_Length (name);
-			int /*long*/ buffer = XPCOM.nsEmbedCString_get (name);
+			long /*int*/ buffer = XPCOM.nsEmbedCString_get (name);
 			byte[] dest = new byte[length];
 			XPCOM.memmove (dest, buffer, length);
 			String url = new String (dest);
@@ -2755,7 +2755,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 				* is about:blank.  The fix is to specify the file protocol.
 				*/
 				byte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);
-				int /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
+				long /*int*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
 				rc = ioService.NewURI (aSpec, null, 0, result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2773,15 +2773,15 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 				result[0] = 0;
 
 				byte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, "text/html", true); // $NON-NLS-1$
-				int /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
+				long /*int*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
 
 				rc = stream.OpenStream (uri.getAddress (), aContentType);
 				if (rc != XPCOM.NS_OK) error (rc);
-				int /*long*/ ptr = C.malloc (htmlBytes.length);
+				long /*int*/ ptr = C.malloc (htmlBytes.length);
 				XPCOM.memmove (ptr, htmlBytes, htmlBytes.length);
 				int pageSize = 8192;
 				int pageCount = htmlBytes.length / pageSize + 1;
-				int /*long*/ current = ptr;
+				long /*int*/ current = ptr;
 				for (int i = 0; i < pageCount; i++) {
 					length = i == pageCount - 1 ? htmlBytes.length % pageSize : pageSize;
 					if (length > 0) {
@@ -2872,7 +2872,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 		* Hook DOM listeners to the page's nsIDOMWindow here because this is
 		* the earliest opportunity to do so.    
 		*/
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsIWebProgress progress = new nsIWebProgress (aWebProgress);
 		int rc = progress.GetDOMWindow (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -2911,7 +2911,7 @@ int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateF
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	if (progressListeners.length == 0) return XPCOM.NS_OK;
 	ProgressEvent event = new ProgressEvent (browser);
 	event.display = browser.getDisplay ();
@@ -2924,7 +2924,7 @@ int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCur
 	return XPCOM.NS_OK;
 }
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	/*
 	* Feature in Mozilla.  When a page is loaded via setText before a previous
 	* setText page load has completed, the expected OnStateChange STATE_STOP for the
@@ -2939,13 +2939,13 @@ int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*lo
 	if (locationListeners.length == 0) return XPCOM.NS_OK;
 
 	nsIWebProgress webProgress = new nsIWebProgress (aWebProgress);
-	int /*long*/[] aDOMWindow = new int /*long*/[1];
+	long /*int*/[] aDOMWindow = new long /*int*/[1];
 	int rc = webProgress.GetDOMWindow (aDOMWindow);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (aDOMWindow[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
 	
 	nsIDOMWindow domWindow = new nsIDOMWindow (aDOMWindow[0]);
-	int /*long*/[] aTop = new int /*long*/[1];
+	long /*int*/[] aTop = new long /*int*/[1];
 	rc = domWindow.GetTop (aTop);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (aTop[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2955,10 +2955,10 @@ int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*lo
 	topWindow.Release ();
 	
 	nsIURI location = new nsIURI (aLocation);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	location.GetSpec (aSpec);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
@@ -2988,7 +2988,7 @@ int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*lo
 	return XPCOM.NS_OK;
 }
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	if (statusTextListeners.length == 0) return XPCOM.NS_OK;
 	StatusTextEvent event = new StatusTextEvent (browser);
 	event.display = browser.getDisplay ();
@@ -3003,13 +3003,13 @@ int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatu
 	return XPCOM.NS_OK;
 }		
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 
 /* nsIWebBrowserChrome */
 
-int SetStatus (int statusType, int /*long*/ status) {
+int SetStatus (int statusType, long /*int*/ status) {
 	if (statusTextListeners.length == 0) return XPCOM.NS_OK;
 	StatusTextEvent event = new StatusTextEvent (browser);
 	event.display = browser.getDisplay ();
@@ -3025,8 +3025,8 @@ int SetStatus (int statusType, int /*long*/ status) {
 	return XPCOM.NS_OK;
 }
 
-int GetWebBrowser (int /*long*/ aWebBrowser) {
-	int /*long*/[] ret = new int /*long*/[1];	
+int GetWebBrowser (long /*int*/ aWebBrowser) {
+	long /*int*/[] ret = new long /*int*/[1];	
 	if (webBrowser != null) {
 		webBrowser.AddRef ();
 		ret[0] = webBrowser.getAddress ();	
@@ -3035,13 +3035,13 @@ int GetWebBrowser (int /*long*/ aWebBrowser) {
 	return XPCOM.NS_OK;
 }
 
-int SetWebBrowser (int /*long*/ aWebBrowser) {
+int SetWebBrowser (long /*int*/ aWebBrowser) {
 	if (webBrowser != null) webBrowser.Release ();
 	webBrowser = aWebBrowser != 0 ? new nsIWebBrowser (aWebBrowser) : null;  				
 	return XPCOM.NS_OK;
 }
    
-int GetChromeFlags (int /*long*/ aChromeFlags) {
+int GetChromeFlags (long /*int*/ aChromeFlags) {
 	int[] ret = new int[1];
 	ret[0] = chromeFlags;
 	XPCOM.memmove (aChromeFlags, ret, 4); /* PRUint32 */
@@ -3081,7 +3081,7 @@ int SizeBrowserTo (int aCX, int aCY) {
 }
 
 int ShowAsModal () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3111,7 +3111,7 @@ int ShowAsModal () {
 	return XPCOM.NS_OK;
 }
 
-int IsWindowModal (int /*long*/ retval) {
+int IsWindowModal (long /*int*/ retval) {
 	int result = (chromeFlags & nsIWebBrowserChrome.CHROME_MODAL) != 0 ? 1 : 0;
 	XPCOM.memmove (retval, new int[] {result}, 4); /* PRBool */
 	return XPCOM.NS_OK;
@@ -3137,7 +3137,7 @@ int SetDimensions (int flags, int x, int y, int cx, int cy) {
 	return XPCOM.NS_OK;
 }
 
-int GetDimensions (int flags, int /*long*/ x, int /*long*/ y, int /*long*/ cx, int /*long*/ cy) {
+int GetDimensions (int flags, long /*int*/ x, long /*int*/ y, long /*int*/ cx, long /*int*/ cy) {
 	if ((flags & nsIEmbeddingSiteWindow.DIM_FLAGS_POSITION) != 0) {
 		Point location = browser.getShell ().getLocation ();
 		if (x != 0) C.memmove (x, new int[] {location.x}, 4); /* PRInt32 */
@@ -3157,7 +3157,7 @@ int GetDimensions (int flags, int /*long*/ x, int /*long*/ y, int /*long*/ cx, i
 }
 
 int SetFocus () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -3175,7 +3175,7 @@ int SetFocus () {
 	return XPCOM.NS_OK;     	
 }	
 
-int GetVisibility (int /*long*/ aVisibility) {
+int GetVisibility (long /*int*/ aVisibility) {
 	boolean visible = browser.isVisible () && !browser.getShell ().getMinimized ();
 	XPCOM.memmove (aVisibility, new int[] {visible ? 1 : 0}, 4); /* PRBool */
 	return XPCOM.NS_OK;
@@ -3218,11 +3218,11 @@ int SetVisibility (int aVisibility) {
 	return XPCOM.NS_OK;     	
 }
 
-int GetTitle (int /*long*/ aTitle) {
+int GetTitle (long /*int*/ aTitle) {
 	return XPCOM.NS_OK;     	
 }
  
-int SetTitle (int /*long*/ aTitle) {
+int SetTitle (long /*int*/ aTitle) {
 	if (titleListeners.length == 0) return XPCOM.NS_OK;
 	TitleEvent event = new TitleEvent (browser);
 	event.display = browser.getDisplay ();
@@ -3246,7 +3246,7 @@ int SetTitle (int /*long*/ aTitle) {
 	return XPCOM.NS_OK;     	
 }
 
-int GetSiteWindow (int /*long*/ aSiteWindow) {
+int GetSiteWindow (long /*int*/ aSiteWindow) {
 	/*
 	* Note.  The handle is expected to be an HWND on Windows and
 	* a GtkWidget* on GTK.  This callback is invoked on Windows
@@ -3254,7 +3254,7 @@ int GetSiteWindow (int /*long*/ aSiteWindow) {
 	* dialog comes up. If no handle is returned, the print dialog
 	* does not come up on this platform.  
 	*/
-	XPCOM.memmove (aSiteWindow, new int /*long*/[] {embedHandle}, C.PTR_SIZEOF);
+	XPCOM.memmove (aSiteWindow, new long /*int*/[] {embedHandle}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;     	
 }  
  
@@ -3294,9 +3294,9 @@ int FocusPrevElement () {
 
 /* nsIContextMenuListener */
 
-int OnShowContextMenu (int aContextFlags, int /*long*/ aEvent, int /*long*/ aNode) {
+int OnShowContextMenu (int aContextFlags, long /*int*/ aEvent, long /*int*/ aNode) {
 	nsIDOMEvent domEvent = new nsIDOMEvent (aEvent);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = domEvent.QueryInterface (nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3326,15 +3326,15 @@ int OnShowContextMenu (int aContextFlags, int /*long*/ aEvent, int /*long*/ aNod
 
 /* nsIURIContentListener */
 
-int OnStartURIOpen (int /*long*/ aURI, int /*long*/ retval) {
+int OnStartURIOpen (long /*int*/ aURI, long /*int*/ retval) {
 	if (isRetrievingBadCert) return XPCOM.NS_OK;
 	authCount = 0;
 
 	nsIURI location = new nsIURI (aURI);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	location.GetSpec (aSpec);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
@@ -3383,7 +3383,7 @@ int OnStartURIOpen (int /*long*/ aURI, int /*long*/ retval) {
 				if (jsEnabledChanged) {
 					jsEnabledChanged = false;
 	
-					int /*long*/[] result = new int /*long*/[1];
+					long /*int*/[] result = new long /*int*/[1];
 					int rc = webBrowser.QueryInterface (nsIWebBrowserSetup.NS_IWEBBROWSERSETUP_IID, result);
 					if (rc != XPCOM.NS_OK) error (rc);
 					if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3402,11 +3402,11 @@ int OnStartURIOpen (int /*long*/ aURI, int /*long*/ retval) {
 	return XPCOM.NS_OK;
 }
 
-int DoContent (int /*long*/ aContentType, int aIsContentPreferred, int /*long*/ aRequest, int /*long*/ aContentHandler, int /*long*/ retval) {
+int DoContent (long /*int*/ aContentType, int aIsContentPreferred, long /*int*/ aRequest, long /*int*/ aContentHandler, long /*int*/ retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int IsPreferred (int /*long*/ aContentType, int /*long*/ aDesiredContentType, int /*long*/ retval) {
+int IsPreferred (long /*int*/ aContentType, long /*int*/ aDesiredContentType, long /*int*/ retval) {
 	boolean preferred = false;
 	int size = XPCOM.strlen (aContentType);
 	if (size > 0) {
@@ -3417,7 +3417,7 @@ int IsPreferred (int /*long*/ aContentType, int /*long*/ aDesiredContentType, in
 		/* do not attempt to handle known problematic content types */
 		if (!contentType.equals (XPCOM.CONTENT_MAYBETEXT) && !contentType.equals (XPCOM.CONTENT_MULTIPART)) {
 			/* determine whether browser can handle the content type */
-			int /*long*/[] result = new int /*long*/[1];
+			long /*int*/[] result = new long /*int*/[1];
 			int rc = XPCOM.NS_GetServiceManager (result);
 			if (rc != XPCOM.NS_OK) error (rc);
 			if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3429,7 +3429,7 @@ int IsPreferred (int /*long*/ aContentType, int /*long*/ aDesiredContentType, in
 			rc = serviceManager.GetServiceByContractID (aContractID, nsIWebNavigationInfo.NS_IWEBNAVIGATIONINFO_IID, result);
 			if (rc == XPCOM.NS_OK) {
 				byte[] bytes = MozillaDelegate.wcsToMbcs (null, contentType, true);
-				int /*long*/ typePtr = XPCOM.nsEmbedCString_new (bytes, bytes.length);
+				long /*int*/ typePtr = XPCOM.nsEmbedCString_new (bytes, bytes.length);
 				nsIWebNavigationInfo info = new nsIWebNavigationInfo (result[0]);
 				result[0] = 0;
 				int[] isSupportedResult = new int[1]; /* PRUint32 */
@@ -3459,34 +3459,34 @@ int IsPreferred (int /*long*/ aContentType, int /*long*/ aDesiredContentType, in
 
 	XPCOM.memmove(retval, new int[] {preferred ? 1 : 0}, 4); /* PRBool */
 	if (preferred) {
-		XPCOM.memmove (aDesiredContentType, new int /*long*/[] {0}, C.PTR_SIZEOF);
+		XPCOM.memmove (aDesiredContentType, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	}
 	return XPCOM.NS_OK;
 }
 
-int CanHandleContent (int /*long*/ aContentType, int aIsContentPreferred, int /*long*/ aDesiredContentType, int /*long*/ retval) {
+int CanHandleContent (long /*int*/ aContentType, int aIsContentPreferred, long /*int*/ aDesiredContentType, long /*int*/ retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetLoadCookie (int /*long*/ aLoadCookie) {
+int GetLoadCookie (long /*int*/ aLoadCookie) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetLoadCookie (int /*long*/ aLoadCookie) {
+int SetLoadCookie (long /*int*/ aLoadCookie) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetParentContentListener (int /*long*/ aParentContentListener) {
+int GetParentContentListener (long /*int*/ aParentContentListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 	
-int SetParentContentListener (int /*long*/ aParentContentListener) {
+int SetParentContentListener (long /*int*/ aParentContentListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsITooltipListener */
 
-int OnShowTooltip (int aXCoords, int aYCoords, int /*long*/ aTipText) {
+int OnShowTooltip (int aXCoords, int aYCoords, long /*int*/ aTipText) {
 	int length = XPCOM.strlen_PRUnichar (aTipText);
 	char[] dest = new char[length];
 	XPCOM.memmove (dest, aTipText, length * 2);
@@ -3524,21 +3524,21 @@ int OnHideTooltip () {
 
 /* nsIDOMEventListener */
 
-int HandleEvent (int /*long*/ event) {
+int HandleEvent (long /*int*/ event) {
 	nsIDOMEvent domEvent = new nsIDOMEvent (event);
 
-	int /*long*/ type = XPCOM.nsEmbedString_new ();
+	long /*int*/ type = XPCOM.nsEmbedString_new ();
 	int rc = domEvent.GetType (type);
 	if (rc != XPCOM.NS_OK) error (rc);
 	int length = XPCOM.nsEmbedString_Length (type);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (type);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (type);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	String typeString = new String (chars);
 	XPCOM.nsEmbedString_delete (type);
 
 	if (XPCOM.DOMEVENT_UNLOAD.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.GetCurrentTarget (result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3555,7 +3555,7 @@ int HandleEvent (int /*long*/ event) {
 	}
 
 	if (XPCOM.DOMEVENT_KEYDOWN.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3663,7 +3663,7 @@ int HandleEvent (int /*long*/ event) {
 			case SWT.SCROLL_LOCK: return XPCOM.NS_OK;
 		}
 
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3713,7 +3713,7 @@ int HandleEvent (int /*long*/ event) {
 	}
 
 	if (XPCOM.DOMEVENT_KEYUP.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3770,7 +3770,7 @@ int HandleEvent (int /*long*/ event) {
 
 	/* mouse event */
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = domEvent.QueryInterface (nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3876,10 +3876,10 @@ int HandleEvent (int /*long*/ event) {
 
 /* nsIBadCertListener2 */
 
-int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*/ targetSite, int /*long*/ _suppressError) {
+int NotifyCertProblem (long /*int*/ socketInfo, long /*int*/ status, long /*int*/ targetSite, long /*int*/ _suppressError) {
 	/* determine the host name and port */
 	int length = XPCOM.nsEmbedCString_Length (targetSite);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (targetSite);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (targetSite);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	final String urlPort = new String (dest);
@@ -3889,7 +3889,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 
 	/* create text descriptions of the certificate problem(s) */
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	nsISupports supports = new nsISupports (status);
 	int rc = supports.QueryInterface (nsISSLStatus.NS_ISSLSTATUS_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
@@ -3909,7 +3909,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 
 	rc = sslStatus.GetIsDomainMismatch (intResult);
 	if (intResult[0] != 0) {
-		int /*long*/ ptr = XPCOM.nsEmbedString_new ();
+		long /*int*/ ptr = XPCOM.nsEmbedString_new ();
 		rc = cert.GetCommonName (ptr);
 		if (rc != XPCOM.NS_OK) SWT.error (rc);
 		length = XPCOM.nsEmbedString_Length (ptr);
@@ -3932,7 +3932,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 		nsIX509CertValidity validity = new nsIX509CertValidity(result[0]);
 		result[0] = 0;
 
-		int /*long*/ ptr = XPCOM.nsEmbedString_new ();
+		long /*int*/ ptr = XPCOM.nsEmbedString_new ();
 		rc = validity.GetNotBeforeGMT (ptr);
 		if (rc != XPCOM.NS_OK) SWT.error (rc);
 		length = XPCOM.nsEmbedString_Length (ptr);
@@ -3961,7 +3961,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 
 	rc = sslStatus.GetIsUntrusted (intResult);
 	if (intResult[0] != 0) {
-		int /*long*/ ptr = XPCOM.nsEmbedString_new ();
+		long /*int*/ ptr = XPCOM.nsEmbedString_new ();
 		rc = cert.GetIssuerCommonName (ptr);
 		if (rc != XPCOM.NS_OK) SWT.error (rc);
 		length = XPCOM.nsEmbedString_Length (ptr);
@@ -3991,7 +3991,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 
 			String message = Compatibility.getMessage ("SWT_InvalidCert_Message", new String[] {urlPort}); //$NON-NLS-1$
 			if (new PromptDialog (browser.getShell ()).invalidCert (browser, message, finalProblems, cert)) {
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -4007,7 +4007,7 @@ int NotifyCertProblem (int /*long*/ socketInfo, int /*long*/ status, int /*long*
 				nsICertOverrideService overrideService = new nsICertOverrideService (result[0]);
 				result[0] = 0;
 				byte[] hostBytes = MozillaDelegate.wcsToMbcs (null, host, false);
-				int /*long*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);
+				long /*int*/ hostString = XPCOM.nsEmbedCString_new (hostBytes, hostBytes.length);
 				rc = overrideService.RememberValidityOverride (hostString, port, cert.getAddress (), finalFlags, 1);
 				browser.setUrl (url);
 				XPCOM.nsEmbedCString_delete (hostString);
diff --git a/org/eclipse/swt/browser/MozillaDelegate.java b/org/eclipse/swt/browser/MozillaDelegate.java
index 76a5d83..f2e31ce 100644
--- a/org/eclipse/swt/browser/MozillaDelegate.java
+++ b/org/eclipse/swt/browser/MozillaDelegate.java
@@ -19,11 +19,11 @@ import org.eclipse.swt.widgets.*;
 
 class MozillaDelegate {
 	Browser browser;
-	int /*long*/ mozillaHandle, embedHandle;
+	long /*int*/ mozillaHandle, embedHandle;
 	boolean hasFocus;
 	Listener listener;
 	static Callback eventCallback;
-	static int /*long*/ eventProc;
+	static long /*int*/ eventProc;
 	static final int STOP_PROPOGATE = 1;
 
 	static boolean IsSparc;
@@ -47,8 +47,8 @@ MozillaDelegate (Browser browser) {
 	this.browser = browser;
 }
 
-static int /*long*/ eventProc (int /*long*/ handle, int /*long*/ gdkEvent, int /*long*/ pointer) {
-	int /*long*/ parent = OS.gtk_widget_get_parent (handle);
+static long /*int*/ eventProc (long /*int*/ handle, long /*int*/ gdkEvent, long /*int*/ pointer) {
+	long /*int*/ parent = OS.gtk_widget_get_parent (handle);
 	parent = OS.gtk_widget_get_parent (parent);
 	if (parent == 0) return 0;
 	Widget widget = Display.getCurrent ().findWidget (parent);
@@ -58,12 +58,12 @@ static int /*long*/ eventProc (int /*long*/ handle, int /*long*/ gdkEvent, int /
 	return 0;
 }
 
-static Browser findBrowser (int /*long*/ handle) {
+static Browser findBrowser (long /*int*/ handle) {
 	/*
 	* Note.  On GTK, Mozilla is embedded into a GtkHBox handle
 	* and not directly into the parent Composite handle.
 	*/
-	int /*long*/ parent = OS.gtk_widget_get_parent (handle);
+	long /*int*/ parent = OS.gtk_widget_get_parent (handle);
 	Display display = Display.getCurrent ();
 	return (Browser)display.findWidget (parent); 
 }
@@ -83,7 +83,7 @@ int createBaseWindow (nsIBaseWindow baseWindow) {
 	return baseWindow.Create ();
 }
 
-int /*long*/ getHandle () {
+long /*int*/ getHandle () {
 	/*
 	* Bug in Mozilla Linux GTK.  Embedding Mozilla into a GtkFixed
 	* handle causes problems with some Mozilla plug-ins.  For some
@@ -112,7 +112,7 @@ String getSWTInitLibraryName () {
 	return "swt-xpcominit"; //$NON-NLS-1$
 }
 
-int /*long*/ gtk_event (int /*long*/ handle, int /*long*/ gdkEvent, int /*long*/ pointer) {
+long /*int*/ gtk_event (long /*int*/ handle, long /*int*/ gdkEvent, long /*int*/ pointer) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	if (event.type == OS.GDK_BUTTON_PRESS) {
@@ -178,7 +178,7 @@ void init () {
 	* forward the event to the parent embedder before Mozilla received and consumed
 	* them.
 	*/
-	int /*long*/ list = OS.gtk_container_get_children (embedHandle);
+	long /*int*/ list = OS.gtk_container_get_children (embedHandle);
 	if (list != 0) {
 		mozillaHandle = OS.g_list_data (list);
 		OS.g_list_free (list);
@@ -204,7 +204,7 @@ boolean needsSpinup () {
 	return true;
 }
 
-void onDispose (int /*long*/ embedHandle) {
+void onDispose (long /*int*/ embedHandle) {
 	if (listener != null) {
 		browser.getDisplay ().removeFilter (SWT.FocusIn, listener);
 		browser.getShell ().removeListener (SWT.Deactivate, listener);
@@ -216,7 +216,7 @@ void onDispose (int /*long*/ embedHandle) {
 void removeWindowSubclass () {
 }
 
-void setSize (int /*long*/ embedHandle, int width, int height) {
+void setSize (long /*int*/ embedHandle, int width, int height) {
 	OS.gtk_widget_set_size_request (embedHandle, width, height);
 }
 
diff --git a/org/eclipse/swt/browser/PromptDialog.java b/org/eclipse/swt/browser/PromptDialog.java
index df42674..d46c2f5 100644
--- a/org/eclipse/swt/browser/PromptDialog.java
+++ b/org/eclipse/swt/browser/PromptDialog.java
@@ -141,7 +141,7 @@ class PromptDialog extends Dialog {
 		viewCertButton.setText(Compatibility.getMessage("View Certificate")); //$NON-NLS-1$
 		viewCertButton.addListener(SWT.Selection, new Listener() {
 			public void handleEvent(Event event) {
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 				if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
diff --git a/org/eclipse/swt/browser/PromptService2.java b/org/eclipse/swt/browser/PromptService2.java
index e41b97a..cd60ce5 100644
--- a/org/eclipse/swt/browser/PromptService2.java
+++ b/org/eclipse/swt/browser/PromptService2.java
@@ -33,41 +33,41 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	promptService = new XPCOMObject (new int[] {2, 0, 0, 3, 5, 4, 6, 10, 7, 8, 7, 7}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Alert (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Alert (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
 	};
 	
 	promptService2 = new XPCOMObject (new int[] {2, 0, 0, 3, 5, 4, 6, 10, 7, 8, 7, 7, 7, 9}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Alert (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return PromptAuth (args[0], args[1], (int)/*64*/args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return AsyncPromptAuth (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5], args[6], args[7], args[8]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Alert (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return PromptAuth (args[0], args[1], (int)/*64*/args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return AsyncPromptAuth (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5], args[6], args[7], args[8]);}
 	};
 }
 
@@ -86,32 +86,32 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return promptService2.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIPromptService.NS_IPROMPTSERVICE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIPromptService2.NS_IPROMPTSERVICE2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {promptService2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {promptService2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -121,13 +121,13 @@ int Release () {
 	return refCount;
 }
 
-Browser getBrowser (int /*long*/ aDOMWindow) {
+Browser getBrowser (long /*int*/ aDOMWindow) {
 	if (aDOMWindow == 0) return null;
 	nsIDOMWindow window = new nsIDOMWindow (aDOMWindow);
 	return Mozilla.findBrowser (window);
 }
 
-String getLabel (int buttonFlag, int index, int /*long*/ buttonTitle) {
+String getLabel (int buttonFlag, int index, long /*int*/ buttonTitle) {
 	String label = null;
 	int flag = (buttonFlag & (0xff * index)) / index;
 	switch (flag) {
@@ -148,7 +148,7 @@ String getLabel (int buttonFlag, int index, int /*long*/ buttonTitle) {
 
 /* nsIPromptService */
 
-int Alert (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText) {
+int Alert (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText) {
 	final Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -188,7 +188,7 @@ int Alert (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText)
 	return XPCOM.NS_OK;
 }
 
-int AlertCheck (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aCheckMsg, int /*long*/ aCheckState) {
+int AlertCheck (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aCheckMsg, long /*int*/ aCheckState) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -215,11 +215,11 @@ int AlertCheck (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aT
 	return XPCOM.NS_OK;
 }
 
-int AsyncPromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int /*long*/ aCallback, int /*long*/ aContext, int level, int /*long*/ authInfo, int /*long*/ checkboxLabel, int /*long*/ checkValue, int /*long*/ _retval) {
+int AsyncPromptAuth(long /*int*/ aParent, long /*int*/ aChannel, long /*int*/ aCallback, long /*int*/ aContext, int level, long /*int*/ authInfo, long /*int*/ checkboxLabel, long /*int*/ checkValue, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Confirm (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ _retval) {
+int Confirm (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -242,11 +242,11 @@ int Confirm (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText
 	return XPCOM.NS_OK;
 }
 
-int ConfirmCheck (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int ConfirmCheck (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int ConfirmEx (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int aButtonFlags, int /*long*/ aButton0Title, int /*long*/ aButton1Title, int /*long*/ aButton2Title, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int ConfirmEx (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, int aButtonFlags, long /*int*/ aButton0Title, long /*int*/ aButton1Title, long /*int*/ aButton2Title, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -288,7 +288,7 @@ int ConfirmEx (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aTe
 	return XPCOM.NS_OK;
 }
 
-int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aValue, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int Prompt (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aValue, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	String titleLabel = null, textLabel, checkLabel = null;
 	String[] valueLabel = new String[1];
@@ -306,7 +306,7 @@ int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText,
 	XPCOM.memmove (dest, aText, length * 2);
 	textLabel = new String (dest);
 	
-	int /*long*/[] valueAddr = new int /*long*/[1];
+	long /*int*/[] valueAddr = new long /*int*/[1];
 	XPCOM.memmove (valueAddr, aValue, C.PTR_SIZEOF);
 	if (valueAddr[0] != 0) {
 		length = XPCOM.strlen_PRUnichar (valueAddr[0]);
@@ -337,7 +337,7 @@ int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText,
 		* value that we override must be freed using the nsIMemory service.
 		*/
 		if (valueLabel[0] != null) {
-			int /*long*/[] result2 = new int /*long*/[1];
+			long /*int*/[] result2 = new long /*int*/[1];
 			int rc = XPCOM.NS_GetServiceManager (result2);
 			if (rc != XPCOM.NS_OK) SWT.error (rc);
 			if (result2[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);
@@ -357,9 +357,9 @@ int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText,
 			char[] buffer = new char[cnt + 1];
 			valueLabel[0].getChars (0, cnt, buffer, 0);
 			int size = buffer.length * 2;
-			int /*long*/ ptr = memory.Alloc (size);
+			long /*int*/ ptr = memory.Alloc (size);
 			XPCOM.memmove (ptr, buffer, size);
-			XPCOM.memmove (aValue, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+			XPCOM.memmove (aValue, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 
 			if (valueAddr[0] != 0) {
 				memory.Free (valueAddr[0]);
@@ -371,7 +371,7 @@ int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText,
 	return XPCOM.NS_OK;
 }
 
-int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*long*/ authInfo, int /*long*/ checkboxLabel, int /*long*/ checkboxValue, int /*long*/ _retval) {
+int PromptAuth(long /*int*/ aParent, long /*int*/ aChannel, int level, long /*int*/ authInfo, long /*int*/ checkboxLabel, long /*int*/ checkboxValue, long /*int*/ _retval) {
 	nsIAuthInformation auth = new nsIAuthInformation (authInfo);
 
 	Browser browser = getBrowser (aParent);
@@ -425,11 +425,11 @@ int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*lon
 
 	/* get initial username and password values */
 
-	int /*long*/ ptr = XPCOM.nsEmbedString_new ();
+	long /*int*/ ptr = XPCOM.nsEmbedString_new ();
 	int rc = auth.GetUsername (ptr);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	int length = XPCOM.nsEmbedString_Length (ptr);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (ptr);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	userLabel[0] = new String (chars);
@@ -458,13 +458,13 @@ int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*lon
 	XPCOM.nsEmbedString_delete (ptr);
 
 	nsIChannel channel = new nsIChannel (aChannel);
-	int /*long*/[] uri = new int /*long*/[1];
+	long /*int*/[] uri = new long /*int*/[1];
 	rc = channel.GetURI (uri);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	if (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
 
 	nsIURI nsURI = new nsIURI (uri[0]);
-	int /*long*/ host = XPCOM.nsEmbedCString_new ();
+	long /*int*/ host = XPCOM.nsEmbedCString_new ();
 	rc = nsURI.GetHost (host);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	length = XPCOM.nsEmbedCString_Length (host);
@@ -505,7 +505,7 @@ int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*lon
 	return XPCOM.NS_OK;
 }
 
-int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aUsername, int /*long*/ aPassword, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int PromptUsernameAndPassword (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aUsername, long /*int*/ aPassword, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	String user = null, password = null;
 
@@ -556,7 +556,7 @@ int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle,
 		XPCOM.memmove (dest, aText, length * 2);
 		textLabel = new String (dest);
 
-		int /*long*/[] userAddr = new int /*long*/[1];
+		long /*int*/[] userAddr = new long /*int*/[1];
 		XPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);
 		if (userAddr[0] != 0) {
 			length = XPCOM.strlen_PRUnichar (userAddr[0]);
@@ -565,7 +565,7 @@ int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle,
 			userLabel[0] = new String (dest);		
 		}
 
-		int /*long*/[] passAddr = new int /*long*/[1];
+		long /*int*/[] passAddr = new long /*int*/[1];
 		XPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);
 		if (passAddr[0] != 0) {
 			length = XPCOM.strlen_PRUnichar (passAddr[0]);
@@ -603,12 +603,12 @@ int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle,
 		* User name and password are returned as PRUnichar values. Any default
 		* value that we override must be freed using the nsIMemory service.
 		*/
-		int /*long*/[] userAddr = new int /*long*/[1];
+		long /*int*/[] userAddr = new long /*int*/[1];
 		XPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);
-		int /*long*/[] passAddr = new int /*long*/[1];
+		long /*int*/[] passAddr = new long /*int*/[1];
 		XPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);
 
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		int rc = XPCOM.NS_GetServiceManager (result);
 		if (rc != XPCOM.NS_OK) SWT.error (rc);
 		if (result[0] == 0) SWT.error (XPCOM.NS_NOINTERFACE);
@@ -633,9 +633,9 @@ int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle,
 		char[] buffer = new char[cnt + 1];
 		user.getChars (0, cnt, buffer, 0);
 		int size = buffer.length * 2;
-		int /*long*/ ptr = C.malloc (size);
+		long /*int*/ ptr = C.malloc (size);
 		XPCOM.memmove (ptr, buffer, size);
-		XPCOM.memmove (aUsername, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+		XPCOM.memmove (aUsername, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 
 		cnt = password.length ();
 		buffer = new char[cnt + 1];
@@ -643,17 +643,17 @@ int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle,
 		size = buffer.length * 2;
 		ptr = C.malloc (size);
 		XPCOM.memmove (ptr, buffer, size);
-		XPCOM.memmove (aPassword, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+		XPCOM.memmove (aPassword, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 	}
 
 	return XPCOM.NS_OK;
 }
 
-int PromptPassword (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aPassword, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int PromptPassword (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aPassword, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Select (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int aCount, int /*long*/ aSelectList, int /*long*/ aOutSelection, int /*long*/ _retval) {
+int Select (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, int aCount, long /*int*/ aSelectList, long /*int*/ aOutSelection, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
diff --git a/org/eclipse/swt/browser/PromptService2Factory.java b/org/eclipse/swt/browser/PromptService2Factory.java
index 89fdc66..7971793 100644
--- a/org/eclipse/swt/browser/PromptService2Factory.java
+++ b/org/eclipse/swt/browser/PromptService2Factory.java
@@ -30,17 +30,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@ int Release () {
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	PromptService2 promptService = new PromptService2 ();
 	promptService.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff --git a/org/eclipse/swt/browser/SimpleEnumerator.java b/org/eclipse/swt/browser/SimpleEnumerator.java
index 4be8516..5277bda 100644
--- a/org/eclipse/swt/browser/SimpleEnumerator.java
+++ b/org/eclipse/swt/browser/SimpleEnumerator.java
@@ -36,17 +36,17 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	simpleEnumerator = new XPCOMObject (new int[] {2, 0, 0, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return HasMoreElements (args[0]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetNext (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return HasMoreElements (args[0]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetNext (args[0]);}
 	};
 }
 
@@ -67,27 +67,27 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return simpleEnumerator.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsISimpleEnumerator.NS_ISIMPLEENUMERATOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {simpleEnumerator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {simpleEnumerator.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -97,17 +97,17 @@ int Release () {
 	return refCount;
 }
 
-int HasMoreElements (int /*long*/ _retval) {
+int HasMoreElements (long /*int*/ _retval) {
 	boolean more = values != null && index < values.length;
 	XPCOM.memmove (_retval, new int[] {more ? 1 : 0}, 4); /*PRBool */
 	return XPCOM.NS_OK;
 }	
 	
-int GetNext (int /*long*/ _retval) {
+int GetNext (long /*int*/ _retval) {
 	if (values == null || index == values.length) return XPCOM.NS_ERROR_UNEXPECTED;
 	nsISupports value = values[index++];
     value.AddRef ();
-    XPCOM.memmove (_retval, new int /*long*/[] {value.getAddress ()}, C.PTR_SIZEOF);
+    XPCOM.memmove (_retval, new long /*int*/[] {value.getAddress ()}, C.PTR_SIZEOF);
     return XPCOM.NS_OK;
 }		
 }
diff --git a/org/eclipse/swt/browser/WindowCreator2.java b/org/eclipse/swt/browser/WindowCreator2.java
index 17ca051..9a91ba8 100644
--- a/org/eclipse/swt/browser/WindowCreator2.java
+++ b/org/eclipse/swt/browser/WindowCreator2.java
@@ -35,24 +35,24 @@ int AddRef () {
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	windowCreator = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
 	};
 
 	windowCreator2 = new XPCOMObject (new int[] {2, 0, 0, 3, 6}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return CreateChromeWindow2 (args[0], (int)/*64*/args[1], (int)/*64*/args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return CreateChromeWindow2 (args[0], (int)/*64*/args[1], (int)/*64*/args[2], args[3], args[4], args[5]);}
 	};
 }
 
@@ -72,32 +72,32 @@ void disposeCOMInterfaces () {
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return windowCreator.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWindowCreator.NS_IWINDOWCREATOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {windowCreator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {windowCreator.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWindowCreator2.NS_IWINDOWCREATOR2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {windowCreator2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {windowCreator2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -109,26 +109,26 @@ int Release () {
 	
 /* nsIWindowCreator */
 
-int CreateChromeWindow (int /*long*/ parent, int chromeFlags, int /*long*/ _retval) {
+int CreateChromeWindow (long /*int*/ parent, int chromeFlags, long /*int*/ _retval) {
 	return CreateChromeWindow2 (parent, chromeFlags, 0, 0, 0, _retval);
 }
 
 /* nsIWindowCreator2 */
 
-int CreateChromeWindow2 (int /*long*/ parent, int chromeFlags, int contextFlags, int /*long*/ uri, int /*long*/ cancel, int /*long*/ _retval) {
+int CreateChromeWindow2 (long /*int*/ parent, int chromeFlags, int contextFlags, long /*int*/ uri, long /*int*/ cancel, long /*int*/ _retval) {
 	if (parent == 0 && (chromeFlags & nsIWebBrowserChrome.CHROME_OPENAS_CHROME) == 0) {
 		return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 	}
 	Browser src = null; 
 	if (parent != 0) {
 		nsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome (parent);
-		int /*long*/[] aWebBrowser = new int /*long*/[1];
+		long /*int*/[] aWebBrowser = new long /*int*/[1];
 		int rc = browserChromeParent.GetWebBrowser (aWebBrowser);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (aWebBrowser[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
 
 		nsIWebBrowser webBrowser = new nsIWebBrowser (aWebBrowser[0]);
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -136,7 +136,7 @@ int CreateChromeWindow2 (int /*long*/ parent, int chromeFlags, int contextFlags,
 
 		nsIBaseWindow baseWindow = new nsIBaseWindow (result[0]);
 		result[0] = 0;
-		int /*long*/[] aParentNativeWindow = new int /*long*/[1];
+		long /*int*/[] aParentNativeWindow = new long /*int*/[1];
 		rc = baseWindow.GetParentNativeWindow (aParentNativeWindow);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (aParentNativeWindow[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -178,11 +178,11 @@ int CreateChromeWindow2 (int /*long*/ parent, int chromeFlags, int contextFlags,
 		});
 		if (uri != 0) {
 			nsIURI location = new nsIURI (uri);
-			int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+			long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 			if (location.GetSpec (aSpec) == XPCOM.NS_OK) {
 				int length = XPCOM.nsEmbedCString_Length (aSpec);
 				if (length > 0) {
-					int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+					long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 					byte[] dest = new byte[length];
 					XPCOM.memmove (dest, buffer, length);
 					browser.setUrl (new String (dest));
@@ -211,11 +211,11 @@ int CreateChromeWindow2 (int /*long*/ parent, int chromeFlags, int contextFlags,
 	if (doit) {
 		Mozilla mozilla = (Mozilla)browser.webBrowser;
 		mozilla.isChild = true;
-		int /*long*/ chromePtr = mozilla.webBrowserChrome.getAddress ();
+		long /*int*/ chromePtr = mozilla.webBrowserChrome.getAddress ();
 		nsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome (chromePtr);
 		webBrowserChrome.SetChromeFlags (chromeFlags);
 		webBrowserChrome.AddRef ();
-		XPCOM.memmove (_retval, new int /*long*/[] {chromePtr}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {chromePtr}, C.PTR_SIZEOF);
 	} else {
 		if (cancel != 0) {
 			C.memmove (cancel, new int[] {1}, 4);	/* PRBool */
diff --git a/org/eclipse/swt/dnd/ByteArrayTransfer.java b/org/eclipse/swt/dnd/ByteArrayTransfer.java
index 6620e74..e8baa38 100644
--- a/org/eclipse/swt/dnd/ByteArrayTransfer.java
+++ b/org/eclipse/swt/dnd/ByteArrayTransfer.java
@@ -155,7 +155,7 @@ protected void javaToNative (Object object, TransferData transferData) {
 	}
 	byte[] buffer = (byte[])object;
 	if (buffer.length == 0) return;
-	int /*long*/ pValue = OS.g_malloc(buffer.length);
+	long /*int*/ pValue = OS.g_malloc(buffer.length);
 	if (pValue == 0) return;
 	OS.memmove(pValue, buffer, buffer.length);
 	transferData.length = buffer.length;
diff --git a/org/eclipse/swt/dnd/Clipboard.java b/org/eclipse/swt/dnd/Clipboard.java
index 87b1e17..633e8e5 100644
--- a/org/eclipse/swt/dnd/Clipboard.java
+++ b/org/eclipse/swt/dnd/Clipboard.java
@@ -32,14 +32,14 @@ public class Clipboard {
 
 	private Display display;
 	
-	static int /*long*/ GTKCLIPBOARD;
-	static int /*long*/ GTKPRIMARYCLIPBOARD;
-	private static int /*long*/ TARGET;
+	static long /*int*/ GTKCLIPBOARD;
+	static long /*int*/ GTKPRIMARYCLIPBOARD;
+	private static long /*int*/ TARGET;
 	
 	static {
 		GTKCLIPBOARD = OS.gtk_clipboard_get(OS.GDK_NONE);
 		byte[] buffer = Converter.wcsToMbcs(null, "PRIMARY", true);
-		int /*long*/ primary = OS.gdk_atom_intern(buffer, false);
+		long /*int*/ primary = OS.gdk_atom_intern(buffer, false);
 		GTKPRIMARYCLIPBOARD = OS.gtk_clipboard_get(primary);
 		buffer = Converter.wcsToMbcs(null, "TARGETS", true);
 		TARGET = OS.gdk_atom_intern(buffer, false);
@@ -287,7 +287,7 @@ public Object getContents(Transfer transfer) {
 public Object getContents(Transfer transfer, int clipboards) {
 	checkWidget();
 	if (transfer == null) DND.error(SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ selection_data = 0;
+	long /*int*/ selection_data = 0;
 	int[] typeIds = transfer.getTypeIds();
 	for (int i = 0; i < typeIds.length; i++) {
 		if ((clipboards & DND.CLIPBOARD) != 0) {
@@ -549,7 +549,7 @@ public String[] getAvailableTypeNames() {
 	String[] result = new String[types1.length + types2.length];
 	int count = 0;
 	for (int i = 0; i < types1.length; i++) {
-		int /*long*/ pName = OS.gdk_atom_name(types1[i]);
+		long /*int*/ pName = OS.gdk_atom_name(types1[i]);
 		if (pName == 0) {
 			continue;
 		}
@@ -559,7 +559,7 @@ public String[] getAvailableTypeNames() {
 		result[count++] = "GTKCLIPBOARD "+new String (Converter.mbcsToWcs (null, buffer));
 	}
 	for (int i = 0; i < types2.length; i++) {
-		int /*long*/ pName = OS.gdk_atom_name(types2[i]);
+		long /*int*/ pName = OS.gdk_atom_name(types2[i]);
 		if (pName == 0) {
 			continue;
 		}
@@ -578,7 +578,7 @@ public String[] getAvailableTypeNames() {
 
 private  int[] getAvailablePrimaryTypes() {
 	int[] types = new int[0];
-	int /*long*/ selection_data = gtk_clipboard_wait_for_contents(GTKPRIMARYCLIPBOARD, TARGET);
+	long /*int*/ selection_data = gtk_clipboard_wait_for_contents(GTKPRIMARYCLIPBOARD, TARGET);
 	if (selection_data != 0) {
 		try {
 			GtkSelectionData gtkSelectionData = new GtkSelectionData();
@@ -595,7 +595,7 @@ private  int[] getAvailablePrimaryTypes() {
 }
 private int[] getAvailableClipboardTypes () {
 	int[] types = new int[0];
-	int /*long*/ selection_data  = gtk_clipboard_wait_for_contents(GTKCLIPBOARD, TARGET);
+	long /*int*/ selection_data  = gtk_clipboard_wait_for_contents(GTKCLIPBOARD, TARGET);
 	if (selection_data != 0) {
 		try {
 			GtkSelectionData gtkSelectionData = new GtkSelectionData();
@@ -611,11 +611,11 @@ private int[] getAvailableClipboardTypes () {
 	return types;
 }
 
-int /*long*/ gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target) {
+long /*int*/ gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target) {
 	String key = "org.eclipse.swt.internal.gtk.dispatchEvent";
 	Display display = this.display;
 	display.setData(key, new int[]{OS.GDK_PROPERTY_NOTIFY, OS.GDK_SELECTION_CLEAR, OS.GDK_SELECTION_REQUEST, OS.GDK_SELECTION_NOTIFY});
-	int /*long*/ selection_data = OS.gtk_clipboard_wait_for_contents(clipboard, target);
+	long /*int*/ selection_data = OS.gtk_clipboard_wait_for_contents(clipboard, target);
 	display.setData(key, null);
 	return selection_data;
 }
diff --git a/org/eclipse/swt/dnd/ClipboardProxy.java b/org/eclipse/swt/dnd/ClipboardProxy.java
index 6e122cc..649eebb 100644
--- a/org/eclipse/swt/dnd/ClipboardProxy.java
+++ b/org/eclipse/swt/dnd/ClipboardProxy.java
@@ -71,7 +71,7 @@ void clear (Clipboard owner, int clipboards) {
 	}
 }
 
-int /*long*/ clearFunc(int /*long*/ clipboard,int /*long*/ user_data_or_owner){
+long /*int*/ clearFunc(long /*int*/ clipboard,long /*int*/ user_data_or_owner){
 	if (clipboard == Clipboard.GTKCLIPBOARD) {
 		activeClipboard = null;
 		clipboardData = null;
@@ -104,7 +104,7 @@ void dispose () {
  * This function provides the data to the clipboard on request.
  * When this clipboard is disposed, the data will no longer be available.
  */
-int /*long*/ getFunc(int /*long*/ clipboard, int /*long*/ selection_data, int /*long*/ info, int /*long*/ user_data_or_owner){
+long /*int*/ getFunc(long /*int*/ clipboard, long /*int*/ selection_data, long /*int*/ info, long /*int*/ user_data_or_owner){
 	if (selection_data == 0) return 0;
 	GtkSelectionData selectionData = new GtkSelectionData();
 	OS.memmove(selectionData, selection_data, GtkSelectionData.sizeof);
@@ -131,7 +131,7 @@ int /*long*/ getFunc(int /*long*/ clipboard, int /*long*/ selection_data, int /*
 
 boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipboards) {	
 	GtkTargetEntry[] entries = new  GtkTargetEntry [0];
-	int /*long*/ pTargetsList = 0;
+	long /*int*/ pTargetsList = 0;
 	try {
 		for (int i = 0; i < dataTypes.length; i++) {
 			Transfer transfer = dataTypes[i];
@@ -141,7 +141,7 @@ boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipbo
 				GtkTargetEntry	entry = new GtkTargetEntry();						
 				entry.info = typeIds[j];
 				byte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);
-				int /*long*/ pName = OS.g_malloc(buffer.length);
+				long /*int*/ pName = OS.g_malloc(buffer.length);
 				OS.memmove(pName, buffer, buffer.length);
 				entry.target = pName;
 				GtkTargetEntry[] tmp = new GtkTargetEntry [entries.length + 1];
@@ -161,8 +161,8 @@ boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipbo
 			if (activeClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKCLIPBOARD);
 			clipboardData = data;
 			clipboardDataTypes = dataTypes;
-			int /*long*/ getFuncProc = getFunc.getAddress();
-			int /*long*/ clearFuncProc = clearFunc.getAddress();
+			long /*int*/ getFuncProc = getFunc.getAddress();
+			long /*int*/ clearFuncProc = clearFunc.getAddress();
 			if (!OS.gtk_clipboard_set_with_data(Clipboard.GTKCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {
 				return false;
 			}
@@ -172,8 +172,8 @@ boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipbo
 			if (activePrimaryClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKPRIMARYCLIPBOARD);
 			primaryClipboardData = data;
 			primaryClipboardDataTypes = dataTypes;
-			int /*long*/ getFuncProc = getFunc.getAddress();
-			int /*long*/ clearFuncProc = clearFunc.getAddress();
+			long /*int*/ getFuncProc = getFunc.getAddress();
+			long /*int*/ clearFuncProc = clearFunc.getAddress();
 			if (!OS.gtk_clipboard_set_with_data(Clipboard.GTKPRIMARYCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {
 				return false;
 			}
diff --git a/org/eclipse/swt/dnd/DragSource.java b/org/eclipse/swt/dnd/DragSource.java
index 3874254..8aacf58 100644
--- a/org/eclipse/swt/dnd/DragSource.java
+++ b/org/eclipse/swt/dnd/DragSource.java
@@ -106,7 +106,7 @@ public class DragSource extends Widget {
 	Transfer[] transferAgents = new Transfer[0];
 	DragSourceEffect dragEffect;
 
-	int /*long*/ targetList;
+	long /*int*/ targetList;
 	
 	//workaround - remember action performed for DragEnd
 	boolean moveData = false;
@@ -207,28 +207,28 @@ static int checkStyle (int style) {
 	return style;
 }
 
-static int /*long*/ DragDataDelete(int /*long*/ widget, int /*long*/ context){
+static long /*int*/ DragDataDelete(long /*int*/ widget, long /*int*/ context){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragDataDelete(widget, context);
 	return 0;
 }
 
-static int /*long*/ DragEnd(int /*long*/ widget, int /*long*/ context){
+static long /*int*/ DragEnd(long /*int*/ widget, long /*int*/ context){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragEnd(widget, context);
 	return 0;
 }
 	
-static int /*long*/ DragGetData(int /*long*/ widget, int /*long*/ context, int /*long*/ selection_data,  int /*long*/ info, int /*long*/ time){
+static long /*int*/ DragGetData(long /*int*/ widget, long /*int*/ context, long /*int*/ selection_data,  long /*int*/ info, long /*int*/ time){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragGetData(widget, context, selection_data, (int)/*64*/info, (int)/*64*/time);
 	return 0;
 }
 
-static DragSource FindDragSource(int /*long*/ handle) {
+static DragSource FindDragSource(long /*int*/ handle) {
 	Display display = Display.findDisplay(Thread.currentThread());
 	if (display == null || display.isDisposed()) return null;
 	Widget widget = display.findWidget(handle);
@@ -297,15 +297,15 @@ void drag(Event dragEvent) {
 	
 	int actions = opToOsOp(getStyle());
 	Image image = event.image; 
-	int /*long*/ context = OS.gtk_drag_begin(control.handle, targetList, actions, 1, 0);
+	long /*int*/ context = OS.gtk_drag_begin(control.handle, targetList, actions, 1, 0);
 	if (context != 0 && image != null) {
-		int /*long*/ pixbuf = createPixbuf(image);
+		long /*int*/ pixbuf = createPixbuf(image);
 		OS.gtk_drag_set_icon_pixbuf(context, pixbuf, 0, 0);
 		OS.g_object_unref(pixbuf);
 	}
 }
 
-void dragEnd(int /*long*/ widget, int /*long*/ context){
+void dragEnd(long /*int*/ widget, long /*int*/ context){
 	/*
 	 * Bug in GTK.  If a drag is initiated using gtk_drag_begin and the 
 	 * mouse is released immediately, the mouse and keyboard remain
@@ -341,7 +341,7 @@ void dragEnd(int /*long*/ widget, int /*long*/ context){
 	moveData = false;	
 }	
 
-void dragGetData(int /*long*/ widget, int /*long*/ context, int /*long*/ selection_data,  int info, int time){
+void dragGetData(long /*int*/ widget, long /*int*/ context, long /*int*/ selection_data,  int info, int time){
 	if (selection_data == 0) return;	
 	GtkSelectionData gtkSelectionData = new GtkSelectionData();
 	OS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);
@@ -376,7 +376,7 @@ void dragGetData(int /*long*/ widget, int /*long*/ context, int /*long*/ selecti
 	return;	
 }
 
-void dragDataDelete(int /*long*/ widget, int /*long*/ context){
+void dragDataDelete(long /*int*/ widget, long /*int*/ context){
 	moveData = true;
 }
 
@@ -564,7 +564,7 @@ public void setTransfer(Transfer[] transferAgents){
 		}
 	}
 	
-	int /*long*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
+	long /*int*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
 	for (int i = 0; i < targets.length; i++) {
 		OS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);		
 	}			
@@ -575,29 +575,29 @@ public void setTransfer(Transfer[] transferAgents){
 	}
 }
 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -616,10 +616,10 @@ static int /*long*/ createPixbuf(Image image) {
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
diff --git a/org/eclipse/swt/dnd/DropTarget.java b/org/eclipse/swt/dnd/DropTarget.java
index c9cc25a..1f5166d 100644
--- a/org/eclipse/swt/dnd/DropTarget.java
+++ b/org/eclipse/swt/dnd/DropTarget.java
@@ -245,33 +245,33 @@ static int checkStyle (int style) {
 	return style;
 }
 
-static int /*long*/ Drag_Data_Received ( int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ data, int /*long*/ info, int /*long*/ time){
+static long /*int*/ Drag_Data_Received ( long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ data, long /*int*/ info, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	target.drag_data_received (widget, context, (int)/*64*/x, (int)/*64*/y, data, (int)/*64*/info, (int)/*64*/time);
 	return 0;
 }
 
-static int /*long*/ Drag_Drop(int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ time) {
+static long /*int*/ Drag_Drop(long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ time) {
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	return target.drag_drop (widget, context, (int)/*64*/x, (int)/*64*/y, (int)/*64*/time) ? 1 : 0;
 }
 
-static int /*long*/ Drag_Leave ( int /*long*/ widget, int /*long*/ context, int /*long*/ time){
+static long /*int*/ Drag_Leave ( long /*int*/ widget, long /*int*/ context, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	target.drag_leave (widget, context, (int)/*64*/time);
 	return 0;
 }
 
-static int /*long*/ Drag_Motion ( int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ time){
+static long /*int*/ Drag_Motion ( long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	return target.drag_motion (widget, context, (int)/*64*/x, (int)/*64*/y, (int)/*64*/time) ? 1 : 0;
 }
 	
-static DropTarget FindDropTarget(int /*long*/ handle) {
+static DropTarget FindDropTarget(long /*int*/ handle) {
 	Display display = Display.findDisplay(Thread.currentThread());
 	if (display == null || display.isDisposed()) return null;
 	Widget widget = display.findWidget(handle);
@@ -332,7 +332,7 @@ protected void checkSubclass () {
 	}
 }
 
-void drag_data_received ( int /*long*/ widget, int /*long*/ context, int x, int y, int /*long*/ data, int info, int time){
+void drag_data_received ( long /*int*/ widget, long /*int*/ context, int x, int y, long /*int*/ data, int info, int time){
 	DNDEvent event = new DNDEvent();
 	if (data == 0 || !setEventData(context, x, y, time, event)) {
 		keyOperation = -1;
@@ -380,7 +380,7 @@ void drag_data_received ( int /*long*/ widget, int /*long*/ context, int x, int
 	return;	
 }
 
-boolean drag_drop(int /*long*/ widget, int /*long*/ context, int x, int y, int time) {
+boolean drag_drop(long /*int*/ widget, long /*int*/ context, int x, int y, int time) {
 	DNDEvent event = new DNDEvent();
 	if (!setEventData(context, x, y, time, event)) {
 		keyOperation = -1;
@@ -417,7 +417,7 @@ boolean drag_drop(int /*long*/ widget, int /*long*/ context, int x, int y, int t
 	return true;
 }
 
-void drag_leave ( int /*long*/ widget, int /*long*/ context, int time){
+void drag_leave ( long /*int*/ widget, long /*int*/ context, int time){
 	updateDragOverHover(0, null);
 	
 	if (keyOperation == -1) return;
@@ -430,7 +430,7 @@ void drag_leave ( int /*long*/ widget, int /*long*/ context, int time){
 	notifyListeners(DND.DragLeave, event);
 }
 
-boolean drag_motion ( int /*long*/ widget, int /*long*/ context, int x, int y, int time){
+boolean drag_motion ( long /*int*/ widget, long /*int*/ context, int x, int y, int time){
 	int oldKeyOperation = keyOperation;
 	
 	/*
@@ -694,7 +694,7 @@ public void setTransfer(Transfer[] transferAgents){
 		}
 	}
 	
-	int /*long*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
+	long /*int*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
 	for (int i = 0; i < targets.length; i++) {
 		OS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);		
 	}			
@@ -702,7 +702,7 @@ public void setTransfer(Transfer[] transferAgents){
 	int actions = opToOsOp(getStyle());
 	if (control instanceof Combo) {
 		if ((control.getStyle() & SWT.READ_ONLY) == 0) {
-			int /*long*/ entryHandle = OS.gtk_bin_get_child (control.handle);
+			long /*int*/ entryHandle = OS.gtk_bin_get_child (control.handle);
 			if (entryHandle != 0) {
 				OS.gtk_drag_dest_unset(entryHandle);
 			}
@@ -728,7 +728,7 @@ public void setDropTargetEffect(DropTargetEffect effect) {
 	dropEffect = effect;
 }
 
-boolean setEventData(int /*long*/ context, int x, int y, int time, DNDEvent event) {
+boolean setEventData(long /*int*/ context, int x, int y, int time, DNDEvent event) {
 	if (context == 0) return false;
 	GdkDragContext dragContext = new GdkDragContext();
 	OS.memmove(dragContext, context, GdkDragContext.sizeof);
@@ -754,7 +754,7 @@ boolean setEventData(int /*long*/ context, int x, int y, int time, DNDEvent even
 	int length = OS.g_list_length(dragContext.targets);
 	TransferData[] dataTypes = new TransferData[0];
 	for (int i = 0; i < length; i++) {
-		int /*long*/ pData = OS.g_list_nth(dragContext.targets, i);
+		long /*int*/ pData = OS.g_list_nth(dragContext.targets, i);
 		GtkTargetPair gtkTargetPair = new GtkTargetPair();
 		OS.memmove(gtkTargetPair, pData, GtkTargetPair.sizeof);
 		TransferData data = new TransferData();
@@ -772,7 +772,7 @@ boolean setEventData(int /*long*/ context, int x, int y, int time, DNDEvent even
 	}
 	if (dataTypes.length == 0) return false;
 
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW(control.handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW(control.handle);
 	int [] origin_x = new int[1], origin_y = new int[1];
 	OS.gdk_window_get_origin(window, origin_x, origin_y);
 	Point coordinates = new Point(origin_x[0] + x, origin_y[0] + y);
diff --git a/org/eclipse/swt/dnd/FileTransfer.java b/org/eclipse/swt/dnd/FileTransfer.java
index 8b0338f..f02ac24 100644
--- a/org/eclipse/swt/dnd/FileTransfer.java
+++ b/org/eclipse/swt/dnd/FileTransfer.java
@@ -85,13 +85,13 @@ public void javaToNative(Object object, TransferData transferData) {
 		if (length == 0) continue;
 		char[] chars = new char[length];
 		string.getChars(0, length, chars, 0);		
-		int /*long*/[] error = new int /*long*/[1];
-		int /*long*/ utf8Ptr = OS.g_utf16_to_utf8(chars, chars.length, null, null, error);
+		long /*int*/[] error = new long /*int*/[1];
+		long /*int*/ utf8Ptr = OS.g_utf16_to_utf8(chars, chars.length, null, null, error);
 		if (error[0] != 0 || utf8Ptr == 0) continue;
-		int /*long*/ localePtr = OS.g_filename_from_utf8(utf8Ptr, -1, null, null, error);
+		long /*int*/ localePtr = OS.g_filename_from_utf8(utf8Ptr, -1, null, null, error);
 		OS.g_free(utf8Ptr);
 		if (error[0] != 0 || localePtr == 0) continue;
-		int /*long*/ uriPtr = OS.g_filename_to_uri(localePtr, 0, error);
+		long /*int*/ uriPtr = OS.g_filename_to_uri(localePtr, 0, error);
 		OS.g_free(localePtr);
 		if (error[0] != 0 || uriPtr == 0) continue;
 		length = OS.strlen(uriPtr);
@@ -111,7 +111,7 @@ public void javaToNative(Object object, TransferData transferData) {
 		buffer = newBuffer;
 	}
 	if (buffer.length == 0) return;
-	int /*long*/ ptr = OS.g_malloc(buffer.length+1);
+	long /*int*/ ptr = OS.g_malloc(buffer.length+1);
 	OS.memset(ptr, '\0', buffer.length+1);
 	OS.memmove(ptr, buffer, buffer.length);
 	transferData.pValue = ptr;
@@ -137,7 +137,7 @@ public Object nativeToJava(TransferData transferData) {
 	OS.memmove(temp, transferData.pValue, length);
 	boolean gnomeList = transferData.type == GNOME_LIST_ID;
 	int sepLength = gnomeList ? 1 : 2;
-	int /*long*/[] files = new int /*long*/[0];
+	long /*int*/[] files = new long /*int*/[0];
 	int offset = 0;
 	for (int i = 0; i < temp.length - 1; i++) {
 		boolean terminator = gnomeList ? temp[i] == '\n' : temp[i] == '\r' && temp[i+1] == '\n';
@@ -145,11 +145,11 @@ public Object nativeToJava(TransferData transferData) {
 			if (!(gnomeList && offset == 0)) {
 				/* The content of the first line in a gnome-list is always either 'copy' or 'cut' */
 				int size =  i - offset;
-				int /*long*/ file = OS.g_malloc(size + 1);
+				long /*int*/ file = OS.g_malloc(size + 1);
 				byte[] fileBuffer = new byte[size + 1];
 				System.arraycopy(temp, offset, fileBuffer, 0, size);
 				OS.memmove(file, fileBuffer, size + 1);
-				int /*long*/[] newFiles = new int /*long*/[files.length + 1];
+				long /*int*/[] newFiles = new long /*int*/[files.length + 1];
 				System.arraycopy(files, 0, newFiles, 0, files.length);
 				newFiles[files.length] = file;
 				files = newFiles;
@@ -159,26 +159,26 @@ public Object nativeToJava(TransferData transferData) {
 	}
 	if (offset < temp.length - sepLength) {
 		int size =  temp.length - offset;
-		int /*long*/ file = OS.g_malloc(size + 1);
+		long /*int*/ file = OS.g_malloc(size + 1);
 		byte[] fileBuffer = new byte[size + 1];
 		System.arraycopy(temp, offset, fileBuffer, 0, size);
 		OS.memmove(file, fileBuffer, size + 1);
-		int /*long*/[] newFiles = new int /*long*/[files.length + 1];
+		long /*int*/[] newFiles = new long /*int*/[files.length + 1];
 		System.arraycopy(files, 0, newFiles, 0, files.length);
 		newFiles[files.length] = file;
 		files = newFiles;
 	}
 	String[] fileNames = new String[0];
 	for (int i = 0; i < files.length; i++) {
-		int /*long*/[] error = new int /*long*/[1];
-		int /*long*/ localePtr = OS.g_filename_from_uri(files[i], null, error);
+		long /*int*/[] error = new long /*int*/[1];
+		long /*int*/ localePtr = OS.g_filename_from_uri(files[i], null, error);
 		OS.g_free(files[i]);
 		if (error[0] != 0 || localePtr == 0) continue;
-		int /*long*/ utf8Ptr = OS.g_filename_to_utf8(localePtr, -1, null, null, error);
+		long /*int*/ utf8Ptr = OS.g_filename_to_utf8(localePtr, -1, null, null, error);
 		OS.g_free(localePtr);
 		if (error[0] != 0 || utf8Ptr == 0) continue;
-		int /*long*/[] items_written = new int /*long*/[1];
-		int /*long*/ utf16Ptr = OS.g_utf8_to_utf16(utf8Ptr, -1, null, items_written, null);
+		long /*int*/[] items_written = new long /*int*/[1];
+		long /*int*/ utf16Ptr = OS.g_utf8_to_utf16(utf8Ptr, -1, null, items_written, null);
 		OS.g_free(utf8Ptr);
 		length = (int)/*64*/items_written[0];
 		char[] buffer = new char[length];
diff --git a/org/eclipse/swt/dnd/HTMLTransfer.java b/org/eclipse/swt/dnd/HTMLTransfer.java
index 5d0ccae..a83bcfa 100644
--- a/org/eclipse/swt/dnd/HTMLTransfer.java
+++ b/org/eclipse/swt/dnd/HTMLTransfer.java
@@ -65,7 +65,7 @@ public void javaToNative (Object object, TransferData transferData){
 	char [] chars = new char[charCount +1];
 	string.getChars(0, charCount , chars, 0);
 	int byteCount = chars.length*2;
-	int /*long*/ pValue = OS.g_malloc(byteCount);
+	long /*int*/ pValue = OS.g_malloc(byteCount);
 	if (pValue == 0) return;
 	OS.memmove(pValue, chars, byteCount);
 	transferData.length = byteCount;
diff --git a/org/eclipse/swt/dnd/ImageTransfer.java b/org/eclipse/swt/dnd/ImageTransfer.java
index cf28027..9061bc0 100644
--- a/org/eclipse/swt/dnd/ImageTransfer.java
+++ b/org/eclipse/swt/dnd/ImageTransfer.java
@@ -89,12 +89,12 @@ public void javaToNative(Object object, TransferData transferData) {
 	ImageData imgData = (ImageData)object;
 	if (imgData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	Image image = new Image(Display.getCurrent(), imgData);	
-	int /*long*/ pixmap = image.pixmap; 
+	long /*int*/ pixmap = image.pixmap; 
  	int width = imgData.width;
  	int height = imgData.height;  	
- 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+ 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);	
 	
 	String typeStr = "";
@@ -110,8 +110,8 @@ public void javaToNative(Object object, TransferData transferData) {
 	if (transferData.type ==  XPM_ID) typeStr = "xpm";
 	if (transferData.type ==  XV_ID) typeStr = "xv";
 	byte[] type = Converter.wcsToMbcs(null, typeStr , true);
-	int /*long*/ [] buffer = new int /*long*/ [1];
-	int /*long*/ [] len = new int /*long*/ [1];
+	long /*int*/ [] buffer = new long /*int*/ [1];
+	long /*int*/ [] len = new long /*int*/ [1];
 	if (type == null) return;
 	OS.gdk_pixbuf_save_to_bufferv(pixbuf, buffer, len, type, null, null, null);
 	OS.g_object_unref(pixbuf);
@@ -136,15 +136,15 @@ public Object nativeToJava(TransferData transferData) {
 	ImageData imgData = null;
 	if (transferData.length > 0)
 	{
-		int /*long*/ loader = OS.gdk_pixbuf_loader_new();
+		long /*int*/ loader = OS.gdk_pixbuf_loader_new();
 		OS.gdk_pixbuf_loader_write(loader, transferData.pValue, transferData.length, null);
 		OS.gdk_pixbuf_loader_close(loader, null);
-		int /*long*/ pixbuf = OS.gdk_pixbuf_loader_get_pixbuf(loader);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_loader_get_pixbuf(loader);
 		if (pixbuf != 0) {
 			OS.g_object_ref(pixbuf);
-			int /*long*/ [] pixmap_return = new int /*long*/ [1];
+			long /*int*/ [] pixmap_return = new long /*int*/ [1];
 			OS.gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, null, 0);
-			int /*long*/ handle = pixmap_return[0];
+			long /*int*/ handle = pixmap_return[0];
 			if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			OS.g_object_unref(loader);
 			Image img = Image.gtk_new(Display.getCurrent(), SWT.BITMAP, handle, 0);		
diff --git a/org/eclipse/swt/dnd/RTFTransfer.java b/org/eclipse/swt/dnd/RTFTransfer.java
index 74aae33..98284e6 100644
--- a/org/eclipse/swt/dnd/RTFTransfer.java
+++ b/org/eclipse/swt/dnd/RTFTransfer.java
@@ -65,7 +65,7 @@ public void javaToNative (Object object, TransferData transferData){
 	}
 	String string = (String)object;
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ pValue = OS.g_malloc(buffer.length);
+	long /*int*/ pValue = OS.g_malloc(buffer.length);
 	if (pValue == 0) return;
 	OS.memmove(pValue, buffer, buffer.length);
 	transferData.length = buffer.length - 1;
diff --git a/org/eclipse/swt/dnd/TableDragSourceEffect.java b/org/eclipse/swt/dnd/TableDragSourceEffect.java
index b3656bb..4b0e9cd 100644
--- a/org/eclipse/swt/dnd/TableDragSourceEffect.java
+++ b/org/eclipse/swt/dnd/TableDragSourceEffect.java
@@ -88,26 +88,26 @@ public class TableDragSourceEffect extends DragSourceEffect {
 		* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 		* to give a valid pointer instead.
 		*/
-		int /*long*/ handle = table.handle;
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-		int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-		int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+		long /*int*/ handle = table.handle;
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+		long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 		if (list == 0) return null;
 		int count = Math.min(10, OS.g_list_length (list));
 
 		Display display = table.getDisplay();
 		if (count == 1) {
-			int /*long*/ path = OS.g_list_nth_data (list, 0);
-			int /*long*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
+			long /*int*/ path = OS.g_list_nth_data (list, 0);
+			long /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 			dragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0); 
 		} else {
 			int width = 0, height = 0;
 			int[] w = new int[1], h = new int[1];
 			int[] yy = new int[count], hh = new int[count];
-			int /*long*/ [] pixmaps = new int /*long*/ [count];
+			long /*int*/ [] pixmaps = new long /*int*/ [count];
 			GdkRectangle rect = new GdkRectangle ();
 			for (int i=0; i<count; i++) {
-				int /*long*/ path = OS.g_list_nth_data (list, i);
+				long /*int*/ path = OS.g_list_nth_data (list, i);
 				OS.gtk_tree_view_get_cell_area (handle, path, 0, rect);
 				pixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 				OS.gdk_drawable_get_size(pixmaps[i], w, h);
@@ -116,10 +116,10 @@ public class TableDragSourceEffect extends DragSourceEffect {
 				yy[i] = rect.y;
 				hh[i] = h[0];
 			}
-			int /*long*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
-			int /*long*/ gcSource = OS.gdk_gc_new(source);
-			int /*long*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
-			int /*long*/ gcMask = OS.gdk_gc_new(mask);
+			long /*int*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
+			long /*int*/ gcSource = OS.gdk_gc_new(source);
+			long /*int*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
+			long /*int*/ gcMask = OS.gdk_gc_new(mask);
 			GdkColor color = new GdkColor();
 			color.pixel = 0;
 			OS.gdk_gc_set_foreground(gcMask, color);
diff --git a/org/eclipse/swt/dnd/TableDropTargetEffect.java b/org/eclipse/swt/dnd/TableDropTargetEffect.java
index f4ab889..b716e6b 100644
--- a/org/eclipse/swt/dnd/TableDropTargetEffect.java
+++ b/org/eclipse/swt/dnd/TableDropTargetEffect.java
@@ -102,7 +102,7 @@ public class TableDropTargetEffect extends DropTargetEffect {
 	 */
 	public void dragLeave(DropTargetEvent event) {
 		Table table = (Table) control;
-		int /*long*/ handle = table.handle;
+		long /*int*/ handle = table.handle;
 		OS.gtk_tree_view_set_drag_dest_row(handle, 0, OS.GTK_TREE_VIEW_DROP_BEFORE);
 
 		scrollBeginTime = 0;
@@ -128,15 +128,15 @@ public class TableDropTargetEffect extends DropTargetEffect {
 	 */
 	public void dragOver(DropTargetEvent event) {
 		Table table = (Table) control;
-		int /*long*/ handle = table.handle;
+		long /*int*/ handle = table.handle;
 		int effect = checkEffect(event.feedback);
 		Point coordinates = new Point(event.x, event.y);
 		coordinates = table.toControl(coordinates);
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		OS.gtk_tree_view_get_path_at_pos (handle, coordinates.x, coordinates.y, path, null, null, null);
 		int index = -1;
 		if (path[0] != 0) {
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 			if (indices != 0) {
 				int[] temp = new int[1];
 				OS.memmove (temp, indices, 4);
diff --git a/org/eclipse/swt/dnd/TextTransfer.java b/org/eclipse/swt/dnd/TextTransfer.java
index 6a6dabc..df7b952 100644
--- a/org/eclipse/swt/dnd/TextTransfer.java
+++ b/org/eclipse/swt/dnd/TextTransfer.java
@@ -66,9 +66,9 @@ public void javaToNative (Object object, TransferData transferData) {
 	String string = (String)object;
 	byte[] utf8 = Converter.wcsToMbcs (null, string, true);
 	if  (transferData.type ==  COMPOUND_TEXT_ID) {
-		int /*long*/[] encoding = new int /*long*/[1];
+		long /*int*/[] encoding = new long /*int*/[1];
 		int[] format = new int[1];
-		int /*long*/[] ctext = new int /*long*/[1];
+		long /*int*/[] ctext = new long /*int*/[1];
 		int[] length = new int[1];
 		boolean result = OS.gdk_utf8_to_compound_text(utf8, encoding, format, ctext, length);
 		if (!result) return;
@@ -79,7 +79,7 @@ public void javaToNative (Object object, TransferData transferData) {
 		transferData.result = 1;
 	} 
 	if (transferData.type == UTF8_STRING_ID) {
-		int /*long*/ pValue = OS.g_malloc(utf8.length);
+		long /*int*/ pValue = OS.g_malloc(utf8.length);
 		if (pValue ==  0) return;
 		OS.memmove(pValue, utf8, utf8.length);
 		transferData.type = UTF8_STRING_ID;
@@ -89,7 +89,7 @@ public void javaToNative (Object object, TransferData transferData) {
 		transferData.result = 1;
 	}
 	if (transferData.type == STRING_ID) {
-		int /*long*/ string_target = OS.gdk_utf8_to_string_target(utf8);
+		long /*int*/ string_target = OS.gdk_utf8_to_string_target(utf8);
 		if (string_target ==  0) return;
 		transferData.type = STRING_ID;
 		transferData.format = 8;
@@ -110,10 +110,10 @@ public void javaToNative (Object object, TransferData transferData) {
  */
 public Object nativeToJava(TransferData transferData){
 	if (!isSupportedType(transferData) ||  transferData.pValue == 0) return null;
-	int /*long*/[] list = new int /*long*/[1];
+	long /*int*/[] list = new long /*int*/[1];
 	int count = OS.gdk_text_property_to_utf8_list(transferData.type, transferData.format, transferData.pValue, transferData.length, list);
 	if (count == 0) return null;
-	int /*long*/[] ptr = new int /*long*/[1];
+	long /*int*/[] ptr = new long /*int*/[1];
 	OS.memmove(ptr, list[0], OS.PTR_SIZEOF);
 	int length = OS.strlen(ptr[0]);
 	byte[] utf8 = new byte[length];
diff --git a/org/eclipse/swt/dnd/TransferData.java b/org/eclipse/swt/dnd/TransferData.java
index 275a9da..09e766e 100644
--- a/org/eclipse/swt/dnd/TransferData.java
+++ b/org/eclipse/swt/dnd/TransferData.java
@@ -38,7 +38,7 @@ public class TransferData {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ type;
+	public long /*int*/ type;
 	
 	/**
 	 * Specifies the number of units in pValue.
@@ -78,7 +78,7 @@ public class TransferData {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ pValue;
+	public long /*int*/ pValue;
 
 	/**
 	 * The result field contains the result of converting a
diff --git a/org/eclipse/swt/dnd/TreeDragSourceEffect.java b/org/eclipse/swt/dnd/TreeDragSourceEffect.java
index f6e0067..81f0a21 100644
--- a/org/eclipse/swt/dnd/TreeDragSourceEffect.java
+++ b/org/eclipse/swt/dnd/TreeDragSourceEffect.java
@@ -87,26 +87,26 @@ public class TreeDragSourceEffect extends DragSourceEffect {
 		* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 		* to give a valid pointer instead.
 		*/
-		int /*long*/ handle = tree.handle;
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-		int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-		int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+		long /*int*/ handle = tree.handle;
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+		long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 		if (list == 0) return null;
 		int count = Math.min(10, OS.g_list_length (list));
 
 		Display display = tree.getDisplay();
 		if (count == 1) {
-			int /*long*/ path = OS.g_list_nth_data (list, 0);
-			int /*long*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
+			long /*int*/ path = OS.g_list_nth_data (list, 0);
+			long /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 			dragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0); 
 		} else {
 			int width = 0, height = 0;
 			int[] w = new int[1], h = new int[1];
 			int[] yy = new int[count], hh = new int[count];
-			int /*long*/ [] pixmaps = new int /*long*/ [count];
+			long /*int*/ [] pixmaps = new long /*int*/ [count];
 			GdkRectangle rect = new GdkRectangle ();
 			for (int i=0; i<count; i++) {
-				int /*long*/ path = OS.g_list_nth_data (list, i);
+				long /*int*/ path = OS.g_list_nth_data (list, i);
 				OS.gtk_tree_view_get_cell_area (handle, path, 0, rect);
 				pixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 				OS.gdk_drawable_get_size(pixmaps[i], w, h);
@@ -115,10 +115,10 @@ public class TreeDragSourceEffect extends DragSourceEffect {
 				yy[i] = rect.y;
 				hh[i] = h[0];
 			}
-			int /*long*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
-			int /*long*/ gcSource = OS.gdk_gc_new(source);
-			int /*long*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
-			int /*long*/ gcMask = OS.gdk_gc_new(mask);
+			long /*int*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
+			long /*int*/ gcSource = OS.gdk_gc_new(source);
+			long /*int*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
+			long /*int*/ gcMask = OS.gdk_gc_new(mask);
 			GdkColor color = new GdkColor();
 			color.pixel = 0;
 			OS.gdk_gc_set_foreground(gcMask, color);
diff --git a/org/eclipse/swt/dnd/TreeDropTargetEffect.java b/org/eclipse/swt/dnd/TreeDropTargetEffect.java
index ace9718..5af4937 100644
--- a/org/eclipse/swt/dnd/TreeDropTargetEffect.java
+++ b/org/eclipse/swt/dnd/TreeDropTargetEffect.java
@@ -111,7 +111,7 @@ public class TreeDropTargetEffect extends DropTargetEffect {
 	 */
 	public void dragLeave(DropTargetEvent event) {
 		Tree tree = (Tree) control;
-		int /*long*/ handle = tree.handle;
+		long /*int*/ handle = tree.handle;
 		OS.gtk_tree_view_set_drag_dest_row(handle, 0, OS.GTK_TREE_VIEW_DROP_BEFORE);
 
 		scrollBeginTime = 0;
@@ -142,14 +142,14 @@ public class TreeDropTargetEffect extends DropTargetEffect {
 		Tree tree = (Tree) control;
 		int effect = checkEffect(event.feedback);
 
-		int /*long*/ handle = tree.handle;
+		long /*int*/ handle = tree.handle;
 		Point coordinates = new Point(event.x, event.y);
 		coordinates = tree.toControl(coordinates);
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		OS.gtk_tree_view_get_path_at_pos (handle, coordinates.x, coordinates.y, path, null, null, null);
 		int index = -1;
 		if (path[0] != 0) {
-			int /*long*/ indices = OS.gtk_tree_path_get_indices(path[0]);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices(path[0]);
 			if (indices != 0) {	
 				int depth = OS.gtk_tree_path_get_depth(path[0]);
 				int[] temp = new int[depth];
diff --git a/org/eclipse/swt/dnd/URLTransfer.java b/org/eclipse/swt/dnd/URLTransfer.java
index 63226b1..7e872fb 100644
--- a/org/eclipse/swt/dnd/URLTransfer.java
+++ b/org/eclipse/swt/dnd/URLTransfer.java
@@ -66,7 +66,7 @@ public void javaToNative (Object object, TransferData transferData){
 	char [] chars = new char[charCount +1];
 	string.getChars(0, charCount , chars, 0);
 	int byteCount = chars.length*2;
-	int /*long*/ pValue = OS.g_malloc(byteCount);
+	long /*int*/ pValue = OS.g_malloc(byteCount);
 	if (pValue == 0) return;
 	OS.memmove(pValue, chars, byteCount);
 	transferData.length = byteCount;
diff --git a/org/eclipse/swt/graphics/Color.java b/org/eclipse/swt/graphics/Color.java
index e3fae9e..db84dfa 100644
--- a/org/eclipse/swt/graphics/Color.java
+++ b/org/eclipse/swt/graphics/Color.java
@@ -115,7 +115,7 @@ void destroy() {
 			device.gdkColors[pixel] = null;
 		}
 	}
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_colormap_free_colors(colormap, handle, 1);
 	handle = null;
 }
@@ -242,7 +242,7 @@ void init(int red, int green, int blue) {
 	gdkColor.red = (short)((red & 0xFF) | ((red & 0xFF) << 8));
 	gdkColor.green = (short)((green & 0xFF) | ((green & 0xFF) << 8));
 	gdkColor.blue = (short)((blue & 0xFF) | ((blue & 0xFF) << 8));
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	if (!OS.gdk_colormap_alloc_color(colormap, gdkColor, true, true)) {
 		/* Allocate black. */
 		gdkColor = new GdkColor();
diff --git a/org/eclipse/swt/graphics/Cursor.java b/org/eclipse/swt/graphics/Cursor.java
index ce5768c..755d95e 100644
--- a/org/eclipse/swt/graphics/Cursor.java
+++ b/org/eclipse/swt/graphics/Cursor.java
@@ -52,7 +52,7 @@ public final class Cursor extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 
 	static final byte[] APPSTARTING_SRC = {
 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
@@ -284,15 +284,15 @@ public Cursor(Device device, ImageData source, int hotspotX, int hotspotY) {
 		hotspotY >= source.height || hotspotY < 0) {
 		SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ display = 0;
+	long /*int*/ display = 0;
 	if (OS.GTK_VERSION >= OS.VERSION(2, 4, 0) && OS.gdk_display_supports_cursor_color(display = OS.gdk_display_get_default ())) {
 		int width = source.width;
 		int height = source.height;
 		PaletteData palette = source.palette;	
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] buffer = source.data;
 		if (!palette.isDirect || source.depth != 24 || stride != source.bytesPerLine || palette.redMask != 0xFF000000 || palette.greenMask != 0xFF0000 || palette.blueMask != 0xFF00) {
 			buffer = new byte[source.width * source.height * 4];
@@ -426,10 +426,10 @@ public Cursor(Device device, ImageData source, int hotspotX, int hotspotY) {
 	init();
 }
 
-int /*long*/ createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse) {
-	int /*long*/ sourcePixmap = OS.gdk_bitmap_create_from_data(0, sourceData, width, height);
-	int /*long*/ maskPixmap = OS.gdk_bitmap_create_from_data(0, maskData, width, height);
-	int /*long*/ cursor = 0;
+long /*int*/ createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse) {
+	long /*int*/ sourcePixmap = OS.gdk_bitmap_create_from_data(0, sourceData, width, height);
+	long /*int*/ maskPixmap = OS.gdk_bitmap_create_from_data(0, maskData, width, height);
+	long /*int*/ cursor = 0;
 	if (sourcePixmap != 0 && maskPixmap != 0) {
 		GdkColor foreground = new GdkColor();
 		if (!reverse) foreground.red = foreground.green = foreground.blue = (short)0xFFFF;
@@ -479,7 +479,7 @@ public boolean equals(Object object) {
  * 
  * @private
  */
-public static Cursor gtk_new(Device device, int /*long*/ handle) {
+public static Cursor gtk_new(Device device, long /*int*/ handle) {
 	Cursor cursor = new Cursor(device);
 	cursor.handle = handle;
 	return cursor;
diff --git a/org/eclipse/swt/graphics/Device.java b/org/eclipse/swt/graphics/Device.java
index fbacfcf..2b63eca 100644
--- a/org/eclipse/swt/graphics/Device.java
+++ b/org/eclipse/swt/graphics/Device.java
@@ -34,8 +34,8 @@ public abstract class Device implements Drawable {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	protected int /*long*/ xDisplay;
-	int /*long*/ shellHandle;
+	protected long /*int*/ xDisplay;
+	long /*int*/ shellHandle;
 
 	/* Debugging */
 	public static boolean DEBUG;
@@ -53,7 +53,7 @@ public abstract class Device implements Drawable {
 	boolean disposed;
 	
 	/* Warning and Error Handlers */
-	int /*long*/ logProc;
+	long /*int*/ logProc;
 	Callback logCallback;
 	//NOT DONE - get list of valid names
 	String [] log_domains = {"GLib-GObject", "GLib", "GObject", "Pango", "ATK", "GdkPixbuf", "Gdk", "Gtk", "GnomeVFS"};
@@ -62,7 +62,7 @@ public abstract class Device implements Drawable {
 	
 	/* X Warning and Error Handlers */
 	static Callback XErrorCallback, XIOErrorCallback;
-	static int /*long*/ XErrorProc, XIOErrorProc, XNullErrorProc, XNullIOErrorProc;
+	static long /*int*/ XErrorProc, XIOErrorProc, XNullErrorProc, XNullIOErrorProc;
 	static Device[] Devices = new Device[4];
 
 	/*
@@ -77,7 +77,7 @@ public abstract class Device implements Drawable {
 	/* System Font */
 	Font systemFont;
 	
-	int /*long*/ emptyTab;
+	long /*int*/ emptyTab;
 
 	boolean useXRender;
 
@@ -160,7 +160,7 @@ void checkCairo() {
 	try {
 		/* Check if cairo is available on the system */
 		byte[] buffer = Converter.wcsToMbcs(null, "libcairo.so.2", true);
-		int /*long*/ libcairo = OS.dlopen(buffer, OS.RTLD_LAZY);
+		long /*int*/ libcairo = OS.dlopen(buffer, OS.RTLD_LAZY);
 		if (libcairo != 0) {
 			OS.dlclose(libcairo);
 		} else {
@@ -259,7 +259,7 @@ void dispose_Object (Object object) {
 	}
 }
 
-static synchronized Device findDevice (int /*long*/ xDisplay) {
+static synchronized Device findDevice (long /*int*/ xDisplay) {
 	for (int i=0; i<Devices.length; i++) {
 		Device device = Devices [i];
 		if (device != null && device.xDisplay == xDisplay) {
@@ -414,13 +414,13 @@ public Point getDPI () {
 public FontData[] getFontList (String faceName, boolean scalable) {
 	checkDevice ();
 	if (!scalable) return new FontData[0];
-	int /*long*/[] family = new int /*long*/[1];
-	int /*long*/[] face = new int /*long*/[1];
-	int /*long*/[] families = new int /*long*/[1];
+	long /*int*/[] family = new long /*int*/[1];
+	long /*int*/[] face = new long /*int*/[1];
+	long /*int*/[] families = new long /*int*/[1];
 	int[] n_families = new int[1];
-	int /*long*/[] faces = new int /*long*/[1];
+	long /*int*/[] faces = new long /*int*/[1];
 	int[] n_faces = new int[1];
-	int /*long*/ context = OS.gdk_pango_context_get();
+	long /*int*/ context = OS.gdk_pango_context_get();
 	OS.pango_context_list_families(context, families, n_families);
 	int nFds = 0;
 	FontData[] fds = new FontData[faceName != null ? 4 : n_families[0]];
@@ -428,7 +428,7 @@ public FontData[] getFontList (String faceName, boolean scalable) {
 		OS.memmove(family, families[0] + i * OS.PTR_SIZEOF, OS.PTR_SIZEOF);
 		boolean match = true;
 		if (faceName != null) {
-			int /*long*/ familyName = OS.pango_font_family_get_name(family[0]);
+			long /*int*/ familyName = OS.pango_font_family_get_name(family[0]);
 			int length = OS.strlen(familyName);
 			byte[] buffer = new byte[length];
 			OS.memmove(buffer, familyName, length);
@@ -439,7 +439,7 @@ public FontData[] getFontList (String faceName, boolean scalable) {
 		    OS.pango_font_family_list_faces(family[0], faces, n_faces);
 		    for (int j=0; j<n_faces[0]; j++) {
 		        OS.memmove(face, faces[0] + j * OS.PTR_SIZEOF, OS.PTR_SIZEOF);
-		        int /*long*/ fontDesc = OS.pango_font_face_describe(face[0]);
+		        long /*int*/ fontDesc = OS.pango_font_face_describe(face[0]);
 		        Font font = Font.gtk_new(this, fontDesc);
 		        FontData data = font.getFontData()[0];
 				if (nFds == fds.length) {
@@ -650,7 +650,7 @@ protected void init () {
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public abstract int /*long*/ internal_new_GC (GCData data);
+public abstract long /*int*/ internal_new_GC (GCData data);
 
 /**	 
  * Invokes platform specific functionality to dispose a GC handle.
@@ -665,7 +665,7 @@ public abstract int /*long*/ internal_new_GC (GCData data);
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public abstract void internal_dispose_GC (int /*long*/ handle, GCData data);
+public abstract void internal_dispose_GC (long /*int*/ handle, GCData data);
 
 /**
  * Returns <code>true</code> if the device has been disposed,
@@ -706,7 +706,7 @@ public boolean loadFont (String path) {
 	return OS.FcConfigAppFontAddFile (0, buffer);
 }
 
-int /*long*/ logProc (int /*long*/ log_domain, int /*long*/ log_level, int /*long*/ message, int /*long*/ user_data) {
+long /*int*/ logProc (long /*int*/ log_domain, long /*int*/ log_level, long /*int*/ message, long /*int*/ user_data) {
 	if (warningLevel == 0) {
 		if (DEBUG || debug) {
 			new Error ().printStackTrace ();
@@ -777,7 +777,7 @@ protected void release () {
 	shellHandle = 0;
 
 	if (gdkColors != null) {
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		for (int i = 0; i < gdkColors.length; i++) {
 			GdkColor color = gdkColors [i];
 			if (color != null) {
@@ -870,7 +870,7 @@ public void setWarnings (boolean warnings) {
 	}
 }
 
-static int /*long*/ XErrorProc (int /*long*/ xDisplay, int /*long*/ xErrorEvent) {
+static long /*int*/ XErrorProc (long /*int*/ xDisplay, long /*int*/ xErrorEvent) {
 	Device device = findDevice (xDisplay);
 	if (device != null) {
 		if (device.warningLevel == 0) {
@@ -886,7 +886,7 @@ static int /*long*/ XErrorProc (int /*long*/ xDisplay, int /*long*/ xErrorEvent)
 	return 0;
 }
 
-static int /*long*/ XIOErrorProc (int /*long*/ xDisplay) {
+static long /*int*/ XIOErrorProc (long /*int*/ xDisplay) {
 	Device device = findDevice (xDisplay);
 	if (device != null) {
 		if (DEBUG || device.debug) {
diff --git a/org/eclipse/swt/graphics/Drawable.java b/org/eclipse/swt/graphics/Drawable.java
index 2d909d1..450d84f 100644
--- a/org/eclipse/swt/graphics/Drawable.java
+++ b/org/eclipse/swt/graphics/Drawable.java
@@ -43,7 +43,7 @@ public interface Drawable {
  * @return the platform specific GC handle
  */
  
-public int /*long*/ internal_new_GC (GCData data);
+public long /*int*/ internal_new_GC (GCData data);
 
 /**	 
  * Invokes platform specific functionality to dispose a GC handle.
@@ -58,6 +58,6 @@ public int /*long*/ internal_new_GC (GCData data);
  * @param handle the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ handle, GCData data);
+public void internal_dispose_GC (long /*int*/ handle, GCData data);
 
 }
diff --git a/org/eclipse/swt/graphics/Font.java b/org/eclipse/swt/graphics/Font.java
index 3607e38..0e7c227 100644
--- a/org/eclipse/swt/graphics/Font.java
+++ b/org/eclipse/swt/graphics/Font.java
@@ -42,7 +42,7 @@ public final class Font extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 Font(Device device) {
 	super(device);
@@ -178,7 +178,7 @@ public boolean equals(Object object) {
 public FontData[] getFontData() {
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 
-	int /*long*/ family = OS.pango_font_description_get_family(handle);
+	long /*int*/ family = OS.pango_font_description_get_family(handle);
 	int length = OS.strlen(family);
 	byte[] buffer = new byte[length];
 	OS.memmove(buffer, family, length);
@@ -190,7 +190,7 @@ public FontData[] getFontData() {
 	if (pangoStyle == OS.PANGO_STYLE_ITALIC) style |= SWT.ITALIC;
 	if (pangoStyle == OS.PANGO_STYLE_OBLIQUE) style |= SWT.ROMAN;
 	if (pangoWeight >= OS.PANGO_WEIGHT_BOLD) style |= SWT.BOLD;
-	int /*long*/ fontString = OS.pango_font_description_to_string (handle);
+	long /*int*/ fontString = OS.pango_font_description_to_string (handle);
 	length = OS.strlen (fontString);
 	buffer = new byte [length + 1];
 	OS.memmove (buffer, fontString, length);	
@@ -215,7 +215,7 @@ public FontData[] getFontData() {
  * 
  * @private
  */
-public static Font gtk_new(Device device, int /*long*/ handle) {
+public static Font gtk_new(Device device, long /*int*/ handle) {
 	Font font = new Font(device);
 	font.handle = handle;
 	return font;
diff --git a/org/eclipse/swt/graphics/GC.java b/org/eclipse/swt/graphics/GC.java
index 78c020d..a12ea67 100644
--- a/org/eclipse/swt/graphics/GC.java
+++ b/org/eclipse/swt/graphics/GC.java
@@ -67,7 +67,7 @@ public final class GC extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 	Drawable drawable;
 	GCData data;
@@ -154,7 +154,7 @@ public GC(Drawable drawable, int style) {
 	if (drawable == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	GCData data = new GCData();
 	data.style = checkStyle(style);
-	int /*long*/ gdkGC = drawable.internal_new_GC(data);
+	long /*int*/ gdkGC = drawable.internal_new_GC(data);
 	Device device = data.device;
 	if (device == null) device = Device.getDevice();
 	if (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
@@ -163,10 +163,10 @@ public GC(Drawable drawable, int style) {
 	init();
 }
 
-static void addCairoString(int /*long*/ cairo, String string, float x, float y, Font font) {
+static void addCairoString(long /*int*/ cairo, String string, float x, float y, Font font) {
 	byte[] buffer = Converter.wcsToMbcs(null, string, true);
 	if (OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
-		int /*long*/ layout = OS.pango_cairo_create_layout(cairo);
+		long /*int*/ layout = OS.pango_cairo_create_layout(cairo);
 		if (layout == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		OS.pango_layout_set_text(layout, buffer, -1);
 		OS.pango_layout_set_font_description(layout, font.handle);
@@ -192,7 +192,7 @@ static int checkStyle (int style) {
 	return style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);
 }
 
-public static GC gtk_new(int /*long*/ handle, GCData data) {
+public static GC gtk_new(long /*int*/ handle, GCData data) {
 	GC gc = new GC();
 	gc.device = data.device;
 	gc.init(null, data, handle);
@@ -201,7 +201,7 @@ public static GC gtk_new(int /*long*/ handle, GCData data) {
 
 public static GC gtk_new(Drawable drawable, GCData data) {
 	GC gc = new GC();
-	int /*long*/ gdkGC = drawable.internal_new_GC(data);
+	long /*int*/ gdkGC = drawable.internal_new_GC(data);
 	gc.device = data.device;
 	gc.init(drawable, data, gdkGC);
 	return gc;
@@ -212,7 +212,7 @@ void checkGC (int mask) {
 	if ((state & mask) == mask) return;
 	state = (state ^ mask) & mask;	
 	data.state |= mask;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if ((state & (BACKGROUND | FOREGROUND)) != 0) {
 			GdkColor color;
@@ -228,7 +228,7 @@ void checkGC (int mask) {
 			}
 			if  (pattern != null) {
 				if ((data.style & SWT.MIRRORED) != 0 && pattern.surface != 0) {
-					int /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(pattern.surface);
+					long /*int*/ newPattern = Cairo.cairo_pattern_create_for_surface(pattern.surface);
 					if (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 					Cairo.cairo_pattern_set_extend(newPattern, Cairo.CAIRO_EXTEND_REPEAT);
 					double[] matrix = {-1, 0, 0, 1, 0, 0};
@@ -388,10 +388,10 @@ void checkGC (int mask) {
 	}
 }
 
-int /*long*/ convertRgn(int /*long*/ rgn, double[] matrix) {
-	int /*long*/ newRgn = OS.gdk_region_new();
+long /*int*/ convertRgn(long /*int*/ rgn, double[] matrix) {
+	long /*int*/ newRgn = OS.gdk_region_new();
 	int[] nRects = new int[1];
-	int /*long*/[] rects = new int /*long*/[1];
+	long /*int*/[] rects = new long /*int*/[1];
 	OS.gdk_region_get_rectangles(rgn, rects, nRects);
 	GdkRectangle rect = new GdkRectangle();
 	int[] pointArray = new int[8];
@@ -418,7 +418,7 @@ int /*long*/ convertRgn(int /*long*/ rgn, double[] matrix) {
 		Cairo.cairo_matrix_transform_point(matrix, x, y);
 		pointArray[6] = (int)x[0];
 		pointArray[7] = (int)Math.round(y[0]);
-		int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+		long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 		OS.gdk_region_union(newRgn, polyRgn);
 		OS.gdk_region_destroy(polyRgn);
 	}
@@ -447,7 +447,7 @@ public void copyArea(Image image, int x, int y) {
 	if (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (image.type != SWT.BITMAP || image.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	Rectangle rect = image.getBounds();
-	int /*long*/ gdkGC = OS.gdk_gc_new(image.pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(image.pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	OS.gdk_gc_set_subwindow(gdkGC, OS.GDK_INCLUDE_INFERIORS);
 	OS.gdk_draw_drawable(image.pixmap, gdkGC, data.drawable, x, y, 0, 0, rect.width, rect.height);
@@ -495,7 +495,7 @@ public void copyArea(int srcX, int srcY, int width, int height, int destX, int d
 	if (width <= 0 || height <= 0) return;
 	int deltaX = destX - srcX, deltaY = destY - srcY;
 	if (deltaX == 0 && deltaY == 0) return;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image == null && paint) OS.gdk_gc_set_exposures(handle, true);
 	OS.gdk_draw_drawable(drawable, handle, drawable, srcX, srcY, destX, destY, width, height);
 	if (data.image == null & paint) {
@@ -535,10 +535,10 @@ public void copyArea(int srcX, int srcY, int width, int height, int destX, int d
 }
 
 void createLayout() {
-	int /*long*/ context = OS.gdk_pango_context_get();
+	long /*int*/ context = OS.gdk_pango_context_get();
 	if (context == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	data.context = context;
-	int /*long*/ layout = OS.pango_layout_new(context);
+	long /*int*/ layout = OS.pango_layout_new(context);
 	if (layout == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	data.layout = layout;
 	OS.pango_context_set_language(context, OS.gtk_get_default_language());
@@ -558,13 +558,13 @@ void disposeLayout() {
 
 void destroy() {
 	if (data.disposeCairo) {
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) Cairo.cairo_destroy(cairo);
 		data.cairo = 0;
 	}
 
 	/* Free resources */
-	int /*long*/ clipRgn = data.clipRgn;
+	long /*int*/ clipRgn = data.clipRgn;
 	if (clipRgn != 0) OS.gdk_region_destroy(clipRgn);
 	Image image = data.image;
 	if (image != null) {
@@ -627,7 +627,7 @@ public void drawArc(int x, int y, int width, int height, int startAngle, int arc
 		height = -height;
 	}
 	if (width == 0 || height == 0 || arcAngle == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (width == height) {
@@ -678,8 +678,8 @@ public void drawFocus(int x, int y, int width, int height) {
 	* are not valid in the default style. The fix is to use a style
 	* from a widget.
 	*/
-	int /*long*/ style = OS.gtk_widget_get_style(data.device.shellHandle);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ style = OS.gtk_widget_get_style(data.device.shellHandle);
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		checkGC(FOREGROUND);
 		int[] lineWidth = new int[1];
@@ -784,7 +784,7 @@ void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight,
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 		}
  	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (data.alpha != 0) {
 			srcImage.createSurface();
@@ -806,7 +806,7 @@ void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight,
 				case SWT.LOW: filter = Cairo.CAIRO_FILTER_FAST; break;
 				case SWT.HIGH: filter = Cairo.CAIRO_FILTER_BEST; break;
 			}
-			int /*long*/ pattern = Cairo.cairo_pattern_create_for_surface(srcImage.surface);
+			long /*int*/ pattern = Cairo.cairo_pattern_create_for_surface(srcImage.surface);
 			if (pattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			if (srcWidth != destWidth || srcHeight != destHeight) {
 				/*
@@ -825,8 +825,8 @@ void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight,
 				* the image that was created or the edges are still faded.
 				*/
 				if (Cairo.cairo_version () >= Cairo.CAIRO_VERSION_ENCODE(1, 4, 0)) {
-					int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);
-					int /*long*/ cr = Cairo.cairo_create(surface);
+					long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);
+					long /*int*/ cr = Cairo.cairo_create(surface);
 					Cairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, imgHeight);
 					Cairo.cairo_paint(cr);
 					Cairo.cairo_scale(cr, -1, -1);
@@ -849,7 +849,7 @@ void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight,
 					Cairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight * 3);
 					Cairo.cairo_paint(cr);
 					Cairo.cairo_destroy(cr);
-					int /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);
+					long /*int*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);
 					Cairo.cairo_surface_destroy(surface);
 					if (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 					Cairo.cairo_pattern_destroy(pattern);
@@ -889,7 +889,7 @@ void drawImage(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight,
 			drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, 0, -1);
 			return;
 		}
-		int /*long*/ pixbuf = scale(srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destWidth, destHeight);
+		long /*int*/ pixbuf = scale(srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destWidth, destHeight);
 		if (pixbuf != 0) {
 			OS.gdk_pixbuf_render_to_drawable(pixbuf, data.drawable, handle, 0, 0, destX, destY, destWidth, destHeight, OS.GDK_RGB_DITHER_NORMAL, 0, 0);
 			OS.g_object_unref(pixbuf);
@@ -906,12 +906,12 @@ void drawImageAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHei
 		drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, srcImage.mask, OS.PictStandardA8);
 		return;
 	}
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
 	if (pixbuf == 0) return;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] line = new byte[stride];
 	byte alpha = (byte)srcImage.alpha;
 	byte[] alphaData = srcImage.alphaData;
@@ -924,7 +924,7 @@ void drawImageAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHei
 		OS.memmove(pixels + (y * stride), line, stride);
 	}
 	if (srcWidth != destWidth || srcHeight != destHeight) {
-		int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+		long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 		OS.g_object_unref(pixbuf);
 		if (scaledPixbuf == 0) return;
 		pixbuf = scaledPixbuf;
@@ -941,33 +941,33 @@ void drawImageAlpha(Image srcImage, int srcX, int srcY, int srcWidth, int srcHei
 	OS.g_object_unref(pixbuf);
 }
 void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight) {
-	int /*long*/ drawable = data.drawable;
-	int /*long*/ colorPixmap = srcImage.pixmap;
+	long /*int*/ drawable = data.drawable;
+	long /*int*/ colorPixmap = srcImage.pixmap;
 	/* Generate the mask if necessary. */
 	if (srcImage.transparentPixel != -1) srcImage.createMask();
-	int /*long*/ maskPixmap = srcImage.mask;
+	long /*int*/ maskPixmap = srcImage.mask;
 
 	if (device.useXRender) {
 		drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, maskPixmap, OS.PictStandardA1);
 	} else {
 		if (srcWidth != destWidth || srcHeight != destHeight) {
-			int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
+			long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
 			if (pixbuf != 0) {
-				int /*long*/ colormap = OS.gdk_colormap_get_system();
+				long /*int*/ colormap = OS.gdk_colormap_get_system();
 				OS.gdk_pixbuf_get_from_drawable(pixbuf, colorPixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
-				int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
+				long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
 				if (maskPixbuf != 0) {
 					OS.gdk_pixbuf_get_from_drawable(maskPixbuf, maskPixmap, 0, srcX, srcY, 0, 0, srcWidth, srcHeight);
 					int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-					int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+					long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 					byte[] line = new byte[stride];
 					int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-					int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+					long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 					byte[] maskLine = new byte[maskStride];
 					for (int y=0; y<srcHeight; y++) {
-						int /*long*/ offset = pixels + (y * stride);
+						long /*int*/ offset = pixels + (y * stride);
 						OS.memmove(line, offset, stride);
-						int /*long*/ maskOffset = maskPixels + (y * maskStride);
+						long /*int*/ maskOffset = maskPixels + (y * maskStride);
 						OS.memmove(maskLine, maskOffset, maskStride);
 						for (int x=0; x<srcWidth; x++) {
 							if (maskLine[x * 3] == 0) {
@@ -977,10 +977,10 @@ void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeig
 						OS.memmove(offset, line, stride);
 					}
 					OS.g_object_unref(maskPixbuf);
-					int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+					long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 					if (scaledPixbuf != 0) {
-						int /*long*/[] colorBuffer = new int /*long*/[1];
-						int /*long*/[] maskBuffer = new int /*long*/[1];
+						long /*int*/[] colorBuffer = new long /*int*/[1];
+						long /*int*/[] maskBuffer = new long /*int*/[1];
 						OS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128);
 						colorPixmap = colorBuffer[0];
 						maskPixmap = maskBuffer[0];
@@ -1001,9 +1001,9 @@ void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeig
 			int newHeight = srcY + srcHeight;
 			int bytesPerLine = (newWidth + 7) / 8;
 			byte[] maskData = new byte[bytesPerLine * newHeight];
-			int /*long*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);
+			long /*int*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);
 			if (mask != 0) {
-				int /*long*/ gc = OS.gdk_gc_new(mask);
+				long /*int*/ gc = OS.gdk_gc_new(mask);
 				OS.gdk_region_offset(data.clipRgn, -destX + srcX, -destY + srcY);
 				OS.gdk_gc_set_clip_region(gc, data.clipRgn);
 				OS.gdk_region_offset(data.clipRgn, destX - srcX, destY - srcY);
@@ -1035,19 +1035,19 @@ void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeig
 	/* Destroy the image mask if the there is a GC created on the image */
 	if (srcImage.transparentPixel != -1 && srcImage.memGC != null) srcImage.destroyMask();
 }
-void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int /*long*/ maskPixmap, int maskType) {
+void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, long /*int*/ maskPixmap, int maskType) {
 	int translateX = 0, translateY = 0;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image == null && !data.realDrawable) {
 		int[] x = new int[1], y = new int[1];
-		int /*long*/ [] real_drawable = new int /*long*/ [1];
+		long /*int*/ [] real_drawable = new long /*int*/ [1];
 		OS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y);
 		drawable = real_drawable[0];
 		translateX = -x[0];
 		translateY = -y[0];
 	}
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ maskPict = 0;
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ maskPict = 0;
 	if (maskPixmap != 0) {
 		int attribCount = 0;
 		XRenderPictureAttributes attrib = null;
@@ -1059,10 +1059,10 @@ void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcH
 		maskPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(maskPixmap), OS.XRenderFindStandardFormat(xDisplay, maskType), attribCount, attrib);
 		if (maskPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	}
-	int /*long*/ format = OS.XRenderFindVisualFormat(xDisplay, OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system()));
-	int /*long*/ destPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(drawable), format, 0, null);
+	long /*int*/ format = OS.XRenderFindVisualFormat(xDisplay, OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system()));
+	long /*int*/ destPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(drawable), format, 0, null);
 	if (destPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ srcPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(srcImage.pixmap), format, 0, null);
+	long /*int*/ srcPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(srcImage.pixmap), format, 0, null);
 	if (srcPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	if (srcWidth != destWidth || srcHeight != destHeight) {
 		int[] transform = new int[]{(int)(((float)srcWidth / destWidth) * 65536), 0, 0, 0, (int)(((float)srcHeight / destHeight) * 65536), 0, 0, 0, 65536};
@@ -1071,7 +1071,7 @@ void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcH
 		srcX *= destWidth / (float)srcWidth;
 		srcY *= destHeight / (float)srcHeight;
 	}
-	int /*long*/ clipping = data.clipRgn;
+	long /*int*/ clipping = data.clipRgn;
 	if (data.damageRgn != 0) {
 		if (clipping == 0) {
 			clipping = data.damageRgn;
@@ -1083,7 +1083,7 @@ void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcH
 	}
 	if (clipping != 0) {
 		int[] nRects = new int[1];
-		int /*long*/[] rects = new int /*long*/[1];
+		long /*int*/[] rects = new long /*int*/[1];
 		OS.gdk_region_get_rectangles(clipping, rects, nRects);
 		GdkRectangle rect = new GdkRectangle();
 		short[] xRects = new short[nRects[0] * 4];
@@ -1105,12 +1105,12 @@ void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcH
 	OS.XRenderFreePicture(xDisplay, srcPict);
 	if (maskPict != 0) OS.XRenderFreePicture(xDisplay, maskPict);
 }
-int /*long*/ scale(int /*long*/ src, int srcX, int srcY, int srcWidth, int srcHeight, int destWidth, int destHeight) {
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
+long /*int*/ scale(long /*int*/ src, int srcX, int srcY, int srcWidth, int srcHeight, int destWidth, int destHeight) {
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
 	if (pixbuf == 0) return 0;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, src, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
-	int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+	long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 	OS.g_object_unref(pixbuf);
 	return scaledPixbuf;
 }
@@ -1131,7 +1131,7 @@ int /*long*/ scale(int /*long*/ src, int srcX, int srcY, int srcWidth, int srcHe
 public void drawLine(int x1, int y1, int x2, int y2) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		Cairo.cairo_move_to(cairo, x1 + xOffset, y1 + yOffset);
@@ -1174,7 +1174,7 @@ public void drawOval(int x, int y, int width, int height) {
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (width == height) {
@@ -1221,11 +1221,11 @@ public void drawPath(Path path) {
 	if (path.handle == 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	initCairo();
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	Cairo.cairo_save(cairo);
 	double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 	Cairo.cairo_translate(cairo, xOffset, yOffset);
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -1253,7 +1253,7 @@ public void drawPath(Path path) {
 public void drawPoint (int x, int y) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_rectangle(cairo, x, y, 1, 1);
 		Cairo.cairo_fill(cairo);
@@ -1283,7 +1283,7 @@ public void drawPolygon(int[] pointArray) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, true);
 		Cairo.cairo_stroke(cairo);
@@ -1313,7 +1313,7 @@ public void drawPolyline(int[] pointArray) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, false);
 		Cairo.cairo_stroke(cairo);
@@ -1322,7 +1322,7 @@ public void drawPolyline(int[] pointArray) {
 	OS.gdk_draw_lines(data.drawable, handle, pointArray, pointArray.length / 2);
 }
 
-void drawPolyline(int /*long*/ cairo, int[] pointArray, boolean close) {
+void drawPolyline(long /*int*/ cairo, int[] pointArray, boolean close) {
 	int count = pointArray.length / 2;
 	if (count == 0) return;
 	double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
@@ -1359,7 +1359,7 @@ public void drawRectangle(int x, int y, int width, int height) {
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		Cairo.cairo_rectangle(cairo, x + xOffset, y + yOffset, width, height);
@@ -1429,7 +1429,7 @@ public void drawRoundRectangle(int x, int y, int width, int height, int arcWidth
 	}
 	if (naw < 0) naw = 0 - naw;
 	if (nah < 0) nah = 0 - nah;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (naw == 0 || nah == 0) {
@@ -1455,7 +1455,7 @@ public void drawRoundRectangle(int x, int y, int width, int height, int arcWidth
 	}
 	int naw2 = naw / 2;
 	int nah2 = nah / 2;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (nw > naw) {
 		if (nh > nah) {
 			OS.gdk_draw_arc(drawable, handle, 0, nx, ny, naw, nah, 5760, 5760);
@@ -1615,7 +1615,7 @@ public void drawText (String string, int x, int y, int flags) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (string == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (string.length() == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
 			//TODO - honor flags
@@ -1664,13 +1664,13 @@ public void drawText (String string, int x, int y, int flags) {
 	if (!data.xorMode) {
 		OS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, data.layout, null, background);
 	} else {
-		int /*long*/ layout = data.layout;
+		long /*int*/ layout = data.layout;
 		if (data.stringWidth == -1) {
 			computeStringSize();
 		}
-		int /*long*/ pixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), data.stringWidth, data.stringHeight, -1);
+		long /*int*/ pixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), data.stringWidth, data.stringHeight, -1);
 		if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+		long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 		if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		GdkColor black = new GdkColor();
 		OS.gdk_gc_set_foreground(gdkGC, black);
@@ -1743,7 +1743,7 @@ public void fillArc(int x, int y, int width, int height, int startAngle, int arc
 		height = -height;
 	}
 	if (width == 0 || height == 0 || arcAngle == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (width == height) {
             if (arcAngle >= 0) {
@@ -1820,9 +1820,9 @@ public void fillGradientRectangle(int x, int y, int width, int height, boolean v
 		fillRectangle(x, y, width, height);
 		return;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
-		int /*long*/ pattern;
+		long /*int*/ pattern;
 		if (vertical) {
 			pattern = Cairo.cairo_pattern_create_linear (0.0, 0.0, 0.0, 1.0);
 		} else {
@@ -1872,7 +1872,7 @@ public void fillOval(int x, int y, int width, int height) {
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (width == height) {
 			Cairo.cairo_arc_negative(cairo, x + width / 2f, y + height / 2f, width / 2f, 0, 2 * (float)Compatibility.PI);
@@ -1918,8 +1918,8 @@ public void fillPath (Path path) {
 	if (path.handle == 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	initCairo();
 	checkGC(FILL);
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -1949,7 +1949,7 @@ public void fillPolygon(int[] pointArray) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(FILL);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, true);
 		Cairo.cairo_fill(cairo);
@@ -1984,7 +1984,7 @@ public void fillRectangle(int x, int y, int width, int height) {
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo; 
+	long /*int*/ cairo = data.cairo; 
 	if (cairo != 0) {
 		Cairo.cairo_rectangle(cairo, x, y, width, height);
 		Cairo.cairo_fill(cairo);
@@ -2050,7 +2050,7 @@ public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth
 	}
 	if (naw < 0) naw = 0 - naw;
 	if (nah < 0) nah = 0 - nah;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (naw == 0 || nah == 0) {
 			Cairo.cairo_rectangle(cairo, x, y, width, height);
@@ -2075,7 +2075,7 @@ public void fillRoundRectangle(int x, int y, int width, int height, int arcWidth
 	}
 	int naw2 = naw / 2;
 	int nah2 = nah / 2;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (nw > naw) {
 		if (nh > nah) {
 			OS.gdk_draw_arc(drawable, handle, 1, nx, ny, naw, nah, 5760, 5760);
@@ -2294,11 +2294,11 @@ public Rectangle getClipping() {
 		height = h[0];
 	}
 	/* Intersect visible bounds with clipping in device space and then convert then to user space */
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ clipRgn = data.clipRgn;
-	int /*long*/ damageRgn = data.damageRgn;
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ clipRgn = data.clipRgn;
+	long /*int*/ damageRgn = data.damageRgn;
 	if (clipRgn != 0 || damageRgn != 0 || cairo != 0) {
-		int /*long*/ rgn = OS.gdk_region_new();
+		long /*int*/ rgn = OS.gdk_region_new();
 		GdkRectangle rect = new GdkRectangle();
 		rect.width = width;
 		rect.height = height;
@@ -2354,10 +2354,10 @@ public void getClipping(Region region) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (region == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (region.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ clipping = region.handle;
+	long /*int*/ clipping = region.handle;
 	OS.gdk_region_subtract(clipping, clipping);
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ clipRgn = data.clipRgn;
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ clipRgn = data.clipRgn;
 	if (clipRgn == 0) {
 		GdkRectangle rect = new GdkRectangle();
 		if (data.width != -1 && data.height != -1) {
@@ -2373,7 +2373,7 @@ public void getClipping(Region region) {
 	} else {
 		/* Convert clipping to device space if needed */
 		if (data.clippingTransform != null) {
-			int /*long*/ rgn = convertRgn(clipRgn, data.clippingTransform);
+			long /*int*/ rgn = convertRgn(clipRgn, data.clippingTransform);
 			OS.gdk_region_union(clipping, rgn);
 			OS.gdk_region_destroy(rgn);
 		} else {
@@ -2388,7 +2388,7 @@ public void getClipping(Region region) {
 		double[] matrix = new double[6];
 		Cairo.cairo_get_matrix(cairo, matrix);
 		Cairo.cairo_matrix_invert(matrix);
-		int /*long*/ rgn = convertRgn(clipping, matrix);
+		long /*int*/ rgn = convertRgn(clipping, matrix);
 		OS.gdk_region_subtract(clipping, clipping);
 		OS.gdk_region_union(clipping, rgn);
 		OS.gdk_region_destroy(rgn);
@@ -2409,7 +2409,7 @@ public void getClipping(Region region) {
  */
 public int getFillRule() {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo == 0) return SWT.FILL_EVEN_ODD;
 	return Cairo.cairo_get_fill_rule(cairo) == Cairo.CAIRO_FILL_RULE_WINDING ? SWT.FILL_WINDING : SWT.FILL_EVEN_ODD;
 }
@@ -2445,9 +2445,9 @@ public FontMetrics getFontMetrics() {
 	if (data.context == 0) createLayout();
 	checkGC(FONT);
 	Font font = data.font;
-	int /*long*/ context = data.context;
-	int /*long*/ lang = OS.pango_context_get_language(context);
-	int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+	long /*int*/ context = data.context;
+	long /*int*/ lang = OS.pango_context_get_language(context);
+	long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 	FontMetrics fm = new FontMetrics();
 	fm.ascent = OS.PANGO_PIXELS(OS.pango_font_metrics_get_ascent(metrics));
 	fm.descent = OS.PANGO_PIXELS(OS.pango_font_metrics_get_descent(metrics));
@@ -2691,13 +2691,13 @@ public int getTextAntialias() {
     if (data.cairo == 0) return SWT.DEFAULT;
     int antialias = Cairo.CAIRO_ANTIALIAS_DEFAULT;
     if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
-    	int /*long*/ options = Cairo.cairo_font_options_create();
+    	long /*int*/ options = Cairo.cairo_font_options_create();
     	Cairo.cairo_get_font_options(data.cairo, options);
     	antialias = Cairo.cairo_font_options_get_antialias(options);
     	Cairo.cairo_font_options_destroy(options);
     } else {
     	if (data.context != 0) {
-    		int /*long*/ options = OS.pango_cairo_context_get_font_options(data.context);
+    		long /*int*/ options = OS.pango_cairo_context_get_font_options(data.context);
     		if (options != 0) antialias = Cairo.cairo_font_options_get_antialias(options);
     	}
     }
@@ -2732,7 +2732,7 @@ public void getTransform(Transform transform) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (transform == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (transform.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_get_matrix(cairo, transform.handle);
 		double[] identity = identity();
@@ -2792,7 +2792,7 @@ double[] identity() {
 	return identity;
 }
 
-void init(Drawable drawable, GCData data, int /*long*/ gdkGC) {
+void init(Drawable drawable, GCData data, long /*int*/ gdkGC) {
 	if (data.foreground != null) data.state &= ~FOREGROUND;
 	if (data.background != null) data.state &= ~(BACKGROUND | BACKGROUND_BG);
 	if (data.font != null) data.state &= ~FONT;
@@ -2812,26 +2812,26 @@ void init(Drawable drawable, GCData data, int /*long*/ gdkGC) {
 	handle = gdkGC;
 	if ((data.style & SWT.MIRRORED) != 0) {
 	  initCairo();
-	  int /*long*/ cairo = data.cairo;
+	  long /*int*/ cairo = data.cairo;
 	  Cairo.cairo_set_matrix(cairo, identity());
 	}
 }
 
 void initCairo() {
 	data.device.checkCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) return;
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
-	int /*long*/ xDrawable = 0;
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
+	long /*int*/ xDrawable = 0;
 	int translateX = 0, translateY = 0;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image != null) {
 		xDrawable = OS.GDK_PIXMAP_XID(drawable);
 	} else {
 		if (!data.realDrawable) {
 			int[] x = new int[1], y = new int[1];
-			int /*long*/ [] real_drawable = new int /*long*/ [1];
+			long /*int*/ [] real_drawable = new long /*int*/ [1];
 			OS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y);
 			xDrawable = OS.gdk_x11_drawable_get_xid(real_drawable[0]);
 			translateX = -x[0];
@@ -2841,7 +2841,7 @@ void initCairo() {
 	int[] w = new int[1], h = new int[1];
 	OS.gdk_drawable_get_size(drawable, w, h);
 	int width = w[0], height = h[0];
-	int /*long*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
+	long /*int*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_surface_set_device_offset(surface, translateX, translateY);
 	data.cairo = cairo = Cairo.cairo_create(surface);
@@ -2962,7 +2962,7 @@ public void setAdvanced(boolean advanced) {
 		} catch (SWTException e) {}
 	} else {
 		if (!data.disposeCairo) return;
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) Cairo.cairo_destroy(cairo);
 		data.cairo = 0;
 		data.interpolation = SWT.DEFAULT;
@@ -3042,7 +3042,7 @@ public void setAntialias(int antialias) {
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
     initCairo();
-    int /*long*/ cairo = data.cairo;
+    long /*int*/ cairo = data.cairo;
     Cairo.cairo_set_antialias(cairo, mode);
 }
 
@@ -3104,12 +3104,12 @@ public void setBackgroundPattern(Pattern pattern) {
 	data.state &= ~BACKGROUND;
 }
 
-static void setCairoFont(int /*long*/ cairo, Font font) {
+static void setCairoFont(long /*int*/ cairo, Font font) {
 	setCairoFont(cairo, font.handle);
 }
 
-static void setCairoFont(int /*long*/ cairo, int /*long*/ font) {
-	int /*long*/ family = OS.pango_font_description_get_family(font);
+static void setCairoFont(long /*int*/ cairo, long /*int*/ font) {
+	long /*int*/ family = OS.pango_font_description_get_family(font);
 	int length = OS.strlen(family);
 	byte[] buffer = new byte[length + 1];
 	OS.memmove(buffer, family, length);
@@ -3126,12 +3126,12 @@ static void setCairoFont(int /*long*/ cairo, int /*long*/ font) {
 	Cairo.cairo_set_font_size(cairo, height);
 }
 
-static void setCairoRegion(int /*long*/ cairo, int /*long*/ rgn) {
+static void setCairoRegion(long /*int*/ cairo, long /*int*/ rgn) {
 	if (OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 		OS.gdk_cairo_region(cairo, rgn);
 	} else {
 		int[] nRects = new int[1];
-		int /*long*/[] rects = new int /*long*/[1];
+		long /*int*/[] rects = new long /*int*/[1];
 		OS.gdk_region_get_rectangles(rgn, rects, nRects);
 		GdkRectangle rect = new GdkRectangle();
 		for (int i=0; i<nRects[0]; i++) {
@@ -3142,7 +3142,7 @@ static void setCairoRegion(int /*long*/ cairo, int /*long*/ rgn) {
 	}
 }
 
-static void setCairoPatternColor(int /*long*/ pattern, int offset, Color c, int alpha) {
+static void setCairoPatternColor(long /*int*/ pattern, int offset, Color c, int alpha) {
 	GdkColor color = c.handle;
 	double aa = (alpha & 0xFF) / (double)0xFF;
 	double red = ((color.red & 0xFFFF) / (double)0xFFFF);
@@ -3151,8 +3151,8 @@ static void setCairoPatternColor(int /*long*/ pattern, int offset, Color c, int
 	Cairo.cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, aa);
 }
 
-void setCairoClip(int /*long*/ damageRgn, int /*long*/ clipRgn) {
-	int /*long*/ cairo = data.cairo;
+void setCairoClip(long /*int*/ damageRgn, long /*int*/ clipRgn) {
+	long /*int*/ cairo = data.cairo;
 	Cairo.cairo_reset_clip(cairo);
 	if (damageRgn != 0) {
 		double[] matrix = new double[6];
@@ -3170,8 +3170,8 @@ void setCairoClip(int /*long*/ damageRgn, int /*long*/ clipRgn) {
 	}
 }
 
-void setClipping(int /*long*/ clipRgn) {
-	int /*long*/ cairo = data.cairo;
+void setClipping(long /*int*/ clipRgn) {
+	long /*int*/ cairo = data.cairo;
 	if (clipRgn == 0) {
 		if (data.clipRgn != 0) {
 			OS.gdk_region_destroy(data.clipRgn);
@@ -3181,7 +3181,7 @@ void setClipping(int /*long*/ clipRgn) {
 			data.clippingTransform = null;
 			setCairoClip(data.damageRgn, 0);
 		} else {
-			int /*long*/ clipping = data.damageRgn != 0 ? data.damageRgn : 0;
+			long /*int*/ clipping = data.damageRgn != 0 ? data.damageRgn : 0;
 			OS.gdk_gc_set_clip_region(handle, clipping);
 		}
 	} else {
@@ -3193,7 +3193,7 @@ void setClipping(int /*long*/ clipRgn) {
 			Cairo.cairo_get_matrix(cairo, data.clippingTransform);
 			setCairoClip(data.damageRgn, clipRgn);
 		} else {
-			int /*long*/ clipping = clipRgn;
+			long /*int*/ clipping = clipRgn;
 			if (data.damageRgn != 0) {
 				clipping = OS.gdk_region_new();
 				OS.gdk_region_union(clipping, clipRgn);
@@ -3234,7 +3234,7 @@ public void setClipping(int x, int y, int width, int height) {
 	rect.y = y;
 	rect.width = width;
 	rect.height = height;
-	int /*long*/ clipRgn = OS.gdk_region_new();
+	long /*int*/ clipRgn = OS.gdk_region_new();
 	OS.gdk_region_union_with_rect(clipRgn, rect);
 	setClipping(clipRgn);
 	OS.gdk_region_destroy(clipRgn);
@@ -3272,8 +3272,8 @@ public void setClipping(Path path) {
 	setClipping(0);
 	if (path != null) {
 		initCairo();
-		int /*long*/ cairo = data.cairo;
-		int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+		long /*int*/ cairo = data.cairo;
+		long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 		if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		Cairo.cairo_append_path(cairo, copy);
 		Cairo.cairo_path_destroy(copy);
@@ -3376,7 +3376,7 @@ public void setFillRule(int rule) {
 	}
 	//TODO - need fill rule in X, GDK has no API
 	initCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_set_fill_rule(cairo, cairo_mode);
 	}
@@ -3767,7 +3767,7 @@ void setString(String string, int flags) {
 	}
 	byte[] buffer;
 	int mnemonic, length = string.length ();
-	int /*long*/ layout = data.layout;
+	long /*int*/ layout = data.layout;
 	char[] text = new char[length];
 	string.getChars(0, length, text, 0);	
 	if ((flags & SWT.DRAW_MNEMONIC) != 0 && (mnemonic = fixMnemonic(text)) != -1) {
@@ -3780,8 +3780,8 @@ void setString(String string, int flags) {
 		buffer = new byte[buffer1.length + buffer2.length];
 		System.arraycopy(buffer1, 0, buffer, 0, buffer1.length);
 		System.arraycopy(buffer2, 0, buffer, buffer1.length, buffer2.length);
-		int /*long*/ attr_list = OS.pango_attr_list_new();
-		int /*long*/ attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);
+		long /*int*/ attr_list = OS.pango_attr_list_new();
+		long /*int*/ attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);
 		PangoAttribute attribute = new PangoAttribute();
 		OS.memmove(attribute, attr, PangoAttribute.sizeof);
 		attribute.start_index = buffer1.length;
@@ -3843,7 +3843,7 @@ public void setTextAntialias(int antialias) {
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
     initCairo();
-    int /*long*/ options = Cairo.cairo_font_options_create();
+    long /*int*/ options = Cairo.cairo_font_options_create();
     Cairo.cairo_font_options_set_antialias(options, mode);
     if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
     	Cairo.cairo_set_font_options(data.cairo, options);
@@ -3885,7 +3885,7 @@ public void setTransform(Transform transform) {
 	if (transform != null && transform.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	if (data.cairo == 0 && transform == null) return;
 	initCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	double[] identity = identity();
 	if (transform != null) {
 		Cairo.cairo_matrix_multiply(identity, transform.handle, identity);
@@ -4001,7 +4001,7 @@ public Point textExtent(String string) {
 public Point textExtent(String string, int flags) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (string == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
 			//TODO - honor flags
diff --git a/org/eclipse/swt/graphics/GCData.java b/org/eclipse/swt/graphics/GCData.java
index d507acb..e914a1b 100644
--- a/org/eclipse/swt/graphics/GCData.java
+++ b/org/eclipse/swt/graphics/GCData.java
@@ -34,7 +34,7 @@ public final class GCData {
 	public Font font;
 	public Pattern foregroundPattern;
 	public Pattern backgroundPattern;
-	public int /*long*/ clipRgn;
+	public long /*int*/ clipRgn;
 	public float lineWidth;
 	public int lineStyle = SWT.LINE_SOLID;
 	public float[] lineDashes;
@@ -46,12 +46,12 @@ public final class GCData {
 	public int alpha = 0xFF;
 	public int interpolation = SWT.DEFAULT;
 
-	public int /*long*/ context;
-	public int /*long*/ layout;
-	public int /*long*/ damageRgn;
+	public long /*int*/ context;
+	public long /*int*/ layout;
+	public long /*int*/ damageRgn;
 	public Image image;
-	public int /*long*/ drawable;	
-	public int /*long*/ cairo;
+	public long /*int*/ drawable;	
+	public long /*int*/ cairo;
 	public double cairoXoffset, cairoYoffset;
 	public boolean disposeCairo;
 	public double[] clippingTransform;
diff --git a/org/eclipse/swt/graphics/Image.java b/org/eclipse/swt/graphics/Image.java
index 1754574..d52d9ee 100644
--- a/org/eclipse/swt/graphics/Image.java
+++ b/org/eclipse/swt/graphics/Image.java
@@ -92,7 +92,7 @@ public final class Image extends Resource implements Drawable {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ pixmap;
+	public long /*int*/ pixmap;
 	
 	/**
 	 * The handle to the OS mask resource.
@@ -104,9 +104,9 @@ public final class Image extends Resource implements Drawable {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ mask;
+	public long /*int*/ mask;
 
-	int /*long*/ surface, surfaceData;
+	long /*int*/ surface, surfaceData;
 	
 	/**
 	 * specifies the transparent pixel
@@ -239,9 +239,9 @@ public Image(Device device, Image srcImage, int flag) {
 	if ((srcImage.type == SWT.ICON && srcImage.mask != 0) || srcImage.transparentPixel != -1) {
 		/* Generate the mask if necessary. */
 		if (srcImage.transparentPixel != -1) srcImage.createMask();
-		int /*long*/ mask = OS.gdk_pixmap_new(0, width, height, 1);
+		long /*int*/ mask = OS.gdk_pixmap_new(0, width, height, 1);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gdkGC = OS.gdk_gc_new(mask);
+		long /*int*/ gdkGC = OS.gdk_gc_new(mask);
 		if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		OS.gdk_draw_drawable(mask, gdkGC, srcImage.mask, 0, 0, 0, 0, width, height);
 		OS.g_object_unref(gdkGC);
@@ -260,9 +260,9 @@ public Image(Device device, Image srcImage, int flag) {
 	createAlphaMask(width, height);
 
 	/* Create the new pixmap */
-	int /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
+	long /*int*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
 	if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	this.pixmap = pixmap;
 	
@@ -272,12 +272,12 @@ public Image(Device device, Image srcImage, int flag) {
 	} else {
 		
 		/* Retrieve the source pixmap data */
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		OS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	
 		/* Apply transformation */
 		switch (flag) {
@@ -539,7 +539,7 @@ void initNative(String filename) {
 		char [] chars = new char [length];
 		filename.getChars (0, length, chars, 0);
 		byte [] buffer = Converter.wcsToMbcs(null, chars, true);
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new_from_file(buffer, null);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new_from_file(buffer, null);
 		if (pixbuf != 0) {
 			boolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);
 			if (hasAlpha) {
@@ -553,7 +553,7 @@ void initNative(String filename) {
 				int width = OS.gdk_pixbuf_get_width(pixbuf);
 				int height = OS.gdk_pixbuf_get_height(pixbuf);
 				int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-				int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+				long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 				byte[] line = new byte[stride];
 				alphaData = new byte[width * height];
 				for (int y = 0; y < height; y++) {
@@ -566,7 +566,7 @@ void initNative(String filename) {
 				}
 				createAlphaMask(width, height);
 			}
-			int /*long*/ [] pixmap_return = new int /*long*/ [1];
+			long /*int*/ [] pixmap_return = new long /*int*/ [1];
 			OS.gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, null, 0);
 			this.type = SWT.BITMAP;
 			this.pixmap = pixmap_return[0];
@@ -580,14 +580,14 @@ void createAlphaMask (int width, int height) {
 	if (device.useXRender && (alpha != -1 || alphaData != null)) {
 		mask = OS.gdk_pixmap_new(0, alpha != -1 ? 1 : width, alpha != -1 ? 1 : height, 8);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gc = OS.gdk_gc_new(mask);
+		long /*int*/ gc = OS.gdk_gc_new(mask);
 		if (alpha != -1) {
 			GdkColor color = new GdkColor();
 			color.pixel = (alpha & 0xFF) << 8 | (alpha & 0xFF);
 			OS.gdk_gc_set_foreground(gc, color);
 			OS.gdk_draw_rectangle(mask, gc, 1, 0, 0, 1, 1);
 		} else {
-			int /*long*/ imagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
+			long /*int*/ imagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
 			if (imagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			GdkImage gdkImage = new GdkImage();
 			OS.memmove(gdkImage, imagePtr);
@@ -616,7 +616,7 @@ void createMask() {
 	if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 }
 
-int /*long*/ createMask(ImageData image, boolean copy) {
+long /*int*/ createMask(ImageData image, boolean copy) {
 	ImageData mask = image.getTransparencyMask();
 	byte[] data = mask.data;
 	byte[] maskData = copy ? new byte[data.length] : data;
@@ -638,21 +638,21 @@ void createSurface() {
 	OS.gdk_drawable_get_size(pixmap, w, h);
 	int width = w[0], height = h[0];
 	if (mask != 0 || alpha != -1 || alphaData != null) {
-	 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+	 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);		
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);		
 		byte[] line = new byte[stride];
 		if (mask != 0 && OS.gdk_drawable_get_depth(mask) == 1) {
-			int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+			long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 			if (maskPixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			OS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, width, height);
 			int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-			int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+			long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 			byte[] maskLine = new byte[maskStride];
-			int /*long*/ offset = pixels, maskOffset = maskPixels;
+			long /*int*/ offset = pixels, maskOffset = maskPixels;
 			for (int y=0; y<height; y++) {
 				OS.memmove(line, offset, stride);
 				OS.memmove(maskLine, maskOffset, maskStride);
@@ -670,7 +670,7 @@ void createSurface() {
 			}
 			OS.g_object_unref(maskPixbuf);
 		} else if (alpha != -1) {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y=0; y<height; y++) {
 				OS.memmove(line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -690,7 +690,7 @@ void createSurface() {
 				offset += stride;
 			}
 		} else if (alphaData != null) {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y = 0; y < h [0]; y++) {
 				OS.memmove (line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -711,7 +711,7 @@ void createSurface() {
 				offset += stride;
 			}
 		} else {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y = 0; y < h [0]; y++) {
 				OS.memmove (line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -729,9 +729,9 @@ void createSurface() {
 		surface = Cairo.cairo_image_surface_create_for_data(surfaceData, Cairo.CAIRO_FORMAT_ARGB32, width, height, stride);
 		OS.g_object_unref(pixbuf);
 	} else {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY();
-		int /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);
-		int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
+		long /*int*/ xDisplay = OS.GDK_DISPLAY();
+		long /*int*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);
+		long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
 		surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
 	}
 	/* Destroy the image mask if the there is a GC created on the image */
@@ -841,12 +841,12 @@ public ImageData getImageData() {
 	int[] w = new int[1], h = new int[1];
  	OS.gdk_drawable_get_size(pixmap, w, h);
  	int width = w[0], height = h[0]; 	
- 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+ 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] srcData = new byte[stride * height];
 	OS.memmove(srcData, pixels, srcData.length);
 	OS.g_object_unref(pixbuf);
@@ -857,7 +857,7 @@ public ImageData getImageData() {
 
 	if (transparentPixel == -1 && type == SWT.ICON && mask != 0) {
 		/* Get the icon mask data */
-		int /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
+		long /*int*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
 		if (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		GdkImage gdkImage = new GdkImage();
 		OS.memmove(gdkImage, gdkImagePtr);
@@ -909,7 +909,7 @@ public ImageData getImageData() {
  *
  * @private
  */
-public static Image gtk_new(Device device, int type, int /*long*/ pixmap, int /*long*/ mask) {
+public static Image gtk_new(Device device, int type, long /*int*/ pixmap, long /*int*/ mask) {
 	Image image = new Image(device);
 	image.type = type;
 	image.pixmap = pixmap;
@@ -945,9 +945,9 @@ void init(int width, int height) {
 	white.red = (short)0xFFFF;
 	white.green = (short)0xFFFF;
 	white.blue = (short)0xFFFF;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_colormap_alloc_color(colormap, white, true, true);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	OS.gdk_gc_set_foreground(gdkGC, white);
 	OS.gdk_draw_rectangle(pixmap, gdkGC, 1, 0, 0, width, height);
 	OS.g_object_unref(gdkGC);
@@ -962,10 +962,10 @@ void init(ImageData image) {
 	if (!(((image.depth == 1 || image.depth == 2 || image.depth == 4 || image.depth == 8) && !palette.isDirect) ||
 		((image.depth == 8) || (image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))
 			SWT.error (SWT.ERROR_UNSUPPORTED_DEPTH);
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] buffer = image.data;
 	if (!palette.isDirect || image.depth != 24 || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {
 		buffer = new byte[stride * height];
@@ -996,9 +996,9 @@ void init(ImageData image) {
 		}
 	}
 	OS.memmove(data, buffer, stride * height);
-	int /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
+	long /*int*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
 	if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	OS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);
 	OS.g_object_unref(gdkGC);
@@ -1019,7 +1019,7 @@ void init(ImageData image) {
 				transparentPixel = rgb.red << 16 | rgb.green << 8 | rgb.blue;
 			}
 		}
-		int /*long*/ mask = createMask(image, isIcon);
+		long /*int*/ mask = createMask(image, isIcon);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		this.mask = mask;
 		if (isIcon) {
@@ -1053,12 +1053,12 @@ void init(ImageData image) {
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	if (pixmap == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (type != SWT.BITMAP || memGC != null) {
 		SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (data != null) {
 		int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;
 		if ((data.style & mask) == 0) {
@@ -1091,7 +1091,7 @@ public int /*long*/ internal_new_GC (GCData data) {
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	OS.g_object_unref(gdkGC);
 }
 
diff --git a/org/eclipse/swt/graphics/Path.java b/org/eclipse/swt/graphics/Path.java
index f7d2e8a..0fc84a5 100644
--- a/org/eclipse/swt/graphics/Path.java
+++ b/org/eclipse/swt/graphics/Path.java
@@ -47,7 +47,7 @@ public class Path extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 	boolean moved, closed = true;
 
@@ -76,7 +76,7 @@ public class Path extends Resource {
 public Path (Device device) {
 	super(device);
 	this.device.checkCairo();
-	int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
+	long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	handle = Cairo.cairo_create(surface);
 	Cairo.cairo_surface_destroy(surface);
@@ -119,12 +119,12 @@ public Path (Device device, Path path, float flatness) {
 	super(device);
 	if (path == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (path.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
+	long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	handle = Cairo.cairo_create(surface);
 	Cairo.cairo_surface_destroy(surface);
 	if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ copy;
+	long /*int*/ copy;
 	flatness = Math.max(0, flatness);
 	if (flatness == 0) {
 		copy = Cairo.cairo_copy_path(path.handle);		
@@ -249,7 +249,7 @@ public void addPath(Path path) {
 	if (path == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (path.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	moved = false;
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(handle, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -348,8 +348,8 @@ public boolean contains(float x, float y, GC gc, boolean outline) {
 	gc.initCairo();
 	gc.checkGC(GC.LINE_CAP | GC.LINE_JOIN | GC.LINE_STYLE | GC.LINE_WIDTH);
 	boolean result = false;
-	int /*long*/ cairo = gc.data.cairo;
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ cairo = gc.data.cairo;
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -407,7 +407,7 @@ public void getBounds(float[] bounds) {
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (bounds == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (bounds.length < 4) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	cairo_path_t path = new cairo_path_t();
 	Cairo.memmove(path, copy, cairo_path_t.sizeof);
@@ -419,7 +419,7 @@ public void getBounds(float[] bounds) {
 		double[] points = new double[6]; 
 		cairo_path_data_t data = new cairo_path_data_t();
 		while (i < path.num_data) {
-			int /*long*/ offset = path.data + i * cairo_path_data_t.sizeof;
+			long /*int*/ offset = path.data + i * cairo_path_data_t.sizeof;
 			Cairo.memmove(data, offset, cairo_path_data_t.sizeof);
 			switch (data.type) {
 				case Cairo.CAIRO_PATH_MOVE_TO:
@@ -500,7 +500,7 @@ public void getCurrentPoint(float[] point) {
  */
 public PathData getPathData() {
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	cairo_path_t path = new cairo_path_t();
 	Cairo.memmove(path, copy, cairo_path_t.sizeof);
@@ -512,7 +512,7 @@ public PathData getPathData() {
 		double[] points = new double[6]; 
 		cairo_path_data_t data = new cairo_path_data_t();
 		while (i < path.num_data) {
-			int /*long*/ offset = path.data + i * cairo_path_data_t.sizeof;
+			long /*int*/ offset = path.data + i * cairo_path_data_t.sizeof;
 			Cairo.memmove(data, offset, cairo_path_data_t.sizeof);
 			switch (data.type) {
 				case Cairo.CAIRO_PATH_MOVE_TO:
diff --git a/org/eclipse/swt/graphics/Pattern.java b/org/eclipse/swt/graphics/Pattern.java
index 0711132..c9b9cec 100644
--- a/org/eclipse/swt/graphics/Pattern.java
+++ b/org/eclipse/swt/graphics/Pattern.java
@@ -44,9 +44,9 @@ public class Pattern extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
-	int /*long*/ surface;
+	long /*int*/ surface;
 
 /**
  * Constructs a new Pattern given an image. Drawing with the resulting
diff --git a/org/eclipse/swt/graphics/Region.java b/org/eclipse/swt/graphics/Region.java
index 3ddb8b5..11fd2bc 100644
--- a/org/eclipse/swt/graphics/Region.java
+++ b/org/eclipse/swt/graphics/Region.java
@@ -38,7 +38,7 @@ public final class Region extends Resource {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 
 /**
  * Constructs a new empty region.
@@ -77,7 +77,7 @@ public Region(Device device) {
 	init();
 }
 
-Region(Device device, int /*long*/ handle) {
+Region(Device device, long /*int*/ handle) {
 	super(device);
 	this.handle = handle;
 }
@@ -107,7 +107,7 @@ public void add (int[] pointArray) {
 	* with enough points for a polygon.
 	*/
 	if (pointArray.length < 6) return;
-	int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gdk_region_union(handle, polyRgn);
 	OS.gdk_region_destroy(polyRgn);
 }
@@ -263,7 +263,7 @@ public Rectangle getBounds() {
 	return new Rectangle(gdkRect.x, gdkRect.y, gdkRect.width, gdkRect.height);
 }
 
-public static Region gtk_new(Device device, int /*long*/ handle) {
+public static Region gtk_new(Device device, long /*int*/ handle) {
 	return new Region(device, handle);
 }
 
@@ -329,7 +329,7 @@ public void intersect(int x, int y, int width, int height) {
 	gdkRect.y = y;
 	gdkRect.width = width;
 	gdkRect.height = height;
-	int /*long*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
+	long /*int*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
 	OS.gdk_region_intersect(handle, rectRgn);
 	OS.gdk_region_destroy(rectRgn);
 }
@@ -460,7 +460,7 @@ public void subtract (int[] pointArray) {
 	* with enough points for a polygon.
 	*/
 	if (pointArray.length < 6) return;
-	int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gdk_region_subtract(handle, polyRgn);
 	OS.gdk_region_destroy(polyRgn);
 }
@@ -513,7 +513,7 @@ public void subtract(int x, int y, int width, int height) {
 	gdkRect.y = y;
 	gdkRect.width = width;
 	gdkRect.height = height;
-	int /*long*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
+	long /*int*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
 	OS.gdk_region_subtract(handle, rectRgn);
 	OS.gdk_region_destroy(rectRgn);
 }
diff --git a/org/eclipse/swt/graphics/TextLayout.java b/org/eclipse/swt/graphics/TextLayout.java
index d72c2ba..3f129c3 100644
--- a/org/eclipse/swt/graphics/TextLayout.java
+++ b/org/eclipse/swt/graphics/TextLayout.java
@@ -51,7 +51,7 @@ public final class TextLayout extends Resource {
 	int[] segments;
 	int[] tabs;
 	StyleItem[] styles;
-	int /*long*/ layout, context, attrList;
+	long /*int*/ layout, context, attrList;
 	int[] invalidOffsets;
 	static final char LTR_MARK = '\u200E', RTL_MARK = '\u200F', ZWS = '\u200B', ZWNBS = '\uFEFF';
 
@@ -103,7 +103,7 @@ void computeRuns () {
 	byte[] buffer = Converter.wcsToMbcs(null, segmentsText, false);
 	OS.pango_layout_set_text (layout, buffer, buffer.length);
 	if (styles.length == 2 && styles[0].style == null && ascent == -1 && descent == -1 && segments == null) return;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	attrList = OS.pango_attr_list_new();	
 	PangoAttribute attribute = new PangoAttribute();
 	char[] chars = null;
@@ -117,12 +117,12 @@ void computeRuns () {
 		int oldPos = 0, lineIndex = 0;
 		PangoLayoutLine line = new PangoLayoutLine();
 		while (lineIndex < lineCount) {
-			int /*long*/ linePtr = OS.pango_layout_get_line(layout, lineIndex);
+			long /*int*/ linePtr = OS.pango_layout_get_line(layout, lineIndex);
 			OS.memmove(line, linePtr, PangoLayoutLine.sizeof);
 			int bytePos = line.start_index;
 			/* Note: The length in bytes of ZWS and ZWNBS are both equals to 3 */
 			int offset = lineIndex * 6;
-			int /*long*/ attr = OS.pango_attr_shape_new (rect, rect);
+			long /*int*/ attr = OS.pango_attr_shape_new (rect, rect);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = bytePos + offset;
 			attribute.end_index = bytePos + offset + 3;
@@ -178,7 +178,7 @@ void computeRuns () {
 		byteEnd = Math.min(byteEnd, strlen);
 		Font font = style.font;
 		if (font != null && !font.isDisposed() && !defaultFont.equals(font)) {
-			int /*long*/ attr = OS.pango_attr_font_desc_new (font.handle);
+			long /*int*/ attr = OS.pango_attr_font_desc_new (font.handle);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -202,7 +202,7 @@ void computeRuns () {
 					break;
 				case SWT.UNDERLINE_LINK: {
 					if (style.foreground == null) {
-						int /*long*/ attr = OS.pango_attr_foreground_new((short)0, (short)0x3333, (short)0x9999);
+						long /*int*/ attr = OS.pango_attr_foreground_new((short)0, (short)0x3333, (short)0x9999);
 						OS.memmove (attribute, attr, PangoAttribute.sizeof);
 						attribute.start_index = byteStart;
 						attribute.end_index = byteEnd;
@@ -216,7 +216,7 @@ void computeRuns () {
 				}
 			}
 			if (underlineStyle != OS.PANGO_UNDERLINE_NONE && style.underlineColor == null) {
-				int /*long*/ attr = OS.pango_attr_underline_new(underlineStyle);
+				long /*int*/ attr = OS.pango_attr_underline_new(underlineStyle);
 				OS.memmove(attribute, attr, PangoAttribute.sizeof);
 				attribute.start_index = byteStart;
 				attribute.end_index = byteEnd;
@@ -225,7 +225,7 @@ void computeRuns () {
 			}
 		}
 		if (style.strikeout && style.strikeoutColor == null) {
-			int /*long*/ attr = OS.pango_attr_strikethrough_new(true);
+			long /*int*/ attr = OS.pango_attr_strikethrough_new(true);
 			OS.memmove(attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -235,7 +235,7 @@ void computeRuns () {
 		Color foreground = style.foreground;
 		if (foreground != null && !foreground.isDisposed()) {
 			GdkColor fg = foreground.handle;
-			int /*long*/ attr = OS.pango_attr_foreground_new(fg.red, fg.green, fg.blue);
+			long /*int*/ attr = OS.pango_attr_foreground_new(fg.red, fg.green, fg.blue);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -245,7 +245,7 @@ void computeRuns () {
 		Color background = style.background;
 		if (background != null && !background.isDisposed()) {
 			GdkColor bg = background.handle;
-			int /*long*/ attr = OS.pango_attr_background_new(bg.red, bg.green, bg.blue);
+			long /*int*/ attr = OS.pango_attr_background_new(bg.red, bg.green, bg.blue);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -258,7 +258,7 @@ void computeRuns () {
 			rect.y =  -(metrics.ascent * OS.PANGO_SCALE);
 			rect.height = (metrics.ascent + metrics.descent) * OS.PANGO_SCALE;
 			rect.width = metrics.width * OS.PANGO_SCALE;
-			int /*long*/ attr = OS.pango_attr_shape_new (rect, rect);
+			long /*int*/ attr = OS.pango_attr_shape_new (rect, rect);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -267,7 +267,7 @@ void computeRuns () {
 		}
 		int rise = style.rise;
 		if (rise != 0) {
-			int /*long*/ attr = OS.pango_attr_rise_new (rise * OS.PANGO_SCALE);
+			long /*int*/ attr = OS.pango_attr_rise_new (rise * OS.PANGO_SCALE);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -392,15 +392,15 @@ public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Colo
 	int length = text.length();
 	boolean hasSelection = selectionStart <= selectionEnd && selectionStart != -1 && selectionEnd != -1;
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (flags != 0 && (hasSelection || (flags & SWT.LAST_LINE_SELECTION) != 0)) {
-		int /*long*/[] attrs = new int /*long*/[1];
+		long /*int*/[] attrs = new long /*int*/[1];
 		int[] nAttrs = new int[1];
 		PangoLogAttr logAttr = new PangoLogAttr();
 		PangoRectangle rect = new PangoRectangle();
 		int lineCount = OS.pango_layout_get_line_count(layout);
-		int /*long*/ ptr = OS.pango_layout_get_text(layout);
-		int /*long*/ iter = OS.pango_layout_get_iter(layout);
+		long /*int*/ ptr = OS.pango_layout_get_text(layout);
+		long /*int*/ iter = OS.pango_layout_get_iter(layout);
 		if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION);
 		if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 			Cairo.cairo_save(cairo);
@@ -487,7 +487,7 @@ public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Colo
 		boolean fullSelection = selectionStart == 0 && selectionEnd == length - 1;
 		if (fullSelection) {
 			if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
-				int /*long*/ ptr = OS.pango_layout_get_text(layout);
+				long /*int*/ ptr = OS.pango_layout_get_text(layout);
 				if ((data.style & SWT.MIRRORED) != 0) {
 					Cairo.cairo_save(cairo);
 					Cairo.cairo_scale(cairo, -1,  1);
@@ -502,7 +502,7 @@ public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Colo
 				drawBorder(gc, x, y, selectionForeground.handle);
 			}
 		} else {
-			int /*long*/ ptr = OS.pango_layout_get_text(layout);
+			long /*int*/ ptr = OS.pango_layout_get_text(layout);
 			int byteSelStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, selectionStart) - ptr);
 			int byteSelEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, selectionEnd + 1) - ptr);
 			int strlen = OS.strlen(ptr);
@@ -524,7 +524,7 @@ public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Colo
 				OS.gdk_draw_layout(data.drawable, gc.handle, x, y, layout);
 				drawBorder(gc, x, y, null);
 				int[] ranges = new int[]{byteSelStart, byteSelEnd};
-				int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+				long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 				if (rgn != 0) {
 					OS.gdk_gc_set_clip_region(gc.handle, rgn);
 					OS.gdk_region_destroy(rgn);
@@ -540,7 +540,7 @@ public void draw(GC gc, int x, int y, int selectionStart, int selectionEnd, Colo
 
 void drawWithCairo(GC gc, int x, int y, int start, int end, boolean fullSelection, GdkColor fg, GdkColor bg) {
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	Cairo.cairo_save(cairo);
 	if (!fullSelection) {
 		Cairo.cairo_move_to(cairo, x, y);
@@ -548,7 +548,7 @@ void drawWithCairo(GC gc, int x, int y, int start, int end, boolean fullSelectio
 		drawBorder(gc, x, y, null);
 	}
 	int[] ranges = new int[]{start, end};
-	int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+	long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 	if (rgn != 0) {
 		OS.gdk_cairo_region(cairo, rgn);
 		Cairo.cairo_clip(cairo);
@@ -565,9 +565,9 @@ void drawWithCairo(GC gc, int x, int y, int start, int end, boolean fullSelectio
 
 void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ gdkGC = gc.handle;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ gdkGC = gc.handle;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	GdkGCValues gcValues = null;
 	if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 		Cairo.cairo_save(cairo);
@@ -587,10 +587,10 @@ void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -665,10 +665,10 @@ void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -691,8 +691,8 @@ void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 					Font font = style.font;
 					if (font == null) font = this.font;
 					if (font == null) font = device.systemFont;
-					int /*long*/ lang = OS.pango_context_get_language(context);
-					int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+					long /*int*/ lang = OS.pango_context_get_language(context);
+					long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 					underlinePosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_position(metrics));
 					underlineThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_thickness(metrics));
 					OS.pango_font_metrics_unref(metrics);
@@ -764,10 +764,10 @@ void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -790,8 +790,8 @@ void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 					Font font = style.font;
 					if (font == null) font = this.font;
 					if (font == null) font = device.systemFont;
-					int /*long*/ lang = OS.pango_context_get_language(context);
-					int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+					long /*int*/ lang = OS.pango_context_get_language(context);
+					long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 					strikeoutPosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_position(metrics));
 					strikeoutThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_thickness(metrics));
 					OS.pango_font_metrics_unref(metrics);
@@ -930,14 +930,14 @@ public Rectangle getBounds(int start, int end) {
 	end = Math.min(Math.max(0, end), length - 1);
 	start = translateOffset(start);
 	end = translateOffset(end);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer (ptr, start) - ptr);
 	int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer (ptr, end + 1) - ptr);
 	int strlen = OS.strlen(ptr);
 	byteStart = Math.min(byteStart, strlen);
 	byteEnd = Math.min(byteEnd, strlen);
 	int[] ranges = new int[]{byteStart, byteEnd};
-	int /*long*/ clipRegion = OS.gdk_pango_layout_get_clip_region(layout, 0, 0, ranges, 1);
+	long /*int*/ clipRegion = OS.gdk_pango_layout_get_clip_region(layout, 0, 0, ranges, 1);
 	if (clipRegion == 0) return new Rectangle(0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle();
 	
@@ -947,9 +947,9 @@ public Rectangle getBounds(int start, int end) {
 	* is to subtract these areas from the clip region.
 	*/
 	PangoRectangle pangoRect = new PangoRectangle();
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ linesRegion = OS.gdk_region_new();
+	long /*int*/ linesRegion = OS.gdk_region_new();
 	if (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int lineEnd = 0;
 	do {
@@ -1064,17 +1064,17 @@ public int getLevel(int offset) {
 	int length = text.length();
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);
 	offset = translateOffset(offset);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int level = 0;
 	PangoItem item = new PangoItem();
 	PangoLayoutRun run = new PangoLayoutRun();
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
-	int /*long*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr, offset) - ptr;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr, offset) - ptr;
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
 	do {
-		int /*long*/ runPtr = OS.pango_layout_iter_get_run(iter);
+		long /*int*/ runPtr = OS.pango_layout_iter_get_run(iter);
 		if (runPtr != 0) {
 			OS.memmove(run, runPtr, PangoLayoutRun.sizeof);
 			OS.memmove(item, run.item, PangoItem.sizeof);
@@ -1106,7 +1106,7 @@ public Rectangle getLineBounds(int lineIndex) {
 	computeRuns();
 	int lineCount = OS.pango_layout_get_line_count(layout);
 	if (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	for (int i = 0; i < lineIndex; i++) OS.pango_layout_iter_next_line(iter);
 	PangoRectangle rect = new PangoRectangle();
@@ -1162,11 +1162,11 @@ public int getLineIndex(int offset) {
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	offset = translateOffset(offset);
 	int line = 0;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
-	int /*long*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr,offset) - ptr;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr,offset) - ptr;
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	while (OS.pango_layout_iter_next_line(iter)) {
 		if (OS.pango_layout_iter_get_index(iter) > byteOffset) break;
@@ -1198,9 +1198,9 @@ public FontMetrics getLineMetrics (int lineIndex) {
 	PangoLayoutLine line = new PangoLayoutLine();
 	OS.memmove(line, OS.pango_layout_get_line(layout, lineIndex), PangoLayoutLine.sizeof);
 	if (line.runs == 0) {
-		int /*long*/ font = this.font != null ? this.font.handle : device.systemFont.handle;
-		int /*long*/ lang = OS.pango_context_get_language(context);
-		int /*long*/ metrics = OS.pango_context_get_metrics(context, font, lang);
+		long /*int*/ font = this.font != null ? this.font.handle : device.systemFont.handle;
+		long /*int*/ lang = OS.pango_context_get_language(context);
+		long /*int*/ metrics = OS.pango_context_get_metrics(context, font, lang);
 		ascent = OS.pango_font_metrics_get_ascent(metrics);
 		descent = OS.pango_font_metrics_get_descent(metrics);
 		OS.pango_font_metrics_unref(metrics);
@@ -1231,10 +1231,10 @@ public int[] getLineOffsets() {
 	computeRuns();
 	int lineCount = OS.pango_layout_get_line_count(layout);
 	int[] offsets = new int [lineCount + 1];
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	PangoLayoutLine line = new PangoLayoutLine();
 	for (int i = 0; i < lineCount; i++) {
-		int /*long*/ linePtr = OS.pango_layout_get_line(layout, i);
+		long /*int*/ linePtr = OS.pango_layout_get_line(layout, i);
 		OS.memmove(line, linePtr, PangoLayoutLine.sizeof);
 		int pos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + line.start_index);
 		offsets[i] = untranslateOffset(pos);
@@ -1265,7 +1265,7 @@ public Point getLocation(int offset, boolean trailing) {
 	int length = text.length();
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);
 	offset = translateOffset(offset);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int byteOffset = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, offset) - ptr);
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
@@ -1315,7 +1315,7 @@ int _getOffset (int offset, int movement, boolean forward) {
 	}
 	int step = forward ? 1 : -1;
 	if ((movement & SWT.MOVEMENT_CHAR) != 0) return offset + step;
-	int /*long*/[] attrs = new int /*long*/[1];
+	long /*int*/[] attrs = new long /*int*/[1];
 	int[] nAttrs = new int[1];
 	OS.pango_layout_get_log_attrs(layout, attrs, nAttrs);
 	if (attrs[0] == 0) return offset + step;
@@ -1412,7 +1412,7 @@ public int getOffset(int x, int y, int[] trailing) {
 	* visual offset. The fix is to clamp the coordinates inside the  
 	* line bounds.
 	*/
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	PangoRectangle rect = new PangoRectangle();
 	do {
@@ -1432,7 +1432,7 @@ public int getOffset(int x, int y, int[] trailing) {
 	int[] index = new int[1];
 	int[] piTrailing = new int[1];
 	OS.pango_layout_xy_to_index(layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, piTrailing);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int offset = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + index[0]);
 	if (trailing != null) trailing[0] = piTrailing[0];
 	return untranslateOffset(offset);
@@ -2037,7 +2037,7 @@ public void setTabs(int[] tabs) {
 	if (tabs == null) {
 		OS.pango_layout_set_tabs(layout, device.emptyTab);
 	} else {
-		int /*long*/ tabArray = OS.pango_tab_array_new(tabs.length, true);
+		long /*int*/ tabArray = OS.pango_tab_array_new(tabs.length, true);
 		if (tabArray != 0) {
 			for (int i = 0; i < tabs.length; i++) {
 				OS.pango_tab_array_set_tab(tabArray, i, OS.PANGO_TAB_LEFT, tabs[i]);
diff --git a/org/eclipse/swt/internal/BidiUtil.java b/org/eclipse/swt/internal/BidiUtil.java
index b46c263..d39ac6c 100644
--- a/org/eclipse/swt/internal/BidiUtil.java
+++ b/org/eclipse/swt/internal/BidiUtil.java
@@ -42,7 +42,7 @@ public class BidiUtil {
 /*
  * Not implemented.
  */
-public static void addLanguageListener(int /*long*/ hwnd, Runnable runnable) {
+public static void addLanguageListener(long /*int*/ hwnd, Runnable runnable) {
 }
 public static void addLanguageListener (Control control, Runnable runnable) {
 }
@@ -93,7 +93,7 @@ public static int getKeyboardLanguage() {
 /*
  * Not implemented.
  */
-public static void removeLanguageListener(int /*long*/ hwnd) {
+public static void removeLanguageListener(long /*int*/ hwnd) {
 }	
 public static void removeLanguageListener (Control control) {
 }
@@ -105,7 +105,7 @@ public static void setKeyboardLanguage(int language) {
 /*
  * Not implemented.
  */
-public static boolean setOrientation(int /*long*/ hwnd, int orientation) {
+public static boolean setOrientation(long /*int*/ hwnd, int orientation) {
 	return false;
 }
 public static boolean setOrientation (Control control, int orientation) {
diff --git a/org/eclipse/swt/internal/C.java b/org/eclipse/swt/internal/C.java
index 886cb6e..34d0658 100644
--- a/org/eclipse/swt/internal/C.java
+++ b/org/eclipse/swt/internal/C.java
@@ -24,118 +24,118 @@ public class C extends Platform {
 	public static final int PTR_SIZEOF = PTR_sizeof ();
 
 /** @param ptr cast=(void *) */
-public static final native void free (int /*long*/ ptr);
+public static final native void free (long /*int*/ ptr);
 /** @param env cast=(const char *) */
-public static final native int /*long*/ getenv (byte[] env);
-public static final native int /*long*/ malloc (int /*long*/ size);
+public static final native long /*int*/ getenv (byte[] env);
+public static final native long /*int*/ malloc (long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, byte[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, byte[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, char[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, char[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, double[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, double[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, float[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, float[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, int[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, int[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, long[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, long[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, short[] src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, short[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (byte[] dest, char[] src, int /*long*/ size);
+public static final native void memmove (byte[] dest, char[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (byte[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (byte[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (char[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (char[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (double[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (double[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (float[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (float[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (int[] dest, byte[] src, int /*long*/ size);
+public static final native void memmove (int[] dest, byte[] src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (short[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (short[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (int[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (int[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in critical
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove (long[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove (long[] dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param buffer cast=(void *),flags=critical
  * @param num cast=(size_t)
  */
-public static final native int /*long*/ memset (int /*long*/ buffer, int c, int /*long*/ num);
+public static final native long /*int*/ memset (long /*int*/ buffer, int c, long /*int*/ num);
 public static final native int PTR_sizeof ();
 /** @param s cast=(char *) */
-public static final native int strlen (int /*long*/ s);
+public static final native int strlen (long /*int*/ s);
 }
diff --git a/org/eclipse/swt/internal/Callback.java b/org/eclipse/swt/internal/Callback.java
index ce73d17..086bf2e 100644
--- a/org/eclipse/swt/internal/Callback.java
+++ b/org/eclipse/swt/internal/Callback.java
@@ -28,7 +28,7 @@ public class Callback {
 	Object object;
 	String method, signature;
 	int argCount;
-	int /*long*/ address, errorResult;
+	long /*int*/ address, errorResult;
 	boolean isStatic, isArrayBased;
 
 	static final String PTR_SIGNATURE = C.PTR_SIZEOF == 4 ? "I" : "J"; //$NON-NLS-1$  //$NON-NLS-2$
@@ -88,7 +88,7 @@ public Callback (Object object, String method, int argCount, boolean isArrayBase
  * @param isArrayBased <code>true</code> if the arguments should be passed in an array and false otherwise
  * @param errorResult the return value if the java code throws an exception
  */
-public Callback (Object object, String method, int argCount, boolean isArrayBased, int /*long*/ errorResult) {
+public Callback (Object object, String method, int argCount, boolean isArrayBased, long /*int*/ errorResult) {
 
 	/* Set the callback fields */
 	this.object = object;
@@ -131,7 +131,7 @@ public Callback (Object object, String method, int argCount, boolean isArrayBase
  * @param isArrayBased whether the callback's method is array based
  * @param errorResult the callback's error result
  */
-static native synchronized int /*long*/ bind (Callback callback, Object object, String method, String signature, int argCount, boolean isStatic, boolean isArrayBased, int /*long*/ errorResult);
+static native synchronized long /*int*/ bind (Callback callback, Object object, String method, String signature, int argCount, boolean isStatic, boolean isArrayBased, long /*int*/ errorResult);
 
 /**
  * Releases the native level resources associated with the callback,
@@ -152,7 +152,7 @@ public void dispose () {
  *
  * @return the callback address
  */
-public int /*long*/ getAddress () {
+public long /*int*/ getAddress () {
 	return address;
 }
 
diff --git a/org/eclipse/swt/internal/Converter.java b/org/eclipse/swt/internal/Converter.java
index 779baed..717965f 100644
--- a/org/eclipse/swt/internal/Converter.java
+++ b/org/eclipse/swt/internal/Converter.java
@@ -37,8 +37,8 @@ public static String defaultCodePage () {
 }
 
 public static char [] mbcsToWcs (String codePage, byte [] buffer) {
-	int /*long*/ [] items_written = new int /*long*/ [1];
-	int /*long*/ ptr = OS.g_utf8_to_utf16 (buffer, buffer.length, null, items_written, null);
+	long /*int*/ [] items_written = new long /*int*/ [1];
+	long /*int*/ ptr = OS.g_utf8_to_utf16 (buffer, buffer.length, null, items_written, null);
 	if (ptr == 0) return EmptyCharArray;
 	int length = (int)/*64*/items_written [0];
 	char [] chars = new char [length];
@@ -55,12 +55,12 @@ public static byte [] wcsToMbcs (String codePage, String string, boolean termina
 }
 
 public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate) {
-	int /*long*/ [] items_read = new int /*long*/ [1], items_written = new int /*long*/ [1];
+	long /*int*/ [] items_read = new long /*int*/ [1], items_written = new long /*int*/ [1];
 	/*
 	* Note that g_utf16_to_utf8()  stops converting 
 	* when it finds the first NULL.
 	*/
-	int /*long*/ ptr = OS.g_utf16_to_utf8 (buffer, buffer.length, items_read, items_written, null);
+	long /*int*/ ptr = OS.g_utf16_to_utf8 (buffer, buffer.length, items_read, items_written, null);
 	if (ptr == 0) return terminate ? NullByteArray : EmptyByteArray;
 	int written = (int)/*64*/items_written [0];
 	byte [] bytes = new byte [written + (terminate ? 1 : 0)];
diff --git a/org/eclipse/swt/internal/LONG.java b/org/eclipse/swt/internal/LONG.java
index 8609adc..c0fb680 100644
--- a/org/eclipse/swt/internal/LONG.java
+++ b/org/eclipse/swt/internal/LONG.java
@@ -12,9 +12,9 @@ package org.eclipse.swt.internal;
 
 /** @jniclass flags=no_gen */
 public class LONG {
-	public int /*long*/ value;
+	public long /*int*/ value;
 	
-	public LONG (int /*long*/ value) {
+	public LONG (long /*int*/ value) {
 		this.value = value;
 	}
 
diff --git a/org/eclipse/swt/internal/Library.java b/org/eclipse/swt/internal/Library.java
index 1f9a8c5..ed2a9bd 100644
--- a/org/eclipse/swt/internal/Library.java
+++ b/org/eclipse/swt/internal/Library.java
@@ -39,7 +39,7 @@ public class Library {
 	static final String SEPARATOR;
 	
 	/* 64-bit support */
-	static /*final*/ boolean IS_64 = 0x1FFFFFFFFL == (int /*long*/)0x1FFFFFFFFL;
+	static /*final*/ boolean IS_64 = 0x1FFFFFFFFL == (long /*int*/)0x1FFFFFFFFL;
 	static final String SUFFIX_64 = "-64";	//$NON-NLS-1$
 	static final String SWTDIR_32 = "swtlib-32";	//$NON-NLS-1$
 	static final String SWTDIR_64 = "swtlib-64";	//$NON-NLS-1$
diff --git a/org/eclipse/swt/internal/accessibility/gtk/ATK.java b/org/eclipse/swt/internal/accessibility/gtk/ATK.java
index 77201aa..9378db6 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/ATK.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/ATK.java
@@ -90,8 +90,8 @@ public static final native int AtkObjectFactory_sizeof ();
 public static final native int AtkObjectFactoryClass_sizeof ();
 	
 /** Natives */
-public static final native int /*long*/ _ATK_ACTION_GET_IFACE (int /*long*/ obj);
-public static final int /*long*/ ATK_ACTION_GET_IFACE (int /*long*/ obj) {
+public static final native long /*int*/ _ATK_ACTION_GET_IFACE (long /*int*/ obj);
+public static final long /*int*/ ATK_ACTION_GET_IFACE (long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _ATK_ACTION_GET_IFACE(obj);
@@ -99,8 +99,8 @@ public static final int /*long*/ ATK_ACTION_GET_IFACE (int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_COMPONENT_GET_IFACE(int /*long*/ atkHandle);
-public static final int /*long*/ ATK_COMPONENT_GET_IFACE(int /*long*/ atkHandle) {
+public static final native long /*int*/ _ATK_COMPONENT_GET_IFACE(long /*int*/ atkHandle);
+public static final long /*int*/ ATK_COMPONENT_GET_IFACE(long /*int*/ atkHandle) {
 	lock.lock();
 	try {
 		return _ATK_COMPONENT_GET_IFACE(atkHandle);
@@ -108,8 +108,8 @@ public static final int /*long*/ ATK_COMPONENT_GET_IFACE(int /*long*/ atkHandle)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_OBJECT_FACTORY_CLASS (int /*long*/ klass);
-public static final int /*long*/ ATK_OBJECT_FACTORY_CLASS (int /*long*/ klass) {
+public static final native long /*int*/ _ATK_OBJECT_FACTORY_CLASS (long /*int*/ klass);
+public static final long /*int*/ ATK_OBJECT_FACTORY_CLASS (long /*int*/ klass) {
 	lock.lock();
 	try {
 		return _ATK_OBJECT_FACTORY_CLASS(klass);
@@ -117,8 +117,8 @@ public static final int /*long*/ ATK_OBJECT_FACTORY_CLASS (int /*long*/ klass) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_SELECTION_GET_IFACE (int /*long*/ obj);
-public static final int /*long*/ ATK_SELECTION_GET_IFACE (int /*long*/ obj) {
+public static final native long /*int*/ _ATK_SELECTION_GET_IFACE (long /*int*/ obj);
+public static final long /*int*/ ATK_SELECTION_GET_IFACE (long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _ATK_SELECTION_GET_IFACE(obj);
@@ -126,8 +126,8 @@ public static final int /*long*/ ATK_SELECTION_GET_IFACE (int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_TEXT_GET_IFACE (int /*long*/ handle);
-public static final int /*long*/ ATK_TEXT_GET_IFACE (int /*long*/ handle) {
+public static final native long /*int*/ _ATK_TEXT_GET_IFACE (long /*int*/ handle);
+public static final long /*int*/ ATK_TEXT_GET_IFACE (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _ATK_TEXT_GET_IFACE(handle);
@@ -135,8 +135,8 @@ public static final int /*long*/ ATK_TEXT_GET_IFACE (int /*long*/ handle) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_ACCESSIBLE (int /*long*/ handle);
-public static final int /*long*/ GTK_ACCESSIBLE (int /*long*/ handle) {
+public static final native long /*int*/ _GTK_ACCESSIBLE (long /*int*/ handle);
+public static final long /*int*/ GTK_ACCESSIBLE (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _GTK_ACCESSIBLE(handle);
@@ -145,8 +145,8 @@ public static final int /*long*/ GTK_ACCESSIBLE (int /*long*/ handle) {
 	}
 }
 /** @param object cast=(AtkObject *) */
-public static final native void _atk_focus_tracker_notify (int /*long*/ object);
-public static final void atk_focus_tracker_notify (int /*long*/ object) {
+public static final native void _atk_focus_tracker_notify (long /*int*/ object);
+public static final void atk_focus_tracker_notify (long /*int*/ object) {
 	lock.lock();
 	try {
 		_atk_focus_tracker_notify(object);
@@ -154,8 +154,8 @@ public static final void atk_focus_tracker_notify (int /*long*/ object) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_get_default_registry ();
-public static final int /*long*/ atk_get_default_registry () {
+public static final native long /*int*/ _atk_get_default_registry ();
+public static final long /*int*/ atk_get_default_registry () {
 	lock.lock();
 	try {
 		return _atk_get_default_registry();
@@ -167,8 +167,8 @@ public static final int /*long*/ atk_get_default_registry () {
  * @param factory cast=(AtkObjectFactory *)
  * @param obj cast=(GObject *)
  */
-public static final native int /*long*/ _atk_object_factory_create_accessible (int /*long*/ factory, int /*long*/ obj);
-public static final int /*long*/ atk_object_factory_create_accessible (int /*long*/ factory, int /*long*/ obj) {
+public static final native long /*int*/ _atk_object_factory_create_accessible (long /*int*/ factory, long /*int*/ obj);
+public static final long /*int*/ atk_object_factory_create_accessible (long /*int*/ factory, long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _atk_object_factory_create_accessible(factory, obj);
@@ -177,8 +177,8 @@ public static final int /*long*/ atk_object_factory_create_accessible (int /*lon
 	}
 }
 /** @param factory cast=(AtkObjectFactory *) */
-public static final native int /*long*/ _atk_object_factory_get_accessible_type (int /*long*/ factory);
-public static final int /*long*/ atk_object_factory_get_accessible_type (int /*long*/ factory) {
+public static final native long /*int*/ _atk_object_factory_get_accessible_type (long /*int*/ factory);
+public static final long /*int*/ atk_object_factory_get_accessible_type (long /*int*/ factory) {
 	lock.lock();
 	try {
 		return _atk_object_factory_get_accessible_type(factory);
@@ -190,8 +190,8 @@ public static final int /*long*/ atk_object_factory_get_accessible_type (int /*l
  * @param accessible cast=(AtkObject *)
  * @param data cast=(gpointer)
  */
-public static final native void _atk_object_initialize (int /*long*/ accessible, int /*long*/ data);
-public static final void atk_object_initialize (int /*long*/ accessible, int /*long*/ data) {
+public static final native void _atk_object_initialize (long /*int*/ accessible, long /*int*/ data);
+public static final void atk_object_initialize (long /*int*/ accessible, long /*int*/ data) {
 	lock.lock();
 	try {
 		_atk_object_initialize(accessible, data);
@@ -200,8 +200,8 @@ public static final void atk_object_initialize (int /*long*/ accessible, int /*l
 	}
 }
 /** @param accessible cast=(AtkObject *) */
-public static final native int /*long*/ _atk_object_ref_relation_set (int /*long*/ accessible);
-public static final int /*long*/ atk_object_ref_relation_set (int /*long*/ accessible) {
+public static final native long /*int*/ _atk_object_ref_relation_set (long /*int*/ accessible);
+public static final long /*int*/ atk_object_ref_relation_set (long /*int*/ accessible) {
 	lock.lock();
 	try {
 		return _atk_object_ref_relation_set(accessible);
@@ -213,8 +213,8 @@ public static final int /*long*/ atk_object_ref_relation_set (int /*long*/ acces
  * @param registry cast=(AtkRegistry *)
  * @param type cast=(GType)
  */
-public static final native int /*long*/ _atk_registry_get_factory (int /*long*/ registry, int /*long*/ type);
-public static final int /*long*/ atk_registry_get_factory (int /*long*/ registry, int /*long*/ type) {
+public static final native long /*int*/ _atk_registry_get_factory (long /*int*/ registry, long /*int*/ type);
+public static final long /*int*/ atk_registry_get_factory (long /*int*/ registry, long /*int*/ type) {
 	lock.lock();
 	try {
 		return _atk_registry_get_factory(registry, type);
@@ -227,8 +227,8 @@ public static final int /*long*/ atk_registry_get_factory (int /*long*/ registry
  * @param type cast=(GType)
  * @param factory_type cast=(GType)
  */
-public static final native void _atk_registry_set_factory_type (int /*long*/ registry, int /*long*/ type, int /*long*/ factory_type);
-public static final void atk_registry_set_factory_type (int /*long*/ registry, int /*long*/ type, int /*long*/ factory_type) {
+public static final native void _atk_registry_set_factory_type (long /*int*/ registry, long /*int*/ type, long /*int*/ factory_type);
+public static final void atk_registry_set_factory_type (long /*int*/ registry, long /*int*/ type, long /*int*/ factory_type) {
 	lock.lock();
 	try {
 		_atk_registry_set_factory_type(registry, type, factory_type);
@@ -237,8 +237,8 @@ public static final void atk_registry_set_factory_type (int /*long*/ registry, i
 	}
 }
 /** @param set cast=(AtkRelationSet *) */
-public static final native int _atk_relation_set_get_n_relations (int /*long*/ set);
-public static final int atk_relation_set_get_n_relations (int /*long*/ set) {
+public static final native int _atk_relation_set_get_n_relations (long /*int*/ set);
+public static final int atk_relation_set_get_n_relations (long /*int*/ set) {
 	lock.lock();
 	try {
 		return _atk_relation_set_get_n_relations(set);
@@ -247,8 +247,8 @@ public static final int atk_relation_set_get_n_relations (int /*long*/ set) {
 	}
 }
 /** @param set cast=(AtkRelationSet *) */
-public static final native int /*long*/ _atk_relation_set_get_relation (int /*long*/ set, int i);
-public static final int /*long*/ atk_relation_set_get_relation (int /*long*/ set, int i) {
+public static final native long /*int*/ _atk_relation_set_get_relation (long /*int*/ set, int i);
+public static final long /*int*/ atk_relation_set_get_relation (long /*int*/ set, int i) {
 	lock.lock();
 	try {
 		return _atk_relation_set_get_relation (set, i);
@@ -260,8 +260,8 @@ public static final int /*long*/ atk_relation_set_get_relation (int /*long*/ set
  * @param set cast=(AtkRelationSet *)
  * @param relation cast=(AtkRelation *)
  */
-public static final native void _atk_relation_set_remove (int /*long*/ set, int /*long*/ relation);
-public static final void atk_relation_set_remove (int /*long*/ set, int /*long*/ relation) {
+public static final native void _atk_relation_set_remove (long /*int*/ set, long /*int*/ relation);
+public static final void atk_relation_set_remove (long /*int*/ set, long /*int*/ relation) {
 	lock.lock();
 	try {
 		_atk_relation_set_remove (set, relation);
@@ -273,8 +273,8 @@ public static final void atk_relation_set_remove (int /*long*/ set, int /*long*/
  * @param set cast=(AtkStateSet *)
  * @param type cast=(AtkStateType)
  */
-public static final native boolean _atk_state_set_add_state (int /*long*/ set, int type);
-public static final boolean atk_state_set_add_state (int /*long*/ set, int type) {
+public static final native boolean _atk_state_set_add_state (long /*int*/ set, int type);
+public static final boolean atk_state_set_add_state (long /*int*/ set, int type) {
 	lock.lock();
 	try {
 		return _atk_state_set_add_state(set, type);
@@ -282,8 +282,8 @@ public static final boolean atk_state_set_add_state (int /*long*/ set, int type)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_state_set_new ();
-public static final int /*long*/ atk_state_set_new () {
+public static final native long /*int*/ _atk_state_set_new ();
+public static final long /*int*/ atk_state_set_new () {
 	lock.lock();
 	try {
 		return _atk_state_set_new();
@@ -291,8 +291,8 @@ public static final int /*long*/ atk_state_set_new () {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0) {
 	lock.lock();
 	try {
 		return _call(function, arg0);
@@ -300,8 +300,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1);
@@ -309,8 +309,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2);
@@ -318,8 +318,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3);
@@ -327,8 +327,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4);
@@ -336,8 +336,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -345,19 +345,19 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 		lock.unlock();
 	}
 }
-public static final native void memmove (AtkActionIface dest, int /*long*/ src);
-public static final native void memmove (AtkComponentIface dest, int /*long*/ src);
-public static final native void memmove (AtkHypertextIface dest, int /*long*/ src);
-public static final native void memmove (AtkObjectClass dest, int /*long*/ src);
-public static final native void memmove (AtkObjectFactoryClass  dest, int /*long*/ src);
-public static final native void memmove (AtkSelectionIface dest, int /*long*/ src);	
-public static final native void memmove (AtkTextIface dest, int /*long*/ src);
-public static final native void memmove (GtkAccessible  dest, int /*long*/ src);
-public static final native void memmove (int /*long*/ dest, AtkActionIface src);
-public static final native void memmove (int /*long*/ dest, AtkComponentIface src);
-public static final native void memmove (int /*long*/ dest, AtkHypertextIface src);
-public static final native void memmove (int /*long*/ dest, AtkObjectClass src);
-public static final native void memmove (int /*long*/ dest, AtkObjectFactoryClass src);
-public static final native void memmove (int /*long*/ dest, AtkSelectionIface src);
-public static final native void memmove (int /*long*/ dest, AtkTextIface src);
+public static final native void memmove (AtkActionIface dest, long /*int*/ src);
+public static final native void memmove (AtkComponentIface dest, long /*int*/ src);
+public static final native void memmove (AtkHypertextIface dest, long /*int*/ src);
+public static final native void memmove (AtkObjectClass dest, long /*int*/ src);
+public static final native void memmove (AtkObjectFactoryClass  dest, long /*int*/ src);
+public static final native void memmove (AtkSelectionIface dest, long /*int*/ src);	
+public static final native void memmove (AtkTextIface dest, long /*int*/ src);
+public static final native void memmove (GtkAccessible  dest, long /*int*/ src);
+public static final native void memmove (long /*int*/ dest, AtkActionIface src);
+public static final native void memmove (long /*int*/ dest, AtkComponentIface src);
+public static final native void memmove (long /*int*/ dest, AtkHypertextIface src);
+public static final native void memmove (long /*int*/ dest, AtkObjectClass src);
+public static final native void memmove (long /*int*/ dest, AtkObjectFactoryClass src);
+public static final native void memmove (long /*int*/ dest, AtkSelectionIface src);
+public static final native void memmove (long /*int*/ dest, AtkTextIface src);
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java b/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java
index 94409fc..8d4f7f2 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java
@@ -18,17 +18,17 @@ package org.eclipse.swt.internal.accessibility.gtk;
 public class AtkActionIface {
 //	GTypeInterface parent;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ do_action;
+	public long /*int*/ do_action;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_n_actions;
+	public long /*int*/ get_n_actions;
 	/** @field cast=(G_CONST_RETURN gchar *(*)()) */
-	public int /*long*/ get_description;
+	public long /*int*/ get_description;
 	/** @field cast=(G_CONST_RETURN gchar *(*)()) */
-	public int /*long*/ get_name;
+	public long /*int*/ get_name;
 	/** @field cast=(G_CONST_RETURN gchar *(*)()) */
-	public int /*long*/ get_keybinding;
+	public long /*int*/ get_keybinding;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_description;	
+	public long /*int*/ set_description;	
 //   AtkFunction             pad1;
 //   AtkFunction             pad2;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java b/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java
index 50fdc76..9902c13 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java
@@ -17,29 +17,29 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkComponentIface {
 	/** @field cast=(guint (*)()) */
-	public int /*long*/ add_focus_handler;
+	public long /*int*/ add_focus_handler;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ contains;
+	public long /*int*/ contains;
 	/** @field cast=(AtkObject *(*)()) */
-	public int /*long*/ ref_accessible_at_point;
+	public long /*int*/ ref_accessible_at_point;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ get_extents;
+	public long /*int*/ get_extents;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ get_position;
+	public long /*int*/ get_position;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ get_size;
+	public long /*int*/ get_size;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ grab_focus;
+	public long /*int*/ grab_focus;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ remove_focus_handler;
+	public long /*int*/ remove_focus_handler;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_extents;
+	public long /*int*/ set_extents;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_position;
+	public long /*int*/ set_position;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_size;
+	public long /*int*/ set_size;
 	/** @field cast=(AtkLayer (*)()) */
-	public int /*long*/ get_layer;
+	public long /*int*/ get_layer;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_mdi_zorder;
+	public long /*int*/ get_mdi_zorder;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java b/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java
index 44e2331..4366595 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java
@@ -17,9 +17,9 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkHypertextIface {
 	/** @field cast=(AtkHyperlink *(*)()) */
-	public int /*long*/ get_link;
+	public long /*int*/ get_link;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_n_links;
+	public long /*int*/ get_n_links;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_link_index;
+	public long /*int*/ get_link_index;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java b/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java
index fc61911..2e51552 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java
@@ -17,49 +17,49 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkObjectClass {
 	/** @field cast=(G_CONST_RETURN gchar *(*)()) */
-	public int /*long*/ get_name;
+	public long /*int*/ get_name;
 	/** @field cast=(G_CONST_RETURN gchar *(*)()) */
-	public int /*long*/ get_description;
+	public long /*int*/ get_description;
 	/** @field cast=(AtkObject *(*)()) */
-	public int /*long*/ get_parent;
+	public long /*int*/ get_parent;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_n_children;
+	public long /*int*/ get_n_children;
 	/** @field cast=(AtkObject *(*)()) */
-	public int /*long*/ ref_child;
+	public long /*int*/ ref_child;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_index_in_parent;
+	public long /*int*/ get_index_in_parent;
 	/** @field cast=(AtkRelationSet *(*)()) */
-	public int /*long*/ ref_relation_set;
+	public long /*int*/ ref_relation_set;
 	/** @field cast=(AtkRole (*)()) */
-	public int /*long*/ get_role;
+	public long /*int*/ get_role;
 	/** @field cast=(AtkLayer (*)()) */
-	public int /*long*/ get_layer;
+	public long /*int*/ get_layer;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_mdi_zorder;
+	public long /*int*/ get_mdi_zorder;
 	/** @field cast=(AtkStateSet *(*)()) */
-	public int /*long*/ ref_state_set;
+	public long /*int*/ ref_state_set;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ set_name;
+	public long /*int*/ set_name;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ set_description;
+	public long /*int*/ set_description;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ set_parent;
+	public long /*int*/ set_parent;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ set_role;
+	public long /*int*/ set_role;
 	/** @field cast=(guint (*)()) */
-	public int /*long*/ connect_property_change_handler;
+	public long /*int*/ connect_property_change_handler;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ remove_property_change_handler;
+	public long /*int*/ remove_property_change_handler;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ initialize;
+	public long /*int*/ initialize;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ children_changed;
+	public long /*int*/ children_changed;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ focus_event;
+	public long /*int*/ focus_event;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ property_change;
+	public long /*int*/ property_change;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ state_change;
+	public long /*int*/ state_change;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ visible_data_changed;
+	public long /*int*/ visible_data_changed;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java b/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java
index cf340b8..b7880e7 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java
@@ -17,9 +17,9 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkObjectFactoryClass {
 	/** @field cast=(AtkObject *(*)()) */
-	public int /*long*/ create_accessible;
+	public long /*int*/ create_accessible;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ invalidate;
+	public long /*int*/ invalidate;
 	/** @field cast=(GType (*)()) */
-	public int /*long*/ get_accessible_type;
+	public long /*int*/ get_accessible_type;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java b/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java
index 71052af..08f37eb 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java
@@ -17,19 +17,19 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkSelectionIface {
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ add_selection;
+	public long /*int*/ add_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ clear_selection;
+	public long /*int*/ clear_selection;
 	/** @field cast=(AtkObject *(*)()) */
-	public int /*long*/ ref_selection;
+	public long /*int*/ ref_selection;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_selection_count;
+	public long /*int*/ get_selection_count;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ is_child_selected;
+	public long /*int*/ is_child_selected;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ remove_selection;
+	public long /*int*/ remove_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ select_all_selection;
+	public long /*int*/ select_all_selection;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ selection_changed;
+	public long /*int*/ selection_changed;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java b/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java
index 5e74aa7..a9fd298 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java
@@ -17,43 +17,43 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class AtkTextIface {
 	/** @field cast=(gchar *(*)()) */
-	public int /*long*/ get_text;
+	public long /*int*/ get_text;
 	/** @field cast=(gchar *(*)()) */
-	public int /*long*/ get_text_after_offset;
+	public long /*int*/ get_text_after_offset;
 	/** @field cast=(gchar *(*)()) */
-	public int /*long*/ get_text_at_offset;
+	public long /*int*/ get_text_at_offset;
 	/** @field cast=(gunichar (*)()) */
-	public int /*long*/ get_character_at_offset;
+	public long /*int*/ get_character_at_offset;
 	/** @field cast=(gchar *(*)()) */
-	public int /*long*/ get_text_before_offset;
+	public long /*int*/ get_text_before_offset;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_caret_offset;
+	public long /*int*/ get_caret_offset;
 	/** @field cast=(AtkAttributeSet *(*)()) */
-	public int /*long*/ get_run_attributes;
+	public long /*int*/ get_run_attributes;
 	/** @field cast=(AtkAttributeSet *(*)()) */
-	public int /*long*/ get_default_attributes;
+	public long /*int*/ get_default_attributes;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ get_character_extents;
+	public long /*int*/ get_character_extents;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_character_count;
+	public long /*int*/ get_character_count;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_offset_at_point;
+	public long /*int*/ get_offset_at_point;
 	/** @field cast=(gint (*)()) */
-	public int /*long*/ get_n_selections;
+	public long /*int*/ get_n_selections;
 	/** @field cast=(gchar *(*)()) */
-	public int /*long*/ get_selection;
+	public long /*int*/ get_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ add_selection;
+	public long /*int*/ add_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ remove_selection;
+	public long /*int*/ remove_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_selection;
+	public long /*int*/ set_selection;
 	/** @field cast=(gboolean (*)()) */
-	public int /*long*/ set_caret_offset;
+	public long /*int*/ set_caret_offset;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ text_changed;
+	public long /*int*/ text_changed;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ text_caret_moved;
+	public long /*int*/ text_caret_moved;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ text_selection_changed;
+	public long /*int*/ text_selection_changed;
 }
diff --git a/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java b/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java
index 6b1013b..68ead1b 100644
--- a/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java
+++ b/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java
@@ -17,5 +17,5 @@ package org.eclipse.swt.internal.accessibility.gtk;
 
 public class GtkAccessible {
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ widget;
+	public long /*int*/ widget;
 }
diff --git a/org/eclipse/swt/internal/cairo/Cairo.java b/org/eclipse/swt/internal/cairo/Cairo.java
index 8836edd..c3d59f6 100644
--- a/org/eclipse/swt/internal/cairo/Cairo.java
+++ b/org/eclipse/swt/internal/cairo/Cairo.java
@@ -109,8 +109,8 @@ public static final native int CAIRO_VERSION_ENCODE(int major, int minor, int mi
  * @param cr cast=(cairo_t *)
  * @param path cast=(cairo_path_t *)
  */
-public static final native void _cairo_append_path(int /*long*/ cr, int /*long*/ path);
-public static final void cairo_append_path(int /*long*/ cr, int /*long*/ path) {
+public static final native void _cairo_append_path(long /*int*/ cr, long /*int*/ path);
+public static final void cairo_append_path(long /*int*/ cr, long /*int*/ path) {
 	lock.lock();
 	try {
 		_cairo_append_path(cr, path);
@@ -119,8 +119,8 @@ public static final void cairo_append_path(int /*long*/ cr, int /*long*/ path) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_arc(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2);
-public static final void cairo_arc(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
+public static final native void _cairo_arc(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2);
+public static final void cairo_arc(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
 	lock.lock();
 	try {
 		_cairo_arc(cr, xc, yc, radius, angle1, angle2);
@@ -129,8 +129,8 @@ public static final void cairo_arc(int /*long*/ cr, double xc, double yc, double
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_arc_negative(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2);
-public static final void cairo_arc_negative(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
+public static final native void _cairo_arc_negative(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2);
+public static final void cairo_arc_negative(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
 	lock.lock();
 	try {
 		_cairo_arc_negative(cr, xc, yc, radius, angle1, angle2);
@@ -139,8 +139,8 @@ public static final void cairo_arc_negative(int /*long*/ cr, double xc, double y
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_clip(int /*long*/ cr);
-public static final void cairo_clip(int /*long*/ cr) {
+public static final native void _cairo_clip(long /*int*/ cr);
+public static final void cairo_clip(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_clip(cr);
@@ -149,8 +149,8 @@ public static final void cairo_clip(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_clip_preserve(int /*long*/ cr);
-public static final void cairo_clip_preserve(int /*long*/ cr) {
+public static final native void _cairo_clip_preserve(long /*int*/ cr);
+public static final void cairo_clip_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_clip_preserve(cr);
@@ -159,8 +159,8 @@ public static final void cairo_clip_preserve(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_close_path(int /*long*/ cr);
-public static final void cairo_close_path(int /*long*/ cr) {
+public static final native void _cairo_close_path(long /*int*/ cr);
+public static final void cairo_close_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_close_path(cr);
@@ -169,8 +169,8 @@ public static final void cairo_close_path(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_copy_page(int /*long*/ cr);
-public static final void cairo_copy_page(int /*long*/ cr) {
+public static final native void _cairo_copy_page(long /*int*/ cr);
+public static final void cairo_copy_page(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_copy_page(cr);
@@ -179,8 +179,8 @@ public static final void cairo_copy_page(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_copy_path(int /*long*/ cr);
-public static final int /*long*/ cairo_copy_path(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_copy_path(long /*int*/ cr);
+public static final long /*int*/ cairo_copy_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_copy_path(cr);
@@ -189,8 +189,8 @@ public static final int /*long*/ cairo_copy_path(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_copy_path_flat(int /*long*/ cr);
-public static final int /*long*/ cairo_copy_path_flat(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_copy_path_flat(long /*int*/ cr);
+public static final long /*int*/ cairo_copy_path_flat(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_copy_path_flat(cr);
@@ -199,8 +199,8 @@ public static final int /*long*/ cairo_copy_path_flat(int /*long*/ cr) {
 	}
 }
 /** @param target cast=(cairo_surface_t *) */
-public static final native int /*long*/ _cairo_create(int /*long*/ target);
-public static final int /*long*/ cairo_create(int /*long*/ target) {
+public static final native long /*int*/ _cairo_create(long /*int*/ target);
+public static final long /*int*/ cairo_create(long /*int*/ target) {
 	lock.lock();
 	try {
 		return _cairo_create(target);
@@ -209,8 +209,8 @@ public static final int /*long*/ cairo_create(int /*long*/ target) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_curve_to(int /*long*/ cr, double x1, double y1, double x2, double y2, double x3, double y3);
-public static final void cairo_curve_to(int /*long*/ cr, double x1, double y1, double x2, double y2, double x3, double y3) {
+public static final native void _cairo_curve_to(long /*int*/ cr, double x1, double y1, double x2, double y2, double x3, double y3);
+public static final void cairo_curve_to(long /*int*/ cr, double x1, double y1, double x2, double y2, double x3, double y3) {
 	lock.lock();
 	try {
 		_cairo_curve_to(cr, x1, y1, x2, y2, x3, y3);
@@ -219,8 +219,8 @@ public static final void cairo_curve_to(int /*long*/ cr, double x1, double y1, d
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_destroy(int /*long*/ cr);
-public static final void cairo_destroy(int /*long*/ cr) {
+public static final native void _cairo_destroy(long /*int*/ cr);
+public static final void cairo_destroy(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_destroy(cr);
@@ -229,8 +229,8 @@ public static final void cairo_destroy(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_device_to_user(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_device_to_user(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_device_to_user(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_device_to_user(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_device_to_user(cr, x, y);
@@ -239,8 +239,8 @@ public static final void cairo_device_to_user(int /*long*/ cr, double[] x, doubl
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_device_to_user_distance(int /*long*/ cr, double[] dx, double[] dy);
-public static final void cairo_device_to_user_distance(int /*long*/ cr, double[] dx, double[] dy) {
+public static final native void _cairo_device_to_user_distance(long /*int*/ cr, double[] dx, double[] dy);
+public static final void cairo_device_to_user_distance(long /*int*/ cr, double[] dx, double[] dy) {
 	lock.lock();
 	try {
 		_cairo_device_to_user_distance(cr, dx, dy);
@@ -249,8 +249,8 @@ public static final void cairo_device_to_user_distance(int /*long*/ cr, double[]
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_fill(int /*long*/ cr);
-public static final void cairo_fill(int /*long*/ cr) {
+public static final native void _cairo_fill(long /*int*/ cr);
+public static final void cairo_fill(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_fill(cr);
@@ -259,8 +259,8 @@ public static final void cairo_fill(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_fill_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
-public static final void cairo_fill_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
+public static final native void _cairo_fill_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
+public static final void cairo_fill_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
 	lock.lock();
 	try {
 		_cairo_fill_extents(cr, x1, y1, x2, y2);
@@ -269,8 +269,8 @@ public static final void cairo_fill_extents(int /*long*/ cr, double[] x1, double
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_fill_preserve(int /*long*/ cr);
-public static final void cairo_fill_preserve(int /*long*/ cr) {
+public static final native void _cairo_fill_preserve(long /*int*/ cr);
+public static final void cairo_fill_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_fill_preserve(cr);
@@ -279,8 +279,8 @@ public static final void cairo_fill_preserve(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_font_extents(int /*long*/ cr, cairo_font_extents_t extents);
-public static final void cairo_font_extents(int /*long*/ cr, cairo_font_extents_t extents) {
+public static final native void _cairo_font_extents(long /*int*/ cr, cairo_font_extents_t extents);
+public static final void cairo_font_extents(long /*int*/ cr, cairo_font_extents_t extents) {
 	lock.lock();
 	try {
 		_cairo_font_extents(cr, extents);
@@ -288,8 +288,8 @@ public static final void cairo_font_extents(int /*long*/ cr, cairo_font_extents_
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_font_options_create();
-public static final int /*long*/ cairo_font_options_create() {
+public static final native long /*int*/ _cairo_font_options_create();
+public static final long /*int*/ cairo_font_options_create() {
 	lock.lock();
 	try {
 		return _cairo_font_options_create();
@@ -298,8 +298,8 @@ public static final int /*long*/ cairo_font_options_create() {
 	}
 }
 /** @param options cast=(cairo_font_options_t *) */
-public static final native void _cairo_font_options_destroy(int /*long*/ options);
-public static final void cairo_font_options_destroy(int /*long*/ options) {
+public static final native void _cairo_font_options_destroy(long /*int*/ options);
+public static final void cairo_font_options_destroy(long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_font_options_destroy(options);
@@ -308,8 +308,8 @@ public static final void cairo_font_options_destroy(int /*long*/ options) {
 	}
 }
 /** @param options cast=(cairo_font_options_t *) */
-public static final native int _cairo_font_options_get_antialias(int /*long*/ options);
-public static final int cairo_font_options_get_antialias(int /*long*/ options) {
+public static final native int _cairo_font_options_get_antialias(long /*int*/ options);
+public static final int cairo_font_options_get_antialias(long /*int*/ options) {
 	lock.lock();
 	try {
 		return _cairo_font_options_get_antialias(options);
@@ -318,8 +318,8 @@ public static final int cairo_font_options_get_antialias(int /*long*/ options) {
 	}
 }
 /** @param options cast=(cairo_font_options_t *) */
-public static final native void _cairo_font_options_set_antialias(int /*long*/ options, int antialias);
-public static final void cairo_font_options_set_antialias(int /*long*/ options, int antialias) {
+public static final native void _cairo_font_options_set_antialias(long /*int*/ options, int antialias);
+public static final void cairo_font_options_set_antialias(long /*int*/ options, int antialias) {
 	lock.lock();
 	try {
 		_cairo_font_options_set_antialias(options, antialias);
@@ -328,8 +328,8 @@ public static final void cairo_font_options_set_antialias(int /*long*/ options,
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_get_antialias(int /*long*/ cr);
-public static final int cairo_get_antialias(int /*long*/ cr) {
+public static final native int _cairo_get_antialias(long /*int*/ cr);
+public static final int cairo_get_antialias(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_antialias(cr);
@@ -338,8 +338,8 @@ public static final int cairo_get_antialias(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_get_current_point(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_get_current_point(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_get_current_point(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_get_current_point(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_get_current_point(cr, x, y);
@@ -348,8 +348,8 @@ public static final void cairo_get_current_point(int /*long*/ cr, double[] x, do
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_get_fill_rule(int /*long*/ cr);
-public static final int cairo_get_fill_rule(int /*long*/ cr) {
+public static final native int _cairo_get_fill_rule(long /*int*/ cr);
+public static final int cairo_get_fill_rule(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_fill_rule(cr);
@@ -358,8 +358,8 @@ public static final int cairo_get_fill_rule(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_get_font_face(int /*long*/ cr);
-public static final int /*long*/ cairo_get_font_face(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_font_face(long /*int*/ cr);
+public static final long /*int*/ cairo_get_font_face(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_font_face(cr);
@@ -371,8 +371,8 @@ public static final int /*long*/ cairo_get_font_face(int /*long*/ cr) {
  * @param cr cast=(cairo_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_get_font_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_get_font_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_get_font_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_get_font_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_get_font_matrix(cr, matrix);
@@ -384,8 +384,8 @@ public static final void cairo_get_font_matrix(int /*long*/ cr, double[] matrix)
  * @param cr cast=(cairo_t *)
  * @param options cast=(cairo_font_options_t *)
  */
-public static final native void _cairo_get_font_options(int /*long*/ cr, int /*long*/ options);
-public static final void cairo_get_font_options(int /*long*/ cr, int /*long*/ options) {
+public static final native void _cairo_get_font_options(long /*int*/ cr, long /*int*/ options);
+public static final void cairo_get_font_options(long /*int*/ cr, long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_get_font_options(cr, options);
@@ -394,8 +394,8 @@ public static final void cairo_get_font_options(int /*long*/ cr, int /*long*/ op
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_get_line_cap(int /*long*/ cr);
-public static final int cairo_get_line_cap(int /*long*/ cr) {
+public static final native int _cairo_get_line_cap(long /*int*/ cr);
+public static final int cairo_get_line_cap(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_cap(cr);
@@ -404,8 +404,8 @@ public static final int cairo_get_line_cap(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_get_line_join(int /*long*/ cr);
-public static final int cairo_get_line_join(int /*long*/ cr) {
+public static final native int _cairo_get_line_join(long /*int*/ cr);
+public static final int cairo_get_line_join(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_join(cr);
@@ -414,8 +414,8 @@ public static final int cairo_get_line_join(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native double _cairo_get_line_width(int /*long*/ cr);
-public static final double cairo_get_line_width(int /*long*/ cr) {
+public static final native double _cairo_get_line_width(long /*int*/ cr);
+public static final double cairo_get_line_width(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_width(cr);
@@ -427,8 +427,8 @@ public static final double cairo_get_line_width(int /*long*/ cr) {
  * @param cr cast=(cairo_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_get_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_get_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_get_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_get_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_get_matrix(cr, matrix);
@@ -437,8 +437,8 @@ public static final void cairo_get_matrix(int /*long*/ cr, double[] matrix) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native double _cairo_get_miter_limit(int /*long*/ cr);
-public static final double cairo_get_miter_limit(int /*long*/ cr) {
+public static final native double _cairo_get_miter_limit(long /*int*/ cr);
+public static final double cairo_get_miter_limit(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_miter_limit(cr);
@@ -447,8 +447,8 @@ public static final double cairo_get_miter_limit(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_get_operator(int /*long*/ cr);
-public static final int cairo_get_operator(int /*long*/ cr) {
+public static final native int _cairo_get_operator(long /*int*/ cr);
+public static final int cairo_get_operator(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_operator(cr);
@@ -457,8 +457,8 @@ public static final int cairo_get_operator(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_get_source(int /*long*/ cr);
-public static final int /*long*/ cairo_get_source(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_source(long /*int*/ cr);
+public static final long /*int*/ cairo_get_source(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_source(cr);
@@ -467,8 +467,8 @@ public static final int /*long*/ cairo_get_source(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_get_target(int /*long*/ cr);
-public static final int /*long*/ cairo_get_target(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_target(long /*int*/ cr);
+public static final long /*int*/ cairo_get_target(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_target(cr);
@@ -477,8 +477,8 @@ public static final int /*long*/ cairo_get_target(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native double _cairo_get_tolerance(int /*long*/ cr);
-public static final double cairo_get_tolerance(int /*long*/ cr) {
+public static final native double _cairo_get_tolerance(long /*int*/ cr);
+public static final double cairo_get_tolerance(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_tolerance(cr);
@@ -491,8 +491,8 @@ public static final double cairo_get_tolerance(int /*long*/ cr) {
  * @param glyphs cast=(cairo_glyph_t *)
  * @param extents cast=(cairo_text_extents_t *)
  */
-public static final native void _cairo_glyph_extents(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs, int /*long*/ extents);
-public static final void cairo_glyph_extents(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs, int /*long*/ extents) {
+public static final native void _cairo_glyph_extents(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs, long /*int*/ extents);
+public static final void cairo_glyph_extents(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs, long /*int*/ extents) {
 	lock.lock();
 	try {
 		_cairo_glyph_extents(cr, glyphs, num_glyphs, extents);
@@ -504,8 +504,8 @@ public static final void cairo_glyph_extents(int /*long*/ cr, int /*long*/ glyph
  * @param cr cast=(cairo_t *)
  * @param glyphs cast=(cairo_glyph_t *)
  */
-public static final native void _cairo_glyph_path(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs);
-public static final void cairo_glyph_path(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs) {
+public static final native void _cairo_glyph_path(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs);
+public static final void cairo_glyph_path(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs) {
 	lock.lock();
 	try {
 		_cairo_glyph_path(cr, glyphs, num_glyphs);
@@ -514,8 +514,8 @@ public static final void cairo_glyph_path(int /*long*/ cr, int /*long*/ glyphs,
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_identity_matrix(int /*long*/ cr);
-public static final void cairo_identity_matrix(int /*long*/ cr) {
+public static final native void _cairo_identity_matrix(long /*int*/ cr);
+public static final void cairo_identity_matrix(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_identity_matrix(cr);
@@ -523,8 +523,8 @@ public static final void cairo_identity_matrix(int /*long*/ cr) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_image_surface_create(int format, int width, int height);
-public static final int /*long*/ cairo_image_surface_create(int format, int width, int height) {
+public static final native long /*int*/ _cairo_image_surface_create(int format, int width, int height);
+public static final long /*int*/ cairo_image_surface_create(int format, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_create(format, width, height);
@@ -533,8 +533,8 @@ public static final int /*long*/ cairo_image_surface_create(int format, int widt
 	}
 }
 /** @param data cast=(unsigned char *) */
-public static final native int /*long*/ _cairo_image_surface_create_for_data(int /*long*/ data, int format, int width, int height, int stride);
-public static final int /*long*/ cairo_image_surface_create_for_data(int /*long*/ data, int format, int width, int height, int stride) {
+public static final native long /*int*/ _cairo_image_surface_create_for_data(long /*int*/ data, int format, int width, int height, int stride);
+public static final long /*int*/ cairo_image_surface_create_for_data(long /*int*/ data, int format, int width, int height, int stride) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_create_for_data(data, format, width, height, stride);
@@ -543,8 +543,8 @@ public static final int /*long*/ cairo_image_surface_create_for_data(int /*long*
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native int _cairo_image_surface_get_height(int /*long*/ surface);
-public static final int cairo_image_surface_get_height(int /*long*/ surface) {
+public static final native int _cairo_image_surface_get_height(long /*int*/ surface);
+public static final int cairo_image_surface_get_height(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_get_height(surface);
@@ -553,8 +553,8 @@ public static final int cairo_image_surface_get_height(int /*long*/ surface) {
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native int _cairo_image_surface_get_width(int /*long*/ surface);
-public static final int cairo_image_surface_get_width(int /*long*/ surface) {
+public static final native int _cairo_image_surface_get_width(long /*int*/ surface);
+public static final int cairo_image_surface_get_width(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_get_width(surface);
@@ -563,8 +563,8 @@ public static final int cairo_image_surface_get_width(int /*long*/ surface) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_in_fill(int /*long*/ cr, double x, double y);
-public static final int cairo_in_fill(int /*long*/ cr, double x, double y) {
+public static final native int _cairo_in_fill(long /*int*/ cr, double x, double y);
+public static final int cairo_in_fill(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		return _cairo_in_fill(cr, x, y);
@@ -573,8 +573,8 @@ public static final int cairo_in_fill(int /*long*/ cr, double x, double y) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_in_stroke(int /*long*/ cr, double x, double y);
-public static final int cairo_in_stroke(int /*long*/ cr, double x, double y) {
+public static final native int _cairo_in_stroke(long /*int*/ cr, double x, double y);
+public static final int cairo_in_stroke(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		return _cairo_in_stroke(cr, x, y);
@@ -583,8 +583,8 @@ public static final int cairo_in_stroke(int /*long*/ cr, double x, double y) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_line_to(int /*long*/ cr, double x, double y);
-public static final void cairo_line_to(int /*long*/ cr, double x, double y) {
+public static final native void _cairo_line_to(long /*int*/ cr, double x, double y);
+public static final void cairo_line_to(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_line_to(cr, x, y);
@@ -596,8 +596,8 @@ public static final void cairo_line_to(int /*long*/ cr, double x, double y) {
  * @param cr cast=(cairo_t *)
  * @param pattern cast=(cairo_pattern_t *)
  */
-public static final native void _cairo_mask(int /*long*/ cr, int /*long*/ pattern);
-public static final void cairo_mask(int /*long*/ cr, int /*long*/ pattern) {
+public static final native void _cairo_mask(long /*int*/ cr, long /*int*/ pattern);
+public static final void cairo_mask(long /*int*/ cr, long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_mask(cr, pattern);
@@ -609,8 +609,8 @@ public static final void cairo_mask(int /*long*/ cr, int /*long*/ pattern) {
  * @param cr cast=(cairo_t *)
  * @param surface cast=(cairo_surface_t *)
  */
-public static final native void _cairo_mask_surface(int /*long*/ cr, int /*long*/ surface, double surface_x, double surface_y);
-public static final void cairo_mask_surface(int /*long*/ cr, int /*long*/ surface, double surface_x, double surface_y) {
+public static final native void _cairo_mask_surface(long /*int*/ cr, long /*int*/ surface, double surface_x, double surface_y);
+public static final void cairo_mask_surface(long /*int*/ cr, long /*int*/ surface, double surface_x, double surface_y) {
 	lock.lock();
 	try {
 		_cairo_mask_surface(cr, surface, surface_x, surface_y);
@@ -743,8 +743,8 @@ public static final void cairo_matrix_translate(double[] matrix, double tx, doub
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_move_to(int /*long*/ cr, double x, double y);
-public static final void cairo_move_to(int /*long*/ cr, double x, double y) {
+public static final native void _cairo_move_to(long /*int*/ cr, double x, double y);
+public static final void cairo_move_to(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_move_to(cr, x, y);
@@ -753,8 +753,8 @@ public static final void cairo_move_to(int /*long*/ cr, double x, double y) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_new_path(int /*long*/ cr);
-public static final void cairo_new_path(int /*long*/ cr) {
+public static final native void _cairo_new_path(long /*int*/ cr);
+public static final void cairo_new_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_new_path(cr);
@@ -763,8 +763,8 @@ public static final void cairo_new_path(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_paint(int /*long*/ cr);
-public static final void cairo_paint(int /*long*/ cr) {
+public static final native void _cairo_paint(long /*int*/ cr);
+public static final void cairo_paint(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_paint(cr);
@@ -773,8 +773,8 @@ public static final void cairo_paint(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_paint_with_alpha(int /*long*/ cr, double alpha);
-public static final void cairo_paint_with_alpha(int /*long*/ cr, double alpha) {
+public static final native void _cairo_paint_with_alpha(long /*int*/ cr, double alpha);
+public static final void cairo_paint_with_alpha(long /*int*/ cr, double alpha) {
 	lock.lock();
 	try {
 		_cairo_paint_with_alpha(cr, alpha);
@@ -783,8 +783,8 @@ public static final void cairo_paint_with_alpha(int /*long*/ cr, double alpha) {
 	}
 }
 /** @param path cast=(cairo_path_t *) */
-public static final native void _cairo_path_destroy(int /*long*/ path);
-public static final void cairo_path_destroy(int /*long*/ path) {
+public static final native void _cairo_path_destroy(long /*int*/ path);
+public static final void cairo_path_destroy(long /*int*/ path) {
 	lock.lock();
 	try {
 		_cairo_path_destroy(path);
@@ -793,8 +793,8 @@ public static final void cairo_path_destroy(int /*long*/ path) {
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_add_color_stop_rgb(int /*long*/ pattern, double offset, double red, double green, double blue);
-public static final void cairo_pattern_add_color_stop_rgb(int /*long*/ pattern, double offset, double red, double green, double blue) {
+public static final native void _cairo_pattern_add_color_stop_rgb(long /*int*/ pattern, double offset, double red, double green, double blue);
+public static final void cairo_pattern_add_color_stop_rgb(long /*int*/ pattern, double offset, double red, double green, double blue) {
 	lock.lock();
 	try {
 		_cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue);
@@ -803,8 +803,8 @@ public static final void cairo_pattern_add_color_stop_rgb(int /*long*/ pattern,
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_add_color_stop_rgba(int /*long*/ pattern, double offset, double red, double green, double blue, double alpha);
-public static final void cairo_pattern_add_color_stop_rgba(int /*long*/ pattern, double offset, double red, double green, double blue, double alpha) {
+public static final native void _cairo_pattern_add_color_stop_rgba(long /*int*/ pattern, double offset, double red, double green, double blue, double alpha);
+public static final void cairo_pattern_add_color_stop_rgba(long /*int*/ pattern, double offset, double red, double green, double blue, double alpha) {
 	lock.lock();
 	try {
 		_cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha);
@@ -813,8 +813,8 @@ public static final void cairo_pattern_add_color_stop_rgba(int /*long*/ pattern,
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native int /*long*/ _cairo_pattern_create_for_surface(int /*long*/ surface);
-public static final int /*long*/ cairo_pattern_create_for_surface(int /*long*/ surface) {
+public static final native long /*int*/ _cairo_pattern_create_for_surface(long /*int*/ surface);
+public static final long /*int*/ cairo_pattern_create_for_surface(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_for_surface(surface);
@@ -822,8 +822,8 @@ public static final int /*long*/ cairo_pattern_create_for_surface(int /*long*/ s
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_pattern_create_linear(double x0, double y0, double x1, double y1);
-public static final int /*long*/ cairo_pattern_create_linear(double x0, double y0, double x1, double y1) {
+public static final native long /*int*/ _cairo_pattern_create_linear(double x0, double y0, double x1, double y1);
+public static final long /*int*/ cairo_pattern_create_linear(double x0, double y0, double x1, double y1) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_linear(x0, y0, x1, y1);
@@ -831,8 +831,8 @@ public static final int /*long*/ cairo_pattern_create_linear(double x0, double y
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);
-public static final int /*long*/ cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1) {
+public static final native long /*int*/ _cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);
+public static final long /*int*/ cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1);
@@ -841,8 +841,8 @@ public static final int /*long*/ cairo_pattern_create_radial(double cx0, double
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_destroy(int /*long*/ pattern);
-public static final void cairo_pattern_destroy(int /*long*/ pattern) {
+public static final native void _cairo_pattern_destroy(long /*int*/ pattern);
+public static final void cairo_pattern_destroy(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_pattern_destroy(pattern);
@@ -851,8 +851,8 @@ public static final void cairo_pattern_destroy(int /*long*/ pattern) {
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native int _cairo_pattern_get_extend(int /*long*/ pattern);
-public static final int cairo_pattern_get_extend(int /*long*/ pattern) {
+public static final native int _cairo_pattern_get_extend(long /*int*/ pattern);
+public static final int cairo_pattern_get_extend(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		return _cairo_pattern_get_extend(pattern);
@@ -861,8 +861,8 @@ public static final int cairo_pattern_get_extend(int /*long*/ pattern) {
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native int _cairo_pattern_get_filter(int /*long*/ pattern);
-public static final int cairo_pattern_get_filter(int /*long*/ pattern) {
+public static final native int _cairo_pattern_get_filter(long /*int*/ pattern);
+public static final int cairo_pattern_get_filter(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		return _cairo_pattern_get_filter(pattern);
@@ -874,8 +874,8 @@ public static final int cairo_pattern_get_filter(int /*long*/ pattern) {
  * @param pattern cast=(cairo_pattern_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_pattern_get_matrix(int /*long*/ pattern, double[] matrix);
-public static final void cairo_pattern_get_matrix(int /*long*/ pattern, double[] matrix) {
+public static final native void _cairo_pattern_get_matrix(long /*int*/ pattern, double[] matrix);
+public static final void cairo_pattern_get_matrix(long /*int*/ pattern, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_pattern_get_matrix(pattern, matrix);
@@ -884,8 +884,8 @@ public static final void cairo_pattern_get_matrix(int /*long*/ pattern, double[]
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_reference(int /*long*/ pattern);
-public static final void cairo_pattern_reference(int /*long*/ pattern) {
+public static final native void _cairo_pattern_reference(long /*int*/ pattern);
+public static final void cairo_pattern_reference(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_pattern_reference(pattern);
@@ -894,8 +894,8 @@ public static final void cairo_pattern_reference(int /*long*/ pattern) {
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_set_extend(int /*long*/ pattern, int extend);
-public static final void cairo_pattern_set_extend(int /*long*/ pattern, int extend) {
+public static final native void _cairo_pattern_set_extend(long /*int*/ pattern, int extend);
+public static final void cairo_pattern_set_extend(long /*int*/ pattern, int extend) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_extend(pattern, extend);
@@ -904,8 +904,8 @@ public static final void cairo_pattern_set_extend(int /*long*/ pattern, int exte
 	}
 }
 /** @param pattern cast=(cairo_pattern_t *) */
-public static final native void _cairo_pattern_set_filter(int /*long*/ pattern, int filter);
-public static final void cairo_pattern_set_filter(int /*long*/ pattern, int filter) {
+public static final native void _cairo_pattern_set_filter(long /*int*/ pattern, int filter);
+public static final void cairo_pattern_set_filter(long /*int*/ pattern, int filter) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_filter(pattern, filter);
@@ -917,8 +917,8 @@ public static final void cairo_pattern_set_filter(int /*long*/ pattern, int filt
  * @param pattern cast=(cairo_pattern_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_pattern_set_matrix(int /*long*/ pattern, double[] matrix);
-public static final void cairo_pattern_set_matrix(int /*long*/ pattern, double[] matrix) {
+public static final native void _cairo_pattern_set_matrix(long /*int*/ pattern, double[] matrix);
+public static final void cairo_pattern_set_matrix(long /*int*/ pattern, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_matrix(pattern, matrix);
@@ -930,8 +930,8 @@ public static final void cairo_pattern_set_matrix(int /*long*/ pattern, double[]
  * @method flags=dynamic
  * @param surface cast=(cairo_surface_t *)
  */
-public static final native void _cairo_pdf_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points);
-public static final void cairo_pdf_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points) {
+public static final native void _cairo_pdf_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points);
+public static final void cairo_pdf_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points) {
 	lock.lock();
 	try {
 		_cairo_pdf_surface_set_size(surface, width_in_points, height_in_points);
@@ -943,8 +943,8 @@ public static final void cairo_pdf_surface_set_size(int /*long*/ surface, double
  * @method flags=dynamic
  * @param surface cast=(cairo_surface_t *)
  */
-public static final native void _cairo_ps_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points);
-public static final void cairo_ps_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points) {
+public static final native void _cairo_ps_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points);
+public static final void cairo_ps_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points) {
 	lock.lock();
 	try {
 		_cairo_ps_surface_set_size(surface, width_in_points, height_in_points);
@@ -953,8 +953,8 @@ public static final void cairo_ps_surface_set_size(int /*long*/ surface, double
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_rectangle(int /*long*/ cr, double x, double y, double width, double height);
-public static final void cairo_rectangle(int /*long*/ cr, double x, double y, double width, double height) {
+public static final native void _cairo_rectangle(long /*int*/ cr, double x, double y, double width, double height);
+public static final void cairo_rectangle(long /*int*/ cr, double x, double y, double width, double height) {
 	lock.lock();
 	try {
 		_cairo_rectangle(cr, x, y, width, height);
@@ -963,8 +963,8 @@ public static final void cairo_rectangle(int /*long*/ cr, double x, double y, do
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int /*long*/ _cairo_reference(int /*long*/ cr);
-public static final int /*long*/ cairo_reference(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_reference(long /*int*/ cr);
+public static final long /*int*/ cairo_reference(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_reference(cr);
@@ -973,8 +973,8 @@ public static final int /*long*/ cairo_reference(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_rel_curve_to(int /*long*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
-public static final void cairo_rel_curve_to(int /*long*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3) {
+public static final native void _cairo_rel_curve_to(long /*int*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
+public static final void cairo_rel_curve_to(long /*int*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3) {
 	lock.lock();
 	try {
 		_cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3);
@@ -983,8 +983,8 @@ public static final void cairo_rel_curve_to(int /*long*/ cr, double dx1, double
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_rel_line_to(int /*long*/ cr, double dx, double dy);
-public static final void cairo_rel_line_to(int /*long*/ cr, double dx, double dy) {
+public static final native void _cairo_rel_line_to(long /*int*/ cr, double dx, double dy);
+public static final void cairo_rel_line_to(long /*int*/ cr, double dx, double dy) {
 	lock.lock();
 	try {
 		_cairo_rel_line_to(cr, dx, dy);
@@ -993,8 +993,8 @@ public static final void cairo_rel_line_to(int /*long*/ cr, double dx, double dy
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_rel_move_to(int /*long*/ cr, double dx, double dy);
-public static final void cairo_rel_move_to(int /*long*/ cr, double dx, double dy) {
+public static final native void _cairo_rel_move_to(long /*int*/ cr, double dx, double dy);
+public static final void cairo_rel_move_to(long /*int*/ cr, double dx, double dy) {
 	lock.lock();
 	try {
 		_cairo_rel_move_to(cr, dx, dy);
@@ -1003,8 +1003,8 @@ public static final void cairo_rel_move_to(int /*long*/ cr, double dx, double dy
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_reset_clip(int /*long*/ cr);
-public static final void cairo_reset_clip(int /*long*/ cr) {
+public static final native void _cairo_reset_clip(long /*int*/ cr);
+public static final void cairo_reset_clip(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_reset_clip(cr);
@@ -1013,8 +1013,8 @@ public static final void cairo_reset_clip(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_restore(int /*long*/ cr);
-public static final void cairo_restore(int /*long*/ cr) {
+public static final native void _cairo_restore(long /*int*/ cr);
+public static final void cairo_restore(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_restore(cr);
@@ -1023,8 +1023,8 @@ public static final void cairo_restore(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_rotate(int /*long*/ cr, double angle);
-public static final void cairo_rotate(int /*long*/ cr, double angle) {
+public static final native void _cairo_rotate(long /*int*/ cr, double angle);
+public static final void cairo_rotate(long /*int*/ cr, double angle) {
 	lock.lock();
 	try {
 		_cairo_rotate(cr, angle);
@@ -1033,8 +1033,8 @@ public static final void cairo_rotate(int /*long*/ cr, double angle) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_save(int /*long*/ cr);
-public static final void cairo_save(int /*long*/ cr) {
+public static final native void _cairo_save(long /*int*/ cr);
+public static final void cairo_save(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_save(cr);
@@ -1043,8 +1043,8 @@ public static final void cairo_save(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_scale(int /*long*/ cr, double sx, double sy);
-public static final void cairo_scale(int /*long*/ cr, double sx, double sy) {
+public static final native void _cairo_scale(long /*int*/ cr, double sx, double sy);
+public static final void cairo_scale(long /*int*/ cr, double sx, double sy) {
 	lock.lock();
 	try {
 		_cairo_scale(cr, sx, sy);
@@ -1056,8 +1056,8 @@ public static final void cairo_scale(int /*long*/ cr, double sx, double sy) {
  * @param cr cast=(cairo_t *)
  * @param family cast=(const char *)
  */
-public static final native void _cairo_select_font_face(int /*long*/ cr, byte[] family, int slant, int weight);
-public static final void cairo_select_font_face(int /*long*/ cr, byte[] family, int slant, int weight) {
+public static final native void _cairo_select_font_face(long /*int*/ cr, byte[] family, int slant, int weight);
+public static final void cairo_select_font_face(long /*int*/ cr, byte[] family, int slant, int weight) {
 	lock.lock();
 	try {
 		_cairo_select_font_face(cr, family, slant, weight);
@@ -1066,8 +1066,8 @@ public static final void cairo_select_font_face(int /*long*/ cr, byte[] family,
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_antialias(int /*long*/ cr, int antialias);
-public static final void cairo_set_antialias(int /*long*/ cr, int antialias) {
+public static final native void _cairo_set_antialias(long /*int*/ cr, int antialias);
+public static final void cairo_set_antialias(long /*int*/ cr, int antialias) {
 	lock.lock();
 	try {
 		_cairo_set_antialias(cr, antialias);
@@ -1076,8 +1076,8 @@ public static final void cairo_set_antialias(int /*long*/ cr, int antialias) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_dash(int /*long*/ cr, double[] dashes, int ndash, double offset);
-public static final void cairo_set_dash(int /*long*/ cr, double[] dashes, int ndash, double offset) {
+public static final native void _cairo_set_dash(long /*int*/ cr, double[] dashes, int ndash, double offset);
+public static final void cairo_set_dash(long /*int*/ cr, double[] dashes, int ndash, double offset) {
 	lock.lock();
 	try {
 		_cairo_set_dash(cr, dashes, ndash, offset);
@@ -1086,8 +1086,8 @@ public static final void cairo_set_dash(int /*long*/ cr, double[] dashes, int nd
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_fill_rule(int /*long*/ cr, int fill_rule);
-public static final void cairo_set_fill_rule(int /*long*/ cr, int fill_rule) {
+public static final native void _cairo_set_fill_rule(long /*int*/ cr, int fill_rule);
+public static final void cairo_set_fill_rule(long /*int*/ cr, int fill_rule) {
 	lock.lock();
 	try {
 		_cairo_set_fill_rule(cr, fill_rule);
@@ -1099,8 +1099,8 @@ public static final void cairo_set_fill_rule(int /*long*/ cr, int fill_rule) {
  * @param cr cast=(cairo_t *)
  * @param font_face cast=(cairo_font_face_t *)
  */
-public static final native void _cairo_set_font_face(int /*long*/ cr, int /*long*/ font_face);
-public static final void cairo_set_font_face(int /*long*/ cr, int /*long*/ font_face) {
+public static final native void _cairo_set_font_face(long /*int*/ cr, long /*int*/ font_face);
+public static final void cairo_set_font_face(long /*int*/ cr, long /*int*/ font_face) {
 	lock.lock();
 	try {
 		_cairo_set_font_face(cr, font_face);
@@ -1112,8 +1112,8 @@ public static final void cairo_set_font_face(int /*long*/ cr, int /*long*/ font_
  * @param cr cast=(cairo_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_set_font_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_set_font_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_set_font_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_set_font_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_set_font_matrix(cr, matrix);
@@ -1125,8 +1125,8 @@ public static final void cairo_set_font_matrix(int /*long*/ cr, double[] matrix)
  * @param cr cast=(cairo_t *)
  * @param options cast=(cairo_font_options_t *)
  */
-public static final native void _cairo_set_font_options(int /*long*/ cr, int /*long*/ options);
-public static final void cairo_set_font_options(int /*long*/ cr, int /*long*/ options) {
+public static final native void _cairo_set_font_options(long /*int*/ cr, long /*int*/ options);
+public static final void cairo_set_font_options(long /*int*/ cr, long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_set_font_options(cr, options);
@@ -1135,8 +1135,8 @@ public static final void cairo_set_font_options(int /*long*/ cr, int /*long*/ op
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_font_size(int /*long*/ cr, double size);
-public static final void cairo_set_font_size(int /*long*/ cr, double size) {
+public static final native void _cairo_set_font_size(long /*int*/ cr, double size);
+public static final void cairo_set_font_size(long /*int*/ cr, double size) {
 	lock.lock();
 	try {
 		_cairo_set_font_size(cr, size);
@@ -1145,8 +1145,8 @@ public static final void cairo_set_font_size(int /*long*/ cr, double size) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_line_cap(int /*long*/ cr, int line_cap);
-public static final void cairo_set_line_cap(int /*long*/ cr, int line_cap) {
+public static final native void _cairo_set_line_cap(long /*int*/ cr, int line_cap);
+public static final void cairo_set_line_cap(long /*int*/ cr, int line_cap) {
 	lock.lock();
 	try {
 		_cairo_set_line_cap(cr, line_cap);
@@ -1155,8 +1155,8 @@ public static final void cairo_set_line_cap(int /*long*/ cr, int line_cap) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_line_join(int /*long*/ cr, int line_join);
-public static final void cairo_set_line_join(int /*long*/ cr, int line_join) {
+public static final native void _cairo_set_line_join(long /*int*/ cr, int line_join);
+public static final void cairo_set_line_join(long /*int*/ cr, int line_join) {
 	lock.lock();
 	try {
 		_cairo_set_line_join(cr, line_join);
@@ -1165,8 +1165,8 @@ public static final void cairo_set_line_join(int /*long*/ cr, int line_join) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_line_width(int /*long*/ cr, double width);
-public static final void cairo_set_line_width(int /*long*/ cr, double width) {
+public static final native void _cairo_set_line_width(long /*int*/ cr, double width);
+public static final void cairo_set_line_width(long /*int*/ cr, double width) {
 	lock.lock();
 	try {
 		_cairo_set_line_width(cr, width);
@@ -1178,8 +1178,8 @@ public static final void cairo_set_line_width(int /*long*/ cr, double width) {
  * @param cr cast=(cairo_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_set_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_set_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_set_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_set_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_set_matrix(cr, matrix);
@@ -1188,8 +1188,8 @@ public static final void cairo_set_matrix(int /*long*/ cr, double[] matrix) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_miter_limit(int /*long*/ cr, double limit);
-public static final void cairo_set_miter_limit(int /*long*/ cr, double limit) {
+public static final native void _cairo_set_miter_limit(long /*int*/ cr, double limit);
+public static final void cairo_set_miter_limit(long /*int*/ cr, double limit) {
 	lock.lock();
 	try {
 		_cairo_set_miter_limit(cr, limit);
@@ -1198,8 +1198,8 @@ public static final void cairo_set_miter_limit(int /*long*/ cr, double limit) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_operator(int /*long*/ cr, int op);
-public static final void cairo_set_operator(int /*long*/ cr, int op) {
+public static final native void _cairo_set_operator(long /*int*/ cr, int op);
+public static final void cairo_set_operator(long /*int*/ cr, int op) {
 	lock.lock();
 	try {
 		_cairo_set_operator(cr, op);
@@ -1211,8 +1211,8 @@ public static final void cairo_set_operator(int /*long*/ cr, int op) {
  * @param cr cast=(cairo_t *)
  * @param source cast=(cairo_pattern_t *)
  */
-public static final native void _cairo_set_source(int /*long*/ cr, int /*long*/ source);
-public static final void cairo_set_source(int /*long*/ cr, int /*long*/ source) {
+public static final native void _cairo_set_source(long /*int*/ cr, long /*int*/ source);
+public static final void cairo_set_source(long /*int*/ cr, long /*int*/ source) {
 	lock.lock();
 	try {
 		_cairo_set_source(cr, source);
@@ -1221,8 +1221,8 @@ public static final void cairo_set_source(int /*long*/ cr, int /*long*/ source)
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_source_rgb(int /*long*/ cr, double red, double green, double blue);
-public static final void cairo_set_source_rgb(int /*long*/ cr, double red, double green, double blue) {
+public static final native void _cairo_set_source_rgb(long /*int*/ cr, double red, double green, double blue);
+public static final void cairo_set_source_rgb(long /*int*/ cr, double red, double green, double blue) {
 	lock.lock();
 	try {
 		_cairo_set_source_rgb(cr, red, green, blue);
@@ -1231,8 +1231,8 @@ public static final void cairo_set_source_rgb(int /*long*/ cr, double red, doubl
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_source_rgba(int /*long*/ cr, double red, double green, double blue, double alpha);
-public static final void cairo_set_source_rgba(int /*long*/ cr, double red, double green, double blue, double alpha) {
+public static final native void _cairo_set_source_rgba(long /*int*/ cr, double red, double green, double blue, double alpha);
+public static final void cairo_set_source_rgba(long /*int*/ cr, double red, double green, double blue, double alpha) {
 	lock.lock();
 	try {
 		_cairo_set_source_rgba(cr, red, green, blue, alpha);
@@ -1244,8 +1244,8 @@ public static final void cairo_set_source_rgba(int /*long*/ cr, double red, doub
  * @param cr cast=(cairo_t *)
  * @param surface cast=(cairo_surface_t *)
  */
-public static final native void _cairo_set_source_surface(int /*long*/ cr, int /*long*/ surface, double x, double y);
-public static final void cairo_set_source_surface(int /*long*/ cr, int /*long*/ surface, double x, double y) {
+public static final native void _cairo_set_source_surface(long /*int*/ cr, long /*int*/ surface, double x, double y);
+public static final void cairo_set_source_surface(long /*int*/ cr, long /*int*/ surface, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_set_source_surface(cr, surface, x, y);
@@ -1254,8 +1254,8 @@ public static final void cairo_set_source_surface(int /*long*/ cr, int /*long*/
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_set_tolerance(int /*long*/ cr, double tolerance);
-public static final void cairo_set_tolerance(int /*long*/ cr, double tolerance) {
+public static final native void _cairo_set_tolerance(long /*int*/ cr, double tolerance);
+public static final void cairo_set_tolerance(long /*int*/ cr, double tolerance) {
 	lock.lock();
 	try {
 		_cairo_set_tolerance(cr, tolerance);
@@ -1267,8 +1267,8 @@ public static final void cairo_set_tolerance(int /*long*/ cr, double tolerance)
  * @param cr cast=(cairo_t *)
  * @param glyphs cast=(cairo_glyph_t *)
  */
-public static final native void _cairo_show_glyphs(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs);
-public static final void cairo_show_glyphs(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs) {
+public static final native void _cairo_show_glyphs(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs);
+public static final void cairo_show_glyphs(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs) {
 	lock.lock();
 	try {
 		_cairo_show_glyphs(cr, glyphs, num_glyphs);
@@ -1277,8 +1277,8 @@ public static final void cairo_show_glyphs(int /*long*/ cr, int /*long*/ glyphs,
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_show_page(int /*long*/ cr);
-public static final void cairo_show_page(int /*long*/ cr) {
+public static final native void _cairo_show_page(long /*int*/ cr);
+public static final void cairo_show_page(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_show_page(cr);
@@ -1290,8 +1290,8 @@ public static final void cairo_show_page(int /*long*/ cr) {
  * @param cr cast=(cairo_t *)
  * @param utf8 cast=(const char *)
  */
-public static final native void _cairo_show_text(int /*long*/ cr, byte[] utf8);
-public static final void cairo_show_text(int /*long*/ cr, byte[] utf8) {
+public static final native void _cairo_show_text(long /*int*/ cr, byte[] utf8);
+public static final void cairo_show_text(long /*int*/ cr, byte[] utf8) {
 	lock.lock();
 	try {
 		_cairo_show_text(cr, utf8);
@@ -1300,8 +1300,8 @@ public static final void cairo_show_text(int /*long*/ cr, byte[] utf8) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native int _cairo_status(int /*long*/ cr);
-public static final int cairo_status(int /*long*/ cr) {
+public static final native int _cairo_status(long /*int*/ cr);
+public static final int cairo_status(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_status(cr);
@@ -1309,8 +1309,8 @@ public static final int cairo_status(int /*long*/ cr) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_status_to_string(int status);
-public static final int /*long*/ cairo_status_to_string(int status) {
+public static final native long /*int*/ _cairo_status_to_string(int status);
+public static final long /*int*/ cairo_status_to_string(int status) {
 	lock.lock();
 	try {
 		return _cairo_status_to_string(status);
@@ -1319,8 +1319,8 @@ public static final int /*long*/ cairo_status_to_string(int status) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_stroke(int /*long*/ cr);
-public static final void cairo_stroke(int /*long*/ cr) {
+public static final native void _cairo_stroke(long /*int*/ cr);
+public static final void cairo_stroke(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_stroke(cr);
@@ -1329,8 +1329,8 @@ public static final void cairo_stroke(int /*long*/ cr) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_stroke_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
-public static final void cairo_stroke_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
+public static final native void _cairo_stroke_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
+public static final void cairo_stroke_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
 	lock.lock();
 	try {
 		_cairo_stroke_extents(cr, x1, y1, x2, y2);
@@ -1339,8 +1339,8 @@ public static final void cairo_stroke_extents(int /*long*/ cr, double[] x1, doub
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_stroke_preserve(int /*long*/ cr);
-public static final void cairo_stroke_preserve(int /*long*/ cr) {
+public static final native void _cairo_stroke_preserve(long /*int*/ cr);
+public static final void cairo_stroke_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_stroke_preserve(cr);
@@ -1349,8 +1349,8 @@ public static final void cairo_stroke_preserve(int /*long*/ cr) {
 	}
 }
 /** @param other cast=(cairo_surface_t *) */
-public static final native int /*long*/ _cairo_surface_create_similar(int /*long*/ other, int format, int width, int height);
-public static final int /*long*/ cairo_surface_create_similar(int /*long*/ other, int format, int width, int height) {
+public static final native long /*int*/ _cairo_surface_create_similar(long /*int*/ other, int format, int width, int height);
+public static final long /*int*/ cairo_surface_create_similar(long /*int*/ other, int format, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_surface_create_similar(other, format, width, height);
@@ -1359,8 +1359,8 @@ public static final int /*long*/ cairo_surface_create_similar(int /*long*/ other
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native void _cairo_surface_destroy(int /*long*/ surface);
-public static final void cairo_surface_destroy(int /*long*/ surface) {
+public static final native void _cairo_surface_destroy(long /*int*/ surface);
+public static final void cairo_surface_destroy(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_destroy(surface);
@@ -1369,8 +1369,8 @@ public static final void cairo_surface_destroy(int /*long*/ surface) {
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native void _cairo_surface_finish(int /*long*/ surface);
-public static final void cairo_surface_finish(int /*long*/ surface) {
+public static final native void _cairo_surface_finish(long /*int*/ surface);
+public static final void cairo_surface_finish(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_finish(surface);
@@ -1382,8 +1382,8 @@ public static final void cairo_surface_finish(int /*long*/ surface) {
  * @method flags=dynamic
  * @param surface cast=(cairo_surface_t *)
  */
-public static final native int _cairo_surface_get_type(int /*long*/ surface);
-public static final int cairo_surface_get_type(int /*long*/ surface) {
+public static final native int _cairo_surface_get_type(long /*int*/ surface);
+public static final int cairo_surface_get_type(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_surface_get_type(surface);
@@ -1395,8 +1395,8 @@ public static final int cairo_surface_get_type(int /*long*/ surface) {
  * @param surface cast=(cairo_surface_t *)
  * @param key cast=(cairo_user_data_key_t *)
  */
-public static final native int /*long*/ _cairo_surface_get_user_data(int /*long*/ surface, int /*long*/ key);
-public static final int /*long*/ cairo_surface_get_user_data(int /*long*/ surface, int /*long*/ key) {
+public static final native long /*int*/ _cairo_surface_get_user_data(long /*int*/ surface, long /*int*/ key);
+public static final long /*int*/ cairo_surface_get_user_data(long /*int*/ surface, long /*int*/ key) {
 	lock.lock();
 	try {
 		return _cairo_surface_get_user_data(surface, key);
@@ -1405,8 +1405,8 @@ public static final int /*long*/ cairo_surface_get_user_data(int /*long*/ surfac
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native void _cairo_surface_reference(int /*long*/ surface);
-public static final void cairo_surface_reference(int /*long*/ surface) {
+public static final native void _cairo_surface_reference(long /*int*/ surface);
+public static final void cairo_surface_reference(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_reference(surface);
@@ -1415,8 +1415,8 @@ public static final void cairo_surface_reference(int /*long*/ surface) {
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native void _cairo_surface_set_device_offset(int /*long*/ surface, double x_offset, double y_offset);
-public static final void cairo_surface_set_device_offset(int /*long*/ surface, double x_offset, double y_offset) {
+public static final native void _cairo_surface_set_device_offset(long /*int*/ surface, double x_offset, double y_offset);
+public static final void cairo_surface_set_device_offset(long /*int*/ surface, double x_offset, double y_offset) {
 	lock.lock();
 	try {
 		_cairo_surface_set_device_offset(surface, x_offset, y_offset);
@@ -1425,8 +1425,8 @@ public static final void cairo_surface_set_device_offset(int /*long*/ surface, d
 	}
 }
 /** @method flags=dynamic */
-public static final native void _cairo_surface_set_fallback_resolution(int /*long*/ surface, double x_pixels_per_inch, double y_pixels_per_inch);
-public static final void cairo_surface_set_fallback_resolution(int /*long*/ surface, double x_pixels_per_inch, double y_pixels_per_inch) {
+public static final native void _cairo_surface_set_fallback_resolution(long /*int*/ surface, double x_pixels_per_inch, double y_pixels_per_inch);
+public static final void cairo_surface_set_fallback_resolution(long /*int*/ surface, double x_pixels_per_inch, double y_pixels_per_inch) {
 	lock.lock();
 	try {
 		_cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch);
@@ -1440,8 +1440,8 @@ public static final void cairo_surface_set_fallback_resolution(int /*long*/ surf
  * @param user_data cast=(void *)
  * @param destroy cast=(cairo_destroy_func_t)
  */
-public static final native int _cairo_surface_set_user_data(int /*long*/ surface, int /*long*/ key, int /*long*/ user_data, int /*long*/ destroy);
-public static final int cairo_surface_set_user_data(int /*long*/ surface, int /*long*/ key, int /*long*/ user_data, int /*long*/ destroy) {
+public static final native int _cairo_surface_set_user_data(long /*int*/ surface, long /*int*/ key, long /*int*/ user_data, long /*int*/ destroy);
+public static final int cairo_surface_set_user_data(long /*int*/ surface, long /*int*/ key, long /*int*/ user_data, long /*int*/ destroy) {
 	lock.lock();
 	try {
 		return _cairo_surface_set_user_data(surface, key, user_data, destroy);
@@ -1454,8 +1454,8 @@ public static final int cairo_surface_set_user_data(int /*long*/ surface, int /*
  * @param utf8 cast=(const char *)
  * @param extents cast=(cairo_text_extents_t *)
  */
-public static final native void _cairo_text_extents(int /*long*/ cr, byte[] utf8, cairo_text_extents_t extents);
-public static final void cairo_text_extents(int /*long*/ cr, byte[] utf8, cairo_text_extents_t extents) {
+public static final native void _cairo_text_extents(long /*int*/ cr, byte[] utf8, cairo_text_extents_t extents);
+public static final void cairo_text_extents(long /*int*/ cr, byte[] utf8, cairo_text_extents_t extents) {
 	lock.lock();
 	try {
 		_cairo_text_extents(cr, utf8, extents);
@@ -1467,8 +1467,8 @@ public static final void cairo_text_extents(int /*long*/ cr, byte[] utf8, cairo_
  * @param cr cast=(cairo_t *)
  * @param utf8 cast=(const char *)
  */
-public static final native void _cairo_text_path(int /*long*/ cr, byte[] utf8);
-public static final void cairo_text_path(int /*long*/ cr, byte[] utf8) {
+public static final native void _cairo_text_path(long /*int*/ cr, byte[] utf8);
+public static final void cairo_text_path(long /*int*/ cr, byte[] utf8) {
 	lock.lock();
 	try {
 		_cairo_text_path(cr, utf8);
@@ -1480,8 +1480,8 @@ public static final void cairo_text_path(int /*long*/ cr, byte[] utf8) {
  * @param cr cast=(cairo_t *)
  * @param matrix cast=(cairo_matrix_t *)
  */
-public static final native void _cairo_transform(int /*long*/ cr, double[] matrix);
-public static final void cairo_transform(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_transform(long /*int*/ cr, double[] matrix);
+public static final void cairo_transform(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_transform(cr, matrix);
@@ -1490,8 +1490,8 @@ public static final void cairo_transform(int /*long*/ cr, double[] matrix) {
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_translate(int /*long*/ cr, double tx, double ty);
-public static final void cairo_translate(int /*long*/ cr, double tx, double ty) {
+public static final native void _cairo_translate(long /*int*/ cr, double tx, double ty);
+public static final void cairo_translate(long /*int*/ cr, double tx, double ty) {
 	lock.lock();
 	try {
 		_cairo_translate(cr, tx, ty);
@@ -1500,8 +1500,8 @@ public static final void cairo_translate(int /*long*/ cr, double tx, double ty)
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_user_to_device(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_user_to_device(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_user_to_device(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_user_to_device(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_user_to_device(cr, x, y);
@@ -1510,8 +1510,8 @@ public static final void cairo_user_to_device(int /*long*/ cr, double[] x, doubl
 	}
 }
 /** @param cr cast=(cairo_t *) */
-public static final native void _cairo_user_to_device_distance(int /*long*/ cr, double[] dx, double[] dy);
-public static final void cairo_user_to_device_distance(int /*long*/ cr, double[] dx, double[] dy) {
+public static final native void _cairo_user_to_device_distance(long /*int*/ cr, double[] dx, double[] dy);
+public static final void cairo_user_to_device_distance(long /*int*/ cr, double[] dx, double[] dy) {
 	lock.lock();
 	try {
 		_cairo_user_to_device_distance(cr, dx, dy);
@@ -1525,8 +1525,8 @@ public static final native int cairo_version();
  * @param drawable cast=(Drawable)
  * @param visual cast=(Visual *)
  */
-public static final native int /*long*/ _cairo_xlib_surface_create(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ visual, int width, int height);
-public static final int /*long*/ cairo_xlib_surface_create(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ visual, int width, int height) {
+public static final native long /*int*/ _cairo_xlib_surface_create(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ visual, int width, int height);
+public static final long /*int*/ cairo_xlib_surface_create(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ visual, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_xlib_surface_create(dpy, drawable, visual, width, height);
@@ -1539,8 +1539,8 @@ public static final int /*long*/ cairo_xlib_surface_create(int /*long*/ dpy, int
  * @param pixmap cast=(Pixmap)
  * @param screen cast=(Screen *)
  */
-public static final native int /*long*/ _cairo_xlib_surface_create_for_bitmap(int /*long*/ dpy, int /*long*/ pixmap, int /*long*/ screen, int width, int height);
-public static final int /*long*/ cairo_xlib_surface_create_for_bitmap(int /*long*/ dpy, int /*long*/ pixmap, int /*long*/ screen, int width, int height) {
+public static final native long /*int*/ _cairo_xlib_surface_create_for_bitmap(long /*int*/ dpy, long /*int*/ pixmap, long /*int*/ screen, int width, int height);
+public static final long /*int*/ cairo_xlib_surface_create_for_bitmap(long /*int*/ dpy, long /*int*/ pixmap, long /*int*/ screen, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_xlib_surface_create_for_bitmap(dpy, pixmap, screen, width, height);
@@ -1549,8 +1549,8 @@ public static final int /*long*/ cairo_xlib_surface_create_for_bitmap(int /*long
 	}
 }
 /** @param surface cast=(cairo_surface_t *) */
-public static final native void _cairo_xlib_surface_set_size(int /*long*/ surface, int width, int height);
-public static final void cairo_xlib_surface_set_size(int /*long*/ surface, int width, int height) {
+public static final native void _cairo_xlib_surface_set_size(long /*int*/ surface, int width, int height);
+public static final void cairo_xlib_surface_set_size(long /*int*/ surface, int width, int height) {
 	lock.lock();
 	try {
 		_cairo_xlib_surface_set_size(surface, width, height);
@@ -1563,18 +1563,18 @@ public static final void cairo_xlib_surface_set_size(int /*long*/ surface, int w
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(cairo_path_t dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(cairo_path_t dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(cairo_path_data_t dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(cairo_path_data_t dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(double[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(double[] dest, long /*int*/ src, long /*int*/ size);
 
 }
diff --git a/org/eclipse/swt/internal/cairo/cairo_path_t.java b/org/eclipse/swt/internal/cairo/cairo_path_t.java
index db690aa..2b02301 100644
--- a/org/eclipse/swt/internal/cairo/cairo_path_t.java
+++ b/org/eclipse/swt/internal/cairo/cairo_path_t.java
@@ -24,7 +24,7 @@ package org.eclipse.swt.internal.cairo;
 public class cairo_path_t {
 	public int status;
 	/** @field cast=(cairo_path_data_t *) */
-	public int /*long*/ data;
+	public long /*int*/ data;
 	public int num_data;
 	public static final int sizeof = Cairo.cairo_path_t_sizeof();
 }
diff --git a/org/eclipse/swt/internal/cde/CDE.java b/org/eclipse/swt/internal/cde/CDE.java
index f2ea5b5..f1fda5c 100644
--- a/org/eclipse/swt/internal/cde/CDE.java
+++ b/org/eclipse/swt/internal/cde/CDE.java
@@ -33,8 +33,8 @@ public class CDE extends Platform {
  * @param appName cast=(char *)
  * @param appClass cast=(char *)
  */
-public static final native boolean _DtAppInitialize(int /*long*/ appContext, int /*long*/ display, int /*long*/ topWiget, byte[] appName, byte[] appClass);
-public static final boolean DtAppInitialize(int /*long*/ appContext, int /*long*/ display, int /*long*/ topWiget, byte[] appName, byte[] appClass) {
+public static final native boolean _DtAppInitialize(long /*int*/ appContext, long /*int*/ display, long /*int*/ topWiget, byte[] appName, byte[] appClass);
+public static final boolean DtAppInitialize(long /*int*/ appContext, long /*int*/ display, long /*int*/ topWiget, byte[] appName, byte[] appClass) {
 	lock.lock();
 	try {
 		return _DtAppInitialize(appContext, display, topWiget, appName, appClass);
@@ -51,8 +51,8 @@ public static final void DtDbLoad() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _DtDtsDataTypeNames();
-public static final int /*long*/ DtDtsDataTypeNames() {
+public static final native long /*int*/ _DtDtsDataTypeNames();
+public static final long /*int*/ DtDtsDataTypeNames() {
 	lock.lock();
 	try {
 		return _DtDtsDataTypeNames();
@@ -61,8 +61,8 @@ public static final int /*long*/ DtDtsDataTypeNames() {
 	}
 }
 /** @param fileName cast=(char *) */
-public static final native int /*long*/ _DtDtsFileToDataType(byte[] fileName);
-public static final int /*long*/ DtDtsFileToDataType(byte[] fileName) {
+public static final native long /*int*/ _DtDtsFileToDataType(byte[] fileName);
+public static final long /*int*/ DtDtsFileToDataType(byte[] fileName) {
 	lock.lock();
 	try {
 		return _DtDtsFileToDataType(fileName);
@@ -85,8 +85,8 @@ public static final boolean DtDtsDataTypeIsAction(byte[] dataType) {
  * @param attrName cast=(char *)
  * @param optName cast=(char *)
  */
-public static final native int /*long*/ _DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName);
-public static final int /*long*/ DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName) {
+public static final native long /*int*/ _DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName);
+public static final long /*int*/ DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName) {
 	lock.lock();
 	try {
 		return _DtDtsDataTypeToAttributeValue(dataType, attrName, optName);
@@ -95,8 +95,8 @@ public static final int /*long*/ DtDtsDataTypeToAttributeValue(byte[] dataType,
 	}
 }
 /** @param dataType cast=(char *) */
-public static final native void _DtDtsFreeDataType(int /*long*/ dataType);
-public static final void DtDtsFreeDataType(int /*long*/ dataType) {
+public static final native void _DtDtsFreeDataType(long /*int*/ dataType);
+public static final void DtDtsFreeDataType(long /*int*/ dataType) {
 	lock.lock();
 	try {
 		_DtDtsFreeDataType(dataType);
@@ -105,8 +105,8 @@ public static final void DtDtsFreeDataType(int /*long*/ dataType) {
 	}
 }
 /** @param dataTypeList cast=(char **) */
-public static final native void _DtDtsFreeDataTypeNames(int /*long*/ dataTypeList);
-public static final void DtDtsFreeDataTypeNames(int /*long*/ dataTypeList) {
+public static final native void _DtDtsFreeDataTypeNames(long /*int*/ dataTypeList);
+public static final void DtDtsFreeDataTypeNames(long /*int*/ dataTypeList) {
 	lock.lock();
 	try {
 		_DtDtsFreeDataTypeNames(dataTypeList);
@@ -115,8 +115,8 @@ public static final void DtDtsFreeDataTypeNames(int /*long*/ dataTypeList) {
 	}
 }
 /** @param attrValue cast=(char *) */
-public static final native void _DtDtsFreeAttributeValue(int /*long*/ attrValue);
-public static final void DtDtsFreeAttributeValue(int /*long*/ attrValue) {
+public static final native void _DtDtsFreeAttributeValue(long /*int*/ attrValue);
+public static final void DtDtsFreeAttributeValue(long /*int*/ attrValue) {
 	lock.lock();
 	try {
 		_DtDtsFreeAttributeValue(attrValue);
@@ -133,8 +133,8 @@ public static final void DtDtsFreeAttributeValue(int /*long*/ attrValue) {
  * @param callback cast=(DtActionCallbackProc)
  * @param clientData cast=(XtPointer)
  */
-public static final native long _DtActionInvoke(int /*long*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, int /*long*/ callback, int /*long*/ clientData);
-public static final long DtActionInvoke(int /*long*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, int /*long*/ callback, int /*long*/ clientData) {
+public static final native long _DtActionInvoke(long /*int*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, long /*int*/ callback, long /*int*/ clientData);
+public static final long DtActionInvoke(long /*int*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, long /*int*/ callback, long /*int*/ clientData) {
 	lock.lock();
 	try {
 		return _DtActionInvoke(topWidget, action, args, argCount, termOpts, execHost, contextDir, useIndicator, callback, clientData);
@@ -143,8 +143,8 @@ public static final long DtActionInvoke(int /*long*/ topWidget, byte[] action, D
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _topLevelShellWidgetClass();
-public static final int /*long*/ topLevelShellWidgetClass() {
+public static final native long /*int*/ _topLevelShellWidgetClass();
+public static final long /*int*/ topLevelShellWidgetClass() {
 	lock.lock();
 	try {
 		return _topLevelShellWidgetClass();
@@ -159,8 +159,8 @@ public static final int /*long*/ topLevelShellWidgetClass() {
  * @param display cast=(Display *)
  * @param argList cast=(ArgList)
  */
-public static final native int /*long*/ _XtAppCreateShell(byte[] appName, byte[] appClass, int /*long*/ widgetClass, int /*long*/ display, int /*long*/ [] argList, int argCount);
-public static final int /*long*/ XtAppCreateShell(byte[] appName, byte[] appClass, int /*long*/ widgetClass, int /*long*/ display, int /*long*/ [] argList, int argCount) {
+public static final native long /*int*/ _XtAppCreateShell(byte[] appName, byte[] appClass, long /*int*/ widgetClass, long /*int*/ display, long /*int*/ [] argList, int argCount);
+public static final long /*int*/ XtAppCreateShell(byte[] appName, byte[] appClass, long /*int*/ widgetClass, long /*int*/ display, long /*int*/ [] argList, int argCount) {
 	lock.lock();
 	try {
 		return _XtAppCreateShell(appName, appClass, widgetClass, display, argList, argCount);
@@ -168,8 +168,8 @@ public static final int /*long*/ XtAppCreateShell(byte[] appName, byte[] appClas
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XtCreateApplicationContext();
-public static final int /*long*/ XtCreateApplicationContext() {
+public static final native long /*int*/ _XtCreateApplicationContext();
+public static final long /*int*/ XtCreateApplicationContext() {
 	lock.lock();
 	try {
 		return _XtCreateApplicationContext();
@@ -187,8 +187,8 @@ public static final int /*long*/ XtCreateApplicationContext() {
  * @param argc cast=(int *)
  * @param argv cast=(String *)
  */
-public static final native void _XtDisplayInitialize(int /*long*/ app_context, int /*long*/ display, byte[] appName, byte[] appClass, int /*long*/ options, int num_options, int /*long*/ [] argc, int argv);
-public static final void XtDisplayInitialize(int /*long*/ appContext, int /*long*/ display, byte[] appName, byte[] appClass, int /*long*/ options, int num_options, int /*long*/ [] argc, int argv) {
+public static final native void _XtDisplayInitialize(long /*int*/ app_context, long /*int*/ display, byte[] appName, byte[] appClass, long /*int*/ options, int num_options, long /*int*/ [] argc, int argv);
+public static final void XtDisplayInitialize(long /*int*/ appContext, long /*int*/ display, byte[] appName, byte[] appClass, long /*int*/ options, int num_options, long /*int*/ [] argc, int argv) {
 	lock.lock();
 	try {
 		_XtDisplayInitialize(appContext, display, appName, appClass, options, num_options, argc, argv);
@@ -197,8 +197,8 @@ public static final void XtDisplayInitialize(int /*long*/ appContext, int /*long
 	}
 }
 /** @param widget cast=(Widget) */
-public static final native void _XtRealizeWidget(int /*long*/ widget);
-public static final void XtRealizeWidget(int /*long*/ widget) {
+public static final native void _XtRealizeWidget(long /*int*/ widget);
+public static final void XtRealizeWidget(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_XtRealizeWidget(widget);
@@ -207,8 +207,8 @@ public static final void XtRealizeWidget(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(Widget) */
-public static final native void _XtResizeWidget(int /*long*/ widget, int width, int height, int borderWidth);
-public static final void XtResizeWidget(int /*long*/ widget, int width, int height, int borderWidth) {
+public static final native void _XtResizeWidget(long /*int*/ widget, int width, int height, int borderWidth);
+public static final void XtResizeWidget(long /*int*/ widget, int width, int height, int borderWidth) {
 	lock.lock();
 	try {
 		_XtResizeWidget(widget, width, height, borderWidth);
@@ -217,8 +217,8 @@ public static final void XtResizeWidget(int /*long*/ widget, int width, int heig
 	}
 }
 /** @param widget cast=(Widget) */
-public static final native void _XtSetMappedWhenManaged(int /*long*/ widget, boolean flag);
-public static final void XtSetMappedWhenManaged(int /*long*/ widget, boolean flag) {
+public static final native void _XtSetMappedWhenManaged(long /*int*/ widget, boolean flag);
+public static final void XtSetMappedWhenManaged(long /*int*/ widget, boolean flag) {
 	lock.lock();
 	try {
 		_XtSetMappedWhenManaged(widget, flag);
diff --git a/org/eclipse/swt/internal/cde/DtActionArg.java b/org/eclipse/swt/internal/cde/DtActionArg.java
index a9e3698..552d57c 100644
--- a/org/eclipse/swt/internal/cde/DtActionArg.java
+++ b/org/eclipse/swt/internal/cde/DtActionArg.java
@@ -14,6 +14,6 @@ package org.eclipse.swt.internal.cde;
 public class DtActionArg {
 	public int argClass;
 	/** @field accessor=u.file.name,cast=(char *) */
-	public int /*long*/ name;
+	public long /*int*/ name;
 	public static final int sizeof = CDE.DtActionArg_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gnome/GNOME.java b/org/eclipse/swt/internal/gnome/GNOME.java
index 9802b71..b42086c 100644
--- a/org/eclipse/swt/internal/gnome/GNOME.java
+++ b/org/eclipse/swt/internal/gnome/GNOME.java
@@ -36,8 +36,8 @@ public static final native int GnomeVFSMimeApplication_sizeof();
 /** Natives */
 
 /** @param mem cast=(gpointer) */
-public static final native void _g_free(int /*long*/ mem);
-public static final void g_free(int /*long*/ mem) {
+public static final native void _g_free(long /*int*/ mem);
+public static final void g_free(long /*int*/ mem) {
 	lock.lock();
 	try {
 		_g_free(mem);
@@ -49,8 +49,8 @@ public static final void g_free(int /*long*/ mem) {
  * @param list cast=(GList *)
  * @param data cast=(gpointer)
  */
-public static final native int /*long*/ _g_list_append(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_append(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_append(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_append(list, data);
@@ -59,8 +59,8 @@ public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ d
 	}
 }
 /** @param list cast=(GList *) */
-public static final native void _g_list_free(int /*long*/ list);
-public static final void g_list_free(int /*long*/ list) {
+public static final native void _g_list_free(long /*int*/ list);
+public static final void g_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free(list);
@@ -68,8 +68,8 @@ public static final void g_list_free(int /*long*/ list) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_next(int /*long*/ list);
-public static final int /*long*/ g_list_next(int /*long*/ list) {
+public static final native long /*int*/ _g_list_next(long /*int*/ list);
+public static final long /*int*/ g_list_next(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_next(list);
@@ -78,8 +78,8 @@ public static final int /*long*/ g_list_next(int /*long*/ list) {
 	}
 }
 /** @param object cast=(gpointer) */
-public static final native void _g_object_unref(int /*long*/ object);
-public static final void g_object_unref(int /*long*/ object) {
+public static final native void _g_object_unref(long /*int*/ object);
+public static final void g_object_unref(long /*int*/ object) {
 	lock.lock();
 	try {
 		_g_object_unref(object);
@@ -97,8 +97,8 @@ public static final void g_object_unref(int /*long*/ object) {
  * @param flags cast=(GnomeIconLookupFlags)
  * @param result cast=(GnomeIconLookupResultFlags *)
  */
-public static final native int /*long*/ _gnome_icon_lookup(int /*long*/ icon_theme, int /*long*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, int /*long*/ file_info, byte[] mime_type, int flags, int[] result);
-public static final int /*long*/ gnome_icon_lookup(int /*long*/ icon_theme, int /*long*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, int /*long*/ file_info, byte[] mime_type, int flags, int[] result) {
+public static final native long /*int*/ _gnome_icon_lookup(long /*int*/ icon_theme, long /*int*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, long /*int*/ file_info, byte[] mime_type, int flags, int[] result);
+public static final long /*int*/ gnome_icon_lookup(long /*int*/ icon_theme, long /*int*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, long /*int*/ file_info, byte[] mime_type, int flags, int[] result) {
 	lock.lock();
 	try {
 		return _gnome_icon_lookup(icon_theme, thumbnail_factory, file_uri, custom_icon, file_info, mime_type, flags, result);
@@ -111,8 +111,8 @@ public static final int /*long*/ gnome_icon_lookup(int /*long*/ icon_theme, int
  * @param icon_name cast=(const char *)
  * @param icon_data cast=(const GnomeIconData **)
  */
-public static final native int /*long*/ _gnome_icon_theme_lookup_icon(int /*long*/ theme, int /*long*/ icon_name, int size, int /*long*/[] icon_data, int[] base_size);
-public static final int /*long*/ gnome_icon_theme_lookup_icon(int /*long*/ theme, int /*long*/ icon_name, int size, int /*long*/[] icon_data, int[] base_size) {
+public static final native long /*int*/ _gnome_icon_theme_lookup_icon(long /*int*/ theme, long /*int*/ icon_name, int size, long /*int*/[] icon_data, int[] base_size);
+public static final long /*int*/ gnome_icon_theme_lookup_icon(long /*int*/ theme, long /*int*/ icon_name, int size, long /*int*/[] icon_data, int[] base_size) {
 	lock.lock();
 	try {
 		return _gnome_icon_theme_lookup_icon(theme, icon_name, size, icon_data, base_size);
@@ -120,8 +120,8 @@ public static final int /*long*/ gnome_icon_theme_lookup_icon(int /*long*/ theme
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_icon_theme_new();
-public static final int /*long*/ gnome_icon_theme_new() {
+public static final native long /*int*/ _gnome_icon_theme_new();
+public static final long /*int*/ gnome_icon_theme_new() {
 	lock.lock();
 	try {
 		return _gnome_icon_theme_new();
@@ -129,8 +129,8 @@ public static final int /*long*/ gnome_icon_theme_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_get_registered_mime_types();
-public static final int /*long*/ gnome_vfs_get_registered_mime_types() {
+public static final native long /*int*/ _gnome_vfs_get_registered_mime_types();
+public static final long /*int*/ gnome_vfs_get_registered_mime_types() {
 	lock.lock();
 	try {
 		return _gnome_vfs_get_registered_mime_types();
@@ -148,8 +148,8 @@ public static final boolean gnome_vfs_init() {
 	}
 }
 /** @param uri cast=(const char *) */
-public static final native int /*long*/ _gnome_vfs_make_uri_from_input(byte[] uri);
-public static final int /*long*/ gnome_vfs_make_uri_from_input(byte[] uri) {
+public static final native long /*int*/ _gnome_vfs_make_uri_from_input(byte[] uri);
+public static final long /*int*/ gnome_vfs_make_uri_from_input(byte[] uri) {
 	lock.lock();
 	try {
 		return _gnome_vfs_make_uri_from_input(uri);
@@ -161,8 +161,8 @@ public static final int /*long*/ gnome_vfs_make_uri_from_input(byte[] uri) {
  * @method flags=dynamic
  * @param uri cast=(const char *)
  */
-public static final native int /*long*/ _gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs);
-public static final int /*long*/ gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs) {
+public static final native long /*int*/ _gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs);
+public static final long /*int*/ gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs) {
 	lock.lock();
 	try {
 		return _gnome_vfs_make_uri_from_input_with_dirs(uri, dirs);
@@ -171,8 +171,8 @@ public static final int /*long*/ gnome_vfs_make_uri_from_input_with_dirs(byte[]
 	}
 }
 /** @param application cast=(GnomeVFSMimeApplication *) */
-public static final native void _gnome_vfs_mime_application_free(int /*long*/ application);
-public static final void gnome_vfs_mime_application_free(int /*long*/ application) {
+public static final native void _gnome_vfs_mime_application_free(long /*int*/ application);
+public static final void gnome_vfs_mime_application_free(long /*int*/ application) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_application_free(application);
@@ -185,8 +185,8 @@ public static final void gnome_vfs_mime_application_free(int /*long*/ applicatio
  * @param application cast=(GnomeVFSMimeApplication *)
  * @param uris cast=(GList *)
  */
-public static final native int _gnome_vfs_mime_application_launch(int /*long*/ application, int /*long*/ uris);
-public static final int gnome_vfs_mime_application_launch(int /*long*/ application, int /*long*/ uris) {	
+public static final native int _gnome_vfs_mime_application_launch(long /*int*/ application, long /*int*/ uris);
+public static final int gnome_vfs_mime_application_launch(long /*int*/ application, long /*int*/ uris) {	
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_application_launch(application, uris);
@@ -195,8 +195,8 @@ public static final int gnome_vfs_mime_application_launch(int /*long*/ applicati
 	}
 }
 /** @param list cast=(GList *) */
-public static final native void _gnome_vfs_mime_extensions_list_free(int /*long*/ list);
-public static final void gnome_vfs_mime_extensions_list_free(int /*long*/ list) {
+public static final native void _gnome_vfs_mime_extensions_list_free(long /*int*/ list);
+public static final void gnome_vfs_mime_extensions_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_extensions_list_free(list);
@@ -205,8 +205,8 @@ public static final void gnome_vfs_mime_extensions_list_free(int /*long*/ list)
 	}
 }
 /** @param mimeType cast=(const char *) */
-public static final native int /*long*/ _gnome_vfs_mime_get_default_application(byte[] mimeType);
-public static final int /*long*/ gnome_vfs_mime_get_default_application(byte[] mimeType) {
+public static final native long /*int*/ _gnome_vfs_mime_get_default_application(byte[] mimeType);
+public static final long /*int*/ gnome_vfs_mime_get_default_application(byte[] mimeType) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_get_default_application(mimeType);
@@ -215,8 +215,8 @@ public static final int /*long*/ gnome_vfs_mime_get_default_application(byte[] m
 	}
 }
 /** @param mime_type cast=(const char *) */
-public static final native int /*long*/ _gnome_vfs_mime_get_extensions_list(int /*long*/ mime_type);
-public static final int /*long*/ gnome_vfs_mime_get_extensions_list(int /*long*/ mime_type) {
+public static final native long /*int*/ _gnome_vfs_mime_get_extensions_list(long /*int*/ mime_type);
+public static final long /*int*/ gnome_vfs_mime_get_extensions_list(long /*int*/ mime_type) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_get_extensions_list(mime_type);
@@ -225,8 +225,8 @@ public static final int /*long*/ gnome_vfs_mime_get_extensions_list(int /*long*/
 	}
 }
 /** @param list cast=(GList *) */
-public static final native void _gnome_vfs_mime_registered_mime_type_list_free(int /*long*/ list);
-public static final void gnome_vfs_mime_registered_mime_type_list_free(int /*long*/ list) {
+public static final native void _gnome_vfs_mime_registered_mime_type_list_free(long /*int*/ list);
+public static final void gnome_vfs_mime_registered_mime_type_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_registered_mime_type_list_free(list);
@@ -235,8 +235,8 @@ public static final void gnome_vfs_mime_registered_mime_type_list_free(int /*lon
 	}
 }
 /** @param file cast=(const char *) */
-public static final native int /*long*/ _gnome_vfs_mime_type_from_name(byte[] file);
-public static final int /*long*/ gnome_vfs_mime_type_from_name(byte[] file) {
+public static final native long /*int*/ _gnome_vfs_mime_type_from_name(byte[] file);
+public static final long /*int*/ gnome_vfs_mime_type_from_name(byte[] file) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_type_from_name(file);
@@ -248,8 +248,8 @@ public static final int /*long*/ gnome_vfs_mime_type_from_name(byte[] file) {
  * @method flags=dynamic
  * @param url cast=(const char *)
  */
-public static final native int _gnome_vfs_url_show(int /*long*/ url);
-public static final int gnome_vfs_url_show(int /*long*/ url) {
+public static final native int _gnome_vfs_url_show(long /*int*/ url);
+public static final int gnome_vfs_url_show(long /*int*/ url) {
 	lock.lock();
 	try {
 		return _gnome_vfs_url_show(url);
@@ -262,5 +262,5 @@ public static final int gnome_vfs_url_show(int /*long*/ url) {
  * @param src cast=(const void *)
  * @param count cast=(size_t)
  */
-public static final native void memmove (GnomeVFSMimeApplication dest, int /*long*/ src, int /*long*/ count);
+public static final native void memmove (GnomeVFSMimeApplication dest, long /*int*/ src, long /*int*/ count);
 }
diff --git a/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java b/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java
index 53ab852..7a9c698 100644
--- a/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java
+++ b/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java
@@ -17,17 +17,17 @@ package org.eclipse.swt.internal.gnome;
  
 public class GnomeVFSMimeApplication {
 	/** @field cast=(char *) */
-	public int /*long*/ id;
+	public long /*int*/ id;
 	/** @field cast=(char *) */
-	public int /*long*/ name;
+	public long /*int*/ name;
 	/** @field cast=(char *) */
-	public int /*long*/ command;
+	public long /*int*/ command;
 	/** @field cast=(gboolean) */
 	public boolean can_open_multiple_files;
 	/** @field cast=(GnomeVFSMimeApplicationArgumentType) */
 	public int expects_uris;
 	/** @field cast=(GList *) */
-	public int /*long*/ supported_uri_schemes;
+	public long /*int*/ supported_uri_schemes;
 	/** @field cast=(gboolean) */
 	public boolean requires_terminal;
 	public static final int sizeof = GNOME.GnomeVFSMimeApplication_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/GInterfaceInfo.java b/org/eclipse/swt/internal/gtk/GInterfaceInfo.java
index 6e5b746..3d55333 100644
--- a/org/eclipse/swt/internal/gtk/GInterfaceInfo.java
+++ b/org/eclipse/swt/internal/gtk/GInterfaceInfo.java
@@ -17,10 +17,10 @@ package org.eclipse.swt.internal.gtk;
 
 public class GInterfaceInfo {
 	/** @field cast=(GInterfaceInitFunc) */
-	public int /*long*/ interface_init;
+	public long /*int*/ interface_init;
 	/** @field cast=(GInterfaceFinalizeFunc) */
-	public int /*long*/ interface_finalize;
+	public long /*int*/ interface_finalize;
 	/** @field cast=(gpointer) */
-	public int /*long*/ interface_data;
+	public long /*int*/ interface_data;
 	public static final int sizeof = OS.GInterfaceInfo_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/GObjectClass.java b/org/eclipse/swt/internal/gtk/GObjectClass.java
index 649eba2..84a3f06 100644
--- a/org/eclipse/swt/internal/gtk/GObjectClass.java
+++ b/org/eclipse/swt/internal/gtk/GObjectClass.java
@@ -17,17 +17,17 @@ package org.eclipse.swt.internal.gtk;
 
 public class GObjectClass {
 	/** @field cast=(GObject *(*)()) */
-	public int /*long*/ constructor;
+	public long /*int*/ constructor;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ set_property;
+	public long /*int*/ set_property;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ get_property;
+	public long /*int*/ get_property;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ dispose;
+	public long /*int*/ dispose;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ finalize;
+	public long /*int*/ finalize;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ dispatch_properties_changed;
+	public long /*int*/ dispatch_properties_changed;
 	/** @field cast=(void (*)()) */
-	public int /*long*/ notify;
+	public long /*int*/ notify;
 }
diff --git a/org/eclipse/swt/internal/gtk/GTypeInfo.java b/org/eclipse/swt/internal/gtk/GTypeInfo.java
index 645454e..4dbd0a7 100644
--- a/org/eclipse/swt/internal/gtk/GTypeInfo.java
+++ b/org/eclipse/swt/internal/gtk/GTypeInfo.java
@@ -19,22 +19,22 @@ public class GTypeInfo {
 	/** @field cast=(guint16) */
 	public short class_size;
 	/** @field cast=(GBaseInitFunc) */
-	public int /*long*/ base_init;
+	public long /*int*/ base_init;
 	/** @field cast=(GBaseFinalizeFunc) */
-	public int /*long*/ base_finalize;
+	public long /*int*/ base_finalize;
 	/** @field cast=(GClassInitFunc) */
-	public int /*long*/ class_init;
+	public long /*int*/ class_init;
 	/** @field cast=(GClassFinalizeFunc) */
-	public int /*long*/ class_finalize;
+	public long /*int*/ class_finalize;
 	/** @field cast=(gconstpointer) */
-	public int /*long*/ class_data;
+	public long /*int*/ class_data;
 	/** @field cast=(guint16) */
 	public short instance_size;
 	/** @field cast=(guint16) */
 	public short n_preallocs;
 	/** @field cast=(GInstanceInitFunc) */
-	public int /*long*/ instance_init;
+	public long /*int*/ instance_init;
 	/** @field cast=(GTypeValueTable *) */
-	public int /*long*/ value_table;
+	public long /*int*/ value_table;
 	public static final int sizeof = OS.GTypeInfo_sizeof();	
 }
diff --git a/org/eclipse/swt/internal/gtk/GTypeQuery.java b/org/eclipse/swt/internal/gtk/GTypeQuery.java
index 56d24af..c0f5c6d 100644
--- a/org/eclipse/swt/internal/gtk/GTypeQuery.java
+++ b/org/eclipse/swt/internal/gtk/GTypeQuery.java
@@ -19,7 +19,7 @@ public class GTypeQuery {
 	/** @field cast=(GType) */
 	public int type;
 	/** @field cast=(const gchar *) */
-	public int /*long*/ type_name;
+	public long /*int*/ type_name;
 	/** @field cast=(guint) */
 	public int class_size;
 	/** @field cast=(guint) */
diff --git a/org/eclipse/swt/internal/gtk/GdkDragContext.java b/org/eclipse/swt/internal/gtk/GdkDragContext.java
index 912bd5f..3305c56 100644
--- a/org/eclipse/swt/internal/gtk/GdkDragContext.java
+++ b/org/eclipse/swt/internal/gtk/GdkDragContext.java
@@ -21,11 +21,11 @@ public class GdkDragContext {
    /** @field cast=(gboolean) */
 	public boolean is_source;
    /** @field cast=(GdkWindow *) */
-	public int /*long*/ source_window;
+	public long /*int*/ source_window;
    /** @field cast=(GdkWindow *) */
-	public int /*long*/ dest_window;
+	public long /*int*/ dest_window;
    /** @field cast=(GList *) */
-	public int /*long*/ targets;
+	public long /*int*/ targets;
    /** @field cast=(GdkDragAction) */
 	public int actions;
    /** @field cast=(GdkDragAction) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventAny.java b/org/eclipse/swt/internal/gtk/GdkEventAny.java
index 5519285..f88641c 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventAny.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventAny.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventAny extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	public static final int sizeof = OS.GdkEventAny_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/GdkEventButton.java b/org/eclipse/swt/internal/gtk/GdkEventButton.java
index 68a2789..132126e 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventButton.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventButton.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventButton extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(guint32) */
@@ -27,13 +27,13 @@ public class GdkEventButton extends GdkEvent {
 	/** @field cast=(gdouble) */
 	public double y;
 	/** @field cast=(gdouble *) */
-	public int /*long*/ axes;
+	public long /*int*/ axes;
 	/** @field cast=(guint) */
 	public int state;
 	/** @field cast=(guint) */
 	public int button;
 	/** @field cast=(GdkDevice *) */
-	public int /*long*/ device;
+	public long /*int*/ device;
 	/** @field cast=(gdouble) */
 	public double x_root;
 	/** @field cast=(gdouble) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventCrossing.java b/org/eclipse/swt/internal/gtk/GdkEventCrossing.java
index 0c1b40e..7cc3f4e 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventCrossing.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventCrossing.java
@@ -17,11 +17,11 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventCrossing extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ subwindow;
+	public long /*int*/ subwindow;
 	public int time;
 	public double x;
 	public double y;
diff --git a/org/eclipse/swt/internal/gtk/GdkEventExpose.java b/org/eclipse/swt/internal/gtk/GdkEventExpose.java
index df0afac..d54b41d 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventExpose.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventExpose.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventExpose extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field accessor=area.x */
@@ -29,7 +29,7 @@ public class GdkEventExpose extends GdkEvent {
 	/** @field accessor=area.height */
 	public int area_height;
 	/** @field cast=(GdkRegion *) */
-	public int /*long*/ region;
+	public long /*int*/ region;
 	/** @field cast=(gint) */
 	public int count;
 	public static final int sizeof = OS.GdkEventExpose_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/GdkEventFocus.java b/org/eclipse/swt/internal/gtk/GdkEventFocus.java
index 83d66a9..a8f9bdb 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventFocus.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventFocus.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventFocus extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(gint16) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventKey.java b/org/eclipse/swt/internal/gtk/GdkEventKey.java
index 423dc2e..108699a 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventKey.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventKey.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventKey extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(guint32) */
@@ -29,7 +29,7 @@ public class GdkEventKey extends GdkEvent {
 	/** @field cast=(gint) */
 	public int length;
 	/** @field cast=(gchar *) */
-	public int /*long*/ string;
+	public long /*int*/ string;
 	/** @field cast=(guint16) */
 	public short hardware_keycode;
     /** @field cast=(guint8) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventMotion.java b/org/eclipse/swt/internal/gtk/GdkEventMotion.java
index c85069f..651e66d 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventMotion.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventMotion.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventMotion extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(guint32) */
@@ -27,13 +27,13 @@ public class GdkEventMotion extends GdkEvent {
 	/** @field cast=(gdouble) */
 	public double y;
 	/** @field cast=(gdouble *) */
-	public int /*long*/ axes;
+	public long /*int*/ axes;
 	/** @field cast=(guint) */
 	public int state;
 	/** @field cast=(gint16) */
 	public short is_hint;
 	/** @field cast=(GdkDevice *) */
-	public int /*long*/ device;
+	public long /*int*/ device;
 	/** @field cast=(gdouble) */
 	public double x_root;
 	/** @field cast=(gdouble) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventScroll.java b/org/eclipse/swt/internal/gtk/GdkEventScroll.java
index f364cd6..ca84ca0 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventScroll.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventScroll.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventScroll extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event;
 	/** @field cast=(guint32) */
@@ -31,7 +31,7 @@ public class GdkEventScroll extends GdkEvent {
 	/** @field cast=(GdkScrollDirection) */
 	public int direction;
 	/** @field cast=(GdkDevice *) */
-	public int /*long*/ device;
+	public long /*int*/ device;
 	/** @field cast=(gdouble) */
 	public double x_root;
 	/** @field cast=(gdouble) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventVisibility.java b/org/eclipse/swt/internal/gtk/GdkEventVisibility.java
index 3613c17..f5650ac 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventVisibility.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventVisibility.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventVisibility extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(gint8) */
 	public byte send_event; 
 	/** @field cast=(GdkVisibilityState) */
diff --git a/org/eclipse/swt/internal/gtk/GdkEventWindowState.java b/org/eclipse/swt/internal/gtk/GdkEventWindowState.java
index 1a5dfdf..8159249 100644
--- a/org/eclipse/swt/internal/gtk/GdkEventWindowState.java
+++ b/org/eclipse/swt/internal/gtk/GdkEventWindowState.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkEventWindowState extends GdkEvent {
 	/** @field cast=(GdkWindow *) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event; 
 	public int changed_mask;
 	public int new_window_state;
diff --git a/org/eclipse/swt/internal/gtk/GdkGCValues.java b/org/eclipse/swt/internal/gtk/GdkGCValues.java
index b05fc32..0bde74d 100644
--- a/org/eclipse/swt/internal/gtk/GdkGCValues.java
+++ b/org/eclipse/swt/internal/gtk/GdkGCValues.java
@@ -33,17 +33,17 @@ public class GdkGCValues {
 	/** @field accessor=background.blue,cast=(guint16) */
 	public short background_blue;
 	/** @field cast=(GdkFont *) */
-	public int /*long*/ font;
+	public long /*int*/ font;
 	/** @field cast=(GdkFunction) */
-	public int /*long*/ function;
+	public long /*int*/ function;
 	/** @field cast=(GdkFill) */
 	public int fill;
 	/** @field cast=(GdkPixmap *) */
-	public int /*long*/ tile;
+	public long /*int*/ tile;
 	/** @field cast=(GdkPixmap *) */
-	public int /*long*/ stipple;
+	public long /*int*/ stipple;
 	/** @field cast=(GdkPixmap *) */
-	public int /*long*/ clip_mask;
+	public long /*int*/ clip_mask;
 	/** @field cast=(GdkSubwindowMode) */
 	public int subwindow_mode;
 	/** @field cast=(gint) */
diff --git a/org/eclipse/swt/internal/gtk/GdkImage.java b/org/eclipse/swt/internal/gtk/GdkImage.java
index e0dcf54..a994825 100644
--- a/org/eclipse/swt/internal/gtk/GdkImage.java
+++ b/org/eclipse/swt/internal/gtk/GdkImage.java
@@ -19,7 +19,7 @@ public class GdkImage {
 	/** @field cast=(GdkImageType) */
 	public int type;
 	/** @field cast=(GdkVisual *) */
-	public int /*long*/ visual;
+	public long /*int*/ visual;
 	/** @field cast=(GdkByteOrder) */
 	public int byte_order;
 	/** @field cast=(gint) */
@@ -35,9 +35,9 @@ public class GdkImage {
 	/** @field cast=(guint16) */
 	public short bits_per_pixel;
 	/** @field cast=(gpointer) */
-	public int /*long*/ mem;
+	public long /*int*/ mem;
 	/** @field cast=(GdkColormap *) */
-	public int /*long*/ colormap;
+	public long /*int*/ colormap;
 	/** @field cast=(gpointer) */
-	public int /*long*/ windowing_data;
+	public long /*int*/ windowing_data;
 }
diff --git a/org/eclipse/swt/internal/gtk/GdkWindowAttr.java b/org/eclipse/swt/internal/gtk/GdkWindowAttr.java
index 33e9930..3c871ac 100644
--- a/org/eclipse/swt/internal/gtk/GdkWindowAttr.java
+++ b/org/eclipse/swt/internal/gtk/GdkWindowAttr.java
@@ -17,23 +17,23 @@ package org.eclipse.swt.internal.gtk;
 
 public class GdkWindowAttr {
 	/** @field cast=(gchar *) */
-	public int /*long*/ title;
+	public long /*int*/ title;
 	public int event_mask;
 	public int x, y;
 	public int width;
 	public int height;
 	public int wclass;
 	/** @field cast=(GdkVisual *) */
-	public int /*long*/ visual;
+	public long /*int*/ visual;
 	/** @field cast=(GdkColormap *) */
-	public int /*long*/ colormap;
+	public long /*int*/ colormap;
 	public int window_type;
 	/** @field cast=(GdkCursor *) */
-	public int /*long*/ cursor;
+	public long /*int*/ cursor;
 	/** @field cast=(gchar *) */
-	public int /*long*/ wmclass_name;
+	public long /*int*/ wmclass_name;
 	/** @field cast=(gchar *) */
-	public int /*long*/ wmclass_class;
+	public long /*int*/ wmclass_class;
 	public boolean override_redirect;
 	public static final int sizeof = OS.GdkWindowAttr_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java b/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java
index d82483b..f830828 100644
--- a/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java
+++ b/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkCellRendererClass {
 	/** @field cast=(void(*)()) */
-	public int /*long*/ render;
+	public long /*int*/ render;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ get_size;
+	public long /*int*/ get_size;
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java b/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java
index b94ccfa..a9af375 100644
--- a/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java
+++ b/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java
@@ -17,11 +17,11 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkColorSelectionDialog {
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ colorsel;
+	public long /*int*/ colorsel;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ ok_button;
+	public long /*int*/ ok_button;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ cancel_button;
+	public long /*int*/ cancel_button;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ help_button;
+	public long /*int*/ help_button;
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkCombo.java b/org/eclipse/swt/internal/gtk/GtkCombo.java
index d9e4a58..76b0388 100644
--- a/org/eclipse/swt/internal/gtk/GtkCombo.java
+++ b/org/eclipse/swt/internal/gtk/GtkCombo.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkCombo {
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ entry;
+	public long /*int*/ entry;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ list;
+	public long /*int*/ list;
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkFileSelection.java b/org/eclipse/swt/internal/gtk/GtkFileSelection.java
index 8e0d862..7f805ab 100644
--- a/org/eclipse/swt/internal/gtk/GtkFileSelection.java
+++ b/org/eclipse/swt/internal/gtk/GtkFileSelection.java
@@ -17,43 +17,43 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkFileSelection {
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ dir_list;
+	public long /*int*/ dir_list;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ file_list;
+	public long /*int*/ file_list;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ selection_entry;
+	public long /*int*/ selection_entry;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ selection_text;
+	public long /*int*/ selection_text;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ main_vbox;
+	public long /*int*/ main_vbox;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ ok_button;
+	public long /*int*/ ok_button;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ cancel_button;
+	public long /*int*/ cancel_button;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ help_button;
+	public long /*int*/ help_button;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ history_pulldown;
+	public long /*int*/ history_pulldown;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ history_menu;
+	public long /*int*/ history_menu;
 	/** @field cast=(GList *) */
-	public int /*long*/ history_list;
+	public long /*int*/ history_list;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ fileop_dialog;
+	public long /*int*/ fileop_dialog;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ fileop_entry;
+	public long /*int*/ fileop_entry;
 	/** @field cast=(gchar *) */
-	public int /*long*/ fileop_file;
+	public long /*int*/ fileop_file;
 	/** @field cast=(gpointer) */
-	public int /*long*/ cmpl_state;			// gpointer
+	public long /*int*/ cmpl_state;			// gpointer
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ fileop_c_dir;
+	public long /*int*/ fileop_c_dir;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ fileop_del_file;
+	public long /*int*/ fileop_del_file;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ fileop_ren_file;
+	public long /*int*/ fileop_ren_file;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ button_area;
+	public long /*int*/ button_area;
 	/** @field cast=(GtkWidget *) */
-	public int /*long*/ action_area;
+	public long /*int*/ action_area;
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkFixed.java b/org/eclipse/swt/internal/gtk/GtkFixed.java
index 93b1af7..9ca6e7a 100644
--- a/org/eclipse/swt/internal/gtk/GtkFixed.java
+++ b/org/eclipse/swt/internal/gtk/GtkFixed.java
@@ -17,5 +17,5 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkFixed {
 	/** @field cast=(GList *) */
-	public int /*long*/ children;
+	public long /*int*/ children;
 }
diff --git a/org/eclipse/swt/internal/gtk/GtkSelectionData.java b/org/eclipse/swt/internal/gtk/GtkSelectionData.java
index 6c413af..6cc4fcc 100644
--- a/org/eclipse/swt/internal/gtk/GtkSelectionData.java
+++ b/org/eclipse/swt/internal/gtk/GtkSelectionData.java
@@ -17,15 +17,15 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkSelectionData {
 	/** @field cast=(GdkAtom) */
-	public int /*long*/  selection;
+	public long /*int*/  selection;
 	/** @field cast=(GdkAtom) */
-	public int /*long*/  target;
+	public long /*int*/  target;
 	/** @field cast=(GdkAtom) */
-	public int /*long*/  type;
+	public long /*int*/  type;
 	/** @field cast=(gint) */
 	public int  format;
 	/** @field cast=(guchar *) */
-	public int /*long*/  data;  
+	public long /*int*/  data;  
 	/** @field cast=(gint) */
 	public int  length;
 	public static final int sizeof = OS.GtkSelectionData_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/GtkTargetEntry.java b/org/eclipse/swt/internal/gtk/GtkTargetEntry.java
index cf31774..cfc4dff 100644
--- a/org/eclipse/swt/internal/gtk/GtkTargetEntry.java
+++ b/org/eclipse/swt/internal/gtk/GtkTargetEntry.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkTargetEntry {
 	/** @field cast=(gchar *) */
-	public int /*long*/ target;
+	public long /*int*/ target;
 	/** @field cast=(guint) */
 	public int flags;
 	/** @field cast=(guint) */
diff --git a/org/eclipse/swt/internal/gtk/GtkTargetPair.java b/org/eclipse/swt/internal/gtk/GtkTargetPair.java
index c98fb12..beef1cf 100644
--- a/org/eclipse/swt/internal/gtk/GtkTargetPair.java
+++ b/org/eclipse/swt/internal/gtk/GtkTargetPair.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class GtkTargetPair {
 	/** @field cast=(GdkAtom) */
-	public int /*long*/ target;
+	public long /*int*/ target;
 	/** @field cast=(guint) */
 	public int flags;
 	/** @field cast=(guint) */
diff --git a/org/eclipse/swt/internal/gtk/GtkWidgetClass.java b/org/eclipse/swt/internal/gtk/GtkWidgetClass.java
index 691a60f..4de85dc 100644
--- a/org/eclipse/swt/internal/gtk/GtkWidgetClass.java
+++ b/org/eclipse/swt/internal/gtk/GtkWidgetClass.java
@@ -19,127 +19,127 @@ public class GtkWidgetClass extends GObjectClass {
 	public int activate_signal;
 	public int set_scroll_adjustments_signal;	
 	/** @field cast=(void(*)()) */
-	public int /*long*/ dispatch_child_properties_changed;
+	public long /*int*/ dispatch_child_properties_changed;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ show;
+	public long /*int*/ show;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ show_all;
+	public long /*int*/ show_all;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ hide;
+	public long /*int*/ hide;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ hide_all;
+	public long /*int*/ hide_all;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ map;
+	public long /*int*/ map;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ unmap;
+	public long /*int*/ unmap;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ realize;
+	public long /*int*/ realize;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ unrealize;
+	public long /*int*/ unrealize;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ size_request;
+	public long /*int*/ size_request;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ size_allocate;
+	public long /*int*/ size_allocate;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ state_changed; 
+	public long /*int*/ state_changed; 
 	/** @field cast=(void(*)()) */
-	public int /*long*/ parent_set;
+	public long /*int*/ parent_set;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ hierarchy_changed;
+	public long /*int*/ hierarchy_changed;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ style_set;
+	public long /*int*/ style_set;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ direction_changed;
+	public long /*int*/ direction_changed;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ grab_notify;
+	public long /*int*/ grab_notify;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ child_notify;	
+	public long /*int*/ child_notify;	
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ mnemonic_activate;
+	public long /*int*/ mnemonic_activate;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ grab_focus;
+	public long /*int*/ grab_focus;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ focus;
+	public long /*int*/ focus;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ event;
+	public long /*int*/ event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ button_press_event;
+	public long /*int*/ button_press_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ button_release_event;
+	public long /*int*/ button_release_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ scroll_event;
+	public long /*int*/ scroll_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ motion_notify_event;
+	public long /*int*/ motion_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ delete_event;
+	public long /*int*/ delete_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ destroy_event;
+	public long /*int*/ destroy_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ expose_event;
+	public long /*int*/ expose_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ key_press_event;
+	public long /*int*/ key_press_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ key_release_event;
+	public long /*int*/ key_release_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ enter_notify_event;
+	public long /*int*/ enter_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ leave_notify_event;
+	public long /*int*/ leave_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ configure_event;
+	public long /*int*/ configure_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ focus_in_event;
+	public long /*int*/ focus_in_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ focus_out_event;
+	public long /*int*/ focus_out_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ map_event;
+	public long /*int*/ map_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ unmap_event;
+	public long /*int*/ unmap_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ property_notify_event;
+	public long /*int*/ property_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ selection_clear_event;
+	public long /*int*/ selection_clear_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ selection_request_event;
+	public long /*int*/ selection_request_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ selection_notify_event;
+	public long /*int*/ selection_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ proximity_in_event;
+	public long /*int*/ proximity_in_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ proximity_out_event;
+	public long /*int*/ proximity_out_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ visibility_notify_event;
+	public long /*int*/ visibility_notify_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ client_event;
+	public long /*int*/ client_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ no_expose_event;
+	public long /*int*/ no_expose_event;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ window_state_event;
+	public long /*int*/ window_state_event;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ selection_get;
+	public long /*int*/ selection_get;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ selection_received;
+	public long /*int*/ selection_received;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_begin;
+	public long /*int*/ drag_begin;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_end;
+	public long /*int*/ drag_end;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_data_get;
+	public long /*int*/ drag_data_get;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_data_delete;
+	public long /*int*/ drag_data_delete;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_leave;
+	public long /*int*/ drag_leave;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ drag_motion;
+	public long /*int*/ drag_motion;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ drag_drop;
+	public long /*int*/ drag_drop;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ drag_data_received;
+	public long /*int*/ drag_data_received;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ popup_menu;
+	public long /*int*/ popup_menu;
 	/** @field cast=(gboolean(*)()) */
-	public int /*long*/ show_help;
+	public long /*int*/ show_help;
 	/** @field cast=(AtkObject*(*)()) */
-	public int /*long*/ get_accessible;
+	public long /*int*/ get_accessible;
 	/** @field cast=(void(*)()) */
-	public int /*long*/ screen_changed;
+	public long /*int*/ screen_changed;
 }
diff --git a/org/eclipse/swt/internal/gtk/OS.java b/org/eclipse/swt/internal/gtk/OS.java
index 29323e0..e3fd136 100644
--- a/org/eclipse/swt/internal/gtk/OS.java
+++ b/org/eclipse/swt/internal/gtk/OS.java
@@ -591,77 +591,77 @@ public static final native int XExposeEvent_sizeof();
 public static final native int XFocusChangeEvent_sizeof();
 public static final native int XVisibilityEvent_sizeof();
 public static final native int XWindowChanges_sizeof();
-public static final native int /*long*/ localeconv_decimal_point();
+public static final native long /*int*/ localeconv_decimal_point();
 /**
  * @param path cast=(const char *)
  * @param realPath cast=(char *)
  */
-public static final native int /*long*/ realpath(byte[] path, byte[] realPath);
+public static final native long /*int*/ realpath(byte[] path, byte[] realPath);
 
 /** Object private fields accessors */
 
 
 /** @param object_class cast=(GObjectClass *) */
-public static final native int /*long*/ G_OBJECT_CLASS_CONSTRUCTOR(int /*long*/ object_class);
+public static final native long /*int*/ G_OBJECT_CLASS_CONSTRUCTOR(long /*int*/ object_class);
 /** 
  * @param object_class cast=(GObjectClass *)
  * @paramOFF constructor cast=(GObject* (*) (GType, guint, GObjectConstructParam *))
  */
-public static final native void G_OBJECT_CLASS_SET_CONSTRUCTOR(int /*long*/ object_class, int /*long*/ constructor);
+public static final native void G_OBJECT_CLASS_SET_CONSTRUCTOR(long /*int*/ object_class, long /*int*/ constructor);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_HEIGHT(int /*long*/ widget);
+public static final native int GTK_WIDGET_HEIGHT(long /*int*/ widget);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_WIDTH(int /*long*/ widget);
+public static final native int GTK_WIDGET_WIDTH(long /*int*/ widget);
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ GTK_WIDGET_WINDOW(int /*long*/ widget);
+public static final native long /*int*/ GTK_WIDGET_WINDOW(long /*int*/ widget);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_X(int /*long*/ widget);
+public static final native int GTK_WIDGET_X(long /*int*/ widget);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_Y(int /*long*/ widget);
+public static final native int GTK_WIDGET_Y(long /*int*/ widget);
 /** @param widget cast=(GtkScrolledWindow *) */
-public static final native int /*long*/ GTK_SCROLLED_WINDOW_HSCROLLBAR(int /*long*/ widget);
+public static final native long /*int*/ GTK_SCROLLED_WINDOW_HSCROLLBAR(long /*int*/ widget);
 /** @param widget cast=(GtkScrolledWindow *) */
-public static final native int /*long*/ GTK_SCROLLED_WINDOW_VSCROLLBAR(int /*long*/ widget);
+public static final native long /*int*/ GTK_SCROLLED_WINDOW_VSCROLLBAR(long /*int*/ widget);
 /** @param widget cast=(GtkScrolledWindow *) */
-public static final native int GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(int /*long*/ widget);
+public static final native int GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(long /*int*/ widget);
 /**
  * @param acce_label cast=(GtkAccelLabel *)
  * @param string cast=(gchar *)
  */
-public static final native void GTK_ACCEL_LABEL_SET_ACCEL_STRING(int /*long*/ acce_label, int /*long*/ string);
+public static final native void GTK_ACCEL_LABEL_SET_ACCEL_STRING(long /*int*/ acce_label, long /*int*/ string);
 /** @param acce_label cast=(GtkAccelLabel *) */
-public static final native int /*long*/ GTK_ACCEL_LABEL_GET_ACCEL_STRING(int /*long*/ acce_label);
+public static final native long /*int*/ GTK_ACCEL_LABEL_GET_ACCEL_STRING(long /*int*/ acce_label);
 /** @param widget cast=(GtkEntry *) */
-public static final native int /*long*/ GTK_ENTRY_IM_CONTEXT(int /*long*/ widget);
+public static final native long /*int*/ GTK_ENTRY_IM_CONTEXT(long /*int*/ widget);
 /** @param widget cast=(GtkTextView *) */
-public static final native int /*long*/ GTK_TEXTVIEW_IM_CONTEXT(int /*long*/ widget);
+public static final native long /*int*/ GTK_TEXTVIEW_IM_CONTEXT(long /*int*/ widget);
 /** @param widget cast=(GtkTooltips *) */
-public static final native int /*long*/ GTK_TOOLTIPS_TIP_WINDOW(int /*long*/ widget);
+public static final native long /*int*/ GTK_TOOLTIPS_TIP_WINDOW(long /*int*/ widget);
 /**
  * @param widget cast=(GtkTooltips *)
  * @param data cast=(GtkTooltipsData *)
  */
-public static final native void GTK_TOOLTIPS_SET_ACTIVE(int /*long*/ widget, int /*long*/ data);
+public static final native void GTK_TOOLTIPS_SET_ACTIVE(long /*int*/ widget, long /*int*/ data);
 /** @param widget cast=(GtkWidget *) */
-public static final native void GTK_WIDGET_SET_HEIGHT(int /*long*/ widget, int height);
+public static final native void GTK_WIDGET_SET_HEIGHT(long /*int*/ widget, int height);
 /** @param widget cast=(GtkWidget *) */
-public static final native void GTK_WIDGET_SET_WIDTH(int /*long*/ widget, int width);
+public static final native void GTK_WIDGET_SET_WIDTH(long /*int*/ widget, int width);
 /** @param widget cast=(GtkWidget *) */
-public static final native void GTK_WIDGET_SET_X(int /*long*/ widget, int x);
+public static final native void GTK_WIDGET_SET_X(long /*int*/ widget, int x);
 /** @param widget cast=(GtkWidget *) */
-public static final native void GTK_WIDGET_SET_Y(int /*long*/ widget, int y);
+public static final native void GTK_WIDGET_SET_Y(long /*int*/ widget, int y);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_REQUISITION_WIDTH(int /*long*/ widget);
+public static final native int GTK_WIDGET_REQUISITION_WIDTH(long /*int*/ widget);
 /** @param widget cast=(GtkWidget *) */
-public static final native int GTK_WIDGET_REQUISITION_HEIGHT(int /*long*/ widget);
+public static final native int GTK_WIDGET_REQUISITION_HEIGHT(long /*int*/ widget);
 /** @param event cast=(GdkEvent *) */
-public static final native int GDK_EVENT_TYPE(int /*long*/ event);
+public static final native int GDK_EVENT_TYPE(long /*int*/ event);
 /** @param event cast=(GdkEventAny *) */
-public static final native int /*long*/ GDK_EVENT_WINDOW(int /*long*/ event);
+public static final native long /*int*/ GDK_EVENT_WINDOW(long /*int*/ event);
 /** @param xevent cast=(XEvent *) */
-public static final native int X_EVENT_TYPE(int /*long*/ xevent);
+public static final native int X_EVENT_TYPE(long /*int*/ xevent);
 /** @param xevent cast=(XAnyEvent *) */
-public static final native int /*long*/ X_EVENT_WINDOW(int /*long*/ xevent);
+public static final native long /*int*/ X_EVENT_WINDOW(long /*int*/ xevent);
 
 /** X11 Native methods and constants */
 public static final int Above = 0;
@@ -679,7 +679,7 @@ public static final int FocusOut = 10;
 public static final int GraphicsExpose = 13;
 public static final int NoExpose = 14;
 public static final int ExposureMask = 1 << 15;
-public static final int /*long*/ NoEventMask = 0;
+public static final long /*int*/ NoEventMask = 0;
 public static final int NotifyNormal = 0;
 public static final int NotifyGrab = 1;
 public static final int NotifyHint = 1;
@@ -695,8 +695,8 @@ public static final int VisibilityChangeMask = 1 << 16;
 public static final int VisibilityFullyObscured = 2;
 public static final int VisibilityNotify = 15;
 public static final int SYSTEM_TRAY_REQUEST_DOCK = 0;
-public static final native int _Call(int /*long*/ proc, int /*long*/ arg1, int /*long*/ arg2);
-public static final int Call(int /*long*/ proc, int /*long*/ arg1, int /*long*/ arg2) {
+public static final native int _Call(long /*int*/ proc, long /*int*/ arg1, long /*int*/ arg2);
+public static final int Call(long /*int*/ proc, long /*int*/ arg1, long /*int*/ arg2) {
 	lock.lock();
 	try {
 		return _Call(proc, arg1, arg2);
@@ -704,8 +704,8 @@ public static final int Call(int /*long*/ proc, int /*long*/ arg1, int /*long*/
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5, int /*long*/ arg6);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5, int /*long*/ arg6) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5, long /*int*/ arg6);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5, long /*int*/ arg6) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -716,8 +716,8 @@ public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0,
 /** @method flags=no_gen */
 public static final native boolean GDK_WINDOWING_X11();
 /** @param pixmap cast=(GdkPixmap *) */
-public static final native int /*long*/ _GDK_PIXMAP_XID(int /*long*/ pixmap);
-public static final int /*long*/ GDK_PIXMAP_XID(int /*long*/ pixmap) {
+public static final native long /*int*/ _GDK_PIXMAP_XID(long /*int*/ pixmap);
+public static final long /*int*/ GDK_PIXMAP_XID(long /*int*/ pixmap) {
 	lock.lock();
 	try {
 		return _GDK_PIXMAP_XID(pixmap);
@@ -730,8 +730,8 @@ public static final int /*long*/ GDK_PIXMAP_XID(int /*long*/ pixmap) {
  * @param event_mask cast=(long)
  * @param event_return cast=(XEvent *)
  */
-public static final native boolean _XCheckMaskEvent(int /*long*/ display, int /*long*/ event_mask, int /*long*/ event_return);
-public static final boolean XCheckMaskEvent(int /*long*/ display, int /*long*/ event_mask, int /*long*/ event_return) {
+public static final native boolean _XCheckMaskEvent(long /*int*/ display, long /*int*/ event_mask, long /*int*/ event_return);
+public static final boolean XCheckMaskEvent(long /*int*/ display, long /*int*/ event_mask, long /*int*/ event_return) {
 	lock.lock();
 	try {
 		return _XCheckMaskEvent(display, event_mask, event_return);
@@ -745,8 +745,8 @@ public static final boolean XCheckMaskEvent(int /*long*/ display, int /*long*/ e
  * @param event_mask cast=(long)
  * @param event_return cast=(XEvent *)
  */
-public static final native boolean _XCheckWindowEvent(int /*long*/ display, int /*long*/ window, int /*long*/ event_mask, int /*long*/ event_return);
-public static final boolean XCheckWindowEvent(int /*long*/ display, int /*long*/ window, int /*long*/ event_mask, int /*long*/ event_return) {
+public static final native boolean _XCheckWindowEvent(long /*int*/ display, long /*int*/ window, long /*int*/ event_mask, long /*int*/ event_return);
+public static final boolean XCheckWindowEvent(long /*int*/ display, long /*int*/ window, long /*int*/ event_mask, long /*int*/ event_return) {
 	lock.lock();
 	try {
 		return _XCheckWindowEvent(display, window, event_mask, event_return);
@@ -760,8 +760,8 @@ public static final boolean XCheckWindowEvent(int /*long*/ display, int /*long*/
  * @param predicate cast=(Bool (*)())
  * @param arg cast=(XPointer)
  */
-public static final native boolean _XCheckIfEvent(int /*long*/ display, int /*long*/ event_return, int /*long*/ predicate, int /*long*/ arg);
-public static final boolean XCheckIfEvent(int /*long*/ display, int /*long*/ event_return, int /*long*/ predicate, int /*long*/ arg) {
+public static final native boolean _XCheckIfEvent(long /*int*/ display, long /*int*/ event_return, long /*int*/ predicate, long /*int*/ arg);
+public static final boolean XCheckIfEvent(long /*int*/ display, long /*int*/ event_return, long /*int*/ predicate, long /*int*/ arg) {
 	lock.lock();
 	try {
 		return _XCheckIfEvent(display, event_return, predicate, arg);
@@ -770,8 +770,8 @@ public static final boolean XCheckIfEvent(int /*long*/ display, int /*long*/ eve
 	}
 }
 /** @param display cast=(Display *) */
-public static final native int _XDefaultScreen(int /*long*/ display);
-public static final int XDefaultScreen(int /*long*/ display) {
+public static final native int _XDefaultScreen(long /*int*/ display);
+public static final int XDefaultScreen(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _XDefaultScreen(display);
@@ -780,8 +780,8 @@ public static final int XDefaultScreen(int /*long*/ display) {
 	}
 }
 /** @param display cast=(Display *) */
-public static final native int /*long*/ _XDefaultRootWindow(int /*long*/ display);
-public static final int /*long*/ XDefaultRootWindow(int /*long*/ display) {
+public static final native long /*int*/ _XDefaultRootWindow(long /*int*/ display);
+public static final long /*int*/ XDefaultRootWindow(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _XDefaultRootWindow(display);
@@ -790,8 +790,8 @@ public static final int /*long*/ XDefaultRootWindow(int /*long*/ display) {
 	}
 }
 /** @param display cast=(Display *) */
-public static final native void _XFlush(int /*long*/ display);
-public static final void XFlush(int /*long*/ display) {
+public static final native void _XFlush(long /*int*/ display);
+public static final void XFlush(long /*int*/ display) {
 	lock.lock();
 	try {
 		_XFlush(display);
@@ -800,8 +800,8 @@ public static final void XFlush(int /*long*/ display) {
 	}
 }
 /** @param address cast=(void *) */
-public static final native void _XFree(int /*long*/ address);
-public static final void XFree(int /*long*/ address) {
+public static final native void _XFree(long /*int*/ address);
+public static final void XFree(long /*int*/ address) {
 	lock.lock();
 	try {
 		_XFree(address);
@@ -813,8 +813,8 @@ public static final void XFree(int /*long*/ address) {
  * @param display cast=(Display *)
  * @param selection cast=(Atom)
  */
-public static final native int /*long*/ _XGetSelectionOwner(int /*long*/ display, int /*long*/ selection);
-public static final int /*long*/ XGetSelectionOwner(int /*long*/ display, int /*long*/ selection) {
+public static final native long /*int*/ _XGetSelectionOwner(long /*int*/ display, long /*int*/ selection);
+public static final long /*int*/ XGetSelectionOwner(long /*int*/ display, long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _XGetSelectionOwner(display, selection);
@@ -827,8 +827,8 @@ public static final int /*long*/ XGetSelectionOwner(int /*long*/ display, int /*
  * @param name cast=(char *)
  * @param ifExists cast=(Bool)
  */
-public static final native int /*long*/ _XInternAtom(int /*long*/ display, byte[] name, boolean ifExists);
-public static final int /*long*/ XInternAtom(int /*long*/ display, byte[] name, boolean ifExists) {
+public static final native long /*int*/ _XInternAtom(long /*int*/ display, byte[] name, boolean ifExists);
+public static final long /*int*/ XInternAtom(long /*int*/ display, byte[] name, boolean ifExists) {
 	lock.lock();
 	try {
 		return _XInternAtom(display, name, ifExists);
@@ -847,8 +847,8 @@ public static final int /*long*/ XInternAtom(int /*long*/ display, byte[] name,
  * @param win_y_return cast=(int *)
  * @param mask_return cast=(unsigned int *)
  */
-public static final native int _XQueryPointer(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return);
-public static final int XQueryPointer(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return) {
+public static final native int _XQueryPointer(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return);
+public static final int XQueryPointer(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return) {
 	lock.lock();
 	try {
 		return _XQueryPointer(display, w, root_return, child_return, root_x_return, root_y_return, win_x_return, win_y_return, mask_return);
@@ -864,8 +864,8 @@ public static final int XQueryPointer(int /*long*/ display, int /*long*/ w, int
  * @param children_return cast=(Window **)
  * @param nchildren_return cast=(unsigned int *)
  */
-public static final native int _XQueryTree(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] parent_return, int /*long*/[] children_return, int[] nchildren_return);
-public static final int XQueryTree(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] parent_return, int /*long*/[] children_return, int[] nchildren_return) {
+public static final native int _XQueryTree(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] parent_return, long /*int*/[] children_return, int[] nchildren_return);
+public static final int XQueryTree(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] parent_return, long /*int*/[] children_return, int[] nchildren_return) {
 	lock.lock();
 	try {
 		return _XQueryTree(display, w, root_return, parent_return, children_return, nchildren_return);
@@ -877,8 +877,8 @@ public static final int XQueryTree(int /*long*/ display, int /*long*/ w, int /*l
  * @param display cast=(Display *)
  * @param keysym cast=(KeySym)
  */
-public static final native int _XKeysymToKeycode(int /*long*/ display, int /*long*/ keysym);
-public static final int XKeysymToKeycode(int /*long*/ display, int /*long*/ keysym) {
+public static final native int _XKeysymToKeycode(long /*int*/ display, long /*int*/ keysym);
+public static final int XKeysymToKeycode(long /*int*/ display, long /*int*/ keysym) {
 	lock.lock();
 	try {
 		return _XKeysymToKeycode(display, keysym);
@@ -891,8 +891,8 @@ public static final int XKeysymToKeycode(int /*long*/ display, int /*long*/ keys
  * @param window cast=(Window)
  * @param num_prop_return cast=(int *)
  */
-public static final native int /*long*/ _XListProperties(int /*long*/ display, int /*long*/ window, int[] num_prop_return);
-public static final int /*long*/ XListProperties(int /*long*/ display, int /*long*/ window, int[] num_prop_return) {
+public static final native long /*int*/ _XListProperties(long /*int*/ display, long /*int*/ window, int[] num_prop_return);
+public static final long /*int*/ XListProperties(long /*int*/ display, long /*int*/ window, int[] num_prop_return) {
 	lock.lock();
 	try {
 		return _XListProperties(display, window, num_prop_return);
@@ -905,8 +905,8 @@ public static final int /*long*/ XListProperties(int /*long*/ display, int /*lon
  * @param window cast=(Window)
  * @param values flags=no_out
  */
-public static final native int _XReconfigureWMWindow(int /*long*/ display, int /*long*/ window, int screen, int valueMask, XWindowChanges values);
-public static final int XReconfigureWMWindow(int /*long*/ display, int /*long*/ window, int screen, int valueMask, XWindowChanges values) {
+public static final native int _XReconfigureWMWindow(long /*int*/ display, long /*int*/ window, int screen, int valueMask, XWindowChanges values);
+public static final int XReconfigureWMWindow(long /*int*/ display, long /*int*/ window, int screen, int valueMask, XWindowChanges values) {
 	lock.lock();
 	try {
 		return _XReconfigureWMWindow(display, window, screen, valueMask, values);
@@ -919,8 +919,8 @@ public static final int XReconfigureWMWindow(int /*long*/ display, int /*long*/
  * @param w cast=(Window)
  * @param event_send cast=(XEvent *)
  */
-public static final native int _XSendEvent(int /*long*/ display, int /*long*/ w, boolean propogate, int /*long*/ event_mask, int /*long*/ event_send);
-public static final int XSendEvent(int /*long*/ display, int /*long*/ w, boolean propogate, int /*long*/ event_mask, int /*long*/ event_send) {
+public static final native int _XSendEvent(long /*int*/ display, long /*int*/ w, boolean propogate, long /*int*/ event_mask, long /*int*/ event_send);
+public static final int XSendEvent(long /*int*/ display, long /*int*/ w, boolean propogate, long /*int*/ event_mask, long /*int*/ event_send) {
 	lock.lock();
 	try {
 		return _XSendEvent(display, w, propogate, event_mask, event_send);
@@ -929,8 +929,8 @@ public static final int XSendEvent(int /*long*/ display, int /*long*/ w, boolean
 	}
 }
 /** @param handler cast=(XIOErrorHandler) */
-public static final native int /*long*/ _XSetIOErrorHandler(int /*long*/ handler);
-public static final int /*long*/ XSetIOErrorHandler(int /*long*/ handler) {
+public static final native long /*int*/ _XSetIOErrorHandler(long /*int*/ handler);
+public static final long /*int*/ XSetIOErrorHandler(long /*int*/ handler) {
 	lock.lock();
 	try {
 		return _XSetIOErrorHandler(handler);
@@ -939,8 +939,8 @@ public static final int /*long*/ XSetIOErrorHandler(int /*long*/ handler) {
 	}
 }
 /** @param handler cast=(XErrorHandler) */
-public static final native int /*long*/ _XSetErrorHandler(int /*long*/ handler);
-public static final int /*long*/ XSetErrorHandler(int /*long*/ handler) {
+public static final native long /*int*/ _XSetErrorHandler(long /*int*/ handler);
+public static final long /*int*/ XSetErrorHandler(long /*int*/ handler) {
 	lock.lock();
 	try {
 		return _XSetErrorHandler(handler);
@@ -952,8 +952,8 @@ public static final int /*long*/ XSetErrorHandler(int /*long*/ handler) {
  * @param display cast=(Display *)
  * @param window cast=(Window)
  */
-public static final native int _XSetInputFocus(int /*long*/ display, int /*long*/ window, int revert, int time);
-public static final int XSetInputFocus(int /*long*/ display, int /*long*/ window, int revert, int time) {
+public static final native int _XSetInputFocus(long /*int*/ display, long /*int*/ window, int revert, int time);
+public static final int XSetInputFocus(long /*int*/ display, long /*int*/ window, int revert, int time) {
 	lock.lock();
 	try {
 		return _XSetInputFocus(display, window, revert, time);
@@ -966,8 +966,8 @@ public static final int XSetInputFocus(int /*long*/ display, int /*long*/ window
  * @param w cast=(Window)
  * @param prop_window cast=(Window)
  */
-public static final native int _XSetTransientForHint(int /*long*/ display, int /*long*/ w, int /*long*/ prop_window);
-public static final int XSetTransientForHint(int /*long*/ display, int /*long*/ w, int /*long*/ prop_window) {
+public static final native int _XSetTransientForHint(long /*int*/ display, long /*int*/ w, long /*int*/ prop_window);
+public static final int XSetTransientForHint(long /*int*/ display, long /*int*/ w, long /*int*/ prop_window) {
 	lock.lock();
 	try {
 		return _XSetTransientForHint(display, w, prop_window);
@@ -976,8 +976,8 @@ public static final int XSetTransientForHint(int /*long*/ display, int /*long*/
 	}
 }
 /** @param display cast=(Display *) */
-public static final native int /*long*/ _XSynchronize(int /*long*/ display, boolean onoff);
-public static final int /*long*/ XSynchronize(int /*long*/ display, boolean onoff) {
+public static final native long /*int*/ _XSynchronize(long /*int*/ display, boolean onoff);
+public static final long /*int*/ XSynchronize(long /*int*/ display, boolean onoff) {
 	lock.lock();
 	try {
 		return _XSynchronize(display, onoff);
@@ -990,8 +990,8 @@ public static final int /*long*/ XSynchronize(int /*long*/ display, boolean onof
  * @param is_press cast=(Bool)
  * @param delay cast=(unsigned long)
  */
-public static final native void _XTestFakeButtonEvent(int /*long*/ display, int button, boolean is_press, int /*long*/ delay);
-public static final void XTestFakeButtonEvent(int /*long*/ display, int button, boolean is_press, int /*long*/ delay) {
+public static final native void _XTestFakeButtonEvent(long /*int*/ display, int button, boolean is_press, long /*int*/ delay);
+public static final void XTestFakeButtonEvent(long /*int*/ display, int button, boolean is_press, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeButtonEvent(display, button, is_press, delay);
@@ -1004,8 +1004,8 @@ public static final void XTestFakeButtonEvent(int /*long*/ display, int button,
  * @param is_press cast=(Bool)
  * @param delay cast=(unsigned long)
  */
-public static final native void _XTestFakeKeyEvent(int /*long*/ display, int keycode, boolean is_press, int /*long*/ delay);
-public static final void XTestFakeKeyEvent(int /*long*/ display, int keycode, boolean is_press, int /*long*/ delay) {
+public static final native void _XTestFakeKeyEvent(long /*int*/ display, int keycode, boolean is_press, long /*int*/ delay);
+public static final void XTestFakeKeyEvent(long /*int*/ display, int keycode, boolean is_press, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeKeyEvent(display, keycode, is_press, delay);
@@ -1017,8 +1017,8 @@ public static final void XTestFakeKeyEvent(int /*long*/ display, int keycode, bo
  * @param display cast=(Display *)
  * @param delay cast=(unsigned long)
  */
-public static final native void _XTestFakeMotionEvent(int /*long*/ display, int screen_number, int x, int y, int /*long*/ delay);
-public static final void XTestFakeMotionEvent(int /*long*/ display, int screen_number, int x, int y, int /*long*/ delay) {
+public static final native void _XTestFakeMotionEvent(long /*int*/ display, int screen_number, int x, int y, long /*int*/ delay);
+public static final void XTestFakeMotionEvent(long /*int*/ display, int screen_number, int x, int y, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeMotionEvent(display, screen_number, x, y, delay);
@@ -1031,8 +1031,8 @@ public static final void XTestFakeMotionEvent(int /*long*/ display, int screen_n
  * @param sourceWindow cast=(Window)
  * @param destWindow cast=(Window)
  */
-public static final native int _XWarpPointer(int /*long*/ display, int /*long*/ sourceWindow, int /*long*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY);
-public static final int XWarpPointer(int /*long*/ display, int /*long*/ sourceWindow, int /*long*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY) {
+public static final native int _XWarpPointer(long /*int*/ display, long /*int*/ sourceWindow, long /*int*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY);
+public static final int XWarpPointer(long /*int*/ display, long /*int*/ sourceWindow, long /*int*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY) {
 	lock.lock();
 	try {
 		return _XWarpPointer(display, sourceWindow, destWindow, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY);
@@ -1041,8 +1041,8 @@ public static final int XWarpPointer(int /*long*/ display, int /*long*/ sourceWi
 	}
 }
 /** @param atom cast=(GdkAtom) */
-public static final native int /*long*/ _gdk_x11_atom_to_xatom(int /*long*/ atom);
-public static final int /*long*/ gdk_x11_atom_to_xatom(int /*long*/ atom) {
+public static final native long /*int*/ _gdk_x11_atom_to_xatom(long /*int*/ atom);
+public static final long /*int*/ gdk_x11_atom_to_xatom(long /*int*/ atom) {
 	lock.lock();
 	try {
 		return _gdk_x11_atom_to_xatom(atom);
@@ -1051,8 +1051,8 @@ public static final int /*long*/ gdk_x11_atom_to_xatom(int /*long*/ atom) {
 	}
 }
 /** @param colormap cast=(GdkColormap *) */
-public static final native int /*long*/ _gdk_x11_colormap_get_xcolormap(int /*long*/ colormap);
-public static final int /*long*/ gdk_x11_colormap_get_xcolormap(int /*long*/ colormap) {
+public static final native long /*int*/ _gdk_x11_colormap_get_xcolormap(long /*int*/ colormap);
+public static final long /*int*/ gdk_x11_colormap_get_xcolormap(long /*int*/ colormap) {
 	lock.lock();
 	try {
 		return _gdk_x11_colormap_get_xcolormap(colormap);
@@ -1061,8 +1061,8 @@ public static final int /*long*/ gdk_x11_colormap_get_xcolormap(int /*long*/ col
 	}
 }
 /** @param drawable cast=(GdkDrawable *) */
-public static final native int /*long*/ _gdk_x11_drawable_get_xdisplay(int /*long*/ drawable);
-public static final int /*long*/ gdk_x11_drawable_get_xdisplay(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_x11_drawable_get_xdisplay(long /*int*/ drawable);
+public static final long /*int*/ gdk_x11_drawable_get_xdisplay(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_x11_drawable_get_xdisplay(drawable);
@@ -1071,8 +1071,8 @@ public static final int /*long*/ gdk_x11_drawable_get_xdisplay(int /*long*/ draw
 	}
 }
 /** @param drawable cast=(GdkDrawable *) */
-public static final native int /*long*/ _gdk_x11_drawable_get_xid(int /*long*/ drawable);
-public static final int /*long*/ gdk_x11_drawable_get_xid(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_x11_drawable_get_xid(long /*int*/ drawable);
+public static final long /*int*/ gdk_x11_drawable_get_xid(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_x11_drawable_get_xid(drawable);
@@ -1085,8 +1085,8 @@ public static final int /*long*/ gdk_x11_drawable_get_xid(int /*long*/ drawable)
  * @param screen cast=(GdkScreen *)
  * @param xvisualid cast=(VisualID)
  */
-public static final native int /*long*/ _gdk_x11_screen_lookup_visual(int /*long*/ screen, int xvisualid);
-public static final int /*long*/ gdk_x11_screen_lookup_visual(int /*long*/ screen, int xvisualid) {
+public static final native long /*int*/ _gdk_x11_screen_lookup_visual(long /*int*/ screen, int xvisualid);
+public static final long /*int*/ gdk_x11_screen_lookup_visual(long /*int*/ screen, int xvisualid) {
 	lock.lock();
 	try {
 		return _gdk_x11_screen_lookup_visual(screen, xvisualid);
@@ -1098,8 +1098,8 @@ public static final int /*long*/ gdk_x11_screen_lookup_visual(int /*long*/ scree
  * @method flags=dynamic
  * @param screen cast=(GdkScreen *)
  */
-public static final native int /*long*/ _gdk_x11_screen_get_window_manager_name(int /*long*/ screen);
-public static final int /*long*/ gdk_x11_screen_get_window_manager_name(int /*long*/ screen) {	
+public static final native long /*int*/ _gdk_x11_screen_get_window_manager_name(long /*int*/ screen);
+public static final long /*int*/ gdk_x11_screen_get_window_manager_name(long /*int*/ screen) {	
 	lock.lock();
 	try {
 		return _gdk_x11_screen_get_window_manager_name(screen);
@@ -1108,8 +1108,8 @@ public static final int /*long*/ gdk_x11_screen_get_window_manager_name(int /*lo
 	}
 }
 /** @param visual cast=(GdkVisual *) */
-public static final native int /*long*/ _gdk_x11_visual_get_xvisual(int /*long*/ visual);
-public static final int /*long*/ gdk_x11_visual_get_xvisual(int /*long*/ visual) {
+public static final native long /*int*/ _gdk_x11_visual_get_xvisual(long /*int*/ visual);
+public static final long /*int*/ gdk_x11_visual_get_xvisual(long /*int*/ visual) {
 	lock.lock();
 	try {
 		return _gdk_x11_visual_get_xvisual(visual);
@@ -1117,8 +1117,8 @@ public static final int /*long*/ gdk_x11_visual_get_xvisual(int /*long*/ visual)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixmap_foreign_new(int /*long*/ anid);
-public static final int /*long*/ gdk_pixmap_foreign_new(int /*long*/ anid) {
+public static final native long /*int*/ _gdk_pixmap_foreign_new(long /*int*/ anid);
+public static final long /*int*/ gdk_pixmap_foreign_new(long /*int*/ anid) {
 	lock.lock();
 	try {
 		return _gdk_pixmap_foreign_new(anid);
@@ -1126,8 +1126,8 @@ public static final int /*long*/ gdk_pixmap_foreign_new(int /*long*/ anid) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_lookup(int /*long*/ xid);
-public static final int /*long*/ gdk_window_lookup(int /*long*/ xid) {
+public static final native long /*int*/ _gdk_window_lookup(long /*int*/ xid);
+public static final long /*int*/ gdk_window_lookup(long /*int*/ xid) {
 	lock.lock();
 	try {
 		return _gdk_window_lookup(xid);
@@ -1140,8 +1140,8 @@ public static final int /*long*/ gdk_window_lookup(int /*long*/ xid) {
  * @param function cast=(GdkFilterFunc)
  * @param data cast=(gpointer)
  */
-public static final native void _gdk_window_add_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data);
-public static final void gdk_window_add_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data) {
+public static final native void _gdk_window_add_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data);
+public static final void gdk_window_add_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gdk_window_add_filter(window, function, data);
@@ -1154,8 +1154,8 @@ public static final void gdk_window_add_filter(int /*long*/ window, int /*long*/
  * @param function cast=(GdkFilterFunc)
  * @param data cast=(gpointer)
  */
-public static final native void _gdk_window_remove_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data);
-public static final void gdk_window_remove_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data) {
+public static final native void _gdk_window_remove_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data);
+public static final void gdk_window_remove_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gdk_window_remove_filter(window, function, data);
@@ -1168,61 +1168,61 @@ public static final void gdk_window_remove_filter(int /*long*/ window, int /*lon
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, XButtonEvent src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XButtonEvent src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, XClientMessageEvent src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XClientMessageEvent src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, XCrossingEvent src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XCrossingEvent src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, XExposeEvent src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XExposeEvent src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, XFocusChangeEvent src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XFocusChangeEvent src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XButtonEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(XButtonEvent dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XCrossingEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(XCrossingEvent dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XExposeEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(XExposeEvent dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XFocusChangeEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(XFocusChangeEvent dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XVisibilityEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(XVisibilityEvent dest, long /*int*/ src, long /*int*/ size);
 
 /** X render natives and constants */
 public static final int PictStandardARGB32 = 0;
@@ -1235,8 +1235,8 @@ public static final int PictOpOver = 3;
 
 public static final native int XRenderPictureAttributes_sizeof();
 /** @method flags=dynamic */
-public static final native boolean _XRenderQueryExtension(int /*long*/ display, int[] event_basep, int[] error_basep);
-public static final boolean XRenderQueryExtension(int /*long*/ display, int[] event_basep, int[] error_basep) {
+public static final native boolean _XRenderQueryExtension(long /*int*/ display, int[] event_basep, int[] error_basep);
+public static final boolean XRenderQueryExtension(long /*int*/ display, int[] event_basep, int[] error_basep) {
 	lock.lock();
 	try {
 		return _XRenderQueryExtension(display, event_basep, error_basep);
@@ -1245,8 +1245,8 @@ public static final boolean XRenderQueryExtension(int /*long*/ display, int[] ev
 	}
 }
 /** @method flags=dynamic */
-public static final native int _XRenderQueryVersion(int /*long*/ display, int[] major_versionp, int[] minor_versionp);
-public static final int XRenderQueryVersion(int /*long*/ display, int[] major_versionp, int[] minor_versionp) {
+public static final native int _XRenderQueryVersion(long /*int*/ display, int[] major_versionp, int[] minor_versionp);
+public static final int XRenderQueryVersion(long /*int*/ display, int[] major_versionp, int[] minor_versionp) {
 	lock.lock();
 	try {
 		return _XRenderQueryVersion(display, major_versionp, minor_versionp);
@@ -1258,8 +1258,8 @@ public static final int XRenderQueryVersion(int /*long*/ display, int[] major_ve
  * @method flags=dynamic
  * @param attributes flags=no_out
  */
-public static final native int /*long*/ _XRenderCreatePicture(int /*long*/ display, int /*long*/ drawable, int /*long*/ format, int /*long*/ valuemask, XRenderPictureAttributes attributes);
-public static final int /*long*/ XRenderCreatePicture(int /*long*/ display, int /*long*/ drawable, int /*long*/ format, int /*long*/ valuemask, XRenderPictureAttributes attributes) {
+public static final native long /*int*/ _XRenderCreatePicture(long /*int*/ display, long /*int*/ drawable, long /*int*/ format, long /*int*/ valuemask, XRenderPictureAttributes attributes);
+public static final long /*int*/ XRenderCreatePicture(long /*int*/ display, long /*int*/ drawable, long /*int*/ format, long /*int*/ valuemask, XRenderPictureAttributes attributes) {
 	lock.lock();
 	try {
 		return _XRenderCreatePicture(display, drawable, format, valuemask, attributes);
@@ -1268,8 +1268,8 @@ public static final int /*long*/ XRenderCreatePicture(int /*long*/ display, int
 	}
 }
 /** @method flags=dynamic */
-public static final native void _XRenderSetPictureClipRectangles(int /*long*/ display, int /*long*/ picture, int xOrigin, int yOrigin, short[] rects, int count);
-public static final void XRenderSetPictureClipRectangles(int /*long*/ display, int /*long*/ picture, int xOrigin, int yOrigin, short[] rects, int count) {
+public static final native void _XRenderSetPictureClipRectangles(long /*int*/ display, long /*int*/ picture, int xOrigin, int yOrigin, short[] rects, int count);
+public static final void XRenderSetPictureClipRectangles(long /*int*/ display, long /*int*/ picture, int xOrigin, int yOrigin, short[] rects, int count) {
 	lock.lock();
 	try {
 		_XRenderSetPictureClipRectangles(display, picture, xOrigin, yOrigin, rects, count);
@@ -1278,8 +1278,8 @@ public static final void XRenderSetPictureClipRectangles(int /*long*/ display, i
 	}
 }
 /** @method flags=dynamic */
-public static final native void _XRenderSetPictureTransform(int /*long*/ display, int /*long*/ picture, int[] transform);
-public static final void XRenderSetPictureTransform(int /*long*/ display, int /*long*/ picture, int[] transform) {
+public static final native void _XRenderSetPictureTransform(long /*int*/ display, long /*int*/ picture, int[] transform);
+public static final void XRenderSetPictureTransform(long /*int*/ display, long /*int*/ picture, int[] transform) {
 	lock.lock();
 	try {
 		_XRenderSetPictureTransform(display, picture, transform);
@@ -1288,8 +1288,8 @@ public static final void XRenderSetPictureTransform(int /*long*/ display, int /*
 	}
 }
 /** @method flags=dynamic */
-public static final native void _XRenderFreePicture(int /*long*/ display, int /*long*/ picture);
-public static final void XRenderFreePicture(int /*long*/ display, int /*long*/ picture) {
+public static final native void _XRenderFreePicture(long /*int*/ display, long /*int*/ picture);
+public static final void XRenderFreePicture(long /*int*/ display, long /*int*/ picture) {
 	lock.lock();
 	try {
 		_XRenderFreePicture(display, picture);
@@ -1298,8 +1298,8 @@ public static final void XRenderFreePicture(int /*long*/ display, int /*long*/ p
 	}
 }
 /** @method flags=dynamic */
-public static final native void _XRenderComposite(int /*long*/ display, int op, int /*long*/ src, int /*long*/ mask, int /*long*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height);
-public static final void XRenderComposite(int /*long*/ display, int op, int /*long*/ src, int /*long*/ mask, int /*long*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height) {
+public static final native void _XRenderComposite(long /*int*/ display, int op, long /*int*/ src, long /*int*/ mask, long /*int*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height);
+public static final void XRenderComposite(long /*int*/ display, int op, long /*int*/ src, long /*int*/ mask, long /*int*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height) {
 	lock.lock();
 	try {
 		_XRenderComposite(display, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height);
@@ -1308,8 +1308,8 @@ public static final void XRenderComposite(int /*long*/ display, int op, int /*lo
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _XRenderFindStandardFormat(int /*long*/ display, int format);
-public static final int /*long*/ XRenderFindStandardFormat(int /*long*/ display, int format) {
+public static final native long /*int*/ _XRenderFindStandardFormat(long /*int*/ display, int format);
+public static final long /*int*/ XRenderFindStandardFormat(long /*int*/ display, int format) {
 	lock.lock();
 	try {
 		return _XRenderFindStandardFormat(display, format);
@@ -1318,8 +1318,8 @@ public static final int /*long*/ XRenderFindStandardFormat(int /*long*/ display,
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _XRenderFindVisualFormat(int /*long*/ display, int /*long*/ visual);
-public static final int /*long*/ XRenderFindVisualFormat(int /*long*/ display, int /*long*/ visual) {
+public static final native long /*int*/ _XRenderFindVisualFormat(long /*int*/ display, long /*int*/ visual);
+public static final long /*int*/ XRenderFindVisualFormat(long /*int*/ display, long /*int*/ visual) {
 	lock.lock();
 	try {
 		return _XRenderFindVisualFormat(display, visual);
@@ -1329,10 +1329,10 @@ public static final int /*long*/ XRenderFindVisualFormat(int /*long*/ display, i
 }
 
 /** Natives */
-public static final native int Call (int /*long*/ func, int /*long*/ arg0, int arg1, int arg2);
-public static final native long Call (int /*long*/ func, int /*long*/ arg0, int arg1, long arg2);
-public static final native int /*long*/ _GDK_DISPLAY();
-public static final int /*long*/ GDK_DISPLAY() {
+public static final native int Call (long /*int*/ func, long /*int*/ arg0, int arg1, int arg2);
+public static final native long Call (long /*int*/ func, long /*int*/ arg0, int arg1, long arg2);
+public static final native long /*int*/ _GDK_DISPLAY();
+public static final long /*int*/ GDK_DISPLAY() {
 	lock.lock();
 	try {
 		return _GDK_DISPLAY();
@@ -1340,8 +1340,8 @@ public static final int /*long*/ GDK_DISPLAY() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GDK_ROOT_PARENT();
-public static final int /*long*/ GDK_ROOT_PARENT() {
+public static final native long /*int*/ _GDK_ROOT_PARENT();
+public static final long /*int*/ GDK_ROOT_PARENT() {
 	lock.lock();
 	try {
 		return _GDK_ROOT_PARENT();
@@ -1350,8 +1350,8 @@ public static final int /*long*/ GDK_ROOT_PARENT() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GDK_TYPE_COLOR();
-public static final int /*long*/ GDK_TYPE_COLOR() {
+public static final native long /*int*/ _GDK_TYPE_COLOR();
+public static final long /*int*/ GDK_TYPE_COLOR() {
 	lock.lock();
 	try {
 		return _GDK_TYPE_COLOR();
@@ -1360,8 +1360,8 @@ public static final int /*long*/ GDK_TYPE_COLOR() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GDK_TYPE_PIXBUF();
-public static final int /*long*/ GDK_TYPE_PIXBUF() {
+public static final native long /*int*/ _GDK_TYPE_PIXBUF();
+public static final long /*int*/ GDK_TYPE_PIXBUF() {
 	lock.lock();
 	try {
 		return _GDK_TYPE_PIXBUF();
@@ -1369,8 +1369,8 @@ public static final int /*long*/ GDK_TYPE_PIXBUF() {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_BUTTON(int /*long*/ obj);
-public static final boolean GTK_IS_BUTTON(int /*long*/ obj) {
+public static final native boolean _GTK_IS_BUTTON(long /*int*/ obj);
+public static final boolean GTK_IS_BUTTON(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_BUTTON(obj);
@@ -1378,8 +1378,8 @@ public static final boolean GTK_IS_BUTTON(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_WINDOW(int /*long*/ obj);
-public static final boolean GTK_IS_WINDOW(int /*long*/ obj) {
+public static final native boolean _GTK_IS_WINDOW(long /*int*/ obj);
+public static final boolean GTK_IS_WINDOW(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_WINDOW(obj);
@@ -1387,8 +1387,8 @@ public static final boolean GTK_IS_WINDOW(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_PIXBUF(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_PIXBUF(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_PIXBUF(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_PIXBUF(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_PIXBUF(obj);
@@ -1396,8 +1396,8 @@ public static final boolean GTK_IS_CELL_RENDERER_PIXBUF(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_TEXT(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_TEXT(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_TEXT(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_TEXT(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_TEXT(obj);
@@ -1405,8 +1405,8 @@ public static final boolean GTK_IS_CELL_RENDERER_TEXT(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_TOGGLE(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_TOGGLE(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_TOGGLE(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_TOGGLE(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_TOGGLE(obj);
@@ -1414,8 +1414,8 @@ public static final boolean GTK_IS_CELL_RENDERER_TOGGLE(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CONTAINER(int /*long*/ obj);
-public static final boolean GTK_IS_CONTAINER(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CONTAINER(long /*int*/ obj);
+public static final boolean GTK_IS_CONTAINER(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CONTAINER(obj);
@@ -1423,8 +1423,8 @@ public static final boolean GTK_IS_CONTAINER(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_IMAGE_MENU_ITEM(int /*long*/ obj);
-public static final boolean GTK_IS_IMAGE_MENU_ITEM(int /*long*/ obj) {
+public static final native boolean _GTK_IS_IMAGE_MENU_ITEM(long /*int*/ obj);
+public static final boolean GTK_IS_IMAGE_MENU_ITEM(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_IMAGE_MENU_ITEM(obj);
@@ -1432,8 +1432,8 @@ public static final boolean GTK_IS_IMAGE_MENU_ITEM(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_MENU_ITEM(int /*long*/ obj);
-public static final boolean GTK_IS_MENU_ITEM(int /*long*/ obj) {
+public static final native boolean _GTK_IS_MENU_ITEM(long /*int*/ obj);
+public static final boolean GTK_IS_MENU_ITEM(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_MENU_ITEM(obj);
@@ -1441,8 +1441,8 @@ public static final boolean GTK_IS_MENU_ITEM(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_PLUG(int /*long*/ obj);
-public static final boolean GTK_IS_PLUG(int /*long*/ obj) {
+public static final native boolean _GTK_IS_PLUG(long /*int*/ obj);
+public static final boolean GTK_IS_PLUG(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_PLUG(obj);
@@ -1450,8 +1450,8 @@ public static final boolean GTK_IS_PLUG(int /*long*/ obj) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_SOCKET(int /*long*/ obj);
-public static final boolean GTK_IS_SOCKET(int /*long*/ obj) {
+public static final native boolean _GTK_IS_SOCKET(long /*int*/ obj);
+public static final boolean GTK_IS_SOCKET(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_SOCKET(obj);
@@ -1460,8 +1460,8 @@ public static final boolean GTK_IS_SOCKET(int /*long*/ obj) {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_STOCK_CANCEL();
-public static final int /*long*/ GTK_STOCK_CANCEL() {
+public static final native long /*int*/ _GTK_STOCK_CANCEL();
+public static final long /*int*/ GTK_STOCK_CANCEL() {
 	lock.lock();
 	try {
 		return _GTK_STOCK_CANCEL();
@@ -1470,8 +1470,8 @@ public static final int /*long*/ GTK_STOCK_CANCEL() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_STOCK_OK();
-public static final int /*long*/ GTK_STOCK_OK() {
+public static final native long /*int*/ _GTK_STOCK_OK();
+public static final long /*int*/ GTK_STOCK_OK() {
 	lock.lock();
 	try {
 		return _GTK_STOCK_OK();
@@ -1480,8 +1480,8 @@ public static final int /*long*/ GTK_STOCK_OK() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_TEXT();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TEXT() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_TEXT();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_TEXT() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_TEXT();
@@ -1490,8 +1490,8 @@ public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TEXT() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_PIXBUF();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_PIXBUF() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_PIXBUF();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_PIXBUF() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_PIXBUF();
@@ -1500,8 +1500,8 @@ public static final int /*long*/ GTK_TYPE_CELL_RENDERER_PIXBUF() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_TOGGLE();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TOGGLE() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_TOGGLE();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_TOGGLE() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_TOGGLE();
@@ -1510,8 +1510,8 @@ public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TOGGLE() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_FIXED();
-public static final int /*long*/ GTK_TYPE_FIXED() {
+public static final native long /*int*/ _GTK_TYPE_FIXED();
+public static final long /*int*/ GTK_TYPE_FIXED() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_FIXED();
@@ -1520,8 +1520,8 @@ public static final int /*long*/ GTK_TYPE_FIXED() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_MENU();
-public static final int /*long*/ GTK_TYPE_MENU() {
+public static final native long /*int*/ _GTK_TYPE_MENU();
+public static final long /*int*/ GTK_TYPE_MENU() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_MENU();
@@ -1530,8 +1530,8 @@ public static final int /*long*/ GTK_TYPE_MENU() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _GTK_TYPE_WIDGET();
-public static final int /*long*/ GTK_TYPE_WIDGET() {
+public static final native long /*int*/ _GTK_TYPE_WIDGET();
+public static final long /*int*/ GTK_TYPE_WIDGET() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_WIDGET();
@@ -1539,8 +1539,8 @@ public static final int /*long*/ GTK_TYPE_WIDGET() {
 		lock.unlock();
 	}
 }
-public static final native int _GTK_WIDGET_FLAGS(int /*long*/ wid);
-public static final int GTK_WIDGET_FLAGS(int /*long*/ wid) {
+public static final native int _GTK_WIDGET_FLAGS(long /*int*/ wid);
+public static final int GTK_WIDGET_FLAGS(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_FLAGS(wid);
@@ -1548,8 +1548,8 @@ public static final int GTK_WIDGET_FLAGS(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native int _GTK_WIDGET_STATE(int /*long*/ wid);
-public static final int GTK_WIDGET_STATE(int /*long*/ wid) {
+public static final native int _GTK_WIDGET_STATE(long /*int*/ wid);
+public static final int GTK_WIDGET_STATE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_STATE(wid);
@@ -1557,8 +1557,8 @@ public static final int GTK_WIDGET_STATE(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_HAS_DEFAULT(int /*long*/ wid);
-public static final boolean GTK_WIDGET_HAS_DEFAULT(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_HAS_DEFAULT(long /*int*/ wid);
+public static final boolean GTK_WIDGET_HAS_DEFAULT(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_HAS_DEFAULT(wid);
@@ -1566,8 +1566,8 @@ public static final boolean GTK_WIDGET_HAS_DEFAULT(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_HAS_FOCUS(int /*long*/ wid);
-public static final boolean GTK_WIDGET_HAS_FOCUS(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_HAS_FOCUS(long /*int*/ wid);
+public static final boolean GTK_WIDGET_HAS_FOCUS(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_HAS_FOCUS(wid);
@@ -1575,8 +1575,8 @@ public static final boolean GTK_WIDGET_HAS_FOCUS(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_IS_SENSITIVE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_IS_SENSITIVE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_IS_SENSITIVE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_IS_SENSITIVE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_IS_SENSITIVE(wid);
@@ -1584,8 +1584,8 @@ public static final boolean GTK_WIDGET_IS_SENSITIVE(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_MAPPED(int /*long*/ wid);
-public static final boolean GTK_WIDGET_MAPPED(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_MAPPED(long /*int*/ wid);
+public static final boolean GTK_WIDGET_MAPPED(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_MAPPED(wid);
@@ -1593,8 +1593,8 @@ public static final boolean GTK_WIDGET_MAPPED(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_SENSITIVE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_SENSITIVE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_SENSITIVE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_SENSITIVE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_SENSITIVE(wid);
@@ -1602,8 +1602,8 @@ public static final boolean GTK_WIDGET_SENSITIVE(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native void _GTK_WIDGET_SET_FLAGS(int /*long*/ wid, int flag);
-public static final void GTK_WIDGET_SET_FLAGS(int /*long*/ wid, int flag) {
+public static final native void _GTK_WIDGET_SET_FLAGS(long /*int*/ wid, int flag);
+public static final void GTK_WIDGET_SET_FLAGS(long /*int*/ wid, int flag) {
 	lock.lock();
 	try {
 		_GTK_WIDGET_SET_FLAGS(wid, flag);
@@ -1611,8 +1611,8 @@ public static final void GTK_WIDGET_SET_FLAGS(int /*long*/ wid, int flag) {
 		lock.unlock();
 	}
 }
-public static final native void _GTK_WIDGET_UNSET_FLAGS(int /*long*/ wid, int flag);
-public static final void GTK_WIDGET_UNSET_FLAGS(int /*long*/ wid, int flag) {
+public static final native void _GTK_WIDGET_UNSET_FLAGS(long /*int*/ wid, int flag);
+public static final void GTK_WIDGET_UNSET_FLAGS(long /*int*/ wid, int flag) {
 	lock.lock();
 	try {
 		_GTK_WIDGET_UNSET_FLAGS(wid, flag);
@@ -1620,8 +1620,8 @@ public static final void GTK_WIDGET_UNSET_FLAGS(int /*long*/ wid, int flag) {
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_VISIBLE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_VISIBLE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_VISIBLE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_VISIBLE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_VISIBLE(wid);
@@ -1629,8 +1629,8 @@ public static final boolean GTK_WIDGET_VISIBLE(int /*long*/ wid) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_CLASS (int /*long*/ klass);
-public static final int /*long*/ G_OBJECT_CLASS (int /*long*/ klass) {
+public static final native long /*int*/ _G_OBJECT_CLASS (long /*int*/ klass);
+public static final long /*int*/ G_OBJECT_CLASS (long /*int*/ klass) {
 	lock.lock();
 	try {
 		return _G_OBJECT_CLASS(klass);
@@ -1638,8 +1638,8 @@ public static final int /*long*/ G_OBJECT_CLASS (int /*long*/ klass) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_GET_CLASS (int /*long*/ object);
-public static final int /*long*/ G_OBJECT_GET_CLASS (int /*long*/ object) {
+public static final native long /*int*/ _G_OBJECT_GET_CLASS (long /*int*/ object);
+public static final long /*int*/ G_OBJECT_GET_CLASS (long /*int*/ object) {
 	lock.lock();
 	try {
 		return _G_OBJECT_GET_CLASS(object);
@@ -1647,8 +1647,8 @@ public static final int /*long*/ G_OBJECT_GET_CLASS (int /*long*/ object) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_TYPE_NAME (int /*long*/ object);
-public static final int /*long*/ G_OBJECT_TYPE_NAME (int /*long*/ object) {
+public static final native long /*int*/ _G_OBJECT_TYPE_NAME (long /*int*/ object);
+public static final long /*int*/ G_OBJECT_TYPE_NAME (long /*int*/ object) {
 	lock.lock();
 	try {
 		return _G_OBJECT_TYPE_NAME(object);
@@ -1657,8 +1657,8 @@ public static final int /*long*/ G_OBJECT_TYPE_NAME (int /*long*/ object) {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _G_TYPE_BOOLEAN();
-public static final int /*long*/ G_TYPE_BOOLEAN() {
+public static final native long /*int*/ _G_TYPE_BOOLEAN();
+public static final long /*int*/ G_TYPE_BOOLEAN() {
 	lock.lock();
 	try {
 		return _G_TYPE_BOOLEAN();
@@ -1667,8 +1667,8 @@ public static final int /*long*/ G_TYPE_BOOLEAN() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _G_TYPE_INT();
-public static final int /*long*/ G_TYPE_INT() {
+public static final native long /*int*/ _G_TYPE_INT();
+public static final long /*int*/ G_TYPE_INT() {
 	lock.lock();
 	try {
 		return _G_TYPE_INT();
@@ -1676,8 +1676,8 @@ public static final int /*long*/ G_TYPE_INT() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_TYPE (int /*long*/ instance);
-public static final int /*long*/ G_OBJECT_TYPE (int /*long*/ instance) {
+public static final native long /*int*/ _G_OBJECT_TYPE (long /*int*/ instance);
+public static final long /*int*/ G_OBJECT_TYPE (long /*int*/ instance) {
 	lock.lock();
 	try {
 		return _G_OBJECT_TYPE(instance);
@@ -1686,8 +1686,8 @@ public static final int /*long*/ G_OBJECT_TYPE (int /*long*/ instance) {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _G_TYPE_STRING();
-public static final int /*long*/ G_TYPE_STRING() {
+public static final native long /*int*/ _G_TYPE_STRING();
+public static final long /*int*/ G_TYPE_STRING() {
 	lock.lock();
 	try {
 		return _G_TYPE_STRING();
@@ -1705,8 +1705,8 @@ public static final int PANGO_PIXELS(int dimension) {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _PANGO_TYPE_FONT_DESCRIPTION();
-public static final int /*long*/ PANGO_TYPE_FONT_DESCRIPTION() {
+public static final native long /*int*/ _PANGO_TYPE_FONT_DESCRIPTION();
+public static final long /*int*/ PANGO_TYPE_FONT_DESCRIPTION() {
 	lock.lock();
 	try {
 		return _PANGO_TYPE_FONT_DESCRIPTION();
@@ -1715,8 +1715,8 @@ public static final int /*long*/ PANGO_TYPE_FONT_DESCRIPTION() {
 	}
 }
 /** @method flags=const */
-public static final native int /*long*/ _PANGO_TYPE_LAYOUT();
-public static final int /*long*/ PANGO_TYPE_LAYOUT() {
+public static final native long /*int*/ _PANGO_TYPE_LAYOUT();
+public static final long /*int*/ PANGO_TYPE_LAYOUT() {
 	lock.lock();
 	try {
 		return _PANGO_TYPE_LAYOUT();
@@ -1725,8 +1725,8 @@ public static final int /*long*/ PANGO_TYPE_LAYOUT() {
 	}
 }
 /** @param handle cast=(void *) */
-public static final native int _dlclose(int /*long*/ handle);
-public static final int dlclose(int /*long*/ handle) {
+public static final native int _dlclose(long /*int*/ handle);
+public static final int dlclose(long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _dlclose(handle);
@@ -1735,8 +1735,8 @@ public static final int dlclose(int /*long*/ handle) {
 	}
 }
 /** @param filename cast=(const char *) */
-public static final native int /*long*/ _dlopen(byte[] filename, int flag);
-public static final int /*long*/ dlopen(byte[] filename, int flag) {
+public static final native long /*int*/ _dlopen(byte[] filename, int flag);
+public static final long /*int*/ dlopen(byte[] filename, int flag) {
 	lock.lock();
 	try {
 		return _dlopen(filename, flag);
@@ -1748,8 +1748,8 @@ public static final int /*long*/ dlopen(byte[] filename, int flag) {
  * @param handle cast=(void *)
  * @param symbol cast=(const char *)
  */
-public static final native int /*long*/ _dlsym(int /*long*/ handle, byte[] symbol);
-public static final int /*long*/ dlsym(int /*long*/ handle, byte[] symbol) {
+public static final native long /*int*/ _dlsym(long /*int*/ handle, byte[] symbol);
+public static final long /*int*/ dlsym(long /*int*/ handle, byte[] symbol) {
 	lock.lock();
 	try {
 		return _dlsym(handle, symbol);
@@ -1764,8 +1764,8 @@ public static final int /*long*/ dlsym(int /*long*/ handle, byte[] symbol) {
  * @param hook_data cast=(gpointer)
  * @param data_destroy cast=(GDestroyNotify)
  */
-public static final native int /*long*/ _g_signal_add_emission_hook(int signal_id, int detail, int /*long*/ hook_func, int /*long*/ hook_data, int /*long*/ data_destroy);
-public static final int /*long*/ g_signal_add_emission_hook(int signal_id, int detail, int /*long*/ hook_func, int /*long*/ hook_data, int /*long*/ data_destroy) {
+public static final native long /*int*/ _g_signal_add_emission_hook(int signal_id, int detail, long /*int*/ hook_func, long /*int*/ hook_data, long /*int*/ data_destroy);
+public static final long /*int*/ g_signal_add_emission_hook(int signal_id, int detail, long /*int*/ hook_func, long /*int*/ hook_data, long /*int*/ data_destroy) {
 	lock.lock();
 	try {
 		return _g_signal_add_emission_hook(signal_id, detail, hook_func, hook_data, data_destroy);
@@ -1777,8 +1777,8 @@ public static final int /*long*/ g_signal_add_emission_hook(int signal_id, int d
  * @param signal_id cast=(guint)
  * @param hook_id cast=(gulong)
  */
-public static final native void _g_signal_remove_emission_hook(int signal_id, int /*long*/ hook_id);
-public static final void g_signal_remove_emission_hook(int signal_id, int /*long*/ hook_id) {
+public static final native void _g_signal_remove_emission_hook(int signal_id, long /*int*/ hook_id);
+public static final void g_signal_remove_emission_hook(int signal_id, long /*int*/ hook_id) {
 	lock.lock();
 	try {
 		 _g_signal_remove_emission_hook (signal_id, hook_id);
@@ -1791,8 +1791,8 @@ public static final void g_signal_remove_emission_hook(int signal_id, int /*long
  * @param user_data cast=(gpointer)
  * @param destroy_data cast=(GClosureNotify)
  */
-public static final native int /*long*/ _g_cclosure_new(int /*long*/ callback_func, int /*long*/ user_data, int /*long*/ destroy_data);
-public static final int /*long*/ g_cclosure_new(int /*long*/ callback_func, int /*long*/ user_data, int /*long*/ destroy_data) {
+public static final native long /*int*/ _g_cclosure_new(long /*int*/ callback_func, long /*int*/ user_data, long /*int*/ destroy_data);
+public static final long /*int*/ g_cclosure_new(long /*int*/ callback_func, long /*int*/ user_data, long /*int*/ destroy_data) {
 	lock.lock();
 	try {
 		return _g_cclosure_new(callback_func, user_data, destroy_data);
@@ -1801,8 +1801,8 @@ public static final int /*long*/ g_cclosure_new(int /*long*/ callback_func, int
 	}
 }
 /** @param closure cast=(GClosure *) */
-public static final native int /*long*/ _g_closure_ref(int /*long*/ closure);
-public static final int /*long*/ g_closure_ref(int /*long*/ closure) {
+public static final native long /*int*/ _g_closure_ref(long /*int*/ closure);
+public static final long /*int*/ g_closure_ref(long /*int*/ closure) {
 	lock.lock();
 	try {
 		return _g_closure_ref(closure);
@@ -1811,8 +1811,8 @@ public static final int /*long*/ g_closure_ref(int /*long*/ closure) {
 	}
 }
 /** @param closure cast=(GClosure *) */
-public static final native void _g_closure_unref(int /*long*/ closure);
-public static final void g_closure_unref(int /*long*/ closure) {
+public static final native void _g_closure_unref(long /*int*/ closure);
+public static final void g_closure_unref(long /*int*/ closure) {
 	lock.lock();
 	try {
 		_g_closure_unref(closure);
@@ -1821,8 +1821,8 @@ public static final void g_closure_unref(int /*long*/ closure) {
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native boolean _g_main_context_acquire(int /*long*/ context);
-public static final boolean g_main_context_acquire(int /*long*/ context) {
+public static final native boolean _g_main_context_acquire(long /*int*/ context);
+public static final boolean g_main_context_acquire(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_acquire(context);
@@ -1834,8 +1834,8 @@ public static final boolean g_main_context_acquire(int /*long*/ context) {
  * @param context cast=(GMainContext *)
  * @param fds cast=(GPollFD *)
  */
-public static final native int _g_main_context_check(int /*long*/ context, int max_priority, int /*long*/ fds, int n_fds);
-public static final int g_main_context_check(int /*long*/ context, int max_priority, int /*long*/ fds, int n_fds) {
+public static final native int _g_main_context_check(long /*int*/ context, int max_priority, long /*int*/ fds, int n_fds);
+public static final int g_main_context_check(long /*int*/ context, int max_priority, long /*int*/ fds, int n_fds) {
 	lock.lock();
 	try {
 		return _g_main_context_check(context, max_priority, fds, n_fds);
@@ -1843,8 +1843,8 @@ public static final int g_main_context_check(int /*long*/ context, int max_prior
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_main_context_default();
-public static final int /*long*/ g_main_context_default() {
+public static final native long /*int*/ _g_main_context_default();
+public static final long /*int*/ g_main_context_default() {
 	lock.lock();
 	try {
 		return _g_main_context_default();
@@ -1853,8 +1853,8 @@ public static final int /*long*/ g_main_context_default() {
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native boolean _g_main_context_iteration(int /*long*/ context, boolean may_block);
-public static final boolean g_main_context_iteration(int /*long*/ context, boolean may_block) {
+public static final native boolean _g_main_context_iteration(long /*int*/ context, boolean may_block);
+public static final boolean g_main_context_iteration(long /*int*/ context, boolean may_block) {
 	lock.lock();
 	try {
 		return _g_main_context_iteration(context, may_block);
@@ -1863,8 +1863,8 @@ public static final boolean g_main_context_iteration(int /*long*/ context, boole
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native boolean _g_main_context_pending(int /*long*/ context);
-public static final boolean g_main_context_pending(int /*long*/ context) {
+public static final native boolean _g_main_context_pending(long /*int*/ context);
+public static final boolean g_main_context_pending(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_pending(context);
@@ -1873,8 +1873,8 @@ public static final boolean g_main_context_pending(int /*long*/ context) {
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native int /*long*/ _g_main_context_get_poll_func(int /*long*/ context);
-public static final int /*long*/ g_main_context_get_poll_func(int /*long*/ context) {
+public static final native long /*int*/ _g_main_context_get_poll_func(long /*int*/ context);
+public static final long /*int*/ g_main_context_get_poll_func(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_get_poll_func(context);
@@ -1883,8 +1883,8 @@ public static final int /*long*/ g_main_context_get_poll_func(int /*long*/ conte
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native boolean _g_main_context_prepare(int /*long*/ context, int[] priority);
-public static final boolean g_main_context_prepare(int /*long*/ context, int[] priority) {
+public static final native boolean _g_main_context_prepare(long /*int*/ context, int[] priority);
+public static final boolean g_main_context_prepare(long /*int*/ context, int[] priority) {
 	lock.lock();
 	try {
 		return _g_main_context_prepare(context, priority);
@@ -1896,8 +1896,8 @@ public static final boolean g_main_context_prepare(int /*long*/ context, int[] p
  * @param context cast=(GMainContext *)
  * @param fds cast=(GPollFD *)
  */
-public static final native int _g_main_context_query(int /*long*/ context, int max_priority, int[] timeout_, int /*long*/ fds, int n_fds);
-public static final int g_main_context_query(int /*long*/ context, int max_priority, int[] timeout_, int /*long*/ fds, int n_fds) {
+public static final native int _g_main_context_query(long /*int*/ context, int max_priority, int[] timeout_, long /*int*/ fds, int n_fds);
+public static final int g_main_context_query(long /*int*/ context, int max_priority, int[] timeout_, long /*int*/ fds, int n_fds) {
 	lock.lock();
 	try {
 		return _g_main_context_query(context, max_priority, timeout_, fds, n_fds);
@@ -1906,8 +1906,8 @@ public static final int g_main_context_query(int /*long*/ context, int max_prior
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native void _g_main_context_release(int /*long*/ context);
-public static final void g_main_context_release(int /*long*/ context) {
+public static final native void _g_main_context_release(long /*int*/ context);
+public static final void g_main_context_release(long /*int*/ context) {
 	lock.lock();
 	try {
 		_g_main_context_release(context);
@@ -1916,7 +1916,7 @@ public static final void g_main_context_release(int /*long*/ context) {
 	}
 }
 /** @param context cast=(GMainContext *) */
-public static final native void g_main_context_wakeup(int /*long*/ context);
+public static final native void g_main_context_wakeup(long /*int*/ context);
 /**
  * @param opsysstring cast=(const gchar *)
  * @param len cast=(gssize)
@@ -1924,8 +1924,8 @@ public static final native void g_main_context_wakeup(int /*long*/ context);
  * @param bytes_written cast=(gsize *)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_filename_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_filename_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_filename_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_to_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -1938,8 +1938,8 @@ public static final int /*long*/ g_filename_to_utf8(int /*long*/ opsysstring, in
  * @param hostname cast=(const char *)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_filename_to_uri(int /*long*/ filename, int /*long*/ hostname, int /*long*/[] error);
-public static final int /*long*/ g_filename_to_uri(int /*long*/ filename, int /*long*/ hostname, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_to_uri(long /*int*/ filename, long /*int*/ hostname, long /*int*/[] error);
+public static final long /*int*/ g_filename_to_uri(long /*int*/ filename, long /*int*/ hostname, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_to_uri(filename, hostname, error);
@@ -1954,8 +1954,8 @@ public static final int /*long*/ g_filename_to_uri(int /*long*/ filename, int /*
  * @param bytes_written cast=(gsize *)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_filename_from_utf8(int /*long*/ opsysstring, int /*long*/ len,  int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_filename_from_utf8(int /*long*/ opsysstring, int /*long*/ len,  int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_from_utf8(long /*int*/ opsysstring, long /*int*/ len,  long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_filename_from_utf8(long /*int*/ opsysstring, long /*int*/ len,  long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_from_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -1968,8 +1968,8 @@ public static final int /*long*/ g_filename_from_utf8(int /*long*/ opsysstring,
  * @param hostname cast=(char **)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_filename_from_uri(int /*long*/ uri, int /*long*/[] hostname, int /*long*/[] error);
-public static final int /*long*/ g_filename_from_uri(int /*long*/ uri, int /*long*/[] hostname, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_from_uri(long /*int*/ uri, long /*int*/[] hostname, long /*int*/[] error);
+public static final long /*int*/ g_filename_from_uri(long /*int*/ uri, long /*int*/[] hostname, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_from_uri(uri, hostname, error);
@@ -1978,8 +1978,8 @@ public static final int /*long*/ g_filename_from_uri(int /*long*/ uri, int /*lon
 	}
 }
 /** @param mem cast=(gpointer) */
-public static final native void _g_free(int /*long*/ mem);
-public static final void g_free(int /*long*/ mem) {
+public static final native void _g_free(long /*int*/ mem);
+public static final void g_free(long /*int*/ mem) {
 	lock.lock();
 	try {
 		_g_free(mem);
@@ -1991,8 +1991,8 @@ public static final void g_free(int /*long*/ mem) {
  * @param function cast=(GSourceFunc)
  * @param data cast=(gpointer)
  */
-public static final native int _g_idle_add(int /*long*/ function, int /*long*/ data);
-public static final int g_idle_add(int /*long*/ function, int /*long*/ data) {
+public static final native int _g_idle_add(long /*int*/ function, long /*int*/ data);
+public static final int g_idle_add(long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_idle_add(function, data);
@@ -2004,8 +2004,8 @@ public static final int g_idle_add(int /*long*/ function, int /*long*/ data) {
  * @param list cast=(GList *)
  * @param data cast=(gpointer)
  */
-public static final native int /*long*/ _g_list_append(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_append(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_append(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_append(list, data);
@@ -2014,8 +2014,8 @@ public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ d
 	}
 }
 /** @param list cast=(GList *) */
-public static final native int /*long*/ _g_list_data(int /*long*/ list);
-public static final int /*long*/ g_list_data(int /*long*/ list) {
+public static final native long /*int*/ _g_list_data(long /*int*/ list);
+public static final long /*int*/ g_list_data(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_data(list);
@@ -2024,8 +2024,8 @@ public static final int /*long*/ g_list_data(int /*long*/ list) {
 	}
 }
 /** @param list cast=(GList *) */
-public static final native void _g_list_free(int /*long*/ list);
-public static final void g_list_free(int /*long*/ list) {
+public static final native void _g_list_free(long /*int*/ list);
+public static final void g_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free(list);
@@ -2034,8 +2034,8 @@ public static final void g_list_free(int /*long*/ list) {
 	}
 }
 /** @param list cast=(GList *) */
-public static final native void _g_list_free_1(int /*long*/ list);
-public static final void g_list_free_1(int /*long*/ list) {
+public static final native void _g_list_free_1(long /*int*/ list);
+public static final void g_list_free_1(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free_1(list);
@@ -2044,8 +2044,8 @@ public static final void g_list_free_1(int /*long*/ list) {
 	}
 }
 /** @param list cast=(GList *) */
-public static final native int _g_list_length(int /*long*/ list);
-public static final int g_list_length(int /*long*/ list) {
+public static final native int _g_list_length(long /*int*/ list);
+public static final int g_list_length(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_length(list);
@@ -2057,8 +2057,8 @@ public static final int g_list_length(int /*long*/ list) {
  * @param list cast=(GList *)
  * @param llist cast=(GList *)
  */
-public static final native void _g_list_set_next(int /*long*/ list, int /*long*/ llist);
-public static final void g_list_set_next(int /*long*/ list, int /*long*/ llist) {
+public static final native void _g_list_set_next(long /*int*/ list, long /*int*/ llist);
+public static final void g_list_set_next(long /*int*/ list, long /*int*/ llist) {
 	lock.lock();
 	try {
 		_g_list_set_next(list, llist);
@@ -2066,8 +2066,8 @@ public static final void g_list_set_next(int /*long*/ list, int /*long*/ llist)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_next(int /*long*/ list);
-public static final int /*long*/ g_list_next(int /*long*/ list) {
+public static final native long /*int*/ _g_list_next(long /*int*/ list);
+public static final long /*int*/ g_list_next(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_next(list);
@@ -2079,8 +2079,8 @@ public static final int /*long*/ g_list_next(int /*long*/ list) {
  * @param list cast=(GList *)
  * @param n cast=(guint)
  */
-public static final native int /*long*/ _g_list_nth(int /*long*/ list, int n);
-public static final int /*long*/ g_list_nth(int /*long*/ list, int n) {
+public static final native long /*int*/ _g_list_nth(long /*int*/ list, int n);
+public static final long /*int*/ g_list_nth(long /*int*/ list, int n) {
 	lock.lock();
 	try {
 		return _g_list_nth(list, n);
@@ -2092,8 +2092,8 @@ public static final int /*long*/ g_list_nth(int /*long*/ list, int n) {
  * @param list cast=(GList *)
  * @param n cast=(guint)
  */
-public static final native int /*long*/ _g_list_nth_data(int /*long*/ list, int n);
-public static final int /*long*/ g_list_nth_data(int /*long*/ list, int n) {
+public static final native long /*int*/ _g_list_nth_data(long /*int*/ list, int n);
+public static final long /*int*/ g_list_nth_data(long /*int*/ list, int n) {
 	lock.lock();
 	try {
 		return _g_list_nth_data(list, n);
@@ -2105,8 +2105,8 @@ public static final int /*long*/ g_list_nth_data(int /*long*/ list, int n) {
  * @param list cast=(GList *)
  * @param data cast=(gpointer)
  */
-public static final native int /*long*/ _g_list_prepend(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_prepend(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_prepend(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_prepend(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_prepend(list, data);
@@ -2118,8 +2118,8 @@ public static final int /*long*/ g_list_prepend(int /*long*/ list, int /*long*/
  * @param list cast=(GList *)
  * @param llist cast=(GList *)
  */
-public static final native void _g_list_set_previous(int /*long*/ list, int /*long*/ llist);
-public static final void g_list_set_previous(int /*long*/ list, int /*long*/ llist) {
+public static final native void _g_list_set_previous(long /*int*/ list, long /*int*/ llist);
+public static final void g_list_set_previous(long /*int*/ list, long /*int*/ llist) {
 	lock.lock();
 	try {
 		_g_list_set_previous(list, llist);
@@ -2127,8 +2127,8 @@ public static final void g_list_set_previous(int /*long*/ list, int /*long*/ lli
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_previous(int /*long*/ list);
-public static final int /*long*/ g_list_previous(int /*long*/ list) {
+public static final native long /*int*/ _g_list_previous(long /*int*/ list);
+public static final long /*int*/ g_list_previous(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_previous(list);
@@ -2140,8 +2140,8 @@ public static final int /*long*/ g_list_previous(int /*long*/ list) {
  * @param list cast=(GList *)
  * @param link cast=(GList *)
  */
-public static final native int /*long*/ _g_list_remove_link(int /*long*/ list, int /*long*/ link);
-public static final int /*long*/ g_list_remove_link(int /*long*/ list, int /*long*/ link) {
+public static final native long /*int*/ _g_list_remove_link(long /*int*/ list, long /*int*/ link);
+public static final long /*int*/ g_list_remove_link(long /*int*/ list, long /*int*/ link) {
 	lock.lock();
 	try {
 		return _g_list_remove_link(list, link);
@@ -2150,8 +2150,8 @@ public static final int /*long*/ g_list_remove_link(int /*long*/ list, int /*lon
 	}
 }
 /** @param list cast=(GList *) */
-public static final native int /*long*/ _g_list_reverse(int /*long*/ list);
-public static final int /*long*/ g_list_reverse(int /*long*/ list) {
+public static final native long /*int*/ _g_list_reverse(long /*int*/ list);
+public static final long /*int*/ g_list_reverse(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_reverse(list);
@@ -2166,8 +2166,8 @@ public static final int /*long*/ g_list_reverse(int /*long*/ list) {
  * @param bytes_written cast=(gsize *)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_locale_from_utf8(int /*long*/ utf8string, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_locale_from_utf8(int /*long*/ utf8string, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_locale_from_utf8(long /*int*/ utf8string, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_locale_from_utf8(long /*int*/ utf8string, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_locale_from_utf8(utf8string, len, bytes_read, bytes_written, error);
@@ -2182,8 +2182,8 @@ public static final int /*long*/ g_locale_from_utf8(int /*long*/ utf8string, int
  * @param bytes_written cast=(gsize *)
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _g_locale_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_locale_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_locale_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_locale_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_locale_to_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -2197,8 +2197,8 @@ public static final int /*long*/ g_locale_to_utf8(int /*long*/ opsysstring, int
  * @param message cast=(gchar *)
  * @param unused_data cast=(gpointer)
  */
-public static final native void _g_log_default_handler(int /*long*/ log_domain, int log_levels, int /*long*/ message, int /*long*/ unused_data);
-public static final void g_log_default_handler(int /*long*/ log_domain, int log_levels, int /*long*/ message, int /*long*/ unused_data) {
+public static final native void _g_log_default_handler(long /*int*/ log_domain, int log_levels, long /*int*/ message, long /*int*/ unused_data);
+public static final void g_log_default_handler(long /*int*/ log_domain, int log_levels, long /*int*/ message, long /*int*/ unused_data) {
 	lock.lock();
 	try {
 		_g_log_default_handler(log_domain, log_levels, message, unused_data);
@@ -2225,8 +2225,8 @@ public static final void g_log_remove_handler(byte[] log_domain, int handler_id)
  * @param log_func cast=(GLogFunc)
  * @param user_data cast=(gpointer)
  */
-public static final native int _g_log_set_handler(byte[] log_domain, int log_levels, int /*long*/ log_func, int /*long*/ user_data);
-public static final int g_log_set_handler(byte[] log_domain, int log_levels, int /*long*/ log_func, int /*long*/ user_data) {
+public static final native int _g_log_set_handler(byte[] log_domain, int log_levels, long /*int*/ log_func, long /*int*/ user_data);
+public static final int g_log_set_handler(byte[] log_domain, int log_levels, long /*int*/ log_func, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		return _g_log_set_handler(log_domain, log_levels, log_func, user_data);
@@ -2235,8 +2235,8 @@ public static final int g_log_set_handler(byte[] log_domain, int log_levels, int
 	}
 }
 /** @param size cast=(gulong) */
-public static final native int /*long*/ _g_malloc(int /*long*/ size);
-public static final int /*long*/ g_malloc(int /*long*/ size) {
+public static final native long /*int*/ _g_malloc(long /*int*/ size);
+public static final long /*int*/ g_malloc(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _g_malloc(size);
@@ -2249,8 +2249,8 @@ public static final int /*long*/ g_malloc(int /*long*/ size) {
  * @param first_property_name cast=(const gchar *),flags=no_out
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_get(int /*long*/ object, byte[] first_property_name, int[] value, int /*long*/ terminator);
-public static final void g_object_get(int /*long*/ object, byte[] first_property_name, int[] value, int /*long*/ terminator) {
+public static final native void _g_object_get(long /*int*/ object, byte[] first_property_name, int[] value, long /*int*/ terminator);
+public static final void g_object_get(long /*int*/ object, byte[] first_property_name, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_get(object, first_property_name, value, terminator);
@@ -2262,8 +2262,8 @@ public static final void g_object_get(int /*long*/ object, byte[] first_property
  * @param object cast=(GObject *)
  * @param quark cast=(GQuark)
  */
-public static final native int /*long*/ _g_object_get_qdata(int /*long*/ object, int quark);
-public static final int /*long*/ g_object_get_qdata(int /*long*/ object, int quark) {
+public static final native long /*int*/ _g_object_get_qdata(long /*int*/ object, int quark);
+public static final long /*int*/ g_object_get_qdata(long /*int*/ object, int quark) {
 	lock.lock();
 	try {
 		return _g_object_get_qdata(object, quark);
@@ -2275,8 +2275,8 @@ public static final int /*long*/ g_object_get_qdata(int /*long*/ object, int qua
  * @param type cast=(GType)
  * @param first_property_name cast=(const gchar *)
  */
-public static final native int /*long*/ _g_object_new (int /*long*/ type, int /*long*/ first_property_name);
-public static final int /*long*/ g_object_new (int /*long*/ type, int /*long*/ first_property_name) {
+public static final native long /*int*/ _g_object_new (long /*int*/ type, long /*int*/ first_property_name);
+public static final long /*int*/ g_object_new (long /*int*/ type, long /*int*/ first_property_name) {
 	lock.lock();
 	try {
 		return _g_object_new(type, first_property_name);
@@ -2288,8 +2288,8 @@ public static final int /*long*/ g_object_new (int /*long*/ type, int /*long*/ f
  * @param object cast=(GObject *)
  * @param property_name cast=(const gchar *)
  */
-public static final native void _g_object_notify (int /*long*/ object, byte[] property_name);
-public static final void g_object_notify (int /*long*/ object, byte[] property_name) {
+public static final native void _g_object_notify (long /*int*/ object, byte[] property_name);
+public static final void g_object_notify (long /*int*/ object, byte[] property_name) {
 	lock.lock(); 
 	try {
 		_g_object_notify(object, property_name);
@@ -2298,8 +2298,8 @@ public static final void g_object_notify (int /*long*/ object, byte[] property_n
 	}
 }
 /** @param object cast=(gpointer) */
-public static final native int /*long*/ _g_object_ref(int /*long*/ object);
-public static final int /*long*/ g_object_ref(int /*long*/ object) {
+public static final native long /*int*/ _g_object_ref(long /*int*/ object);
+public static final long /*int*/ g_object_ref(long /*int*/ object) {
 	lock.lock();
 	try {
 		return _g_object_ref(object);
@@ -2312,8 +2312,8 @@ public static final int /*long*/ g_object_ref(int /*long*/ object) {
  * @param first_property_name cast=(const gchar *),flags=no_out
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, boolean data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, boolean data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, boolean data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, boolean data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -2326,8 +2326,8 @@ public static final void g_object_set(int /*long*/ object, byte[] first_property
  * @param first_property_name cast=(const gchar *)
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, GdkColor data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, GdkColor data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, GdkColor data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, GdkColor data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -2340,8 +2340,8 @@ public static final void g_object_set(int /*long*/ object, byte[] first_property
  * @param first_property_name cast=(const gchar *),flags=no_out
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, int data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, int data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, int data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, int data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -2354,8 +2354,8 @@ public static final void g_object_set(int /*long*/ object, byte[] first_property
  * @param first_property_name cast=(const gchar *),flags=no_out
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, float data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, float data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, float data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, float data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -2368,8 +2368,8 @@ public static final void g_object_set(int /*long*/ object, byte[] first_property
  * @param first_property_name cast=(const gchar *),flags=no_out
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, long data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, long data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, long data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, long data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -2382,8 +2382,8 @@ public static final void g_object_set(int /*long*/ object, byte[] first_property
  * @param quark cast=(GQuark)
  * @param data cast=(gpointer)
  */
-public static final native void _g_object_set_qdata(int /*long*/ object, int quark, int /*long*/ data);
-public static final void g_object_set_qdata(int /*long*/ object, int quark, int /*long*/ data) {
+public static final native void _g_object_set_qdata(long /*int*/ object, int quark, long /*int*/ data);
+public static final void g_object_set_qdata(long /*int*/ object, int quark, long /*int*/ data) {
 	lock.lock();
 	try {
 		_g_object_set_qdata(object, quark, data);
@@ -2392,8 +2392,8 @@ public static final void g_object_set_qdata(int /*long*/ object, int quark, int
 	}
 }
 /** @param object cast=(gpointer) */
-public static final native void _g_object_unref(int /*long*/ object);
-public static final void g_object_unref(int /*long*/ object) {
+public static final native void _g_object_unref(long /*int*/ object);
+public static final void g_object_unref(long /*int*/ object) {
 	lock.lock();
 	try {
 		_g_object_unref(object);
@@ -2427,8 +2427,8 @@ public static final void g_set_prgname(byte[] prgname) {
  * @param proc cast=(GCallback)
  * @param data cast=(gpointer)
  */
-public static final native int _g_signal_connect(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data);
-public static final int g_signal_connect(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data) {
+public static final native int _g_signal_connect(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data);
+public static final int g_signal_connect(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_connect(instance, detailed_signal, proc, data);
@@ -2442,8 +2442,8 @@ public static final int g_signal_connect(int /*long*/ instance, byte[] detailed_
  * @param closure cast=(GClosure *)
  * @param after cast=(gboolean)
  */
-public static final native int _g_signal_connect_closure(int /*long*/ instance, byte[] detailed_signal, int /*long*/ closure, boolean after);
-public static final int g_signal_connect_closure(int /*long*/ instance, byte[] detailed_signal, int /*long*/ closure, boolean after) {
+public static final native int _g_signal_connect_closure(long /*int*/ instance, byte[] detailed_signal, long /*int*/ closure, boolean after);
+public static final int g_signal_connect_closure(long /*int*/ instance, byte[] detailed_signal, long /*int*/ closure, boolean after) {
 	lock.lock();
 	try {
 		return _g_signal_connect_closure(instance, detailed_signal, closure, after);
@@ -2458,8 +2458,8 @@ public static final int g_signal_connect_closure(int /*long*/ instance, byte[] d
  * @param closure cast=(GClosure *)
  * @param after cast=(gboolean)
  */
-public static final native int _g_signal_connect_closure_by_id(int /*long*/ instance, int signal_id, int detail, int /*long*/ closure, boolean after);
-public static final int g_signal_connect_closure_by_id(int /*long*/ instance, int signal_id, int detail, int /*long*/ closure, boolean after) {
+public static final native int _g_signal_connect_closure_by_id(long /*int*/ instance, int signal_id, int detail, long /*int*/ closure, boolean after);
+public static final int g_signal_connect_closure_by_id(long /*int*/ instance, int signal_id, int detail, long /*int*/ closure, boolean after) {
 	lock.lock();
 	try {
 		return _g_signal_connect_closure_by_id(instance, signal_id, detail, closure, after);
@@ -2473,8 +2473,8 @@ public static final int g_signal_connect_closure_by_id(int /*long*/ instance, in
  * @param proc cast=(GCallback)
  * @param data cast=(gpointer)
  */
-public static final native int _g_signal_connect_after(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data);
-public static final int g_signal_connect_after(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data) {
+public static final native int _g_signal_connect_after(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data);
+public static final int g_signal_connect_after(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_connect_after(instance, detailed_signal, proc, data);
@@ -2486,8 +2486,8 @@ public static final int g_signal_connect_after(int /*long*/ instance, byte[] det
  * @param instance cast=(gpointer)
  * @param detailed_signal cast=(const gchar *),flags=no_out
  */
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal);
@@ -2499,8 +2499,8 @@ public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] det
  * @param instance cast=(gpointer)
  * @param detailed_signal cast=(const gchar *),flags=no_out
  */
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data);
@@ -2512,8 +2512,8 @@ public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] det
  * @param instance cast=(gpointer)
  * @param detailed_signal cast=(const gchar *),flags=no_out
  */
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data1, int /*long*/ data2);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data1, int /*long*/ data2) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data1, long /*int*/ data2);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data1, long /*int*/ data2) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data1, data2);
@@ -2525,8 +2525,8 @@ public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] det
  * @param instance cast=(gpointer)
  * @param detailed_signal cast=(const gchar *),flags=no_out
  */
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, byte [] data);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, byte [] data) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, byte [] data);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, byte [] data) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data);
@@ -2538,8 +2538,8 @@ public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] det
  * @param instance cast=(gpointer)
  * @param handler_id cast=(gulong)
  */
-public static final native void _g_signal_handler_disconnect(int /*long*/ instance, int handler_id);
-public static final void g_signal_handler_disconnect(int /*long*/ instance, int handler_id) {
+public static final native void _g_signal_handler_disconnect(long /*int*/ instance, int handler_id);
+public static final void g_signal_handler_disconnect(long /*int*/ instance, int handler_id) {
 	lock.lock();
 	try {
 		_g_signal_handler_disconnect(instance, handler_id);
@@ -2556,8 +2556,8 @@ public static final void g_signal_handler_disconnect(int /*long*/ instance, int
  * @param func cast=(gpointer)
  * @param data cast=(gpointer)
  */
-public static final native int _g_signal_handlers_block_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_block_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_block_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_block_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_block_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2574,8 +2574,8 @@ public static final int g_signal_handlers_block_matched(int /*long*/ instance, i
  * @param func cast=(gpointer)
  * @param data cast=(gpointer)
  */
-public static final native int _g_signal_handlers_disconnect_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_disconnect_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_disconnect_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_disconnect_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_disconnect_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2592,8 +2592,8 @@ public static final int g_signal_handlers_disconnect_matched(int /*long*/ instan
  * @param func cast=(gpointer)
  * @param data cast=(gpointer)
  */
-public static final native int _g_signal_handlers_unblock_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_unblock_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_unblock_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_unblock_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_unblock_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2602,8 +2602,8 @@ public static final int g_signal_handlers_unblock_matched(int /*long*/ instance,
 	}
 }
 /** @param name cast=(const gchar *),flags=no_out */
-public static final native int _g_signal_lookup (byte[] name, int /*long*/ itype);
-public static final int g_signal_lookup (byte[] name, int /*long*/ itype) {
+public static final native int _g_signal_lookup (byte[] name, long /*int*/ itype);
+public static final int g_signal_lookup (byte[] name, long /*int*/ itype) {
 	lock.lock();
 	try {
 		return _g_signal_lookup(name, itype);
@@ -2615,8 +2615,8 @@ public static final int g_signal_lookup (byte[] name, int /*long*/ itype) {
  * @param instance cast=(gpointer)
  * @param detailed_signal cast=(const gchar *),flags=no_out
  */
-public static final native void _g_signal_stop_emission_by_name(int /*long*/ instance, byte[] detailed_signal);
-public static final void g_signal_stop_emission_by_name(int /*long*/ instance, byte[] detailed_signal) {
+public static final native void _g_signal_stop_emission_by_name(long /*int*/ instance, byte[] detailed_signal);
+public static final void g_signal_stop_emission_by_name(long /*int*/ instance, byte[] detailed_signal) {
 	lock.lock();
 	try {
 		_g_signal_stop_emission_by_name(instance, detailed_signal);
@@ -2625,8 +2625,8 @@ public static final void g_signal_stop_emission_by_name(int /*long*/ instance, b
 	}
 }
 /** @param tag cast=(guint) */
-public static final native boolean /*long*/ _g_source_remove (int /*long*/ tag);
-public static final boolean /*long*/ g_source_remove (int /*long*/ tag) {
+public static final native boolean /*long*/ _g_source_remove (long /*int*/ tag);
+public static final boolean /*long*/ g_source_remove (long /*int*/ tag) {
 	lock.lock();
 	try {
 		return _g_source_remove(tag);
@@ -2635,8 +2635,8 @@ public static final boolean /*long*/ g_source_remove (int /*long*/ tag) {
 	}
 }
 /** @param list cast=(GSList *) */
-public static final native int /*long*/ _g_slist_data (int /*long*/ list);
-public static final int /*long*/ g_slist_data (int /*long*/ list) {
+public static final native long /*int*/ _g_slist_data (long /*int*/ list);
+public static final long /*int*/ g_slist_data (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_data(list);
@@ -2645,8 +2645,8 @@ public static final int /*long*/ g_slist_data (int /*long*/ list) {
 	}
 }
 /** @param list cast=(GSList *) */
-public static final native void _g_slist_free (int /*long*/ list);
-public static final void g_slist_free (int /*long*/ list) {
+public static final native void _g_slist_free (long /*int*/ list);
+public static final void g_slist_free (long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_slist_free(list);
@@ -2655,8 +2655,8 @@ public static final void g_slist_free (int /*long*/ list) {
 	}
 }
 /** @param list cast=(GSList *) */
-public static final native int /*long*/ _g_slist_next (int /*long*/ list);
-public static final int /*long*/ g_slist_next (int /*long*/ list) {
+public static final native long /*int*/ _g_slist_next (long /*int*/ list);
+public static final long /*int*/ g_slist_next (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_next(list);
@@ -2665,8 +2665,8 @@ public static final int /*long*/ g_slist_next (int /*long*/ list) {
 	}
 }
 /** @param list cast=(GSList *) */
-public static final native int _g_slist_length (int /*long*/ list);
-public static final int g_slist_length (int /*long*/ list) {
+public static final native int _g_slist_length (long /*int*/ list);
+public static final int g_slist_length (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_length(list);
@@ -2675,8 +2675,8 @@ public static final int g_slist_length (int /*long*/ list) {
 	}
 }
 /** @param string_array cast=(gchar **) */
-public static final native void _g_strfreev(int /*long*/ string_array);
-public static final void g_strfreev(int /*long*/ string_array) {
+public static final native void _g_strfreev(long /*int*/ string_array);
+public static final void g_strfreev(long /*int*/ string_array) {
 	lock.lock();
 	try {
 		_g_strfreev(string_array);
@@ -2688,8 +2688,8 @@ public static final void g_strfreev(int /*long*/ string_array) {
  * @param str cast=(const gchar *)
  * @param endptr cast=(gchar **)
  */
-public static final native double _g_strtod(int /*long*/ str, int /*long*/[] endptr);
-public static final double g_strtod(int /*long*/ str, int /*long*/[] endptr) {
+public static final native double _g_strtod(long /*int*/ str, long /*int*/[] endptr);
+public static final double g_strtod(long /*int*/ str, long /*int*/[] endptr) {
 	lock.lock();
 	try {
 		return _g_strtod(str, endptr);
@@ -2702,8 +2702,8 @@ public static final double g_strtod(int /*long*/ str, int /*long*/[] endptr) {
  * @param interface_type cast=(GType)
  * @param info cast=(const GInterfaceInfo *)
  */
-public static final native void _g_type_add_interface_static (int /*long*/ instance_type, int /*long*/ interface_type, int /*long*/ info);
-public static final void g_type_add_interface_static (int /*long*/ instance_type, int /*long*/ interface_type, int /*long*/ info) {
+public static final native void _g_type_add_interface_static (long /*int*/ instance_type, long /*int*/ interface_type, long /*int*/ info);
+public static final void g_type_add_interface_static (long /*int*/ instance_type, long /*int*/ interface_type, long /*int*/ info) {
 	lock.lock();
 	try {
 		_g_type_add_interface_static(instance_type, interface_type, info);
@@ -2712,8 +2712,8 @@ public static final void g_type_add_interface_static (int /*long*/ instance_type
 	}
 }
 /** @param g_class cast=(GType) */
-public static final native int /*long*/ _g_type_class_peek (int /*long*/ g_class);
-public static final int /*long*/ g_type_class_peek (int /*long*/ g_class) {
+public static final native long /*int*/ _g_type_class_peek (long /*int*/ g_class);
+public static final long /*int*/ g_type_class_peek (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		return _g_type_class_peek(g_class);
@@ -2722,8 +2722,8 @@ public static final int /*long*/ g_type_class_peek (int /*long*/ g_class) {
 	}
 }
 /** @param g_class cast=(gpointer) */
-public static final native int /*long*/ _g_type_class_peek_parent (int /*long*/ g_class);
-public static final int /*long*/ g_type_class_peek_parent (int /*long*/ g_class) {
+public static final native long /*int*/ _g_type_class_peek_parent (long /*int*/ g_class);
+public static final long /*int*/ g_type_class_peek_parent (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		return _g_type_class_peek_parent(g_class);
@@ -2732,8 +2732,8 @@ public static final int /*long*/ g_type_class_peek_parent (int /*long*/ g_class)
 	}
 }
 /** @param g_class cast=(GType) */
-public static final native int /*long*/ _g_type_class_ref (int /*long*/ g_class);
-public static final int /*long*/ g_type_class_ref (int /*long*/ g_class) {
+public static final native long /*int*/ _g_type_class_ref (long /*int*/ g_class);
+public static final long /*int*/ g_type_class_ref (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		return _g_type_class_ref(g_class);
@@ -2742,8 +2742,8 @@ public static final int /*long*/ g_type_class_ref (int /*long*/ g_class) {
 	}
 }
 /** @param g_class cast=(gpointer) */
-public static final native void _g_type_class_unref (int /*long*/ g_class);
-public static final void g_type_class_unref (int /*long*/ g_class) {
+public static final native void _g_type_class_unref (long /*int*/ g_class);
+public static final void g_type_class_unref (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		_g_type_class_unref(g_class);
@@ -2752,8 +2752,8 @@ public static final void g_type_class_unref (int /*long*/ g_class) {
 	}
 }
 /** @param name cast=(const gchar *) */
-public static final native int /*long*/ _g_type_from_name (byte[] name);
-public static final int /*long*/ g_type_from_name (byte[] name) {
+public static final native long /*int*/ _g_type_from_name (byte[] name);
+public static final long /*int*/ g_type_from_name (byte[] name) {
 	lock.lock();
 	try {
 		return _g_type_from_name(name);
@@ -2762,8 +2762,8 @@ public static final int /*long*/ g_type_from_name (byte[] name) {
 	}
 }
 /** @param iface cast=(gpointer) */
-public static final native int /*long*/ _g_type_interface_peek_parent (int /*long*/ iface);
-public static final int /*long*/ g_type_interface_peek_parent (int /*long*/ iface) {
+public static final native long /*int*/ _g_type_interface_peek_parent (long /*int*/ iface);
+public static final long /*int*/ g_type_interface_peek_parent (long /*int*/ iface) {
 	lock.lock();
 	try {
 		return _g_type_interface_peek_parent(iface);
@@ -2775,8 +2775,8 @@ public static final int /*long*/ g_type_interface_peek_parent (int /*long*/ ifac
  * @param type cast=(GType)
  * @param is_a_type cast=(GType)
  */
-public static final native boolean _g_type_is_a (int /*long*/ type, int /*long*/ is_a_type);
-public static final boolean g_type_is_a (int /*long*/ type, int /*long*/ is_a_type) {
+public static final native boolean _g_type_is_a (long /*int*/ type, long /*int*/ is_a_type);
+public static final boolean g_type_is_a (long /*int*/ type, long /*int*/ is_a_type) {
 	lock.lock();
 	try {
 		return _g_type_is_a(type, is_a_type);
@@ -2785,8 +2785,8 @@ public static final boolean g_type_is_a (int /*long*/ type, int /*long*/ is_a_ty
 	}
 }
 /** @param handle cast=(GType) */
-public static final native int /*long*/ _g_type_name (int /*long*/ handle);
-public static final int /*long*/ g_type_name (int /*long*/ handle) {
+public static final native long /*int*/ _g_type_name (long /*int*/ handle);
+public static final long /*int*/ g_type_name (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _g_type_name(handle);
@@ -2795,8 +2795,8 @@ public static final int /*long*/ g_type_name (int /*long*/ handle) {
 	}
 }
 /** @param type cast=(GType) */
-public static final native int /*long*/ _g_type_parent (int /*long*/ type);
-public static final int /*long*/ g_type_parent (int /*long*/ type) {
+public static final native long /*int*/ _g_type_parent (long /*int*/ type);
+public static final long /*int*/ g_type_parent (long /*int*/ type) {
 	lock.lock();
 	try {
 		return _g_type_parent(type);
@@ -2808,8 +2808,8 @@ public static final int /*long*/ g_type_parent (int /*long*/ type) {
  * @param type cast=(GType)
  * @param query cast=(GTypeQuery *)
  */
-public static final native void _g_type_query (int /*long*/ type, int /*long*/ query);
-public static final void g_type_query (int /*long*/ type, int /*long*/ query) {
+public static final native void _g_type_query (long /*int*/ type, long /*int*/ query);
+public static final void g_type_query (long /*int*/ type, long /*int*/ query) {
 	lock.lock();
 	try {
 		_g_type_query(type, query);
@@ -2823,8 +2823,8 @@ public static final void g_type_query (int /*long*/ type, int /*long*/ query) {
  * @param info cast=(const GTypeInfo *)
  * @param flags cast=(GTypeFlags)
  */
-public static final native int /*long*/ _g_type_register_static (int /*long*/ parent_type, byte[] type_name, int /*long*/ info, int flags);
-public static final int /*long*/ g_type_register_static (int /*long*/ parent_type, byte[] type_name, int /*long*/ info, int flags) {
+public static final native long /*int*/ _g_type_register_static (long /*int*/ parent_type, byte[] type_name, long /*int*/ info, int flags);
+public static final long /*int*/ g_type_register_static (long /*int*/ parent_type, byte[] type_name, long /*int*/ info, int flags) {
 	lock.lock();
 	try {
 		return _g_type_register_static(parent_type, type_name, info, flags);
@@ -2833,8 +2833,8 @@ public static final int /*long*/ g_type_register_static (int /*long*/ parent_typ
 	}
 }
 /** @param vtable cast=(GThreadFunctions *) */
-public static final native void _g_thread_init(int /*long*/ vtable);
-public static final void g_thread_init(int /*long*/ vtable) {
+public static final native void _g_thread_init(long /*int*/ vtable);
+public static final void g_thread_init(long /*int*/ vtable) {
 	lock.lock();
 	try {
 		_g_thread_init(vtable);
@@ -2858,8 +2858,8 @@ public static final boolean g_thread_supported() {
  * @param items_written cast=(glong *),flags=critical
  * @param error cast=(GError **),flags=critical
  */
-public static final native int /*long*/ _g_utf16_to_utf8(char[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf16_to_utf8(char[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf16_to_utf8(char[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf16_to_utf8(char[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf16_to_utf8(str, len, items_read, items_written, error);
@@ -2868,8 +2868,8 @@ public static final int /*long*/ g_utf16_to_utf8(char[] str, int /*long*/ len, i
 	}
 }
 /** @param str cast=(const gchar *) */
-public static final native int /*long*/ _g_utf8_offset_to_pointer(int /*long*/ str, int /*long*/ offset);
-public static final int /*long*/ g_utf8_offset_to_pointer(int /*long*/ str, int /*long*/ offset) {
+public static final native long /*int*/ _g_utf8_offset_to_pointer(long /*int*/ str, long /*int*/ offset);
+public static final long /*int*/ g_utf8_offset_to_pointer(long /*int*/ str, long /*int*/ offset) {
 	lock.lock();
 	try {
 		return _g_utf8_offset_to_pointer(str, offset);
@@ -2881,8 +2881,8 @@ public static final int /*long*/ g_utf8_offset_to_pointer(int /*long*/ str, int
  * @param str cast=(const gchar *)
  * @param pos cast=(const gchar *)
  */
-public static final native int /*long*/ _g_utf8_pointer_to_offset(int /*long*/ str, int /*long*/ pos);
-public static final int /*long*/ g_utf8_pointer_to_offset(int /*long*/ str, int /*long*/ pos) {
+public static final native long /*int*/ _g_utf8_pointer_to_offset(long /*int*/ str, long /*int*/ pos);
+public static final long /*int*/ g_utf8_pointer_to_offset(long /*int*/ str, long /*int*/ pos) {
 	lock.lock();
 	try {
 		return _g_utf8_pointer_to_offset(str, pos);
@@ -2891,8 +2891,8 @@ public static final int /*long*/ g_utf8_pointer_to_offset(int /*long*/ str, int
 	}
 }
 /** @param str cast=(const gchar *) */
-public static final native int /*long*/ _g_utf8_strlen(int /*long*/ str, int /*long*/ max);
-public static final int /*long*/ g_utf8_strlen(int /*long*/ str, int /*long*/ max) {
+public static final native long /*int*/ _g_utf8_strlen(long /*int*/ str, long /*int*/ max);
+public static final long /*int*/ g_utf8_strlen(long /*int*/ str, long /*int*/ max) {
 	lock.lock();
 	try {
 		return _g_utf8_strlen(str, max);
@@ -2907,8 +2907,8 @@ public static final int /*long*/ g_utf8_strlen(int /*long*/ str, int /*long*/ ma
  * @param items_written cast=(glong *),flags=critical
  * @param error cast=(GError **),flags=critical
  */
-public static final native int /*long*/ _g_utf8_to_utf16(byte[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf8_to_utf16(byte[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf8_to_utf16(byte[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf8_to_utf16(byte[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf8_to_utf16(str, len, items_read, items_written, error);
@@ -2923,8 +2923,8 @@ public static final int /*long*/ g_utf8_to_utf16(byte[] str, int /*long*/ len, i
  * @param items_written cast=(glong *),flags=critical
  * @param error cast=(GError **),flags=critical
  */
-public static final native int /*long*/ _g_utf8_to_utf16(int /*long*/ str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf8_to_utf16(int /*long*/ str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf8_to_utf16(long /*int*/ str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf8_to_utf16(long /*int*/ str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf8_to_utf16(str, len, items_read, items_written, error);
@@ -2933,8 +2933,8 @@ public static final int /*long*/ g_utf8_to_utf16(int /*long*/ str, int /*long*/
 	}
 }
 /** @param value cast=(const GValue *) */
-public static final native int /*long*/ _g_value_peek_pointer (int /*long*/ value);
-public static final  int /*long*/ g_value_peek_pointer (int /*long*/ value) {
+public static final native long /*int*/ _g_value_peek_pointer (long /*int*/ value);
+public static final  long /*int*/ g_value_peek_pointer (long /*int*/ value) {
 	lock.lock();
 	try {
 		return _g_value_peek_pointer(value);
@@ -2943,8 +2943,8 @@ public static final  int /*long*/ g_value_peek_pointer (int /*long*/ value) {
 	}
 }
 /** @param atom_name cast=(const gchar *),flags=no_out critical */
-public static final native int /*long*/ _gdk_atom_intern(byte[] atom_name, boolean only_if_exists);
-public static final int /*long*/ gdk_atom_intern(byte[] atom_name, boolean only_if_exists) {
+public static final native long /*int*/ _gdk_atom_intern(byte[] atom_name, boolean only_if_exists);
+public static final long /*int*/ gdk_atom_intern(byte[] atom_name, boolean only_if_exists) {
 	lock.lock();
 	try {
 		return _gdk_atom_intern(atom_name, only_if_exists);
@@ -2953,8 +2953,8 @@ public static final int /*long*/ gdk_atom_intern(byte[] atom_name, boolean only_
 	}
 }
 /** @param atom cast=(GdkAtom) */
-public static final native int /*long*/ _gdk_atom_name(int /*long*/ atom);
-public static final int /*long*/ gdk_atom_name(int /*long*/ atom) {
+public static final native long /*int*/ _gdk_atom_name(long /*int*/ atom);
+public static final long /*int*/ gdk_atom_name(long /*int*/ atom) {
 	lock.lock();
 	try {
 		return _gdk_atom_name(atom);
@@ -2977,8 +2977,8 @@ public static final void gdk_beep() {
  * @param width cast=(gint)
  * @param height cast=(gint)
  */
-public static final native int /*long*/ _gdk_bitmap_create_from_data(int /*long*/ window, byte[] data, int width, int height);
-public static final int /*long*/ gdk_bitmap_create_from_data(int /*long*/ window, byte[] data, int width, int height) {
+public static final native long /*int*/ _gdk_bitmap_create_from_data(long /*int*/ window, byte[] data, int width, int height);
+public static final long /*int*/ gdk_bitmap_create_from_data(long /*int*/ window, byte[] data, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_bitmap_create_from_data(window, data, width, height);
@@ -2987,8 +2987,8 @@ public static final int /*long*/ gdk_bitmap_create_from_data(int /*long*/ window
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gdk_cairo_create(int /*long*/ drawable);
-public static final int /*long*/ gdk_cairo_create(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_cairo_create(long /*int*/ drawable);
+public static final long /*int*/ gdk_cairo_create(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_cairo_create(drawable);
@@ -2997,8 +2997,8 @@ public static final int /*long*/ gdk_cairo_create(int /*long*/ drawable) {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gdk_cairo_region(int /*long*/ cairo, int /*long*/ region);
-public static final void gdk_cairo_region(int /*long*/ cairo, int /*long*/ region) {
+public static final native void _gdk_cairo_region(long /*int*/ cairo, long /*int*/ region);
+public static final void gdk_cairo_region(long /*int*/ cairo, long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_cairo_region(cairo, region);
@@ -3007,8 +3007,8 @@ public static final void gdk_cairo_region(int /*long*/ cairo, int /*long*/ regio
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gdk_cairo_set_source_color(int /*long*/ cairo, GdkColor color);
-public static final void gdk_cairo_set_source_color(int /*long*/ cairo, GdkColor color) {
+public static final native void _gdk_cairo_set_source_color(long /*int*/ cairo, GdkColor color);
+public static final void gdk_cairo_set_source_color(long /*int*/ cairo, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_cairo_set_source_color(cairo, color);
@@ -3020,8 +3020,8 @@ public static final void gdk_cairo_set_source_color(int /*long*/ cairo, GdkColor
  * @param colormap cast=(GdkColormap *)
  * @param color cast=(GdkColor *),flags=no_in
  */
-public static final native boolean _gdk_color_white(int /*long*/ colormap, GdkColor color);
-public static final boolean gdk_color_white(int /*long*/ colormap, GdkColor color) {
+public static final native boolean _gdk_color_white(long /*int*/ colormap, GdkColor color);
+public static final boolean gdk_color_white(long /*int*/ colormap, GdkColor color) {
 	lock.lock();
 	try {
 		return _gdk_color_white(colormap, color);
@@ -3035,8 +3035,8 @@ public static final boolean gdk_color_white(int /*long*/ colormap, GdkColor colo
  * @param writeable cast=(gboolean)
  * @param best_match cast=(gboolean)
  */
-public static final native boolean _gdk_colormap_alloc_color(int /*long*/ colormap, GdkColor color, boolean writeable, boolean best_match);
-public static final boolean gdk_colormap_alloc_color(int /*long*/ colormap, GdkColor color, boolean writeable, boolean best_match) {
+public static final native boolean _gdk_colormap_alloc_color(long /*int*/ colormap, GdkColor color, boolean writeable, boolean best_match);
+public static final boolean gdk_colormap_alloc_color(long /*int*/ colormap, GdkColor color, boolean writeable, boolean best_match) {
 	lock.lock();
 	try {
 		return _gdk_colormap_alloc_color(colormap, color, writeable, best_match);
@@ -3049,8 +3049,8 @@ public static final boolean gdk_colormap_alloc_color(int /*long*/ colormap, GdkC
  * @param colors cast=(GdkColor *),flags=no_out
  * @param ncolors cast=(gint)
  */
-public static final native void _gdk_colormap_free_colors(int /*long*/ colormap, GdkColor colors, int ncolors);
-public static final void gdk_colormap_free_colors(int /*long*/ colormap, GdkColor colors, int ncolors) {
+public static final native void _gdk_colormap_free_colors(long /*int*/ colormap, GdkColor colors, int ncolors);
+public static final void gdk_colormap_free_colors(long /*int*/ colormap, GdkColor colors, int ncolors) {
 	lock.lock();
 	try {
 		_gdk_colormap_free_colors(colormap, colors, ncolors);
@@ -3058,8 +3058,8 @@ public static final void gdk_colormap_free_colors(int /*long*/ colormap, GdkColo
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_colormap_get_system();
-public static final int /*long*/ gdk_colormap_get_system() {
+public static final native long /*int*/ _gdk_colormap_get_system();
+public static final long /*int*/ gdk_colormap_get_system() {
 	lock.lock();
 	try {
 		return _gdk_colormap_get_system();
@@ -3072,8 +3072,8 @@ public static final int /*long*/ gdk_colormap_get_system() {
  * @param pixel cast=(gulong)
  * @param result cast=(GdkColor *)
  */
-public static final native void _gdk_colormap_query_color(int /*long*/ colormap, int /*long*/ pixel, GdkColor result);
-public static final void gdk_colormap_query_color(int /*long*/ colormap, int /*long*/ pixel, GdkColor result) {
+public static final native void _gdk_colormap_query_color(long /*int*/ colormap, long /*int*/ pixel, GdkColor result);
+public static final void gdk_colormap_query_color(long /*int*/ colormap, long /*int*/ pixel, GdkColor result) {
 	lock.lock();
 	try {
 		_gdk_colormap_query_color(colormap, pixel, result);
@@ -3082,8 +3082,8 @@ public static final void gdk_colormap_query_color(int /*long*/ colormap, int /*l
 	}
 }
 /** @param cursor cast=(GdkCursor *) */
-public static final native void _gdk_cursor_destroy(int /*long*/ cursor);
-public static final void gdk_cursor_destroy(int /*long*/ cursor) {
+public static final native void _gdk_cursor_destroy(long /*int*/ cursor);
+public static final void gdk_cursor_destroy(long /*int*/ cursor) {
 	lock.lock();
 	try {
 		_gdk_cursor_destroy(cursor);
@@ -3092,8 +3092,8 @@ public static final void gdk_cursor_destroy(int /*long*/ cursor) {
 	}
 }
 /** @param cursor_type cast=(GdkCursorType) */
-public static final native int /*long*/ _gdk_cursor_new(int /*long*/ cursor_type);
-public static final int /*long*/ gdk_cursor_new(int /*long*/ cursor_type) {
+public static final native long /*int*/ _gdk_cursor_new(long /*int*/ cursor_type);
+public static final long /*int*/ gdk_cursor_new(long /*int*/ cursor_type) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new(cursor_type);
@@ -3109,8 +3109,8 @@ public static final int /*long*/ gdk_cursor_new(int /*long*/ cursor_type) {
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native int /*long*/ _gdk_cursor_new_from_pixmap(int /*long*/ source, int /*long*/ mask, GdkColor fg, GdkColor bg, int x, int y);
-public static final int /*long*/ gdk_cursor_new_from_pixmap(int /*long*/ source, int /*long*/ mask, GdkColor fg, GdkColor bg, int x, int y) {
+public static final native long /*int*/ _gdk_cursor_new_from_pixmap(long /*int*/ source, long /*int*/ mask, GdkColor fg, GdkColor bg, int x, int y);
+public static final long /*int*/ gdk_cursor_new_from_pixmap(long /*int*/ source, long /*int*/ mask, GdkColor fg, GdkColor bg, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new_from_pixmap(source, mask, fg, bg, x, y);
@@ -3119,8 +3119,8 @@ public static final int /*long*/ gdk_cursor_new_from_pixmap(int /*long*/ source,
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gdk_cursor_new_from_pixbuf(int /*long*/ display, int /*long*/ pixbuf, int x, int y);
-public static final int /*long*/ gdk_cursor_new_from_pixbuf(int /*long*/ display, int /*long*/ pixbuf, int x, int y) {
+public static final native long /*int*/ _gdk_cursor_new_from_pixbuf(long /*int*/ display, long /*int*/ pixbuf, int x, int y);
+public static final long /*int*/ gdk_cursor_new_from_pixbuf(long /*int*/ display, long /*int*/ pixbuf, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new_from_pixbuf(display, pixbuf, x, y);
@@ -3129,8 +3129,8 @@ public static final int /*long*/ gdk_cursor_new_from_pixbuf(int /*long*/ display
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gdk_display_get_default();
-public static final int /*long*/ gdk_display_get_default() {
+public static final native long /*int*/ _gdk_display_get_default();
+public static final long /*int*/ gdk_display_get_default() {
 	lock.lock();
 	try {
 		return _gdk_display_get_default();
@@ -3139,8 +3139,8 @@ public static final int /*long*/ gdk_display_get_default() {
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _gdk_display_supports_cursor_color(int /*long*/ display);
-public static final boolean gdk_display_supports_cursor_color(int /*long*/ display) {
+public static final native boolean _gdk_display_supports_cursor_color(long /*int*/ display);
+public static final boolean gdk_display_supports_cursor_color(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _gdk_display_supports_cursor_color(display);
@@ -3153,8 +3153,8 @@ public static final boolean gdk_display_supports_cursor_color(int /*long*/ displ
  * @param action cast=(GdkDragAction)
  * @param time cast=(guint32)
  */
-public static final native void _gdk_drag_status(int /*long*/ context, int action, int time);
-public static final void gdk_drag_status(int /*long*/ context, int action, int time) {
+public static final native void _gdk_drag_status(long /*int*/ context, int action, int time);
+public static final void gdk_drag_status(long /*int*/ context, int action, int time) {
 	lock.lock();
 	try {
 		_gdk_drag_status(context, action, time);
@@ -3173,8 +3173,8 @@ public static final void gdk_drag_status(int /*long*/ context, int action, int t
  * @param angle1 cast=(gint)
  * @param angle2 cast=(gint)
  */
-public static final native void _gdk_draw_arc(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2);
-public static final void gdk_draw_arc(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2) {
+public static final native void _gdk_draw_arc(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2);
+public static final void gdk_draw_arc(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2) {
 	lock.lock();
 	try {
 		_gdk_draw_arc(drawable, gc, filled, x, y, width, height, angle1, angle2);
@@ -3193,8 +3193,8 @@ public static final void gdk_draw_arc(int /*long*/ drawable, int /*long*/ gc, in
  * @param width cast=(gint)
  * @param height cast=(gint)
  */
-public static final native void _gdk_draw_drawable(int /*long*/ drawable, int /*long*/ gc, int /*long*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
-public static final void gdk_draw_drawable(int /*long*/ drawable, int /*long*/ gc, int /*long*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
+public static final native void _gdk_draw_drawable(long /*int*/ drawable, long /*int*/ gc, long /*int*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
+public static final void gdk_draw_drawable(long /*int*/ drawable, long /*int*/ gc, long /*int*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_drawable(drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height);
@@ -3207,8 +3207,8 @@ public static final void gdk_draw_drawable(int /*long*/ drawable, int /*long*/ g
  * @param gc cast=(GdkGC *)
  * @param image cast=(GdkImage *)
  */
-public static final native void _gdk_draw_image(int /*long*/ drawable, int /*long*/ gc, int /*long*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
-public static final void gdk_draw_image(int /*long*/ drawable, int /*long*/ gc, int /*long*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
+public static final native void _gdk_draw_image(long /*int*/ drawable, long /*int*/ gc, long /*int*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
+public static final void gdk_draw_image(long /*int*/ drawable, long /*int*/ gc, long /*int*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_image(drawable, gc, image, xsrc, ysrc, xdest, ydest, width, height);
@@ -3223,8 +3223,8 @@ public static final void gdk_draw_image(int /*long*/ drawable, int /*long*/ gc,
  * @param y cast=(gint)
  * @param layout cast=(PangoLayout *)
  */
-public static final native void _gdk_draw_layout(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout);
-public static final void gdk_draw_layout(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout) {
+public static final native void _gdk_draw_layout(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout);
+public static final void gdk_draw_layout(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_gdk_draw_layout(drawable, gc, x, y, layout);
@@ -3241,8 +3241,8 @@ public static final void gdk_draw_layout(int /*long*/ drawable, int /*long*/ gc,
  * @param foreground flags=no_out
  * @param background flags=no_out
  */
-public static final native void _gdk_draw_layout_with_colors(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout, GdkColor foreground, GdkColor background);
-public static final void gdk_draw_layout_with_colors(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout, GdkColor foreground, GdkColor background) {
+public static final native void _gdk_draw_layout_with_colors(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout, GdkColor foreground, GdkColor background);
+public static final void gdk_draw_layout_with_colors(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout, GdkColor foreground, GdkColor background) {
 	lock.lock();
 	try {
 		_gdk_draw_layout_with_colors(drawable, gc, x, y, layout, foreground, background);
@@ -3258,8 +3258,8 @@ public static final void gdk_draw_layout_with_colors(int /*long*/ drawable, int
  * @param x2 cast=(gint)
  * @param y2 cast=(gint)
  */
-public static final native void _gdk_draw_line(int /*long*/ drawable, int /*long*/ gc, int x1, int y1, int x2, int y2);
-public static final void gdk_draw_line(int /*long*/ drawable, int /*long*/ gc, int x1, int y1, int x2, int y2) {
+public static final native void _gdk_draw_line(long /*int*/ drawable, long /*int*/ gc, int x1, int y1, int x2, int y2);
+public static final void gdk_draw_line(long /*int*/ drawable, long /*int*/ gc, int x1, int y1, int x2, int y2) {
 	lock.lock();
 	try {
 		_gdk_draw_line(drawable, gc, x1, y1, x2, y2);
@@ -3273,8 +3273,8 @@ public static final void gdk_draw_line(int /*long*/ drawable, int /*long*/ gc, i
  * @param points cast=(GdkPoint *),flags=no_out critical
  * @param npoints cast=(gint)
  */
-public static final native void _gdk_draw_lines(int /*long*/ drawable, int /*long*/ gc, int[] points, int npoints);
-public static final void gdk_draw_lines(int /*long*/ drawable, int /*long*/ gc, int[] points, int npoints) {
+public static final native void _gdk_draw_lines(long /*int*/ drawable, long /*int*/ gc, int[] points, int npoints);
+public static final void gdk_draw_lines(long /*int*/ drawable, long /*int*/ gc, int[] points, int npoints) {
 	lock.lock();
 	try {
 		_gdk_draw_lines(drawable, gc, points, npoints);
@@ -3297,8 +3297,8 @@ public static final void gdk_draw_lines(int /*long*/ drawable, int /*long*/ gc,
  * @param x_dither cast=(gint)
  * @param y_dither cast=(gint)
  */
-public static final native void _gdk_draw_pixbuf(int /*long*/ drawable, int /*long*/ gc, int /*long*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither);
-public static final void gdk_draw_pixbuf(int /*long*/ drawable, int /*long*/ gc, int /*long*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_draw_pixbuf(long /*int*/ drawable, long /*int*/ gc, long /*int*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither);
+public static final void gdk_draw_pixbuf(long /*int*/ drawable, long /*int*/ gc, long /*int*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_draw_pixbuf(drawable, gc, pixbuf, xsrc, ysrc, xdest, ydest, width, height, dither, x_dither, y_dither);
@@ -3310,8 +3310,8 @@ public static final void gdk_draw_pixbuf(int /*long*/ drawable, int /*long*/ gc,
  * @param drawable cast=(GdkDrawable *)
  * @param gc cast=(GdkGC *)
  */
-public static final native void _gdk_draw_point(int /*long*/ drawable, int /*long*/ gc, int x, int y);
-public static final void gdk_draw_point(int /*long*/ drawable, int /*long*/ gc, int x, int y) {
+public static final native void _gdk_draw_point(long /*int*/ drawable, long /*int*/ gc, int x, int y);
+public static final void gdk_draw_point(long /*int*/ drawable, long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_draw_point(drawable, gc, x, y);
@@ -3326,8 +3326,8 @@ public static final void gdk_draw_point(int /*long*/ drawable, int /*long*/ gc,
  * @param points cast=(GdkPoint *),flags=no_out critical
  * @param npoints cast=(gint)
  */
-public static final native void _gdk_draw_polygon(int /*long*/ drawable, int /*long*/ gc, int filled, int[] points, int npoints);
-public static final void gdk_draw_polygon(int /*long*/ drawable, int /*long*/ gc, int filled, int[] points, int npoints) {
+public static final native void _gdk_draw_polygon(long /*int*/ drawable, long /*int*/ gc, int filled, int[] points, int npoints);
+public static final void gdk_draw_polygon(long /*int*/ drawable, long /*int*/ gc, int filled, int[] points, int npoints) {
 	lock.lock();
 	try {
 		_gdk_draw_polygon(drawable, gc, filled, points, npoints);
@@ -3344,8 +3344,8 @@ public static final void gdk_draw_polygon(int /*long*/ drawable, int /*long*/ gc
  * @param width cast=(gint)
  * @param height cast=(gint)
  */
-public static final native void _gdk_draw_rectangle(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height);
-public static final void gdk_draw_rectangle(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height) {
+public static final native void _gdk_draw_rectangle(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height);
+public static final void gdk_draw_rectangle(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_rectangle(drawable, gc, filled, x, y, width, height);
@@ -3354,8 +3354,8 @@ public static final void gdk_draw_rectangle(int /*long*/ drawable, int /*long*/
 	}
 }
 /** @param drawable cast=(GdkDrawable *) */
-public static final native int _gdk_drawable_get_depth(int /*long*/ drawable);
-public static final int gdk_drawable_get_depth(int /*long*/ drawable) {
+public static final native int _gdk_drawable_get_depth(long /*int*/ drawable);
+public static final int gdk_drawable_get_depth(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_depth(drawable);
@@ -3371,8 +3371,8 @@ public static final int gdk_drawable_get_depth(int /*long*/ drawable) {
  * @param width cast=(gint)
  * @param height cast=(gint)
  */
-public static final native int /*long*/ _gdk_drawable_get_image(int /*long*/ drawable, int x, int y, int width, int height);
-public static final int /*long*/ gdk_drawable_get_image(int /*long*/ drawable, int x, int y, int width, int height) {
+public static final native long /*int*/ _gdk_drawable_get_image(long /*int*/ drawable, int x, int y, int width, int height);
+public static final long /*int*/ gdk_drawable_get_image(long /*int*/ drawable, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_image(drawable, x, y, width, height);
@@ -3385,8 +3385,8 @@ public static final int /*long*/ gdk_drawable_get_image(int /*long*/ drawable, i
  * @param width cast=(gint *),flags=no_in critical
  * @param height cast=(gint *),flags=no_in critical
  */
-public static final native void _gdk_drawable_get_size(int /*long*/ drawable, int[] width, int[] height);
-public static final void gdk_drawable_get_size(int /*long*/ drawable, int[] width, int[] height) {
+public static final native void _gdk_drawable_get_size(long /*int*/ drawable, int[] width, int[] height);
+public static final void gdk_drawable_get_size(long /*int*/ drawable, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gdk_drawable_get_size(drawable, width, height);
@@ -3395,8 +3395,8 @@ public static final void gdk_drawable_get_size(int /*long*/ drawable, int[] widt
 	}
 }
 /** @param drawable cast=(GdkDrawable *) */
-public static final native int /*long*/ _gdk_drawable_get_visible_region(int /*long*/ drawable);
-public static final int /*long*/ gdk_drawable_get_visible_region(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_drawable_get_visible_region(long /*int*/ drawable);
+public static final long /*int*/ gdk_drawable_get_visible_region(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_visible_region(drawable);
@@ -3405,8 +3405,8 @@ public static final int /*long*/ gdk_drawable_get_visible_region(int /*long*/ dr
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native int /*long*/ _gdk_event_copy(int /*long*/ event);
-public static final int /*long*/ gdk_event_copy(int /*long*/ event) {
+public static final native long /*int*/ _gdk_event_copy(long /*int*/ event);
+public static final long /*int*/ gdk_event_copy(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gdk_event_copy(event);
@@ -3415,8 +3415,8 @@ public static final int /*long*/ gdk_event_copy(int /*long*/ event) {
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native void _gdk_event_free(int /*long*/ event);
-public static final void gdk_event_free(int /*long*/ event) {
+public static final native void _gdk_event_free(long /*int*/ event);
+public static final void gdk_event_free(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gdk_event_free(event);
@@ -3424,8 +3424,8 @@ public static final void gdk_event_free(int /*long*/ event) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_get();
-public static final int /*long*/ gdk_event_get() {
+public static final native long /*int*/ _gdk_event_get();
+public static final long /*int*/ gdk_event_get() {
 	lock.lock();
 	try {
 		return _gdk_event_get();
@@ -3438,8 +3438,8 @@ public static final int /*long*/ gdk_event_get() {
  * @param px cast=(gdouble *)
  * @param py cast=(gdouble *)
  */
-public static final native boolean _gdk_event_get_root_coords(int /*long*/ event, double[] px, double[] py);
-public static final boolean gdk_event_get_root_coords(int /*long*/ event, double[] px, double[] py) {
+public static final native boolean _gdk_event_get_root_coords(long /*int*/ event, double[] px, double[] py);
+public static final boolean gdk_event_get_root_coords(long /*int*/ event, double[] px, double[] py) {
 	lock.lock();
 	try {
 		return _gdk_event_get_root_coords(event, px, py);
@@ -3452,8 +3452,8 @@ public static final boolean gdk_event_get_root_coords(int /*long*/ event, double
  * @param px cast=(gdouble *)
  * @param py cast=(gdouble *)
  */
-public static final native boolean _gdk_event_get_coords(int /*long*/ event, double[] px, double[] py);
-public static final boolean gdk_event_get_coords(int /*long*/ event, double[] px, double[] py) {
+public static final native boolean _gdk_event_get_coords(long /*int*/ event, double[] px, double[] py);
+public static final boolean gdk_event_get_coords(long /*int*/ event, double[] px, double[] py) {
 	lock.lock();
 	try {
 		return _gdk_event_get_coords(event, px, py);
@@ -3462,8 +3462,8 @@ public static final boolean gdk_event_get_coords(int /*long*/ event, double[] px
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native int /*long*/ _gdk_event_get_graphics_expose(int /*long*/ window);
-public static final int /*long*/ gdk_event_get_graphics_expose(int /*long*/ window) {
+public static final native long /*int*/ _gdk_event_get_graphics_expose(long /*int*/ window);
+public static final long /*int*/ gdk_event_get_graphics_expose(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_event_get_graphics_expose(window);
@@ -3475,8 +3475,8 @@ public static final int /*long*/ gdk_event_get_graphics_expose(int /*long*/ wind
  * @param event cast=(GdkEvent *)
  * @param pmod cast=(GdkModifierType *)
  */
-public static final native boolean _gdk_event_get_state(int /*long*/ event, int[] pmod);
-public static final boolean gdk_event_get_state(int /*long*/ event, int[] pmod) {
+public static final native boolean _gdk_event_get_state(long /*int*/ event, int[] pmod);
+public static final boolean gdk_event_get_state(long /*int*/ event, int[] pmod) {
 	lock.lock();
 	try {
 		return _gdk_event_get_state(event, pmod);
@@ -3485,8 +3485,8 @@ public static final boolean gdk_event_get_state(int /*long*/ event, int[] pmod)
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native int _gdk_event_get_time(int /*long*/ event);
-public static final int gdk_event_get_time(int /*long*/ event) {
+public static final native int _gdk_event_get_time(long /*int*/ event);
+public static final int gdk_event_get_time(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gdk_event_get_time(event);
@@ -3499,8 +3499,8 @@ public static final int gdk_event_get_time(int /*long*/ event) {
  * @param data cast=(gpointer)
  * @param notify cast=(GDestroyNotify)
  */
-public static final native void _gdk_event_handler_set(int /*long*/ func, int /*long*/ data, int /*long*/ notify);
-public static final void gdk_event_handler_set(int /*long*/ func, int /*long*/ data, int /*long*/ notify) {
+public static final native void _gdk_event_handler_set(long /*int*/ func, long /*int*/ data, long /*int*/ notify);
+public static final void gdk_event_handler_set(long /*int*/ func, long /*int*/ data, long /*int*/ notify) {
 	lock.lock();
 	try {
 		_gdk_event_handler_set(func, data, notify);
@@ -3508,8 +3508,8 @@ public static final void gdk_event_handler_set(int /*long*/ func, int /*long*/ d
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_new(int type);
-public static final int /*long*/ gdk_event_new(int type) {
+public static final native long /*int*/ _gdk_event_new(int type);
+public static final long /*int*/ gdk_event_new(int type) {
 	lock.lock();
 	try {
 		return _gdk_event_new(type);
@@ -3517,8 +3517,8 @@ public static final int /*long*/ gdk_event_new(int type) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_peek();
-public static final int /*long*/ gdk_event_peek() {
+public static final native long /*int*/ _gdk_event_peek();
+public static final long /*int*/ gdk_event_peek() {
 	lock.lock();
 	try {
 		return _gdk_event_peek();
@@ -3527,8 +3527,8 @@ public static final int /*long*/ gdk_event_peek() {
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native void _gdk_event_put(int /*long*/ event);
-public static final void gdk_event_put(int /*long*/ event) {
+public static final native void _gdk_event_put(long /*int*/ event);
+public static final void gdk_event_put(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gdk_event_put(event);
@@ -3564,8 +3564,8 @@ public static final void gdk_flush() {
 	}
 }
 /** @param list cast=(gchar **) */
-public static final native void _gdk_free_text_list(int /*long*/ list);
-public static final void gdk_free_text_list(int /*long*/ list) {
+public static final native void _gdk_free_text_list(long /*int*/ list);
+public static final void gdk_free_text_list(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gdk_free_text_list(list);
@@ -3577,8 +3577,8 @@ public static final void gdk_free_text_list(int /*long*/ list) {
  * @param gc cast=(GdkGC *)
  * @param values cast=(GdkGCValues *),flags=no_in
  */
-public static final native void _gdk_gc_get_values(int /*long*/ gc, GdkGCValues values);
-public static final void gdk_gc_get_values(int /*long*/ gc, GdkGCValues values) {
+public static final native void _gdk_gc_get_values(long /*int*/ gc, GdkGCValues values);
+public static final void gdk_gc_get_values(long /*int*/ gc, GdkGCValues values) {
 	lock.lock();
 	try {
 		_gdk_gc_get_values(gc, values);
@@ -3587,8 +3587,8 @@ public static final void gdk_gc_get_values(int /*long*/ gc, GdkGCValues values)
 	}
 }
 /** @param window cast=(GdkDrawable *) */
-public static final native int /*long*/ _gdk_gc_new(int /*long*/ window);
-public static final int /*long*/ gdk_gc_new(int /*long*/ window) {
+public static final native long /*int*/ _gdk_gc_new(long /*int*/ window);
+public static final long /*int*/ gdk_gc_new(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_gc_new(window);
@@ -3600,8 +3600,8 @@ public static final int /*long*/ gdk_gc_new(int /*long*/ window) {
  * @param gc cast=(GdkGC *)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gdk_gc_set_background(int /*long*/ gc, GdkColor color);
-public static final void gdk_gc_set_background(int /*long*/ gc, GdkColor color) {
+public static final native void _gdk_gc_set_background(long /*int*/ gc, GdkColor color);
+public static final void gdk_gc_set_background(long /*int*/ gc, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_gc_set_background(gc, color);
@@ -3613,8 +3613,8 @@ public static final void gdk_gc_set_background(int /*long*/ gc, GdkColor color)
  * @param gc cast=(GdkGC *)
  * @param mask cast=(GdkBitmap *)
  */
-public static final native void _gdk_gc_set_clip_mask(int /*long*/ gc, int /*long*/ mask);
-public static final void gdk_gc_set_clip_mask(int /*long*/ gc, int /*long*/ mask) {
+public static final native void _gdk_gc_set_clip_mask(long /*int*/ gc, long /*int*/ mask);
+public static final void gdk_gc_set_clip_mask(long /*int*/ gc, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_mask(gc, mask);
@@ -3627,8 +3627,8 @@ public static final void gdk_gc_set_clip_mask(int /*long*/ gc, int /*long*/ mask
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native void _gdk_gc_set_clip_origin(int /*long*/ gc, int x, int y);
-public static final void gdk_gc_set_clip_origin(int /*long*/ gc, int x, int y) {
+public static final native void _gdk_gc_set_clip_origin(long /*int*/ gc, int x, int y);
+public static final void gdk_gc_set_clip_origin(long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_origin(gc, x, y);
@@ -3640,8 +3640,8 @@ public static final void gdk_gc_set_clip_origin(int /*long*/ gc, int x, int y) {
  * @param gc cast=(GdkGC *)
  * @param rectangle cast=(GdkRectangle *),flags=no_out
  */
-public static final native void _gdk_gc_set_clip_rectangle(int /*long*/ gc, GdkRectangle rectangle);
-public static final void gdk_gc_set_clip_rectangle(int /*long*/ gc, GdkRectangle rectangle) {
+public static final native void _gdk_gc_set_clip_rectangle(long /*int*/ gc, GdkRectangle rectangle);
+public static final void gdk_gc_set_clip_rectangle(long /*int*/ gc, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_rectangle(gc, rectangle);
@@ -3653,8 +3653,8 @@ public static final void gdk_gc_set_clip_rectangle(int /*long*/ gc, GdkRectangle
  * @param gc cast=(GdkGC *)
  * @param region cast=(GdkRegion *)
  */
-public static final native void _gdk_gc_set_clip_region(int /*long*/ gc, int /*long*/ region);
-public static final void gdk_gc_set_clip_region(int /*long*/ gc, int /*long*/ region) {
+public static final native void _gdk_gc_set_clip_region(long /*int*/ gc, long /*int*/ region);
+public static final void gdk_gc_set_clip_region(long /*int*/ gc, long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_region(gc, region);
@@ -3668,8 +3668,8 @@ public static final void gdk_gc_set_clip_region(int /*long*/ gc, int /*long*/ re
  * @param dash_list cast=(gint8 *),flags=no_out critical
  * @param n cast=(gint)
  */
-public static final native void _gdk_gc_set_dashes(int /*long*/ gc, int dash_offset, byte[] dash_list, int n);
-public static final void gdk_gc_set_dashes(int /*long*/ gc, int dash_offset, byte[] dash_list, int n) {
+public static final native void _gdk_gc_set_dashes(long /*int*/ gc, int dash_offset, byte[] dash_list, int n);
+public static final void gdk_gc_set_dashes(long /*int*/ gc, int dash_offset, byte[] dash_list, int n) {
 	lock.lock();
 	try {
 		_gdk_gc_set_dashes(gc, dash_offset, dash_list, n);
@@ -3681,8 +3681,8 @@ public static final void gdk_gc_set_dashes(int /*long*/ gc, int dash_offset, byt
  * @param gc cast=(GdkGC *)
  * @param exposures cast=(gboolean)
  */
-public static final native void _gdk_gc_set_exposures(int /*long*/ gc, boolean exposures);
-public static final void gdk_gc_set_exposures(int /*long*/ gc, boolean exposures) {
+public static final native void _gdk_gc_set_exposures(long /*int*/ gc, boolean exposures);
+public static final void gdk_gc_set_exposures(long /*int*/ gc, boolean exposures) {
 	lock.lock();
 	try {
 		_gdk_gc_set_exposures(gc, exposures);
@@ -3694,8 +3694,8 @@ public static final void gdk_gc_set_exposures(int /*long*/ gc, boolean exposures
  * @param gc cast=(GdkGC *)
  * @param fill cast=(GdkFill)
  */
-public static final native void _gdk_gc_set_fill(int /*long*/ gc, int fill);
-public static final void gdk_gc_set_fill(int /*long*/ gc, int fill) {
+public static final native void _gdk_gc_set_fill(long /*int*/ gc, int fill);
+public static final void gdk_gc_set_fill(long /*int*/ gc, int fill) {
 	lock.lock();
 	try {
 		_gdk_gc_set_fill(gc, fill);
@@ -3707,8 +3707,8 @@ public static final void gdk_gc_set_fill(int /*long*/ gc, int fill) {
  * @param gc cast=(GdkGC *)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gdk_gc_set_foreground(int /*long*/ gc, GdkColor color);
-public static final void gdk_gc_set_foreground(int /*long*/ gc, GdkColor color) {
+public static final native void _gdk_gc_set_foreground(long /*int*/ gc, GdkColor color);
+public static final void gdk_gc_set_foreground(long /*int*/ gc, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_gc_set_foreground(gc, color);
@@ -3720,8 +3720,8 @@ public static final void gdk_gc_set_foreground(int /*long*/ gc, GdkColor color)
  * @param gc cast=(GdkGC *)
  * @param function cast=(GdkFunction)
  */
-public static final native void _gdk_gc_set_function(int /*long*/ gc, int /*long*/ function);
-public static final void gdk_gc_set_function(int /*long*/ gc, int /*long*/ function) {
+public static final native void _gdk_gc_set_function(long /*int*/ gc, long /*int*/ function);
+public static final void gdk_gc_set_function(long /*int*/ gc, long /*int*/ function) {
 	lock.lock();
 	try {
 		_gdk_gc_set_function(gc, function);
@@ -3736,8 +3736,8 @@ public static final void gdk_gc_set_function(int /*long*/ gc, int /*long*/ funct
  * @param cap_style cast=(GdkCapStyle)
  * @param join_style cast=(GdkJoinStyle)
  */
-public static final native void _gdk_gc_set_line_attributes(int /*long*/ gc, int line_width, int line_style, int cap_style, int join_style);
-public static final void gdk_gc_set_line_attributes(int /*long*/ gc, int line_width, int line_style, int cap_style, int join_style) {
+public static final native void _gdk_gc_set_line_attributes(long /*int*/ gc, int line_width, int line_style, int cap_style, int join_style);
+public static final void gdk_gc_set_line_attributes(long /*int*/ gc, int line_width, int line_style, int cap_style, int join_style) {
 	lock.lock();
 	try {
 		_gdk_gc_set_line_attributes(gc, line_width, line_style, cap_style, join_style);
@@ -3749,8 +3749,8 @@ public static final void gdk_gc_set_line_attributes(int /*long*/ gc, int line_wi
  * @param gc cast=(GdkGC *)
  * @param stipple cast=(GdkPixmap *)
  */
-public static final native void _gdk_gc_set_stipple(int /*long*/ gc, int /*long*/ stipple);
-public static final void gdk_gc_set_stipple(int /*long*/ gc, int /*long*/ stipple) {
+public static final native void _gdk_gc_set_stipple(long /*int*/ gc, long /*int*/ stipple);
+public static final void gdk_gc_set_stipple(long /*int*/ gc, long /*int*/ stipple) {
 	lock.lock();
 	try {
 		_gdk_gc_set_stipple(gc, stipple);
@@ -3762,8 +3762,8 @@ public static final void gdk_gc_set_stipple(int /*long*/ gc, int /*long*/ stippl
  * @param gc cast=(GdkGC *)
  * @param mode cast=(GdkSubwindowMode)
  */
-public static final native void _gdk_gc_set_subwindow(int /*long*/ gc, int /*long*/ mode);
-public static final void gdk_gc_set_subwindow(int /*long*/ gc, int /*long*/ mode) {
+public static final native void _gdk_gc_set_subwindow(long /*int*/ gc, long /*int*/ mode);
+public static final void gdk_gc_set_subwindow(long /*int*/ gc, long /*int*/ mode) {
 	lock.lock();
 	try {
 		_gdk_gc_set_subwindow(gc, mode);
@@ -3775,8 +3775,8 @@ public static final void gdk_gc_set_subwindow(int /*long*/ gc, int /*long*/ mode
  * @param gc cast=(GdkGC *)
  * @param tile cast=(GdkPixmap *)
  */
-public static final native void _gdk_gc_set_tile(int /*long*/ gc, int /*long*/ tile);
-public static final void gdk_gc_set_tile(int /*long*/ gc, int /*long*/ tile) {
+public static final native void _gdk_gc_set_tile(long /*int*/ gc, long /*int*/ tile);
+public static final void gdk_gc_set_tile(long /*int*/ gc, long /*int*/ tile) {
 	lock.lock();
 	try {
 		_gdk_gc_set_tile(gc, tile);
@@ -3785,8 +3785,8 @@ public static final void gdk_gc_set_tile(int /*long*/ gc, int /*long*/ tile) {
 	}
 }
 /** @param gc cast=(GdkGC *) */
-public static final native void _gdk_gc_set_ts_origin(int /*long*/ gc, int x, int y);
-public static final void gdk_gc_set_ts_origin(int /*long*/ gc, int x, int y) {
+public static final native void _gdk_gc_set_ts_origin(long /*int*/ gc, int x, int y);
+public static final void gdk_gc_set_ts_origin(long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_gc_set_ts_origin(gc, x, y);
@@ -3799,8 +3799,8 @@ public static final void gdk_gc_set_ts_origin(int /*long*/ gc, int x, int y) {
  * @param values cast=(GdkGCValues *),flags=no_out
  * @param values_mask cast=(GdkGCValuesMask)
  */
-public static final native void _gdk_gc_set_values(int /*long*/ gc, GdkGCValues values, int values_mask);
-public static final void gdk_gc_set_values(int /*long*/ gc, GdkGCValues values, int values_mask) {
+public static final native void _gdk_gc_set_values(long /*int*/ gc, GdkGCValues values, int values_mask);
+public static final void gdk_gc_set_values(long /*int*/ gc, GdkGCValues values, int values_mask) {
 	lock.lock();
 	try {
 		_gdk_gc_set_values(gc, values, values_mask);
@@ -3817,8 +3817,8 @@ public static final void gdk_keyboard_ungrab(int time) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_keymap_get_default();
-public static final int /*long*/ gdk_keymap_get_default() {
+public static final native long /*int*/ _gdk_keymap_get_default();
+public static final long /*int*/ gdk_keymap_get_default() {
 	lock.lock();
 	try {
 		return _gdk_keymap_get_default();
@@ -3834,8 +3834,8 @@ public static final int /*long*/ gdk_keymap_get_default() {
  * @param level cast=(gint*)
  * @param consumed_modifiers cast=(GdkModifierType *)
  */
-public static final native boolean _gdk_keymap_translate_keyboard_state (int /*long*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers);
-public static final boolean gdk_keymap_translate_keyboard_state (int /*long*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers) {
+public static final native boolean _gdk_keymap_translate_keyboard_state (long /*int*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers);
+public static final boolean gdk_keymap_translate_keyboard_state (long /*int*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers) {
 	lock.lock();
 	try {
 		return _gdk_keymap_translate_keyboard_state(keymap, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
@@ -3861,8 +3861,8 @@ public static final int gdk_keyval_to_unicode(int keyval) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pango_context_get();
-public static final int /*long*/ gdk_pango_context_get() {
+public static final native long /*int*/ _gdk_pango_context_get();
+public static final long /*int*/ gdk_pango_context_get() {
 	lock.lock();
 	try {
 		return _gdk_pango_context_get();
@@ -3874,8 +3874,8 @@ public static final int /*long*/ gdk_pango_context_get() {
  * @param context cast=(PangoContext *)
  * @param colormap cast=(GdkColormap *)
  */
-public static final native void _gdk_pango_context_set_colormap(int /*long*/ context, int /*long*/ colormap);
-public static final void gdk_pango_context_set_colormap(int /*long*/ context, int /*long*/ colormap) {
+public static final native void _gdk_pango_context_set_colormap(long /*int*/ context, long /*int*/ colormap);
+public static final void gdk_pango_context_set_colormap(long /*int*/ context, long /*int*/ colormap) {
 	lock.lock();
 	try {
 		_gdk_pango_context_set_colormap(context, colormap);
@@ -3884,8 +3884,8 @@ public static final void gdk_pango_context_set_colormap(int /*long*/ context, in
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int /*long*/ _gdk_pango_layout_get_clip_region(int /*long*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges);
-public static final int /*long*/ gdk_pango_layout_get_clip_region(int /*long*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges) {
+public static final native long /*int*/ _gdk_pango_layout_get_clip_region(long /*int*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges);
+public static final long /*int*/ gdk_pango_layout_get_clip_region(long /*int*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges) {
 	lock.lock();
 	try {
 		return _gdk_pango_layout_get_clip_region(layout, x_origin, y_origin, index_ranges, n_ranges);
@@ -3897,8 +3897,8 @@ public static final int /*long*/ gdk_pango_layout_get_clip_region(int /*long*/ l
  * @param src_pixbuf cast=(GdkPixbuf *)
  * @param dest_pixbuf cast=(GdkPixbuf *)
  */
-public static final native void _gdk_pixbuf_copy_area(int /*long*/ src_pixbuf, int src_x, int src_y, int width, int height, int /*long*/ dest_pixbuf, int dest_x, int dest_y);
-public static final void gdk_pixbuf_copy_area(int /*long*/ src_pixbuf, int src_x, int src_y, int width, int height, int /*long*/ dest_pixbuf, int dest_x, int dest_y) {
+public static final native void _gdk_pixbuf_copy_area(long /*int*/ src_pixbuf, int src_x, int src_y, int width, int height, long /*int*/ dest_pixbuf, int dest_x, int dest_y);
+public static final void gdk_pixbuf_copy_area(long /*int*/ src_pixbuf, int src_x, int src_y, int width, int height, long /*int*/ dest_pixbuf, int dest_x, int dest_y) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_copy_area(src_pixbuf, src_x, src_y, width, height, dest_pixbuf, dest_x, dest_y);
@@ -3911,8 +3911,8 @@ public static final void gdk_pixbuf_copy_area(int /*long*/ src_pixbuf, int src_x
  * @param src cast=(GdkDrawable *)
  * @param cmap cast=(GdkColormap *)
  */
-public static final native int /*long*/ _gdk_pixbuf_get_from_drawable(int /*long*/ dest, int /*long*/ src, int /*long*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
-public static final int /*long*/ gdk_pixbuf_get_from_drawable(int /*long*/ dest, int /*long*/ src, int /*long*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height) {
+public static final native long /*int*/ _gdk_pixbuf_get_from_drawable(long /*int*/ dest, long /*int*/ src, long /*int*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
+public static final long /*int*/ gdk_pixbuf_get_from_drawable(long /*int*/ dest, long /*int*/ src, long /*int*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_from_drawable(dest, src, cmap, src_x, src_y, dest_x, dest_y, width, height);
@@ -3921,8 +3921,8 @@ public static final int /*long*/ gdk_pixbuf_get_from_drawable(int /*long*/ dest,
 	}
 }
 /** @param pixbuf cast=(const GdkPixbuf *) */
-public static final native boolean _gdk_pixbuf_get_has_alpha(int /*long*/ pixbuf);
-public static final boolean gdk_pixbuf_get_has_alpha(int /*long*/ pixbuf) {
+public static final native boolean _gdk_pixbuf_get_has_alpha(long /*int*/ pixbuf);
+public static final boolean gdk_pixbuf_get_has_alpha(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_has_alpha(pixbuf);
@@ -3931,8 +3931,8 @@ public static final boolean gdk_pixbuf_get_has_alpha(int /*long*/ pixbuf) {
 	}
 }
 /** @param pixbuf cast=(const GdkPixbuf *) */
-public static final native int _gdk_pixbuf_get_height(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_height(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_height(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_height(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_height(pixbuf);
@@ -3941,8 +3941,8 @@ public static final int gdk_pixbuf_get_height(int /*long*/ pixbuf) {
 	}
 }
 /** @param pixbuf cast=(const GdkPixbuf *) */
-public static final native int /*long*/ _gdk_pixbuf_get_pixels(int /*long*/ pixbuf);
-public static final int /*long*/ gdk_pixbuf_get_pixels(int /*long*/ pixbuf) {
+public static final native long /*int*/ _gdk_pixbuf_get_pixels(long /*int*/ pixbuf);
+public static final long /*int*/ gdk_pixbuf_get_pixels(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_pixels(pixbuf);
@@ -3951,8 +3951,8 @@ public static final int /*long*/ gdk_pixbuf_get_pixels(int /*long*/ pixbuf) {
 	}
 }
 /** @param pixbuf cast=(const GdkPixbuf *) */
-public static final native int _gdk_pixbuf_get_rowstride(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_rowstride(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_rowstride(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_rowstride(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_rowstride(pixbuf);
@@ -3961,8 +3961,8 @@ public static final int gdk_pixbuf_get_rowstride(int /*long*/ pixbuf) {
 	}
 }
 /** @param pixbuf cast=(const GdkPixbuf *) */
-public static final native int _gdk_pixbuf_get_width(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_width(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_width(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_width(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_width(pixbuf);
@@ -3970,8 +3970,8 @@ public static final int gdk_pixbuf_get_width(int /*long*/ pixbuf) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_loader_new();
-public static final int /*long*/ gdk_pixbuf_loader_new() {
+public static final native long /*int*/ _gdk_pixbuf_loader_new();
+public static final long /*int*/ gdk_pixbuf_loader_new() {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_new();
@@ -3983,8 +3983,8 @@ public static final int /*long*/ gdk_pixbuf_loader_new() {
  * @param loader cast=(GdkPixbufLoader *)
  * @param error cast=(GError **)
  */
-public static final native boolean _gdk_pixbuf_loader_close(int /*long*/ loader, int /*long*/ [] error);
-public static final boolean gdk_pixbuf_loader_close(int /*long*/ loader, int /*long*/ [] error) {
+public static final native boolean _gdk_pixbuf_loader_close(long /*int*/ loader, long /*int*/ [] error);
+public static final boolean gdk_pixbuf_loader_close(long /*int*/ loader, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_close(loader, error);
@@ -3993,8 +3993,8 @@ public static final boolean gdk_pixbuf_loader_close(int /*long*/ loader, int /*l
 	}
 }
 /** @param loader cast=(GdkPixbufLoader *) */
-public static final native int /*long*/ _gdk_pixbuf_loader_get_pixbuf(int /*long*/ loader);
-public static final int /*long*/ gdk_pixbuf_loader_get_pixbuf(int /*long*/ loader) {
+public static final native long /*int*/ _gdk_pixbuf_loader_get_pixbuf(long /*int*/ loader);
+public static final long /*int*/ gdk_pixbuf_loader_get_pixbuf(long /*int*/ loader) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_get_pixbuf(loader);
@@ -4008,8 +4008,8 @@ public static final int /*long*/ gdk_pixbuf_loader_get_pixbuf(int /*long*/ loade
  * @param count cast=(gsize)
  * @param error cast=(GError **)
  */
-public static final native boolean _gdk_pixbuf_loader_write(int /*long*/ loader, int /*long*/ buffer, int count, int /*long*/ [] error);
-public static final boolean gdk_pixbuf_loader_write(int /*long*/ loader, int /*long*/ buffer, int count, int /*long*/ [] error) {
+public static final native boolean _gdk_pixbuf_loader_write(long /*int*/ loader, long /*int*/ buffer, int count, long /*int*/ [] error);
+public static final boolean gdk_pixbuf_loader_write(long /*int*/ loader, long /*int*/ buffer, int count, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_write(loader, buffer, count, error);
@@ -4021,8 +4021,8 @@ public static final boolean gdk_pixbuf_loader_write(int /*long*/ loader, int /*l
  * @param colorspace cast=(GdkColorspace)
  * @param has_alpha cast=(gboolean)
  */
-public static final native int /*long*/ _gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height);
-public static final int /*long*/ gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height) {
+public static final native long /*int*/ _gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height);
+public static final long /*int*/ gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_new(colorspace, has_alpha, bits_per_sample, width, height);
@@ -4034,8 +4034,8 @@ public static final int /*long*/ gdk_pixbuf_new(int colorspace, boolean has_alph
  * @param filename cast=(const char *)
  * @param error cast=(GError**)
  */
-public static final native int /*long*/ _gdk_pixbuf_new_from_file(byte[] filename, int /*long*/ [] error); 
-public static final int /*long*/ gdk_pixbuf_new_from_file(byte[] filename, int /*long*/ [] error) {
+public static final native long /*int*/ _gdk_pixbuf_new_from_file(byte[] filename, long /*int*/ [] error); 
+public static final long /*int*/ gdk_pixbuf_new_from_file(byte[] filename, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_new_from_file(filename, error);
@@ -4049,8 +4049,8 @@ public static final int /*long*/ gdk_pixbuf_new_from_file(byte[] filename, int /
  * @param gc cast=(GdkGC *)
  * @param dither cast=(GdkRgbDither)
  */
-public static final native void _gdk_pixbuf_render_to_drawable(int /*long*/ pixbuf, int /*long*/ drawable, int /*long*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);
-public static final void gdk_pixbuf_render_to_drawable(int /*long*/ pixbuf, int /*long*/ drawable, int /*long*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_pixbuf_render_to_drawable(long /*int*/ pixbuf, long /*int*/ drawable, long /*int*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);
+public static final void gdk_pixbuf_render_to_drawable(long /*int*/ pixbuf, long /*int*/ drawable, long /*int*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_to_drawable(pixbuf, drawable, gc, src_x, src_y, dest_x, dest_y, width, height, dither, x_dither, y_dither);
@@ -4064,8 +4064,8 @@ public static final void gdk_pixbuf_render_to_drawable(int /*long*/ pixbuf, int
  * @param alpha_mode cast=(GdkPixbufAlphaMode)
  * @param dither cast=(GdkRgbDither)
  */
-public static final native void _gdk_pixbuf_render_to_drawable_alpha(int /*long*/ pixbuf, int /*long*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither);
-public static final void gdk_pixbuf_render_to_drawable_alpha(int /*long*/ pixbuf, int /*long*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_pixbuf_render_to_drawable_alpha(long /*int*/ pixbuf, long /*int*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither);
+public static final void gdk_pixbuf_render_to_drawable_alpha(long /*int*/ pixbuf, long /*int*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_to_drawable_alpha(pixbuf, drawable, src_x, src_y, dest_x, dest_y, width, height, alpha_mode, alpha_threshold, dither, x_dither, y_dither);
@@ -4078,8 +4078,8 @@ public static final void gdk_pixbuf_render_to_drawable_alpha(int /*long*/ pixbuf
  * @param pixmap_return cast=(GdkDrawable **)
  * @param mask_return cast=(GdkBitmap **)
  */
-public static final native void _gdk_pixbuf_render_pixmap_and_mask(int /*long*/ pixbuf, int /*long*/[] pixmap_return, int /*long*/[] mask_return, int alpha_threshold);
-public static final void gdk_pixbuf_render_pixmap_and_mask(int /*long*/ pixbuf, int /*long*/[] pixmap_return, int /*long*/[] mask_return, int alpha_threshold) {
+public static final native void _gdk_pixbuf_render_pixmap_and_mask(long /*int*/ pixbuf, long /*int*/[] pixmap_return, long /*int*/[] mask_return, int alpha_threshold);
+public static final void gdk_pixbuf_render_pixmap_and_mask(long /*int*/ pixbuf, long /*int*/[] pixmap_return, long /*int*/[] mask_return, int alpha_threshold) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, mask_return, alpha_threshold);
@@ -4097,8 +4097,8 @@ public static final void gdk_pixbuf_render_pixmap_and_mask(int /*long*/ pixbuf,
  * @param option_values=(char **)
  * @param error cast=(GError **)
  */
-public static final native boolean _gdk_pixbuf_save_to_bufferv(int /*long*/ pixbuf, int /*long*/ [] buffer, int /*long*/ [] buffer_size, byte [] type, int /*long*/ [] option_keys, int /*long*/ [] option_values, int /*long*/ [] error);
-public static final boolean gdk_pixbuf_save_to_bufferv(int /*long*/ pixbuf, int /*long*/ [] buffer, int /*long*/ [] buffer_size, byte [] type, int /*long*/ [] option_keys, int /*long*/ [] option_values, int /*long*/ [] error) {
+public static final native boolean _gdk_pixbuf_save_to_bufferv(long /*int*/ pixbuf, long /*int*/ [] buffer, long /*int*/ [] buffer_size, byte [] type, long /*int*/ [] option_keys, long /*int*/ [] option_values, long /*int*/ [] error);
+public static final boolean gdk_pixbuf_save_to_bufferv(long /*int*/ pixbuf, long /*int*/ [] buffer, long /*int*/ [] buffer_size, byte [] type, long /*int*/ [] option_keys, long /*int*/ [] option_values, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_save_to_bufferv(pixbuf, buffer, buffer_size, type, option_keys, option_values, error);
@@ -4114,8 +4114,8 @@ public static final boolean gdk_pixbuf_save_to_bufferv(int /*long*/ pixbuf, int
  * @param scale_x cast=(double)
  * @param scale_y cast=(double)
  */
-public static final native void _gdk_pixbuf_scale(int /*long*/ src, int /*long*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);
-public static final void gdk_pixbuf_scale(int /*long*/ src, int /*long*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type) {
+public static final native void _gdk_pixbuf_scale(long /*int*/ src, long /*int*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);
+public static final void gdk_pixbuf_scale(long /*int*/ src, long /*int*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_scale(src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type);
@@ -4127,8 +4127,8 @@ public static final void gdk_pixbuf_scale(int /*long*/ src, int /*long*/ dest, i
  * @param src cast=(const GdkPixbuf *)
  * @param interp_type cast=(GdkInterpType)
  */
-public static final native int /*long*/ _gdk_pixbuf_scale_simple(int /*long*/ src, int dest_width, int dest_height, int interp_type);
-public static final int /*long*/ gdk_pixbuf_scale_simple(int /*long*/ src, int dest_width, int dest_height, int interp_type) {
+public static final native long /*int*/ _gdk_pixbuf_scale_simple(long /*int*/ src, int dest_width, int dest_height, int interp_type);
+public static final long /*int*/ gdk_pixbuf_scale_simple(long /*int*/ src, int dest_width, int dest_height, int interp_type) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_scale_simple(src, dest_width, dest_height, interp_type);
@@ -4142,8 +4142,8 @@ public static final int /*long*/ gdk_pixbuf_scale_simple(int /*long*/ src, int d
  * @param height cast=(gint)
  * @param depth cast=(gint)
  */
-public static final native int /*long*/ _gdk_pixmap_new(int /*long*/ window, int width, int height, int depth);
-public static final int /*long*/ gdk_pixmap_new(int /*long*/ window, int width, int height, int depth) {
+public static final native long /*int*/ _gdk_pixmap_new(long /*int*/ window, int width, int height, int depth);
+public static final long /*int*/ gdk_pixmap_new(long /*int*/ window, int width, int height, int depth) {
 	lock.lock();
 	try {
 		return _gdk_pixmap_new(window, width, height, depth);
@@ -4159,8 +4159,8 @@ public static final int /*long*/ gdk_pixmap_new(int /*long*/ window, int width,
  * @param cursor cast=(GdkCursor *)
  * @param time cast=(guint32)
  */
-public static final native int _gdk_pointer_grab(int /*long*/ window, boolean owner_events, int event_mask, int /*long*/ confine_to, int /*long*/ cursor, int time);
-public static final int gdk_pointer_grab(int /*long*/ window, boolean owner_events, int event_mask, int /*long*/ confine_to, int /*long*/ cursor, int time) {
+public static final native int _gdk_pointer_grab(long /*int*/ window, boolean owner_events, int event_mask, long /*int*/ confine_to, long /*int*/ cursor, int time);
+public static final int gdk_pointer_grab(long /*int*/ window, boolean owner_events, int event_mask, long /*int*/ confine_to, long /*int*/ cursor, int time) {
 	lock.lock();
 	try {
 		return _gdk_pointer_grab(window, owner_events, event_mask, confine_to, cursor, time);
@@ -4196,8 +4196,8 @@ public static final void gdk_pointer_ungrab(int time) {
  * @param actual_length cast=(gint *)
  * @param data cast=(guchar **)
  */
-public static final native boolean _gdk_property_get(int /*long*/ window, int /*long*/ property, int /*long*/ type, int /*long*/ offset, int /*long*/ length, int pdelete, int /*long*/[] actual_property_type, int[] actual_format, int[] actual_length, int /*long*/[] data);
-public static final boolean gdk_property_get(int /*long*/ window, int /*long*/ property, int /*long*/ type, int /*long*/ offset, int /*long*/ length, int pdelete, int /*long*/[] actual_property_type, int[] actual_format, int[] actual_length, int /*long*/[] data) {
+public static final native boolean _gdk_property_get(long /*int*/ window, long /*int*/ property, long /*int*/ type, long /*int*/ offset, long /*int*/ length, int pdelete, long /*int*/[] actual_property_type, int[] actual_format, int[] actual_length, long /*int*/[] data);
+public static final boolean gdk_property_get(long /*int*/ window, long /*int*/ property, long /*int*/ type, long /*int*/ offset, long /*int*/ length, int pdelete, long /*int*/[] actual_property_type, int[] actual_format, int[] actual_length, long /*int*/[] data) {
 	lock.lock();
 	try {
 		return _gdk_property_get(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data);
@@ -4206,8 +4206,8 @@ public static final boolean gdk_property_get(int /*long*/ window, int /*long*/ p
 	}
 }
 /** @param region cast=(GdkRegion *) */
-public static final native void _gdk_region_destroy(int /*long*/ region);
-public static final void gdk_region_destroy(int /*long*/ region) {
+public static final native void _gdk_region_destroy(long /*int*/ region);
+public static final void gdk_region_destroy(long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_region_destroy(region);
@@ -4216,8 +4216,8 @@ public static final void gdk_region_destroy(int /*long*/ region) {
 	}
 }
 /** @param region cast=(GdkRegion *) */
-public static final native boolean _gdk_region_empty(int /*long*/ region);
-public static final boolean gdk_region_empty(int /*long*/ region) {
+public static final native boolean _gdk_region_empty(long /*int*/ region);
+public static final boolean gdk_region_empty(long /*int*/ region) {
 	lock.lock();
 	try {
 		return _gdk_region_empty(region);
@@ -4229,8 +4229,8 @@ public static final boolean gdk_region_empty(int /*long*/ region) {
  * @param region cast=(GdkRegion *)
  * @param rectangle cast=(GdkRectangle *),flags=no_in
  */
-public static final native void _gdk_region_get_clipbox(int /*long*/ region, GdkRectangle rectangle);
-public static final void gdk_region_get_clipbox(int /*long*/ region, GdkRectangle rectangle) {
+public static final native void _gdk_region_get_clipbox(long /*int*/ region, GdkRectangle rectangle);
+public static final void gdk_region_get_clipbox(long /*int*/ region, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_region_get_clipbox(region, rectangle);
@@ -4243,8 +4243,8 @@ public static final void gdk_region_get_clipbox(int /*long*/ region, GdkRectangl
  * @param rectangles cast=(GdkRectangle **)
  * @param n_rectangles cast=(gint *)
  */
-public static final native void _gdk_region_get_rectangles(int /*long*/ region, int /*long*/[] rectangles, int[] n_rectangles);
-public static final void gdk_region_get_rectangles(int /*long*/ region, int /*long*/[] rectangles, int[] n_rectangles) {
+public static final native void _gdk_region_get_rectangles(long /*int*/ region, long /*int*/[] rectangles, int[] n_rectangles);
+public static final void gdk_region_get_rectangles(long /*int*/ region, long /*int*/[] rectangles, int[] n_rectangles) {
 	lock.lock();
 	try {
 		_gdk_region_get_rectangles(region, rectangles, n_rectangles);
@@ -4256,8 +4256,8 @@ public static final void gdk_region_get_rectangles(int /*long*/ region, int /*lo
  * @param source1 cast=(GdkRegion *)
  * @param source2 cast=(GdkRegion *)
  */
-public static final native void _gdk_region_intersect(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_intersect(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_intersect(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_intersect(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_intersect(source1, source2);
@@ -4265,8 +4265,8 @@ public static final void gdk_region_intersect(int /*long*/ source1, int /*long*/
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_region_new();
-public static final int /*long*/ gdk_region_new() {
+public static final native long /*int*/ _gdk_region_new();
+public static final long /*int*/ gdk_region_new() {
 	lock.lock();
 	try {
 		return _gdk_region_new();
@@ -4279,8 +4279,8 @@ public static final int /*long*/ gdk_region_new() {
  * @param dx cast=(gint)
  * @param dy cast=(gint)
  */
-public static final native void _gdk_region_offset(int /*long*/ region, int dx, int dy);
-public static final void gdk_region_offset(int /*long*/ region, int dx, int dy) {
+public static final native void _gdk_region_offset(long /*int*/ region, int dx, int dy);
+public static final void gdk_region_offset(long /*int*/ region, int dx, int dy) {
 	lock.lock();
 	try {
 		_gdk_region_offset(region, dx, dy);
@@ -4293,8 +4293,8 @@ public static final void gdk_region_offset(int /*long*/ region, int dx, int dy)
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native boolean _gdk_region_point_in(int /*long*/ region, int x, int y);
-public static final boolean gdk_region_point_in(int /*long*/ region, int x, int y) {
+public static final native boolean _gdk_region_point_in(long /*int*/ region, int x, int y);
+public static final boolean gdk_region_point_in(long /*int*/ region, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_region_point_in(region, x, y);
@@ -4306,8 +4306,8 @@ public static final boolean gdk_region_point_in(int /*long*/ region, int x, int
  * @param points cast=(GdkPoint *)
  * @param fill_rule cast=(GdkFillRule)
  */
-public static final native int /*long*/ _gdk_region_polygon(int[] points, int npoints, int fill_rule);
-public static final int /*long*/ gdk_region_polygon(int[] points, int npoints, int fill_rule) {
+public static final native long /*int*/ _gdk_region_polygon(int[] points, int npoints, int fill_rule);
+public static final long /*int*/ gdk_region_polygon(int[] points, int npoints, int fill_rule) {
 	lock.lock();
 	try {
 		return _gdk_region_polygon(points, npoints, fill_rule);
@@ -4316,8 +4316,8 @@ public static final int /*long*/ gdk_region_polygon(int[] points, int npoints, i
 	}
 }
 /** @param rectangle flags=no_out */
-public static final native int /*long*/ _gdk_region_rectangle(GdkRectangle rectangle);
-public static final int /*long*/ gdk_region_rectangle(GdkRectangle rectangle) {
+public static final native long /*int*/ _gdk_region_rectangle(GdkRectangle rectangle);
+public static final long /*int*/ gdk_region_rectangle(GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		return _gdk_region_rectangle(rectangle);
@@ -4329,8 +4329,8 @@ public static final int /*long*/ gdk_region_rectangle(GdkRectangle rectangle) {
  * @param region cast=(GdkRegion *)
  * @param rect cast=(GdkRectangle *),flags=no_out
  */
-public static final native int /*long*/ _gdk_region_rect_in(int /*long*/ region, GdkRectangle rect);
-public static final int /*long*/ gdk_region_rect_in(int /*long*/ region, GdkRectangle rect) {
+public static final native long /*int*/ _gdk_region_rect_in(long /*int*/ region, GdkRectangle rect);
+public static final long /*int*/ gdk_region_rect_in(long /*int*/ region, GdkRectangle rect) {
 	lock.lock();
 	try {
 		return _gdk_region_rect_in(region, rect);
@@ -4342,8 +4342,8 @@ public static final int /*long*/ gdk_region_rect_in(int /*long*/ region, GdkRect
  * @param source1 cast=(GdkRegion *)
  * @param source2 cast=(GdkRegion *)
  */
-public static final native void _gdk_region_subtract(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_subtract(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_subtract(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_subtract(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_subtract(source1, source2);
@@ -4355,8 +4355,8 @@ public static final void gdk_region_subtract(int /*long*/ source1, int /*long*/
  * @param source1 cast=(GdkRegion *)
  * @param source2 cast=(GdkRegion *)
  */
-public static final native void _gdk_region_union(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_union(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_union(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_union(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_union(source1, source2);
@@ -4368,8 +4368,8 @@ public static final void gdk_region_union(int /*long*/ source1, int /*long*/ sou
  * @param region cast=(GdkRegion *)
  * @param rect cast=(GdkRectangle *),flags=no_out
  */
-public static final native void _gdk_region_union_with_rect(int /*long*/ region, GdkRectangle rect);
-public static final void gdk_region_union_with_rect(int /*long*/ region, GdkRectangle rect) {
+public static final native void _gdk_region_union_with_rect(long /*int*/ region, GdkRectangle rect);
+public static final void gdk_region_union_with_rect(long /*int*/ region, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gdk_region_union_with_rect(region, rect);
@@ -4387,8 +4387,8 @@ public static final void gdk_rgb_init() {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gdk_screen_get_default();
-public static final int /*long*/ gdk_screen_get_default() {
+public static final native long /*int*/ _gdk_screen_get_default();
+public static final long /*int*/ gdk_screen_get_default() {
 	lock.lock();
 	try {
 		return _gdk_screen_get_default();
@@ -4402,8 +4402,8 @@ public static final int /*long*/ gdk_screen_get_default() {
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native int _gdk_screen_get_monitor_at_point (int /*long*/ screen, int x, int y);
-public static final int gdk_screen_get_monitor_at_point (int /*long*/ screen, int x, int y) {
+public static final native int _gdk_screen_get_monitor_at_point (long /*int*/ screen, int x, int y);
+public static final int gdk_screen_get_monitor_at_point (long /*int*/ screen, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_monitor_at_point (screen, x, y);
@@ -4416,8 +4416,8 @@ public static final int gdk_screen_get_monitor_at_point (int /*long*/ screen, in
  * @param screen cast=(GdkScreen *)
  * @param window cast=(GdkWindow *)
  */
-public static final native int _gdk_screen_get_monitor_at_window(int /*long*/ screen, int /*long*/ window);
-public static final int gdk_screen_get_monitor_at_window(int /*long*/ screen, int /*long*/ window) {
+public static final native int _gdk_screen_get_monitor_at_window(long /*int*/ screen, long /*int*/ window);
+public static final int gdk_screen_get_monitor_at_window(long /*int*/ screen, long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_monitor_at_window(screen, window);
@@ -4430,8 +4430,8 @@ public static final int gdk_screen_get_monitor_at_window(int /*long*/ screen, in
  * @param screen cast=(GdkScreen *)
  * @param dest flags=no_in
  */
-public static final native void _gdk_screen_get_monitor_geometry (int /*long*/ screen, int monitor_num, GdkRectangle dest);
-public static final void gdk_screen_get_monitor_geometry (int /*long*/ screen, int monitor_num, GdkRectangle dest) {
+public static final native void _gdk_screen_get_monitor_geometry (long /*int*/ screen, int monitor_num, GdkRectangle dest);
+public static final void gdk_screen_get_monitor_geometry (long /*int*/ screen, int monitor_num, GdkRectangle dest) {
 	lock.lock();
 	try {
 		_gdk_screen_get_monitor_geometry(screen, monitor_num, dest);
@@ -4443,8 +4443,8 @@ public static final void gdk_screen_get_monitor_geometry (int /*long*/ screen, i
  * @method flags=dynamic
  * @param screen cast=(GdkScreen *)
  */
-public static final native int _gdk_screen_get_n_monitors(int /*long*/ screen);
-public static final int gdk_screen_get_n_monitors(int /*long*/ screen) {
+public static final native int _gdk_screen_get_n_monitors(long /*int*/ screen);
+public static final int gdk_screen_get_n_monitors(long /*int*/ screen) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_n_monitors(screen);
@@ -4456,8 +4456,8 @@ public static final int gdk_screen_get_n_monitors(int /*long*/ screen) {
  * @method flags=dynamic
  * @param screen cast=(GdkScreen *)
  */
-public static final native int _gdk_screen_get_number(int /*long*/ screen);
-public static final int gdk_screen_get_number(int /*long*/ screen) {
+public static final native int _gdk_screen_get_number(long /*int*/ screen);
+public static final int gdk_screen_get_number(long /*int*/ screen) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_number(screen);
@@ -4509,8 +4509,8 @@ public static final void gdk_set_program_class(byte[] program_class) {
  * @param ctext cast=(guchar **)
  * @param length cast=(gint *)
  */
-public static final native boolean _gdk_utf8_to_compound_text(byte[] str, int /*long*/[] encoding, int[] format, int /*long*/[] ctext, int[] length);
-public static final boolean gdk_utf8_to_compound_text(byte[] str, int /*long*/[] encoding, int[] format, int /*long*/[] ctext, int[] length) {
+public static final native boolean _gdk_utf8_to_compound_text(byte[] str, long /*int*/[] encoding, int[] format, long /*int*/[] ctext, int[] length);
+public static final boolean gdk_utf8_to_compound_text(byte[] str, long /*int*/[] encoding, int[] format, long /*int*/[] ctext, int[] length) {
 	lock.lock();
 	try {
 		return _gdk_utf8_to_compound_text(str, encoding, format, ctext, length);
@@ -4519,8 +4519,8 @@ public static final boolean gdk_utf8_to_compound_text(byte[] str, int /*long*/[]
 	}
 }
 /** @param str cast=(const gchar *) */
-public static final native int /*long*/ _gdk_utf8_to_string_target(byte[] str);
-public static final int /*long*/ gdk_utf8_to_string_target(byte[] str) {
+public static final native long /*int*/ _gdk_utf8_to_string_target(byte[] str);
+public static final long /*int*/ gdk_utf8_to_string_target(byte[] str) {
 	lock.lock();
 	try {
 		return _gdk_utf8_to_string_target(str);
@@ -4533,8 +4533,8 @@ public static final int /*long*/ gdk_utf8_to_string_target(byte[] str) {
  * @param text cast=(guchar *)
  * @param list cast=(gchar ***)
  */
-public static final native int _gdk_text_property_to_utf8_list  (int /*long*/ encoding, int format, int /*long*/ text, int length,  int /*long*/[] list);
-public static final int gdk_text_property_to_utf8_list  (int /*long*/ encoding, int format, int /*long*/ text, int length,  int /*long*/[] list) {
+public static final native int _gdk_text_property_to_utf8_list  (long /*int*/ encoding, int format, long /*int*/ text, int length,  long /*int*/[] list);
+public static final int gdk_text_property_to_utf8_list  (long /*int*/ encoding, int format, long /*int*/ text, int length,  long /*int*/[] list) {
 	lock.lock();
 	try {
 		return _gdk_text_property_to_utf8_list(encoding, format, text, length, list);
@@ -4546,8 +4546,8 @@ public static final int gdk_text_property_to_utf8_list  (int /*long*/ encoding,
  * @method flags=dynamic
  * @param display cast=(GdkDisplay*)
  */
-public static final native void _gtk_tooltip_trigger_tooltip_query (int /*long*/ display);
-public static final void gtk_tooltip_trigger_tooltip_query (int /*long*/ display){
+public static final native void _gtk_tooltip_trigger_tooltip_query (long /*int*/ display);
+public static final void gtk_tooltip_trigger_tooltip_query (long /*int*/ display){
 	lock.lock();
 	try {
 		 _gtk_tooltip_trigger_tooltip_query (display);
@@ -4565,8 +4565,8 @@ public static final  int gdk_unicode_to_keyval(int wc) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_visual_get_system();
-public static final int /*long*/ gdk_visual_get_system() {
+public static final native long /*int*/ _gdk_visual_get_system();
+public static final long /*int*/ gdk_visual_get_system() {
 	lock.lock();
 	try {
 		return _gdk_visual_get_system();
@@ -4578,8 +4578,8 @@ public static final int /*long*/ gdk_visual_get_system() {
  * @param win_x cast=(gint *)
  * @param win_y cast=(gint *)
  */
-public static final native int /*long*/ _gdk_window_at_pointer(int[] win_x, int[] win_y);
-public static final int /*long*/ gdk_window_at_pointer(int[] win_x, int[] win_y) {
+public static final native long /*int*/ _gdk_window_at_pointer(int[] win_x, int[] win_y);
+public static final long /*int*/ gdk_window_at_pointer(int[] win_x, int[] win_y) {
 	lock.lock();
 	try {
 		return _gdk_window_at_pointer(win_x, win_y);
@@ -4591,8 +4591,8 @@ public static final int /*long*/ gdk_window_at_pointer(int[] win_x, int[] win_y)
  * @param window cast=(GdkWindow *)
  * @param rectangle cast=(GdkRectangle *),flags=no_out
  */
-public static final native void _gdk_window_begin_paint_rect(int /*long*/ window, GdkRectangle rectangle);
-public static final void gdk_window_begin_paint_rect(int /*long*/ window, GdkRectangle rectangle) {
+public static final native void _gdk_window_begin_paint_rect(long /*int*/ window, GdkRectangle rectangle);
+public static final void gdk_window_begin_paint_rect(long /*int*/ window, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_window_begin_paint_rect(window, rectangle);
@@ -4601,8 +4601,8 @@ public static final void gdk_window_begin_paint_rect(int /*long*/ window, GdkRec
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_clear_area(int /*long*/ window, int x, int y, int width, int height);
-public static final void gdk_window_clear_area(int /*long*/ window, int x, int y, int width, int height) {
+public static final native void _gdk_window_clear_area(long /*int*/ window, int x, int y, int width, int height);
+public static final void gdk_window_clear_area(long /*int*/ window, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_window_clear_area(window, x, y, width, height);
@@ -4611,8 +4611,8 @@ public static final void gdk_window_clear_area(int /*long*/ window, int x, int y
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_destroy(int /*long*/ window);
-public static final void gdk_window_destroy(int /*long*/ window) {
+public static final native void _gdk_window_destroy(long /*int*/ window);
+public static final void gdk_window_destroy(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_destroy(window);
@@ -4621,8 +4621,8 @@ public static final void gdk_window_destroy(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_end_paint(int /*long*/ window);
-public static final void gdk_window_end_paint(int /*long*/ window) {
+public static final native void _gdk_window_end_paint(long /*int*/ window);
+public static final void gdk_window_end_paint(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_end_paint(window);
@@ -4631,8 +4631,8 @@ public static final void gdk_window_end_paint(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native int /*long*/ _gdk_window_get_children(int /*long*/ window);
-public static final int /*long*/ gdk_window_get_children(int /*long*/ window) {
+public static final native long /*int*/ _gdk_window_get_children(long /*int*/ window);
+public static final long /*int*/ gdk_window_get_children(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_children(window);
@@ -4641,8 +4641,8 @@ public static final int /*long*/ gdk_window_get_children(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native int _gdk_window_get_events(int /*long*/ window);
-public static final int gdk_window_get_events(int /*long*/ window) {
+public static final native int _gdk_window_get_events(long /*int*/ window);
+public static final int gdk_window_get_events(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_events(window);
@@ -4651,8 +4651,8 @@ public static final int gdk_window_get_events(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_focus(int /*long*/ window, int timestamp);
-public static final void gdk_window_focus(int /*long*/ window, int timestamp) {
+public static final native void _gdk_window_focus(long /*int*/ window, int timestamp);
+public static final void gdk_window_focus(long /*int*/ window, int timestamp) {
 	lock.lock();
 	try {
 		_gdk_window_focus(window, timestamp);
@@ -4661,8 +4661,8 @@ public static final void gdk_window_focus(int /*long*/ window, int timestamp) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_freeze_updates(int /*long*/ window);
-public static final void gdk_window_freeze_updates(int /*long*/ window) {
+public static final native void _gdk_window_freeze_updates(long /*int*/ window);
+public static final void gdk_window_freeze_updates(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_freeze_updates(window);
@@ -4674,8 +4674,8 @@ public static final void gdk_window_freeze_updates(int /*long*/ window) {
  * @param window cast=(GdkWindow *)
  * @param rect cast=(GdkRectangle *),flags=no_in
  */
-public static final native void _gdk_window_get_frame_extents(int /*long*/ window, GdkRectangle rect);
-public static final void gdk_window_get_frame_extents(int /*long*/ window, GdkRectangle rect) {
+public static final native void _gdk_window_get_frame_extents(long /*int*/ window, GdkRectangle rect);
+public static final void gdk_window_get_frame_extents(long /*int*/ window, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gdk_window_get_frame_extents(window, rect);
@@ -4689,8 +4689,8 @@ public static final void gdk_window_get_frame_extents(int /*long*/ window, GdkRe
  * @param x_offset cast=(gint *)
  * @param y_offset cast=(gint *)
  */
-public static final native void _gdk_window_get_internal_paint_info(int /*long*/ window, int /*long*/ [] real_drawable, int[] x_offset, int[] y_offset);
-public static final void gdk_window_get_internal_paint_info(int /*long*/ window, int /*long*/ [] real_drawable, int[] x_offset, int[] y_offset) {
+public static final native void _gdk_window_get_internal_paint_info(long /*int*/ window, long /*int*/ [] real_drawable, int[] x_offset, int[] y_offset);
+public static final void gdk_window_get_internal_paint_info(long /*int*/ window, long /*int*/ [] real_drawable, int[] x_offset, int[] y_offset) {
 	lock.lock();
 	try {
 		_gdk_window_get_internal_paint_info(window, real_drawable, x_offset, y_offset);
@@ -4703,8 +4703,8 @@ public static final void gdk_window_get_internal_paint_info(int /*long*/ window,
  * @param x cast=(gint *)
  * @param y cast=(gint *)
  */
-public static final native int _gdk_window_get_origin(int /*long*/ window, int[] x, int[] y);
-public static final int gdk_window_get_origin(int /*long*/ window, int[] x, int[] y) {
+public static final native int _gdk_window_get_origin(long /*int*/ window, int[] x, int[] y);
+public static final int gdk_window_get_origin(long /*int*/ window, int[] x, int[] y) {
 	lock.lock();
 	try {
 		return _gdk_window_get_origin(window, x, y);
@@ -4713,8 +4713,8 @@ public static final int gdk_window_get_origin(int /*long*/ window, int[] x, int[
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native int /*long*/ _gdk_window_get_parent(int /*long*/ window);
-public static final int /*long*/ gdk_window_get_parent(int /*long*/ window) {
+public static final native long /*int*/ _gdk_window_get_parent(long /*int*/ window);
+public static final long /*int*/ gdk_window_get_parent(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_parent(window);
@@ -4728,8 +4728,8 @@ public static final int /*long*/ gdk_window_get_parent(int /*long*/ window) {
  * @param y cast=(gint *)
  * @param mask cast=(GdkModifierType *)
  */
-public static final native int /*long*/ _gdk_window_get_pointer(int /*long*/ window, int[] x, int[] y, int[] mask);
-public static final int /*long*/ gdk_window_get_pointer(int /*long*/ window, int[] x, int[] y, int[] mask) {
+public static final native long /*int*/ _gdk_window_get_pointer(long /*int*/ window, int[] x, int[] y, int[] mask);
+public static final long /*int*/ gdk_window_get_pointer(long /*int*/ window, int[] x, int[] y, int[] mask) {
 	lock.lock();
 	try {
 		return _gdk_window_get_pointer(window, x, y, mask);
@@ -4742,8 +4742,8 @@ public static final int /*long*/ gdk_window_get_pointer(int /*long*/ window, int
  * @param x cast=(gint *)
  * @param y cast=(gint *)
  */
-public static final native void _gdk_window_get_position(int /*long*/ window, int[] x, int[] y);
-public static final void gdk_window_get_position(int /*long*/ window, int[] x, int[] y) {
+public static final native void _gdk_window_get_position(long /*int*/ window, int[] x, int[] y);
+public static final void gdk_window_get_position(long /*int*/ window, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gdk_window_get_position(window, x, y);
@@ -4755,8 +4755,8 @@ public static final void gdk_window_get_position(int /*long*/ window, int[] x, i
  * @param window cast=(GdkWindow *)
  * @param data cast=(gpointer *)
  */
-public static final native void _gdk_window_get_user_data(int /*long*/ window, int /*long*/[] data);
-public static final void gdk_window_get_user_data(int /*long*/ window, int /*long*/[] data) {
+public static final native void _gdk_window_get_user_data(long /*int*/ window, long /*int*/[] data);
+public static final void gdk_window_get_user_data(long /*int*/ window, long /*int*/[] data) {
 	lock.lock();
 	try {
 		_gdk_window_get_user_data(window, data);
@@ -4765,8 +4765,8 @@ public static final void gdk_window_get_user_data(int /*long*/ window, int /*lon
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_hide(int /*long*/ window);
-public static final void gdk_window_hide(int /*long*/ window) {
+public static final native void _gdk_window_hide(long /*int*/ window);
+public static final void gdk_window_hide(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_hide(window);
@@ -4779,8 +4779,8 @@ public static final void gdk_window_hide(int /*long*/ window) {
  * @param rectangle cast=(GdkRectangle *),flags=no_out
  * @param invalidate_children cast=(gboolean)
  */
-public static final native void _gdk_window_invalidate_rect(int /*long*/ window, GdkRectangle rectangle, boolean invalidate_children);
-public static final void gdk_window_invalidate_rect(int /*long*/ window, GdkRectangle rectangle, boolean invalidate_children) {
+public static final native void _gdk_window_invalidate_rect(long /*int*/ window, GdkRectangle rectangle, boolean invalidate_children);
+public static final void gdk_window_invalidate_rect(long /*int*/ window, GdkRectangle rectangle, boolean invalidate_children) {
 	lock.lock();
 	try {
 		_gdk_window_invalidate_rect(window, rectangle, invalidate_children);
@@ -4793,8 +4793,8 @@ public static final void gdk_window_invalidate_rect(int /*long*/ window, GdkRect
  * @param region cast=(GdkRegion *)
  * @param invalidate_children cast=(gboolean)
  */
-public static final native void _gdk_window_invalidate_region(int /*long*/ window, int /*long*/ region, boolean invalidate_children);
-public static final void gdk_window_invalidate_region(int /*long*/ window, int /*long*/ region, boolean invalidate_children) {
+public static final native void _gdk_window_invalidate_region(long /*int*/ window, long /*int*/ region, boolean invalidate_children);
+public static final void gdk_window_invalidate_region(long /*int*/ window, long /*int*/ region, boolean invalidate_children) {
 	lock.lock();
 	try {
 		_gdk_window_invalidate_region(window, region, invalidate_children);
@@ -4803,8 +4803,8 @@ public static final void gdk_window_invalidate_region(int /*long*/ window, int /
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native boolean _gdk_window_is_visible(int /*long*/ window);
-public static final boolean gdk_window_is_visible(int /*long*/ window) {
+public static final native boolean _gdk_window_is_visible(long /*int*/ window);
+public static final boolean gdk_window_is_visible(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_is_visible(window);
@@ -4813,8 +4813,8 @@ public static final boolean gdk_window_is_visible(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_move(int /*long*/ window, int x, int y);
-public static final void gdk_window_move(int /*long*/ window, int x, int y) {
+public static final native void _gdk_window_move(long /*int*/ window, int x, int y);
+public static final void gdk_window_move(long /*int*/ window, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_window_move(window, x, y);
@@ -4826,8 +4826,8 @@ public static final void gdk_window_move(int /*long*/ window, int x, int y) {
  * @param parent cast=(GdkWindow *)
  * @param attributes flags=no_out
  */
-public static final native int /*long*/ _gdk_window_new(int /*long*/ parent, GdkWindowAttr attributes, int attributes_mask);
-public static final int /*long*/ gdk_window_new(int /*long*/ parent, GdkWindowAttr attributes, int attributes_mask) {
+public static final native long /*int*/ _gdk_window_new(long /*int*/ parent, GdkWindowAttr attributes, int attributes_mask);
+public static final long /*int*/ gdk_window_new(long /*int*/ parent, GdkWindowAttr attributes, int attributes_mask) {
 	lock.lock();
 	try {
 		return _gdk_window_new(parent, attributes, attributes_mask);
@@ -4836,8 +4836,8 @@ public static final int /*long*/ gdk_window_new(int /*long*/ parent, GdkWindowAt
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_lower(int /*long*/ window);
-public static final void gdk_window_lower(int /*long*/ window) {
+public static final native void _gdk_window_lower(long /*int*/ window);
+public static final void gdk_window_lower(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_lower(window);
@@ -4858,8 +4858,8 @@ public static final void gdk_window_process_all_updates() {
  * @param window cast=(GdkWindow *)
  * @param update_children cast=(gboolean)
  */
-public static final native void _gdk_window_process_updates(int /*long*/ window, boolean update_children);
-public static final void gdk_window_process_updates(int /*long*/ window, boolean update_children) {
+public static final native void _gdk_window_process_updates(long /*int*/ window, boolean update_children);
+public static final void gdk_window_process_updates(long /*int*/ window, boolean update_children) {
 	lock.lock();
 	try {
 		_gdk_window_process_updates(window, update_children);
@@ -4868,8 +4868,8 @@ public static final void gdk_window_process_updates(int /*long*/ window, boolean
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_raise(int /*long*/ window);
-public static final void gdk_window_raise(int /*long*/ window) {
+public static final native void _gdk_window_raise(long /*int*/ window);
+public static final void gdk_window_raise(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_raise(window);
@@ -4878,8 +4878,8 @@ public static final void gdk_window_raise(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_resize(int /*long*/ window, int width, int height);
-public static final void gdk_window_resize(int /*long*/ window, int width, int height) {
+public static final native void _gdk_window_resize(long /*int*/ window, int width, int height);
+public static final void gdk_window_resize(long /*int*/ window, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_window_resize(window, width, height);
@@ -4888,8 +4888,8 @@ public static final void gdk_window_resize(int /*long*/ window, int width, int h
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_scroll(int /*long*/ window, int dx, int dy);
-public static final void gdk_window_scroll(int /*long*/ window, int dx, int dy) {
+public static final native void _gdk_window_scroll(long /*int*/ window, int dx, int dy);
+public static final void gdk_window_scroll(long /*int*/ window, int dx, int dy) {
 	lock.lock();
 	try {
 		_gdk_window_scroll(window, dx, dy);
@@ -4902,8 +4902,8 @@ public static final void gdk_window_scroll(int /*long*/ window, int dx, int dy)
  * @param window cast=(GdkWindow *)
  * @param accept_focus cast=(gboolean)
  */
-public static final native void _gdk_window_set_accept_focus(int /*long*/ window, boolean accept_focus);
-public static final void gdk_window_set_accept_focus(int /*long*/ window, boolean accept_focus) {
+public static final native void _gdk_window_set_accept_focus(long /*int*/ window, boolean accept_focus);
+public static final void gdk_window_set_accept_focus(long /*int*/ window, boolean accept_focus) {
 	lock.lock();
 	try {
 		_gdk_window_set_accept_focus(window, accept_focus);
@@ -4916,8 +4916,8 @@ public static final void gdk_window_set_accept_focus(int /*long*/ window, boolea
  * @param pixmap cast=(GdkPixmap *)
  * @param parent_relative cast=(gboolean)
  */
-public static final native void _gdk_window_set_back_pixmap(int /*long*/ window, int /*long*/ pixmap, boolean parent_relative);
-public static final void gdk_window_set_back_pixmap(int /*long*/ window, int /*long*/ pixmap, boolean parent_relative) {
+public static final native void _gdk_window_set_back_pixmap(long /*int*/ window, long /*int*/ pixmap, boolean parent_relative);
+public static final void gdk_window_set_back_pixmap(long /*int*/ window, long /*int*/ pixmap, boolean parent_relative) {
 	lock.lock();
 	try {
 		_gdk_window_set_back_pixmap(window, pixmap, parent_relative);
@@ -4929,8 +4929,8 @@ public static final void gdk_window_set_back_pixmap(int /*long*/ window, int /*l
  * @param window cast=(GdkWindow *)
  * @param cursor cast=(GdkCursor *)
  */
-public static final native void _gdk_window_set_cursor(int /*long*/ window, int /*long*/ cursor);
-public static final void gdk_window_set_cursor(int /*long*/ window, int /*long*/ cursor) {
+public static final native void _gdk_window_set_cursor(long /*int*/ window, long /*int*/ cursor);
+public static final void gdk_window_set_cursor(long /*int*/ window, long /*int*/ cursor) {
 	lock.lock();
 	try {
 		_gdk_window_set_cursor(window, cursor);
@@ -4952,8 +4952,8 @@ public static final void gdk_window_set_debug_updates(boolean setting) {
  * @param window cast=(GdkWindow *)
  * @param decorations cast=(GdkWMDecoration)
  */
-public static final native void _gdk_window_set_decorations(int /*long*/ window, int decorations);
-public static final void gdk_window_set_decorations(int /*long*/ window, int decorations) {
+public static final native void _gdk_window_set_decorations(long /*int*/ window, int decorations);
+public static final void gdk_window_set_decorations(long /*int*/ window, int decorations) {
 	lock.lock();
 	try {
 		_gdk_window_set_decorations(window, decorations);
@@ -4962,8 +4962,8 @@ public static final void gdk_window_set_decorations(int /*long*/ window, int dec
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_set_events(int /*long*/ window, int event_mask);
-public static final void gdk_window_set_events(int /*long*/ window, int event_mask) {
+public static final native void _gdk_window_set_events(long /*int*/ window, int event_mask);
+public static final void gdk_window_set_events(long /*int*/ window, int event_mask) {
 	lock.lock();
 	try {
 		_gdk_window_set_events(window, event_mask);
@@ -4977,8 +4977,8 @@ public static final void gdk_window_set_events(int /*long*/ window, int event_ma
  * @param pixmap cast=(GdkPixmap *)
  * @param mask cast=(GdkBitmap *)
  */
-public static final native void _gdk_window_set_icon(int /*long*/ window, int /*long*/ icon_window, int /*long*/ pixmap, int /*long*/ mask);
-public static final void gdk_window_set_icon(int /*long*/ window, int /*long*/ icon_window, int /*long*/ pixmap, int /*long*/ mask) {
+public static final native void _gdk_window_set_icon(long /*int*/ window, long /*int*/ icon_window, long /*int*/ pixmap, long /*int*/ mask);
+public static final void gdk_window_set_icon(long /*int*/ window, long /*int*/ icon_window, long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gdk_window_set_icon(window, icon_window, pixmap, mask);
@@ -4990,8 +4990,8 @@ public static final void gdk_window_set_icon(int /*long*/ window, int /*long*/ i
  * @param window cast=(GdkWindow *)
  * @param pixbufs cast=(GList *)
  */
-public static final native void _gdk_window_set_icon_list(int /*long*/ window, int /*long*/ pixbufs);
-public static final void gdk_window_set_icon_list(int /*long*/ window, int /*long*/ pixbufs) {
+public static final native void _gdk_window_set_icon_list(long /*int*/ window, long /*int*/ pixbufs);
+public static final void gdk_window_set_icon_list(long /*int*/ window, long /*int*/ pixbufs) {
 	lock.lock();
 	try {
 		_gdk_window_set_icon_list(window, pixbufs);
@@ -5004,8 +5004,8 @@ public static final void gdk_window_set_icon_list(int /*long*/ window, int /*lon
  * @param window cast=(GdkWindow *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gdk_window_set_keep_above(int /*long*/ window, boolean setting);
-public static final void gdk_window_set_keep_above(int /*long*/ window, boolean setting) {
+public static final native void _gdk_window_set_keep_above(long /*int*/ window, boolean setting);
+public static final void gdk_window_set_keep_above(long /*int*/ window, boolean setting) {
 	lock.lock();
 	try {
 		_gdk_window_set_keep_above(window, setting);
@@ -5017,8 +5017,8 @@ public static final void gdk_window_set_keep_above(int /*long*/ window, boolean
  * @param window cast=(GdkWindow *)
  * @param override_redirect cast=(gboolean)
  */
-public static final native void _gdk_window_set_override_redirect(int /*long*/ window, boolean override_redirect);
-public static final void gdk_window_set_override_redirect(int /*long*/ window, boolean override_redirect) {
+public static final native void _gdk_window_set_override_redirect(long /*int*/ window, boolean override_redirect);
+public static final void gdk_window_set_override_redirect(long /*int*/ window, boolean override_redirect) {
 	lock.lock();
 	try {
 		_gdk_window_set_override_redirect(window, override_redirect);
@@ -5030,8 +5030,8 @@ public static final void gdk_window_set_override_redirect(int /*long*/ window, b
  * @param window cast=(GdkWindow *)
  * @param user_data cast=(gpointer)
  */
-public static final native void _gdk_window_set_user_data(int /*long*/ window, int /*long*/ user_data);
-public static final void gdk_window_set_user_data(int /*long*/ window, int /*long*/ user_data) {
+public static final native void _gdk_window_set_user_data(long /*int*/ window, long /*int*/ user_data);
+public static final void gdk_window_set_user_data(long /*int*/ window, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		_gdk_window_set_user_data(window, user_data);
@@ -5043,8 +5043,8 @@ public static final void gdk_window_set_user_data(int /*long*/ window, int /*lon
  * @param window cast=(GdkWindow *)
  * @param shape_region cast=(GdkRegion *)
  */
-public static final native void _gdk_window_shape_combine_region (int /*long*/ window, int /*long*/  shape_region, int offset_x,  int offset_y);
-public static final void gdk_window_shape_combine_region (int /*long*/ window, int /*long*/  shape_region, int offset_x,  int offset_y) {
+public static final native void _gdk_window_shape_combine_region (long /*int*/ window, long /*int*/  shape_region, int offset_x,  int offset_y);
+public static final void gdk_window_shape_combine_region (long /*int*/ window, long /*int*/  shape_region, int offset_x,  int offset_y) {
 	lock.lock();
 	try {
 		_gdk_window_shape_combine_region(window, shape_region, offset_x, offset_y);
@@ -5053,8 +5053,8 @@ public static final void gdk_window_shape_combine_region (int /*long*/ window, i
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_show(int /*long*/ window);
-public static final void gdk_window_show(int /*long*/ window) {
+public static final native void _gdk_window_show(long /*int*/ window);
+public static final void gdk_window_show(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_show(window);
@@ -5063,8 +5063,8 @@ public static final void gdk_window_show(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_show_unraised(int /*long*/ window);
-public static final void gdk_window_show_unraised(int /*long*/ window) {
+public static final native void _gdk_window_show_unraised(long /*int*/ window);
+public static final void gdk_window_show_unraised(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_show_unraised(window);
@@ -5073,8 +5073,8 @@ public static final void gdk_window_show_unraised(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GdkWindow *) */
-public static final native void _gdk_window_thaw_updates(int /*long*/ window);
-public static final void gdk_window_thaw_updates(int /*long*/ window) {
+public static final native void _gdk_window_thaw_updates(long /*int*/ window);
+public static final void gdk_window_thaw_updates(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_thaw_updates(window);
@@ -5082,8 +5082,8 @@ public static final void gdk_window_thaw_updates(int /*long*/ window) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_accel_group_new();
-public static final int /*long*/ gtk_accel_group_new() {
+public static final native long /*int*/ _gtk_accel_group_new();
+public static final long /*int*/ gtk_accel_group_new() {
 	lock.lock();
 	try {
 		return _gtk_accel_group_new();
@@ -5096,8 +5096,8 @@ public static final int /*long*/ gtk_accel_group_new() {
  * @param accelKey cast=(guint)
  * @param accelMods cast=(GdkModifierType)
  */
-public static final native boolean _gtk_accel_groups_activate(int /*long*/ accelGroup, int accelKey, int accelMods);
-public static final boolean gtk_accel_groups_activate(int /*long*/ accelGroup, int accelKey, int accelMods) {
+public static final native boolean _gtk_accel_groups_activate(long /*int*/ accelGroup, int accelKey, int accelMods);
+public static final boolean gtk_accel_groups_activate(long /*int*/ accelGroup, int accelKey, int accelMods) {
 	lock.lock();
 	try {
 		return _gtk_accel_groups_activate(accelGroup, accelKey, accelMods);
@@ -5109,8 +5109,8 @@ public static final boolean gtk_accel_groups_activate(int /*long*/ accelGroup, i
  * @param accel_label cast=(GtkAccelLabel *)
  * @param accel_widget cast=(GtkWidget *)
  */
-public static final native void _gtk_accel_label_set_accel_widget(int /*long*/ accel_label, int /*long*/ accel_widget);
-public static final void gtk_accel_label_set_accel_widget(int /*long*/ accel_label, int /*long*/ accel_widget) {
+public static final native void _gtk_accel_label_set_accel_widget(long /*int*/ accel_label, long /*int*/ accel_widget);
+public static final void gtk_accel_label_set_accel_widget(long /*int*/ accel_label, long /*int*/ accel_widget) {
 	lock.lock();
 	try {
 		_gtk_accel_label_set_accel_widget(accel_label, accel_widget);
@@ -5119,8 +5119,8 @@ public static final void gtk_accel_label_set_accel_widget(int /*long*/ accel_lab
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native void _gtk_adjustment_changed(int /*long*/ adjustment);
-public static final void gtk_adjustment_changed(int /*long*/ adjustment) {
+public static final native void _gtk_adjustment_changed(long /*int*/ adjustment);
+public static final void gtk_adjustment_changed(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		_gtk_adjustment_changed(adjustment);
@@ -5135,8 +5135,8 @@ public static final void gtk_adjustment_changed(int /*long*/ adjustment) {
  * @param step_increment cast=(gdouble)
  * @param page_increment cast=(gdouble)
  */
-public static final native int /*long*/ _gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
-public static final int /*long*/ gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
+public static final native long /*int*/ _gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
+public static final long /*int*/ gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
 	lock.lock();
 	try {
 		return _gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size);
@@ -5148,8 +5148,8 @@ public static final int /*long*/ gtk_adjustment_new(double value, double lower,
  * @param adjustment cast=(GtkAdjustment *)
  * @param value cast=(gdouble)
  */
-public static final native void _gtk_adjustment_set_value(int /*long*/ adjustment, double value);
-public static final void gtk_adjustment_set_value(int /*long*/ adjustment, double value) {
+public static final native void _gtk_adjustment_set_value(long /*int*/ adjustment, double value);
+public static final void gtk_adjustment_set_value(long /*int*/ adjustment, double value) {
 	lock.lock();
 	try {
 		_gtk_adjustment_set_value(adjustment, value);
@@ -5158,8 +5158,8 @@ public static final void gtk_adjustment_set_value(int /*long*/ adjustment, doubl
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native void _gtk_adjustment_value_changed(int /*long*/ adjustment);
-public static final void gtk_adjustment_value_changed(int /*long*/ adjustment) {
+public static final native void _gtk_adjustment_value_changed(long /*int*/ adjustment);
+public static final void gtk_adjustment_value_changed(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		_gtk_adjustment_value_changed(adjustment);
@@ -5171,8 +5171,8 @@ public static final void gtk_adjustment_value_changed(int /*long*/ adjustment) {
  * @param arrow_type cast=(GtkArrowType)
  * @param shadow_type cast=(GtkShadowType)
  */
-public static final native int /*long*/ _gtk_arrow_new(int arrow_type, int shadow_type);
-public static final int /*long*/ gtk_arrow_new(int arrow_type, int shadow_type) {
+public static final native long /*int*/ _gtk_arrow_new(int arrow_type, int shadow_type);
+public static final long /*int*/ gtk_arrow_new(int arrow_type, int shadow_type) {
 	lock.lock();
 	try {
 		return _gtk_arrow_new(arrow_type, shadow_type);
@@ -5185,8 +5185,8 @@ public static final int /*long*/ gtk_arrow_new(int arrow_type, int shadow_type)
  * @param arrow_type cast=(GtkArrowType)
  * @param shadow_type cast=(GtkShadowType)
  */
-public static final native void _gtk_arrow_set(int /*long*/ arrow, int arrow_type, int shadow_type);
-public static final void gtk_arrow_set(int /*long*/ arrow, int arrow_type, int shadow_type) {
+public static final native void _gtk_arrow_set(long /*int*/ arrow, int arrow_type, int shadow_type);
+public static final void gtk_arrow_set(long /*int*/ arrow, int arrow_type, int shadow_type) {
 	lock.lock();
 	try {
 		_gtk_arrow_set(arrow, arrow_type, shadow_type);
@@ -5195,8 +5195,8 @@ public static final void gtk_arrow_set(int /*long*/ arrow, int arrow_type, int s
 	}
 }
 /** @param bin cast=(GtkBin *) */
-public static final native int /*long*/ _gtk_bin_get_child(int /*long*/ bin);
-public static final int /*long*/ gtk_bin_get_child(int /*long*/ bin) {
+public static final native long /*int*/ _gtk_bin_get_child(long /*int*/ bin);
+public static final long /*int*/ gtk_bin_get_child(long /*int*/ bin) {
 	lock.lock();
 	try {
 		return _gtk_bin_get_child(bin);
@@ -5205,8 +5205,8 @@ public static final int /*long*/ gtk_bin_get_child(int /*long*/ bin) {
 	}
 }
 /** @param border cast=(GtkBorder *) */
-public static final native void _gtk_border_free(int /*long*/ border);
-public static final void gtk_border_free(int /*long*/ border) {
+public static final native void _gtk_border_free(long /*int*/ border);
+public static final void gtk_border_free(long /*int*/ border) {
 	lock.lock();
 	try {
 		_gtk_border_free(border);
@@ -5215,8 +5215,8 @@ public static final void gtk_border_free(int /*long*/ border) {
 	}
 }
 /** @param box cast=(GtkBox *) */
-public static final native void _gtk_box_set_spacing(int /*long*/ box, int spacing);
-public static final void gtk_box_set_spacing(int /*long*/ box, int spacing) {
+public static final native void _gtk_box_set_spacing(long /*int*/ box, int spacing);
+public static final void gtk_box_set_spacing(long /*int*/ box, int spacing) {
 	lock.lock();
 	try {
 		_gtk_box_set_spacing(box, spacing);
@@ -5228,8 +5228,8 @@ public static final void gtk_box_set_spacing(int /*long*/ box, int spacing) {
  * @param box cast=(GtkBox *)
  * @param child cast=(GtkWidget *)
  */
-public static final native void _gtk_box_set_child_packing(int /*long*/ box, int /*long*/ child, boolean expand, boolean fill, int padding, int pack_type);
-public static final void gtk_box_set_child_packing(int /*long*/ box, int /*long*/ child, boolean expand, boolean fill, int padding, int pack_type) {
+public static final native void _gtk_box_set_child_packing(long /*int*/ box, long /*int*/ child, boolean expand, boolean fill, int padding, int pack_type);
+public static final void gtk_box_set_child_packing(long /*int*/ box, long /*int*/ child, boolean expand, boolean fill, int padding, int pack_type) {
 	lock.lock();
 	try {
 		_gtk_box_set_child_packing(box, child, expand, fill, padding, pack_type);
@@ -5238,8 +5238,8 @@ public static final void gtk_box_set_child_packing(int /*long*/ box, int /*long*
 	}
 }
 /** @param button cast=(GtkButton *) */
-public static final native void _gtk_button_clicked(int /*long*/ button);
-public static final void gtk_button_clicked(int /*long*/ button) {
+public static final native void _gtk_button_clicked(long /*int*/ button);
+public static final void gtk_button_clicked(long /*int*/ button) {
 	lock.lock();
 	try {
 		_gtk_button_clicked(button);
@@ -5248,8 +5248,8 @@ public static final void gtk_button_clicked(int /*long*/ button) {
 	}
 }
 /** @param button cast=(GtkButton *) */
-public static final native int _gtk_button_get_relief(int /*long*/ button);
-public static final int gtk_button_get_relief(int /*long*/ button) {
+public static final native int _gtk_button_get_relief(long /*int*/ button);
+public static final int gtk_button_get_relief(long /*int*/ button) {
 	lock.lock();
 	try {
 		return _gtk_button_get_relief(button);
@@ -5257,8 +5257,8 @@ public static final int gtk_button_get_relief(int /*long*/ button) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_button_new();
-public static final int /*long*/ gtk_button_new() {
+public static final native long /*int*/ _gtk_button_new();
+public static final long /*int*/ gtk_button_new() {
 	lock.lock();
 	try {
 		return _gtk_button_new();
@@ -5270,8 +5270,8 @@ public static final int /*long*/ gtk_button_new() {
  * @param button cast=(GtkButton *)
  * @param newstyle cast=(GtkReliefStyle)
  */
-public static final native void _gtk_button_set_relief(int /*long*/ button, int newstyle);
-public static final void gtk_button_set_relief(int /*long*/ button, int newstyle) {
+public static final native void _gtk_button_set_relief(long /*int*/ button, int newstyle);
+public static final void gtk_button_set_relief(long /*int*/ button, int newstyle) {
 	lock.lock();
 	try {
 		_gtk_button_set_relief(button, newstyle);
@@ -5280,8 +5280,8 @@ public static final void gtk_button_set_relief(int /*long*/ button, int newstyle
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_calendar_new();
-public static final int /*long*/ gtk_calendar_new() {
+public static final native long /*int*/ _gtk_calendar_new();
+public static final long /*int*/ gtk_calendar_new() {
 	lock.lock();
 	try {
 		return _gtk_calendar_new();
@@ -5295,8 +5295,8 @@ public static final int /*long*/ gtk_calendar_new() {
  * @param month cast=(guint)
  * @param year cast=(guint)
  */
-public static final native boolean /*long*/ _gtk_calendar_select_month(int /*long*/ calendar, int month, int year);
-public static final boolean /*long*/ gtk_calendar_select_month(int /*long*/ calendar, int month, int year) {
+public static final native boolean /*long*/ _gtk_calendar_select_month(long /*int*/ calendar, int month, int year);
+public static final boolean /*long*/ gtk_calendar_select_month(long /*int*/ calendar, int month, int year) {
 	lock.lock();
 	try {
 		return _gtk_calendar_select_month(calendar, month, year);
@@ -5309,8 +5309,8 @@ public static final boolean /*long*/ gtk_calendar_select_month(int /*long*/ cale
  * @param calendar cast=(GtkCalendar *)
  * @param day cast=(guint)
  */
-public static final native void _gtk_calendar_select_day(int /*long*/ calendar, int day);
-public static final void gtk_calendar_select_day(int /*long*/ calendar, int day) {
+public static final native void _gtk_calendar_select_day(long /*int*/ calendar, int day);
+public static final void gtk_calendar_select_day(long /*int*/ calendar, int day) {
 	lock.lock();
 	try {
 		_gtk_calendar_select_day(calendar, day);
@@ -5323,8 +5323,8 @@ public static final void gtk_calendar_select_day(int /*long*/ calendar, int day)
  * @param calendar cast=(GtkCalendar *)
  * @param flags cast=(GtkCalendarDisplayOptions)
  */
-public static final native void _gtk_calendar_set_display_options(int /*long*/ calendar, int flags);
-public static final void gtk_calendar_set_display_options(int /*long*/ calendar, int flags) {
+public static final native void _gtk_calendar_set_display_options(long /*int*/ calendar, int flags);
+public static final void gtk_calendar_set_display_options(long /*int*/ calendar, int flags) {
 	lock.lock();
 	try {
 		_gtk_calendar_set_display_options(calendar, flags);
@@ -5337,8 +5337,8 @@ public static final void gtk_calendar_set_display_options(int /*long*/ calendar,
  * @param calendar cast=(GtkCalendar *)
  * @param flags cast=(GtkCalendarDisplayOptions)
  */
-public static final native void _gtk_calendar_display_options(int /*long*/ calendar, int flags);
-public static final void gtk_calendar_display_options(int /*long*/ calendar, int flags) {
+public static final native void _gtk_calendar_display_options(long /*int*/ calendar, int flags);
+public static final void gtk_calendar_display_options(long /*int*/ calendar, int flags) {
 	lock.lock();
 	try {
 		_gtk_calendar_display_options(calendar, flags);
@@ -5353,8 +5353,8 @@ public static final void gtk_calendar_display_options(int /*long*/ calendar, int
  * @param month cast=(guint *)
  * @param day cast=(guint *)
  */
-public static final native void _gtk_calendar_get_date(int /*long*/ calendar, int[] year, int[] month, int[] day);
-public static final void gtk_calendar_get_date(int /*long*/ calendar, int[] year, int[] month, int[] day) {
+public static final native void _gtk_calendar_get_date(long /*int*/ calendar, int[] year, int[] month, int[] day);
+public static final void gtk_calendar_get_date(long /*int*/ calendar, int[] year, int[] month, int[] day) {
 	lock.lock();
 	try {
 		_gtk_calendar_get_date(calendar, year, month, day);
@@ -5363,8 +5363,8 @@ public static final void gtk_calendar_get_date(int /*long*/ calendar, int[] year
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_cell_layout_clear(int /*long*/ cell_layout);
-public static final void gtk_cell_layout_clear(int /*long*/ cell_layout) {
+public static final native void _gtk_cell_layout_clear(long /*int*/ cell_layout);
+public static final void gtk_cell_layout_clear(long /*int*/ cell_layout) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_clear(cell_layout);
@@ -5373,8 +5373,8 @@ public static final void gtk_cell_layout_clear(int /*long*/ cell_layout) {
 	}
 }
 /** @method flags=no_gen */
-public static final native void _gtk_cell_layout_set_attributes(int /*long*/ cell_layout, int /*long*/ cell, byte[] attribute, int column, int /*long*/ sentinel);
-public static final void gtk_cell_layout_set_attributes(int /*long*/ cell_layout, int /*long*/ cell, byte[] attribute, int column, int /*long*/ sentinel) {
+public static final native void _gtk_cell_layout_set_attributes(long /*int*/ cell_layout, long /*int*/ cell, byte[] attribute, int column, long /*int*/ sentinel);
+public static final void gtk_cell_layout_set_attributes(long /*int*/ cell_layout, long /*int*/ cell, byte[] attribute, int column, long /*int*/ sentinel) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_set_attributes(cell_layout, cell, attribute, column, sentinel);
@@ -5383,8 +5383,8 @@ public static final void gtk_cell_layout_set_attributes(int /*long*/ cell_layout
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_cell_layout_pack_start(int /*long*/ cell_layout, int /*long*/ cell, boolean expand);
-public static final void gtk_cell_layout_pack_start(int /*long*/ cell_layout, int /*long*/ cell, boolean expand) {
+public static final native void _gtk_cell_layout_pack_start(long /*int*/ cell_layout, long /*int*/ cell, boolean expand);
+public static final void gtk_cell_layout_pack_start(long /*int*/ cell_layout, long /*int*/ cell, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_pack_start(cell_layout, cell, expand);
@@ -5401,8 +5401,8 @@ public static final void gtk_cell_layout_pack_start(int /*long*/ cell_layout, in
  * @param width cast=(gint *)
  * @param height cast=(gint *)
  */
-public static final native void _gtk_cell_renderer_get_size(int /*long*/ cell, int /*long*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height);
-public static final void gtk_cell_renderer_get_size(int /*long*/ cell, int /*long*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
+public static final native void _gtk_cell_renderer_get_size(long /*int*/ cell, long /*int*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height);
+public static final void gtk_cell_renderer_get_size(long /*int*/ cell, long /*int*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gtk_cell_renderer_get_size(cell, widget, area, x_offset, y_offset, width, height);
@@ -5410,8 +5410,8 @@ public static final void gtk_cell_renderer_get_size(int /*long*/ cell, int /*lon
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_pixbuf_new();
-public static final int /*long*/ gtk_cell_renderer_pixbuf_new() {
+public static final native long /*int*/ _gtk_cell_renderer_pixbuf_new();
+public static final long /*int*/ gtk_cell_renderer_pixbuf_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_pixbuf_new();
@@ -5419,8 +5419,8 @@ public static final int /*long*/ gtk_cell_renderer_pixbuf_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_text_new();
-public static final int /*long*/ gtk_cell_renderer_text_new() {
+public static final native long /*int*/ _gtk_cell_renderer_text_new();
+public static final long /*int*/ gtk_cell_renderer_text_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_text_new();
@@ -5428,8 +5428,8 @@ public static final int /*long*/ gtk_cell_renderer_text_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_toggle_new();
-public static final int /*long*/ gtk_cell_renderer_toggle_new() {
+public static final native long /*int*/ _gtk_cell_renderer_toggle_new();
+public static final long /*int*/ gtk_cell_renderer_toggle_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_toggle_new();
@@ -5437,8 +5437,8 @@ public static final int /*long*/ gtk_cell_renderer_toggle_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_check_button_new();
-public static final int /*long*/ gtk_check_button_new() {
+public static final native long /*int*/ _gtk_check_button_new();
+public static final long /*int*/ gtk_check_button_new() {
 	lock.lock();
 	try {
 		return _gtk_check_button_new();
@@ -5447,8 +5447,8 @@ public static final int /*long*/ gtk_check_button_new() {
 	}
 }
 /** @param check_menu_item cast=(GtkCheckMenuItem *) */
-public static final native boolean _gtk_check_menu_item_get_active(int /*long*/ check_menu_item);
-public static final boolean gtk_check_menu_item_get_active(int /*long*/ check_menu_item) {
+public static final native boolean _gtk_check_menu_item_get_active(long /*int*/ check_menu_item);
+public static final boolean gtk_check_menu_item_get_active(long /*int*/ check_menu_item) {
 	lock.lock();
 	try {
 		return _gtk_check_menu_item_get_active(check_menu_item);
@@ -5457,8 +5457,8 @@ public static final boolean gtk_check_menu_item_get_active(int /*long*/ check_me
 	}
 }
 /** @param label cast=(const gchar *) */
-public static final native int /*long*/ _gtk_check_menu_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_check_menu_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_check_menu_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_check_menu_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_check_menu_item_new_with_label(label);
@@ -5470,8 +5470,8 @@ public static final int /*long*/ gtk_check_menu_item_new_with_label(byte[] label
  * @param wid cast=(GtkCheckMenuItem *)
  * @param active cast=(gboolean)
  */
-public static final native void _gtk_check_menu_item_set_active(int /*long*/ wid, boolean active);
-public static final void gtk_check_menu_item_set_active(int /*long*/ wid, boolean active) {
+public static final native void _gtk_check_menu_item_set_active(long /*int*/ wid, boolean active);
+public static final void gtk_check_menu_item_set_active(long /*int*/ wid, boolean active) {
 	lock.lock();
 	try {
 		_gtk_check_menu_item_set_active(wid, active);
@@ -5479,8 +5479,8 @@ public static final void gtk_check_menu_item_set_active(int /*long*/ wid, boolea
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_check_version(int required_major, int required_minor, int required_micro);
-public static final int /*long*/ gtk_check_version(int required_major, int required_minor, int required_micro) {
+public static final native long /*int*/ _gtk_check_version(int required_major, int required_minor, int required_micro);
+public static final long /*int*/ gtk_check_version(int required_major, int required_minor, int required_micro) {
 	lock.lock();
 	try {
 		return _gtk_check_version(required_major, required_minor, required_micro);
@@ -5489,8 +5489,8 @@ public static final int /*long*/ gtk_check_version(int required_major, int requi
 	}
 }
 /** @param clipboard cast=(GtkClipboard *) */
-public static final native void _gtk_clipboard_clear(int /*long*/ clipboard);
-public static final void gtk_clipboard_clear(int /*long*/ clipboard) {
+public static final native void _gtk_clipboard_clear(long /*int*/ clipboard);
+public static final void gtk_clipboard_clear(long /*int*/ clipboard) {
 	lock.lock();
 	try {
 		_gtk_clipboard_clear(clipboard);
@@ -5499,8 +5499,8 @@ public static final void gtk_clipboard_clear(int /*long*/ clipboard) {
 	}
 }
 /** @param selection cast=(GdkAtom) */
-public static final native int /*long*/ _gtk_clipboard_get(int /*long*/ selection);
-public static final int /*long*/ gtk_clipboard_get(int /*long*/ selection) {
+public static final native long /*int*/ _gtk_clipboard_get(long /*int*/ selection);
+public static final long /*int*/ gtk_clipboard_get(long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_get(selection);
@@ -5516,8 +5516,8 @@ public static final int /*long*/ gtk_clipboard_get(int /*long*/ selection) {
  * @param clear_func cast=(GtkClipboardClearFunc)
  * @param user_data cast=(GObject *)
  */
-public static final native boolean _gtk_clipboard_set_with_data(int /*long*/ clipboard, int /*long*/ target, int n_targets, int /*long*/ get_func, int /*long*/ clear_func, int /*long*/ user_data);
-public static final boolean gtk_clipboard_set_with_data(int /*long*/ clipboard, int /*long*/ target, int n_targets, int /*long*/ get_func, int /*long*/ clear_func, int /*long*/ user_data) {
+public static final native boolean _gtk_clipboard_set_with_data(long /*int*/ clipboard, long /*int*/ target, int n_targets, long /*int*/ get_func, long /*int*/ clear_func, long /*int*/ user_data);
+public static final boolean gtk_clipboard_set_with_data(long /*int*/ clipboard, long /*int*/ target, int n_targets, long /*int*/ get_func, long /*int*/ clear_func, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_set_with_data(clipboard, target, n_targets, get_func, clear_func, user_data);
@@ -5529,8 +5529,8 @@ public static final boolean gtk_clipboard_set_with_data(int /*long*/ clipboard,
  * @param clipboard cast=(GtkClipboard *)
  * @param target cast=(GdkAtom)
  */
-public static final native int /*long*/ _gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target);
-public static final int /*long*/ gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target) {
+public static final native long /*int*/ _gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target);
+public static final long /*int*/ gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_wait_for_contents(clipboard, target);
@@ -5539,8 +5539,8 @@ public static final int /*long*/ gtk_clipboard_wait_for_contents(int /*long*/ cl
 	}
 }
 /** @param title cast=(const gchar *) */
-public static final native int /*long*/ _gtk_color_selection_dialog_new(byte[] title);
-public static final int /*long*/ gtk_color_selection_dialog_new(byte[] title) {
+public static final native long /*int*/ _gtk_color_selection_dialog_new(byte[] title);
+public static final long /*int*/ gtk_color_selection_dialog_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_color_selection_dialog_new(title);
@@ -5552,8 +5552,8 @@ public static final int /*long*/ gtk_color_selection_dialog_new(byte[] title) {
  * @param colorsel cast=(GtkColorSelection *)
  * @param color cast=(GdkColor *),flags=no_in
  */
-public static final native void _gtk_color_selection_get_current_color(int /*long*/ colorsel, GdkColor color);
-public static final void gtk_color_selection_get_current_color(int /*long*/ colorsel, GdkColor color) {
+public static final native void _gtk_color_selection_get_current_color(long /*int*/ colorsel, GdkColor color);
+public static final void gtk_color_selection_get_current_color(long /*int*/ colorsel, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_color_selection_get_current_color(colorsel, color);
@@ -5565,8 +5565,8 @@ public static final void gtk_color_selection_get_current_color(int /*long*/ colo
  * @param colorsel cast=(GtkColorSelection *)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gtk_color_selection_set_current_color(int /*long*/ colorsel, GdkColor color);
-public static final void gtk_color_selection_set_current_color(int /*long*/ colorsel, GdkColor color) {
+public static final native void _gtk_color_selection_set_current_color(long /*int*/ colorsel, GdkColor color);
+public static final void gtk_color_selection_set_current_color(long /*int*/ colorsel, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_color_selection_set_current_color(colorsel, color);
@@ -5575,8 +5575,8 @@ public static final void gtk_color_selection_set_current_color(int /*long*/ colo
 	}
 }
 /** @param colorsel cast=(GtkColorSelection *) */
-public static final native void _gtk_color_selection_set_has_palette(int /*long*/ colorsel, boolean has_palette);
-public static final void gtk_color_selection_set_has_palette(int /*long*/ colorsel, boolean has_palette) {
+public static final native void _gtk_color_selection_set_has_palette(long /*int*/ colorsel, boolean has_palette);
+public static final void gtk_color_selection_set_has_palette(long /*int*/ colorsel, boolean has_palette) {
 	lock.lock();
 	try {
 		_gtk_color_selection_set_has_palette(colorsel, has_palette);
@@ -5585,8 +5585,8 @@ public static final void gtk_color_selection_set_has_palette(int /*long*/ colors
 	}
 }
 /** @param combo cast=(GtkCombo *) */
-public static final native void _gtk_combo_disable_activate(int /*long*/ combo);
-public static final void gtk_combo_disable_activate(int /*long*/ combo) {
+public static final native void _gtk_combo_disable_activate(long /*int*/ combo);
+public static final void gtk_combo_disable_activate(long /*int*/ combo) {
 	lock.lock();
 	try {
 		_gtk_combo_disable_activate(combo);
@@ -5594,8 +5594,8 @@ public static final void gtk_combo_disable_activate(int /*long*/ combo) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_combo_new();
-public static final int /*long*/ gtk_combo_new() {
+public static final native long /*int*/ _gtk_combo_new();
+public static final long /*int*/ gtk_combo_new() {
 	lock.lock();
 	try {
 		return _gtk_combo_new();
@@ -5607,8 +5607,8 @@ public static final int /*long*/ gtk_combo_new() {
  * @param combo cast=(GtkCombo *)
  * @param val cast=(gboolean)
  */
-public static final native void _gtk_combo_set_case_sensitive(int /*long*/ combo, boolean val);
-public static final void gtk_combo_set_case_sensitive(int /*long*/ combo, boolean val) {
+public static final native void _gtk_combo_set_case_sensitive(long /*int*/ combo, boolean val);
+public static final void gtk_combo_set_case_sensitive(long /*int*/ combo, boolean val) {
 	lock.lock();
 	try {
 		_gtk_combo_set_case_sensitive(combo, val);
@@ -5617,8 +5617,8 @@ public static final void gtk_combo_set_case_sensitive(int /*long*/ combo, boolea
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_set_focus_on_click(int /*long*/ combo, boolean val);
-public static final void gtk_combo_box_set_focus_on_click(int /*long*/ combo, boolean val) {
+public static final native void _gtk_combo_box_set_focus_on_click(long /*int*/ combo, boolean val);
+public static final void gtk_combo_box_set_focus_on_click(long /*int*/ combo, boolean val) {
 	lock.lock();
 	try {
 		_gtk_combo_box_set_focus_on_click(combo, val);
@@ -5630,8 +5630,8 @@ public static final void gtk_combo_box_set_focus_on_click(int /*long*/ combo, bo
  * @param combo cast=(GtkCombo *)
  * @param strings cast=(GList *)
  */
-public static final native void _gtk_combo_set_popdown_strings(int /*long*/ combo, int /*long*/ strings);
-public static final void gtk_combo_set_popdown_strings(int /*long*/ combo, int /*long*/ strings) {
+public static final native void _gtk_combo_set_popdown_strings(long /*int*/ combo, long /*int*/ strings);
+public static final void gtk_combo_set_popdown_strings(long /*int*/ combo, long /*int*/ strings) {
 	lock.lock();
 	try {
 		_gtk_combo_set_popdown_strings(combo, strings);
@@ -5640,8 +5640,8 @@ public static final void gtk_combo_set_popdown_strings(int /*long*/ combo, int /
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_combo_box_entry_new_text();
-public static final int /*long*/ gtk_combo_box_entry_new_text() {
+public static final native long /*int*/ _gtk_combo_box_entry_new_text();
+public static final long /*int*/ gtk_combo_box_entry_new_text() {
 	lock.lock();
 	try {
 		return _gtk_combo_box_entry_new_text();
@@ -5650,8 +5650,8 @@ public static final int /*long*/ gtk_combo_box_entry_new_text() {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_combo_box_new_text();
-public static final int /*long*/ gtk_combo_box_new_text() {
+public static final native long /*int*/ _gtk_combo_box_new_text();
+public static final long /*int*/ gtk_combo_box_new_text() {
 	lock.lock();
 	try {
 		return _gtk_combo_box_new_text();
@@ -5660,8 +5660,8 @@ public static final int /*long*/ gtk_combo_box_new_text() {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_insert_text(int /*long*/ combo_box, int position, byte[] text);
-public static final void gtk_combo_box_insert_text(int /*long*/ combo_box, int position, byte[] text) {
+public static final native void _gtk_combo_box_insert_text(long /*int*/ combo_box, int position, byte[] text);
+public static final void gtk_combo_box_insert_text(long /*int*/ combo_box, int position, byte[] text) {
 	lock.lock();
 	try {
 		_gtk_combo_box_insert_text(combo_box, position, text);
@@ -5670,8 +5670,8 @@ public static final void gtk_combo_box_insert_text(int /*long*/ combo_box, int p
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_remove_text(int /*long*/ combo_box, int position);
-public static final void gtk_combo_box_remove_text(int /*long*/ combo_box, int position) {
+public static final native void _gtk_combo_box_remove_text(long /*int*/ combo_box, int position);
+public static final void gtk_combo_box_remove_text(long /*int*/ combo_box, int position) {
 	lock.lock();
 	try {
 		_gtk_combo_box_remove_text(combo_box, position);
@@ -5680,8 +5680,8 @@ public static final void gtk_combo_box_remove_text(int /*long*/ combo_box, int p
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_combo_box_get_active(int /*long*/ combo_box);
-public static final int gtk_combo_box_get_active(int /*long*/ combo_box) {
+public static final native int _gtk_combo_box_get_active(long /*int*/ combo_box);
+public static final int gtk_combo_box_get_active(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		return _gtk_combo_box_get_active(combo_box);
@@ -5690,8 +5690,8 @@ public static final int gtk_combo_box_get_active(int /*long*/ combo_box) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_combo_box_get_model(int /*long*/ combo_box);
-public static final int /*long*/ gtk_combo_box_get_model(int /*long*/ combo_box) {
+public static final native long /*int*/ _gtk_combo_box_get_model(long /*int*/ combo_box);
+public static final long /*int*/ gtk_combo_box_get_model(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		return _gtk_combo_box_get_model(combo_box);
@@ -5700,8 +5700,8 @@ public static final int /*long*/ gtk_combo_box_get_model(int /*long*/ combo_box)
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_set_active(int /*long*/ combo_box, int index);
-public static final void gtk_combo_box_set_active(int /*long*/ combo_box, int index) {
+public static final native void _gtk_combo_box_set_active(long /*int*/ combo_box, int index);
+public static final void gtk_combo_box_set_active(long /*int*/ combo_box, int index) {
 	lock.lock();
 	try {
 		_gtk_combo_box_set_active(combo_box, index);
@@ -5710,8 +5710,8 @@ public static final void gtk_combo_box_set_active(int /*long*/ combo_box, int in
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_popup(int /*long*/ combo_box);
-public static final void gtk_combo_box_popup(int /*long*/ combo_box) {
+public static final native void _gtk_combo_box_popup(long /*int*/ combo_box);
+public static final void gtk_combo_box_popup(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		_gtk_combo_box_popup(combo_box);
@@ -5720,8 +5720,8 @@ public static final void gtk_combo_box_popup(int /*long*/ combo_box) {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_combo_box_popdown(int /*long*/ combo_box);
-public static final void gtk_combo_box_popdown(int /*long*/ combo_box) {
+public static final native void _gtk_combo_box_popdown(long /*int*/ combo_box);
+public static final void gtk_combo_box_popdown(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		_gtk_combo_box_popdown(combo_box);
@@ -5733,8 +5733,8 @@ public static final void gtk_combo_box_popdown(int /*long*/ combo_box) {
  * @param container cast=(GtkContainer *)
  * @param widget cast=(GtkWidget *)
  */
-public static final native void _gtk_container_add(int /*long*/ container, int /*long*/ widget);
-public static final void gtk_container_add(int /*long*/ container, int /*long*/ widget) {
+public static final native void _gtk_container_add(long /*int*/ container, long /*int*/ widget);
+public static final void gtk_container_add(long /*int*/ container, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_container_add(container, widget);
@@ -5747,8 +5747,8 @@ public static final void gtk_container_add(int /*long*/ container, int /*long*/
  * @param callback cast=(GtkCallback)
  * @param callback_data cast=(gpointer)
  */
-public static final native void _gtk_container_forall(int /*long*/ container, int /*long*/ callback, int /*long*/ callback_data);
-public static final void gtk_container_forall(int /*long*/ container, int /*long*/ callback, int /*long*/ callback_data) {
+public static final native void _gtk_container_forall(long /*int*/ container, long /*int*/ callback, long /*int*/ callback_data);
+public static final void gtk_container_forall(long /*int*/ container, long /*int*/ callback, long /*int*/ callback_data) {
 	lock.lock();
 	try {
 		_gtk_container_forall(container, callback, callback_data);
@@ -5757,8 +5757,8 @@ public static final void gtk_container_forall(int /*long*/ container, int /*long
 	}
 }
 /** @param container cast=(GtkContainer *) */
-public static final native int _gtk_container_get_border_width(int /*long*/ container);
-public static final int gtk_container_get_border_width(int /*long*/ container) {
+public static final native int _gtk_container_get_border_width(long /*int*/ container);
+public static final int gtk_container_get_border_width(long /*int*/ container) {
 	lock.lock();
 	try {
 		return _gtk_container_get_border_width(container);
@@ -5767,8 +5767,8 @@ public static final int gtk_container_get_border_width(int /*long*/ container) {
 	}
 }
 /** @param container cast=(GtkContainer *) */
-public static final native int /*long*/ _gtk_container_get_children(int /*long*/ container);
-public static final int /*long*/ gtk_container_get_children(int /*long*/ container) {
+public static final native long /*int*/ _gtk_container_get_children(long /*int*/ container);
+public static final long /*int*/ gtk_container_get_children(long /*int*/ container) {
 	lock.lock();
 	try {
 		return _gtk_container_get_children(container);
@@ -5780,8 +5780,8 @@ public static final int /*long*/ gtk_container_get_children(int /*long*/ contain
  * @param container cast=(GtkContainer *)
  * @param widget cast=(GtkWidget *)
  */
-public static final native void _gtk_container_remove(int /*long*/ container, int /*long*/ widget);
-public static final void gtk_container_remove(int /*long*/ container, int /*long*/ widget) {
+public static final native void _gtk_container_remove(long /*int*/ container, long /*int*/ widget);
+public static final void gtk_container_remove(long /*int*/ container, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_container_remove(container, widget);
@@ -5790,8 +5790,8 @@ public static final void gtk_container_remove(int /*long*/ container, int /*long
 	}
 }
 /** @param container cast=(GtkContainer *) */
-public static final native void _gtk_container_resize_children(int /*long*/ container);
-public static final void gtk_container_resize_children(int /*long*/ container) {
+public static final native void _gtk_container_resize_children(long /*int*/ container);
+public static final void gtk_container_resize_children(long /*int*/ container) {
 	lock.lock();
 	try {
 		_gtk_container_resize_children(container);
@@ -5803,8 +5803,8 @@ public static final void gtk_container_resize_children(int /*long*/ container) {
  * @param container cast=(GtkContainer *)
  * @param border_width cast=(guint)
  */
-public static final native void _gtk_container_set_border_width(int /*long*/ container, int border_width);
-public static final void gtk_container_set_border_width(int /*long*/ container, int border_width) {
+public static final native void _gtk_container_set_border_width(long /*int*/ container, int border_width);
+public static final void gtk_container_set_border_width(long /*int*/ container, int border_width) {
 	lock.lock();
 	try {
 		_gtk_container_set_border_width(container, border_width);
@@ -5817,8 +5817,8 @@ public static final void gtk_container_set_border_width(int /*long*/ container,
  * @param button_text cast=(const gchar *)
  * @param response_id cast=(gint)
  */
-public static final native int /*long*/ _gtk_dialog_add_button(int /*long*/ dialog, byte[]  button_text, int response_id);
-public static final int /*long*/ gtk_dialog_add_button(int /*long*/ dialog, byte[]  button_text, int response_id) {
+public static final native long /*int*/ _gtk_dialog_add_button(long /*int*/ dialog, byte[]  button_text, int response_id);
+public static final long /*int*/ gtk_dialog_add_button(long /*int*/ dialog, byte[]  button_text, int response_id) {
 	lock.lock();
 	try {
 		return _gtk_dialog_add_button(dialog, button_text, response_id);
@@ -5827,8 +5827,8 @@ public static final int /*long*/ gtk_dialog_add_button(int /*long*/ dialog, byte
 	}
 }
 /** @param dialog cast=(GtkDialog *) */
-public static final native int _gtk_dialog_run(int /*long*/ dialog);
-public static final int gtk_dialog_run(int /*long*/ dialog) {
+public static final native int _gtk_dialog_run(long /*int*/ dialog);
+public static final int gtk_dialog_run(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_dialog_run(dialog);
@@ -5843,8 +5843,8 @@ public static final int gtk_dialog_run(int /*long*/ dialog) {
  * @param button cast=(gint)
  * @param event cast=(GdkEvent *)
  */
-public static final native int /*long*/ _gtk_drag_begin(int /*long*/ widget, int /*long*/ targets, int actions, int button, int /*long*/ event);
-public static final int /*long*/ gtk_drag_begin(int /*long*/ widget, int /*long*/ targets, int actions, int button, int /*long*/ event) {
+public static final native long /*int*/ _gtk_drag_begin(long /*int*/ widget, long /*int*/ targets, int actions, int button, long /*int*/ event);
+public static final long /*int*/ gtk_drag_begin(long /*int*/ widget, long /*int*/ targets, int actions, int button, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_drag_begin(widget, targets, actions, button, event);
@@ -5859,8 +5859,8 @@ public static final int /*long*/ gtk_drag_begin(int /*long*/ widget, int /*long*
  * @param current_x cast=(gint)
  * @param current_y cast=(gint)
  */
-public static final native boolean _gtk_drag_check_threshold(int /*long*/ widget, int start_x, int start_y, int current_x, int current_y);
-public static final boolean gtk_drag_check_threshold(int /*long*/ widget, int start_x, int start_y, int current_x, int current_y) {
+public static final native boolean _gtk_drag_check_threshold(long /*int*/ widget, int start_x, int start_y, int current_x, int current_y);
+public static final boolean gtk_drag_check_threshold(long /*int*/ widget, int start_x, int start_y, int current_x, int current_y) {
 	lock.lock();
 	try {
 		return _gtk_drag_check_threshold(widget, start_x, start_y, current_x, current_y);
@@ -5873,8 +5873,8 @@ public static final boolean gtk_drag_check_threshold(int /*long*/ widget, int st
  * @param context cast=(GdkDragContext *)
  * @param target_list cast=(GtkTargetList *)
  */
-public static final native int /*long*/ _gtk_drag_dest_find_target(int /*long*/ widget, int /*long*/ context, int /*long*/ target_list);
-public static final int /*long*/ gtk_drag_dest_find_target(int /*long*/ widget, int /*long*/ context, int /*long*/ target_list) {
+public static final native long /*int*/ _gtk_drag_dest_find_target(long /*int*/ widget, long /*int*/ context, long /*int*/ target_list);
+public static final long /*int*/ gtk_drag_dest_find_target(long /*int*/ widget, long /*int*/ context, long /*int*/ target_list) {
 	lock.lock();
 	try {
 		return _gtk_drag_dest_find_target(widget, context, target_list);
@@ -5889,8 +5889,8 @@ public static final int /*long*/ gtk_drag_dest_find_target(int /*long*/ widget,
  * @param n_targets cast=(gint)
  * @param actions cast=(GdkDragAction)
  */
-public static final native void _gtk_drag_dest_set(int /*long*/ widget, int flags, int /*long*/ targets, int n_targets, int actions);
-public static final void gtk_drag_dest_set(int /*long*/ widget, int flags, int /*long*/ targets, int n_targets, int actions) {
+public static final native void _gtk_drag_dest_set(long /*int*/ widget, int flags, long /*int*/ targets, int n_targets, int actions);
+public static final void gtk_drag_dest_set(long /*int*/ widget, int flags, long /*int*/ targets, int n_targets, int actions) {
 	lock.lock();
 	try {
 		_gtk_drag_dest_set(widget, flags, targets, n_targets, actions);
@@ -5899,8 +5899,8 @@ public static final void gtk_drag_dest_set(int /*long*/ widget, int flags, int /
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_drag_dest_unset(int /*long*/ widget);
-public static final void gtk_drag_dest_unset(int /*long*/ widget) {
+public static final native void _gtk_drag_dest_unset(long /*int*/ widget);
+public static final void gtk_drag_dest_unset(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_drag_dest_unset(widget);
@@ -5914,8 +5914,8 @@ public static final void gtk_drag_dest_unset(int /*long*/ widget) {
  * @param delete cast=(gboolean)
  * @param time cast=(guint32)
  */
-public static final native void _gtk_drag_finish(int /*long*/ context, boolean success, boolean delete, int time);
-public static final void gtk_drag_finish(int /*long*/ context, boolean success, boolean delete, int time) {
+public static final native void _gtk_drag_finish(long /*int*/ context, boolean success, boolean delete, int time);
+public static final void gtk_drag_finish(long /*int*/ context, boolean success, boolean delete, int time) {
 	lock.lock();
 	try {
 		_gtk_drag_finish(context, success, delete, time);
@@ -5929,8 +5929,8 @@ public static final void gtk_drag_finish(int /*long*/ context, boolean success,
  * @param target cast=(GdkAtom)
  * @param time cast=(guint32)
  */
-public static final native void _gtk_drag_get_data(int /*long*/ widget, int /*long*/ context, int /*long*/ target, int time);
-public static final void gtk_drag_get_data(int /*long*/ widget, int /*long*/ context, int /*long*/ target, int time) {
+public static final native void _gtk_drag_get_data(long /*int*/ widget, long /*int*/ context, long /*int*/ target, int time);
+public static final void gtk_drag_get_data(long /*int*/ widget, long /*int*/ context, long /*int*/ target, int time) {
 	lock.lock();
 	try {
 		_gtk_drag_get_data(widget, context, target, time);
@@ -5942,8 +5942,8 @@ public static final void gtk_drag_get_data(int /*long*/ widget, int /*long*/ con
  * @param context cast=(GdkDragContext *)
  * @param pixbuf cast=(GdkPixbuf *)
  */
-public static final native void _gtk_drag_set_icon_pixbuf(int /*long*/ context, int /*long*/ pixbuf, int hot_x, int hot_y);
-public static final void gtk_drag_set_icon_pixbuf(int /*long*/ context, int /*long*/ pixbuf, int hot_x, int hot_y) {
+public static final native void _gtk_drag_set_icon_pixbuf(long /*int*/ context, long /*int*/ pixbuf, int hot_x, int hot_y);
+public static final void gtk_drag_set_icon_pixbuf(long /*int*/ context, long /*int*/ pixbuf, int hot_x, int hot_y) {
 	lock.lock();
 	try {
 		_gtk_drag_set_icon_pixbuf(context, pixbuf, hot_x, hot_y);
@@ -5951,8 +5951,8 @@ public static final void gtk_drag_set_icon_pixbuf(int /*long*/ context, int /*lo
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_drawing_area_new();
-public static final int /*long*/ gtk_drawing_area_new() {
+public static final native long /*int*/ _gtk_drawing_area_new();
+public static final long /*int*/ gtk_drawing_area_new() {
 	lock.lock();
 	try {
 		return _gtk_drawing_area_new();
@@ -5961,8 +5961,8 @@ public static final int /*long*/ gtk_drawing_area_new() {
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native void _gtk_editable_copy_clipboard(int /*long*/ editable);
-public static final void gtk_editable_copy_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_copy_clipboard(long /*int*/ editable);
+public static final void gtk_editable_copy_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_copy_clipboard(editable);
@@ -5971,8 +5971,8 @@ public static final void gtk_editable_copy_clipboard(int /*long*/ editable) {
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native void _gtk_editable_cut_clipboard(int /*long*/ editable);
-public static final void gtk_editable_cut_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_cut_clipboard(long /*int*/ editable);
+public static final void gtk_editable_cut_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_cut_clipboard(editable);
@@ -5981,8 +5981,8 @@ public static final void gtk_editable_cut_clipboard(int /*long*/ editable) {
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native void _gtk_editable_delete_selection(int /*long*/ editable);
-public static final void gtk_editable_delete_selection(int /*long*/ editable) {
+public static final native void _gtk_editable_delete_selection(long /*int*/ editable);
+public static final void gtk_editable_delete_selection(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_delete_selection(editable);
@@ -5995,8 +5995,8 @@ public static final void gtk_editable_delete_selection(int /*long*/ editable) {
  * @param start_pos cast=(gint)
  * @param end_pos cast=(gint)
  */
-public static final native void _gtk_editable_delete_text(int /*long*/ editable, int start_pos, int end_pos);
-public static final void gtk_editable_delete_text(int /*long*/ editable, int start_pos, int end_pos) {
+public static final native void _gtk_editable_delete_text(long /*int*/ editable, int start_pos, int end_pos);
+public static final void gtk_editable_delete_text(long /*int*/ editable, int start_pos, int end_pos) {
 	lock.lock();
 	try {
 		_gtk_editable_delete_text(editable, start_pos, end_pos);
@@ -6009,8 +6009,8 @@ public static final void gtk_editable_delete_text(int /*long*/ editable, int sta
  * @param start_pos cast=(gint)
  * @param end_pos cast=(gint)
  */
-public static final native int /*long*/ _gtk_editable_get_chars(int /*long*/ editable, int start_pos, int end_pos);
-public static final int /*long*/ gtk_editable_get_chars(int /*long*/ editable, int start_pos, int end_pos) {
+public static final native long /*int*/ _gtk_editable_get_chars(long /*int*/ editable, int start_pos, int end_pos);
+public static final long /*int*/ gtk_editable_get_chars(long /*int*/ editable, int start_pos, int end_pos) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_chars(editable, start_pos, end_pos);
@@ -6019,8 +6019,8 @@ public static final int /*long*/ gtk_editable_get_chars(int /*long*/ editable, i
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native boolean _gtk_editable_get_editable(int /*long*/ editable);
-public static final boolean gtk_editable_get_editable(int /*long*/ editable) {
+public static final native boolean _gtk_editable_get_editable(long /*int*/ editable);
+public static final boolean gtk_editable_get_editable(long /*int*/ editable) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_editable(editable);
@@ -6029,8 +6029,8 @@ public static final boolean gtk_editable_get_editable(int /*long*/ editable) {
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native int _gtk_editable_get_position(int /*long*/ editable);
-public static final int gtk_editable_get_position(int /*long*/ editable) {
+public static final native int _gtk_editable_get_position(long /*int*/ editable);
+public static final int gtk_editable_get_position(long /*int*/ editable) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_position(editable);
@@ -6043,8 +6043,8 @@ public static final int gtk_editable_get_position(int /*long*/ editable) {
  * @param start cast=(gint *)
  * @param end cast=(gint *)
  */
-public static final native boolean _gtk_editable_get_selection_bounds(int /*long*/ editable, int[] start, int[] end);
-public static final boolean gtk_editable_get_selection_bounds(int /*long*/ editable, int[] start, int[] end) {
+public static final native boolean _gtk_editable_get_selection_bounds(long /*int*/ editable, int[] start, int[] end);
+public static final boolean gtk_editable_get_selection_bounds(long /*int*/ editable, int[] start, int[] end) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_selection_bounds(editable, start, end);
@@ -6058,8 +6058,8 @@ public static final boolean gtk_editable_get_selection_bounds(int /*long*/ edita
  * @param new_text_length cast=(gint)
  * @param position cast=(gint *)
  */
-public static final native void _gtk_editable_insert_text(int /*long*/ editable, byte[] new_text, int new_text_length, int[] position);
-public static final void gtk_editable_insert_text(int /*long*/ editable, byte[] new_text, int new_text_length, int[] position) {
+public static final native void _gtk_editable_insert_text(long /*int*/ editable, byte[] new_text, int new_text_length, int[] position);
+public static final void gtk_editable_insert_text(long /*int*/ editable, byte[] new_text, int new_text_length, int[] position) {
 	lock.lock();
 	try {
 		_gtk_editable_insert_text(editable, new_text, new_text_length, position);
@@ -6068,8 +6068,8 @@ public static final void gtk_editable_insert_text(int /*long*/ editable, byte[]
 	}
 }
 /** @param editable cast=(GtkEditable *) */
-public static final native void _gtk_editable_paste_clipboard(int /*long*/ editable);
-public static final void gtk_editable_paste_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_paste_clipboard(long /*int*/ editable);
+public static final void gtk_editable_paste_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_paste_clipboard(editable);
@@ -6082,8 +6082,8 @@ public static final void gtk_editable_paste_clipboard(int /*long*/ editable) {
  * @param start cast=(gint)
  * @param end cast=(gint)
  */
-public static final native void _gtk_editable_select_region(int /*long*/ editable, int start, int end);
-public static final void gtk_editable_select_region(int /*long*/ editable, int start, int end) {
+public static final native void _gtk_editable_select_region(long /*int*/ editable, int start, int end);
+public static final void gtk_editable_select_region(long /*int*/ editable, int start, int end) {
 	lock.lock();
 	try {
 		_gtk_editable_select_region(editable, start, end);
@@ -6095,8 +6095,8 @@ public static final void gtk_editable_select_region(int /*long*/ editable, int s
  * @param entry cast=(GtkEditable *)
  * @param editable cast=(gboolean)
  */
-public static final native void _gtk_editable_set_editable(int /*long*/ entry, boolean editable);
-public static final void gtk_editable_set_editable(int /*long*/ entry, boolean editable) {
+public static final native void _gtk_editable_set_editable(long /*int*/ entry, boolean editable);
+public static final void gtk_editable_set_editable(long /*int*/ entry, boolean editable) {
 	lock.lock();
 	try {
 		_gtk_editable_set_editable(entry, editable);
@@ -6108,8 +6108,8 @@ public static final void gtk_editable_set_editable(int /*long*/ entry, boolean e
  * @param editable cast=(GtkEditable *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_editable_set_position(int /*long*/ editable, int position);
-public static final void gtk_editable_set_position(int /*long*/ editable, int position) {
+public static final native void _gtk_editable_set_position(long /*int*/ editable, int position);
+public static final void gtk_editable_set_position(long /*int*/ editable, int position) {
 	lock.lock();
 	try {
 		_gtk_editable_set_position(editable, position);
@@ -6118,8 +6118,8 @@ public static final void gtk_editable_set_position(int /*long*/ editable, int po
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_entry_get_inner_border (int /*long*/ entry);
-public static final int /*long*/ gtk_entry_get_inner_border (int /*long*/ entry) {
+public static final native long /*int*/ _gtk_entry_get_inner_border (long /*int*/ entry);
+public static final long /*int*/ gtk_entry_get_inner_border (long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_inner_border(entry);
@@ -6128,8 +6128,8 @@ public static final int /*long*/ gtk_entry_get_inner_border (int /*long*/ entry)
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native char _gtk_entry_get_invisible_char(int /*long*/ entry);
-public static final char gtk_entry_get_invisible_char(int /*long*/ entry) {
+public static final native char _gtk_entry_get_invisible_char(long /*int*/ entry);
+public static final char gtk_entry_get_invisible_char(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_invisible_char(entry);
@@ -6138,8 +6138,8 @@ public static final char gtk_entry_get_invisible_char(int /*long*/ entry) {
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native int /*long*/ _gtk_entry_get_layout (int /*long*/ entry);
-public static final int /*long*/ gtk_entry_get_layout (int /*long*/ entry) {
+public static final native long /*int*/ _gtk_entry_get_layout (long /*int*/ entry);
+public static final long /*int*/ gtk_entry_get_layout (long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_layout(entry);
@@ -6148,8 +6148,8 @@ public static final int /*long*/ gtk_entry_get_layout (int /*long*/ entry) {
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native void _gtk_entry_get_layout_offsets (int /*long*/ entry, int[] x, int[] y);
-public static final void gtk_entry_get_layout_offsets (int /*long*/ entry, int[] x, int[] y) {
+public static final native void _gtk_entry_get_layout_offsets (long /*int*/ entry, int[] x, int[] y);
+public static final void gtk_entry_get_layout_offsets (long /*int*/ entry, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_entry_get_layout_offsets(entry, x, y);
@@ -6158,8 +6158,8 @@ public static final void gtk_entry_get_layout_offsets (int /*long*/ entry, int[]
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_entry_text_index_to_layout_index (int /*long*/ entry, int index);
-public static final int gtk_entry_text_index_to_layout_index (int /*long*/ entry, int index) {
+public static final native int _gtk_entry_text_index_to_layout_index (long /*int*/ entry, int index);
+public static final int gtk_entry_text_index_to_layout_index (long /*int*/ entry, int index) {
 	lock.lock();
 	try {
 		return _gtk_entry_text_index_to_layout_index(entry, index);
@@ -6168,8 +6168,8 @@ public static final int gtk_entry_text_index_to_layout_index (int /*long*/ entry
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native int _gtk_entry_get_max_length(int /*long*/ entry);
-public static final int gtk_entry_get_max_length(int /*long*/ entry) {
+public static final native int _gtk_entry_get_max_length(long /*int*/ entry);
+public static final int gtk_entry_get_max_length(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_max_length(entry);
@@ -6178,8 +6178,8 @@ public static final int gtk_entry_get_max_length(int /*long*/ entry) {
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native int /*long*/ _gtk_entry_get_text(int /*long*/ entry);
-public static final int /*long*/ gtk_entry_get_text(int /*long*/ entry) {
+public static final native long /*int*/ _gtk_entry_get_text(long /*int*/ entry);
+public static final long /*int*/ gtk_entry_get_text(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_text(entry);
@@ -6188,8 +6188,8 @@ public static final int /*long*/ gtk_entry_get_text(int /*long*/ entry) {
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _FcConfigAppFontAddFile(int /*long*/ config, byte[] file);
-public static final boolean FcConfigAppFontAddFile(int /*long*/ config, byte[] file) {
+public static final native boolean _FcConfigAppFontAddFile(long /*int*/ config, byte[] file);
+public static final boolean FcConfigAppFontAddFile(long /*int*/ config, byte[] file) {
 	lock.lock();
 	try {
 		return _FcConfigAppFontAddFile(config, file);
@@ -6198,8 +6198,8 @@ public static final boolean FcConfigAppFontAddFile(int /*long*/ config, byte[] f
 	}
 }
 /** @param entry cast=(GtkEntry *) */
-public static final native boolean _gtk_entry_get_visibility(int /*long*/ entry);
-public static final boolean gtk_entry_get_visibility(int /*long*/ entry) {
+public static final native boolean _gtk_entry_get_visibility(long /*int*/ entry);
+public static final boolean gtk_entry_get_visibility(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_visibility(entry);
@@ -6207,8 +6207,8 @@ public static final boolean gtk_entry_get_visibility(int /*long*/ entry) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_entry_new();
-public static final int /*long*/ gtk_entry_new() {
+public static final native long /*int*/ _gtk_entry_new();
+public static final long /*int*/ gtk_entry_new() {
 	lock.lock();
 	try {
 		return _gtk_entry_new();
@@ -6220,8 +6220,8 @@ public static final int /*long*/ gtk_entry_new() {
  * @param entry cast=(GtkEntry *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_entry_set_activates_default(int /*long*/ entry, boolean setting);
-public static final void gtk_entry_set_activates_default(int /*long*/ entry, boolean setting) {
+public static final native void _gtk_entry_set_activates_default(long /*int*/ entry, boolean setting);
+public static final void gtk_entry_set_activates_default(long /*int*/ entry, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_entry_set_activates_default(entry, setting);
@@ -6234,8 +6234,8 @@ public static final void gtk_entry_set_activates_default(int /*long*/ entry, boo
  * @param entry cast=(GtkEntry *)
  * @param xalign cast=(gfloat)
  */
-public static final native void _gtk_entry_set_alignment(int /*long*/ entry, float xalign);
-public static final void gtk_entry_set_alignment(int /*long*/ entry, float xalign) {
+public static final native void _gtk_entry_set_alignment(long /*int*/ entry, float xalign);
+public static final void gtk_entry_set_alignment(long /*int*/ entry, float xalign) {
 	lock.lock();
 	try {
 		_gtk_entry_set_alignment(entry, xalign);
@@ -6247,8 +6247,8 @@ public static final void gtk_entry_set_alignment(int /*long*/ entry, float xalig
  * @param entry cast=(GtkEntry *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_entry_set_has_frame(int /*long*/ entry, boolean setting);
-public static final void gtk_entry_set_has_frame(int /*long*/ entry, boolean setting) {
+public static final native void _gtk_entry_set_has_frame(long /*int*/ entry, boolean setting);
+public static final void gtk_entry_set_has_frame(long /*int*/ entry, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_entry_set_has_frame(entry, setting);
@@ -6260,8 +6260,8 @@ public static final void gtk_entry_set_has_frame(int /*long*/ entry, boolean set
  * @param entry cast=(GtkEntry *)
  * @param ch cast=(gint)
  */
-public static final native void _gtk_entry_set_invisible_char(int /*long*/ entry, char ch);
-public static final void gtk_entry_set_invisible_char(int /*long*/ entry, char ch) {
+public static final native void _gtk_entry_set_invisible_char(long /*int*/ entry, char ch);
+public static final void gtk_entry_set_invisible_char(long /*int*/ entry, char ch) {
 	lock.lock();
 	try {
 		_gtk_entry_set_invisible_char(entry, ch);
@@ -6273,8 +6273,8 @@ public static final void gtk_entry_set_invisible_char(int /*long*/ entry, char c
  * @param entry cast=(GtkEntry *)
  * @param max cast=(gint)
  */
-public static final native void _gtk_entry_set_max_length(int /*long*/ entry, int max);
-public static final void gtk_entry_set_max_length(int /*long*/ entry, int max) {
+public static final native void _gtk_entry_set_max_length(long /*int*/ entry, int max);
+public static final void gtk_entry_set_max_length(long /*int*/ entry, int max) {
 	lock.lock();
 	try {
 		_gtk_entry_set_max_length(entry, max);
@@ -6286,8 +6286,8 @@ public static final void gtk_entry_set_max_length(int /*long*/ entry, int max) {
  * @param entry cast=(GtkEntry *)
  * @param text cast=(const gchar *)
  */
-public static final native void _gtk_entry_set_text(int /*long*/ entry, byte[] text);
-public static final void gtk_entry_set_text(int /*long*/ entry, byte[] text) {
+public static final native void _gtk_entry_set_text(long /*int*/ entry, byte[] text);
+public static final void gtk_entry_set_text(long /*int*/ entry, byte[] text) {
 	lock.lock();
 	try {
 		_gtk_entry_set_text(entry, text);
@@ -6299,8 +6299,8 @@ public static final void gtk_entry_set_text(int /*long*/ entry, byte[] text) {
  * @param entry cast=(GtkEntry *)
  * @param visible cast=(gboolean)
  */
-public static final native void _gtk_entry_set_visibility(int /*long*/ entry, boolean visible);
-public static final void gtk_entry_set_visibility(int /*long*/ entry, boolean visible) {
+public static final native void _gtk_entry_set_visibility(long /*int*/ entry, boolean visible);
+public static final void gtk_entry_set_visibility(long /*int*/ entry, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_entry_set_visibility(entry, visible);
@@ -6318,8 +6318,8 @@ public static final int gtk_events_pending() {
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _gtk_expander_get_expanded(int /*long*/ expander);
-public static final boolean gtk_expander_get_expanded(int /*long*/ expander) {
+public static final native boolean _gtk_expander_get_expanded(long /*int*/ expander);
+public static final boolean gtk_expander_get_expanded(long /*int*/ expander) {
 	lock.lock();
 	try {
 		return _gtk_expander_get_expanded(expander);
@@ -6328,8 +6328,8 @@ public static final boolean gtk_expander_get_expanded(int /*long*/ expander) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_expander_get_label_widget(int /*long*/ expander);
-public static final int /*long*/ gtk_expander_get_label_widget(int /*long*/ expander) {
+public static final native long /*int*/ _gtk_expander_get_label_widget(long /*int*/ expander);
+public static final long /*int*/ gtk_expander_get_label_widget(long /*int*/ expander) {
 	lock.lock();
 	try {
 		return _gtk_expander_get_label_widget(expander);
@@ -6341,8 +6341,8 @@ public static final int /*long*/ gtk_expander_get_label_widget(int /*long*/ expa
  * @method flags=dynamic
  * @param label cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_expander_new(byte[] label);
-public static final int /*long*/ gtk_expander_new(byte[] label) {
+public static final native long /*int*/ _gtk_expander_new(byte[] label);
+public static final long /*int*/ gtk_expander_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_expander_new(label);
@@ -6351,8 +6351,8 @@ public static final int /*long*/ gtk_expander_new(byte[] label) {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_expander_set_expanded(int /*long*/ expander, boolean expanded);
-public static final void gtk_expander_set_expanded(int /*long*/ expander, boolean expanded) {
+public static final native void _gtk_expander_set_expanded(long /*int*/ expander, boolean expanded);
+public static final void gtk_expander_set_expanded(long /*int*/ expander, boolean expanded) {
 	lock.lock();
 	try {
 		_gtk_expander_set_expanded(expander, expanded);
@@ -6364,8 +6364,8 @@ public static final void gtk_expander_set_expanded(int /*long*/ expander, boolea
  * @method flags=dynamic
  * @param label cast=(const gchar *)
  */
-public static final native void _gtk_expander_set_label(int /*long*/ expander, byte[] label);
-public static final void gtk_expander_set_label(int /*long*/ expander, byte[] label) {
+public static final native void _gtk_expander_set_label(long /*int*/ expander, byte[] label);
+public static final void gtk_expander_set_label(long /*int*/ expander, byte[] label) {
 	lock.lock();
 	try {
 		_gtk_expander_set_label(expander, label);
@@ -6374,8 +6374,8 @@ public static final void gtk_expander_set_label(int /*long*/ expander, byte[] la
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_expander_set_label_widget(int /*long*/ expander, int /*long*/ label_widget);
-public static final void  gtk_expander_set_label_widget(int /*long*/ expander, int /*long*/ label_widget) {
+public static final native void _gtk_expander_set_label_widget(long /*int*/ expander, long /*int*/ label_widget);
+public static final void  gtk_expander_set_label_widget(long /*int*/ expander, long /*int*/ label_widget) {
 	lock.lock();
 	try {
 		_gtk_expander_set_label_widget(expander, label_widget);
@@ -6384,8 +6384,8 @@ public static final void  gtk_expander_set_label_widget(int /*long*/ expander, i
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_add_filter(int /*long*/ chooser, int /*long*/ filter);
-public static final void gtk_file_chooser_add_filter(int /*long*/ chooser, int /*long*/ filter) {
+public static final native void _gtk_file_chooser_add_filter(long /*int*/ chooser, long /*int*/ filter);
+public static final void gtk_file_chooser_add_filter(long /*int*/ chooser, long /*int*/ filter) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_add_filter(chooser, filter);
@@ -6394,8 +6394,8 @@ public static final void gtk_file_chooser_add_filter(int /*long*/ chooser, int /
 	}
 }
 /** @method flags=no_gen */
-public static final native int /*long*/ _gtk_file_chooser_dialog_new(byte[] title, int /*long*/ parent, int action, int /*long*/ first_button_text, int first_button_id, int /*long*/ second_button_text, int second_button_id, int /*long*/ terminator);
-public static final int /*long*/ gtk_file_chooser_dialog_new(byte[] title, int /*long*/ parent, int action, int /*long*/ first_button_text, int first_button_id, int /*long*/ second_button_text, int second_button_id, int /*long*/ terminator) {
+public static final native long /*int*/ _gtk_file_chooser_dialog_new(byte[] title, long /*int*/ parent, int action, long /*int*/ first_button_text, int first_button_id, long /*int*/ second_button_text, int second_button_id, long /*int*/ terminator);
+public static final long /*int*/ gtk_file_chooser_dialog_new(byte[] title, long /*int*/ parent, int action, long /*int*/ first_button_text, int first_button_id, long /*int*/ second_button_text, int second_button_id, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_dialog_new(title, parent, action, first_button_text, first_button_id, second_button_text, second_button_id, terminator);
@@ -6404,8 +6404,8 @@ public static final int /*long*/ gtk_file_chooser_dialog_new(byte[] title, int /
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_current_folder(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_current_folder(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_current_folder(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_current_folder(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_current_folder(chooser);
@@ -6414,8 +6414,8 @@ public static final int /*long*/ gtk_file_chooser_get_current_folder(int /*long*
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_filename(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filename(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filename(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filename(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filename(chooser);
@@ -6424,8 +6424,8 @@ public static final int /*long*/ gtk_file_chooser_get_filename(int /*long*/ choo
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_filenames(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filenames(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filenames(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filenames(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filenames(chooser);
@@ -6434,8 +6434,8 @@ public static final int /*long*/ gtk_file_chooser_get_filenames(int /*long*/ cho
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_uri(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_uri(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_uri(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_uri(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_uri(chooser);
@@ -6444,8 +6444,8 @@ public static final int /*long*/ gtk_file_chooser_get_uri(int /*long*/ chooser)
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_uris(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_uris(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_uris(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_uris(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_uris(chooser);
@@ -6454,8 +6454,8 @@ public static final int /*long*/ gtk_file_chooser_get_uris(int /*long*/ chooser)
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_chooser_get_filter(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filter(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filter(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filter(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filter(chooser);
@@ -6464,8 +6464,8 @@ public static final int /*long*/ gtk_file_chooser_get_filter(int /*long*/ choose
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_current_folder(int /*long*/ chooser, int /*long*/ filename);
-public static final void gtk_file_chooser_set_current_folder(int /*long*/ chooser, int /*long*/ filename) {
+public static final native void _gtk_file_chooser_set_current_folder(long /*int*/ chooser, long /*int*/ filename);
+public static final void gtk_file_chooser_set_current_folder(long /*int*/ chooser, long /*int*/ filename) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_current_folder(chooser, filename);
@@ -6474,8 +6474,8 @@ public static final void gtk_file_chooser_set_current_folder(int /*long*/ choose
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_current_folder_uri(int /*long*/ chooser, byte [] uri);
-public static final void gtk_file_chooser_set_current_folder_uri(int /*long*/ chooser, byte [] uri) {
+public static final native void _gtk_file_chooser_set_current_folder_uri(long /*int*/ chooser, byte [] uri);
+public static final void gtk_file_chooser_set_current_folder_uri(long /*int*/ chooser, byte [] uri) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_current_folder_uri(chooser, uri);
@@ -6484,8 +6484,8 @@ public static final void gtk_file_chooser_set_current_folder_uri(int /*long*/ ch
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_current_name(int /*long*/ chooser, byte[] name);
-public static final void gtk_file_chooser_set_current_name(int /*long*/ chooser, byte[] name) {
+public static final native void _gtk_file_chooser_set_current_name(long /*int*/ chooser, byte[] name);
+public static final void gtk_file_chooser_set_current_name(long /*int*/ chooser, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_current_name(chooser, name);
@@ -6494,8 +6494,8 @@ public static final void gtk_file_chooser_set_current_name(int /*long*/ chooser,
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_local_only(int /*long*/ chooser, boolean local_only);
-public static final void gtk_file_chooser_set_local_only(int /*long*/ chooser, boolean local_only) {
+public static final native void _gtk_file_chooser_set_local_only(long /*int*/ chooser, boolean local_only);
+public static final void gtk_file_chooser_set_local_only(long /*int*/ chooser, boolean local_only) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_local_only(chooser, local_only);
@@ -6504,8 +6504,8 @@ public static final void gtk_file_chooser_set_local_only(int /*long*/ chooser, b
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_do_overwrite_confirmation(int /*long*/ chooser, boolean do_overwrite_confirmation);
-public static final void gtk_file_chooser_set_do_overwrite_confirmation(int /*long*/ chooser, boolean do_overwrite_confirmation) {
+public static final native void _gtk_file_chooser_set_do_overwrite_confirmation(long /*int*/ chooser, boolean do_overwrite_confirmation);
+public static final void gtk_file_chooser_set_do_overwrite_confirmation(long /*int*/ chooser, boolean do_overwrite_confirmation) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_do_overwrite_confirmation(chooser, do_overwrite_confirmation);
@@ -6514,8 +6514,8 @@ public static final void gtk_file_chooser_set_do_overwrite_confirmation(int /*lo
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_extra_widget(int /*long*/ chooser, int /*long*/ extra_widget);
-public static final void gtk_file_chooser_set_extra_widget(int /*long*/ chooser, int /*long*/ extra_widget) {
+public static final native void _gtk_file_chooser_set_extra_widget(long /*int*/ chooser, long /*int*/ extra_widget);
+public static final void gtk_file_chooser_set_extra_widget(long /*int*/ chooser, long /*int*/ extra_widget) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_extra_widget(chooser, extra_widget);
@@ -6524,8 +6524,8 @@ public static final void gtk_file_chooser_set_extra_widget(int /*long*/ chooser,
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_filename(int /*long*/ chooser, int /*long*/ name);
-public static final void gtk_file_chooser_set_filename(int /*long*/ chooser, int /*long*/ name) {
+public static final native void _gtk_file_chooser_set_filename(long /*int*/ chooser, long /*int*/ name);
+public static final void gtk_file_chooser_set_filename(long /*int*/ chooser, long /*int*/ name) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_filename(chooser, name);
@@ -6534,8 +6534,8 @@ public static final void gtk_file_chooser_set_filename(int /*long*/ chooser, int
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_filter(int /*long*/ chooser, int /*long*/ filter);
-public static final void gtk_file_chooser_set_filter(int /*long*/ chooser, int /*long*/ filter) {
+public static final native void _gtk_file_chooser_set_filter(long /*int*/ chooser, long /*int*/ filter);
+public static final void gtk_file_chooser_set_filter(long /*int*/ chooser, long /*int*/ filter) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_filter(chooser, filter);
@@ -6544,8 +6544,8 @@ public static final void gtk_file_chooser_set_filter(int /*long*/ chooser, int /
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_uri(int /*long*/ chooser, byte [] uri);
-public static final void gtk_file_chooser_set_uri(int /*long*/ chooser, byte [] uri) {
+public static final native void _gtk_file_chooser_set_uri(long /*int*/ chooser, byte [] uri);
+public static final void gtk_file_chooser_set_uri(long /*int*/ chooser, byte [] uri) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_uri(chooser, uri);
@@ -6554,8 +6554,8 @@ public static final void gtk_file_chooser_set_uri(int /*long*/ chooser, byte []
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_chooser_set_select_multiple(int /*long*/ chooser, boolean select_multiple);
-public static final void gtk_file_chooser_set_select_multiple(int /*long*/ chooser, boolean select_multiple) {
+public static final native void _gtk_file_chooser_set_select_multiple(long /*int*/ chooser, boolean select_multiple);
+public static final void gtk_file_chooser_set_select_multiple(long /*int*/ chooser, boolean select_multiple) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_select_multiple(chooser, select_multiple);
@@ -6564,8 +6564,8 @@ public static final void gtk_file_chooser_set_select_multiple(int /*long*/ choos
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_filter_add_pattern(int /*long*/ filter, byte[] pattern);
-public static final void gtk_file_filter_add_pattern(int /*long*/ filter, byte[] pattern) {
+public static final native void _gtk_file_filter_add_pattern(long /*int*/ filter, byte[] pattern);
+public static final void gtk_file_filter_add_pattern(long /*int*/ filter, byte[] pattern) {
 	lock.lock();
 	try {
 		_gtk_file_filter_add_pattern(filter, pattern);
@@ -6574,8 +6574,8 @@ public static final void gtk_file_filter_add_pattern(int /*long*/ filter, byte[]
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_filter_new();
-public static final int /*long*/ gtk_file_filter_new() {
+public static final native long /*int*/ _gtk_file_filter_new();
+public static final long /*int*/ gtk_file_filter_new() {
 	lock.lock();
 	try {
 		return _gtk_file_filter_new();
@@ -6584,8 +6584,8 @@ public static final int /*long*/ gtk_file_filter_new() {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_file_filter_get_name(int /*long*/ filter);
-public static final int /*long*/ gtk_file_filter_get_name(int /*long*/ filter) {
+public static final native long /*int*/ _gtk_file_filter_get_name(long /*int*/ filter);
+public static final long /*int*/ gtk_file_filter_get_name(long /*int*/ filter) {
 	lock.lock();
 	try {
 		return _gtk_file_filter_get_name(filter);
@@ -6594,8 +6594,8 @@ public static final int /*long*/ gtk_file_filter_get_name(int /*long*/ filter) {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_file_filter_set_name(int /*long*/ filter, byte[] name);
-public static final void gtk_file_filter_set_name(int /*long*/ filter, byte[] name) {
+public static final native void _gtk_file_filter_set_name(long /*int*/ filter, byte[] name);
+public static final void gtk_file_filter_set_name(long /*int*/ filter, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_file_filter_set_name(filter, name);
@@ -6604,8 +6604,8 @@ public static final void gtk_file_filter_set_name(int /*long*/ filter, byte[] na
 	}
 }
 /** @param filesel cast=(GtkFileSelection *) */
-public static final native int /*long*/ _gtk_file_selection_get_filename(int /*long*/ filesel);
-public static final int /*long*/ gtk_file_selection_get_filename(int /*long*/ filesel) {
+public static final native long /*int*/ _gtk_file_selection_get_filename(long /*int*/ filesel);
+public static final long /*int*/ gtk_file_selection_get_filename(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_get_filename(filesel);
@@ -6614,8 +6614,8 @@ public static final int /*long*/ gtk_file_selection_get_filename(int /*long*/ fi
 	}
 }
 /** @param filesel cast=(GtkFileSelection *) */
-public static final native int /*long*/ _gtk_file_selection_get_selections(int /*long*/ filesel);
-public static final int /*long*/ gtk_file_selection_get_selections(int /*long*/ filesel) {
+public static final native long /*int*/ _gtk_file_selection_get_selections(long /*int*/ filesel);
+public static final long /*int*/ gtk_file_selection_get_selections(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_get_selections(filesel);
@@ -6624,8 +6624,8 @@ public static final int /*long*/ gtk_file_selection_get_selections(int /*long*/
 	}
 }
 /** @param filesel cast=(GtkFileSelection *) */
-public static final native void _gtk_file_selection_hide_fileop_buttons(int /*long*/ filesel);
-public static final void gtk_file_selection_hide_fileop_buttons(int /*long*/ filesel) {
+public static final native void _gtk_file_selection_hide_fileop_buttons(long /*int*/ filesel);
+public static final void gtk_file_selection_hide_fileop_buttons(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		_gtk_file_selection_hide_fileop_buttons(filesel);
@@ -6634,8 +6634,8 @@ public static final void gtk_file_selection_hide_fileop_buttons(int /*long*/ fil
 	}
 }
 /** @param title cast=(const gchar *) */
-public static final native int /*long*/ _gtk_file_selection_new(byte[] title);
-public static final int /*long*/ gtk_file_selection_new(byte[] title) {
+public static final native long /*int*/ _gtk_file_selection_new(byte[] title);
+public static final long /*int*/ gtk_file_selection_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_new(title);
@@ -6647,8 +6647,8 @@ public static final int /*long*/ gtk_file_selection_new(byte[] title) {
  * @param filesel cast=(GtkFileSelection *)
  * @param filename cast=(const gchar *)
  */
-public static final native void _gtk_file_selection_set_filename(int /*long*/ filesel, int /*long*/ filename);
-public static final void gtk_file_selection_set_filename(int /*long*/ filesel, int /*long*/ filename) {
+public static final native void _gtk_file_selection_set_filename(long /*int*/ filesel, long /*int*/ filename);
+public static final void gtk_file_selection_set_filename(long /*int*/ filesel, long /*int*/ filename) {
 	lock.lock();
 	try {
 		_gtk_file_selection_set_filename(filesel, filename);
@@ -6660,8 +6660,8 @@ public static final void gtk_file_selection_set_filename(int /*long*/ filesel, i
  * @param filesel cast=(GtkFileSelection *)
  * @param select_multiple cast=(gboolean)
  */
-public static final native void _gtk_file_selection_set_select_multiple(int /*long*/ filesel, boolean select_multiple);
-public static final void gtk_file_selection_set_select_multiple(int /*long*/ filesel, boolean select_multiple) {
+public static final native void _gtk_file_selection_set_select_multiple(long /*int*/ filesel, boolean select_multiple);
+public static final void gtk_file_selection_set_select_multiple(long /*int*/ filesel, boolean select_multiple) {
 	lock.lock();
 	try {
 		_gtk_file_selection_set_select_multiple(filesel, select_multiple);
@@ -6675,8 +6675,8 @@ public static final void gtk_file_selection_set_select_multiple(int /*long*/ fil
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native void _gtk_fixed_move(int /*long*/ fixed, int /*long*/ widget, int x, int y);
-public static final void gtk_fixed_move(int /*long*/ fixed, int /*long*/ widget, int x, int y) {
+public static final native void _gtk_fixed_move(long /*int*/ fixed, long /*int*/ widget, int x, int y);
+public static final void gtk_fixed_move(long /*int*/ fixed, long /*int*/ widget, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_fixed_move(fixed, widget, x, y);
@@ -6684,8 +6684,8 @@ public static final void gtk_fixed_move(int /*long*/ fixed, int /*long*/ widget,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_fixed_new();
-public static final int /*long*/ gtk_fixed_new() {
+public static final native long /*int*/ _gtk_fixed_new();
+public static final long /*int*/ gtk_fixed_new() {
 	lock.lock();
 	try {
 		return _gtk_fixed_new();
@@ -6697,8 +6697,8 @@ public static final int /*long*/ gtk_fixed_new() {
  * @param fixed cast=(GtkFixed *)
  * @param has_window cast=(gboolean)
  */
-public static final native void _gtk_fixed_set_has_window(int /*long*/ fixed, boolean has_window);
-public static final void gtk_fixed_set_has_window(int /*long*/ fixed, boolean has_window) {
+public static final native void _gtk_fixed_set_has_window(long /*int*/ fixed, boolean has_window);
+public static final void gtk_fixed_set_has_window(long /*int*/ fixed, boolean has_window) {
 	lock.lock();
 	try {
 		_gtk_fixed_set_has_window(fixed, has_window);
@@ -6707,8 +6707,8 @@ public static final void gtk_fixed_set_has_window(int /*long*/ fixed, boolean ha
 	}
 }
 /** @param fsd cast=(GtkFontSelectionDialog *) */
-public static final native int /*long*/ _gtk_font_selection_dialog_get_font_name(int /*long*/ fsd);
-public static final int /*long*/ gtk_font_selection_dialog_get_font_name(int /*long*/ fsd) {
+public static final native long /*int*/ _gtk_font_selection_dialog_get_font_name(long /*int*/ fsd);
+public static final long /*int*/ gtk_font_selection_dialog_get_font_name(long /*int*/ fsd) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_get_font_name(fsd);
@@ -6717,8 +6717,8 @@ public static final int /*long*/ gtk_font_selection_dialog_get_font_name(int /*l
 	}
 }
 /** @param title cast=(const gchar *) */
-public static final native int /*long*/ _gtk_font_selection_dialog_new(byte[] title);
-public static final int /*long*/ gtk_font_selection_dialog_new(byte[] title) {
+public static final native long /*int*/ _gtk_font_selection_dialog_new(byte[] title);
+public static final long /*int*/ gtk_font_selection_dialog_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_new(title);
@@ -6730,8 +6730,8 @@ public static final int /*long*/ gtk_font_selection_dialog_new(byte[] title) {
  * @param fsd cast=(GtkFontSelectionDialog *)
  * @param fontname cast=(const gchar *)
  */
-public static final native boolean _gtk_font_selection_dialog_set_font_name(int /*long*/ fsd, byte[] fontname);
-public static final boolean gtk_font_selection_dialog_set_font_name(int /*long*/ fsd, byte[] fontname) {
+public static final native boolean _gtk_font_selection_dialog_set_font_name(long /*int*/ fsd, byte[] fontname);
+public static final boolean gtk_font_selection_dialog_set_font_name(long /*int*/ fsd, byte[] fontname) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_set_font_name(fsd, fontname);
@@ -6740,8 +6740,8 @@ public static final boolean gtk_font_selection_dialog_set_font_name(int /*long*/
 	}
 }
 /** @param label cast=(const gchar *) */
-public static final native int /*long*/ _gtk_frame_new(byte[] label);
-public static final int /*long*/ gtk_frame_new(byte[] label) {
+public static final native long /*int*/ _gtk_frame_new(byte[] label);
+public static final long /*int*/ gtk_frame_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_frame_new(label);
@@ -6750,8 +6750,8 @@ public static final int /*long*/ gtk_frame_new(byte[] label) {
 	}
 }
 /** @param frame cast=(GtkFrame *) */
-public static final native int /*long*/ _gtk_frame_get_label_widget(int /*long*/ frame);
-public static final int /*long*/ gtk_frame_get_label_widget(int /*long*/ frame) {
+public static final native long /*int*/ _gtk_frame_get_label_widget(long /*int*/ frame);
+public static final long /*int*/ gtk_frame_get_label_widget(long /*int*/ frame) {
 	lock.lock();
 	try {
 		return _gtk_frame_get_label_widget(frame);
@@ -6763,8 +6763,8 @@ public static final int /*long*/ gtk_frame_get_label_widget(int /*long*/ frame)
  * @param frame cast=(GtkFrame *)
  * @param label cast=(const gchar *)
  */
-public static final native void _gtk_frame_set_label(int /*long*/ frame, byte[] label);
-public static final void gtk_frame_set_label(int /*long*/ frame, byte[] label) {
+public static final native void _gtk_frame_set_label(long /*int*/ frame, byte[] label);
+public static final void gtk_frame_set_label(long /*int*/ frame, byte[] label) {
 	lock.lock();
 	try {
 		_gtk_frame_set_label(frame, label);
@@ -6776,8 +6776,8 @@ public static final void gtk_frame_set_label(int /*long*/ frame, byte[] label) {
  * @param frame cast=(GtkFrame *)
  * @param label_widget cast=(GtkWidget *)
  */
-public static final native void _gtk_frame_set_label_widget(int /*long*/ frame, int /*long*/ label_widget);
-public static final void gtk_frame_set_label_widget(int /*long*/ frame, int /*long*/ label_widget) {
+public static final native void _gtk_frame_set_label_widget(long /*int*/ frame, long /*int*/ label_widget);
+public static final void gtk_frame_set_label_widget(long /*int*/ frame, long /*int*/ label_widget) {
 	lock.lock();
 	try {
 		_gtk_frame_set_label_widget(frame, label_widget);
@@ -6789,8 +6789,8 @@ public static final void gtk_frame_set_label_widget(int /*long*/ frame, int /*lo
  * @param frame cast=(GtkFrame *)
  * @param type cast=(GtkShadowType)
  */
-public static final native void _gtk_frame_set_shadow_type(int /*long*/ frame, int type);
-public static final void gtk_frame_set_shadow_type(int /*long*/ frame, int type) {
+public static final native void _gtk_frame_set_shadow_type(long /*int*/ frame, int type);
+public static final void gtk_frame_set_shadow_type(long /*int*/ frame, int type) {
 	lock.lock();
 	try {
 		_gtk_frame_set_shadow_type(frame, type);
@@ -6798,8 +6798,8 @@ public static final void gtk_frame_set_shadow_type(int /*long*/ frame, int type)
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_get_current_event();
-public static final int /*long*/ gtk_get_current_event() {
+public static final native long /*int*/ _gtk_get_current_event();
+public static final long /*int*/ gtk_get_current_event() {
 	lock.lock();
 	try {
 		return _gtk_get_current_event();
@@ -6826,8 +6826,8 @@ public static final int gtk_get_current_event_time() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_get_default_language();
-public static final int /*long*/ gtk_get_default_language() {
+public static final native long /*int*/ _gtk_get_default_language();
+public static final long /*int*/ gtk_get_default_language() {
 	lock.lock();
 	try {
 		return _gtk_get_default_language();
@@ -6836,8 +6836,8 @@ public static final int /*long*/ gtk_get_default_language() {
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native int /*long*/ _gtk_get_event_widget(int /*long*/ event);
-public static final int /*long*/ gtk_get_event_widget(int /*long*/ event) {
+public static final native long /*int*/ _gtk_get_event_widget(long /*int*/ event);
+public static final long /*int*/ gtk_get_event_widget(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_get_event_widget(event);
@@ -6846,8 +6846,8 @@ public static final int /*long*/ gtk_get_event_widget(int /*long*/ event) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_grab_add(int /*long*/ widget);
-public static final void gtk_grab_add(int /*long*/ widget) {
+public static final native void _gtk_grab_add(long /*int*/ widget);
+public static final void gtk_grab_add(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_grab_add(widget);
@@ -6855,8 +6855,8 @@ public static final void gtk_grab_add(int /*long*/ widget) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_grab_get_current();
-public static final int /*long*/ gtk_grab_get_current() {
+public static final native long /*int*/ _gtk_grab_get_current();
+public static final long /*int*/ gtk_grab_get_current() {
 	lock.lock();
 	try {
 		return _gtk_grab_get_current();
@@ -6865,8 +6865,8 @@ public static final int /*long*/ gtk_grab_get_current() {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_grab_remove(int /*long*/ widget);
-public static final void gtk_grab_remove(int /*long*/ widget) {
+public static final native void _gtk_grab_remove(long /*int*/ widget);
+public static final void gtk_grab_remove(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_grab_remove(widget);
@@ -6878,8 +6878,8 @@ public static final void gtk_grab_remove(int /*long*/ widget) {
  * @param homogeneous cast=(gboolean)
  * @param spacing cast=(gint)
  */
-public static final native int /*long*/ _gtk_hbox_new(boolean homogeneous, int spacing);
-public static final int /*long*/ gtk_hbox_new(boolean homogeneous, int spacing) {
+public static final native long /*int*/ _gtk_hbox_new(boolean homogeneous, int spacing);
+public static final long /*int*/ gtk_hbox_new(boolean homogeneous, int spacing) {
 	lock.lock();
 	try {
 		return _gtk_hbox_new(homogeneous, spacing);
@@ -6888,8 +6888,8 @@ public static final int /*long*/ gtk_hbox_new(boolean homogeneous, int spacing)
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native int /*long*/ _gtk_hscale_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_hscale_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_hscale_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_hscale_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_hscale_new(adjustment);
@@ -6898,8 +6898,8 @@ public static final int /*long*/ gtk_hscale_new(int /*long*/ adjustment) {
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native int /*long*/ _gtk_hscrollbar_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_hscrollbar_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_hscrollbar_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_hscrollbar_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_hscrollbar_new(adjustment);
@@ -6907,8 +6907,8 @@ public static final int /*long*/ gtk_hscrollbar_new(int /*long*/ adjustment) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_hseparator_new();
-public static final int /*long*/ gtk_hseparator_new() {
+public static final native long /*int*/ _gtk_hseparator_new();
+public static final long /*int*/ gtk_hseparator_new() {
 	lock.lock();
 	try {
 		return _gtk_hseparator_new();
@@ -6917,8 +6917,8 @@ public static final int /*long*/ gtk_hseparator_new() {
 	}
 }
 /** @param stock_id cast=(const gchar *) */
-public static final native int /*long*/ _gtk_icon_factory_lookup_default(byte[] stock_id);
-public static final int /*long*/ gtk_icon_factory_lookup_default(byte[] stock_id) {
+public static final native long /*int*/ _gtk_icon_factory_lookup_default(byte[] stock_id);
+public static final long /*int*/ gtk_icon_factory_lookup_default(byte[] stock_id) {
 	lock.lock();
 	try {
 		return _gtk_icon_factory_lookup_default(stock_id);
@@ -6927,8 +6927,8 @@ public static final int /*long*/ gtk_icon_factory_lookup_default(byte[] stock_id
 	}
 }
 /** @param source cast=(GtkIconSource *) */
-public static final native void _gtk_icon_source_free(int /*long*/ source);
-public static final void gtk_icon_source_free(int /*long*/ source) {
+public static final native void _gtk_icon_source_free(long /*int*/ source);
+public static final void gtk_icon_source_free(long /*int*/ source) {
 	lock.lock();
 	try {
 		_gtk_icon_source_free(source);
@@ -6936,8 +6936,8 @@ public static final void gtk_icon_source_free(int /*long*/ source) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_icon_source_new();
-public static final int /*long*/ gtk_icon_source_new() {
+public static final native long /*int*/ _gtk_icon_source_new();
+public static final long /*int*/ gtk_icon_source_new() {
 	lock.lock();
 	try {
 		return _gtk_icon_source_new();
@@ -6949,8 +6949,8 @@ public static final int /*long*/ gtk_icon_source_new() {
  * @param source cast=(GtkIconSource *)
  * @param pixbuf cast=(GdkPixbuf *)
  */
-public static final native void _gtk_icon_source_set_pixbuf(int /*long*/ source, int /*long*/ pixbuf);
-public static final void gtk_icon_source_set_pixbuf(int /*long*/ source, int /*long*/ pixbuf) {
+public static final native void _gtk_icon_source_set_pixbuf(long /*int*/ source, long /*int*/ pixbuf);
+public static final void gtk_icon_source_set_pixbuf(long /*int*/ source, long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		_gtk_icon_source_set_pixbuf(source, pixbuf);
@@ -6967,8 +6967,8 @@ public static final void gtk_icon_source_set_pixbuf(int /*long*/ source, int /*l
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const char *)
  */
-public static final native int /*long*/ _gtk_icon_set_render_icon(int /*long*/ icon_set, int /*long*/ style, int direction, int state, int size, int /*long*/ widget, int /*long*/ detail);
-public static final int /*long*/ gtk_icon_set_render_icon(int /*long*/ icon_set, int /*long*/ style, int direction, int state, int size, int /*long*/ widget, int /*long*/ detail) {
+public static final native long /*int*/ _gtk_icon_set_render_icon(long /*int*/ icon_set, long /*int*/ style, int direction, int state, int size, long /*int*/ widget, long /*int*/ detail);
+public static final long /*int*/ gtk_icon_set_render_icon(long /*int*/ icon_set, long /*int*/ style, int direction, int state, int size, long /*int*/ widget, long /*int*/ detail) {
 	lock.lock();
 	try {
 		return _gtk_icon_set_render_icon(icon_set, style, direction, state, size, widget, detail);
@@ -6980,8 +6980,8 @@ public static final int /*long*/ gtk_icon_set_render_icon(int /*long*/ icon_set,
  * @param context cast=(GtkIMContext *)
  * @param event cast=(GdkEventKey *)
  */
-public static final native boolean _gtk_im_context_filter_keypress(int /*long*/ context, int /*long*/ event);
-public static final boolean gtk_im_context_filter_keypress(int /*long*/ context, int /*long*/ event) {
+public static final native boolean _gtk_im_context_filter_keypress(long /*int*/ context, long /*int*/ event);
+public static final boolean gtk_im_context_filter_keypress(long /*int*/ context, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_im_context_filter_keypress(context, event);
@@ -6990,8 +6990,8 @@ public static final boolean gtk_im_context_filter_keypress(int /*long*/ context,
 	}
 }
 /** @param context cast=(GtkIMContext *) */
-public static final native void _gtk_im_context_focus_in(int /*long*/ context);
-public static final void gtk_im_context_focus_in(int /*long*/ context) {
+public static final native void _gtk_im_context_focus_in(long /*int*/ context);
+public static final void gtk_im_context_focus_in(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_focus_in(context);
@@ -7000,8 +7000,8 @@ public static final void gtk_im_context_focus_in(int /*long*/ context) {
 	}
 }
 /** @param context cast=(GtkIMContext *) */
-public static final native void _gtk_im_context_focus_out(int /*long*/ context);
-public static final void gtk_im_context_focus_out(int /*long*/ context) {
+public static final native void _gtk_im_context_focus_out(long /*int*/ context);
+public static final void gtk_im_context_focus_out(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_focus_out(context);
@@ -7015,8 +7015,8 @@ public static final void gtk_im_context_focus_out(int /*long*/ context) {
  * @param attrs cast=(PangoAttrList **)
  * @param cursor_pos cast=(gint *)
  */
-public static final native void _gtk_im_context_get_preedit_string(int /*long*/ context, int /*long*/[] str, int /*long*/[] attrs, int[] cursor_pos);
-public static final void gtk_im_context_get_preedit_string(int /*long*/ context, int /*long*/[] str, int /*long*/[] attrs, int[] cursor_pos) {
+public static final native void _gtk_im_context_get_preedit_string(long /*int*/ context, long /*int*/[] str, long /*int*/[] attrs, int[] cursor_pos);
+public static final void gtk_im_context_get_preedit_string(long /*int*/ context, long /*int*/[] str, long /*int*/[] attrs, int[] cursor_pos) {
 	lock.lock();
 	try {
 		_gtk_im_context_get_preedit_string(context, str, attrs, cursor_pos);
@@ -7024,8 +7024,8 @@ public static final void gtk_im_context_get_preedit_string(int /*long*/ context,
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_im_context_get_type();
-public static final int /*long*/ gtk_im_context_get_type() {
+public static final native long /*int*/ _gtk_im_context_get_type();
+public static final long /*int*/ gtk_im_context_get_type() {
 	lock.lock();
 	try {
 		return _gtk_im_context_get_type();
@@ -7034,8 +7034,8 @@ public static final int /*long*/ gtk_im_context_get_type() {
 	}
 }
 /** @param context cast=(GtkIMContext *) */
-public static final native void _gtk_im_context_reset(int /*long*/ context);
-public static final void gtk_im_context_reset(int /*long*/ context) {
+public static final native void _gtk_im_context_reset(long /*int*/ context);
+public static final void gtk_im_context_reset(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_reset(context);
@@ -7047,8 +7047,8 @@ public static final void gtk_im_context_reset(int /*long*/ context) {
  * @param context cast=(GtkIMContext *)
  * @param window cast=(GdkWindow *)
  */
-public static final native void _gtk_im_context_set_client_window(int /*long*/ context, int /*long*/ window);
-public static final void gtk_im_context_set_client_window(int /*long*/ context, int /*long*/ window) {
+public static final native void _gtk_im_context_set_client_window(long /*int*/ context, long /*int*/ window);
+public static final void gtk_im_context_set_client_window(long /*int*/ context, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_im_context_set_client_window(context, window);
@@ -7060,8 +7060,8 @@ public static final void gtk_im_context_set_client_window(int /*long*/ context,
  * @param context cast=(GtkIMContext *)
  * @param area cast=(GdkRectangle *),flags=no_out
  */
-public static final native void _gtk_im_context_set_cursor_location(int /*long*/ context, GdkRectangle area);
-public static final void gtk_im_context_set_cursor_location(int /*long*/ context, GdkRectangle area) {
+public static final native void _gtk_im_context_set_cursor_location(long /*int*/ context, GdkRectangle area);
+public static final void gtk_im_context_set_cursor_location(long /*int*/ context, GdkRectangle area) {
 	lock.lock();
 	try {
 		_gtk_im_context_set_cursor_location(context, area);
@@ -7073,8 +7073,8 @@ public static final void gtk_im_context_set_cursor_location(int /*long*/ context
  * @param context cast=(GtkIMMulticontext *)
  * @param menushell cast=(GtkMenuShell *)
  */
-public static final native void _gtk_im_multicontext_append_menuitems (int /*long*/ context, int /*long*/ menushell);
-public static final void gtk_im_multicontext_append_menuitems (int /*long*/ context, int /*long*/ menushell) {
+public static final native void _gtk_im_multicontext_append_menuitems (long /*int*/ context, long /*int*/ menushell);
+public static final void gtk_im_multicontext_append_menuitems (long /*int*/ context, long /*int*/ menushell) {
 	lock.lock();
 	try {
 		_gtk_im_multicontext_append_menuitems(context, menushell);
@@ -7082,8 +7082,8 @@ public static final void gtk_im_multicontext_append_menuitems (int /*long*/ cont
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_im_multicontext_new();
-public static final int /*long*/ gtk_im_multicontext_new() {
+public static final native long /*int*/ _gtk_im_multicontext_new();
+public static final long /*int*/ gtk_im_multicontext_new() {
 	lock.lock();
 	try {
 		return _gtk_im_multicontext_new();
@@ -7092,8 +7092,8 @@ public static final int /*long*/ gtk_im_multicontext_new() {
 	}
 }
 /** @param label cast=(const gchar *) */
-public static final native int /*long*/ _gtk_image_menu_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_image_menu_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_image_menu_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_image_menu_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_image_menu_item_new_with_label(label);
@@ -7105,8 +7105,8 @@ public static final int /*long*/ gtk_image_menu_item_new_with_label(byte[] label
  * @param menu_item cast=(GtkImageMenuItem *)
  * @param image cast=(GtkWidget *)
  */
-public static final native void _gtk_image_menu_item_set_image(int /*long*/ menu_item, int /*long*/ image);
-public static final void gtk_image_menu_item_set_image(int /*long*/ menu_item, int /*long*/ image) {
+public static final native void _gtk_image_menu_item_set_image(long /*int*/ menu_item, long /*int*/ image);
+public static final void gtk_image_menu_item_set_image(long /*int*/ menu_item, long /*int*/ image) {
 	lock.lock();
 	try {
 		_gtk_image_menu_item_set_image(menu_item, image);
@@ -7114,8 +7114,8 @@ public static final void gtk_image_menu_item_set_image(int /*long*/ menu_item, i
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_image_new();
-public static final int /*long*/ gtk_image_new() {
+public static final native long /*int*/ _gtk_image_new();
+public static final long /*int*/ gtk_image_new() {
 	lock.lock();
 	try {
 		return _gtk_image_new();
@@ -7124,8 +7124,8 @@ public static final int /*long*/ gtk_image_new() {
 	}
 }
 /** @param pixbuf cast=(GdkPixbuf *) */
-public static final native int /*long*/ _gtk_image_new_from_pixbuf(int /*long*/ pixbuf); 
-public static final int /*long*/ gtk_image_new_from_pixbuf(int /*long*/ pixbuf) {
+public static final native long /*int*/ _gtk_image_new_from_pixbuf(long /*int*/ pixbuf); 
+public static final long /*int*/ gtk_image_new_from_pixbuf(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gtk_image_new_from_pixbuf(pixbuf);
@@ -7137,8 +7137,8 @@ public static final int /*long*/ gtk_image_new_from_pixbuf(int /*long*/ pixbuf)
  * @param pixmap cast=(GdkPixmap *)
  * @param mask cast=(GdkBitmap *)
  */
-public static final native int /*long*/ _gtk_image_new_from_pixmap(int /*long*/ pixmap, int /*long*/ mask);
-public static final int /*long*/ gtk_image_new_from_pixmap(int /*long*/ pixmap, int /*long*/ mask) {
+public static final native long /*int*/ _gtk_image_new_from_pixmap(long /*int*/ pixmap, long /*int*/ mask);
+public static final long /*int*/ gtk_image_new_from_pixmap(long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		return _gtk_image_new_from_pixmap(pixmap, mask);
@@ -7150,8 +7150,8 @@ public static final int /*long*/ gtk_image_new_from_pixmap(int /*long*/ pixmap,
  * @param image cast=(GtkImage *)
  * @param pixbuf cast=(GdkPixbuf *)
  */
-public static final native void _gtk_image_set_from_pixbuf(int /*long*/ image, int /*long*/ pixbuf);
-public static final void gtk_image_set_from_pixbuf(int /*long*/ image, int /*long*/ pixbuf) {
+public static final native void _gtk_image_set_from_pixbuf(long /*int*/ image, long /*int*/ pixbuf);
+public static final void gtk_image_set_from_pixbuf(long /*int*/ image, long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		_gtk_image_set_from_pixbuf(image, pixbuf);
@@ -7164,8 +7164,8 @@ public static final void gtk_image_set_from_pixbuf(int /*long*/ image, int /*lon
  * @param pixmap cast=(GdkBitmap *)
  * @param mask cast=(GdkBitmap *)
  */
-public static final native void _gtk_image_set_from_pixmap(int /*long*/ image, int /*long*/ pixmap, int /*long*/ mask);
-public static final void gtk_image_set_from_pixmap(int /*long*/ image, int /*long*/ pixmap, int /*long*/ mask) {
+public static final native void _gtk_image_set_from_pixmap(long /*int*/ image, long /*int*/ pixmap, long /*int*/ mask);
+public static final void gtk_image_set_from_pixmap(long /*int*/ image, long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gtk_image_set_from_pixmap(image, pixmap, mask);
@@ -7177,8 +7177,8 @@ public static final void gtk_image_set_from_pixmap(int /*long*/ image, int /*lon
  * @param argc cast=(int *)
  * @param argv cast=(char ***)
  */
-public static final native boolean _gtk_init_check(int /*long*/[] argc, int /*long*/[] argv);
-public static final boolean gtk_init_check(int /*long*/[] argc, int /*long*/[] argv) {
+public static final native boolean _gtk_init_check(long /*int*/[] argc, long /*int*/[] argv);
+public static final boolean gtk_init_check(long /*int*/[] argc, long /*int*/[] argv) {
 	lock.lock();
 	try {
 		return _gtk_init_check(argc, argv);
@@ -7187,8 +7187,8 @@ public static final boolean gtk_init_check(int /*long*/[] argc, int /*long*/[] a
 	}
 }
 /** @param label cast=(GtkLabel *) */
-public static final native int /*long*/ _gtk_label_get_layout(int /*long*/ label);
-public static final int /*long*/ gtk_label_get_layout(int /*long*/ label) {
+public static final native long /*int*/ _gtk_label_get_layout(long /*int*/ label);
+public static final long /*int*/ gtk_label_get_layout(long /*int*/ label) {
 	lock.lock();
 	try {
 		return _gtk_label_get_layout(label);
@@ -7197,8 +7197,8 @@ public static final int /*long*/ gtk_label_get_layout(int /*long*/ label) {
 	}
 }
 /** @param label cast=(GtkLabel *) */
-public static final native int _gtk_label_get_mnemonic_keyval(int /*long*/ label);
-public static final int gtk_label_get_mnemonic_keyval(int /*long*/ label) {
+public static final native int _gtk_label_get_mnemonic_keyval(long /*int*/ label);
+public static final int gtk_label_get_mnemonic_keyval(long /*int*/ label) {
 	lock.lock();
 	try {
 		return _gtk_label_get_mnemonic_keyval(label);
@@ -7207,8 +7207,8 @@ public static final int gtk_label_get_mnemonic_keyval(int /*long*/ label) {
 	}
 }
 /** @param label cast=(const gchar *) */
-public static final native int /*long*/ _gtk_label_new(byte[] label);
-public static final int /*long*/ gtk_label_new(byte[] label) {
+public static final native long /*int*/ _gtk_label_new(byte[] label);
+public static final long /*int*/ gtk_label_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_label_new(label);
@@ -7217,8 +7217,8 @@ public static final int /*long*/ gtk_label_new(byte[] label) {
 	}
 }
 /** @param str cast=(const gchar *) */
-public static final native int /*long*/ _gtk_label_new_with_mnemonic(byte[] str);
-public static final int /*long*/ gtk_label_new_with_mnemonic(byte[] str) {
+public static final native long /*int*/ _gtk_label_new_with_mnemonic(byte[] str);
+public static final long /*int*/ gtk_label_new_with_mnemonic(byte[] str) {
 	lock.lock();
 	try {
 		return _gtk_label_new_with_mnemonic(str);
@@ -7230,8 +7230,8 @@ public static final int /*long*/ gtk_label_new_with_mnemonic(byte[] str) {
  * @param label cast=(GtkLabel *)
  * @param attrs cast=(PangoAttrList *)
  */
-public static final native void _gtk_label_set_attributes(int /*long*/ label, int /*long*/ attrs);
-public static final void gtk_label_set_attributes(int /*long*/ label, int /*long*/ attrs) {
+public static final native void _gtk_label_set_attributes(long /*int*/ label, long /*int*/ attrs);
+public static final void gtk_label_set_attributes(long /*int*/ label, long /*int*/ attrs) {
 	lock.lock();
 	try {
 		_gtk_label_set_attributes(label, attrs);
@@ -7243,8 +7243,8 @@ public static final void gtk_label_set_attributes(int /*long*/ label, int /*long
  * @param label cast=(GtkLabel *)
  * @param jtype cast=(GtkJustification)
  */
-public static final native void _gtk_label_set_justify(int /*long*/ label, int jtype);
-public static final void gtk_label_set_justify(int /*long*/ label, int jtype) {
+public static final native void _gtk_label_set_justify(long /*int*/ label, int jtype);
+public static final void gtk_label_set_justify(long /*int*/ label, int jtype) {
 	lock.lock();
 	try {
 		_gtk_label_set_justify(label, jtype);
@@ -7256,8 +7256,8 @@ public static final void gtk_label_set_justify(int /*long*/ label, int jtype) {
  * @param label cast=(GtkLabel *)
  * @param wrap cast=(gboolean)
  */
-public static final native void _gtk_label_set_line_wrap(int /*long*/ label, boolean wrap);
-public static final void gtk_label_set_line_wrap(int /*long*/ label, boolean wrap) {
+public static final native void _gtk_label_set_line_wrap(long /*int*/ label, boolean wrap);
+public static final void gtk_label_set_line_wrap(long /*int*/ label, boolean wrap) {
 	lock.lock();
 	try {
 		_gtk_label_set_line_wrap(label, wrap);
@@ -7266,8 +7266,8 @@ public static final void gtk_label_set_line_wrap(int /*long*/ label, boolean wra
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_label_set_line_wrap_mode(int /*long*/ label, int wrap_mode);
-public static final void gtk_label_set_line_wrap_mode(int /*long*/ label, int wrap_mode) {
+public static final native void _gtk_label_set_line_wrap_mode(long /*int*/ label, int wrap_mode);
+public static final void gtk_label_set_line_wrap_mode(long /*int*/ label, int wrap_mode) {
 	lock.lock();
 	try {
 		_gtk_label_set_line_wrap_mode(label, wrap_mode);
@@ -7279,8 +7279,8 @@ public static final void gtk_label_set_line_wrap_mode(int /*long*/ label, int wr
  * @param label cast=(GtkLabel *)
  * @param str cast=(const gchar *)
  */
-public static final native void _gtk_label_set_text(int /*long*/ label, int /*long*/ str);
-public static final void gtk_label_set_text(int /*long*/ label, int /*long*/ str) {
+public static final native void _gtk_label_set_text(long /*int*/ label, long /*int*/ str);
+public static final void gtk_label_set_text(long /*int*/ label, long /*int*/ str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text(label, str);
@@ -7292,8 +7292,8 @@ public static final void gtk_label_set_text(int /*long*/ label, int /*long*/ str
  * @param label cast=(GtkLabel *)
  * @param str cast=(const gchar *)
  */
-public static final native void _gtk_label_set_text(int /*long*/ label, byte[] str);
-public static final void gtk_label_set_text(int /*long*/ label, byte[] str) {
+public static final native void _gtk_label_set_text(long /*int*/ label, byte[] str);
+public static final void gtk_label_set_text(long /*int*/ label, byte[] str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text(label, str);
@@ -7305,8 +7305,8 @@ public static final void gtk_label_set_text(int /*long*/ label, byte[] str) {
  * @param label cast=(GtkLabel *)
  * @param str cast=(const gchar *)
  */
-public static final native void _gtk_label_set_text_with_mnemonic(int /*long*/ label, byte[] str);
-public static final void gtk_label_set_text_with_mnemonic(int /*long*/ label, byte[] str) {
+public static final native void _gtk_label_set_text_with_mnemonic(long /*int*/ label, byte[] str);
+public static final void gtk_label_set_text_with_mnemonic(long /*int*/ label, byte[] str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text_with_mnemonic(label, str);
@@ -7318,8 +7318,8 @@ public static final void gtk_label_set_text_with_mnemonic(int /*long*/ label, by
  * @param list cast=(GtkList *)
  * @param items cast=(GList *)
  */
-public static final native void _gtk_list_append_items(int /*long*/ list, int /*long*/ items);
-public static final void gtk_list_append_items(int /*long*/ list, int /*long*/ items) {
+public static final native void _gtk_list_append_items(long /*int*/ list, long /*int*/ items);
+public static final void gtk_list_append_items(long /*int*/ list, long /*int*/ items) {
 	lock.lock();
 	try {
 		_gtk_list_append_items(list, items);
@@ -7328,8 +7328,8 @@ public static final void gtk_list_append_items(int /*long*/ list, int /*long*/ i
 	}
 }
 /** @param list cast=(GtkList *) */
-public static final native void _gtk_list_clear_items(int /*long*/ list, int start, int end);
-public static final void gtk_list_clear_items(int /*long*/ list, int start, int end) {
+public static final native void _gtk_list_clear_items(long /*int*/ list, int start, int end);
+public static final void gtk_list_clear_items(long /*int*/ list, int start, int end) {
 	lock.lock();
 	try {
 		_gtk_list_clear_items(list, start, end);
@@ -7341,8 +7341,8 @@ public static final void gtk_list_clear_items(int /*long*/ list, int start, int
  * @param list cast=(GtkList *)
  * @param items cast=(GList *)
  */
-public static final native void _gtk_list_insert_items(int /*long*/ list, int /*long*/ items, int position);
-public static final void gtk_list_insert_items(int /*long*/ list, int /*long*/ items, int position) {
+public static final native void _gtk_list_insert_items(long /*int*/ list, long /*int*/ items, int position);
+public static final void gtk_list_insert_items(long /*int*/ list, long /*int*/ items, int position) {
 	lock.lock();
 	try {
 		_gtk_list_insert_items(list, items, position);
@@ -7351,8 +7351,8 @@ public static final void gtk_list_insert_items(int /*long*/ list, int /*long*/ i
 	}
 }
 /** @param label cast=(const gchar *) */
-public static final native int /*long*/ _gtk_list_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_list_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_list_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_list_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_list_item_new_with_label(label);
@@ -7364,8 +7364,8 @@ public static final int /*long*/ gtk_list_item_new_with_label(byte[] label) {
  * @param list cast=(GtkList *)
  * @param items cast=(GList *)
  */
-public static final native void _gtk_list_remove_items(int /*long*/ list, int /*long*/ items);
-public static final void gtk_list_remove_items(int /*long*/ list, int /*long*/ items) {
+public static final native void _gtk_list_remove_items(long /*int*/ list, long /*int*/ items);
+public static final void gtk_list_remove_items(long /*int*/ list, long /*int*/ items) {
 	lock.lock();
 	try {
 		_gtk_list_remove_items(list, items);
@@ -7374,8 +7374,8 @@ public static final void gtk_list_remove_items(int /*long*/ list, int /*long*/ i
 	}
 }
 /** @param list cast=(GtkList *) */
-public static final native void _gtk_list_select_item(int /*long*/ list, int item);
-public static final void gtk_list_select_item(int /*long*/ list, int item) {
+public static final native void _gtk_list_select_item(long /*int*/ list, int item);
+public static final void gtk_list_select_item(long /*int*/ list, int item) {
 	lock.lock();
 	try {
 		_gtk_list_select_item(list, item);
@@ -7384,8 +7384,8 @@ public static final void gtk_list_select_item(int /*long*/ list, int item) {
 	}
 }
 /** @param list cast=(GtkList *) */
-public static final native void _gtk_list_unselect_all(int /*long*/ list);
-public static final void gtk_list_unselect_all(int /*long*/ list) {
+public static final native void _gtk_list_unselect_all(long /*int*/ list);
+public static final void gtk_list_unselect_all(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gtk_list_unselect_all(list);
@@ -7394,8 +7394,8 @@ public static final void gtk_list_unselect_all(int /*long*/ list) {
 	}
 }
 /** @param list cast=(GtkList *) */
-public static final native void _gtk_list_unselect_item(int /*long*/ list, int item);
-public static final void gtk_list_unselect_item(int /*long*/ list, int item) {
+public static final native void _gtk_list_unselect_item(long /*int*/ list, int item);
+public static final void gtk_list_unselect_item(long /*int*/ list, int item) {
 	lock.lock();
 	try {
 		_gtk_list_unselect_item(list, item);
@@ -7407,8 +7407,8 @@ public static final void gtk_list_unselect_item(int /*long*/ list, int item) {
  * @param list_store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_append(int /*long*/ list_store, int /*long*/ iter);
-public static final void gtk_list_store_append(int /*long*/ list_store, int /*long*/ iter) {
+public static final native void _gtk_list_store_append(long /*int*/ list_store, long /*int*/ iter);
+public static final void gtk_list_store_append(long /*int*/ list_store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_list_store_append(list_store, iter);
@@ -7417,8 +7417,8 @@ public static final void gtk_list_store_append(int /*long*/ list_store, int /*lo
 	}
 }
 /** @param store cast=(GtkListStore *) */
-public static final native void _gtk_list_store_clear(int /*long*/ store);
-public static final void gtk_list_store_clear(int /*long*/ store) {
+public static final native void _gtk_list_store_clear(long /*int*/ store);
+public static final void gtk_list_store_clear(long /*int*/ store) {
 	lock.lock();
 	try {
 		_gtk_list_store_clear(store);
@@ -7431,8 +7431,8 @@ public static final void gtk_list_store_clear(int /*long*/ store) {
  * @param iter cast=(GtkTreeIter *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_list_store_insert(int /*long*/ list_store, int /*long*/ iter, int position);
-public static final void gtk_list_store_insert(int /*long*/ list_store, int /*long*/ iter, int position) {
+public static final native void _gtk_list_store_insert(long /*int*/ list_store, long /*int*/ iter, int position);
+public static final void gtk_list_store_insert(long /*int*/ list_store, long /*int*/ iter, int position) {
 	lock.lock();
 	try {
 		_gtk_list_store_insert(list_store, iter, position);
@@ -7444,8 +7444,8 @@ public static final void gtk_list_store_insert(int /*long*/ list_store, int /*lo
  * @param numColumns cast=(gint)
  * @param types cast=(GType *)
  */
-public static final native int /*long*/ _gtk_list_store_newv(int numColumns, int /*long*/[] types);
-public static final int /*long*/ gtk_list_store_newv(int numColumns, int /*long*/[] types) {
+public static final native long /*int*/ _gtk_list_store_newv(int numColumns, long /*int*/[] types);
+public static final long /*int*/ gtk_list_store_newv(int numColumns, long /*int*/[] types) {
 	lock.lock();
 	try {
 		return _gtk_list_store_newv(numColumns, types);
@@ -7457,8 +7457,8 @@ public static final int /*long*/ gtk_list_store_newv(int numColumns, int /*long*
  * @param list_store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_remove(int /*long*/ list_store, int /*long*/ iter);
-public static final void gtk_list_store_remove(int /*long*/ list_store, int /*long*/ iter) {
+public static final native void _gtk_list_store_remove(long /*int*/ list_store, long /*int*/ iter);
+public static final void gtk_list_store_remove(long /*int*/ list_store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_list_store_remove(list_store, iter);
@@ -7470,8 +7470,8 @@ public static final void gtk_list_store_remove(int /*long*/ list_store, int /*lo
  * @param store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -7483,8 +7483,8 @@ public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -7496,8 +7496,8 @@ public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -7510,8 +7510,8 @@ public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ ite
  * @param iter cast=(GtkTreeIter *)
  * @param value flags=no_out
  */
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -7523,8 +7523,8 @@ public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkListStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -7581,8 +7581,8 @@ public static final int gtk_main_iteration() {
 	}
 }
 /** @param event cast=(GdkEvent *) */
-public static final native void _gtk_main_do_event(int /*long*/ event);
-public static final void gtk_main_do_event(int /*long*/ event) {
+public static final native void _gtk_main_do_event(long /*int*/ event);
+public static final void gtk_main_do_event(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gtk_main_do_event(event);
@@ -7590,8 +7590,8 @@ public static final void gtk_main_do_event(int /*long*/ event) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_menu_bar_new();
-public static final int /*long*/ gtk_menu_bar_new() {
+public static final native long /*int*/ _gtk_menu_bar_new();
+public static final long /*int*/ gtk_menu_bar_new() {
 	lock.lock();
 	try {
 		return _gtk_menu_bar_new();
@@ -7600,8 +7600,8 @@ public static final int /*long*/ gtk_menu_bar_new() {
 	}
 }
 /** @param menu cast=(GtkMenu *) */
-public static final native int /*long*/ _gtk_menu_get_attach_widget(int /*long*/ menu);
-public static final int /*long*/ gtk_menu_get_attach_widget(int /*long*/ menu) {
+public static final native long /*int*/ _gtk_menu_get_attach_widget(long /*int*/ menu);
+public static final long /*int*/ gtk_menu_get_attach_widget(long /*int*/ menu) {
 	lock.lock();
 	try {
 		return _gtk_menu_get_attach_widget(menu);
@@ -7610,8 +7610,8 @@ public static final int /*long*/ gtk_menu_get_attach_widget(int /*long*/ menu) {
 	}
 }
 /** @param menu_item cast=(GtkMenuItem *) */
-public static final native void _gtk_menu_item_remove_submenu(int /*long*/ menu_item);
-public static final void gtk_menu_item_remove_submenu(int /*long*/ menu_item) {
+public static final native void _gtk_menu_item_remove_submenu(long /*int*/ menu_item);
+public static final void gtk_menu_item_remove_submenu(long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		_gtk_menu_item_remove_submenu(menu_item);
@@ -7620,8 +7620,8 @@ public static final void gtk_menu_item_remove_submenu(int /*long*/ menu_item) {
 	}
 }
 /** @param menu_item cast=(GtkMenuItem *) */
-public static final native int /*long*/ _gtk_menu_item_get_submenu(int /*long*/ menu_item);
-public static final int /*long*/ gtk_menu_item_get_submenu(int /*long*/ menu_item) {
+public static final native long /*int*/ _gtk_menu_item_get_submenu(long /*int*/ menu_item);
+public static final long /*int*/ gtk_menu_item_get_submenu(long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		return _gtk_menu_item_get_submenu(menu_item);
@@ -7633,8 +7633,8 @@ public static final int /*long*/ gtk_menu_item_get_submenu(int /*long*/ menu_ite
  * @param menu_item cast=(GtkMenuItem *)
  * @param submenu cast=(GtkWidget *)
  */
-public static final native void _gtk_menu_item_set_submenu(int /*long*/ menu_item, int /*long*/ submenu);
-public static final void gtk_menu_item_set_submenu(int /*long*/ menu_item, int /*long*/ submenu) {
+public static final native void _gtk_menu_item_set_submenu(long /*int*/ menu_item, long /*int*/ submenu);
+public static final void gtk_menu_item_set_submenu(long /*int*/ menu_item, long /*int*/ submenu) {
 	lock.lock();
 	try {
 		_gtk_menu_item_set_submenu(menu_item, submenu);
@@ -7642,8 +7642,8 @@ public static final void gtk_menu_item_set_submenu(int /*long*/ menu_item, int /
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_menu_new();
-public static final int /*long*/ gtk_menu_new() {
+public static final native long /*int*/ _gtk_menu_new();
+public static final long /*int*/ gtk_menu_new() {
 	lock.lock();
 	try {
 		return _gtk_menu_new();
@@ -7652,8 +7652,8 @@ public static final int /*long*/ gtk_menu_new() {
 	}
 }
 /** @param menu cast=(GtkMenu *) */
-public static final native void _gtk_menu_popdown(int /*long*/ menu);
-public static final void gtk_menu_popdown(int /*long*/ menu) {
+public static final native void _gtk_menu_popdown(long /*int*/ menu);
+public static final void gtk_menu_popdown(long /*int*/ menu) {
 	lock.lock();
 	try {
 		_gtk_menu_popdown(menu);
@@ -7670,8 +7670,8 @@ public static final void gtk_menu_popdown(int /*long*/ menu) {
  * @param button cast=(guint)
  * @param activate_time cast=(guint32)
  */
-public static final native void _gtk_menu_popup(int /*long*/ menu, int /*long*/ parent_menu_shell, int /*long*/ parent_menu_item, int /*long*/ func, int /*long*/ data, int button, int activate_time);
-public static final void gtk_menu_popup(int /*long*/ menu, int /*long*/ parent_menu_shell, int /*long*/ parent_menu_item, int /*long*/ func, int /*long*/ data, int button, int activate_time) {
+public static final native void _gtk_menu_popup(long /*int*/ menu, long /*int*/ parent_menu_shell, long /*int*/ parent_menu_item, long /*int*/ func, long /*int*/ data, int button, int activate_time);
+public static final void gtk_menu_popup(long /*int*/ menu, long /*int*/ parent_menu_shell, long /*int*/ parent_menu_item, long /*int*/ func, long /*int*/ data, int button, int activate_time) {
 	lock.lock();
 	try {
 		_gtk_menu_popup(menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time);
@@ -7680,8 +7680,8 @@ public static final void gtk_menu_popup(int /*long*/ menu, int /*long*/ parent_m
 	}
 }
 /** @param menu_shell cast=(GtkMenuShell *) */
-public static final native void _gtk_menu_shell_deactivate(int /*long*/ menu_shell);
-public static final void gtk_menu_shell_deactivate(int /*long*/ menu_shell) {
+public static final native void _gtk_menu_shell_deactivate(long /*int*/ menu_shell);
+public static final void gtk_menu_shell_deactivate(long /*int*/ menu_shell) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_deactivate(menu_shell);
@@ -7694,8 +7694,8 @@ public static final void gtk_menu_shell_deactivate(int /*long*/ menu_shell) {
  * @param child cast=(GtkWidget *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_menu_shell_insert(int /*long*/ menu_shell, int /*long*/ child, int position);
-public static final void gtk_menu_shell_insert(int /*long*/ menu_shell, int /*long*/ child, int position) {
+public static final native void _gtk_menu_shell_insert(long /*int*/ menu_shell, long /*int*/ child, int position);
+public static final void gtk_menu_shell_insert(long /*int*/ menu_shell, long /*int*/ child, int position) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_insert(menu_shell, child, position);
@@ -7707,8 +7707,8 @@ public static final void gtk_menu_shell_insert(int /*long*/ menu_shell, int /*lo
  * @param menu_shell cast=(GtkMenuShell *)
  * @param menu_item cast=(GtkWidget *)
  */
-public static final native void _gtk_menu_shell_select_item(int /*long*/ menu_shell, int /*long*/ menu_item);
-public static final void gtk_menu_shell_select_item(int /*long*/ menu_shell, int /*long*/ menu_item) {
+public static final native void _gtk_menu_shell_select_item(long /*int*/ menu_shell, long /*int*/ menu_item);
+public static final void gtk_menu_shell_select_item(long /*int*/ menu_shell, long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_select_item(menu_shell, menu_item);
@@ -7721,8 +7721,8 @@ public static final void gtk_menu_shell_select_item(int /*long*/ menu_shell, int
  * @param menu_shell cast=(GtkMenuShell *)
  * @param take_focus cast=(gboolean)
  */
-public static final native void _gtk_menu_shell_set_take_focus(int /*long*/ menu_shell, boolean take_focus);
-public static final void gtk_menu_shell_set_take_focus(int /*long*/ menu_shell, boolean take_focus) {
+public static final native void _gtk_menu_shell_set_take_focus(long /*int*/ menu_shell, boolean take_focus);
+public static final void gtk_menu_shell_set_take_focus(long /*int*/ menu_shell, boolean take_focus) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_set_take_focus(menu_shell, take_focus);
@@ -7737,8 +7737,8 @@ public static final void gtk_menu_shell_set_take_focus(int /*long*/ menu_shell,
  * @param buttons cast=(GtkButtonsType)
  * @param message_format cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_message_dialog_new(int /*long*/ parent, int flags, int type, int buttons, byte[] message_format);
-public static final int /*long*/ gtk_message_dialog_new(int /*long*/ parent, int flags, int type, int buttons, byte[] message_format) {
+public static final native long /*int*/ _gtk_message_dialog_new(long /*int*/ parent, int flags, int type, int buttons, byte[] message_format);
+public static final long /*int*/ gtk_message_dialog_new(long /*int*/ parent, int flags, int type, int buttons, byte[] message_format) {
 	lock.lock();
 	try {
 		return _gtk_message_dialog_new(parent, flags, type, buttons, message_format);
@@ -7751,8 +7751,8 @@ public static final int /*long*/ gtk_message_dialog_new(int /*long*/ parent, int
  * @param xalign cast=(gfloat)
  * @param yalign cast=(gfloat)
  */
-public static final native void _gtk_misc_set_alignment(int /*long*/ misc, float xalign, float yalign);
-public static final void gtk_misc_set_alignment(int /*long*/ misc, float xalign, float yalign) {
+public static final native void _gtk_misc_set_alignment(long /*int*/ misc, float xalign, float yalign);
+public static final void gtk_misc_set_alignment(long /*int*/ misc, float xalign, float yalign) {
 	lock.lock();
 	try {
 		_gtk_misc_set_alignment(misc, xalign, yalign);
@@ -7761,8 +7761,8 @@ public static final void gtk_misc_set_alignment(int /*long*/ misc, float xalign,
 	}
 }
 /** @param notebook cast=(GtkNotebook *) */
-public static final native int _gtk_notebook_get_current_page(int /*long*/ notebook);
-public static final int gtk_notebook_get_current_page(int /*long*/ notebook) {
+public static final native int _gtk_notebook_get_current_page(long /*int*/ notebook);
+public static final int gtk_notebook_get_current_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		return _gtk_notebook_get_current_page(notebook);
@@ -7771,8 +7771,8 @@ public static final int gtk_notebook_get_current_page(int /*long*/ notebook) {
 	}
 }
 /** @param notebook cast=(GtkNotebook *) */
-public static final native boolean _gtk_notebook_get_scrollable(int /*long*/ notebook);
-public static final boolean gtk_notebook_get_scrollable(int /*long*/ notebook) {
+public static final native boolean _gtk_notebook_get_scrollable(long /*int*/ notebook);
+public static final boolean gtk_notebook_get_scrollable(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		return _gtk_notebook_get_scrollable(notebook);
@@ -7786,8 +7786,8 @@ public static final boolean gtk_notebook_get_scrollable(int /*long*/ notebook) {
  * @param tab_label cast=(GtkWidget *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_notebook_insert_page(int /*long*/ notebook, int /*long*/ child, int /*long*/ tab_label, int position);
-public static final void gtk_notebook_insert_page(int /*long*/ notebook, int /*long*/ child, int /*long*/ tab_label, int position) {
+public static final native void _gtk_notebook_insert_page(long /*int*/ notebook, long /*int*/ child, long /*int*/ tab_label, int position);
+public static final void gtk_notebook_insert_page(long /*int*/ notebook, long /*int*/ child, long /*int*/ tab_label, int position) {
 	lock.lock();
 	try {
 		_gtk_notebook_insert_page(notebook, child, tab_label, position);
@@ -7795,8 +7795,8 @@ public static final void gtk_notebook_insert_page(int /*long*/ notebook, int /*l
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_notebook_new();
-public static final int /*long*/ gtk_notebook_new() {
+public static final native long /*int*/ _gtk_notebook_new();
+public static final long /*int*/ gtk_notebook_new() {
 	lock.lock();
 	try {
 		return _gtk_notebook_new();
@@ -7805,8 +7805,8 @@ public static final int /*long*/ gtk_notebook_new() {
 	}
 }
 /** @param notebook cast=(GtkNotebook *) */
-public static final native void _gtk_notebook_next_page(int /*long*/ notebook);
-public static final void gtk_notebook_next_page(int /*long*/ notebook) {
+public static final native void _gtk_notebook_next_page(long /*int*/ notebook);
+public static final void gtk_notebook_next_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		_gtk_notebook_next_page(notebook);
@@ -7815,8 +7815,8 @@ public static final void gtk_notebook_next_page(int /*long*/ notebook) {
 	}
 }
 /** @param notebook cast=(GtkNotebook *) */
-public static final native void _gtk_notebook_prev_page(int /*long*/ notebook);
-public static final void gtk_notebook_prev_page(int /*long*/ notebook) {
+public static final native void _gtk_notebook_prev_page(long /*int*/ notebook);
+public static final void gtk_notebook_prev_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		_gtk_notebook_prev_page(notebook);
@@ -7828,8 +7828,8 @@ public static final void gtk_notebook_prev_page(int /*long*/ notebook) {
  * @param notebook cast=(GtkNotebook *)
  * @param page_num cast=(gint)
  */
-public static final native void _gtk_notebook_remove_page(int /*long*/ notebook, int page_num);
-public static final void gtk_notebook_remove_page(int /*long*/ notebook, int page_num) {
+public static final native void _gtk_notebook_remove_page(long /*int*/ notebook, int page_num);
+public static final void gtk_notebook_remove_page(long /*int*/ notebook, int page_num) {
 	lock.lock();
 	try {
 		_gtk_notebook_remove_page(notebook, page_num);
@@ -7841,8 +7841,8 @@ public static final void gtk_notebook_remove_page(int /*long*/ notebook, int pag
  * @param notebook cast=(GtkNotebook *)
  * @param page_num cast=(gint)
  */
-public static final native void _gtk_notebook_set_current_page(int /*long*/ notebook, int page_num);
-public static final void gtk_notebook_set_current_page(int /*long*/ notebook, int page_num) {
+public static final native void _gtk_notebook_set_current_page(long /*int*/ notebook, int page_num);
+public static final void gtk_notebook_set_current_page(long /*int*/ notebook, int page_num) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_current_page(notebook, page_num);
@@ -7854,8 +7854,8 @@ public static final void gtk_notebook_set_current_page(int /*long*/ notebook, in
  * @param notebook cast=(GtkNotebook *)
  * @param scrollable cast=(gboolean)
  */
-public static final native void _gtk_notebook_set_scrollable(int /*long*/ notebook, boolean scrollable);
-public static final void gtk_notebook_set_scrollable(int /*long*/ notebook, boolean scrollable) {
+public static final native void _gtk_notebook_set_scrollable(long /*int*/ notebook, boolean scrollable);
+public static final void gtk_notebook_set_scrollable(long /*int*/ notebook, boolean scrollable) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_scrollable(notebook, scrollable);
@@ -7867,8 +7867,8 @@ public static final void gtk_notebook_set_scrollable(int /*long*/ notebook, bool
  * @param notebook cast=(GtkNotebook *)
  * @param show_tabs cast=(gboolean)
  */
-public static final native void _gtk_notebook_set_show_tabs(int /*long*/ notebook, boolean show_tabs);
-public static final void gtk_notebook_set_show_tabs(int /*long*/ notebook, boolean show_tabs) {
+public static final native void _gtk_notebook_set_show_tabs(long /*int*/ notebook, boolean show_tabs);
+public static final void gtk_notebook_set_show_tabs(long /*int*/ notebook, boolean show_tabs) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_show_tabs(notebook, show_tabs);
@@ -7880,8 +7880,8 @@ public static final void gtk_notebook_set_show_tabs(int /*long*/ notebook, boole
  * @param notebook cast=(GtkNotebook *)
  * @param pos cast=(GtkPositionType)
  */
-public static final native void _gtk_notebook_set_tab_pos(int /*long*/ notebook, int pos);
-public static final void gtk_notebook_set_tab_pos(int /*long*/ notebook, int pos) {
+public static final native void _gtk_notebook_set_tab_pos(long /*int*/ notebook, int pos);
+public static final void gtk_notebook_set_tab_pos(long /*int*/ notebook, int pos) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_tab_pos(notebook, pos);
@@ -7890,8 +7890,8 @@ public static final void gtk_notebook_set_tab_pos(int /*long*/ notebook, int pos
 	}
 }
 /** @param object cast=(GtkObject *) */
-public static final native void _gtk_object_sink(int /*long*/ object);
-public static final void gtk_object_sink(int /*long*/ object) {
+public static final native void _gtk_object_sink(long /*int*/ object);
+public static final void gtk_object_sink(long /*int*/ object) {
 	lock.lock();
 	try {
 		_gtk_object_sink(object);
@@ -7900,8 +7900,8 @@ public static final void gtk_object_sink(int /*long*/ object) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_page_setup_new ();
-public static final int /*long*/ gtk_page_setup_new () {
+public static final native long /*int*/ _gtk_page_setup_new ();
+public static final long /*int*/ gtk_page_setup_new () {
 	lock.lock();
 	try {
 		return _gtk_page_setup_new ();
@@ -7910,8 +7910,8 @@ public static final int /*long*/ gtk_page_setup_new () {
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_page_setup_get_orientation(int /*long*/ setup);
-public static final int gtk_page_setup_get_orientation(int /*long*/ setup) {
+public static final native int _gtk_page_setup_get_orientation(long /*int*/ setup);
+public static final int gtk_page_setup_get_orientation(long /*int*/ setup) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_orientation(setup);
@@ -7920,8 +7920,8 @@ public static final int gtk_page_setup_get_orientation(int /*long*/ setup) {
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_orientation(int /*long*/ setup, int orientation);
-public static final void gtk_page_setup_set_orientation(int /*long*/ setup, int orientation) {
+public static final native void _gtk_page_setup_set_orientation(long /*int*/ setup, int orientation);
+public static final void gtk_page_setup_set_orientation(long /*int*/ setup, int orientation) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_orientation(setup, orientation);
@@ -7930,8 +7930,8 @@ public static final void gtk_page_setup_set_orientation(int /*long*/ setup, int
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_page_setup_get_paper_size(int /*long*/ setup);
-public static final int /*long*/ gtk_page_setup_get_paper_size(int /*long*/ setup) {
+public static final native long /*int*/ _gtk_page_setup_get_paper_size(long /*int*/ setup);
+public static final long /*int*/ gtk_page_setup_get_paper_size(long /*int*/ setup) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_size(setup);
@@ -7940,8 +7940,8 @@ public static final int /*long*/ gtk_page_setup_get_paper_size(int /*long*/ setu
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_paper_size(int /*long*/ setup, int /*long*/ size);
-public static final void gtk_page_setup_set_paper_size(int /*long*/ setup, int /*long*/ size) {
+public static final native void _gtk_page_setup_set_paper_size(long /*int*/ setup, long /*int*/ size);
+public static final void gtk_page_setup_set_paper_size(long /*int*/ setup, long /*int*/ size) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_paper_size(setup, size);
@@ -7950,8 +7950,8 @@ public static final void gtk_page_setup_set_paper_size(int /*long*/ setup, int /
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_top_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_top_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_top_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_top_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_top_margin(setup, unit);
@@ -7960,8 +7960,8 @@ public static final double gtk_page_setup_get_top_margin(int /*long*/ setup, int
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_top_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_top_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_top_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_top_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_top_margin(setup, margin, unit);
@@ -7970,8 +7970,8 @@ public static final void gtk_page_setup_set_top_margin(int /*long*/ setup, doubl
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_bottom_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_bottom_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_bottom_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_bottom_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_bottom_margin(setup, unit);
@@ -7980,8 +7980,8 @@ public static final double gtk_page_setup_get_bottom_margin(int /*long*/ setup,
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_bottom_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_bottom_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_bottom_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_bottom_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_bottom_margin(setup, margin, unit);
@@ -7990,8 +7990,8 @@ public static final void gtk_page_setup_set_bottom_margin(int /*long*/ setup, do
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_left_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_left_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_left_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_left_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_left_margin(setup, unit);
@@ -8000,8 +8000,8 @@ public static final double gtk_page_setup_get_left_margin(int /*long*/ setup, in
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_left_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_left_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_left_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_left_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_left_margin(setup, margin, unit);
@@ -8010,8 +8010,8 @@ public static final void gtk_page_setup_set_left_margin(int /*long*/ setup, doub
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_right_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_right_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_right_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_right_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_right_margin(setup, unit);
@@ -8020,8 +8020,8 @@ public static final double gtk_page_setup_get_right_margin(int /*long*/ setup, i
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_page_setup_set_right_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_right_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_right_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_right_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_right_margin(setup, margin, unit);
@@ -8030,8 +8030,8 @@ public static final void gtk_page_setup_set_right_margin(int /*long*/ setup, dou
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_paper_width(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_paper_width(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_paper_width(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_paper_width(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_width(setup, unit);
@@ -8040,8 +8040,8 @@ public static final double gtk_page_setup_get_paper_width(int /*long*/ setup, in
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_paper_height(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_paper_height(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_paper_height(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_paper_height(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_height(setup, unit);
@@ -8050,8 +8050,8 @@ public static final double gtk_page_setup_get_paper_height(int /*long*/ setup, i
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_page_width(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_page_width(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_page_width(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_page_width(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_page_width(setup, unit);
@@ -8060,8 +8060,8 @@ public static final double gtk_page_setup_get_page_width(int /*long*/ setup, int
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_page_setup_get_page_height(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_page_height(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_page_height(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_page_height(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_page_height(setup, unit);
@@ -8076,8 +8076,8 @@ public static final double gtk_page_setup_get_page_height(int /*long*/ setup, in
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_handle(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
-public static final void gtk_paint_handle(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
+public static final native void _gtk_paint_handle(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
+public static final void gtk_paint_handle(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
 	lock.lock();
 	try {
 		_gtk_paint_handle(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation);
@@ -8091,8 +8091,8 @@ public static final void gtk_paint_handle(int /*long*/ style, int /*long*/ windo
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_flat_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_flat_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_flat_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_flat_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_flat_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8107,8 +8107,8 @@ public static final void gtk_paint_flat_box(int /*long*/ style, int /*long*/ win
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_focus(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_focus(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_focus(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_focus(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_focus(style, window, state_type, area, widget, detail, x, y, width, height);
@@ -8122,8 +8122,8 @@ public static final void gtk_paint_focus(int /*long*/ style, int /*long*/ window
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_option(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_option(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_option(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_option(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_option(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8137,8 +8137,8 @@ public static final void gtk_paint_option(int /*long*/ style, int /*long*/ windo
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_slider(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
-public static final void gtk_paint_slider(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
+public static final native void _gtk_paint_slider(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
+public static final void gtk_paint_slider(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
 	lock.lock();
 	try {
 		_gtk_paint_slider(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation);
@@ -8152,8 +8152,8 @@ public static final void gtk_paint_slider(int /*long*/ style, int /*long*/ windo
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_tab(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_tab(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_tab(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_tab(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_tab(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8167,8 +8167,8 @@ public static final void gtk_paint_tab(int /*long*/ style, int /*long*/ window,
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_arrow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height);
-public static final void gtk_paint_arrow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height) {
+public static final native void _gtk_paint_arrow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height);
+public static final void gtk_paint_arrow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_arrow(style, window, state_type, shadow_type, area, widget, detail, arrow_type, fill, x, y, width, height);
@@ -8183,8 +8183,8 @@ public static final void gtk_paint_arrow(int /*long*/ style, int /*long*/ window
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8198,8 +8198,8 @@ public static final void gtk_paint_box(int /*long*/ style, int /*long*/ window,
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(gchar *)
  */
-public static final native void _gtk_paint_box_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
-public static final void gtk_paint_box_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
+public static final native void _gtk_paint_box_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
+public static final void gtk_paint_box_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
 	lock.lock();
 	try {
 		_gtk_paint_box_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
@@ -8213,8 +8213,8 @@ public static final void gtk_paint_box_gap(int /*long*/ style, int /*long*/ wind
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_check(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_check(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_check(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_check(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_check(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8228,8 +8228,8 @@ public static final void gtk_paint_check(int /*long*/ style, int /*long*/ window
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_expander(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int expander_style);
-public static final void gtk_paint_expander(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int expander_style) {
+public static final native void _gtk_paint_expander(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int expander_style);
+public static final void gtk_paint_expander(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int expander_style) {
 	lock.lock();
 	try {
 		_gtk_paint_expander(style, window, state_type, area, widget, detail, x, y, expander_style);
@@ -8243,8 +8243,8 @@ public static final void gtk_paint_expander(int /*long*/ style, int /*long*/ win
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(gchar *)
  */
-public static final native void _gtk_paint_extension(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side);
-public static final void gtk_paint_extension(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side) {
+public static final native void _gtk_paint_extension(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side);
+public static final void gtk_paint_extension(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side) {
 	lock.lock();
 	try {
 		_gtk_paint_extension(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side);
@@ -8258,8 +8258,8 @@ public static final void gtk_paint_extension(int /*long*/ style, int /*long*/ wi
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_hline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x1 , int x2, int y);
-public static final void gtk_paint_hline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x1 , int x2, int y) {
+public static final native void _gtk_paint_hline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x1 , int x2, int y);
+public static final void gtk_paint_hline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x1 , int x2, int y) {
 	lock.lock();
 	try {
 		_gtk_paint_hline(style, window, state_type, area, widget, detail, x1, x2, y);
@@ -8274,8 +8274,8 @@ public static final void gtk_paint_hline(int /*long*/ style, int /*long*/ window
  * @param detail cast=(const gchar *)
  * @param layout cast=(PangoLayout *)
  */
-public static final native void _gtk_paint_layout(int /*long*/ style, int /*long*/ window, int state_type, boolean use_text, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int /*long*/ layout);
-public static final void gtk_paint_layout(int /*long*/ style, int /*long*/ window, int state_type, boolean use_text, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int /*long*/ layout) {
+public static final native void _gtk_paint_layout(long /*int*/ style, long /*int*/ window, int state_type, boolean use_text, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, long /*int*/ layout);
+public static final void gtk_paint_layout(long /*int*/ style, long /*int*/ window, int state_type, boolean use_text, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_gtk_paint_layout(style, window, state_type, use_text, area, widget, detail, x, y, layout);
@@ -8289,8 +8289,8 @@ public static final void gtk_paint_layout(int /*long*/ style, int /*long*/ windo
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(gchar *)
  */
-public static final native void _gtk_paint_shadow_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
-public static final void gtk_paint_shadow_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
+public static final native void _gtk_paint_shadow_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
+public static final void gtk_paint_shadow_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
 	lock.lock();
 	try {
 		_gtk_paint_shadow_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
@@ -8304,8 +8304,8 @@ public static final void gtk_paint_shadow_gap(int /*long*/ style, int /*long*/ w
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(gchar *)
  */
-public static final native void _gtk_paint_shadow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_shadow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_shadow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_shadow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_shadow(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -8319,8 +8319,8 @@ public static final void gtk_paint_shadow(int /*long*/ style, int /*long*/ windo
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native void _gtk_paint_vline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int y1 , int y2, int x);
-public static final void gtk_paint_vline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int y1 , int y2, int x) {
+public static final native void _gtk_paint_vline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int y1 , int y2, int x);
+public static final void gtk_paint_vline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int y1 , int y2, int x) {
 	lock.lock();
 	try {
 		_gtk_paint_vline(style, window, state_type, area, widget, detail, y1, y2, x);
@@ -8329,8 +8329,8 @@ public static final void gtk_paint_vline(int /*long*/ style, int /*long*/ window
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_paper_size_free(int /*long*/ size);
-public static final void gtk_paper_size_free(int /*long*/ size) {
+public static final native void _gtk_paper_size_free(long /*int*/ size);
+public static final void gtk_paper_size_free(long /*int*/ size) {
 	lock.lock();
 	try {
 		_gtk_paper_size_free(size);
@@ -8339,8 +8339,8 @@ public static final void gtk_paper_size_free(int /*long*/ size) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_new(byte [] name);
-public static final int /*long*/ gtk_paper_size_new(byte [] name) {
+public static final native long /*int*/ _gtk_paper_size_new(byte [] name);
+public static final long /*int*/ gtk_paper_size_new(byte [] name) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new(name);
@@ -8349,8 +8349,8 @@ public static final int /*long*/ gtk_paper_size_new(byte [] name) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height);
-public static final int /*long*/ gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height) {
+public static final native long /*int*/ _gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height);
+public static final long /*int*/ gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height);
@@ -8359,8 +8359,8 @@ public static final int /*long*/ gtk_paper_size_new_from_ppd(byte [] ppd_name, b
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit);
-public static final int /*long*/ gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit) {
+public static final native long /*int*/ _gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit);
+public static final long /*int*/ gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new_custom(name, display_name, width, height, unit);
@@ -8369,8 +8369,8 @@ public static final int /*long*/ gtk_paper_size_new_custom(byte [] name, byte []
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_get_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_name(size);
@@ -8379,8 +8379,8 @@ public static final int /*long*/ gtk_paper_size_get_name(int /*long*/ size) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_get_display_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_display_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_display_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_display_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_display_name(size);
@@ -8389,8 +8389,8 @@ public static final int /*long*/ gtk_paper_size_get_display_name(int /*long*/ si
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_paper_size_get_ppd_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_ppd_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_ppd_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_ppd_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_ppd_name(size);
@@ -8399,8 +8399,8 @@ public static final int /*long*/ gtk_paper_size_get_ppd_name(int /*long*/ size)
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_paper_size_get_width(int /*long*/ size, int unit);
-public static final double gtk_paper_size_get_width(int /*long*/ size, int unit) {
+public static final native double _gtk_paper_size_get_width(long /*int*/ size, int unit);
+public static final double gtk_paper_size_get_width(long /*int*/ size, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_width(size, unit);
@@ -8409,8 +8409,8 @@ public static final double gtk_paper_size_get_width(int /*long*/ size, int unit)
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_paper_size_get_height(int /*long*/ size, int unit);
-public static final double gtk_paper_size_get_height(int /*long*/ size, int unit) {
+public static final native double _gtk_paper_size_get_height(long /*int*/ size, int unit);
+public static final double gtk_paper_size_get_height(long /*int*/ size, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_height(size, unit);
@@ -8419,8 +8419,8 @@ public static final double gtk_paper_size_get_height(int /*long*/ size, int unit
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _gtk_paper_size_is_custom(int /*long*/ size);
-public static final boolean gtk_paper_size_is_custom(int /*long*/ size) {
+public static final native boolean _gtk_paper_size_is_custom(long /*int*/ size);
+public static final boolean gtk_paper_size_is_custom(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_is_custom(size);
@@ -8429,8 +8429,8 @@ public static final boolean gtk_paper_size_is_custom(int /*long*/ size) {
 	}
 }
 /** @param plug cast=(GtkPlug *) */
-public static final native int /*long*/ _gtk_plug_get_id(int /*long*/ plug);
-public static final int /*long*/ gtk_plug_get_id(int /*long*/ plug) {
+public static final native long /*int*/ _gtk_plug_get_id(long /*int*/ plug);
+public static final long /*int*/ gtk_plug_get_id(long /*int*/ plug) {
 	lock.lock();
 	try {
 		return _gtk_plug_get_id(plug);
@@ -8438,8 +8438,8 @@ public static final int /*long*/ gtk_plug_get_id(int /*long*/ plug) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_plug_new(int /*long*/ socket_id);
-public static final int /*long*/ gtk_plug_new(int /*long*/ socket_id) {
+public static final native long /*int*/ _gtk_plug_new(long /*int*/ socket_id);
+public static final long /*int*/ gtk_plug_new(long /*int*/ socket_id) {
 	lock.lock();
 	try {
 		return _gtk_plug_new(socket_id);
@@ -8448,8 +8448,8 @@ public static final int /*long*/ gtk_plug_new(int /*long*/ socket_id) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_printer_get_backend(int /*long*/ printer);
-public static final int /*long*/ gtk_printer_get_backend(int /*long*/ printer) {
+public static final native long /*int*/ _gtk_printer_get_backend(long /*int*/ printer);
+public static final long /*int*/ gtk_printer_get_backend(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_get_backend(printer);
@@ -8458,8 +8458,8 @@ public static final int /*long*/ gtk_printer_get_backend(int /*long*/ printer) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_printer_get_name(int /*long*/ printer);
-public static final int /*long*/ gtk_printer_get_name(int /*long*/ printer) {
+public static final native long /*int*/ _gtk_printer_get_name(long /*int*/ printer);
+public static final long /*int*/ gtk_printer_get_name(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_get_name(printer);
@@ -8468,8 +8468,8 @@ public static final int /*long*/ gtk_printer_get_name(int /*long*/ printer) {
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _gtk_printer_is_default(int /*long*/ printer);
-public static final boolean gtk_printer_is_default(int /*long*/ printer) {
+public static final native boolean _gtk_printer_is_default(long /*int*/ printer);
+public static final boolean gtk_printer_is_default(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_is_default(printer);
@@ -8483,8 +8483,8 @@ public static final boolean gtk_printer_is_default(int /*long*/ printer) {
  * @param destroy cast=(GDestroyNotify)
  * @param wait cast=(gboolean)
  */
-public static final native void _gtk_enumerate_printers(int /*long*/ func, int /*long*/data, int /*long*/ destroy, boolean wait);
-public static final void gtk_enumerate_printers(int /*long*/ func, int /*long*/data, int /*long*/ destroy, boolean wait) {
+public static final native void _gtk_enumerate_printers(long /*int*/ func, long /*int*/data, long /*int*/ destroy, boolean wait);
+public static final void gtk_enumerate_printers(long /*int*/ func, long /*int*/data, long /*int*/ destroy, boolean wait) {
 	lock.lock();
 	try {
 		_gtk_enumerate_printers(func, data, destroy, wait);
@@ -8496,8 +8496,8 @@ public static final void gtk_enumerate_printers(int /*long*/ func, int /*long*/d
  * @method flags=dynamic
  * @param title cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_print_job_new(byte[] title, int /*long*/ printer, int /*long*/ settings, int /*long*/ page_setup);
-public static final int /*long*/ gtk_print_job_new(byte[] title, int /*long*/ printer, int /*long*/ settings, int /*long*/ page_setup) {
+public static final native long /*int*/ _gtk_print_job_new(byte[] title, long /*int*/ printer, long /*int*/ settings, long /*int*/ page_setup);
+public static final long /*int*/ gtk_print_job_new(byte[] title, long /*int*/ printer, long /*int*/ settings, long /*int*/ page_setup) {
 	lock.lock();
 	try {
 		return _gtk_print_job_new(title, printer, settings, page_setup);
@@ -8506,8 +8506,8 @@ public static final int /*long*/ gtk_print_job_new(byte[] title, int /*long*/ pr
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_job_get_settings(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_settings(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_settings(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_settings(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_settings(job);
@@ -8516,8 +8516,8 @@ public static final int /*long*/ gtk_print_job_get_settings(int /*long*/ job) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_job_get_printer(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_printer(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_printer(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_printer(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_printer(job);
@@ -8526,8 +8526,8 @@ public static final int /*long*/ gtk_print_job_get_printer(int /*long*/ job) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_job_get_title(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_title(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_title(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_title(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_title(job);
@@ -8536,8 +8536,8 @@ public static final int /*long*/ gtk_print_job_get_title(int /*long*/ job) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_job_get_status(int /*long*/ job);
-public static final int gtk_print_job_get_status(int /*long*/ job) {
+public static final native int _gtk_print_job_get_status(long /*int*/ job);
+public static final int gtk_print_job_get_status(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_status(job);
@@ -8550,8 +8550,8 @@ public static final int gtk_print_job_get_status(int /*long*/ job) {
  * @param filename cast=(const gchar *)
  * @param error cast=(GError **)
  */
-public static final native boolean _gtk_print_job_set_source_file(int /*long*/ job, byte[] filename, int /*long*/ error[]);
-public static final boolean gtk_print_job_set_source_file(int /*long*/ job, byte[] filename, int /*long*/ error[]) {
+public static final native boolean _gtk_print_job_set_source_file(long /*int*/ job, byte[] filename, long /*int*/ error[]);
+public static final boolean gtk_print_job_set_source_file(long /*int*/ job, byte[] filename, long /*int*/ error[]) {
 	lock.lock();
 	try {
 		return _gtk_print_job_set_source_file(job, filename, error);
@@ -8563,8 +8563,8 @@ public static final boolean gtk_print_job_set_source_file(int /*long*/ job, byte
  * @method flags=dynamic
  * @param error cast=(GError **)
  */
-public static final native int /*long*/ _gtk_print_job_get_surface(int /*long*/ job, int /*long*/ error[]);
-public static final int /*long*/ gtk_print_job_get_surface(int /*long*/ job, int /*long*/ error[]) {
+public static final native long /*int*/ _gtk_print_job_get_surface(long /*int*/ job, long /*int*/ error[]);
+public static final long /*int*/ gtk_print_job_get_surface(long /*int*/ job, long /*int*/ error[]) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_surface(job, error);
@@ -8577,8 +8577,8 @@ public static final int /*long*/ gtk_print_job_get_surface(int /*long*/ job, int
  * @param user_data cast=(gpointer)
  * @param dnotify cast=(GDestroyNotify)
  */
-public static final native void _gtk_print_job_send(int /*long*/ job, int /*long*/ callback, int /*long*/ user_data, int /*long*/ dnotify);
-public static final void gtk_print_job_send(int /*long*/ job, int /*long*/ callback, int /*long*/ user_data, int /*long*/ dnotify) {
+public static final native void _gtk_print_job_send(long /*int*/ job, long /*int*/ callback, long /*int*/ user_data, long /*int*/ dnotify);
+public static final void gtk_print_job_send(long /*int*/ job, long /*int*/ callback, long /*int*/ user_data, long /*int*/ dnotify) {
 	lock.lock();
 	try {
 		_gtk_print_job_send(job, callback, user_data, dnotify);
@@ -8587,8 +8587,8 @@ public static final void gtk_print_job_send(int /*long*/ job, int /*long*/ callb
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_settings_new();
-public static final int /*long*/ gtk_print_settings_new() {
+public static final native long /*int*/ _gtk_print_settings_new();
+public static final long /*int*/ gtk_print_settings_new() {
 	lock.lock();
 	try {
 		return _gtk_print_settings_new();
@@ -8600,8 +8600,8 @@ public static final int /*long*/ gtk_print_settings_new() {
  * @method flags=dynamic
  * @param data cast=(gpointer)
  */
-public static final native void _gtk_print_settings_foreach(int /*long*/ settings, int /*long*/ func, int /*long*/ data);
-public static final void gtk_print_settings_foreach(int /*long*/ settings, int /*long*/ func, int /*long*/ data) {
+public static final native void _gtk_print_settings_foreach(long /*int*/ settings, long /*int*/ func, long /*int*/ data);
+public static final void gtk_print_settings_foreach(long /*int*/ settings, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gtk_print_settings_foreach(settings, func, data);
@@ -8613,8 +8613,8 @@ public static final void gtk_print_settings_foreach(int /*long*/ settings, int /
  * @method flags=dynamic
  * @param key cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_print_settings_get(int /*long*/ settings, byte [] key);
-public static final int /*long*/ gtk_print_settings_get(int /*long*/ settings, byte [] key) {
+public static final native long /*int*/ _gtk_print_settings_get(long /*int*/ settings, byte [] key);
+public static final long /*int*/ gtk_print_settings_get(long /*int*/ settings, byte [] key) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get(settings, key);
@@ -8627,8 +8627,8 @@ public static final int /*long*/ gtk_print_settings_get(int /*long*/ settings, b
  * @param key cast=(const gchar *)
  * @param value cast=(const gchar *)
  */
-public static final native void _gtk_print_settings_set(int /*long*/ settings, byte [] key, byte [] value);
-public static final void gtk_print_settings_set(int /*long*/ settings, byte [] key, byte [] value) {
+public static final native void _gtk_print_settings_set(long /*int*/ settings, byte [] key, byte [] value);
+public static final void gtk_print_settings_set(long /*int*/ settings, byte [] key, byte [] value) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set(settings, key, value);
@@ -8637,8 +8637,8 @@ public static final void gtk_print_settings_set(int /*long*/ settings, byte [] k
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_settings_get_printer(int /*long*/ settings);
-public static final int /*long*/ gtk_print_settings_get_printer(int /*long*/ settings) {
+public static final native long /*int*/ _gtk_print_settings_get_printer(long /*int*/ settings);
+public static final long /*int*/ gtk_print_settings_get_printer(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_printer(settings);
@@ -8647,8 +8647,8 @@ public static final int /*long*/ gtk_print_settings_get_printer(int /*long*/ set
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_settings_set_printer(int /*long*/ settings, byte[] printer);
-public static final void gtk_print_settings_set_printer(int /*long*/ settings, byte[] printer) {
+public static final native void _gtk_print_settings_set_printer(long /*int*/ settings, byte[] printer);
+public static final void gtk_print_settings_set_printer(long /*int*/ settings, byte[] printer) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_printer(settings, printer);
@@ -8657,8 +8657,8 @@ public static final void gtk_print_settings_set_printer(int /*long*/ settings, b
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_settings_get_orientation(int /*long*/ settings);
-public static final int gtk_print_settings_get_orientation(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_orientation(long /*int*/ settings);
+public static final int gtk_print_settings_get_orientation(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_orientation(settings);
@@ -8667,8 +8667,8 @@ public static final int gtk_print_settings_get_orientation(int /*long*/ settings
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_settings_set_orientation(int /*long*/ settings, int orientation);
-public static final void gtk_print_settings_set_orientation(int /*long*/ settings, int orientation) {
+public static final native void _gtk_print_settings_set_orientation(long /*int*/ settings, int orientation);
+public static final void gtk_print_settings_set_orientation(long /*int*/ settings, int orientation) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_orientation(settings, orientation);
@@ -8677,8 +8677,8 @@ public static final void gtk_print_settings_set_orientation(int /*long*/ setting
 	}
 }
 /** @method flags=dynamic */
-public static final native boolean _gtk_print_settings_get_collate(int /*long*/ settings);
-public static final boolean gtk_print_settings_get_collate(int /*long*/ settings) {
+public static final native boolean _gtk_print_settings_get_collate(long /*int*/ settings);
+public static final boolean gtk_print_settings_get_collate(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_collate(settings);
@@ -8690,8 +8690,8 @@ public static final boolean gtk_print_settings_get_collate(int /*long*/ settings
  * @method flags=dynamic
  * @param collate cast=(gboolean)
  */
-public static final native void _gtk_print_settings_set_collate(int /*long*/ settings, boolean collate);
-public static final void gtk_print_settings_set_collate(int /*long*/ settings, boolean collate) {
+public static final native void _gtk_print_settings_set_collate(long /*int*/ settings, boolean collate);
+public static final void gtk_print_settings_set_collate(long /*int*/ settings, boolean collate) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_collate(settings, collate);
@@ -8700,8 +8700,8 @@ public static final void gtk_print_settings_set_collate(int /*long*/ settings, b
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_settings_get_n_copies(int /*long*/ settings);
-public static final int gtk_print_settings_get_n_copies(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_n_copies(long /*int*/ settings);
+public static final int gtk_print_settings_get_n_copies(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_n_copies(settings);
@@ -8713,8 +8713,8 @@ public static final int gtk_print_settings_get_n_copies(int /*long*/ settings) {
  * @method flags=dynamic
  * @param num_copies cast=(gint)
  */
-public static final native void _gtk_print_settings_set_n_copies(int /*long*/ settings, int num_copies);
-public static final void gtk_print_settings_set_n_copies(int /*long*/ settings, int num_copies) {
+public static final native void _gtk_print_settings_set_n_copies(long /*int*/ settings, int num_copies);
+public static final void gtk_print_settings_set_n_copies(long /*int*/ settings, int num_copies) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_n_copies(settings, num_copies);
@@ -8723,8 +8723,8 @@ public static final void gtk_print_settings_set_n_copies(int /*long*/ settings,
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_settings_get_print_pages(int /*long*/ settings);
-public static final int gtk_print_settings_get_print_pages(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_print_pages(long /*int*/ settings);
+public static final int gtk_print_settings_get_print_pages(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_print_pages(settings);
@@ -8733,8 +8733,8 @@ public static final int gtk_print_settings_get_print_pages(int /*long*/ settings
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_settings_set_print_pages(int /*long*/ settings, int pages);
-public static final void gtk_print_settings_set_print_pages(int /*long*/ settings, int pages) {
+public static final native void _gtk_print_settings_set_print_pages(long /*int*/ settings, int pages);
+public static final void gtk_print_settings_set_print_pages(long /*int*/ settings, int pages) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_print_pages(settings, pages);
@@ -8746,8 +8746,8 @@ public static final void gtk_print_settings_set_print_pages(int /*long*/ setting
  * @method flags=dynamic
  * @param num_ranges cast=(gint *)
  */
-public static final native int /*long*/ _gtk_print_settings_get_page_ranges(int /*long*/ settings, int[] num_ranges);
-public static final int /*long*/ gtk_print_settings_get_page_ranges(int /*long*/ settings, int[] num_ranges) {
+public static final native long /*int*/ _gtk_print_settings_get_page_ranges(long /*int*/ settings, int[] num_ranges);
+public static final long /*int*/ gtk_print_settings_get_page_ranges(long /*int*/ settings, int[] num_ranges) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_page_ranges(settings, num_ranges);
@@ -8759,8 +8759,8 @@ public static final int /*long*/ gtk_print_settings_get_page_ranges(int /*long*/
  * @method flags=dynamic
  * @param num_ranges cast=(gint)
  */
-public static final native void _gtk_print_settings_set_page_ranges(int /*long*/ settings, int[] page_ranges, int num_ranges);
-public static final void gtk_print_settings_set_page_ranges(int /*long*/ settings, int[] page_ranges, int num_ranges) {
+public static final native void _gtk_print_settings_set_page_ranges(long /*int*/ settings, int[] page_ranges, int num_ranges);
+public static final void gtk_print_settings_set_page_ranges(long /*int*/ settings, int[] page_ranges, int num_ranges) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_page_ranges(settings, page_ranges, num_ranges);
@@ -8769,8 +8769,8 @@ public static final void gtk_print_settings_set_page_ranges(int /*long*/ setting
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_print_settings_get_paper_width(int /*long*/ settings, int unit);
-public static final double gtk_print_settings_get_paper_width(int /*long*/ settings, int unit) {
+public static final native double _gtk_print_settings_get_paper_width(long /*int*/ settings, int unit);
+public static final double gtk_print_settings_get_paper_width(long /*int*/ settings, int unit) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_paper_width(settings, unit);
@@ -8779,8 +8779,8 @@ public static final double gtk_print_settings_get_paper_width(int /*long*/ setti
 	}
 }
 /** @method flags=dynamic */
-public static final native double _gtk_print_settings_get_paper_height(int /*long*/ settings, int unit);
-public static final double gtk_print_settings_get_paper_height(int /*long*/ settings, int unit) {
+public static final native double _gtk_print_settings_get_paper_height(long /*int*/ settings, int unit);
+public static final double gtk_print_settings_get_paper_height(long /*int*/ settings, int unit) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_paper_height(settings, unit);
@@ -8789,8 +8789,8 @@ public static final double gtk_print_settings_get_paper_height(int /*long*/ sett
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_settings_get_resolution(int /*long*/ settings);
-public static final int gtk_print_settings_get_resolution(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_resolution(long /*int*/ settings);
+public static final int gtk_print_settings_get_resolution(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_resolution(settings);
@@ -8803,8 +8803,8 @@ public static final int gtk_print_settings_get_resolution(int /*long*/ settings)
  * @param title cast=(const gchar *)
  * @param parent cast=(GtkWindow *)
  */
-public static final native int /*long*/ _gtk_print_unix_dialog_new(byte[] title, int /*long*/ parent);
-public static final int /*long*/ gtk_print_unix_dialog_new(byte[] title, int /*long*/ parent) {
+public static final native long /*int*/ _gtk_print_unix_dialog_new(byte[] title, long /*int*/ parent);
+public static final long /*int*/ gtk_print_unix_dialog_new(byte[] title, long /*int*/ parent) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_new(title, parent);
@@ -8813,8 +8813,8 @@ public static final int /*long*/ gtk_print_unix_dialog_new(byte[] title, int /*l
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_unix_dialog_set_page_setup(int /*long*/ dialog, int /*long*/ page_setup);
-public static final void gtk_print_unix_dialog_set_page_setup(int /*long*/ dialog, int /*long*/ page_setup) {
+public static final native void _gtk_print_unix_dialog_set_page_setup(long /*int*/ dialog, long /*int*/ page_setup);
+public static final void gtk_print_unix_dialog_set_page_setup(long /*int*/ dialog, long /*int*/ page_setup) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_page_setup(dialog, page_setup);
@@ -8823,8 +8823,8 @@ public static final void gtk_print_unix_dialog_set_page_setup(int /*long*/ dialo
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_unix_dialog_get_page_setup(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_page_setup(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_page_setup(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_page_setup(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_page_setup(dialog);
@@ -8836,8 +8836,8 @@ public static final int /*long*/ gtk_print_unix_dialog_get_page_setup(int /*long
  * @method flags=dynamic
  * @param current_page cast=(gint)
  */
-public static final native void _gtk_print_unix_dialog_set_current_page(int /*long*/ dialog, int current_page);
-public static final void gtk_print_unix_dialog_set_current_page(int /*long*/ dialog, int current_page) {
+public static final native void _gtk_print_unix_dialog_set_current_page(long /*int*/ dialog, int current_page);
+public static final void gtk_print_unix_dialog_set_current_page(long /*int*/ dialog, int current_page) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_current_page(dialog, current_page);
@@ -8846,8 +8846,8 @@ public static final void gtk_print_unix_dialog_set_current_page(int /*long*/ dia
 	}
 }
 /** @method flags=dynamic */
-public static final native int _gtk_print_unix_dialog_get_current_page(int /*long*/ dialog);
-public static final int gtk_print_unix_dialog_get_current_page(int /*long*/ dialog) {
+public static final native int _gtk_print_unix_dialog_get_current_page(long /*int*/ dialog);
+public static final int gtk_print_unix_dialog_get_current_page(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_current_page(dialog);
@@ -8856,8 +8856,8 @@ public static final int gtk_print_unix_dialog_get_current_page(int /*long*/ dial
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_unix_dialog_set_settings(int /*long*/ dialog, int /*long*/ settings);
-public static final void gtk_print_unix_dialog_set_settings(int /*long*/ dialog, int /*long*/ settings) {
+public static final native void _gtk_print_unix_dialog_set_settings(long /*int*/ dialog, long /*int*/ settings);
+public static final void gtk_print_unix_dialog_set_settings(long /*int*/ dialog, long /*int*/ settings) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_settings(dialog, settings);
@@ -8866,8 +8866,8 @@ public static final void gtk_print_unix_dialog_set_settings(int /*long*/ dialog,
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_unix_dialog_get_settings(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_settings(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_settings(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_settings(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_settings(dialog);
@@ -8876,8 +8876,8 @@ public static final int /*long*/ gtk_print_unix_dialog_get_settings(int /*long*/
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_print_unix_dialog_get_selected_printer(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_selected_printer(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_selected_printer(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_selected_printer(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_selected_printer(dialog);
@@ -8886,8 +8886,8 @@ public static final int /*long*/ gtk_print_unix_dialog_get_selected_printer(int
 	}
 }
 /** @method flags=dynamic */
-public static final native void _gtk_print_unix_dialog_set_manual_capabilities(int /*long*/ dialog, int /*long*/ capabilities);
-public static final void gtk_print_unix_dialog_set_manual_capabilities(int /*long*/ dialog, int /*long*/ capabilities) {
+public static final native void _gtk_print_unix_dialog_set_manual_capabilities(long /*int*/ dialog, long /*int*/ capabilities);
+public static final void gtk_print_unix_dialog_set_manual_capabilities(long /*int*/ dialog, long /*int*/ capabilities) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_manual_capabilities(dialog, capabilities);
@@ -8895,8 +8895,8 @@ public static final void gtk_print_unix_dialog_set_manual_capabilities(int /*lon
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_progress_bar_new();
-public static final int /*long*/ gtk_progress_bar_new() {
+public static final native long /*int*/ _gtk_progress_bar_new();
+public static final long /*int*/ gtk_progress_bar_new() {
 	lock.lock();
 	try {
 		return _gtk_progress_bar_new();
@@ -8905,8 +8905,8 @@ public static final int /*long*/ gtk_progress_bar_new() {
 	}
 }
 /** @param pbar cast=(GtkProgressBar *) */
-public static final native void _gtk_progress_bar_pulse(int /*long*/ pbar);
-public static final void gtk_progress_bar_pulse(int /*long*/ pbar) {
+public static final native void _gtk_progress_bar_pulse(long /*int*/ pbar);
+public static final void gtk_progress_bar_pulse(long /*int*/ pbar) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_pulse(pbar);
@@ -8918,8 +8918,8 @@ public static final void gtk_progress_bar_pulse(int /*long*/ pbar) {
  * @param pbar cast=(GtkProgressBar *)
  * @param fraction cast=(gdouble)
  */
-public static final native void _gtk_progress_bar_set_fraction(int /*long*/ pbar, double fraction);
-public static final void gtk_progress_bar_set_fraction(int /*long*/ pbar, double fraction) {
+public static final native void _gtk_progress_bar_set_fraction(long /*int*/ pbar, double fraction);
+public static final void gtk_progress_bar_set_fraction(long /*int*/ pbar, double fraction) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_set_fraction(pbar, fraction);
@@ -8931,8 +8931,8 @@ public static final void gtk_progress_bar_set_fraction(int /*long*/ pbar, double
  * @param pbar cast=(GtkProgressBar *)
  * @param orientation cast=(GtkProgressBarOrientation)
  */
-public static final native void _gtk_progress_bar_set_orientation(int /*long*/ pbar, int orientation);
-public static final void gtk_progress_bar_set_orientation(int /*long*/ pbar, int orientation) {
+public static final native void _gtk_progress_bar_set_orientation(long /*int*/ pbar, int orientation);
+public static final void gtk_progress_bar_set_orientation(long /*int*/ pbar, int orientation) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_set_orientation(pbar, orientation);
@@ -8941,8 +8941,8 @@ public static final void gtk_progress_bar_set_orientation(int /*long*/ pbar, int
 	}
 }
 /** @param radio_button cast=(GtkRadioButton *) */
-public static final native int /*long*/ _gtk_radio_button_get_group(int /*long*/ radio_button);
-public static final int /*long*/ gtk_radio_button_get_group(int /*long*/ radio_button) {
+public static final native long /*int*/ _gtk_radio_button_get_group(long /*int*/ radio_button);
+public static final long /*int*/ gtk_radio_button_get_group(long /*int*/ radio_button) {
 	lock.lock();
 	try {
 		return _gtk_radio_button_get_group(radio_button);
@@ -8951,8 +8951,8 @@ public static final int /*long*/ gtk_radio_button_get_group(int /*long*/ radio_b
 	}
 }
 /** @param group cast=(GSList *) */
-public static final native int /*long*/ _gtk_radio_button_new(int /*long*/ group);
-public static final int /*long*/ gtk_radio_button_new(int /*long*/ group) {
+public static final native long /*int*/ _gtk_radio_button_new(long /*int*/ group);
+public static final long /*int*/ gtk_radio_button_new(long /*int*/ group) {
 	lock.lock();
 	try {
 		return _gtk_radio_button_new(group);
@@ -8961,8 +8961,8 @@ public static final int /*long*/ gtk_radio_button_new(int /*long*/ group) {
 	}
 }
 /** @param radio_menu_item cast=(GtkRadioMenuItem *) */
-public static final native int /*long*/ _gtk_radio_menu_item_get_group(int /*long*/ radio_menu_item);
-public static final int /*long*/ gtk_radio_menu_item_get_group(int /*long*/ radio_menu_item) {
+public static final native long /*int*/ _gtk_radio_menu_item_get_group(long /*int*/ radio_menu_item);
+public static final long /*int*/ gtk_radio_menu_item_get_group(long /*int*/ radio_menu_item) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_get_group(radio_menu_item);
@@ -8971,8 +8971,8 @@ public static final int /*long*/ gtk_radio_menu_item_get_group(int /*long*/ radi
 	}
 }
 /** @param group cast=(GSList *) */
-public static final native int /*long*/ _gtk_radio_menu_item_new(int /*long*/ group);
-public static final int /*long*/ gtk_radio_menu_item_new(int /*long*/ group) {
+public static final native long /*int*/ _gtk_radio_menu_item_new(long /*int*/ group);
+public static final long /*int*/ gtk_radio_menu_item_new(long /*int*/ group) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_new(group);
@@ -8984,8 +8984,8 @@ public static final int /*long*/ gtk_radio_menu_item_new(int /*long*/ group) {
  * @param group cast=(GSList *)
  * @param label cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_radio_menu_item_new_with_label(int /*long*/ group, byte[] label);
-public static final int /*long*/ gtk_radio_menu_item_new_with_label(int /*long*/ group, byte[] label) {
+public static final native long /*int*/ _gtk_radio_menu_item_new_with_label(long /*int*/ group, byte[] label);
+public static final long /*int*/ gtk_radio_menu_item_new_with_label(long /*int*/ group, byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_new_with_label(group, label);
@@ -8994,8 +8994,8 @@ public static final int /*long*/ gtk_radio_menu_item_new_with_label(int /*long*/
 	}
 }
 /** @param range cast=(GtkRange *) */
-public static final native int /*long*/ _gtk_range_get_adjustment(int /*long*/ range);
-public static final int /*long*/ gtk_range_get_adjustment(int /*long*/ range) {
+public static final native long /*int*/ _gtk_range_get_adjustment(long /*int*/ range);
+public static final long /*int*/ gtk_range_get_adjustment(long /*int*/ range) {
 	lock.lock();
 	try {
 		return _gtk_range_get_adjustment(range);
@@ -9004,8 +9004,8 @@ public static final int /*long*/ gtk_range_get_adjustment(int /*long*/ range) {
 	}
 }
 /** @param range cast=(GtkRange *) */
-public static final native void _gtk_range_set_increments(int /*long*/ range, double step, double page);
-public static final void gtk_range_set_increments(int /*long*/ range, double step, double page) {
+public static final native void _gtk_range_set_increments(long /*int*/ range, double step, double page);
+public static final void gtk_range_set_increments(long /*int*/ range, double step, double page) {
 	lock.lock();
 	try {
 		_gtk_range_set_increments(range, step, page);
@@ -9014,8 +9014,8 @@ public static final void gtk_range_set_increments(int /*long*/ range, double ste
 	}
 }
 /** @param range cast=(GtkRange *) */
-public static final native void _gtk_range_set_inverted(int /*long*/ range, boolean setting);
-public static final void gtk_range_set_inverted(int /*long*/ range, boolean setting) {
+public static final native void _gtk_range_set_inverted(long /*int*/ range, boolean setting);
+public static final void gtk_range_set_inverted(long /*int*/ range, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_range_set_inverted(range, setting);
@@ -9024,8 +9024,8 @@ public static final void gtk_range_set_inverted(int /*long*/ range, boolean sett
 	}
 }
 /** @param range cast=(GtkRange *) */
-public static final native void _gtk_range_set_range(int /*long*/ range, double min, double max);
-public static final void gtk_range_set_range(int /*long*/ range, double min, double max) {
+public static final native void _gtk_range_set_range(long /*int*/ range, double min, double max);
+public static final void gtk_range_set_range(long /*int*/ range, double min, double max) {
 	lock.lock();
 	try {
 		_gtk_range_set_range(range, min, max);
@@ -9034,8 +9034,8 @@ public static final void gtk_range_set_range(int /*long*/ range, double min, dou
 	}
 }
 /** @param range cast=(GtkRange *) */
-public static final native void _gtk_range_set_value(int /*long*/ range, double value);
-public static final void gtk_range_set_value(int /*long*/ range, double value) {
+public static final native void _gtk_range_set_value(long /*int*/ range, double value);
+public static final void gtk_range_set_value(long /*int*/ range, double value) {
 	lock.lock();
 	try {
 		_gtk_range_set_value(range, value);
@@ -9054,8 +9054,8 @@ public static final void gtk_rc_parse_string(byte[] rc_string) {
 	}
 }
 /** @param style cast=(GtkRcStyle *) */
-public static final native int /*long*/ _gtk_rc_style_get_bg_pixmap_name(int /*long*/ style, int index);
-public static final int /*long*/ gtk_rc_style_get_bg_pixmap_name(int /*long*/ style, int index) {
+public static final native long /*int*/ _gtk_rc_style_get_bg_pixmap_name(long /*int*/ style, int index);
+public static final long /*int*/ gtk_rc_style_get_bg_pixmap_name(long /*int*/ style, int index) {
 	lock.lock();
 	try {
 		return _gtk_rc_style_get_bg_pixmap_name(style, index);
@@ -9064,8 +9064,8 @@ public static final int /*long*/ gtk_rc_style_get_bg_pixmap_name(int /*long*/ st
 	}
 }
 /** @param style cast=(GtkRcStyle *) */
-public static final native int _gtk_rc_style_get_color_flags(int /*long*/ style, int index);
-public static final int gtk_rc_style_get_color_flags(int /*long*/ style, int index) {
+public static final native int _gtk_rc_style_get_color_flags(long /*int*/ style, int index);
+public static final int gtk_rc_style_get_color_flags(long /*int*/ style, int index) {
 	lock.lock();
 	try {
 		return _gtk_rc_style_get_color_flags(style, index);
@@ -9077,8 +9077,8 @@ public static final int gtk_rc_style_get_color_flags(int /*long*/ style, int ind
  * @param style cast=(GtkRcStyle *)
  * @param color flags=no_out
  */
-public static final native void _gtk_rc_style_set_bg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_bg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_bg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_bg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_bg(style, index, color);
@@ -9090,8 +9090,8 @@ public static final void gtk_rc_style_set_bg(int /*long*/ style, int index, GdkC
  * @param style cast=(GtkRcStyle *)
  * @param name cast=(char *)
  */
-public static final native void _gtk_rc_style_set_bg_pixmap_name(int /*long*/ style, int index, int /*long*/ name);
-public static final void gtk_rc_style_set_bg_pixmap_name(int /*long*/ style, int index, int /*long*/ name) {
+public static final native void _gtk_rc_style_set_bg_pixmap_name(long /*int*/ style, int index, long /*int*/ name);
+public static final void gtk_rc_style_set_bg_pixmap_name(long /*int*/ style, int index, long /*int*/ name) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_bg_pixmap_name(style, index, name);
@@ -9100,8 +9100,8 @@ public static final void gtk_rc_style_set_bg_pixmap_name(int /*long*/ style, int
 	}
 }
 /** @param style cast=(GtkRcStyle *) */
-public static final native void _gtk_rc_style_set_color_flags(int /*long*/ style, int index, int flag);
-public static final void gtk_rc_style_set_color_flags(int /*long*/ style, int index, int flag) {
+public static final native void _gtk_rc_style_set_color_flags(long /*int*/ style, int index, int flag);
+public static final void gtk_rc_style_set_color_flags(long /*int*/ style, int index, int flag) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_color_flags(style, index, flag);
@@ -9113,8 +9113,8 @@ public static final void gtk_rc_style_set_color_flags(int /*long*/ style, int in
  * @param scale cast=(GtkScale *)
  * @param digits cast=(gint)
  */
-public static final native void _gtk_scale_set_digits(int /*long*/ scale, int digits);
-public static final void gtk_scale_set_digits(int /*long*/ scale, int digits) {
+public static final native void _gtk_scale_set_digits(long /*int*/ scale, int digits);
+public static final void gtk_scale_set_digits(long /*int*/ scale, int digits) {
 	lock.lock();
 	try {
 		_gtk_scale_set_digits(scale, digits);
@@ -9126,8 +9126,8 @@ public static final void gtk_scale_set_digits(int /*long*/ scale, int digits) {
  * @param scale cast=(GtkScale *)
  * @param draw_value cast=(gboolean)
  */
-public static final native void _gtk_scale_set_draw_value(int /*long*/ scale, boolean draw_value);
-public static final void gtk_scale_set_draw_value(int /*long*/ scale, boolean draw_value) {
+public static final native void _gtk_scale_set_draw_value(long /*int*/ scale, boolean draw_value);
+public static final void gtk_scale_set_draw_value(long /*int*/ scale, boolean draw_value) {
 	lock.lock();
 	try {
 		_gtk_scale_set_draw_value(scale, draw_value);
@@ -9139,8 +9139,8 @@ public static final void gtk_scale_set_draw_value(int /*long*/ scale, boolean dr
  * @param style cast=(GtkRcStyle *)
  * @param color flags=no_out
  */
-public static final native void _gtk_rc_style_set_fg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_fg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_fg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_fg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_fg(style, index, color);
@@ -9152,8 +9152,8 @@ public static final void gtk_rc_style_set_fg(int /*long*/ style, int index, GdkC
  * @param style cast=(GtkRcStyle *)
  * @param color flags=no_out
  */
-public static final native void _gtk_rc_style_set_text(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_text(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_text(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_text(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_text(style, index, color);
@@ -9165,8 +9165,8 @@ public static final void gtk_rc_style_set_text(int /*long*/ style, int index, Gd
  * @param scrolled_window cast=(GtkScrolledWindow *)
  * @param child cast=(GtkWidget *)
  */
-public static final native void _gtk_scrolled_window_add_with_viewport(int /*long*/ scrolled_window, int /*long*/ child);
-public static final void gtk_scrolled_window_add_with_viewport(int /*long*/ scrolled_window, int /*long*/ child) {
+public static final native void _gtk_scrolled_window_add_with_viewport(long /*int*/ scrolled_window, long /*int*/ child);
+public static final void gtk_scrolled_window_add_with_viewport(long /*int*/ scrolled_window, long /*int*/ child) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_add_with_viewport(scrolled_window, child);
@@ -9175,8 +9175,8 @@ public static final void gtk_scrolled_window_add_with_viewport(int /*long*/ scro
 	}
 }
 /** @param scrolled_window cast=(GtkScrolledWindow *) */
-public static final native int /*long*/ _gtk_scrolled_window_get_hadjustment(int /*long*/ scrolled_window);
-public static final int /*long*/ gtk_scrolled_window_get_hadjustment(int /*long*/ scrolled_window) {
+public static final native long /*int*/ _gtk_scrolled_window_get_hadjustment(long /*int*/ scrolled_window);
+public static final long /*int*/ gtk_scrolled_window_get_hadjustment(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_hadjustment(scrolled_window);
@@ -9189,8 +9189,8 @@ public static final int /*long*/ gtk_scrolled_window_get_hadjustment(int /*long*
  * @param hscrollbar_policy cast=(GtkPolicyType *)
  * @param vscrollbar_policy cast=(GtkPolicyType *)
  */
-public static final native void _gtk_scrolled_window_get_policy(int /*long*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy);
-public static final void gtk_scrolled_window_get_policy(int /*long*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy) {
+public static final native void _gtk_scrolled_window_get_policy(long /*int*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy);
+public static final void gtk_scrolled_window_get_policy(long /*int*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_get_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy);
@@ -9199,8 +9199,8 @@ public static final void gtk_scrolled_window_get_policy(int /*long*/ scrolled_wi
 	}
 }
 /** @param scrolled_window cast=(GtkScrolledWindow *) */
-public static final native int _gtk_scrolled_window_get_shadow_type(int /*long*/ scrolled_window);
-public static final int gtk_scrolled_window_get_shadow_type(int /*long*/ scrolled_window) {
+public static final native int _gtk_scrolled_window_get_shadow_type(long /*int*/ scrolled_window);
+public static final int gtk_scrolled_window_get_shadow_type(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_shadow_type(scrolled_window);
@@ -9209,8 +9209,8 @@ public static final int gtk_scrolled_window_get_shadow_type(int /*long*/ scrolle
 	}
 }
 /** @param scrolled_window cast=(GtkScrolledWindow *) */
-public static final native int /*long*/ _gtk_scrolled_window_get_vadjustment(int /*long*/ scrolled_window);
-public static final int /*long*/ gtk_scrolled_window_get_vadjustment(int /*long*/ scrolled_window) {
+public static final native long /*int*/ _gtk_scrolled_window_get_vadjustment(long /*int*/ scrolled_window);
+public static final long /*int*/ gtk_scrolled_window_get_vadjustment(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_vadjustment(scrolled_window);
@@ -9222,8 +9222,8 @@ public static final int /*long*/ gtk_scrolled_window_get_vadjustment(int /*long*
  * @param hadjustment cast=(GtkAdjustment *)
  * @param vadjustment cast=(GtkAdjustment *)
  */
-public static final native int /*long*/ _gtk_scrolled_window_new(int /*long*/ hadjustment, int /*long*/ vadjustment);
-public static final int /*long*/ gtk_scrolled_window_new(int /*long*/ hadjustment, int /*long*/ vadjustment) {
+public static final native long /*int*/ _gtk_scrolled_window_new(long /*int*/ hadjustment, long /*int*/ vadjustment);
+public static final long /*int*/ gtk_scrolled_window_new(long /*int*/ hadjustment, long /*int*/ vadjustment) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_new(hadjustment, vadjustment);
@@ -9235,8 +9235,8 @@ public static final int /*long*/ gtk_scrolled_window_new(int /*long*/ hadjustmen
  * @param scrolled_window cast=(GtkScrolledWindow *)
  * @param placement cast=(GtkCornerType)
  */
-public static final native void _gtk_scrolled_window_set_placement(int /*long*/ scrolled_window, int placement);
-public static final void gtk_scrolled_window_set_placement(int /*long*/ scrolled_window, int placement) {
+public static final native void _gtk_scrolled_window_set_placement(long /*int*/ scrolled_window, int placement);
+public static final void gtk_scrolled_window_set_placement(long /*int*/ scrolled_window, int placement) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_placement(scrolled_window, placement);
@@ -9249,8 +9249,8 @@ public static final void gtk_scrolled_window_set_placement(int /*long*/ scrolled
  * @param hscrollbar_policy cast=(GtkPolicyType)
  * @param vscrollbar_policy cast=(GtkPolicyType)
  */
-public static final native void _gtk_scrolled_window_set_policy(int /*long*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy);
-public static final void gtk_scrolled_window_set_policy(int /*long*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
+public static final native void _gtk_scrolled_window_set_policy(long /*int*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy);
+public static final void gtk_scrolled_window_set_policy(long /*int*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy);
@@ -9262,8 +9262,8 @@ public static final void gtk_scrolled_window_set_policy(int /*long*/ scrolled_wi
  * @param scrolled_window cast=(GtkScrolledWindow *)
  * @param type cast=(GtkShadowType)
  */
-public static final native void _gtk_scrolled_window_set_shadow_type(int /*long*/ scrolled_window, int type);
-public static final void gtk_scrolled_window_set_shadow_type(int /*long*/ scrolled_window, int type) {
+public static final native void _gtk_scrolled_window_set_shadow_type(long /*int*/ scrolled_window, int type);
+public static final void gtk_scrolled_window_set_shadow_type(long /*int*/ scrolled_window, int type) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_shadow_type(scrolled_window, type);
@@ -9271,8 +9271,8 @@ public static final void gtk_scrolled_window_set_shadow_type(int /*long*/ scroll
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_settings_get_default();
-public static final int /*long*/ gtk_settings_get_default() {
+public static final native long /*int*/ _gtk_settings_get_default();
+public static final long /*int*/ gtk_settings_get_default() {
 	lock.lock();
 	try {
 		return _gtk_settings_get_default();
@@ -9281,8 +9281,8 @@ public static final int /*long*/ gtk_settings_get_default() {
 	}
 }
 /** @param selection_data cast=(GtkSelectionData *) */
-public static final native void _gtk_selection_data_free(int /*long*/ selection_data);
-public static final void gtk_selection_data_free(int /*long*/ selection_data) {
+public static final native void _gtk_selection_data_free(long /*int*/ selection_data);
+public static final void gtk_selection_data_free(long /*int*/ selection_data) {
 	lock.lock();
 	try {
 		_gtk_selection_data_free(selection_data);
@@ -9297,8 +9297,8 @@ public static final void gtk_selection_data_free(int /*long*/ selection_data) {
  * @param data cast=(const guchar *)
  * @param length cast=(gint)
  */
-public static final native void _gtk_selection_data_set(int /*long*/ selection_data, int /*long*/ type, int format, int /*long*/ data, int length);
-public static final void gtk_selection_data_set(int /*long*/ selection_data, int /*long*/ type, int format, int /*long*/ data, int length) {
+public static final native void _gtk_selection_data_set(long /*int*/ selection_data, long /*int*/ type, int format, long /*int*/ data, int length);
+public static final void gtk_selection_data_set(long /*int*/ selection_data, long /*int*/ type, int format, long /*int*/ data, int length) {
 	lock.lock();
 	try {
 		_gtk_selection_data_set(selection_data, type, format, data, length);
@@ -9306,8 +9306,8 @@ public static final void gtk_selection_data_set(int /*long*/ selection_data, int
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_separator_menu_item_new();
-public static final int /*long*/ gtk_separator_menu_item_new() {
+public static final native long /*int*/ _gtk_separator_menu_item_new();
+public static final long /*int*/ gtk_separator_menu_item_new() {
 	lock.lock();
 	try {
 		return _gtk_separator_menu_item_new();
@@ -9315,8 +9315,8 @@ public static final int /*long*/ gtk_separator_menu_item_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_set_locale();
-public static final int /*long*/ gtk_set_locale() {
+public static final native long /*int*/ _gtk_set_locale();
+public static final long /*int*/ gtk_set_locale() {
 	lock.lock();
 	try {
 		return _gtk_set_locale();
@@ -9325,8 +9325,8 @@ public static final int /*long*/ gtk_set_locale() {
 	}
 }
 /** @param socket cast=(GtkSocket *) */
-public static final native int /*long*/ _gtk_socket_get_id(int /*long*/ socket);
-public static final int /*long*/ gtk_socket_get_id(int /*long*/ socket) {
+public static final native long /*int*/ _gtk_socket_get_id(long /*int*/ socket);
+public static final long /*int*/ gtk_socket_get_id(long /*int*/ socket) {
 	lock.lock();
 	try {
 		return _gtk_socket_get_id(socket);
@@ -9334,8 +9334,8 @@ public static final int /*long*/ gtk_socket_get_id(int /*long*/ socket) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_socket_new();
-public static final int /*long*/ gtk_socket_new() {
+public static final native long /*int*/ _gtk_socket_new();
+public static final long /*int*/ gtk_socket_new() {
 	lock.lock();
 	try {
 		return _gtk_socket_new();
@@ -9344,8 +9344,8 @@ public static final int /*long*/ gtk_socket_new() {
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native int /*long*/ _gtk_spin_button_new(int /*long*/ adjustment, double climb_rate, int digits);
-public static final int /*long*/ gtk_spin_button_new(int /*long*/ adjustment, double climb_rate, int digits) {
+public static final native long /*int*/ _gtk_spin_button_new(long /*int*/ adjustment, double climb_rate, int digits);
+public static final long /*int*/ gtk_spin_button_new(long /*int*/ adjustment, double climb_rate, int digits) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_new(adjustment, climb_rate, digits);
@@ -9354,8 +9354,8 @@ public static final int /*long*/ gtk_spin_button_new(int /*long*/ adjustment, do
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native int /*long*/ _gtk_spin_button_get_adjustment(int /*long*/ spin_button);
-public static final int /*long*/ gtk_spin_button_get_adjustment(int /*long*/ spin_button) {
+public static final native long /*int*/ _gtk_spin_button_get_adjustment(long /*int*/ spin_button);
+public static final long /*int*/ gtk_spin_button_get_adjustment(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_get_adjustment(spin_button);
@@ -9365,8 +9365,8 @@ public static final int /*long*/ gtk_spin_button_get_adjustment(int /*long*/ spi
 }
 
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native int _gtk_spin_button_get_digits(int /*long*/ spin_button);
-public static final int gtk_spin_button_get_digits(int /*long*/ spin_button) {
+public static final native int _gtk_spin_button_get_digits(long /*int*/ spin_button);
+public static final int gtk_spin_button_get_digits(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_get_digits(spin_button);
@@ -9375,8 +9375,8 @@ public static final int gtk_spin_button_get_digits(int /*long*/ spin_button) {
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_set_digits(int /*long*/ spin_button, int digits);
-public static final void gtk_spin_button_set_digits(int /*long*/ spin_button, int digits) {
+public static final native void _gtk_spin_button_set_digits(long /*int*/ spin_button, int digits);
+public static final void gtk_spin_button_set_digits(long /*int*/ spin_button, int digits) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_digits(spin_button, digits);
@@ -9385,8 +9385,8 @@ public static final void gtk_spin_button_set_digits(int /*long*/ spin_button, in
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_set_increments(int /*long*/ spin_button, double step, double page);
-public static final void gtk_spin_button_set_increments(int /*long*/ spin_button, double step, double page) {
+public static final native void _gtk_spin_button_set_increments(long /*int*/ spin_button, double step, double page);
+public static final void gtk_spin_button_set_increments(long /*int*/ spin_button, double step, double page) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_increments(spin_button, step, page);
@@ -9395,8 +9395,8 @@ public static final void gtk_spin_button_set_increments(int /*long*/ spin_button
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_set_range(int /*long*/ spin_button, double max, double min);
-public static final void gtk_spin_button_set_range(int /*long*/ spin_button, double max, double min) {
+public static final native void _gtk_spin_button_set_range(long /*int*/ spin_button, double max, double min);
+public static final void gtk_spin_button_set_range(long /*int*/ spin_button, double max, double min) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_range(spin_button, max, min);
@@ -9405,8 +9405,8 @@ public static final void gtk_spin_button_set_range(int /*long*/ spin_button, dou
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_set_value(int /*long*/ spin_button, double value);
-public static final void gtk_spin_button_set_value(int /*long*/ spin_button, double value) {
+public static final native void _gtk_spin_button_set_value(long /*int*/ spin_button, double value);
+public static final void gtk_spin_button_set_value(long /*int*/ spin_button, double value) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_value(spin_button, value);
@@ -9415,8 +9415,8 @@ public static final void gtk_spin_button_set_value(int /*long*/ spin_button, dou
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_set_wrap(int /*long*/ spin_button, boolean wrap);
-public static final void gtk_spin_button_set_wrap(int /*long*/ spin_button, boolean wrap) {
+public static final native void _gtk_spin_button_set_wrap(long /*int*/ spin_button, boolean wrap);
+public static final void gtk_spin_button_set_wrap(long /*int*/ spin_button, boolean wrap) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_wrap(spin_button, wrap);
@@ -9425,8 +9425,8 @@ public static final void gtk_spin_button_set_wrap(int /*long*/ spin_button, bool
 	}
 }
 /** @param spin_button cast=(GtkSpinButton*) */
-public static final native void _gtk_spin_button_update(int /*long*/ spin_button);
-public static final void gtk_spin_button_update(int /*long*/ spin_button) {
+public static final native void _gtk_spin_button_update(long /*int*/ spin_button);
+public static final void gtk_spin_button_update(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		_gtk_spin_button_update(spin_button);
@@ -9437,8 +9437,8 @@ public static final void gtk_spin_button_update(int /*long*/ spin_button) {
 /**
  * @method flags=dynamic
  */
-public static final native boolean _gtk_status_icon_get_geometry(int /*long*/ handle, int /*long*/ screen, GdkRectangle area, int /*long*/ orientation);
-public static final boolean gtk_status_icon_get_geometry(int /*long*/ handle, int /*long*/ screen, GdkRectangle area, int /*long*/ orientation) {
+public static final native boolean _gtk_status_icon_get_geometry(long /*int*/ handle, long /*int*/ screen, GdkRectangle area, long /*int*/ orientation);
+public static final boolean gtk_status_icon_get_geometry(long /*int*/ handle, long /*int*/ screen, GdkRectangle area, long /*int*/ orientation) {
 	lock.lock();
 	try {
 		return _gtk_status_icon_get_geometry(handle, screen, area, orientation);
@@ -9449,8 +9449,8 @@ public static final boolean gtk_status_icon_get_geometry(int /*long*/ handle, in
 /**
  * @method flags=dynamic
  */
-public static final native boolean _gtk_status_icon_get_visible(int /*long*/ handle);
-public static final boolean gtk_status_icon_get_visible(int /*long*/ handle) {
+public static final native boolean _gtk_status_icon_get_visible(long /*int*/ handle);
+public static final boolean gtk_status_icon_get_visible(long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _gtk_status_icon_get_visible(handle);
@@ -9459,8 +9459,8 @@ public static final boolean gtk_status_icon_get_visible(int /*long*/ handle) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _gtk_status_icon_new();
-public static final int /*long*/ gtk_status_icon_new() {
+public static final native long /*int*/ _gtk_status_icon_new();
+public static final long /*int*/ gtk_status_icon_new() {
 	lock.lock();
 	try {
 		return _gtk_status_icon_new();
@@ -9471,8 +9471,8 @@ public static final int /*long*/ gtk_status_icon_new() {
 /**
  * @method flags=dynamic
  */
-public static final native void _gtk_status_icon_set_from_pixbuf(int /*long*/ handle, int /*long*/ pixbuf);
-public static final void gtk_status_icon_set_from_pixbuf(int /*long*/ handle, int /*long*/ pixbuf) {
+public static final native void _gtk_status_icon_set_from_pixbuf(long /*int*/ handle, long /*int*/ pixbuf);
+public static final void gtk_status_icon_set_from_pixbuf(long /*int*/ handle, long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		_gtk_status_icon_set_from_pixbuf(handle, pixbuf);
@@ -9483,8 +9483,8 @@ public static final void gtk_status_icon_set_from_pixbuf(int /*long*/ handle, in
 /**
  * @method flags=dynamic
  */
-public static final native void _gtk_status_icon_set_visible(int /*long*/ handle, boolean visible);
-public static final void gtk_status_icon_set_visible(int /*long*/ handle, boolean visible) {
+public static final native void _gtk_status_icon_set_visible(long /*int*/ handle, boolean visible);
+public static final void gtk_status_icon_set_visible(long /*int*/ handle, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_status_icon_set_visible(handle, visible);
@@ -9495,8 +9495,8 @@ public static final void gtk_status_icon_set_visible(int /*long*/ handle, boolea
 /**
  * @method flags=dynamic
  */
-public static final native void _gtk_status_icon_set_tooltip(int /*long*/ handle, byte[] tip_text);
-public static final void gtk_status_icon_set_tooltip(int /*long*/ handle, byte[] tip_text) {
+public static final native void _gtk_status_icon_set_tooltip(long /*int*/ handle, byte[] tip_text);
+public static final void gtk_status_icon_set_tooltip(long /*int*/ handle, byte[] tip_text) {
 	lock.lock();
 	try {
 		_gtk_status_icon_set_tooltip(handle, tip_text);
@@ -9508,8 +9508,8 @@ public static final void gtk_status_icon_set_tooltip(int /*long*/ handle, byte[]
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_base(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_base(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_base(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_base(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_base(style, index, color);
@@ -9521,8 +9521,8 @@ public static final void gtk_style_get_base(int /*long*/ style, int index, GdkCo
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_black(int /*long*/ style, GdkColor color);
-public static final void gtk_style_get_black(int /*long*/ style, GdkColor color) {
+public static final native void _gtk_style_get_black(long /*int*/ style, GdkColor color);
+public static final void gtk_style_get_black(long /*int*/ style, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_black(style, color);
@@ -9534,8 +9534,8 @@ public static final void gtk_style_get_black(int /*long*/ style, GdkColor color)
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_bg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_bg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_bg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_bg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_bg(style, index, color);
@@ -9547,8 +9547,8 @@ public static final void gtk_style_get_bg(int /*long*/ style, int index, GdkColo
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_dark(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_dark(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_dark(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_dark(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_dark(style, index, color);
@@ -9560,8 +9560,8 @@ public static final void gtk_style_get_dark(int /*long*/ style, int index, GdkCo
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_fg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_fg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_fg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_fg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_fg(style, index, color);
@@ -9573,8 +9573,8 @@ public static final void gtk_style_get_fg(int /*long*/ style, int index, GdkColo
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **),flags=no_in
  */
-public static final native void _gtk_style_get_fg_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_fg_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_fg_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_fg_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_fg_gc(style, index, gc);
@@ -9586,8 +9586,8 @@ public static final void gtk_style_get_fg_gc(int /*long*/ style, int index, int
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **),flags=no_in
  */
-public static final native void _gtk_style_get_bg_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_bg_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_bg_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_bg_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_bg_gc(style, index, gc);
@@ -9599,8 +9599,8 @@ public static final void gtk_style_get_bg_gc(int /*long*/ style, int index, int
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **)
  */
-public static final native void _gtk_style_get_light_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_light_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_light_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_light_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_light_gc(style, index, gc);
@@ -9612,8 +9612,8 @@ public static final void gtk_style_get_light_gc(int /*long*/ style, int index, i
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **),flags=no_in
  */
-public static final native void _gtk_style_get_dark_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_dark_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_dark_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_dark_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_dark_gc(style, index, gc);
@@ -9625,8 +9625,8 @@ public static final void gtk_style_get_dark_gc(int /*long*/ style, int index, in
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **)
  */
-public static final native void _gtk_style_get_mid_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_mid_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_mid_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_mid_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_mid_gc(style, index, gc);
@@ -9638,8 +9638,8 @@ public static final void gtk_style_get_mid_gc(int /*long*/ style, int index, int
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **)
  */
-public static final native void _gtk_style_get_text_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_text_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_text_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_text_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_text_gc(style, index, gc);
@@ -9651,8 +9651,8 @@ public static final void gtk_style_get_text_gc(int /*long*/ style, int index, in
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **)
  */
-public static final native void _gtk_style_get_text_aa_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_text_aa_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_text_aa_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_text_aa_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_text_aa_gc(style, index, gc);
@@ -9664,8 +9664,8 @@ public static final void gtk_style_get_text_aa_gc(int /*long*/ style, int index,
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **),flags=no_in
  */
-public static final native void _gtk_style_get_black_gc(int /*long*/ style, int /*long*/[] gc);
-public static final void gtk_style_get_black_gc(int /*long*/ style, int /*long*/[] gc) {
+public static final native void _gtk_style_get_black_gc(long /*int*/ style, long /*int*/[] gc);
+public static final void gtk_style_get_black_gc(long /*int*/ style, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_black_gc(style, gc);
@@ -9677,8 +9677,8 @@ public static final void gtk_style_get_black_gc(int /*long*/ style, int /*long*/
  * @param style cast=(GtkStyle *)
  * @param gc cast=(GdkGC **)
  */
-public static final native void _gtk_style_get_white_gc(int /*long*/ style, int /*long*/[] gc);
-public static final void gtk_style_get_white_gc(int /*long*/ style, int /*long*/[] gc) {
+public static final native void _gtk_style_get_white_gc(long /*int*/ style, long /*int*/[] gc);
+public static final void gtk_style_get_white_gc(long /*int*/ style, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_white_gc(style, gc);
@@ -9687,8 +9687,8 @@ public static final void gtk_style_get_white_gc(int /*long*/ style, int /*long*/
 	}
 }
 /** @param style cast=(GtkStyle *) */
-public static final native int /*long*/ _gtk_style_get_font_desc(int /*long*/ style);
-public static final int /*long*/ gtk_style_get_font_desc(int /*long*/ style) {
+public static final native long /*int*/ _gtk_style_get_font_desc(long /*int*/ style);
+public static final long /*int*/ gtk_style_get_font_desc(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_font_desc(style);
@@ -9700,8 +9700,8 @@ public static final int /*long*/ gtk_style_get_font_desc(int /*long*/ style) {
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_light(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_light(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_light(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_light(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_light(style, index, color);
@@ -9713,8 +9713,8 @@ public static final void gtk_style_get_light(int /*long*/ style, int index, GdkC
  * @param style cast=(GtkStyle *)
  * @param color flags=no_in
  */
-public static final native void _gtk_style_get_text(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_text(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_text(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_text(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_text(style, index, color);
@@ -9723,8 +9723,8 @@ public static final void gtk_style_get_text(int /*long*/ style, int index, GdkCo
 	}
 }
 /** @param style cast=(GtkStyle *) */
-public static final native int _gtk_style_get_xthickness(int /*long*/ style);
-public static final int gtk_style_get_xthickness(int /*long*/ style) {
+public static final native int _gtk_style_get_xthickness(long /*int*/ style);
+public static final int gtk_style_get_xthickness(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_xthickness(style);
@@ -9733,8 +9733,8 @@ public static final int gtk_style_get_xthickness(int /*long*/ style) {
 	}
 }
 /** @param style cast=(GtkStyle *) */
-public static final native int _gtk_style_get_ythickness(int /*long*/ style);
-public static final int gtk_style_get_ythickness(int /*long*/ style) {
+public static final native int _gtk_style_get_ythickness(long /*int*/ style);
+public static final int gtk_style_get_ythickness(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_ythickness(style);
@@ -9748,8 +9748,8 @@ public static final int gtk_style_get_ythickness(int /*long*/ style) {
  * @param widget cast=(GtkWidget *)
  * @param detail cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_style_render_icon(int /*long*/ style, int /*long*/ source, int direction, int state, int size, int /*long*/ widget, byte[] detail);
-public static final int /*long*/ gtk_style_render_icon(int /*long*/ style, int /*long*/ source, int direction, int state, int size, int /*long*/ widget, byte[] detail) {
+public static final native long /*int*/ _gtk_style_render_icon(long /*int*/ style, long /*int*/ source, int direction, int state, int size, long /*int*/ widget, byte[] detail);
+public static final long /*int*/ gtk_style_render_icon(long /*int*/ style, long /*int*/ source, int direction, int state, int size, long /*int*/ widget, byte[] detail) {
 	lock.lock();
 	try {
 		return _gtk_style_render_icon(style, source, direction, state, size, widget, detail);
@@ -9761,8 +9761,8 @@ public static final int /*long*/ gtk_style_render_icon(int /*long*/ style, int /
  * @param targets cast=(const GtkTargetEntry *)
  * @param ntargets cast=(guint)
  */
-public static final native int /*long*/ _gtk_target_list_new(int /*long*/ targets, int ntargets);
-public static final int /*long*/ gtk_target_list_new(int /*long*/ targets, int ntargets) {
+public static final native long /*int*/ _gtk_target_list_new(long /*int*/ targets, int ntargets);
+public static final long /*int*/ gtk_target_list_new(long /*int*/ targets, int ntargets) {
 	lock.lock();
 	try {
 		return _gtk_target_list_new(targets, ntargets);
@@ -9771,8 +9771,8 @@ public static final int /*long*/ gtk_target_list_new(int /*long*/ targets, int n
 	}
 }
 /** @param list cast=(GtkTargetList *) */
-public static final native void _gtk_target_list_unref(int /*long*/ list);
-public static final void gtk_target_list_unref(int /*long*/ list) {
+public static final native void _gtk_target_list_unref(long /*int*/ list);
+public static final void gtk_target_list_unref(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gtk_target_list_unref(list);
@@ -9784,8 +9784,8 @@ public static final void gtk_target_list_unref(int /*long*/ list) {
  * @param buffer cast=(GtkTextBuffer *)
  * @param clipboard cast=(GtkClipboard *)
  */
-public static final native void _gtk_text_buffer_copy_clipboard(int /*long*/ buffer, int /*long*/ clipboard);
-public static final void gtk_text_buffer_copy_clipboard(int /*long*/ buffer, int /*long*/ clipboard) {
+public static final native void _gtk_text_buffer_copy_clipboard(long /*int*/ buffer, long /*int*/ clipboard);
+public static final void gtk_text_buffer_copy_clipboard(long /*int*/ buffer, long /*int*/ clipboard) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_copy_clipboard(buffer, clipboard);
@@ -9798,8 +9798,8 @@ public static final void gtk_text_buffer_copy_clipboard(int /*long*/ buffer, int
  * @param clipboard cast=(GtkClipboard *)
  * @param default_editable cast=(gboolean)
  */
-public static final native void _gtk_text_buffer_cut_clipboard(int /*long*/ buffer, int /*long*/ clipboard, boolean default_editable);
-public static final void gtk_text_buffer_cut_clipboard(int /*long*/ buffer, int /*long*/ clipboard, boolean default_editable) {
+public static final native void _gtk_text_buffer_cut_clipboard(long /*int*/ buffer, long /*int*/ clipboard, boolean default_editable);
+public static final void gtk_text_buffer_cut_clipboard(long /*int*/ buffer, long /*int*/ clipboard, boolean default_editable) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_cut_clipboard(buffer, clipboard, default_editable);
@@ -9812,8 +9812,8 @@ public static final void gtk_text_buffer_cut_clipboard(int /*long*/ buffer, int
  * @param start cast=(GtkTextIter *)
  * @param end cast=(GtkTextIter *)
  */
-public static final native void _gtk_text_buffer_delete(int /*long*/ buffer, byte[] start, byte[] end);
-public static final void gtk_text_buffer_delete(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native void _gtk_text_buffer_delete(long /*int*/ buffer, byte[] start, byte[] end);
+public static final void gtk_text_buffer_delete(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_delete(buffer, start, end);
@@ -9826,8 +9826,8 @@ public static final void gtk_text_buffer_delete(int /*long*/ buffer, byte[] star
  * @param start cast=(GtkTextIter *)
  * @param end cast=(GtkTextIter *)
  */
-public static final native void _gtk_text_buffer_get_bounds(int /*long*/ buffer, byte[] start, byte[] end);
-public static final void gtk_text_buffer_get_bounds(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native void _gtk_text_buffer_get_bounds(long /*int*/ buffer, byte[] start, byte[] end);
+public static final void gtk_text_buffer_get_bounds(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_bounds(buffer, start, end);
@@ -9836,8 +9836,8 @@ public static final void gtk_text_buffer_get_bounds(int /*long*/ buffer, byte[]
 	}
 }
 /** @param buffer cast=(GtkTextBuffer *) */
-public static final native int _gtk_text_buffer_get_char_count(int /*long*/ buffer);
-public static final int gtk_text_buffer_get_char_count(int /*long*/ buffer) {
+public static final native int _gtk_text_buffer_get_char_count(long /*int*/ buffer);
+public static final int gtk_text_buffer_get_char_count(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_char_count(buffer);
@@ -9849,8 +9849,8 @@ public static final int gtk_text_buffer_get_char_count(int /*long*/ buffer) {
  * @param buffer cast=(GtkTextBuffer *)
  * @param iter cast=(GtkTextIter *)
  */
-public static final native void _gtk_text_buffer_get_end_iter(int /*long*/ buffer, byte[] iter);
-public static final void gtk_text_buffer_get_end_iter(int /*long*/ buffer, byte[] iter) {
+public static final native void _gtk_text_buffer_get_end_iter(long /*int*/ buffer, byte[] iter);
+public static final void gtk_text_buffer_get_end_iter(long /*int*/ buffer, byte[] iter) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_end_iter(buffer, iter);
@@ -9859,8 +9859,8 @@ public static final void gtk_text_buffer_get_end_iter(int /*long*/ buffer, byte[
 	}
 }
 /** @param buffer cast=(GtkTextBuffer *) */
-public static final native int /*long*/ _gtk_text_buffer_get_insert(int /*long*/ buffer);
-public static final int /*long*/ gtk_text_buffer_get_insert(int /*long*/ buffer) {
+public static final native long /*int*/ _gtk_text_buffer_get_insert(long /*int*/ buffer);
+public static final long /*int*/ gtk_text_buffer_get_insert(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_insert(buffer);
@@ -9873,8 +9873,8 @@ public static final int /*long*/ gtk_text_buffer_get_insert(int /*long*/ buffer)
  * @param iter cast=(GtkTextIter *)
  * @param line_number cast=(gint)
  */
-public static final native void _gtk_text_buffer_get_iter_at_line(int /*long*/ buffer, byte[] iter, int line_number);
-public static final void gtk_text_buffer_get_iter_at_line(int /*long*/ buffer, byte[] iter, int line_number) {
+public static final native void _gtk_text_buffer_get_iter_at_line(long /*int*/ buffer, byte[] iter, int line_number);
+public static final void gtk_text_buffer_get_iter_at_line(long /*int*/ buffer, byte[] iter, int line_number) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_line(buffer, iter, line_number);
@@ -9887,8 +9887,8 @@ public static final void gtk_text_buffer_get_iter_at_line(int /*long*/ buffer, b
  * @param iter cast=(GtkTextIter *)
  * @param mark cast=(GtkTextMark *)
  */
-public static final native void _gtk_text_buffer_get_iter_at_mark(int /*long*/ buffer, byte[] iter, int /*long*/ mark);
-public static final void gtk_text_buffer_get_iter_at_mark(int /*long*/ buffer, byte[] iter, int /*long*/ mark) {
+public static final native void _gtk_text_buffer_get_iter_at_mark(long /*int*/ buffer, byte[] iter, long /*int*/ mark);
+public static final void gtk_text_buffer_get_iter_at_mark(long /*int*/ buffer, byte[] iter, long /*int*/ mark) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_mark(buffer, iter, mark);
@@ -9901,8 +9901,8 @@ public static final void gtk_text_buffer_get_iter_at_mark(int /*long*/ buffer, b
  * @param iter cast=(GtkTextIter *)
  * @param char_offset cast=(gint)
  */
-public static final native void _gtk_text_buffer_get_iter_at_offset(int /*long*/ buffer, byte[] iter, int char_offset);
-public static final void gtk_text_buffer_get_iter_at_offset(int /*long*/ buffer, byte[] iter, int char_offset) {
+public static final native void _gtk_text_buffer_get_iter_at_offset(long /*int*/ buffer, byte[] iter, int char_offset);
+public static final void gtk_text_buffer_get_iter_at_offset(long /*int*/ buffer, byte[] iter, int char_offset) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_offset(buffer, iter, char_offset);
@@ -9911,8 +9911,8 @@ public static final void gtk_text_buffer_get_iter_at_offset(int /*long*/ buffer,
 	}
 }
 /** @param buffer cast=(GtkTextBuffer *) */
-public static final native int _gtk_text_buffer_get_line_count(int /*long*/ buffer);
-public static final int gtk_text_buffer_get_line_count(int /*long*/ buffer) {
+public static final native int _gtk_text_buffer_get_line_count(long /*int*/ buffer);
+public static final int gtk_text_buffer_get_line_count(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_line_count(buffer);
@@ -9921,8 +9921,8 @@ public static final int gtk_text_buffer_get_line_count(int /*long*/ buffer) {
 	}
 }
 /** @param buffer cast=(GtkTextBuffer *) */
-public static final native int /*long*/ _gtk_text_buffer_get_selection_bound(int /*long*/ buffer);
-public static final int /*long*/ gtk_text_buffer_get_selection_bound(int /*long*/ buffer) {
+public static final native long /*int*/ _gtk_text_buffer_get_selection_bound(long /*int*/ buffer);
+public static final long /*int*/ gtk_text_buffer_get_selection_bound(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_selection_bound(buffer);
@@ -9935,8 +9935,8 @@ public static final int /*long*/ gtk_text_buffer_get_selection_bound(int /*long*
  * @param start cast=(GtkTextIter *)
  * @param end cast=(GtkTextIter *)
  */
-public static final native boolean _gtk_text_buffer_get_selection_bounds(int /*long*/ buffer, byte[] start, byte[] end);
-public static final boolean gtk_text_buffer_get_selection_bounds(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native boolean _gtk_text_buffer_get_selection_bounds(long /*int*/ buffer, byte[] start, byte[] end);
+public static final boolean gtk_text_buffer_get_selection_bounds(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_selection_bounds(buffer, start, end);
@@ -9950,8 +9950,8 @@ public static final boolean gtk_text_buffer_get_selection_bounds(int /*long*/ bu
  * @param end cast=(GtkTextIter *)
  * @param include_hidden_chars cast=(gboolean)
  */
-public static final native int /*long*/ _gtk_text_buffer_get_text(int /*long*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars);
-public static final int /*long*/ gtk_text_buffer_get_text(int /*long*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars) {
+public static final native long /*int*/ _gtk_text_buffer_get_text(long /*int*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars);
+public static final long /*int*/ gtk_text_buffer_get_text(long /*int*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_text(buffer, start, end, include_hidden_chars);
@@ -9965,8 +9965,8 @@ public static final int /*long*/ gtk_text_buffer_get_text(int /*long*/ buffer, b
  * @param text cast=(const gchar *)
  * @param len cast=(gint)
  */
-public static final native void _gtk_text_buffer_insert(int /*long*/ buffer, byte[] iter, byte[] text, int len);
-public static final void gtk_text_buffer_insert(int /*long*/ buffer, byte[] iter, byte[] text, int len) {
+public static final native void _gtk_text_buffer_insert(long /*int*/ buffer, byte[] iter, byte[] text, int len);
+public static final void gtk_text_buffer_insert(long /*int*/ buffer, byte[] iter, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_insert(buffer, iter, text, len);
@@ -9980,8 +9980,8 @@ public static final void gtk_text_buffer_insert(int /*long*/ buffer, byte[] iter
  * @param text cast=(const gchar *)
  * @param len cast=(gint)
  */
-public static final native void _gtk_text_buffer_insert(int /*long*/ buffer, int /*long*/ iter, byte[] text, int len);
-public static final void gtk_text_buffer_insert(int /*long*/ buffer, int /*long*/ iter, byte[] text, int len) {
+public static final native void _gtk_text_buffer_insert(long /*int*/ buffer, long /*int*/ iter, byte[] text, int len);
+public static final void gtk_text_buffer_insert(long /*int*/ buffer, long /*int*/ iter, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_insert(buffer, iter, text, len);
@@ -9994,8 +9994,8 @@ public static final void gtk_text_buffer_insert(int /*long*/ buffer, int /*long*
  * @param mark cast=(GtkTextMark *)
  * @param where cast=(const GtkTextIter *)
  */
-public static final native void _gtk_text_buffer_move_mark(int /*long*/ buffer, int /*long*/ mark, byte[] where);
-public static final void gtk_text_buffer_move_mark(int /*long*/ buffer, int /*long*/ mark, byte[] where) {
+public static final native void _gtk_text_buffer_move_mark(long /*int*/ buffer, long /*int*/ mark, byte[] where);
+public static final void gtk_text_buffer_move_mark(long /*int*/ buffer, long /*int*/ mark, byte[] where) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_move_mark(buffer, mark, where);
@@ -10009,8 +10009,8 @@ public static final void gtk_text_buffer_move_mark(int /*long*/ buffer, int /*lo
  * @param override_location cast=(GtkTextIter *)
  * @param default_editable cast=(gboolean)
  */
-public static final native void _gtk_text_buffer_paste_clipboard(int /*long*/ buffer, int /*long*/ clipboard, byte[] override_location, boolean default_editable);
-public static final void gtk_text_buffer_paste_clipboard(int /*long*/ buffer, int /*long*/ clipboard, byte[] override_location, boolean default_editable) {
+public static final native void _gtk_text_buffer_paste_clipboard(long /*int*/ buffer, long /*int*/ clipboard, byte[] override_location, boolean default_editable);
+public static final void gtk_text_buffer_paste_clipboard(long /*int*/ buffer, long /*int*/ clipboard, byte[] override_location, boolean default_editable) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_paste_clipboard(buffer, clipboard, override_location, default_editable);
@@ -10022,8 +10022,8 @@ public static final void gtk_text_buffer_paste_clipboard(int /*long*/ buffer, in
  * @param buffer cast=(GtkTextBuffer *)
  * @param where cast=(const GtkTextIter *)
  */
-public static final native void _gtk_text_buffer_place_cursor(int /*long*/ buffer, byte[] where);
-public static final void gtk_text_buffer_place_cursor(int /*long*/ buffer, byte[] where) {
+public static final native void _gtk_text_buffer_place_cursor(long /*int*/ buffer, byte[] where);
+public static final void gtk_text_buffer_place_cursor(long /*int*/ buffer, byte[] where) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_place_cursor(buffer, where);
@@ -10036,8 +10036,8 @@ public static final void gtk_text_buffer_place_cursor(int /*long*/ buffer, byte[
  * @param text cast=(const gchar *)
  * @param len cast=(gint)
  */
-public static final native void _gtk_text_buffer_set_text(int /*long*/ buffer, byte[] text, int len);
-public static final void gtk_text_buffer_set_text(int /*long*/ buffer, byte[] text, int len) {
+public static final native void _gtk_text_buffer_set_text(long /*int*/ buffer, byte[] text, int len);
+public static final void gtk_text_buffer_set_text(long /*int*/ buffer, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_set_text(buffer, text, len);
@@ -10073,8 +10073,8 @@ public static final int gtk_text_iter_get_offset(byte[] iter) {
  * @param window_x cast=(gint *)
  * @param window_y cast=(gint *)
  */
-public static final native void _gtk_text_view_buffer_to_window_coords(int /*long*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y);
-public static final void gtk_text_view_buffer_to_window_coords(int /*long*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y) {
+public static final native void _gtk_text_view_buffer_to_window_coords(long /*int*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y);
+public static final void gtk_text_view_buffer_to_window_coords(long /*int*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y) {
 	lock.lock();
 	try {
 		_gtk_text_view_buffer_to_window_coords(text_view, win, buffer_x, buffer_y, window_x, window_y);
@@ -10083,8 +10083,8 @@ public static final void gtk_text_view_buffer_to_window_coords(int /*long*/ text
 	}
 }
 /** @param text_view cast=(GtkTextView *) */
-public static final native int /*long*/ _gtk_text_view_get_buffer(int /*long*/ text_view);
-public static final int /*long*/ gtk_text_view_get_buffer(int /*long*/ text_view) {
+public static final native long /*int*/ _gtk_text_view_get_buffer(long /*int*/ text_view);
+public static final long /*int*/ gtk_text_view_get_buffer(long /*int*/ text_view) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_buffer(text_view);
@@ -10093,8 +10093,8 @@ public static final int /*long*/ gtk_text_view_get_buffer(int /*long*/ text_view
 	}
 }
 /** @param text_view cast=(GtkTextView *) */
-public static final native boolean _gtk_text_view_get_editable(int /*long*/ text_view);
-public static final boolean gtk_text_view_get_editable(int /*long*/ text_view) {
+public static final native boolean _gtk_text_view_get_editable(long /*int*/ text_view);
+public static final boolean gtk_text_view_get_editable(long /*int*/ text_view) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_editable(text_view);
@@ -10108,8 +10108,8 @@ public static final boolean gtk_text_view_get_editable(int /*long*/ text_view) {
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native void _gtk_text_view_get_iter_at_location(int /*long*/ text_view, byte[] iter, int x, int y);
-public static final void gtk_text_view_get_iter_at_location(int /*long*/ text_view, byte[] iter, int x, int y) {
+public static final native void _gtk_text_view_get_iter_at_location(long /*int*/ text_view, byte[] iter, int x, int y);
+public static final void gtk_text_view_get_iter_at_location(long /*int*/ text_view, byte[] iter, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_iter_at_location(text_view, iter, x, y);
@@ -10122,8 +10122,8 @@ public static final void gtk_text_view_get_iter_at_location(int /*long*/ text_vi
  * @param iter cast=(const GtkTextIter *)
  * @param location cast=(GdkRectangle *),flags=no_in
  */
-public static final native void _gtk_text_view_get_iter_location(int /*long*/ text_view, byte[] iter, GdkRectangle location);
-public static final void gtk_text_view_get_iter_location(int /*long*/ text_view, byte[] iter, GdkRectangle location) {
+public static final native void _gtk_text_view_get_iter_location(long /*int*/ text_view, byte[] iter, GdkRectangle location);
+public static final void gtk_text_view_get_iter_location(long /*int*/ text_view, byte[] iter, GdkRectangle location) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_iter_location(text_view, iter, location);
@@ -10137,8 +10137,8 @@ public static final void gtk_text_view_get_iter_location(int /*long*/ text_view,
  * @param y cast=(gint)
  * @param line_top cast=(gint *)
  */
-public static final native void _gtk_text_view_get_line_at_y(int /*long*/ text_view, byte[] target_iter, int y, int[] line_top);
-public static final void gtk_text_view_get_line_at_y(int /*long*/ text_view, byte[] target_iter, int y, int[] line_top) {
+public static final native void _gtk_text_view_get_line_at_y(long /*int*/ text_view, byte[] target_iter, int y, int[] line_top);
+public static final void gtk_text_view_get_line_at_y(long /*int*/ text_view, byte[] target_iter, int y, int[] line_top) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_line_at_y(text_view, target_iter, y, line_top);
@@ -10150,8 +10150,8 @@ public static final void gtk_text_view_get_line_at_y(int /*long*/ text_view, byt
  * @param text_view cast=(GtkTextView *)
  * @param visible_rect cast=(GdkRectangle *),flags=no_in
  */
-public static final native void _gtk_text_view_get_visible_rect(int /*long*/ text_view, GdkRectangle visible_rect);
-public static final void gtk_text_view_get_visible_rect(int /*long*/ text_view, GdkRectangle visible_rect) {
+public static final native void _gtk_text_view_get_visible_rect(long /*int*/ text_view, GdkRectangle visible_rect);
+public static final void gtk_text_view_get_visible_rect(long /*int*/ text_view, GdkRectangle visible_rect) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_visible_rect(text_view, visible_rect);
@@ -10163,8 +10163,8 @@ public static final void gtk_text_view_get_visible_rect(int /*long*/ text_view,
  * @param text_view cast=(GtkTextView *)
  * @param win cast=(GtkTextWindowType)
  */
-public static final native int /*long*/ _gtk_text_view_get_window(int /*long*/ text_view, int win);
-public static final int /*long*/ gtk_text_view_get_window(int /*long*/ text_view, int win) {
+public static final native long /*int*/ _gtk_text_view_get_window(long /*int*/ text_view, int win);
+public static final long /*int*/ gtk_text_view_get_window(long /*int*/ text_view, int win) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_window(text_view, win);
@@ -10172,8 +10172,8 @@ public static final int /*long*/ gtk_text_view_get_window(int /*long*/ text_view
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_view_new();
-public static final int /*long*/ gtk_text_view_new() {
+public static final native long /*int*/ _gtk_text_view_new();
+public static final long /*int*/ gtk_text_view_new() {
 	lock.lock();
 	try {
 		return _gtk_text_view_new();
@@ -10185,8 +10185,8 @@ public static final int /*long*/ gtk_text_view_new() {
  * @param text_view cast=(GtkTextView *)
  * @param mark cast=(GtkTextMark *)
  */
-public static final native void _gtk_text_view_scroll_mark_onscreen(int /*long*/ text_view, int /*long*/ mark);
-public static final void gtk_text_view_scroll_mark_onscreen(int /*long*/ text_view, int /*long*/ mark) {
+public static final native void _gtk_text_view_scroll_mark_onscreen(long /*int*/ text_view, long /*int*/ mark);
+public static final void gtk_text_view_scroll_mark_onscreen(long /*int*/ text_view, long /*int*/ mark) {
 	lock.lock();
 	try {
 		_gtk_text_view_scroll_mark_onscreen(text_view, mark);
@@ -10202,8 +10202,8 @@ public static final void gtk_text_view_scroll_mark_onscreen(int /*long*/ text_vi
  * @param xalign cast=(gdouble)
  * @param yalign cast=(gdouble)
  */
-public static final native boolean _gtk_text_view_scroll_to_iter(int /*long*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign);
-public static final boolean gtk_text_view_scroll_to_iter(int /*long*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign) {
+public static final native boolean _gtk_text_view_scroll_to_iter(long /*int*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign);
+public static final boolean gtk_text_view_scroll_to_iter(long /*int*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign) {
 	lock.lock();
 	try {
 		return _gtk_text_view_scroll_to_iter(text_view, iter, within_margin, use_align, xalign, yalign);
@@ -10215,8 +10215,8 @@ public static final boolean gtk_text_view_scroll_to_iter(int /*long*/ text_view,
  * @param text_view cast=(GtkTextView *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_text_view_set_editable(int /*long*/ text_view, boolean setting);
-public static final void gtk_text_view_set_editable(int /*long*/ text_view, boolean setting) {
+public static final native void _gtk_text_view_set_editable(long /*int*/ text_view, boolean setting);
+public static final void gtk_text_view_set_editable(long /*int*/ text_view, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_editable(text_view, setting);
@@ -10225,8 +10225,8 @@ public static final void gtk_text_view_set_editable(int /*long*/ text_view, bool
 	}
 }
 /** @param text_view cast=(GtkTextView *) */
-public static final native void _gtk_text_view_set_justification(int /*long*/ text_view, int justification);
-public static final void gtk_text_view_set_justification(int /*long*/ text_view, int justification) {
+public static final native void _gtk_text_view_set_justification(long /*int*/ text_view, int justification);
+public static final void gtk_text_view_set_justification(long /*int*/ text_view, int justification) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_justification(text_view, justification);
@@ -10238,8 +10238,8 @@ public static final void gtk_text_view_set_justification(int /*long*/ text_view,
  * @param text_view cast=(GtkTextView *)
  * @param tabs cast=(PangoTabArray *)
  */
-public static final native void _gtk_text_view_set_tabs(int /*long*/ text_view, int /*long*/ tabs);
-public static final void gtk_text_view_set_tabs(int /*long*/ text_view, int /*long*/ tabs) {
+public static final native void _gtk_text_view_set_tabs(long /*int*/ text_view, long /*int*/ tabs);
+public static final void gtk_text_view_set_tabs(long /*int*/ text_view, long /*int*/ tabs) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_tabs(text_view, tabs);
@@ -10248,8 +10248,8 @@ public static final void gtk_text_view_set_tabs(int /*long*/ text_view, int /*lo
 	}
 }
 /** @param text_view cast=(GtkTextView *) */
-public static final native void _gtk_text_view_set_wrap_mode(int /*long*/ text_view, int wrap_mode);
-public static final void gtk_text_view_set_wrap_mode(int /*long*/ text_view, int wrap_mode) {
+public static final native void _gtk_text_view_set_wrap_mode(long /*int*/ text_view, int wrap_mode);
+public static final void gtk_text_view_set_wrap_mode(long /*int*/ text_view, int wrap_mode) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_wrap_mode(text_view, wrap_mode);
@@ -10265,8 +10265,8 @@ public static final void gtk_text_view_set_wrap_mode(int /*long*/ text_view, int
  * @param buffer_x cast=(gint *)
  * @param buffer_y cast=(gint *)
  */
-public static final native void _gtk_text_view_window_to_buffer_coords(int /*long*/ text_view, int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y);
-public static final void gtk_text_view_window_to_buffer_coords(int /*long*/ text_view,  int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y) {
+public static final native void _gtk_text_view_window_to_buffer_coords(long /*int*/ text_view, int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y);
+public static final void gtk_text_view_window_to_buffer_coords(long /*int*/ text_view,  int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y) {
 	lock.lock();
 	try {
 		_gtk_text_view_window_to_buffer_coords(text_view, win, window_x, window_y, buffer_x, buffer_y);
@@ -10279,8 +10279,8 @@ public static final void gtk_text_view_window_to_buffer_coords(int /*long*/ text
  * @param function cast=(GtkFunction)
  * @param data cast=(gpointer)
  */
-public static final native int _gtk_timeout_add(int interval, int /*long*/ function, int /*long*/ data);
-public static final int gtk_timeout_add(int interval, int /*long*/ function, int /*long*/ data) {
+public static final native int _gtk_timeout_add(int interval, long /*int*/ function, long /*int*/ data);
+public static final int gtk_timeout_add(int interval, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _gtk_timeout_add(interval, function, data);
@@ -10299,8 +10299,8 @@ public static final void gtk_timeout_remove(int timeout_handler_id) {
 	}
 }
 /** @param toggle_button cast=(GtkToggleButton *) */
-public static final native boolean _gtk_toggle_button_get_active(int /*long*/ toggle_button);
-public static final boolean gtk_toggle_button_get_active(int /*long*/ toggle_button) {
+public static final native boolean _gtk_toggle_button_get_active(long /*int*/ toggle_button);
+public static final boolean gtk_toggle_button_get_active(long /*int*/ toggle_button) {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_get_active(toggle_button);
@@ -10308,8 +10308,8 @@ public static final boolean gtk_toggle_button_get_active(int /*long*/ toggle_but
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_toggle_button_new();
-public static final int /*long*/ gtk_toggle_button_new() {
+public static final native long /*int*/ _gtk_toggle_button_new();
+public static final long /*int*/ gtk_toggle_button_new() {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_new();
@@ -10318,8 +10318,8 @@ public static final int /*long*/ gtk_toggle_button_new() {
 	}
 }
 /** @param toggle_button cast=(GtkToggleButton *) */
-public static final native boolean _gtk_toggle_button_get_inconsistent(int /*long*/ toggle_button);
-public static final boolean gtk_toggle_button_get_inconsistent(int /*long*/ toggle_button) {
+public static final native boolean _gtk_toggle_button_get_inconsistent(long /*int*/ toggle_button);
+public static final boolean gtk_toggle_button_get_inconsistent(long /*int*/ toggle_button) {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_get_inconsistent(toggle_button);
@@ -10331,8 +10331,8 @@ public static final boolean gtk_toggle_button_get_inconsistent(int /*long*/ togg
  * @param toggle_button cast=(GtkToggleButton *)
  * @param is_active cast=(gboolean)
  */
-public static final native void _gtk_toggle_button_set_active(int /*long*/ toggle_button, boolean is_active);
-public static final void gtk_toggle_button_set_active(int /*long*/ toggle_button, boolean is_active) {
+public static final native void _gtk_toggle_button_set_active(long /*int*/ toggle_button, boolean is_active);
+public static final void gtk_toggle_button_set_active(long /*int*/ toggle_button, boolean is_active) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_active(toggle_button, is_active);
@@ -10344,8 +10344,8 @@ public static final void gtk_toggle_button_set_active(int /*long*/ toggle_button
  * @param toggle_button cast=(GtkToggleButton *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_toggle_button_set_inconsistent(int /*long*/ toggle_button, boolean setting);
-public static final void gtk_toggle_button_set_inconsistent(int /*long*/ toggle_button, boolean setting) {
+public static final native void _gtk_toggle_button_set_inconsistent(long /*int*/ toggle_button, boolean setting);
+public static final void gtk_toggle_button_set_inconsistent(long /*int*/ toggle_button, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_inconsistent(toggle_button, setting);
@@ -10357,8 +10357,8 @@ public static final void gtk_toggle_button_set_inconsistent(int /*long*/ toggle_
  * @param toggle_button cast=(GtkToggleButton *)
  * @param draw_indicator cast=(gboolean)
  */
-public static final native void _gtk_toggle_button_set_mode(int /*long*/ toggle_button, boolean draw_indicator);
-public static final void gtk_toggle_button_set_mode(int /*long*/ toggle_button, boolean draw_indicator) {
+public static final native void _gtk_toggle_button_set_mode(long /*int*/ toggle_button, boolean draw_indicator);
+public static final void gtk_toggle_button_set_mode(long /*int*/ toggle_button, boolean draw_indicator) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_mode(toggle_button, draw_indicator);
@@ -10373,8 +10373,8 @@ public static final void gtk_toggle_button_set_mode(int /*long*/ toggle_button,
  * @param tooltip_private_text cast=(const char *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_toolbar_insert_widget(int /*long*/ toolbar, int /*long*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position);
-public static final void gtk_toolbar_insert_widget(int /*long*/ toolbar, int /*long*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position) {
+public static final native void _gtk_toolbar_insert_widget(long /*int*/ toolbar, long /*int*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position);
+public static final void gtk_toolbar_insert_widget(long /*int*/ toolbar, long /*int*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position) {
 	lock.lock();
 	try {
 		_gtk_toolbar_insert_widget(toolbar, widget, tooltip_text, tooltip_private_text, position);
@@ -10382,8 +10382,8 @@ public static final void gtk_toolbar_insert_widget(int /*long*/ toolbar, int /*l
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_toolbar_new();
-public static final int /*long*/ gtk_toolbar_new() {
+public static final native long /*int*/ _gtk_toolbar_new();
+public static final long /*int*/ gtk_toolbar_new() {
 	lock.lock();
 	try {
 		return _gtk_toolbar_new();
@@ -10395,8 +10395,8 @@ public static final int /*long*/ gtk_toolbar_new() {
  * @param toolbar cast=(GtkToolbar *)
  * @param orientation cast=(GtkOrientation)
  */
-public static final native void _gtk_toolbar_set_orientation(int /*long*/ toolbar, int orientation);
-public static final void gtk_toolbar_set_orientation(int /*long*/ toolbar, int orientation) {
+public static final native void _gtk_toolbar_set_orientation(long /*int*/ toolbar, int orientation);
+public static final void gtk_toolbar_set_orientation(long /*int*/ toolbar, int orientation) {
 	lock.lock();
 	try {
 		_gtk_toolbar_set_orientation(toolbar, orientation);
@@ -10405,8 +10405,8 @@ public static final void gtk_toolbar_set_orientation(int /*long*/ toolbar, int o
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_tooltips_data_get(int /*long*/ widget);
-public static final int /*long*/ gtk_tooltips_data_get(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_tooltips_data_get(long /*int*/ widget);
+public static final long /*int*/ gtk_tooltips_data_get(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_tooltips_data_get(widget);
@@ -10415,8 +10415,8 @@ public static final int /*long*/ gtk_tooltips_data_get(int /*long*/ widget) {
 	}
 }
 /** @param tooltips cast=(GtkTooltips *) */
-public static final native void _gtk_tooltips_disable(int /*long*/ tooltips);
-public static final void gtk_tooltips_disable(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_disable(long /*int*/ tooltips);
+public static final void gtk_tooltips_disable(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_disable(tooltips);
@@ -10425,8 +10425,8 @@ public static final void gtk_tooltips_disable(int /*long*/ tooltips) {
 	}
 }
 /** @param tooltips cast=(GtkTooltips *) */
-public static final native void _gtk_tooltips_enable(int /*long*/ tooltips);
-public static final void gtk_tooltips_enable(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_enable(long /*int*/ tooltips);
+public static final void gtk_tooltips_enable(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_enable(tooltips);
@@ -10434,8 +10434,8 @@ public static final void gtk_tooltips_enable(int /*long*/ tooltips) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tooltips_new();
-public static final int /*long*/ gtk_tooltips_new() {
+public static final native long /*int*/ _gtk_tooltips_new();
+public static final long /*int*/ gtk_tooltips_new() {
 	lock.lock();
 	try {
 		return _gtk_tooltips_new();
@@ -10444,8 +10444,8 @@ public static final int /*long*/ gtk_tooltips_new() {
 	}
 }
 /** @param tooltips cast=(GtkTooltips *) */
-public static final native void _gtk_tooltips_force_window(int /*long*/ tooltips);
-public static final void gtk_tooltips_force_window(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_force_window(long /*int*/ tooltips);
+public static final void gtk_tooltips_force_window(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_force_window(tooltips);
@@ -10459,8 +10459,8 @@ public static final void gtk_tooltips_force_window(int /*long*/ tooltips) {
  * @param tip_text cast=(const gchar *)
  * @param tip_private cast=(const gchar *)
  */
-public static final native void _gtk_tooltips_set_tip(int /*long*/ tooltips, int /*long*/ widget, byte[] tip_text, byte[] tip_private);
-public static final void gtk_tooltips_set_tip(int /*long*/ tooltips, int /*long*/ widget, byte[] tip_text, byte[] tip_private) {
+public static final native void _gtk_tooltips_set_tip(long /*int*/ tooltips, long /*int*/ widget, byte[] tip_text, byte[] tip_private);
+public static final void gtk_tooltips_set_tip(long /*int*/ tooltips, long /*int*/ widget, byte[] tip_text, byte[] tip_private) {
 	lock.lock();
 	try {
 		_gtk_tooltips_set_tip(tooltips, widget, tip_text, tip_private);
@@ -10472,8 +10472,8 @@ public static final void gtk_tooltips_set_tip(int /*long*/ tooltips, int /*long*
  * @param tree_model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, int[] value, int /*long*/ terminator);
-public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, int[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, int[] value, long /*int*/ terminator);
+public static final void gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_model_get(tree_model, iter, column, value, terminator);
@@ -10485,8 +10485,8 @@ public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*
  * @param tree_model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, long[] value, int /*long*/ terminator);
-public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, long[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, long[] value, long /*int*/ terminator);
+public static final void gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, long[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_model_get(tree_model, iter, column, value, terminator);
@@ -10499,8 +10499,8 @@ public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*
  * @param iter cast=(GtkTreeIter *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native boolean _gtk_tree_model_get_iter(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ path);
-public static final boolean gtk_tree_model_get_iter(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ path) {
+public static final native boolean _gtk_tree_model_get_iter(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ path);
+public static final boolean gtk_tree_model_get_iter(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_iter(tree_model, iter, path);
@@ -10512,8 +10512,8 @@ public static final boolean gtk_tree_model_get_iter(int /*long*/ tree_model, int
  * @param tree_model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native boolean _gtk_tree_model_get_iter_first(int /*long*/ tree_model, int /*long*/ iter);
-public static final boolean gtk_tree_model_get_iter_first(int /*long*/ tree_model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_model_get_iter_first(long /*int*/ tree_model, long /*int*/ iter);
+public static final boolean gtk_tree_model_get_iter_first(long /*int*/ tree_model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_iter_first(tree_model, iter);
@@ -10522,8 +10522,8 @@ public static final boolean gtk_tree_model_get_iter_first(int /*long*/ tree_mode
 	}
 }
 /** @param tree_model cast=(GtkTreeModel *) */
-public static final native int _gtk_tree_model_get_n_columns(int /*long*/ tree_model);
-public static final int gtk_tree_model_get_n_columns(int /*long*/ tree_model) {
+public static final native int _gtk_tree_model_get_n_columns(long /*int*/ tree_model);
+public static final int gtk_tree_model_get_n_columns(long /*int*/ tree_model) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_n_columns(tree_model);
@@ -10535,8 +10535,8 @@ public static final int gtk_tree_model_get_n_columns(int /*long*/ tree_model) {
  * @param tree_model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native int /*long*/ _gtk_tree_model_get_path(int /*long*/ tree_model, int /*long*/ iter);
-public static final int /*long*/ gtk_tree_model_get_path(int /*long*/ tree_model, int /*long*/ iter) {
+public static final native long /*int*/ _gtk_tree_model_get_path(long /*int*/ tree_model, long /*int*/ iter);
+public static final long /*int*/ gtk_tree_model_get_path(long /*int*/ tree_model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_path(tree_model, iter);
@@ -10544,8 +10544,8 @@ public static final int /*long*/ gtk_tree_model_get_path(int /*long*/ tree_model
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_model_get_type();
-public static final int /*long*/ gtk_tree_model_get_type() {
+public static final native long /*int*/ _gtk_tree_model_get_type();
+public static final long /*int*/ gtk_tree_model_get_type() {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_type();
@@ -10558,8 +10558,8 @@ public static final int /*long*/ gtk_tree_model_get_type() {
  * @param iter cast=(GtkTreeIter *)
  * @param parent cast=(GtkTreeIter *)
  */
-public static final native boolean _gtk_tree_model_iter_children(int /*long*/ model, int /*long*/ iter, int /*long*/ parent);
-public static final boolean gtk_tree_model_iter_children(int /*long*/ model, int /*long*/ iter, int /*long*/ parent) {
+public static final native boolean _gtk_tree_model_iter_children(long /*int*/ model, long /*int*/ iter, long /*int*/ parent);
+public static final boolean gtk_tree_model_iter_children(long /*int*/ model, long /*int*/ iter, long /*int*/ parent) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_children(model, iter, parent);
@@ -10571,8 +10571,8 @@ public static final boolean gtk_tree_model_iter_children(int /*long*/ model, int
  * @param model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native int _gtk_tree_model_iter_n_children(int /*long*/ model, int /*long*/ iter);
-public static final int gtk_tree_model_iter_n_children(int /*long*/ model, int /*long*/ iter) {
+public static final native int _gtk_tree_model_iter_n_children(long /*int*/ model, long /*int*/ iter);
+public static final int gtk_tree_model_iter_n_children(long /*int*/ model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_n_children(model, iter);
@@ -10584,8 +10584,8 @@ public static final int gtk_tree_model_iter_n_children(int /*long*/ model, int /
  * @param model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native boolean _gtk_tree_model_iter_next(int /*long*/ model, int /*long*/ iter);
-public static final boolean gtk_tree_model_iter_next(int /*long*/ model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_model_iter_next(long /*int*/ model, long /*int*/ iter);
+public static final boolean gtk_tree_model_iter_next(long /*int*/ model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_next(model, iter);
@@ -10598,8 +10598,8 @@ public static final boolean gtk_tree_model_iter_next(int /*long*/ model, int /*l
  * @param iter cast=(GtkTreeIter *)
  * @param parent cast=(GtkTreeIter *)
  */
-public static final native boolean _gtk_tree_model_iter_nth_child(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ parent, int n);
-public static final boolean gtk_tree_model_iter_nth_child(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ parent, int n) {
+public static final native boolean _gtk_tree_model_iter_nth_child(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ parent, int n);
+public static final boolean gtk_tree_model_iter_nth_child(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ parent, int n) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_nth_child(tree_model, iter, parent, n);
@@ -10608,8 +10608,8 @@ public static final boolean gtk_tree_model_iter_nth_child(int /*long*/ tree_mode
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native void _gtk_tree_path_append_index(int /*long*/ path, int index);
-public static final void gtk_tree_path_append_index(int /*long*/ path, int index) {
+public static final native void _gtk_tree_path_append_index(long /*int*/ path, int index);
+public static final void gtk_tree_path_append_index(long /*int*/ path, int index) {
 	lock.lock();
 	try {
 		_gtk_tree_path_append_index(path, index);
@@ -10621,8 +10621,8 @@ public static final void gtk_tree_path_append_index(int /*long*/ path, int index
  * @param a cast=(const GtkTreePath *)
  * @param b cast=(const GtkTreePath *)
  */
-public static final native int /*long*/ _gtk_tree_path_compare(int /*long*/ a, int /*long*/ b);
-public static final int /*long*/ gtk_tree_path_compare(int /*long*/ a, int /*long*/ b) {
+public static final native long /*int*/ _gtk_tree_path_compare(long /*int*/ a, long /*int*/ b);
+public static final long /*int*/ gtk_tree_path_compare(long /*int*/ a, long /*int*/ b) {
 	lock.lock();
 	try {
 		 return _gtk_tree_path_compare(a, b);
@@ -10631,8 +10631,8 @@ public static final int /*long*/ gtk_tree_path_compare(int /*long*/ a, int /*lon
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native void _gtk_tree_path_down(int /*long*/ path);
-public static final void gtk_tree_path_down(int /*long*/ path) {
+public static final native void _gtk_tree_path_down(long /*int*/ path);
+public static final void gtk_tree_path_down(long /*int*/ path) {
 	lock.lock();
 	try {
 		 _gtk_tree_path_down(path);
@@ -10641,8 +10641,8 @@ public static final void gtk_tree_path_down(int /*long*/ path) {
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native void _gtk_tree_path_free(int /*long*/ path);
-public static final void gtk_tree_path_free(int /*long*/ path) {
+public static final native void _gtk_tree_path_free(long /*int*/ path);
+public static final void gtk_tree_path_free(long /*int*/ path) {
 	lock.lock();
 	try {
 		_gtk_tree_path_free(path);
@@ -10651,8 +10651,8 @@ public static final void gtk_tree_path_free(int /*long*/ path) {
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native int _gtk_tree_path_get_depth(int /*long*/ path);
-public static final int gtk_tree_path_get_depth(int /*long*/ path) {
+public static final native int _gtk_tree_path_get_depth(long /*int*/ path);
+public static final int gtk_tree_path_get_depth(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_get_depth(path);
@@ -10661,8 +10661,8 @@ public static final int gtk_tree_path_get_depth(int /*long*/ path) {
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native int /*long*/ _gtk_tree_path_get_indices(int /*long*/ path);
-public static final int /*long*/ gtk_tree_path_get_indices(int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_path_get_indices(long /*int*/ path);
+public static final long /*int*/ gtk_tree_path_get_indices(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_get_indices(path);
@@ -10670,8 +10670,8 @@ public static final int /*long*/ gtk_tree_path_get_indices(int /*long*/ path) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new();
-public static final int /*long*/ gtk_tree_path_new() {
+public static final native long /*int*/ _gtk_tree_path_new();
+public static final long /*int*/ gtk_tree_path_new() {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new();
@@ -10679,8 +10679,8 @@ public static final int /*long*/ gtk_tree_path_new() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new_first();
-public static final int /*long*/ gtk_tree_path_new_first() {
+public static final native long /*int*/ _gtk_tree_path_new_first();
+public static final long /*int*/ gtk_tree_path_new_first() {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_first();
@@ -10689,8 +10689,8 @@ public static final int /*long*/ gtk_tree_path_new_first() {
 	}
 }
 /** @param path cast=(const gchar *) */
-public static final native int /*long*/ _gtk_tree_path_new_from_string(byte[] path);
-public static final int /*long*/ gtk_tree_path_new_from_string(byte[] path) {
+public static final native long /*int*/ _gtk_tree_path_new_from_string(byte[] path);
+public static final long /*int*/ gtk_tree_path_new_from_string(byte[] path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_from_string(path);
@@ -10699,8 +10699,8 @@ public static final int /*long*/ gtk_tree_path_new_from_string(byte[] path) {
 	}
 }
 /** @param path cast=(const gchar *) */
-public static final native int /*long*/ _gtk_tree_path_new_from_string(int /*long*/ path);
-public static final int /*long*/ gtk_tree_path_new_from_string(int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_path_new_from_string(long /*int*/ path);
+public static final long /*int*/ gtk_tree_path_new_from_string(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_from_string(path);
@@ -10709,8 +10709,8 @@ public static final int /*long*/ gtk_tree_path_new_from_string(int /*long*/ path
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native void _gtk_tree_path_next(int /*long*/ path);
-public static final void gtk_tree_path_next(int /*long*/ path) {
+public static final native void _gtk_tree_path_next(long /*int*/ path);
+public static final void gtk_tree_path_next(long /*int*/ path) {
 	lock.lock();
 	try {
 		_gtk_tree_path_next(path);
@@ -10719,8 +10719,8 @@ public static final void gtk_tree_path_next(int /*long*/ path) {
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native boolean _gtk_tree_path_prev(int /*long*/ path);
-public static final boolean gtk_tree_path_prev(int /*long*/ path) {
+public static final native boolean _gtk_tree_path_prev(long /*int*/ path);
+public static final boolean gtk_tree_path_prev(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_prev(path);
@@ -10729,8 +10729,8 @@ public static final boolean gtk_tree_path_prev(int /*long*/ path) {
 	}
 }
 /** @param path cast=(GtkTreePath *) */
-public static final native boolean _gtk_tree_path_up(int /*long*/ path);
-public static final boolean gtk_tree_path_up(int /*long*/ path) {
+public static final native boolean _gtk_tree_path_up(long /*int*/ path);
+public static final boolean gtk_tree_path_up(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_up(path);
@@ -10742,8 +10742,8 @@ public static final boolean gtk_tree_path_up(int /*long*/ path) {
  * @method flags=dynamic
  * @param selection cast=(GtkTreeSelection *)
  */
-public static final native int _gtk_tree_selection_count_selected_rows(int /*long*/ selection);
-public static final int gtk_tree_selection_count_selected_rows(int /*long*/ selection) {
+public static final native int _gtk_tree_selection_count_selected_rows(long /*int*/ selection);
+public static final int gtk_tree_selection_count_selected_rows(long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_count_selected_rows(selection);
@@ -10756,8 +10756,8 @@ public static final int gtk_tree_selection_count_selected_rows(int /*long*/ sele
  * @param model cast=(GtkTreeModel **)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native boolean _gtk_tree_selection_get_selected(int /*long*/ selection, int /*long*/[] model, int /*long*/ iter);
-public static final boolean gtk_tree_selection_get_selected(int /*long*/ selection, int /*long*/[] model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_selection_get_selected(long /*int*/ selection, long /*int*/[] model, long /*int*/ iter);
+public static final boolean gtk_tree_selection_get_selected(long /*int*/ selection, long /*int*/[] model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_get_selected(selection, model, iter);
@@ -10770,8 +10770,8 @@ public static final boolean gtk_tree_selection_get_selected(int /*long*/ selecti
  * @param selection cast=(GtkTreeSelection *)
  * @param model cast=(GtkTreeModel **)
  */
-public static final native int /*long*/ _gtk_tree_selection_get_selected_rows(int /*long*/ selection, int /*long*/[] model);
-public static final int /*long*/ gtk_tree_selection_get_selected_rows(int /*long*/ selection, int /*long*/[] model) {
+public static final native long /*int*/ _gtk_tree_selection_get_selected_rows(long /*int*/ selection, long /*int*/[] model);
+public static final long /*int*/ gtk_tree_selection_get_selected_rows(long /*int*/ selection, long /*int*/[] model) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_get_selected_rows(selection, model);
@@ -10783,8 +10783,8 @@ public static final int /*long*/ gtk_tree_selection_get_selected_rows(int /*long
  * @param selection cast=(GtkTreeSelection *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native boolean _gtk_tree_selection_path_is_selected(int /*long*/ selection, int /*long*/ path);
-public static final boolean gtk_tree_selection_path_is_selected(int /*long*/ selection, int /*long*/ path) {
+public static final native boolean _gtk_tree_selection_path_is_selected(long /*int*/ selection, long /*int*/ path);
+public static final boolean gtk_tree_selection_path_is_selected(long /*int*/ selection, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_path_is_selected(selection, path);
@@ -10793,8 +10793,8 @@ public static final boolean gtk_tree_selection_path_is_selected(int /*long*/ sel
 	}
 }
 /** @param selection cast=(GtkTreeSelection *) */
-public static final native void _gtk_tree_selection_select_all(int /*long*/ selection);
-public static final void gtk_tree_selection_select_all(int /*long*/ selection) {
+public static final native void _gtk_tree_selection_select_all(long /*int*/ selection);
+public static final void gtk_tree_selection_select_all(long /*int*/ selection) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_select_all(selection);
@@ -10806,8 +10806,8 @@ public static final void gtk_tree_selection_select_all(int /*long*/ selection) {
  * @param selection cast=(GtkTreeSelection *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_selection_select_iter(int /*long*/ selection, int /*long*/ iter);
-public static final void gtk_tree_selection_select_iter(int /*long*/ selection, int /*long*/ iter) {
+public static final native void _gtk_tree_selection_select_iter(long /*int*/ selection, long /*int*/ iter);
+public static final void gtk_tree_selection_select_iter(long /*int*/ selection, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_select_iter(selection, iter);
@@ -10820,8 +10820,8 @@ public static final void gtk_tree_selection_select_iter(int /*long*/ selection,
  * @param func cast=(GtkTreeSelectionForeachFunc)
  * @param data cast=(gpointer)
  */
-public static final native void _gtk_tree_selection_selected_foreach(int /*long*/ selection, int /*long*/ func, int /*long*/ data);
-public static final void gtk_tree_selection_selected_foreach(int /*long*/ selection, int /*long*/ func, int /*long*/ data) {
+public static final native void _gtk_tree_selection_selected_foreach(long /*int*/ selection, long /*int*/ func, long /*int*/ data);
+public static final void gtk_tree_selection_selected_foreach(long /*int*/ selection, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_selected_foreach(selection, func, data);
@@ -10833,8 +10833,8 @@ public static final void gtk_tree_selection_selected_foreach(int /*long*/ select
  * @param selection cast=(GtkTreeSelection *)
  * @param mode cast=(GtkSelectionMode)
  */
-public static final native void _gtk_tree_selection_set_mode(int /*long*/ selection, int mode);
-public static final void gtk_tree_selection_set_mode(int /*long*/ selection, int mode) {
+public static final native void _gtk_tree_selection_set_mode(long /*int*/ selection, int mode);
+public static final void gtk_tree_selection_set_mode(long /*int*/ selection, int mode) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_set_mode(selection, mode);
@@ -10843,8 +10843,8 @@ public static final void gtk_tree_selection_set_mode(int /*long*/ selection, int
 	}
 }
 /** @param selection cast=(GtkTreeSelection *) */
-public static final native void _gtk_tree_selection_unselect_all(int /*long*/ selection);
-public static final void gtk_tree_selection_unselect_all(int /*long*/ selection) {
+public static final native void _gtk_tree_selection_unselect_all(long /*int*/ selection);
+public static final void gtk_tree_selection_unselect_all(long /*int*/ selection) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_unselect_all(selection);
@@ -10856,8 +10856,8 @@ public static final void gtk_tree_selection_unselect_all(int /*long*/ selection)
  * @param selection cast=(GtkTreeSelection *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_selection_unselect_iter(int /*long*/ selection, int /*long*/ iter);
-public static final void gtk_tree_selection_unselect_iter(int /*long*/ selection, int /*long*/ iter) {
+public static final native void _gtk_tree_selection_unselect_iter(long /*int*/ selection, long /*int*/ iter);
+public static final void gtk_tree_selection_unselect_iter(long /*int*/ selection, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_unselect_iter(selection, iter);
@@ -10870,8 +10870,8 @@ public static final void gtk_tree_selection_unselect_iter(int /*long*/ selection
  * @param iter cast=(GtkTreeIter *)
  * @param parent cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_append(int /*long*/ store, int /*long*/ iter, int /*long*/ parent);
-public static final void gtk_tree_store_append(int /*long*/ store, int /*long*/ iter, int /*long*/ parent) {
+public static final native void _gtk_tree_store_append(long /*int*/ store, long /*int*/ iter, long /*int*/ parent);
+public static final void gtk_tree_store_append(long /*int*/ store, long /*int*/ iter, long /*int*/ parent) {
 	lock.lock();
 	try {
 		_gtk_tree_store_append(store, iter, parent);
@@ -10880,8 +10880,8 @@ public static final void gtk_tree_store_append(int /*long*/ store, int /*long*/
 	}
 }
 /** @param store cast=(GtkTreeStore *) */
-public static final native void _gtk_tree_store_clear(int /*long*/ store);
-public static final void gtk_tree_store_clear(int /*long*/ store) {
+public static final native void _gtk_tree_store_clear(long /*int*/ store);
+public static final void gtk_tree_store_clear(long /*int*/ store) {
 	lock.lock();
 	try {
 		_gtk_tree_store_clear(store);
@@ -10895,8 +10895,8 @@ public static final void gtk_tree_store_clear(int /*long*/ store) {
  * @param parent cast=(GtkTreeIter *)
  * @param position cast=(gint)
  */
-public static final native void _gtk_tree_store_insert(int /*long*/ store, int /*long*/ iter, int /*long*/ parent, int position);
-public static final void gtk_tree_store_insert(int /*long*/ store, int /*long*/ iter, int /*long*/ parent, int position) {
+public static final native void _gtk_tree_store_insert(long /*int*/ store, long /*int*/ iter, long /*int*/ parent, int position);
+public static final void gtk_tree_store_insert(long /*int*/ store, long /*int*/ iter, long /*int*/ parent, int position) {
 	lock.lock();
 	try {
 		_gtk_tree_store_insert(store, iter, parent, position);
@@ -10905,8 +10905,8 @@ public static final void gtk_tree_store_insert(int /*long*/ store, int /*long*/
 	}
 }
 /** @param types cast=(GType *) */
-public static final native int /*long*/ _gtk_tree_store_newv(int numColumns, int /*long*/[] types);
-public static final int /*long*/ gtk_tree_store_newv(int numColumns, int /*long*/[] types) {
+public static final native long /*int*/ _gtk_tree_store_newv(int numColumns, long /*int*/[] types);
+public static final long /*int*/ gtk_tree_store_newv(int numColumns, long /*int*/[] types) {
 	lock.lock();
 	try {
 		return _gtk_tree_store_newv(numColumns, types);
@@ -10918,8 +10918,8 @@ public static final int /*long*/ gtk_tree_store_newv(int numColumns, int /*long*
  * @param store cast=(GtkTreeStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_remove(int /*long*/ store, int /*long*/ iter);
-public static final void gtk_tree_store_remove(int /*long*/ store, int /*long*/ iter) {
+public static final native void _gtk_tree_store_remove(long /*int*/ store, long /*int*/ iter);
+public static final void gtk_tree_store_remove(long /*int*/ store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_store_remove(store, iter);
@@ -10931,8 +10931,8 @@ public static final void gtk_tree_store_remove(int /*long*/ store, int /*long*/
  * @param store cast=(GtkTreeStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -10944,8 +10944,8 @@ public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkTreeStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -10957,8 +10957,8 @@ public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkTreeStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -10971,8 +10971,8 @@ public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ ite
  * @param iter cast=(GtkTreeIter *)
  * @param value flags=no_out
  */
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -10984,8 +10984,8 @@ public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ ite
  * @param store cast=(GtkTreeStore *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -10997,8 +10997,8 @@ public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ ite
  * @param view cast=(GtkTreeView *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native int /*long*/ _gtk_tree_view_create_row_drag_icon(int /*long*/ view, int /*long*/ path);
-public static final int /*long*/ gtk_tree_view_create_row_drag_icon(int /*long*/ view, int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_view_create_row_drag_icon(long /*int*/ view, long /*int*/ path);
+public static final long /*int*/ gtk_tree_view_create_row_drag_icon(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_create_row_drag_icon(view, path);
@@ -11010,8 +11010,8 @@ public static final int /*long*/ gtk_tree_view_create_row_drag_icon(int /*long*/
  * @param view cast=(GtkTreeView *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native boolean _gtk_tree_view_collapse_row(int /*long*/ view, int /*long*/ path);
-public static final boolean gtk_tree_view_collapse_row(int /*long*/ view, int /*long*/ path) {
+public static final native boolean _gtk_tree_view_collapse_row(long /*int*/ view, long /*int*/ path);
+public static final boolean gtk_tree_view_collapse_row(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_collapse_row(view, path);
@@ -11025,8 +11025,8 @@ public static final boolean gtk_tree_view_collapse_row(int /*long*/ view, int /*
  * @param attribute cast=(const gchar *)
  * @param column cast=(gint)
  */
-public static final native void _gtk_tree_view_column_add_attribute(int /*long*/ treeColumn, int /*long*/ cellRenderer, byte[] attribute, int column);
-public static final void gtk_tree_view_column_add_attribute(int /*long*/ treeColumn, int /*long*/ cellRenderer, byte[] attribute, int column) {
+public static final native void _gtk_tree_view_column_add_attribute(long /*int*/ treeColumn, long /*int*/ cellRenderer, byte[] attribute, int column);
+public static final void gtk_tree_view_column_add_attribute(long /*int*/ treeColumn, long /*int*/ cellRenderer, byte[] attribute, int column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_add_attribute(treeColumn, cellRenderer, attribute, column);
@@ -11041,8 +11041,8 @@ public static final void gtk_tree_view_column_add_attribute(int /*long*/ treeCol
  * @param start_pos cast=(gint *)
  * @param width cast=(gint *)
  */
-public static final native boolean _gtk_tree_view_column_cell_get_position(int /*long*/ tree_column, int /*long*/ cell_renderer, int[] start_pos, int[] width);
-public static final boolean gtk_tree_view_column_cell_get_position(int /*long*/ tree_column, int /*long*/ cell_renderer, int[] start_pos, int[] width) {
+public static final native boolean _gtk_tree_view_column_cell_get_position(long /*int*/ tree_column, long /*int*/ cell_renderer, int[] start_pos, int[] width);
+public static final boolean gtk_tree_view_column_cell_get_position(long /*int*/ tree_column, long /*int*/ cell_renderer, int[] start_pos, int[] width) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_cell_get_position(tree_column, cell_renderer, start_pos, width);
@@ -11058,8 +11058,8 @@ public static final boolean gtk_tree_view_column_cell_get_position(int /*long*/
  * @param width cast=(gint *)
  * @param height cast=(gint *)
  */
-public static final native void _gtk_tree_view_column_cell_get_size(int /*long*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height);
-public static final void gtk_tree_view_column_cell_get_size(int /*long*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
+public static final native void _gtk_tree_view_column_cell_get_size(long /*int*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height);
+public static final void gtk_tree_view_column_cell_get_size(long /*int*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_cell_get_size(tree_column, cell_area, x_offset, y_offset, width, height);
@@ -11072,8 +11072,8 @@ public static final void gtk_tree_view_column_cell_get_size(int /*long*/ tree_co
  * @param tree_model cast=(GtkTreeModel *)
  * @param iter cast=(GtkTreeIter *)
  */
-public static final native void _gtk_tree_view_column_cell_set_cell_data(int /*long*/ tree_column, int /*long*/ tree_model, int /*long*/ iter, boolean is_expander, boolean is_expanded);
-public static final void gtk_tree_view_column_cell_set_cell_data(int /*long*/ tree_column, int /*long*/ tree_model, int /*long*/ iter, boolean is_expander, boolean is_expanded) {
+public static final native void _gtk_tree_view_column_cell_set_cell_data(long /*int*/ tree_column, long /*int*/ tree_model, long /*int*/ iter, boolean is_expander, boolean is_expanded);
+public static final void gtk_tree_view_column_cell_set_cell_data(long /*int*/ tree_column, long /*int*/ tree_model, long /*int*/ iter, boolean is_expander, boolean is_expanded) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_cell_set_cell_data(tree_column, tree_model, iter, is_expander, is_expanded);
@@ -11082,8 +11082,8 @@ public static final void gtk_tree_view_column_cell_set_cell_data(int /*long*/ tr
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native void _gtk_tree_view_column_clear(int /*long*/ tree_column);
-public static final void gtk_tree_view_column_clear(int /*long*/ tree_column) {
+public static final native void _gtk_tree_view_column_clear(long /*int*/ tree_column);
+public static final void gtk_tree_view_column_clear(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_clear(tree_column);
@@ -11092,8 +11092,8 @@ public static final void gtk_tree_view_column_clear(int /*long*/ tree_column) {
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native int /*long*/ _gtk_tree_view_column_get_cell_renderers(int /*long*/ tree_column);
-public static final int /*long*/ gtk_tree_view_column_get_cell_renderers(int /*long*/ tree_column) {
+public static final native long /*int*/ _gtk_tree_view_column_get_cell_renderers(long /*int*/ tree_column);
+public static final long /*int*/ gtk_tree_view_column_get_cell_renderers(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_cell_renderers(tree_column);
@@ -11102,8 +11102,8 @@ public static final int /*long*/ gtk_tree_view_column_get_cell_renderers(int /*l
 	}
 }
 /** @param column cast=(GtkTreeViewColumn *) */
-public static final native int _gtk_tree_view_column_get_fixed_width(int /*long*/ column);
-public static final int gtk_tree_view_column_get_fixed_width(int /*long*/ column) {
+public static final native int _gtk_tree_view_column_get_fixed_width(long /*int*/ column);
+public static final int gtk_tree_view_column_get_fixed_width(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_fixed_width(column);
@@ -11112,8 +11112,8 @@ public static final int gtk_tree_view_column_get_fixed_width(int /*long*/ column
 	}
 }
 /** @param column cast=(GtkTreeViewColumn *) */
-public static final native boolean _gtk_tree_view_column_get_reorderable(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_reorderable(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_reorderable(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_reorderable(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_reorderable(column);
@@ -11122,8 +11122,8 @@ public static final boolean gtk_tree_view_column_get_reorderable(int /*long*/ co
 	}
 }
 /** @param column cast=(GtkTreeViewColumn *) */
-public static final native boolean _gtk_tree_view_column_get_resizable(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_resizable(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_resizable(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_resizable(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_resizable(column);
@@ -11132,8 +11132,8 @@ public static final boolean gtk_tree_view_column_get_resizable(int /*long*/ colu
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native int _gtk_tree_view_column_get_sizing(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_sizing(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_sizing(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_sizing(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sizing(tree_column);
@@ -11142,8 +11142,8 @@ public static final int gtk_tree_view_column_get_sizing(int /*long*/ tree_column
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native int _gtk_tree_view_column_get_spacing(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_spacing(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_spacing(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_spacing(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_spacing(tree_column);
@@ -11152,8 +11152,8 @@ public static final int gtk_tree_view_column_get_spacing(int /*long*/ tree_colum
 	}
 }
 /** @param column cast=(GtkTreeViewColumn *) */
-public static final native boolean _gtk_tree_view_column_get_visible(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_visible(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_visible(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_visible(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_visible(column);
@@ -11162,8 +11162,8 @@ public static final boolean gtk_tree_view_column_get_visible(int /*long*/ column
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native boolean _gtk_tree_view_column_get_sort_indicator(int /*long*/ tree_column);
-public static final boolean gtk_tree_view_column_get_sort_indicator(int /*long*/ tree_column) {
+public static final native boolean _gtk_tree_view_column_get_sort_indicator(long /*int*/ tree_column);
+public static final boolean gtk_tree_view_column_get_sort_indicator(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sort_indicator(tree_column);
@@ -11172,8 +11172,8 @@ public static final boolean gtk_tree_view_column_get_sort_indicator(int /*long*/
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native int _gtk_tree_view_column_get_sort_order(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_sort_order(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_sort_order(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_sort_order(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sort_order(tree_column);
@@ -11182,8 +11182,8 @@ public static final int gtk_tree_view_column_get_sort_order(int /*long*/ tree_co
 	}
 }
 /** @param column cast=(GtkTreeViewColumn *) */
-public static final native int _gtk_tree_view_column_get_width(int /*long*/ column);
-public static final int gtk_tree_view_column_get_width(int /*long*/ column) {
+public static final native int _gtk_tree_view_column_get_width(long /*int*/ column);
+public static final int gtk_tree_view_column_get_width(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_width(column);
@@ -11191,8 +11191,8 @@ public static final int gtk_tree_view_column_get_width(int /*long*/ column) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_column_new();
-public static final int /*long*/ gtk_tree_view_column_new() {
+public static final native long /*int*/ _gtk_tree_view_column_new();
+public static final long /*int*/ gtk_tree_view_column_new() {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_new();
@@ -11205,8 +11205,8 @@ public static final int /*long*/ gtk_tree_view_column_new() {
  * @param cell_renderer cast=(GtkCellRenderer *)
  * @param expand cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_pack_start(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand);
-public static final void gtk_tree_view_column_pack_start(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand) {
+public static final native void _gtk_tree_view_column_pack_start(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand);
+public static final void gtk_tree_view_column_pack_start(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_pack_start(tree_column, cell_renderer, expand);
@@ -11219,8 +11219,8 @@ public static final void gtk_tree_view_column_pack_start(int /*long*/ tree_colum
  * @param cell_renderer cast=(GtkCellRenderer *)
  * @param expand cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_pack_end(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand);
-public static final void gtk_tree_view_column_pack_end(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand) {
+public static final native void _gtk_tree_view_column_pack_end(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand);
+public static final void gtk_tree_view_column_pack_end(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_pack_end(tree_column, cell_renderer, expand);
@@ -11229,8 +11229,8 @@ public static final void gtk_tree_view_column_pack_end(int /*long*/ tree_column,
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native void _gtk_tree_view_column_set_alignment(int /*long*/ tree_column, float xalign);
-public static final void gtk_tree_view_column_set_alignment(int /*long*/ tree_column, float xalign) {
+public static final native void _gtk_tree_view_column_set_alignment(long /*int*/ tree_column, float xalign);
+public static final void gtk_tree_view_column_set_alignment(long /*int*/ tree_column, float xalign) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_alignment(tree_column, xalign);
@@ -11245,8 +11245,8 @@ public static final void gtk_tree_view_column_set_alignment(int /*long*/ tree_co
  * @param func_data cast=(gpointer)
  * @param destroy cast=(GtkDestroyNotify)
  */
-public static final native void _gtk_tree_view_column_set_cell_data_func(int /*long*/ tree_column, int /*long*/ cell_renderer, int /*long*/ func, int /*long*/ func_data, int /*long*/ destroy);
-public static final void gtk_tree_view_column_set_cell_data_func(int /*long*/ tree_column, int /*long*/ cell_renderer, int /*long*/ func, int /*long*/ func_data, int /*long*/ destroy) {
+public static final native void _gtk_tree_view_column_set_cell_data_func(long /*int*/ tree_column, long /*int*/ cell_renderer, long /*int*/ func, long /*int*/ func_data, long /*int*/ destroy);
+public static final void gtk_tree_view_column_set_cell_data_func(long /*int*/ tree_column, long /*int*/ cell_renderer, long /*int*/ func, long /*int*/ func_data, long /*int*/ destroy) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_cell_data_func(tree_column, cell_renderer, func, func_data, destroy);
@@ -11258,8 +11258,8 @@ public static final void gtk_tree_view_column_set_cell_data_func(int /*long*/ tr
  * @param column cast=(GtkTreeViewColumn *)
  * @param clickable cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_set_clickable(int /*long*/ column, boolean clickable);
-public static final void gtk_tree_view_column_set_clickable(int /*long*/ column, boolean clickable) {
+public static final native void _gtk_tree_view_column_set_clickable(long /*int*/ column, boolean clickable);
+public static final void gtk_tree_view_column_set_clickable(long /*int*/ column, boolean clickable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_clickable(column, clickable);
@@ -11271,8 +11271,8 @@ public static final void gtk_tree_view_column_set_clickable(int /*long*/ column,
  * @param column cast=(GtkTreeViewColumn *)
  * @param fixed_width cast=(gint)
  */
-public static final native void _gtk_tree_view_column_set_fixed_width(int /*long*/ column, int fixed_width);
-public static final void gtk_tree_view_column_set_fixed_width(int /*long*/ column, int fixed_width) {
+public static final native void _gtk_tree_view_column_set_fixed_width(long /*int*/ column, int fixed_width);
+public static final void gtk_tree_view_column_set_fixed_width(long /*int*/ column, int fixed_width) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_fixed_width(column, fixed_width);
@@ -11284,8 +11284,8 @@ public static final void gtk_tree_view_column_set_fixed_width(int /*long*/ colum
  * @param tree_column cast=(GtkTreeViewColumn *)
  * @param min_width cast=(gint)
  */
-public static final native void _gtk_tree_view_column_set_min_width(int /*long*/ tree_column, int min_width);
-public static final void gtk_tree_view_column_set_min_width(int /*long*/ tree_column, int min_width) {
+public static final native void _gtk_tree_view_column_set_min_width(long /*int*/ tree_column, int min_width);
+public static final void gtk_tree_view_column_set_min_width(long /*int*/ tree_column, int min_width) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_min_width(tree_column, min_width);
@@ -11297,8 +11297,8 @@ public static final void gtk_tree_view_column_set_min_width(int /*long*/ tree_co
  * @param column cast=(GtkTreeViewColumn *)
  * @param reorderable cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_set_reorderable(int /*long*/ column, boolean reorderable);
-public static final void gtk_tree_view_column_set_reorderable(int /*long*/ column, boolean reorderable) {
+public static final native void _gtk_tree_view_column_set_reorderable(long /*int*/ column, boolean reorderable);
+public static final void gtk_tree_view_column_set_reorderable(long /*int*/ column, boolean reorderable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_reorderable(column, reorderable);
@@ -11310,8 +11310,8 @@ public static final void gtk_tree_view_column_set_reorderable(int /*long*/ colum
  * @param column cast=(GtkTreeViewColumn *)
  * @param resizable cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_set_resizable(int /*long*/ column, boolean resizable);
-public static final void gtk_tree_view_column_set_resizable(int /*long*/ column, boolean resizable) {
+public static final native void _gtk_tree_view_column_set_resizable(long /*int*/ column, boolean resizable);
+public static final void gtk_tree_view_column_set_resizable(long /*int*/ column, boolean resizable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_resizable(column, resizable);
@@ -11323,8 +11323,8 @@ public static final void gtk_tree_view_column_set_resizable(int /*long*/ column,
  * @param column cast=(GtkTreeViewColumn *)
  * @param type cast=(GtkTreeViewColumnSizing)
  */
-public static final native void _gtk_tree_view_column_set_sizing(int /*long*/ column, int type);
-public static final void gtk_tree_view_column_set_sizing(int /*long*/ column, int type) {
+public static final native void _gtk_tree_view_column_set_sizing(long /*int*/ column, int type);
+public static final void gtk_tree_view_column_set_sizing(long /*int*/ column, int type) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sizing(column, type);
@@ -11336,8 +11336,8 @@ public static final void gtk_tree_view_column_set_sizing(int /*long*/ column, in
  * @param tree_column cast=(GtkTreeViewColumn *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_tree_view_column_set_sort_indicator(int /*long*/ tree_column, boolean setting);
-public static final void gtk_tree_view_column_set_sort_indicator(int /*long*/ tree_column, boolean setting) {
+public static final native void _gtk_tree_view_column_set_sort_indicator(long /*int*/ tree_column, boolean setting);
+public static final void gtk_tree_view_column_set_sort_indicator(long /*int*/ tree_column, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sort_indicator(tree_column, setting);
@@ -11349,8 +11349,8 @@ public static final void gtk_tree_view_column_set_sort_indicator(int /*long*/ tr
  * @param tree_column cast=(GtkTreeViewColumn *)
  * @param order cast=(GtkSortType)
  */
-public static final native void _gtk_tree_view_column_set_sort_order(int /*long*/ tree_column, int order);
-public static final void gtk_tree_view_column_set_sort_order(int /*long*/ tree_column, int order) {
+public static final native void _gtk_tree_view_column_set_sort_order(long /*int*/ tree_column, int order);
+public static final void gtk_tree_view_column_set_sort_order(long /*int*/ tree_column, int order) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sort_order(tree_column, order);
@@ -11362,8 +11362,8 @@ public static final void gtk_tree_view_column_set_sort_order(int /*long*/ tree_c
  * @param tree_column cast=(GtkTreeViewColumn *)
  * @param title cast=(const gchar *)
  */
-public static final native void _gtk_tree_view_column_set_title(int /*long*/ tree_column, byte[] title);
-public static final void gtk_tree_view_column_set_title(int /*long*/ tree_column, byte[] title) {
+public static final native void _gtk_tree_view_column_set_title(long /*int*/ tree_column, byte[] title);
+public static final void gtk_tree_view_column_set_title(long /*int*/ tree_column, byte[] title) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_title(tree_column, title);
@@ -11372,8 +11372,8 @@ public static final void gtk_tree_view_column_set_title(int /*long*/ tree_column
 	}
 }
 /** @param tree_column cast=(GtkTreeViewColumn *) */
-public static final native void _gtk_tree_view_column_set_visible (int /*long*/ tree_column, boolean visible);
-public static final void gtk_tree_view_column_set_visible (int /*long*/ tree_column, boolean visible) {
+public static final native void _gtk_tree_view_column_set_visible (long /*int*/ tree_column, boolean visible);
+public static final void gtk_tree_view_column_set_visible (long /*int*/ tree_column, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_visible(tree_column, visible);
@@ -11385,8 +11385,8 @@ public static final void gtk_tree_view_column_set_visible (int /*long*/ tree_col
  * @param tree_column cast=(GtkTreeViewColumn *)
  * @param widget cast=(GtkWidget *)
  */
-public static final native void _gtk_tree_view_column_set_widget(int /*long*/ tree_column, int /*long*/ widget);
-public static final void gtk_tree_view_column_set_widget(int /*long*/ tree_column, int /*long*/ widget) {
+public static final native void _gtk_tree_view_column_set_widget(long /*int*/ tree_column, long /*int*/ widget);
+public static final void gtk_tree_view_column_set_widget(long /*int*/ tree_column, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_widget(tree_column, widget);
@@ -11398,8 +11398,8 @@ public static final void gtk_tree_view_column_set_widget(int /*long*/ tree_colum
  * @param view cast=(GtkTreeView *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native void _gtk_tree_view_set_drag_dest_row(int /*long*/ view, int /*long*/ path, int pos);
-public static final void gtk_tree_view_set_drag_dest_row(int /*long*/ view, int /*long*/ path, int pos) {
+public static final native void _gtk_tree_view_set_drag_dest_row(long /*int*/ view, long /*int*/ path, int pos);
+public static final void gtk_tree_view_set_drag_dest_row(long /*int*/ view, long /*int*/ path, int pos) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_drag_dest_row(view, path, pos);
@@ -11408,8 +11408,8 @@ public static final void gtk_tree_view_set_drag_dest_row(int /*long*/ view, int
 	}
 }
 /** @param view cast=(GtkTreeView *) */
-public static final native void _gtk_tree_view_set_enable_search (int /*long*/ view, boolean enable_search);
-public static final void gtk_tree_view_set_enable_search (int /*long*/ view, boolean enable_search) {
+public static final native void _gtk_tree_view_set_enable_search (long /*int*/ view, boolean enable_search);
+public static final void gtk_tree_view_set_enable_search (long /*int*/ view, boolean enable_search) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_enable_search(view, enable_search);
@@ -11422,8 +11422,8 @@ public static final void gtk_tree_view_set_enable_search (int /*long*/ view, boo
  * @param path cast=(GtkTreePath *)
  * @param open_all cast=(gboolean)
  */
-public static final native boolean _gtk_tree_view_expand_row(int /*long*/ view, int /*long*/ path, boolean open_all);
-public static final boolean gtk_tree_view_expand_row(int /*long*/ view, int /*long*/ path, boolean open_all) {
+public static final native boolean _gtk_tree_view_expand_row(long /*int*/ view, long /*int*/ path, boolean open_all);
+public static final boolean gtk_tree_view_expand_row(long /*int*/ view, long /*int*/ path, boolean open_all) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_expand_row(view, path, open_all);
@@ -11437,8 +11437,8 @@ public static final boolean gtk_tree_view_expand_row(int /*long*/ view, int /*lo
  * @param column cast=(GtkTreeViewColumn *)
  * @param rect cast=(GdkRectangle *)
  */
-public static final native void _gtk_tree_view_get_background_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect);
-public static final void gtk_tree_view_get_background_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect) {
+public static final native void _gtk_tree_view_get_background_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect);
+public static final void gtk_tree_view_get_background_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_background_area(tree_view, path, column, rect);
@@ -11447,8 +11447,8 @@ public static final void gtk_tree_view_get_background_area(int /*long*/ tree_vie
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native int /*long*/ _gtk_tree_view_get_bin_window(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_bin_window(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_bin_window(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_bin_window(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_bin_window(tree_view);
@@ -11462,8 +11462,8 @@ public static final int /*long*/ gtk_tree_view_get_bin_window(int /*long*/ tree_
  * @param column cast=(GtkTreeViewColumn *)
  * @param rect cast=(GdkRectangle *),flags=no_in
  */
-public static final native void _gtk_tree_view_get_cell_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect);
-public static final void gtk_tree_view_get_cell_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect) {
+public static final native void _gtk_tree_view_get_cell_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect);
+public static final void gtk_tree_view_get_cell_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_cell_area(tree_view, path, column, rect);
@@ -11472,8 +11472,8 @@ public static final void gtk_tree_view_get_cell_area(int /*long*/ tree_view, int
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native int /*long*/_gtk_tree_view_get_expander_column(int /*long*/ tree_view);
-public static final int /*long*/gtk_tree_view_get_expander_column(int /*long*/ tree_view) {
+public static final native long /*int*/_gtk_tree_view_get_expander_column(long /*int*/ tree_view);
+public static final long /*int*/gtk_tree_view_get_expander_column(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_expander_column(tree_view);
@@ -11485,8 +11485,8 @@ public static final int /*long*/gtk_tree_view_get_expander_column(int /*long*/ t
  * @param tree_view cast=(GtkTreeView *)
  * @param n cast=(gint)
  */
-public static final native int /*long*/ _gtk_tree_view_get_column(int /*long*/ tree_view, int n);
-public static final int /*long*/ gtk_tree_view_get_column(int /*long*/ tree_view, int n) {
+public static final native long /*int*/ _gtk_tree_view_get_column(long /*int*/ tree_view, int n);
+public static final long /*int*/ gtk_tree_view_get_column(long /*int*/ tree_view, int n) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_column(tree_view, n);
@@ -11495,8 +11495,8 @@ public static final int /*long*/ gtk_tree_view_get_column(int /*long*/ tree_view
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native int /*long*/ _gtk_tree_view_get_columns(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_columns(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_columns(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_columns(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_columns(tree_view);
@@ -11509,8 +11509,8 @@ public static final int /*long*/ gtk_tree_view_get_columns(int /*long*/ tree_vie
  * @param path cast=(GtkTreePath **)
  * @param focus_column cast=(GtkTreeViewColumn **)
  */
-public static final native void _gtk_tree_view_get_cursor(int /*long*/ tree_view, int /*long*/[] path, int /*long*/[] focus_column);
-public static final void gtk_tree_view_get_cursor(int /*long*/ tree_view, int /*long*/[] path, int /*long*/[] focus_column) {
+public static final native void _gtk_tree_view_get_cursor(long /*int*/ tree_view, long /*int*/[] path, long /*int*/[] focus_column);
+public static final void gtk_tree_view_get_cursor(long /*int*/ tree_view, long /*int*/[] path, long /*int*/[] focus_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_cursor(tree_view, path, focus_column);
@@ -11519,8 +11519,8 @@ public static final void gtk_tree_view_get_cursor(int /*long*/ tree_view, int /*
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native boolean _gtk_tree_view_get_headers_visible(int /*long*/ tree_view);
-public static final boolean gtk_tree_view_get_headers_visible(int /*long*/ tree_view) {
+public static final native boolean _gtk_tree_view_get_headers_visible(long /*int*/ tree_view);
+public static final boolean gtk_tree_view_get_headers_visible(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_headers_visible(tree_view);
@@ -11537,8 +11537,8 @@ public static final boolean gtk_tree_view_get_headers_visible(int /*long*/ tree_
  * @param cell_x cast=(gint *)
  * @param cell_y cast=(gint *)
  */
-public static final native boolean _gtk_tree_view_get_path_at_pos(int /*long*/ tree_view, int x, int y, int /*long*/[] path, int /*long*/[] column, int[] cell_x, int[] cell_y);
-public static final boolean gtk_tree_view_get_path_at_pos(int /*long*/ tree_view, int x, int y, int /*long*/[] path, int /*long*/[] column, int[] cell_x, int[] cell_y) {
+public static final native boolean _gtk_tree_view_get_path_at_pos(long /*int*/ tree_view, int x, int y, long /*int*/[] path, long /*int*/[] column, int[] cell_x, int[] cell_y);
+public static final boolean gtk_tree_view_get_path_at_pos(long /*int*/ tree_view, int x, int y, long /*int*/[] path, long /*int*/[] column, int[] cell_x, int[] cell_y) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_path_at_pos(tree_view, x, y, path, column, cell_x, cell_y);
@@ -11547,8 +11547,8 @@ public static final boolean gtk_tree_view_get_path_at_pos(int /*long*/ tree_view
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native boolean _gtk_tree_view_get_rules_hint(int /*long*/ tree_view);
-public static final boolean gtk_tree_view_get_rules_hint(int /*long*/ tree_view) {
+public static final native boolean _gtk_tree_view_get_rules_hint(long /*int*/ tree_view);
+public static final boolean gtk_tree_view_get_rules_hint(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_rules_hint(tree_view);
@@ -11557,8 +11557,8 @@ public static final boolean gtk_tree_view_get_rules_hint(int /*long*/ tree_view)
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native int /*long*/ _gtk_tree_view_get_selection(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_selection(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_selection(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_selection(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_selection(tree_view);
@@ -11570,8 +11570,8 @@ public static final int /*long*/ gtk_tree_view_get_selection(int /*long*/ tree_v
  * @param tree_view cast=(GtkTreeView *)
  * @param visible_rect flags=no_in
  */
-public static final native void _gtk_tree_view_get_visible_rect(int /*long*/ tree_view, GdkRectangle visible_rect);
-public static final void gtk_tree_view_get_visible_rect(int /*long*/ tree_view, GdkRectangle visible_rect) {
+public static final native void _gtk_tree_view_get_visible_rect(long /*int*/ tree_view, GdkRectangle visible_rect);
+public static final void gtk_tree_view_get_visible_rect(long /*int*/ tree_view, GdkRectangle visible_rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_visible_rect(tree_view, visible_rect);
@@ -11584,8 +11584,8 @@ public static final void gtk_tree_view_get_visible_rect(int /*long*/ tree_view,
  * @param column cast=(GtkTreeViewColumn *)
  * @param position cast=(gint)
  */
-public static final native int _gtk_tree_view_insert_column(int /*long*/ tree_view, int /*long*/ column, int position);
-public static final int gtk_tree_view_insert_column(int /*long*/ tree_view, int /*long*/ column, int position) {
+public static final native int _gtk_tree_view_insert_column(long /*int*/ tree_view, long /*int*/ column, int position);
+public static final int gtk_tree_view_insert_column(long /*int*/ tree_view, long /*int*/ column, int position) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_insert_column(tree_view, column, position);
@@ -11598,8 +11598,8 @@ public static final int gtk_tree_view_insert_column(int /*long*/ tree_view, int
  * @param column cast=(GtkTreeViewColumn *)
  * @param base_column cast=(GtkTreeViewColumn *)
  */
-public static final native void _gtk_tree_view_move_column_after(int /*long*/ tree_view, int /*long*/ column, int /*long*/ base_column);
-public static final void gtk_tree_view_move_column_after(int /*long*/ tree_view, int /*long*/ column, int /*long*/base_column) {
+public static final native void _gtk_tree_view_move_column_after(long /*int*/ tree_view, long /*int*/ column, long /*int*/ base_column);
+public static final void gtk_tree_view_move_column_after(long /*int*/ tree_view, long /*int*/ column, long /*int*/base_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_move_column_after(tree_view, column, base_column);
@@ -11608,8 +11608,8 @@ public static final void gtk_tree_view_move_column_after(int /*long*/ tree_view,
 	}
 }
 /** @param model cast=(GtkTreeModel *) */
-public static final native int /*long*/ _gtk_tree_view_new_with_model(int /*long*/ model);
-public static final int /*long*/ gtk_tree_view_new_with_model(int /*long*/ model) {
+public static final native long /*int*/ _gtk_tree_view_new_with_model(long /*int*/ model);
+public static final long /*int*/ gtk_tree_view_new_with_model(long /*int*/ model) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_new_with_model(model);
@@ -11621,8 +11621,8 @@ public static final int /*long*/ gtk_tree_view_new_with_model(int /*long*/ model
  * @param tree_view cast=(GtkTreeView *)
  * @param column cast=(GtkTreeViewColumn *)
  */
-public static final native void _gtk_tree_view_remove_column(int /*long*/ tree_view, int /*long*/ column);
-public static final void gtk_tree_view_remove_column(int /*long*/ tree_view, int /*long*/ column) {
+public static final native void _gtk_tree_view_remove_column(long /*int*/ tree_view, long /*int*/ column);
+public static final void gtk_tree_view_remove_column(long /*int*/ tree_view, long /*int*/ column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_remove_column(tree_view, column);
@@ -11634,8 +11634,8 @@ public static final void gtk_tree_view_remove_column(int /*long*/ tree_view, int
  * @param view cast=(GtkTreeView *)
  * @param path cast=(GtkTreePath *)
  */
-public static final native boolean _gtk_tree_view_row_expanded(int /*long*/ view, int /*long*/ path);
-public static final boolean gtk_tree_view_row_expanded(int /*long*/ view, int /*long*/ path) {
+public static final native boolean _gtk_tree_view_row_expanded(long /*int*/ view, long /*int*/ path);
+public static final boolean gtk_tree_view_row_expanded(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_row_expanded(view, path);
@@ -11651,8 +11651,8 @@ public static final boolean gtk_tree_view_row_expanded(int /*long*/ view, int /*
  * @param row_aligh cast=(gfloat)
  * @param column_align cast=(gfloat)
  */
-public static final native void _gtk_tree_view_scroll_to_cell(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, boolean use_align, float row_aligh, float column_align);
-public static final void gtk_tree_view_scroll_to_cell(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, boolean use_align, float row_aligh, float column_align) {
+public static final native void _gtk_tree_view_scroll_to_cell(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, boolean use_align, float row_aligh, float column_align);
+public static final void gtk_tree_view_scroll_to_cell(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, boolean use_align, float row_aligh, float column_align) {
 	lock.lock();
 	try {
 		_gtk_tree_view_scroll_to_cell(tree_view, path, column, use_align, row_aligh, column_align);
@@ -11665,8 +11665,8 @@ public static final void gtk_tree_view_scroll_to_cell(int /*long*/ tree_view, in
  * @param tree_x cast=(gint)
  * @param tree_y cast=(gint)
  */
-public static final native void _gtk_tree_view_scroll_to_point (int /*long*/ tree_view, int tree_x, int tree_y);
-public static final void gtk_tree_view_scroll_to_point (int /*long*/ tree_view, int tree_x, int tree_y) {
+public static final native void _gtk_tree_view_scroll_to_point (long /*int*/ tree_view, int tree_x, int tree_y);
+public static final void gtk_tree_view_scroll_to_point (long /*int*/ tree_view, int tree_x, int tree_y) {
 	lock.lock();
 	try {
 		_gtk_tree_view_scroll_to_point(tree_view, tree_x, tree_y);
@@ -11679,8 +11679,8 @@ public static final void gtk_tree_view_scroll_to_point (int /*long*/ tree_view,
  * @param path cast=(GtkTreePath *)
  * @param focus_column cast=(GtkTreeViewColumn *)
  */
-public static final native void _gtk_tree_view_set_cursor(int /*long*/ tree_view, int /*long*/ path, int /*long*/ focus_column, boolean start_editing);
-public static final void gtk_tree_view_set_cursor(int /*long*/ tree_view, int /*long*/ path, int /*long*/ focus_column, boolean start_editing) {
+public static final native void _gtk_tree_view_set_cursor(long /*int*/ tree_view, long /*int*/ path, long /*int*/ focus_column, boolean start_editing);
+public static final void gtk_tree_view_set_cursor(long /*int*/ tree_view, long /*int*/ path, long /*int*/ focus_column, boolean start_editing) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_cursor(tree_view, path, focus_column, start_editing);
@@ -11692,8 +11692,8 @@ public static final void gtk_tree_view_set_cursor(int /*long*/ tree_view, int /*
  * @method flags=dynamic
  * @param tree_view cast=(GtkTreeView*)
  */
-public static final native void _gtk_tree_view_set_grid_lines(int /*long*/ tree_view, int grid_lines);
-public static final void gtk_tree_view_set_grid_lines(int /*long*/ tree_view, int grid_lines) {
+public static final native void _gtk_tree_view_set_grid_lines(long /*int*/ tree_view, int grid_lines);
+public static final void gtk_tree_view_set_grid_lines(long /*int*/ tree_view, int grid_lines) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_grid_lines(tree_view, grid_lines);
@@ -11705,8 +11705,8 @@ public static final void gtk_tree_view_set_grid_lines(int /*long*/ tree_view, in
  * @param tree_view cast=(GtkTreeView *)
  * @param visible cast=(gboolean)
  */
-public static final native void _gtk_tree_view_set_headers_visible(int /*long*/ tree_view, boolean visible);
-public static final void gtk_tree_view_set_headers_visible(int /*long*/ tree_view, boolean visible) {
+public static final native void _gtk_tree_view_set_headers_visible(long /*int*/ tree_view, boolean visible);
+public static final void gtk_tree_view_set_headers_visible(long /*int*/ tree_view, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_headers_visible(tree_view, visible);
@@ -11718,8 +11718,8 @@ public static final void gtk_tree_view_set_headers_visible(int /*long*/ tree_vie
  * @param tree_view cast=(GtkTreeView *)
  * @param model cast=(GtkTreeModel *)
  */
-public static final native void _gtk_tree_view_set_model(int /*long*/ tree_view, int /*long*/ model);
-public static final void gtk_tree_view_set_model(int /*long*/ tree_view, int /*long*/ model) {
+public static final native void _gtk_tree_view_set_model(long /*int*/ tree_view, long /*int*/ model);
+public static final void gtk_tree_view_set_model(long /*int*/ tree_view, long /*int*/ model) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_model(tree_view, model);
@@ -11728,8 +11728,8 @@ public static final void gtk_tree_view_set_model(int /*long*/ tree_view, int /*l
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native void _gtk_tree_view_set_rules_hint(int /*long*/ tree_view, boolean setting);
-public static final void gtk_tree_view_set_rules_hint(int /*long*/ tree_view, boolean setting) {
+public static final native void _gtk_tree_view_set_rules_hint(long /*int*/ tree_view, boolean setting);
+public static final void gtk_tree_view_set_rules_hint(long /*int*/ tree_view, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_rules_hint(tree_view, setting);
@@ -11741,8 +11741,8 @@ public static final void gtk_tree_view_set_rules_hint(int /*long*/ tree_view, bo
  * @param tree_view cast=(GtkTreeView *)
  * @param column cast=(gint)
  */
-public static final native void _gtk_tree_view_set_search_column(int /*long*/ tree_view, int column);
-public static final void gtk_tree_view_set_search_column(int /*long*/ tree_view, int column) {
+public static final native void _gtk_tree_view_set_search_column(long /*int*/ tree_view, int column);
+public static final void gtk_tree_view_set_search_column(long /*int*/ tree_view, int column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_search_column(tree_view, column);
@@ -11757,8 +11757,8 @@ public static final void gtk_tree_view_set_search_column(int /*long*/ tree_view,
  * @param wx cast=(gint *)
  * @param wy cast=(gint *)
  */
-public static final native void _gtk_tree_view_tree_to_widget_coords(int /*long*/ tree_view, int tx, int ty, int[] wx, int[] wy);
-public static final void gtk_tree_view_tree_to_widget_coords(int /*long*/ tree_view, int tx, int ty, int[] wx, int[] wy) {
+public static final native void _gtk_tree_view_tree_to_widget_coords(long /*int*/ tree_view, int tx, int ty, int[] wx, int[] wy);
+public static final void gtk_tree_view_tree_to_widget_coords(long /*int*/ tree_view, int tx, int ty, int[] wx, int[] wy) {
 	lock.lock();
 	try {
 		_gtk_tree_view_tree_to_widget_coords(tree_view, tx, ty, wx, wy);
@@ -11767,8 +11767,8 @@ public static final void gtk_tree_view_tree_to_widget_coords(int /*long*/ tree_v
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native void _gtk_tree_view_unset_rows_drag_dest(int /*long*/ tree_view);
-public static final void gtk_tree_view_unset_rows_drag_dest(int /*long*/ tree_view) {
+public static final native void _gtk_tree_view_unset_rows_drag_dest(long /*int*/ tree_view);
+public static final void gtk_tree_view_unset_rows_drag_dest(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		_gtk_tree_view_unset_rows_drag_dest(tree_view);
@@ -11777,8 +11777,8 @@ public static final void gtk_tree_view_unset_rows_drag_dest(int /*long*/ tree_vi
 	}
 }
 /** @param tree_view cast=(GtkTreeView *) */
-public static final native void _gtk_tree_view_widget_to_tree_coords(int /*long*/ tree_view, int wx, int wy, int[] tx, int[] ty);
-public static final void gtk_tree_view_widget_to_tree_coords(int /*long*/ tree_view, int wx, int wy, int[] tx, int[] ty) {
+public static final native void _gtk_tree_view_widget_to_tree_coords(long /*int*/ tree_view, int wx, int wy, int[] tx, int[] ty);
+public static final void gtk_tree_view_widget_to_tree_coords(long /*int*/ tree_view, int wx, int wy, int[] tx, int[] ty) {
 	lock.lock();
 	try {
 		_gtk_tree_view_widget_to_tree_coords(tree_view, wx, wy, tx, ty);
@@ -11790,8 +11790,8 @@ public static final void gtk_tree_view_widget_to_tree_coords(int /*long*/ tree_v
  * @param homogeneous cast=(gboolean)
  * @param spacing cast=(gint)
  */
-public static final native int /*long*/ _gtk_vbox_new(boolean homogeneous, int spacing);
-public static final int /*long*/ gtk_vbox_new(boolean homogeneous, int spacing) {
+public static final native long /*int*/ _gtk_vbox_new(boolean homogeneous, int spacing);
+public static final long /*int*/ gtk_vbox_new(boolean homogeneous, int spacing) {
 	lock.lock();
 	try {
 		return _gtk_vbox_new(homogeneous, spacing);
@@ -11800,8 +11800,8 @@ public static final int /*long*/ gtk_vbox_new(boolean homogeneous, int spacing)
 	}
 }
 /** @param viewport cast=(GtkViewport *) */
-public static final native int _gtk_viewport_get_shadow_type(int /*long*/ viewport);
-public static final int gtk_viewport_get_shadow_type(int /*long*/ viewport) {
+public static final native int _gtk_viewport_get_shadow_type(long /*int*/ viewport);
+public static final int gtk_viewport_get_shadow_type(long /*int*/ viewport) {
 	lock.lock();
 	try {
 		return _gtk_viewport_get_shadow_type(viewport);
@@ -11813,8 +11813,8 @@ public static final int gtk_viewport_get_shadow_type(int /*long*/ viewport) {
  * @param viewport cast=(GtkViewport *)
  * @param type cast=(GtkShadowType)
  */
-public static final native void _gtk_viewport_set_shadow_type(int /*long*/ viewport, int type);
-public static final void gtk_viewport_set_shadow_type(int /*long*/ viewport, int type) {
+public static final native void _gtk_viewport_set_shadow_type(long /*int*/ viewport, int type);
+public static final void gtk_viewport_set_shadow_type(long /*int*/ viewport, int type) {
 	lock.lock();
 	try {
 		_gtk_viewport_set_shadow_type(viewport, type);
@@ -11823,8 +11823,8 @@ public static final void gtk_viewport_set_shadow_type(int /*long*/ viewport, int
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native int /*long*/ _gtk_vscale_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_vscale_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_vscale_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_vscale_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_vscale_new(adjustment);
@@ -11833,8 +11833,8 @@ public static final int /*long*/ gtk_vscale_new(int /*long*/ adjustment) {
 	}
 }
 /** @param adjustment cast=(GtkAdjustment *) */
-public static final native int /*long*/ _gtk_vscrollbar_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_vscrollbar_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_vscrollbar_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_vscrollbar_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_vscrollbar_new(adjustment);
@@ -11842,8 +11842,8 @@ public static final int /*long*/ gtk_vscrollbar_new(int /*long*/ adjustment) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_vseparator_new();
-public static final int /*long*/ gtk_vseparator_new() {
+public static final native long /*int*/ _gtk_vseparator_new();
+public static final long /*int*/ gtk_vseparator_new() {
 	lock.lock();
 	try {
 		return _gtk_vseparator_new();
@@ -11858,8 +11858,8 @@ public static final int /*long*/ gtk_vseparator_new() {
  * @param accel_key cast=(guint)
  * @param accel_mods cast=(GdkModifierType)
  */
-public static final native void _gtk_widget_add_accelerator(int /*long*/ widget, byte[] accel_signal, int /*long*/ accel_group, int accel_key, int accel_mods, int accel_flags);
-public static final void gtk_widget_add_accelerator(int /*long*/ widget, byte[] accel_signal, int /*long*/ accel_group, int accel_key, int accel_mods, int accel_flags) {
+public static final native void _gtk_widget_add_accelerator(long /*int*/ widget, byte[] accel_signal, long /*int*/ accel_group, int accel_key, int accel_mods, int accel_flags);
+public static final void gtk_widget_add_accelerator(long /*int*/ widget, byte[] accel_signal, long /*int*/ accel_group, int accel_key, int accel_mods, int accel_flags) {
 	lock.lock();
 	try {
 		_gtk_widget_add_accelerator(widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags);
@@ -11871,8 +11871,8 @@ public static final void gtk_widget_add_accelerator(int /*long*/ widget, byte[]
  * @param widget cast=(GtkWidget *)
  * @param events cast=(gint)
  */
-public static final native void _gtk_widget_add_events(int /*long*/ widget, int events);
-public static final void gtk_widget_add_events(int /*long*/ widget, int events) {
+public static final native void _gtk_widget_add_events(long /*int*/ widget, int events);
+public static final void gtk_widget_add_events(long /*int*/ widget, int events) {
 	lock.lock();
 	try {
 		_gtk_widget_add_events(widget, events);
@@ -11881,8 +11881,8 @@ public static final void gtk_widget_add_events(int /*long*/ widget, int events)
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native boolean _gtk_widget_child_focus(int /*long*/ widget, int direction);
-public static final boolean gtk_widget_child_focus(int /*long*/ widget, int direction) {
+public static final native boolean _gtk_widget_child_focus(long /*int*/ widget, int direction);
+public static final boolean gtk_widget_child_focus(long /*int*/ widget, int direction) {
 	lock.lock();
 	try {
 		return _gtk_widget_child_focus(widget, direction);
@@ -11894,8 +11894,8 @@ public static final boolean gtk_widget_child_focus(int /*long*/ widget, int dire
  * @param widget cast=(GtkWidget *)
  * @param text cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_widget_create_pango_layout(int /*long*/ widget, byte[] text);
-public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ widget, byte[] text) {
+public static final native long /*int*/ _gtk_widget_create_pango_layout(long /*int*/ widget, byte[] text);
+public static final long /*int*/ gtk_widget_create_pango_layout(long /*int*/ widget, byte[] text) {
 	lock.lock();
 	try {
 		return _gtk_widget_create_pango_layout(widget, text);
@@ -11907,8 +11907,8 @@ public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ wid
  * @param widget cast=(GtkWidget *)
  * @param text cast=(const gchar *)
  */
-public static final native int /*long*/ _gtk_widget_create_pango_layout(int /*long*/ widget, int /*long*/ text);
-public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ widget, int /*long*/ text) {
+public static final native long /*int*/ _gtk_widget_create_pango_layout(long /*int*/ widget, long /*int*/ text);
+public static final long /*int*/ gtk_widget_create_pango_layout(long /*int*/ widget, long /*int*/ text) {
 	lock.lock();
 	try {
 		return _gtk_widget_create_pango_layout(widget, text);
@@ -11917,8 +11917,8 @@ public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ wid
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_destroy(int /*long*/ widget);
-public static final void gtk_widget_destroy(int /*long*/ widget) {
+public static final native void _gtk_widget_destroy(long /*int*/ widget);
+public static final void gtk_widget_destroy(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_destroy(widget);
@@ -11930,8 +11930,8 @@ public static final void gtk_widget_destroy(int /*long*/ widget) {
  * @param widget cast=(GtkWidget *)
  * @param event cast=(GdkEvent *)
  */
-public static final native boolean _gtk_widget_event(int /*long*/ widget, int /*long*/ event);
-public static final boolean gtk_widget_event(int /*long*/ widget, int /*long*/ event) {
+public static final native boolean _gtk_widget_event(long /*int*/ widget, long /*int*/ event);
+public static final boolean gtk_widget_event(long /*int*/ widget, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_widget_event(widget, event);
@@ -11940,8 +11940,8 @@ public static final boolean gtk_widget_event(int /*long*/ widget, int /*long*/ e
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_accessible (int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_accessible (int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_accessible (long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_accessible (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_accessible(widget);
@@ -11950,8 +11950,8 @@ public static final int /*long*/ gtk_widget_get_accessible (int /*long*/ widget)
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native boolean _gtk_widget_get_child_visible (int /*long*/ widget);
-public static final boolean gtk_widget_get_child_visible (int /*long*/ widget) {
+public static final native boolean _gtk_widget_get_child_visible (long /*int*/ widget);
+public static final boolean gtk_widget_get_child_visible (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_child_visible(widget);
@@ -11968,8 +11968,8 @@ public static final int gtk_widget_get_default_direction() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_default_style();
-public static final int /*long*/ gtk_widget_get_default_style() {
+public static final native long /*int*/ _gtk_widget_get_default_style();
+public static final long /*int*/ gtk_widget_get_default_style() {
 	lock.lock();
 	try {
 		return _gtk_widget_get_default_style();
@@ -11978,8 +11978,8 @@ public static final int /*long*/ gtk_widget_get_default_style() {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int _gtk_widget_get_direction(int /*long*/ widget);
-public static final int gtk_widget_get_direction(int /*long*/ widget) {
+public static final native int _gtk_widget_get_direction(long /*int*/ widget);
+public static final int gtk_widget_get_direction(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_direction(widget);
@@ -11988,8 +11988,8 @@ public static final int gtk_widget_get_direction(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int _gtk_widget_get_events(int /*long*/ widget);
-public static final int gtk_widget_get_events(int /*long*/ widget) {
+public static final native int _gtk_widget_get_events(long /*int*/ widget);
+public static final int gtk_widget_get_events(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_events(widget);
@@ -11998,8 +11998,8 @@ public static final int gtk_widget_get_events(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_modifier_style(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_modifier_style(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_modifier_style(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_modifier_style(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_modifier_style(widget);
@@ -12008,8 +12008,8 @@ public static final int /*long*/ gtk_widget_get_modifier_style(int /*long*/ widg
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_pango_context(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_pango_context(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_pango_context(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_pango_context(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_pango_context(widget);
@@ -12018,8 +12018,8 @@ public static final int /*long*/ gtk_widget_get_pango_context(int /*long*/ widge
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_parent(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_parent(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_parent(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_parent(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_parent(widget);
@@ -12028,8 +12028,8 @@ public static final int /*long*/ gtk_widget_get_parent(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_style(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_style(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_style(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_style(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_style(widget);
@@ -12042,8 +12042,8 @@ public static final int /*long*/ gtk_widget_get_style(int /*long*/ widget) {
  * @param width cast=(gint *)
  * @param height cast=(gint *)
  */
-public static final native void _gtk_widget_get_size_request(int /*long*/ widget, int [] width, int [] height);
-public static final void gtk_widget_get_size_request(int /*long*/ widget, int [] width, int [] height) {
+public static final native void _gtk_widget_get_size_request(long /*int*/ widget, int [] width, int [] height);
+public static final void gtk_widget_get_size_request(long /*int*/ widget, int [] width, int [] height) {
 	lock.lock();
 	try {
 		_gtk_widget_get_size_request(widget, width, height);
@@ -12052,8 +12052,8 @@ public static final void gtk_widget_get_size_request(int /*long*/ widget, int []
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native int /*long*/ _gtk_widget_get_toplevel (int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_toplevel (int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_toplevel (long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_toplevel (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_toplevel(widget);
@@ -12062,8 +12062,8 @@ public static final int /*long*/ gtk_widget_get_toplevel (int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_grab_focus(int /*long*/ widget);
-public static final void gtk_widget_grab_focus(int /*long*/ widget) {
+public static final native void _gtk_widget_grab_focus(long /*int*/ widget);
+public static final void gtk_widget_grab_focus(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_grab_focus(widget);
@@ -12072,8 +12072,8 @@ public static final void gtk_widget_grab_focus(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_hide(int /*long*/ widget);
-public static final void gtk_widget_hide(int /*long*/ widget) {
+public static final native void _gtk_widget_hide(long /*int*/ widget);
+public static final void gtk_widget_hide(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_hide(widget);
@@ -12085,8 +12085,8 @@ public static final void gtk_widget_hide(int /*long*/ widget) {
  * @method flags=dynamic
  * @param widget cast=(GtkWidget *)
  */
-public static final native boolean _gtk_widget_is_composited(int /*long*/ widget);
-public static final boolean gtk_widget_is_composited(int /*long*/ widget) {
+public static final native boolean _gtk_widget_is_composited(long /*int*/ widget);
+public static final boolean gtk_widget_is_composited(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_is_composited(widget);
@@ -12095,8 +12095,8 @@ public static final boolean gtk_widget_is_composited(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native boolean _gtk_widget_is_focus(int /*long*/ widget);
-public static final boolean gtk_widget_is_focus(int /*long*/ widget) {
+public static final native boolean _gtk_widget_is_focus(long /*int*/ widget);
+public static final boolean gtk_widget_is_focus(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_is_focus(widget);
@@ -12105,8 +12105,8 @@ public static final boolean gtk_widget_is_focus(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_map(int /*long*/ widget);
-public static final void gtk_widget_map(int /*long*/ widget) {
+public static final native void _gtk_widget_map(long /*int*/ widget);
+public static final void gtk_widget_map(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_map(widget);
@@ -12118,8 +12118,8 @@ public static final void gtk_widget_map(int /*long*/ widget) {
  * @param widget cast=(GtkWidget *)
  * @param group_cycling cast=(gboolean)
  */
-public static final native boolean _gtk_widget_mnemonic_activate(int /*long*/ widget, boolean group_cycling);
-public static final boolean gtk_widget_mnemonic_activate(int /*long*/ widget, boolean group_cycling) {
+public static final native boolean _gtk_widget_mnemonic_activate(long /*int*/ widget, boolean group_cycling);
+public static final boolean gtk_widget_mnemonic_activate(long /*int*/ widget, boolean group_cycling) {
 	lock.lock();
 	try {
 		return _gtk_widget_mnemonic_activate(widget, group_cycling);
@@ -12132,8 +12132,8 @@ public static final boolean gtk_widget_mnemonic_activate(int /*long*/ widget, bo
  * @param state cast=(GtkStateType)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gtk_widget_modify_base(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_base(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_base(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_base(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_base(widget, state, color);
@@ -12146,8 +12146,8 @@ public static final void gtk_widget_modify_base(int /*long*/ widget, int state,
  * @param state cast=(GtkStateType)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gtk_widget_modify_bg(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_bg(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_bg(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_bg(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_bg(widget, state, color);
@@ -12160,8 +12160,8 @@ public static final void gtk_widget_modify_bg(int /*long*/ widget, int state, Gd
  * @param state cast=(GtkStateType)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gtk_widget_modify_fg(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_fg(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_fg(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_fg(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_fg(widget, state, color);
@@ -12173,8 +12173,8 @@ public static final void gtk_widget_modify_fg(int /*long*/ widget, int state, Gd
  * @param widget cast=(GtkWidget *)
  * @param pango_font_descr cast=(PangoFontDescription *)
  */
-public static final native void _gtk_widget_modify_font(int /*long*/ widget, int /*long*/ pango_font_descr);
-public static final void gtk_widget_modify_font(int /*long*/ widget, int /*long*/ pango_font_descr) {
+public static final native void _gtk_widget_modify_font(long /*int*/ widget, long /*int*/ pango_font_descr);
+public static final void gtk_widget_modify_font(long /*int*/ widget, long /*int*/ pango_font_descr) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_font(widget, pango_font_descr);
@@ -12186,8 +12186,8 @@ public static final void gtk_widget_modify_font(int /*long*/ widget, int /*long*
  * @param widget cast=(GtkWidget *)
  * @param style cast=(GtkRcStyle *)
  */
-public static final native void _gtk_widget_modify_style(int /*long*/ widget, int /*long*/ style);
-public static final void gtk_widget_modify_style(int /*long*/ widget, int /*long*/ style) {
+public static final native void _gtk_widget_modify_style(long /*int*/ widget, long /*int*/ style);
+public static final void gtk_widget_modify_style(long /*int*/ widget, long /*int*/ style) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_style(widget, style);
@@ -12200,8 +12200,8 @@ public static final void gtk_widget_modify_style(int /*long*/ widget, int /*long
  * @param state cast=(GtkStateType)
  * @param color cast=(GdkColor *),flags=no_out
  */
-public static final native void _gtk_widget_modify_text(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_text(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_text(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_text(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_text(widget, state, color);
@@ -12210,8 +12210,8 @@ public static final void gtk_widget_modify_text(int /*long*/ widget, int state,
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_queue_resize(int /*long*/ widget);
-public static final void gtk_widget_queue_resize(int /*long*/ widget) {
+public static final native void _gtk_widget_queue_resize(long /*int*/ widget);
+public static final void gtk_widget_queue_resize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_queue_resize(widget);
@@ -12220,8 +12220,8 @@ public static final void gtk_widget_queue_resize(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_realize(int /*long*/ widget);
-public static final void gtk_widget_realize(int /*long*/ widget) {
+public static final native void _gtk_widget_realize(long /*int*/ widget);
+public static final void gtk_widget_realize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_realize(widget);
@@ -12235,8 +12235,8 @@ public static final void gtk_widget_realize(int /*long*/ widget) {
  * @param accel_key cast=(guint)
  * @param accel_mods cast=(GdkModifierType)
  */
-public static final native void _gtk_widget_remove_accelerator(int /*long*/ widget, int /*long*/ accel_group, int accel_key, int accel_mods);
-public static final void gtk_widget_remove_accelerator(int /*long*/ widget, int /*long*/ accel_group, int accel_key, int accel_mods) {
+public static final native void _gtk_widget_remove_accelerator(long /*int*/ widget, long /*int*/ accel_group, int accel_key, int accel_mods);
+public static final void gtk_widget_remove_accelerator(long /*int*/ widget, long /*int*/ accel_group, int accel_key, int accel_mods) {
 	lock.lock();
 	try {
 		_gtk_widget_remove_accelerator(widget, accel_group, accel_key, accel_mods);
@@ -12248,8 +12248,8 @@ public static final void gtk_widget_remove_accelerator(int /*long*/ widget, int
  * @param widget cast=(GtkWidget *)
  * @param new_parent cast=(GtkWidget *)
  */
-public static final native void _gtk_widget_reparent(int /*long*/ widget, int /*long*/ new_parent);
-public static final void gtk_widget_reparent(int /*long*/ widget, int /*long*/ new_parent) {
+public static final native void _gtk_widget_reparent(long /*int*/ widget, long /*int*/ new_parent);
+public static final void gtk_widget_reparent(long /*int*/ widget, long /*int*/ new_parent) {
 	lock.lock();
 	try {
 		_gtk_widget_reparent(widget, new_parent);
@@ -12261,8 +12261,8 @@ public static final void gtk_widget_reparent(int /*long*/ widget, int /*long*/ n
  * @param widget cast=(GtkWidget *)
  * @param event cast=(GdkEvent *)
  */
-public static final native int _gtk_widget_send_expose(int /*long*/ widget, int /*long*/ event);
-public static final int gtk_widget_send_expose(int /*long*/ widget, int /*long*/ event) {
+public static final native int _gtk_widget_send_expose(long /*int*/ widget, long /*int*/ event);
+public static final int gtk_widget_send_expose(long /*int*/ widget, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_widget_send_expose(widget, event);
@@ -12271,8 +12271,8 @@ public static final int gtk_widget_send_expose(int /*long*/ widget, int /*long*/
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_set_app_paintable(int /*long*/ widget, boolean app_paintable);
-public static final void gtk_widget_set_app_paintable(int /*long*/ widget, boolean app_paintable) {
+public static final native void _gtk_widget_set_app_paintable(long /*int*/ widget, boolean app_paintable);
+public static final void gtk_widget_set_app_paintable(long /*int*/ widget, boolean app_paintable) {
 	lock.lock();
 	try {
 		_gtk_widget_set_app_paintable(widget, app_paintable);
@@ -12294,8 +12294,8 @@ public static final void gtk_widget_set_default_direction(int dir) {
  * @param widget cast=(GtkWidget *)
  * @param dir cast=(GtkTextDirection)
  */
-public static final native void _gtk_widget_set_direction(int /*long*/ widget, int dir);
-public static final void gtk_widget_set_direction(int /*long*/ widget, int dir) {
+public static final native void _gtk_widget_set_direction(long /*int*/ widget, int dir);
+public static final void gtk_widget_set_direction(long /*int*/ widget, int dir) {
 	lock.lock();
 	try {
 		_gtk_widget_set_direction(widget, dir);
@@ -12307,8 +12307,8 @@ public static final void gtk_widget_set_direction(int /*long*/ widget, int dir)
  * @param widget cast=(GtkWidget *)
  * @param double_buffered cast=(gboolean)
  */
-public static final native void _gtk_widget_set_double_buffered(int /*long*/ widget, boolean double_buffered);
-public static final void gtk_widget_set_double_buffered(int /*long*/ widget, boolean double_buffered) {
+public static final native void _gtk_widget_set_double_buffered(long /*int*/ widget, boolean double_buffered);
+public static final void gtk_widget_set_double_buffered(long /*int*/ widget, boolean double_buffered) {
 	lock.lock();
 	try {
 		_gtk_widget_set_double_buffered(widget, double_buffered);
@@ -12320,8 +12320,8 @@ public static final void gtk_widget_set_double_buffered(int /*long*/ widget, boo
  * @param widget cast=(GtkWidget *)
  * @param name cast=(const char *)
  */
-public static final native void _gtk_widget_set_name(int /*long*/ widget, byte[] name);
-public static final void gtk_widget_set_name(int /*long*/ widget, byte[] name) {
+public static final native void _gtk_widget_set_name(long /*int*/ widget, byte[] name);
+public static final void gtk_widget_set_name(long /*int*/ widget, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_widget_set_name(widget, name);
@@ -12333,8 +12333,8 @@ public static final void gtk_widget_set_name(int /*long*/ widget, byte[] name) {
  * @param widget cast=(GtkWidget *)
  * @param redraw cast=(gboolean)
  */
-public static final native void _gtk_widget_set_redraw_on_allocate(int /*long*/ widget, boolean redraw);
-public static final void gtk_widget_set_redraw_on_allocate(int /*long*/ widget, boolean redraw) {
+public static final native void _gtk_widget_set_redraw_on_allocate(long /*int*/ widget, boolean redraw);
+public static final void gtk_widget_set_redraw_on_allocate(long /*int*/ widget, boolean redraw) {
 	lock.lock();
 	try {
 		_gtk_widget_set_redraw_on_allocate(widget, redraw);
@@ -12346,8 +12346,8 @@ public static final void gtk_widget_set_redraw_on_allocate(int /*long*/ widget,
  * @param widget cast=(GtkWidget *)
  * @param sensitive cast=(gboolean)
  */
-public static final native void _gtk_widget_set_sensitive(int /*long*/ widget, boolean sensitive);
-public static final void gtk_widget_set_sensitive(int /*long*/ widget, boolean sensitive) {
+public static final native void _gtk_widget_set_sensitive(long /*int*/ widget, boolean sensitive);
+public static final void gtk_widget_set_sensitive(long /*int*/ widget, boolean sensitive) {
 	lock.lock();
 	try {
 		_gtk_widget_set_sensitive(widget, sensitive);
@@ -12360,8 +12360,8 @@ public static final void gtk_widget_set_sensitive(int /*long*/ widget, boolean s
  * @param width cast=(gint)
  * @param height cast=(gint)
  */
-public static final native void _gtk_widget_set_size_request(int /*long*/ widget, int width, int height);
-public static final void gtk_widget_set_size_request(int /*long*/ widget, int width, int height) {
+public static final native void _gtk_widget_set_size_request(long /*int*/ widget, int width, int height);
+public static final void gtk_widget_set_size_request(long /*int*/ widget, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_widget_set_size_request(widget, width, height);
@@ -12373,8 +12373,8 @@ public static final void gtk_widget_set_size_request(int /*long*/ widget, int wi
  * @param widget cast=(GtkWidget *)
  * @param state cast=(GtkStateType)
  */
-public static final native void _gtk_widget_set_state(int /*long*/ widget, int state);
-public static final void gtk_widget_set_state(int /*long*/ widget, int state) {
+public static final native void _gtk_widget_set_state(long /*int*/ widget, int state);
+public static final void gtk_widget_set_state(long /*int*/ widget, int state) {
 	lock.lock();
 	try {
 		_gtk_widget_set_state(widget, state);
@@ -12386,8 +12386,8 @@ public static final void gtk_widget_set_state(int /*long*/ widget, int state) {
  * @param widget cast=(GtkWidget *)
  * @param style cast=(GtkStyle *)
  */
-public static final native void _gtk_widget_set_style(int /*long*/ widget, int /*long*/ style);
-public static final void gtk_widget_set_style(int /*long*/ widget, int /*long*/ style) {
+public static final native void _gtk_widget_set_style(long /*int*/ widget, long /*int*/ style);
+public static final void gtk_widget_set_style(long /*int*/ widget, long /*int*/ style) {
 	lock.lock();
 	try {
 		_gtk_widget_set_style(widget, style);
@@ -12401,8 +12401,8 @@ public static final void gtk_widget_set_style(int /*long*/ widget, int /*long*/
  * @param offset_x cast=(gint)
  * @param offset_y cast=(gint)
  */
-public static final native void _gtk_widget_shape_combine_mask(int /*long*/ widget, int /*long*/ shape_mask, int offset_x, int offset_y);
-public static final void gtk_widget_shape_combine_mask(int /*long*/ widget, int /*long*/ shape_mask, int offset_x, int offset_y) {
+public static final native void _gtk_widget_shape_combine_mask(long /*int*/ widget, long /*int*/ shape_mask, int offset_x, int offset_y);
+public static final void gtk_widget_shape_combine_mask(long /*int*/ widget, long /*int*/ shape_mask, int offset_x, int offset_y) {
 	lock.lock();
 	try {
 		_gtk_widget_shape_combine_mask(widget, shape_mask, offset_x, offset_y);
@@ -12411,8 +12411,8 @@ public static final void gtk_widget_shape_combine_mask(int /*long*/ widget, int
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_show(int /*long*/ widget);
-public static final void gtk_widget_show(int /*long*/ widget) {
+public static final native void _gtk_widget_show(long /*int*/ widget);
+public static final void gtk_widget_show(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_show(widget);
@@ -12421,8 +12421,8 @@ public static final void gtk_widget_show(int /*long*/ widget) {
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_show_now(int /*long*/ widget);
-public static final void gtk_widget_show_now(int /*long*/ widget) {
+public static final native void _gtk_widget_show_now(long /*int*/ widget);
+public static final void gtk_widget_show_now(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_show_now(widget);
@@ -12434,8 +12434,8 @@ public static final void gtk_widget_show_now(int /*long*/ widget) {
  * @param widget cast=(GtkWidget *)
  * @param allocation cast=(GtkAllocation *),flags=no_out
  */
-public static final native void _gtk_widget_size_allocate(int /*long*/ widget, GtkAllocation allocation);
-public static final void gtk_widget_size_allocate(int /*long*/ widget, GtkAllocation allocation) {
+public static final native void _gtk_widget_size_allocate(long /*int*/ widget, GtkAllocation allocation);
+public static final void gtk_widget_size_allocate(long /*int*/ widget, GtkAllocation allocation) {
 	lock.lock();
 	try {
 		_gtk_widget_size_allocate(widget, allocation);
@@ -12447,8 +12447,8 @@ public static final void gtk_widget_size_allocate(int /*long*/ widget, GtkAlloca
  * @param widget cast=(GtkWidget *)
  * @param requisition cast=(GtkRequisition *),flags=no_in
  */
-public static final native void _gtk_widget_size_request(int /*long*/ widget, GtkRequisition requisition);
-public static final void gtk_widget_size_request(int /*long*/ widget, GtkRequisition requisition) {
+public static final native void _gtk_widget_size_request(long /*int*/ widget, GtkRequisition requisition);
+public static final void gtk_widget_size_request(long /*int*/ widget, GtkRequisition requisition) {
 	lock.lock();
 	try {
 		_gtk_widget_size_request(widget, requisition);
@@ -12461,8 +12461,8 @@ public static final void gtk_widget_size_request(int /*long*/ widget, GtkRequisi
  * @param property_name cast=(const gchar *)
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _gtk_widget_style_get(int /*long*/ widget, byte[] property_name, int[] value, int /*long*/ terminator);
-public static final void gtk_widget_style_get(int /*long*/ widget, byte[] property_name, int[] value, int /*long*/ terminator) {
+public static final native void _gtk_widget_style_get(long /*int*/ widget, byte[] property_name, int[] value, long /*int*/ terminator);
+public static final void gtk_widget_style_get(long /*int*/ widget, byte[] property_name, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_widget_style_get(widget, property_name, value, terminator);
@@ -12475,8 +12475,8 @@ public static final void gtk_widget_style_get(int /*long*/ widget, byte[] proper
  * @param property_name cast=(const gchar *)
  * @param terminator cast=(const gchar *),flags=sentinel
  */
-public static final native void _gtk_widget_style_get(int /*long*/ widget, byte[] property_name, long[] value, int /*long*/ terminator);
-public static final void gtk_widget_style_get(int /*long*/ widget, byte[] property_name, long[] value, int /*long*/ terminator) {
+public static final native void _gtk_widget_style_get(long /*int*/ widget, byte[] property_name, long[] value, long /*int*/ terminator);
+public static final void gtk_widget_style_get(long /*int*/ widget, byte[] property_name, long[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_widget_style_get(widget, property_name, value, terminator);
@@ -12488,8 +12488,8 @@ public static final void gtk_widget_style_get(int /*long*/ widget, byte[] proper
  * @param src_widget cast=(GtkWidget *)
  * @param dest_widget cast=(GtkWidget *)
  */
-public static final native boolean _gtk_widget_translate_coordinates(int /*long*/ src_widget, int /*long*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y);
-public static final boolean gtk_widget_translate_coordinates(int /*long*/ src_widget, int /*long*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y) {
+public static final native boolean _gtk_widget_translate_coordinates(long /*int*/ src_widget, long /*int*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y);
+public static final boolean gtk_widget_translate_coordinates(long /*int*/ src_widget, long /*int*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y) {
 	lock.lock();
 	try {
 		return _gtk_widget_translate_coordinates(src_widget, dest_widget, src_x, src_y, dest_x, dest_y);
@@ -12498,8 +12498,8 @@ public static final boolean gtk_widget_translate_coordinates(int /*long*/ src_wi
 	}
 }
 /** @param widget cast=(GtkWidget *) */
-public static final native void _gtk_widget_unrealize(int /*long*/ widget);
-public static final void gtk_widget_unrealize(int /*long*/ widget) {
+public static final native void _gtk_widget_unrealize(long /*int*/ widget);
+public static final void gtk_widget_unrealize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_unrealize(widget);
@@ -12508,8 +12508,8 @@ public static final void gtk_widget_unrealize(int /*long*/ widget) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native boolean _gtk_window_activate_default(int /*long*/ window);
-public static final boolean gtk_window_activate_default(int /*long*/ window) {
+public static final native boolean _gtk_window_activate_default(long /*int*/ window);
+public static final boolean gtk_window_activate_default(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_activate_default(window);
@@ -12521,8 +12521,8 @@ public static final boolean gtk_window_activate_default(int /*long*/ window) {
  * @param window cast=(GtkWindow *)
  * @param accel_group cast=(GtkAccelGroup *)
  */
-public static final native void _gtk_window_add_accel_group(int /*long*/ window, int /*long*/ accel_group);
-public static final void gtk_window_add_accel_group(int /*long*/ window, int /*long*/ accel_group) {
+public static final native void _gtk_window_add_accel_group(long /*int*/ window, long /*int*/ accel_group);
+public static final void gtk_window_add_accel_group(long /*int*/ window, long /*int*/ accel_group) {
 	lock.lock();
 	try {
 		_gtk_window_add_accel_group(window, accel_group);
@@ -12531,8 +12531,8 @@ public static final void gtk_window_add_accel_group(int /*long*/ window, int /*l
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_deiconify(int /*long*/ handle);
-public static final void gtk_window_deiconify(int /*long*/ handle) {
+public static final native void _gtk_window_deiconify(long /*int*/ handle);
+public static final void gtk_window_deiconify(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_deiconify(handle);
@@ -12541,8 +12541,8 @@ public static final void gtk_window_deiconify(int /*long*/ handle) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native int /*long*/ _gtk_window_get_focus(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_focus(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_focus(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_focus(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_focus(window);
@@ -12554,8 +12554,8 @@ public static final int /*long*/ gtk_window_get_focus(int /*long*/ window) {
  * @method flags=dynamic
  * @param window cast=(GtkWindow *)
  */
-public static final native int /*long*/ _gtk_window_get_group(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_group(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_group(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_group(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_group(window);
@@ -12564,8 +12564,8 @@ public static final int /*long*/ gtk_window_get_group(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native int /*long*/ _gtk_window_get_icon_list(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_icon_list(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_icon_list(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_icon_list(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_icon_list(window);
@@ -12574,8 +12574,8 @@ public static final int /*long*/ gtk_window_get_icon_list(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native boolean _gtk_window_get_modal(int /*long*/ window);
-public static final boolean gtk_window_get_modal(int /*long*/ window) {
+public static final native boolean _gtk_window_get_modal(long /*int*/ window);
+public static final boolean gtk_window_get_modal(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_modal(window);
@@ -12584,8 +12584,8 @@ public static final boolean gtk_window_get_modal(int /*long*/ window) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native int _gtk_window_get_mnemonic_modifier(int /*long*/ window);
-public static final int gtk_window_get_mnemonic_modifier(int /*long*/ window) {
+public static final native int _gtk_window_get_mnemonic_modifier(long /*int*/ window);
+public static final int gtk_window_get_mnemonic_modifier(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_mnemonic_modifier(window);
@@ -12597,8 +12597,8 @@ public static final int gtk_window_get_mnemonic_modifier(int /*long*/ window) {
  * @method flags=dynamic
  * @param window cast=(GtkWindow *)
  */
-public static final native double _gtk_window_get_opacity (int /*long*/ window);
-public static final double gtk_window_get_opacity (int /*long*/ window) {
+public static final native double _gtk_window_get_opacity (long /*int*/ window);
+public static final double gtk_window_get_opacity (long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_opacity (window);
@@ -12611,8 +12611,8 @@ public static final double gtk_window_get_opacity (int /*long*/ window) {
  * @param x cast=(gint *)
  * @param y cast=(gint *)
  */
-public static final native void _gtk_window_get_position(int /*long*/ handle, int[] x, int[] y);
-public static final void gtk_window_get_position(int /*long*/ handle, int[] x, int[] y) {
+public static final native void _gtk_window_get_position(long /*int*/ handle, int[] x, int[] y);
+public static final void gtk_window_get_position(long /*int*/ handle, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_window_get_position(handle, x, y);
@@ -12625,8 +12625,8 @@ public static final void gtk_window_get_position(int /*long*/ handle, int[] x, i
  * @param x cast=(gint *)
  * @param y cast=(gint *)
  */
-public static final native void _gtk_window_get_size(int /*long*/ handle, int[] x, int[] y);
-public static final void gtk_window_get_size(int /*long*/ handle, int[] x, int[] y) {
+public static final native void _gtk_window_get_size(long /*int*/ handle, int[] x, int[] y);
+public static final void gtk_window_get_size(long /*int*/ handle, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_window_get_size(handle, x, y);
@@ -12638,8 +12638,8 @@ public static final void gtk_window_get_size(int /*long*/ handle, int[] x, int[]
  * @param group cast=(GtkWindowGroup*)
  * @param window cast=(GtkWindow*)
  */
-public static final native void _gtk_window_group_add_window(int /*long*/ group, int /*long*/ window);
-public static final void gtk_window_group_add_window(int /*long*/ group, int /*long*/ window) {
+public static final native void _gtk_window_group_add_window(long /*int*/ group, long /*int*/ window);
+public static final void gtk_window_group_add_window(long /*int*/ group, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_group_add_window(group, window);
@@ -12651,8 +12651,8 @@ public static final void gtk_window_group_add_window(int /*long*/ group, int /*l
  * @param group cast=(GtkWindowGroup*)
  * @param window cast=(GtkWindow*)
  */
-public static final native void _gtk_window_group_remove_window(int /*long*/ group, int /*long*/ window);
-public static final void gtk_window_group_remove_window(int /*long*/ group, int /*long*/ window) {
+public static final native void _gtk_window_group_remove_window(long /*int*/ group, long /*int*/ window);
+public static final void gtk_window_group_remove_window(long /*int*/ group, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_group_remove_window(group, window);
@@ -12660,8 +12660,8 @@ public static final void gtk_window_group_remove_window(int /*long*/ group, int
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_group_new();
-public static final int /*long*/ gtk_window_group_new() {
+public static final native long /*int*/ _gtk_window_group_new();
+public static final long /*int*/ gtk_window_group_new() {
 	lock.lock();
 	try {
 		return _gtk_window_group_new();
@@ -12670,8 +12670,8 @@ public static final int /*long*/ gtk_window_group_new() {
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_iconify(int /*long*/ handle);
-public static final void gtk_window_iconify(int /*long*/ handle) {
+public static final native void _gtk_window_iconify(long /*int*/ handle);
+public static final void gtk_window_iconify(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_iconify(handle);
@@ -12679,8 +12679,8 @@ public static final void gtk_window_iconify(int /*long*/ handle) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_list_toplevels ();
-public static final int /*long*/ gtk_window_list_toplevels () {
+public static final native long /*int*/ _gtk_window_list_toplevels ();
+public static final long /*int*/ gtk_window_list_toplevels () {
 	lock.lock();
 	try {
 		return _gtk_window_list_toplevels ();
@@ -12689,8 +12689,8 @@ public static final int /*long*/ gtk_window_list_toplevels () {
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_maximize(int /*long*/ handle);
-public static final void gtk_window_maximize(int /*long*/ handle) {
+public static final native void _gtk_window_maximize(long /*int*/ handle);
+public static final void gtk_window_maximize(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_maximize(handle);
@@ -12699,8 +12699,8 @@ public static final void gtk_window_maximize(int /*long*/ handle) {
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_fullscreen(int /*long*/ handle);
-public static final void gtk_window_fullscreen(int /*long*/ handle) {
+public static final native void _gtk_window_fullscreen(long /*int*/ handle);
+public static final void gtk_window_fullscreen(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_fullscreen(handle);
@@ -12709,8 +12709,8 @@ public static final void gtk_window_fullscreen(int /*long*/ handle) {
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_unfullscreen(int /*long*/ handle);
-public static final void gtk_window_unfullscreen(int /*long*/ handle) {
+public static final native void _gtk_window_unfullscreen(long /*int*/ handle);
+public static final void gtk_window_unfullscreen(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_unfullscreen(handle);
@@ -12723,8 +12723,8 @@ public static final void gtk_window_unfullscreen(int /*long*/ handle) {
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native void _gtk_window_move(int /*long*/ handle, int x, int y);
-public static final void gtk_window_move(int /*long*/ handle, int x, int y) {
+public static final native void _gtk_window_move(long /*int*/ handle, int x, int y);
+public static final void gtk_window_move(long /*int*/ handle, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_window_move(handle, x, y);
@@ -12733,8 +12733,8 @@ public static final void gtk_window_move(int /*long*/ handle, int x, int y) {
 	}
 }
 /** @param type cast=(GtkWindowType) */
-public static final native int /*long*/ _gtk_window_new(int type);
-public static final int /*long*/ gtk_window_new(int type) {
+public static final native long /*int*/ _gtk_window_new(int type);
+public static final long /*int*/ gtk_window_new(int type) {
 	lock.lock();
 	try {
 		return _gtk_window_new(type);
@@ -12743,8 +12743,8 @@ public static final int /*long*/ gtk_window_new(int type) {
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native void _gtk_window_present(int /*long*/ window);
-public static final void gtk_window_present(int /*long*/ window) {
+public static final native void _gtk_window_present(long /*int*/ window);
+public static final void gtk_window_present(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_present(window);
@@ -12756,8 +12756,8 @@ public static final void gtk_window_present(int /*long*/ window) {
  * @param window cast=(GtkWindow *)
  * @param accel_group cast=(GtkAccelGroup *)
  */
-public static final native void _gtk_window_remove_accel_group(int /*long*/ window, int /*long*/ accel_group);
-public static final void gtk_window_remove_accel_group(int /*long*/ window, int /*long*/ accel_group) {
+public static final native void _gtk_window_remove_accel_group(long /*int*/ window, long /*int*/ accel_group);
+public static final void gtk_window_remove_accel_group(long /*int*/ window, long /*int*/ accel_group) {
 	lock.lock();
 	try {
 		_gtk_window_remove_accel_group(window, accel_group);
@@ -12770,8 +12770,8 @@ public static final void gtk_window_remove_accel_group(int /*long*/ window, int
  * @param x cast=(gint)
  * @param y cast=(gint)
  */
-public static final native void _gtk_window_resize(int /*long*/ handle, int x, int y);
-public static final void gtk_window_resize(int /*long*/ handle, int x, int y) {
+public static final native void _gtk_window_resize(long /*int*/ handle, int x, int y);
+public static final void gtk_window_resize(long /*int*/ handle, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_window_resize(handle, x, y);
@@ -12783,8 +12783,8 @@ public static final void gtk_window_resize(int /*long*/ handle, int x, int y) {
  * @param window cast=(GtkWindow *)
  * @param widget cast=(GtkWidget *)
  */
-public static final native void _gtk_window_set_default(int /*long*/ window, int /*long*/ widget);
-public static final void gtk_window_set_default(int /*long*/ window, int /*long*/ widget) {
+public static final native void _gtk_window_set_default(long /*int*/ window, long /*int*/ widget);
+public static final void gtk_window_set_default(long /*int*/ window, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_window_set_default(window, widget);
@@ -12796,8 +12796,8 @@ public static final void gtk_window_set_default(int /*long*/ window, int /*long*
  * @param window cast=(GtkWindow *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_window_set_destroy_with_parent(int /*long*/ window, boolean setting);
-public static final void gtk_window_set_destroy_with_parent(int /*long*/ window, boolean setting) {
+public static final native void _gtk_window_set_destroy_with_parent(long /*int*/ window, boolean setting);
+public static final void gtk_window_set_destroy_with_parent(long /*int*/ window, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_window_set_destroy_with_parent(window, setting);
@@ -12810,8 +12810,8 @@ public static final void gtk_window_set_destroy_with_parent(int /*long*/ window,
  * @param window cast=(GtkWindow *)
  * @param setting cast=(gboolean)
  */
-public static final native void _gtk_window_set_keep_below(int /*long*/ window, boolean setting);
-public static final void gtk_window_set_keep_below(int /*long*/ window,  boolean setting) {
+public static final native void _gtk_window_set_keep_below(long /*int*/ window, boolean setting);
+public static final void gtk_window_set_keep_below(long /*int*/ window,  boolean setting) {
 	lock.lock();
 	try {
 		_gtk_window_set_keep_below(window, setting);
@@ -12824,8 +12824,8 @@ public static final void gtk_window_set_keep_below(int /*long*/ window,  boolean
  * @param geometry_widget cast=(GtkWidget *)
  * @param geometry flags=no_out
  */
-public static final native void _gtk_window_set_geometry_hints(int /*long*/ window, int /*long*/ geometry_widget, GdkGeometry geometry, int geom_mask);
-public static final void gtk_window_set_geometry_hints(int /*long*/ window, int /*long*/ geometry_widget, GdkGeometry geometry, int geom_mask) {
+public static final native void _gtk_window_set_geometry_hints(long /*int*/ window, long /*int*/ geometry_widget, GdkGeometry geometry, int geom_mask);
+public static final void gtk_window_set_geometry_hints(long /*int*/ window, long /*int*/ geometry_widget, GdkGeometry geometry, int geom_mask) {
 	lock.lock();
 	try {
 		_gtk_window_set_geometry_hints(window, geometry_widget, geometry, geom_mask);
@@ -12837,8 +12837,8 @@ public static final void gtk_window_set_geometry_hints(int /*long*/ window, int
  * @param window cast=(GtkWindow *)
  * @param list cast=(GList *)
  */
-public static final native void _gtk_window_set_icon_list(int /*long*/ window, int /*long*/ list);
-public static final void gtk_window_set_icon_list(int /*long*/ window, int /*long*/ list) {	
+public static final native void _gtk_window_set_icon_list(long /*int*/ window, long /*int*/ list);
+public static final void gtk_window_set_icon_list(long /*int*/ window, long /*int*/ list) {	
 	lock.lock();
 	try {
 		_gtk_window_set_icon_list(window, list);
@@ -12850,8 +12850,8 @@ public static final void gtk_window_set_icon_list(int /*long*/ window, int /*lon
  * @param window cast=(GtkWindow *)
  * @param modal cast=(gboolean)
  */
-public static final native void _gtk_window_set_modal(int /*long*/ window, boolean modal);
-public static final void gtk_window_set_modal(int /*long*/ window, boolean modal) {
+public static final native void _gtk_window_set_modal(long /*int*/ window, boolean modal);
+public static final void gtk_window_set_modal(long /*int*/ window, boolean modal) {
 	lock.lock();
 	try {
 		_gtk_window_set_modal(window, modal);
@@ -12863,8 +12863,8 @@ public static final void gtk_window_set_modal(int /*long*/ window, boolean modal
  * @method flags=dynamic
  * @param window cast=(GtkWindow *)
  */
-public static final native void _gtk_window_set_opacity(int /*long*/ window, double opacity);
-public static final void gtk_window_set_opacity(int /*long*/ window, double opacity) {
+public static final native void _gtk_window_set_opacity(long /*int*/ window, double opacity);
+public static final void gtk_window_set_opacity(long /*int*/ window, double opacity) {
 	lock.lock();
 	try {
 		 _gtk_window_set_opacity(window, opacity);
@@ -12877,8 +12877,8 @@ public static final void gtk_window_set_opacity(int /*long*/ window, double opac
  * @param widget cast=(GtkWidget *)
  * @param tip_text cast=(const gchar *)
  */
-public static final native void _gtk_widget_set_tooltip_text(int /*long*/ widget, byte[] tip_text);
-public static final void gtk_widget_set_tooltip_text(int /*long*/ widget, byte[] tip_text) {
+public static final native void _gtk_widget_set_tooltip_text(long /*int*/ widget, byte[] tip_text);
+public static final void gtk_widget_set_tooltip_text(long /*int*/ widget, byte[] tip_text) {
 	lock.lock();
 	try {
 		_gtk_widget_set_tooltip_text(widget, tip_text);
@@ -12890,8 +12890,8 @@ public static final void gtk_widget_set_tooltip_text(int /*long*/ widget, byte[]
  * @param widget cast=(GtkWidget *)
  * @param parent_window cast=(GdkWindow *)
  */
-public static final native void _gtk_widget_set_parent_window(int /*long*/ widget, int /*long*/ parent_window);
-public static final void gtk_widget_set_parent_window(int /*long*/ widget, int /*long*/ parent_window) {	
+public static final native void _gtk_widget_set_parent_window(long /*int*/ widget, long /*int*/ parent_window);
+public static final void gtk_widget_set_parent_window(long /*int*/ widget, long /*int*/ parent_window) {	
 	lock.lock();
 	try {
 		_gtk_widget_set_parent_window(widget, parent_window);
@@ -12903,8 +12903,8 @@ public static final void gtk_widget_set_parent_window(int /*long*/ widget, int /
  * @param window cast=(GtkWindow *)
  * @param resizable cast=(gboolean)
  */
-public static final native void _gtk_window_set_resizable(int /*long*/ window, boolean resizable);
-public static final void gtk_window_set_resizable(int /*long*/ window, boolean resizable) {
+public static final native void _gtk_window_set_resizable(long /*int*/ window, boolean resizable);
+public static final void gtk_window_set_resizable(long /*int*/ window, boolean resizable) {
 	lock.lock();
 	try {
 		_gtk_window_set_resizable(window, resizable);
@@ -12916,8 +12916,8 @@ public static final void gtk_window_set_resizable(int /*long*/ window, boolean r
  * @param window cast=(GtkWindow *)
  * @param title cast=(const gchar *)
  */
-public static final native void _gtk_window_set_title(int /*long*/ window, byte[] title);
-public static final void gtk_window_set_title(int /*long*/ window, byte[] title) {
+public static final native void _gtk_window_set_title(long /*int*/ window, byte[] title);
+public static final void gtk_window_set_title(long /*int*/ window, byte[] title) {
 	lock.lock();
 	try {
 		_gtk_window_set_title(window, title);
@@ -12930,8 +12930,8 @@ public static final void gtk_window_set_title(int /*long*/ window, byte[] title)
  * @param window cast=(GtkWindow *)
  * @param skips_taskbar cast=(gboolean)
  */
-public static final native void _gtk_window_set_skip_taskbar_hint(int /*long*/ window, boolean skips_taskbar);
-public static final void gtk_window_set_skip_taskbar_hint(int /*long*/ window, boolean skips_taskbar) {
+public static final native void _gtk_window_set_skip_taskbar_hint(long /*int*/ window, boolean skips_taskbar);
+public static final void gtk_window_set_skip_taskbar_hint(long /*int*/ window, boolean skips_taskbar) {
 	lock.lock();
 	try {
 		_gtk_window_set_skip_taskbar_hint(window, skips_taskbar);
@@ -12940,8 +12940,8 @@ public static final void gtk_window_set_skip_taskbar_hint(int /*long*/ window, b
 	}
 }
 /** @param window cast=(GtkWindow *) */
-public static final native void _gtk_window_set_type_hint(int /*long*/ window, int hint);
-public static final void gtk_window_set_type_hint(int /*long*/ window, int hint) {
+public static final native void _gtk_window_set_type_hint(long /*int*/ window, int hint);
+public static final void gtk_window_set_type_hint(long /*int*/ window, int hint) {
 	lock.lock();
 	try {
 		_gtk_window_set_type_hint(window, hint);
@@ -12953,8 +12953,8 @@ public static final void gtk_window_set_type_hint(int /*long*/ window, int hint)
  * @param window cast=(GtkWindow *)
  * @param parent cast=(GtkWindow *)
  */
-public static final native void _gtk_window_set_transient_for(int /*long*/ window, int /*long*/ parent);
-public static final void gtk_window_set_transient_for(int /*long*/ window, int /*long*/ parent) {
+public static final native void _gtk_window_set_transient_for(long /*int*/ window, long /*int*/ parent);
+public static final void gtk_window_set_transient_for(long /*int*/ window, long /*int*/ parent) {
 	lock.lock();
 	try {
 		_gtk_window_set_transient_for(window, parent);
@@ -12963,8 +12963,8 @@ public static final void gtk_window_set_transient_for(int /*long*/ window, int /
 	}
 }
 /** @param handle cast=(GtkWindow *) */
-public static final native void _gtk_window_unmaximize(int /*long*/ handle);
-public static final void gtk_window_unmaximize(int /*long*/ handle) {
+public static final native void _gtk_window_unmaximize(long /*int*/ handle);
+public static final void gtk_window_unmaximize(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_unmaximize(handle);
@@ -12977,256 +12977,256 @@ public static final void gtk_window_unmaximize(int /*long*/ handle) {
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GInterfaceInfo src, int size);
+public static final native void memmove(long /*int*/ dest, GInterfaceInfo src, int size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *),flags=no_out
  */
-public static final native void memmove(int /*long*/ dest, GObjectClass src);
+public static final native void memmove(long /*int*/ dest, GObjectClass src);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GTypeInfo src, int size);
+public static final native void memmove(long /*int*/ dest, GTypeInfo src, int size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GtkTargetEntry src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, GtkTargetEntry src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  */
-public static final native void memmove(int /*long*/ dest, GtkAdjustment src);
+public static final native void memmove(long /*int*/ dest, GtkAdjustment src);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GdkEventButton src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, GdkEventButton src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GdkEventExpose src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, GdkEventExpose src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, GdkEventMotion src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, GdkEventMotion src, long /*int*/ size);
 /** @param src flags=no_out */
-public static final native void memmove(int /*long*/ dest, GtkWidgetClass src);
+public static final native void memmove(long /*int*/ dest, GtkWidgetClass src);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *),flags=no_out
  * @param size cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, PangoAttribute src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, PangoAttribute src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GObjectClass  dest, int /*long*/ src);
+public static final native void memmove(GObjectClass  dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GTypeQuery dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GTypeQuery dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GtkColorSelectionDialog dest, int /*long*/ src);
+public static final native void memmove(GtkColorSelectionDialog dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GtkFileSelection dest, int /*long*/ src);
+public static final native void memmove(GtkFileSelection dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkDragContext dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkDragContext dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GtkSelectionData dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GtkSelectionData dest, long /*int*/ src, long /*int*/ size);
 /** @param dest flags=no_in */
-public static final native void memmove(GtkWidgetClass dest, int /*long*/ src);
+public static final native void memmove(GtkWidgetClass dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GtkTargetPair dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GtkTargetPair dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GtkCombo dest, int /*long*/ src);
+public static final native void memmove(GtkCombo dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GtkAdjustment dest, int /*long*/ src);
+public static final native void memmove(GtkAdjustment dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GtkBorder dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GtkBorder dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkColor dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkColor dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEvent dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventAny dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventAny dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventButton dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventButton dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventCrossing dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventCrossing dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventExpose dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventExpose dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventFocus dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventFocus dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventKey dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventKey dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventMotion dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventMotion dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventScroll dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventScroll dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventVisibility dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkEventVisibility dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkEventWindowState dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GtkCellRendererClass src);
-public static final native void memmove(GtkCellRendererClass dest, int /*long*/ src);
+public static final native void memmove(GdkEventWindowState dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GtkCellRendererClass src);
+public static final native void memmove(GtkCellRendererClass dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GtkFixed dest, int /*long*/ src);
+public static final native void memmove(GtkFixed dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *),flags=no_out
  */
-public static final native void memmove(int /*long*/ dest, GtkFixed src);
+public static final native void memmove(long /*int*/ dest, GtkFixed src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GdkVisual dest, int /*long*/ src);
+public static final native void memmove(GdkVisual dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  */
-public static final native void memmove(GdkImage dest, int /*long*/ src);
+public static final native void memmove(GdkImage dest, long /*int*/ src);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(GdkRectangle dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(GdkRectangle dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoAttribute dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoAttribute dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoAttrColor dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoAttrColor dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoAttrInt dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoAttrInt dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoItem dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoItem dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoLayoutLine dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoLayoutLine dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoLayoutRun dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(PangoLayoutRun dest, long /*int*/ src, long /*int*/ size);
 /**
  * @param dest cast=(void *),flags=no_in
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(PangoLogAttr dest, int /*long*/ src, int /*long*/ size);
-public static final native int /*long*/ _pango_attr_background_new (short red, short green, short blue);
-public static final int /*long*/ pango_attr_background_new (short red, short green, short blue) {
+public static final native void memmove(PangoLogAttr dest, long /*int*/ src, long /*int*/ size);
+public static final native long /*int*/ _pango_attr_background_new (short red, short green, short blue);
+public static final long /*int*/ pango_attr_background_new (short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_background_new(red, green, blue);
@@ -13235,8 +13235,8 @@ public static final int /*long*/ pango_attr_background_new (short red, short gre
 	}
 }
 /** @param desc cast=(const PangoFontDescription *) */
-public static final native int /*long*/ _pango_attr_font_desc_new(int /*long*/ desc);
-public static final int /*long*/ pango_attr_font_desc_new(int /*long*/ desc) {
+public static final native long /*int*/ _pango_attr_font_desc_new(long /*int*/ desc);
+public static final long /*int*/ pango_attr_font_desc_new(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_attr_font_desc_new(desc);
@@ -13244,8 +13244,8 @@ public static final int /*long*/ pango_attr_font_desc_new(int /*long*/ desc) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_foreground_new (short red, short green, short blue);
-public static final int /*long*/ pango_attr_foreground_new (short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_foreground_new (short red, short green, short blue);
+public static final long /*int*/ pango_attr_foreground_new (short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_foreground_new(red, green, blue);
@@ -13253,8 +13253,8 @@ public static final int /*long*/ pango_attr_foreground_new (short red, short gre
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_rise_new(int rise);
-public static final int /*long*/ pango_attr_rise_new(int rise) {
+public static final native long /*int*/ _pango_attr_rise_new(int rise);
+public static final long /*int*/ pango_attr_rise_new(int rise) {
 	lock.lock();
 	try {
 		return _pango_attr_rise_new(rise);
@@ -13266,8 +13266,8 @@ public static final int /*long*/ pango_attr_rise_new(int rise) {
  * @param ink_rect flags=no_out
  * @param logical_rect flags=no_out
  */
-public static final native int /*long*/ _pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final int /*long*/ pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native long /*int*/ _pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final long /*int*/ pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		return _pango_attr_shape_new(ink_rect, logical_rect);
@@ -13279,8 +13279,8 @@ public static final int /*long*/ pango_attr_shape_new(PangoRectangle ink_rect, P
  * @param list cast=(PangoAttrList *)
  * @param attr cast=(PangoAttribute *)
  */
-public static final native void _pango_attr_list_insert(int /*long*/ list, int /*long*/ attr);
-public static final void pango_attr_list_insert(int /*long*/ list, int /*long*/ attr) {
+public static final native void _pango_attr_list_insert(long /*int*/ list, long /*int*/ attr);
+public static final void pango_attr_list_insert(long /*int*/ list, long /*int*/ attr) {
 	lock.lock();
 	try {
 		_pango_attr_list_insert(list, attr);
@@ -13292,8 +13292,8 @@ public static final void pango_attr_list_insert(int /*long*/ list, int /*long*/
  * @param list cast=(PangoAttrList *)
  * @param attr cast=(PangoAttribute *)
  */
-public static final native void _pango_attr_list_change(int /*long*/ list, int /*long*/ attr);
-public static final void pango_attr_list_change(int /*long*/ list, int /*long*/ attr) {
+public static final native void _pango_attr_list_change(long /*int*/ list, long /*int*/ attr);
+public static final void pango_attr_list_change(long /*int*/ list, long /*int*/ attr) {
 	lock.lock();
 	try {
 		_pango_attr_list_change(list, attr);
@@ -13302,8 +13302,8 @@ public static final void pango_attr_list_change(int /*long*/ list, int /*long*/
 	}
 }
 /** @param list cast=(PangoAttrList *) */
-public static final native int /*long*/ _pango_attr_list_get_iterator(int /*long*/ list);
-public static final int /*long*/ pango_attr_list_get_iterator(int /*long*/ list) {
+public static final native long /*int*/ _pango_attr_list_get_iterator(long /*int*/ list);
+public static final long /*int*/ pango_attr_list_get_iterator(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _pango_attr_list_get_iterator(list);
@@ -13312,8 +13312,8 @@ public static final int /*long*/ pango_attr_list_get_iterator(int /*long*/ list)
 	}
 }
 /** @param iterator cast=(PangoAttrIterator *) */
-public static final native boolean _pango_attr_iterator_next(int /*long*/ iterator);
-public static final boolean pango_attr_iterator_next(int /*long*/ iterator) {
+public static final native boolean _pango_attr_iterator_next(long /*int*/ iterator);
+public static final boolean pango_attr_iterator_next(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_next(iterator);
@@ -13322,8 +13322,8 @@ public static final boolean pango_attr_iterator_next(int /*long*/ iterator) {
 	}
 }
 /** @param iterator cast=(PangoAttrIterator *) */
-public static final native void _pango_attr_iterator_range(int /*long*/ iterator, int[] start, int[] end);
-public static final void pango_attr_iterator_range(int /*long*/ iterator, int[] start, int[] end) {
+public static final native void _pango_attr_iterator_range(long /*int*/ iterator, int[] start, int[] end);
+public static final void pango_attr_iterator_range(long /*int*/ iterator, int[] start, int[] end) {
 	lock.lock();
 	try {
 		_pango_attr_iterator_range(iterator, start, end);
@@ -13335,8 +13335,8 @@ public static final void pango_attr_iterator_range(int /*long*/ iterator, int[]
  * @param iterator cast=(PangoAttrIterator *)
  * @param type cast=(PangoAttrType)
  */
-public static final native int /*long*/ _pango_attr_iterator_get(int /*long*/ iterator, int type);
-public static final int /*long*/ pango_attr_iterator_get(int /*long*/ iterator, int type) {
+public static final native long /*int*/ _pango_attr_iterator_get(long /*int*/ iterator, int type);
+public static final long /*int*/ pango_attr_iterator_get(long /*int*/ iterator, int type) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_get(iterator, type);
@@ -13345,8 +13345,8 @@ public static final int /*long*/ pango_attr_iterator_get(int /*long*/ iterator,
 	}
 }
 /** @param iterator cast=(PangoAttrIterator *) */
-public static final native int /*long*/ _pango_attr_iterator_get_attrs(int /*long*/ iterator);
-public static final int /*long*/ pango_attr_iterator_get_attrs(int /*long*/ iterator) {
+public static final native long /*int*/ _pango_attr_iterator_get_attrs(long /*int*/ iterator);
+public static final long /*int*/ pango_attr_iterator_get_attrs(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_get_attrs(iterator);
@@ -13356,8 +13356,8 @@ public static final int /*long*/ pango_attr_iterator_get_attrs(int /*long*/ iter
 }
 
 /** @param iterator cast=(PangoAttrIterator *) */
-public static final native void _pango_attr_iterator_destroy(int /*long*/ iterator);
-public static final void pango_attr_iterator_destroy(int /*long*/ iterator) {
+public static final native void _pango_attr_iterator_destroy(long /*int*/ iterator);
+public static final void pango_attr_iterator_destroy(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		_pango_attr_iterator_destroy(iterator);
@@ -13365,8 +13365,8 @@ public static final void pango_attr_iterator_destroy(int /*long*/ iterator) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_list_new();
-public static final int /*long*/ pango_attr_list_new() {
+public static final native long /*int*/ _pango_attr_list_new();
+public static final long /*int*/ pango_attr_list_new() {
 	lock.lock();
 	try {
 		return _pango_attr_list_new();
@@ -13375,8 +13375,8 @@ public static final int /*long*/ pango_attr_list_new() {
 	}
 }
 /** @param list cast=(PangoAttrList *) */
-public static final native void _pango_attr_list_unref(int /*long*/ list);
-public static final void pango_attr_list_unref(int /*long*/ list) {
+public static final native void _pango_attr_list_unref(long /*int*/ list);
+public static final void pango_attr_list_unref(long /*int*/ list) {
 	lock.lock();
 	try {
 		_pango_attr_list_unref(list);
@@ -13385,8 +13385,8 @@ public static final void pango_attr_list_unref(int /*long*/ list) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_attr_strikethrough_color_new(short red, short green, short blue);
-public static final int /*long*/ pango_attr_strikethrough_color_new(short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_strikethrough_color_new(short red, short green, short blue);
+public static final long /*int*/ pango_attr_strikethrough_color_new(short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_strikethrough_color_new(red, green, blue);
@@ -13394,8 +13394,8 @@ public static final int /*long*/ pango_attr_strikethrough_color_new(short red, s
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_strikethrough_new(boolean strikethrough);
-public static final int /*long*/ pango_attr_strikethrough_new(boolean strikethrough) {
+public static final native long /*int*/ _pango_attr_strikethrough_new(boolean strikethrough);
+public static final long /*int*/ pango_attr_strikethrough_new(boolean strikethrough) {
 	lock.lock();
 	try {
 		return _pango_attr_strikethrough_new(strikethrough);
@@ -13404,8 +13404,8 @@ public static final int /*long*/ pango_attr_strikethrough_new(boolean strikethro
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_attr_underline_color_new(short red, short green, short blue);
-public static final int /*long*/ pango_attr_underline_color_new(short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_underline_color_new(short red, short green, short blue);
+public static final long /*int*/ pango_attr_underline_color_new(short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_underline_color_new(red, green, blue);
@@ -13413,8 +13413,8 @@ public static final int /*long*/ pango_attr_underline_color_new(short red, short
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_underline_new(int underline);
-public static final int /*long*/ pango_attr_underline_new(int underline) {
+public static final native long /*int*/ _pango_attr_underline_new(int underline);
+public static final long /*int*/ pango_attr_underline_new(int underline) {
 	lock.lock();
 	try {
 		return _pango_attr_underline_new(underline);
@@ -13422,8 +13422,8 @@ public static final int /*long*/ pango_attr_underline_new(int underline) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_weight_new(int weight);
-public static final int /*long*/ pango_attr_weight_new(int weight) {
+public static final native long /*int*/ _pango_attr_weight_new(int weight);
+public static final long /*int*/ pango_attr_weight_new(int weight) {
 	lock.lock();
 	try {
 		return _pango_attr_weight_new(weight);
@@ -13432,8 +13432,8 @@ public static final int /*long*/ pango_attr_weight_new(int weight) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_cairo_font_map_get_default();
-public static final int /*long*/ pango_cairo_font_map_get_default() {
+public static final native long /*int*/ _pango_cairo_font_map_get_default();
+public static final long /*int*/ pango_cairo_font_map_get_default() {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_get_default();
@@ -13442,8 +13442,8 @@ public static final int /*long*/ pango_cairo_font_map_get_default() {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_cairo_font_map_new();
-public static final int /*long*/ pango_cairo_font_map_new() {
+public static final native long /*int*/ _pango_cairo_font_map_new();
+public static final long /*int*/ pango_cairo_font_map_new() {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_new();
@@ -13452,8 +13452,8 @@ public static final int /*long*/ pango_cairo_font_map_new() {
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_cairo_font_map_create_context(int /*long*/ fontmap);
-public static final int /*long*/ pango_cairo_font_map_create_context(int /*long*/ fontmap) {
+public static final native long /*int*/ _pango_cairo_font_map_create_context(long /*int*/ fontmap);
+public static final long /*int*/ pango_cairo_font_map_create_context(long /*int*/ fontmap) {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_create_context(fontmap);
@@ -13462,8 +13462,8 @@ public static final int /*long*/ pango_cairo_font_map_create_context(int /*long*
 	}
 }
 /** @method flags=dynamic */
-public static final native int /*long*/ _pango_cairo_create_layout(int /*long*/ cairo);
-public static final int /*long*/ pango_cairo_create_layout(int /*long*/ cairo) {
+public static final native long /*int*/ _pango_cairo_create_layout(long /*int*/ cairo);
+public static final long /*int*/ pango_cairo_create_layout(long /*int*/ cairo) {
 	lock.lock();
 	try {
 		return _pango_cairo_create_layout(cairo);
@@ -13475,8 +13475,8 @@ public static final int /*long*/ pango_cairo_create_layout(int /*long*/ cairo) {
  * @method flags=dynamic
  * @param context cast=(PangoContext *)
  */
-public static final native int /*long*/ _pango_cairo_context_get_font_options(int /*long*/ context);
-public static final int /*long*/ pango_cairo_context_get_font_options(int /*long*/ context) {
+public static final native long /*int*/ _pango_cairo_context_get_font_options(long /*int*/ context);
+public static final long /*int*/ pango_cairo_context_get_font_options(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_cairo_context_get_font_options(context);
@@ -13488,8 +13488,8 @@ public static final int /*long*/ pango_cairo_context_get_font_options(int /*long
  * @method flags=dynamic
  * @param context cast=(PangoContext *)
  */
-public static final native void _pango_cairo_context_set_font_options(int /*long*/ context, int /*long*/ options);
-public static final void pango_cairo_context_set_font_options(int /*long*/ context, int /*long*/ options) {
+public static final native void _pango_cairo_context_set_font_options(long /*int*/ context, long /*int*/ options);
+public static final void pango_cairo_context_set_font_options(long /*int*/ context, long /*int*/ options) {
 	lock.lock();
 	try {
 		_pango_cairo_context_set_font_options(context, options);
@@ -13498,8 +13498,8 @@ public static final void pango_cairo_context_set_font_options(int /*long*/ conte
 	}
 }
 /** @method flags=dynamic */
-public static final native void _pango_cairo_font_map_set_resolution(int /*long*/ fontmap, double dpi);
-public static final void pango_cairo_font_map_set_resolution(int /*long*/ fontmap, double dpi) {
+public static final native void _pango_cairo_font_map_set_resolution(long /*int*/ fontmap, double dpi);
+public static final void pango_cairo_font_map_set_resolution(long /*int*/ fontmap, double dpi) {
 	lock.lock();
 	try {
 		_pango_cairo_font_map_set_resolution(fontmap, dpi);
@@ -13508,8 +13508,8 @@ public static final void pango_cairo_font_map_set_resolution(int /*long*/ fontma
 	}
 }
 /** @method flags=dynamic */
-public static final native void _pango_cairo_layout_path(int /*long*/ cairo, int /*long*/ layout);
-public static final void pango_cairo_layout_path(int /*long*/ cairo, int /*long*/ layout) {
+public static final native void _pango_cairo_layout_path(long /*int*/ cairo, long /*int*/ layout);
+public static final void pango_cairo_layout_path(long /*int*/ cairo, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_cairo_layout_path(cairo, layout);
@@ -13518,8 +13518,8 @@ public static final void pango_cairo_layout_path(int /*long*/ cairo, int /*long*
 	}
 }
 /** @method flags=dynamic */
-public static final native void _pango_cairo_show_layout(int /*long*/ cairo, int /*long*/ layout);
-public static final void pango_cairo_show_layout(int /*long*/ cairo, int /*long*/ layout) {
+public static final native void _pango_cairo_show_layout(long /*int*/ cairo, long /*int*/ layout);
+public static final void pango_cairo_show_layout(long /*int*/ cairo, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_cairo_show_layout(cairo, layout);
@@ -13528,8 +13528,8 @@ public static final void pango_cairo_show_layout(int /*long*/ cairo, int /*long*
 	}
 }
 /** @param context cast=(PangoContext *) */
-public static final native int _pango_context_get_base_dir(int /*long*/ context);
-public static final int pango_context_get_base_dir(int /*long*/ context) {
+public static final native int _pango_context_get_base_dir(long /*int*/ context);
+public static final int pango_context_get_base_dir(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_context_get_base_dir(context);
@@ -13538,8 +13538,8 @@ public static final int pango_context_get_base_dir(int /*long*/ context) {
 	}
 }
 /** @param context cast=(PangoContext *) */
-public static final native int /*long*/ _pango_context_get_language(int /*long*/ context);
-public static final int /*long*/ pango_context_get_language(int /*long*/ context) {
+public static final native long /*int*/ _pango_context_get_language(long /*int*/ context);
+public static final long /*int*/ pango_context_get_language(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_context_get_language(context);
@@ -13552,8 +13552,8 @@ public static final int /*long*/ pango_context_get_language(int /*long*/ context
  * @param desc cast=(const PangoFontDescription *)
  * @param language cast=(PangoLanguage *)
  */
-public static final native int /*long*/ _pango_context_get_metrics(int /*long*/ context, int /*long*/ desc, int /*long*/ language);
-public static final int /*long*/ pango_context_get_metrics(int /*long*/ context, int /*long*/ desc, int /*long*/ language) {
+public static final native long /*int*/ _pango_context_get_metrics(long /*int*/ context, long /*int*/ desc, long /*int*/ language);
+public static final long /*int*/ pango_context_get_metrics(long /*int*/ context, long /*int*/ desc, long /*int*/ language) {
 	lock.lock();
 	try {
 		return _pango_context_get_metrics(context, desc, language);
@@ -13566,8 +13566,8 @@ public static final int /*long*/ pango_context_get_metrics(int /*long*/ context,
  * @param families cast=(PangoFontFamily ***)
  * @param n_families cast=(int *)
  */
-public static final native void _pango_context_list_families(int /*long*/ context, int /*long*/[] families, int[] n_families);
-public static final void pango_context_list_families(int /*long*/ context, int /*long*/[] families, int[] n_families) {
+public static final native void _pango_context_list_families(long /*int*/ context, long /*int*/[] families, int[] n_families);
+public static final void pango_context_list_families(long /*int*/ context, long /*int*/[] families, int[] n_families) {
 	lock.lock();
 	try {
 		_pango_context_list_families(context, families, n_families);
@@ -13576,8 +13576,8 @@ public static final void pango_context_list_families(int /*long*/ context, int /
 	}
 }
 /** @param context cast=(PangoContext *) */
-public static final native void _pango_context_set_base_dir(int /*long*/ context, int direction);
-public static final void pango_context_set_base_dir(int /*long*/ context, int direction) {
+public static final native void _pango_context_set_base_dir(long /*int*/ context, int direction);
+public static final void pango_context_set_base_dir(long /*int*/ context, int direction) {
 	lock.lock();
 	try {
 		_pango_context_set_base_dir(context, direction);
@@ -13589,8 +13589,8 @@ public static final void pango_context_set_base_dir(int /*long*/ context, int di
  * @param context cast=(PangoContext *)
  * @param language cast=(PangoLanguage *)
  */
-public static final native void _pango_context_set_language(int /*long*/ context, int /*long*/ language);
-public static final void pango_context_set_language(int /*long*/ context, int /*long*/ language) {
+public static final native void _pango_context_set_language(long /*int*/ context, long /*int*/ language);
+public static final void pango_context_set_language(long /*int*/ context, long /*int*/ language) {
 	lock.lock();
 	try {
 		_pango_context_set_language(context, language);
@@ -13599,8 +13599,8 @@ public static final void pango_context_set_language(int /*long*/ context, int /*
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int /*long*/ _pango_font_description_copy(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_copy(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_copy(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_copy(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_copy(desc);
@@ -13609,8 +13609,8 @@ public static final int /*long*/ pango_font_description_copy(int /*long*/ desc)
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native void _pango_font_description_free(int /*long*/ desc);
-public static final void pango_font_description_free(int /*long*/ desc) {
+public static final native void _pango_font_description_free(long /*int*/ desc);
+public static final void pango_font_description_free(long /*int*/ desc) {
 	lock.lock();
 	try {
 		_pango_font_description_free(desc);
@@ -13619,8 +13619,8 @@ public static final void pango_font_description_free(int /*long*/ desc) {
 	}
 }
 /** @param str cast=(const char *),flags=no_out critical */
-public static final native int /*long*/ _pango_font_description_from_string(byte[] str);
-public static final int /*long*/ pango_font_description_from_string(byte[] str) {
+public static final native long /*int*/ _pango_font_description_from_string(byte[] str);
+public static final long /*int*/ pango_font_description_from_string(byte[] str) {
 	lock.lock();
 	try {
 		return _pango_font_description_from_string(str);
@@ -13629,8 +13629,8 @@ public static final int /*long*/ pango_font_description_from_string(byte[] str)
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int /*long*/ _pango_font_description_get_family(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_get_family(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_get_family(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_get_family(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_family(desc);
@@ -13639,8 +13639,8 @@ public static final int /*long*/ pango_font_description_get_family(int /*long*/
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int _pango_font_description_get_size(int /*long*/ desc);
-public static final int pango_font_description_get_size(int /*long*/ desc) {
+public static final native int _pango_font_description_get_size(long /*int*/ desc);
+public static final int pango_font_description_get_size(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_size(desc);
@@ -13649,8 +13649,8 @@ public static final int pango_font_description_get_size(int /*long*/ desc) {
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int _pango_font_description_get_style(int /*long*/ desc);
-public static final int pango_font_description_get_style(int /*long*/ desc) {
+public static final native int _pango_font_description_get_style(long /*int*/ desc);
+public static final int pango_font_description_get_style(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_style(desc);
@@ -13659,8 +13659,8 @@ public static final int pango_font_description_get_style(int /*long*/ desc) {
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int _pango_font_description_get_weight(int /*long*/ desc);
-public static final int pango_font_description_get_weight(int /*long*/ desc) {
+public static final native int _pango_font_description_get_weight(long /*int*/ desc);
+public static final int pango_font_description_get_weight(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_weight(desc);
@@ -13668,8 +13668,8 @@ public static final int pango_font_description_get_weight(int /*long*/ desc) {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_new();
-public static final int /*long*/ pango_font_description_new() {
+public static final native long /*int*/ _pango_font_description_new();
+public static final long /*int*/ pango_font_description_new() {
 	lock.lock();
 	try {
 		return _pango_font_description_new();
@@ -13681,8 +13681,8 @@ public static final int /*long*/ pango_font_description_new() {
  * @param desc cast=(PangoFontDescription *)
  * @param family cast=(const char *),flags=no_out critical
  */
-public static final native void _pango_font_description_set_family(int /*long*/ desc, byte[] family);
-public static final void pango_font_description_set_family(int /*long*/ desc, byte[] family) {
+public static final native void _pango_font_description_set_family(long /*int*/ desc, byte[] family);
+public static final void pango_font_description_set_family(long /*int*/ desc, byte[] family) {
 	lock.lock();
 	try {
 		_pango_font_description_set_family(desc, family);
@@ -13694,8 +13694,8 @@ public static final void pango_font_description_set_family(int /*long*/ desc, by
  * @param desc cast=(PangoFontDescription *)
  * @param size cast=(gint)
  */
-public static final native void _pango_font_description_set_size(int /*long*/ desc, int size);
-public static final void pango_font_description_set_size(int /*long*/ desc, int size) {
+public static final native void _pango_font_description_set_size(long /*int*/ desc, int size);
+public static final void pango_font_description_set_size(long /*int*/ desc, int size) {
 	lock.lock();
 	try {
 		_pango_font_description_set_size(desc, size);
@@ -13707,8 +13707,8 @@ public static final void pango_font_description_set_size(int /*long*/ desc, int
  * @param desc cast=(PangoFontDescription *)
  * @param stretch cast=(PangoStretch)
  */
-public static final native void _pango_font_description_set_stretch(int /*long*/ desc, int stretch);
-public static final void pango_font_description_set_stretch(int /*long*/ desc, int stretch) {
+public static final native void _pango_font_description_set_stretch(long /*int*/ desc, int stretch);
+public static final void pango_font_description_set_stretch(long /*int*/ desc, int stretch) {
 	lock.lock();
 	try {
 		_pango_font_description_set_stretch(desc, stretch);
@@ -13720,8 +13720,8 @@ public static final void pango_font_description_set_stretch(int /*long*/ desc, i
  * @param desc cast=(PangoFontDescription *)
  * @param weight cast=(PangoStyle)
  */
-public static final native void _pango_font_description_set_style(int /*long*/ desc, int weight);
-public static final void pango_font_description_set_style(int /*long*/ desc, int weight) {
+public static final native void _pango_font_description_set_style(long /*int*/ desc, int weight);
+public static final void pango_font_description_set_style(long /*int*/ desc, int weight) {
 	lock.lock();
 	try {
 		_pango_font_description_set_style(desc, weight);
@@ -13733,8 +13733,8 @@ public static final void pango_font_description_set_style(int /*long*/ desc, int
  * @param desc cast=(PangoFontDescription *)
  * @param weight cast=(PangoWeight)
  */
-public static final native void _pango_font_description_set_weight(int /*long*/ desc, int weight);
-public static final void pango_font_description_set_weight(int /*long*/ desc, int weight) {
+public static final native void _pango_font_description_set_weight(long /*int*/ desc, int weight);
+public static final void pango_font_description_set_weight(long /*int*/ desc, int weight) {
 	lock.lock();
 	try {
 		_pango_font_description_set_weight(desc, weight);
@@ -13743,8 +13743,8 @@ public static final void pango_font_description_set_weight(int /*long*/ desc, in
 	}
 }
 /** @param desc cast=(PangoFontDescription *) */
-public static final native int /*long*/ _pango_font_description_to_string(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_to_string(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_to_string(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_to_string(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_to_string(desc);
@@ -13753,8 +13753,8 @@ public static final int /*long*/ pango_font_description_to_string(int /*long*/ d
 	}
 }
 /** @param face cast=(PangoFontFace *) */
-public static final native int /*long*/ _pango_font_face_describe(int /*long*/ face);
-public static final int /*long*/ pango_font_face_describe(int /*long*/ face) {
+public static final native long /*int*/ _pango_font_face_describe(long /*int*/ face);
+public static final long /*int*/ pango_font_face_describe(long /*int*/ face) {
 	lock.lock();
 	try {
 		return _pango_font_face_describe(face);
@@ -13763,8 +13763,8 @@ public static final int /*long*/ pango_font_face_describe(int /*long*/ face) {
 	}
 }
 /** @param family cast=(PangoFontFamily *) */
-public static final native int /*long*/ _pango_font_family_get_name(int /*long*/ family);
-public static final int /*long*/ pango_font_family_get_name(int /*long*/ family) {
+public static final native long /*int*/ _pango_font_family_get_name(long /*int*/ family);
+public static final long /*int*/ pango_font_family_get_name(long /*int*/ family) {
 	lock.lock();
 	try {
 		return _pango_font_family_get_name(family);
@@ -13777,8 +13777,8 @@ public static final int /*long*/ pango_font_family_get_name(int /*long*/ family)
  * @param faces cast=(PangoFontFace ***)
  * @param n_faces cast=(int *)
  */
-public static final native void _pango_font_family_list_faces(int /*long*/ family, int /*long*/[] faces, int[] n_faces);
-public static final void pango_font_family_list_faces(int /*long*/ family, int /*long*/[] faces, int[] n_faces) {
+public static final native void _pango_font_family_list_faces(long /*int*/ family, long /*int*/[] faces, int[] n_faces);
+public static final void pango_font_family_list_faces(long /*int*/ family, long /*int*/[] faces, int[] n_faces) {
 	lock.lock();
 	try {
 		_pango_font_family_list_faces(family, faces, n_faces);
@@ -13790,8 +13790,8 @@ public static final void pango_font_family_list_faces(int /*long*/ family, int /
  * @param font cast=(PangoFont *)
  * @param language cast=(PangoLanguage *)
  */
-public static final native int /*long*/ _pango_font_get_metrics(int /*long*/ font, int /*long*/ language);
-public static final int /*long*/ pango_font_get_metrics(int /*long*/ font, int /*long*/ language) {
+public static final native long /*int*/ _pango_font_get_metrics(long /*int*/ font, long /*int*/ language);
+public static final long /*int*/ pango_font_get_metrics(long /*int*/ font, long /*int*/ language) {
 	lock.lock();
 	try {
 		return _pango_font_get_metrics(font, language);
@@ -13800,8 +13800,8 @@ public static final int /*long*/ pango_font_get_metrics(int /*long*/ font, int /
 	}
 }
 /** @param metrics cast=(PangoFontMetrics *) */
-public static final native int _pango_font_metrics_get_approximate_char_width(int /*long*/ metrics);
-public static final int pango_font_metrics_get_approximate_char_width(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_approximate_char_width(long /*int*/ metrics);
+public static final int pango_font_metrics_get_approximate_char_width(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_approximate_char_width(metrics);
@@ -13810,8 +13810,8 @@ public static final int pango_font_metrics_get_approximate_char_width(int /*long
 	}
 }
 /** @param metrics cast=(PangoFontMetrics *) */
-public static final native int _pango_font_metrics_get_ascent(int /*long*/ metrics);
-public static final int pango_font_metrics_get_ascent(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_ascent(long /*int*/ metrics);
+public static final int pango_font_metrics_get_ascent(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_ascent(metrics);
@@ -13820,8 +13820,8 @@ public static final int pango_font_metrics_get_ascent(int /*long*/ metrics) {
 	}
 }
 /** @param metrics cast=(PangoFontMetrics *) */
-public static final native int _pango_font_metrics_get_descent(int /*long*/ metrics);
-public static final int pango_font_metrics_get_descent(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_descent(long /*int*/ metrics);
+public static final int pango_font_metrics_get_descent(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_descent(metrics);
@@ -13830,8 +13830,8 @@ public static final int pango_font_metrics_get_descent(int /*long*/ metrics) {
 	}
 }
 /** @method flags=dynamic */
-public static final native int _pango_font_metrics_get_underline_thickness(int /*long*/ metrics);
-public static final int pango_font_metrics_get_underline_thickness(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_underline_thickness(long /*int*/ metrics);
+public static final int pango_font_metrics_get_underline_thickness(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_underline_thickness(metrics);
@@ -13840,8 +13840,8 @@ public static final int pango_font_metrics_get_underline_thickness(int /*long*/
 	}
 }
 /** @method flags=dynamic */
-public static final native int _pango_font_metrics_get_underline_position(int /*long*/ metrics);
-public static final int pango_font_metrics_get_underline_position(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_underline_position(long /*int*/ metrics);
+public static final int pango_font_metrics_get_underline_position(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_underline_position(metrics);
@@ -13850,8 +13850,8 @@ public static final int pango_font_metrics_get_underline_position(int /*long*/ m
 	}
 }
 /** @method flags=dynamic */
-public static final native int _pango_font_metrics_get_strikethrough_thickness(int /*long*/ metrics);
-public static final int pango_font_metrics_get_strikethrough_thickness(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_strikethrough_thickness(long /*int*/ metrics);
+public static final int pango_font_metrics_get_strikethrough_thickness(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_strikethrough_thickness(metrics);
@@ -13860,8 +13860,8 @@ public static final int pango_font_metrics_get_strikethrough_thickness(int /*lon
 	}
 }
 /** @method flags=dynamic */
-public static final native int _pango_font_metrics_get_strikethrough_position(int /*long*/ metrics);
-public static final int pango_font_metrics_get_strikethrough_position(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_strikethrough_position(long /*int*/ metrics);
+public static final int pango_font_metrics_get_strikethrough_position(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_strikethrough_position(metrics);
@@ -13870,8 +13870,8 @@ public static final int pango_font_metrics_get_strikethrough_position(int /*long
 	}
 }
 /** @param metrics cast=(PangoFontMetrics *) */
-public static final native void _pango_font_metrics_unref(int /*long*/ metrics);
-public static final void pango_font_metrics_unref(int /*long*/ metrics) {
+public static final native void _pango_font_metrics_unref(long /*int*/ metrics);
+public static final void pango_font_metrics_unref(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		_pango_font_metrics_unref(metrics);
@@ -13880,8 +13880,8 @@ public static final void pango_font_metrics_unref(int /*long*/ metrics) {
 	}
 }
 /** @param language cast=(const char *),flags=no_out */
-public static final native int /*long*/ _pango_language_from_string(byte[] language);
-public static final int /*long*/ pango_language_from_string(byte[] language) {
+public static final native long /*int*/ _pango_language_from_string(byte[] language);
+public static final long /*int*/ pango_language_from_string(byte[] language) {
 	lock.lock();
 	try {
 		return _pango_language_from_string(language);
@@ -13890,8 +13890,8 @@ public static final int /*long*/ pango_language_from_string(byte[] language) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native void _pango_layout_context_changed(int /*long*/ layout);
-public static final void pango_layout_context_changed(int /*long*/ layout) {
+public static final native void _pango_layout_context_changed(long /*int*/ layout);
+public static final void pango_layout_context_changed(long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_layout_context_changed(layout);
@@ -13900,8 +13900,8 @@ public static final void pango_layout_context_changed(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int _pango_layout_get_alignment(int /*long*/ layout);
-public static final int pango_layout_get_alignment(int /*long*/ layout) {
+public static final native int _pango_layout_get_alignment(long /*int*/ layout);
+public static final int pango_layout_get_alignment(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_alignment(layout);
@@ -13910,8 +13910,8 @@ public static final int pango_layout_get_alignment(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int /*long*/ _pango_layout_get_context(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_context(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_context(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_context(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_context(layout);
@@ -13920,8 +13920,8 @@ public static final int /*long*/ pango_layout_get_context(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int /*long*/ _pango_layout_get_attributes(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_attributes(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_attributes(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_attributes(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_attributes(layout);
@@ -13930,8 +13930,8 @@ public static final int /*long*/ pango_layout_get_attributes(int /*long*/ layout
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int _pango_layout_get_indent(int /*long*/ layout);
-public static final int pango_layout_get_indent(int /*long*/ layout) {
+public static final native int _pango_layout_get_indent(long /*int*/ layout);
+public static final int pango_layout_get_indent(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_indent(layout);
@@ -13940,8 +13940,8 @@ public static final int pango_layout_get_indent(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int /*long*/ _pango_layout_get_iter(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_iter(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_iter(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_iter(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_iter(layout);
@@ -13950,8 +13950,8 @@ public static final int /*long*/ pango_layout_get_iter(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native boolean _pango_layout_get_justify(int /*long*/ layout);
-public static final boolean pango_layout_get_justify(int /*long*/ layout) {
+public static final native boolean _pango_layout_get_justify(long /*int*/ layout);
+public static final boolean pango_layout_get_justify(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_justify(layout);
@@ -13960,8 +13960,8 @@ public static final boolean pango_layout_get_justify(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int /*long*/ _pango_layout_get_line(int /*long*/ layout, int line);
-public static final int /*long*/ pango_layout_get_line(int /*long*/ layout, int line) {
+public static final native long /*int*/ _pango_layout_get_line(long /*int*/ layout, int line);
+public static final long /*int*/ pango_layout_get_line(long /*int*/ layout, int line) {
 	lock.lock();
 	try {
 		return _pango_layout_get_line(layout, line);
@@ -13970,8 +13970,8 @@ public static final int /*long*/ pango_layout_get_line(int /*long*/ layout, int
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int _pango_layout_get_line_count(int /*long*/ layout);
-public static final int pango_layout_get_line_count(int /*long*/ layout) {
+public static final native int _pango_layout_get_line_count(long /*int*/ layout);
+public static final int pango_layout_get_line_count(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_line_count(layout);
@@ -13984,8 +13984,8 @@ public static final int pango_layout_get_line_count(int /*long*/ layout) {
  * @param attrs cast=(PangoLogAttr **)
  * @param n_attrs cast=(int *)
  */
-public static final native void _pango_layout_get_log_attrs(int /*long*/ layout, int /*long*/[] attrs, int[] n_attrs);
-public static final void pango_layout_get_log_attrs(int /*long*/ layout, int /*long*/[] attrs, int[] n_attrs) {
+public static final native void _pango_layout_get_log_attrs(long /*int*/ layout, long /*int*/[] attrs, int[] n_attrs);
+public static final void pango_layout_get_log_attrs(long /*int*/ layout, long /*int*/[] attrs, int[] n_attrs) {
 	lock.lock();
 	try {
 		_pango_layout_get_log_attrs(layout, attrs, n_attrs);
@@ -13998,8 +13998,8 @@ public static final void pango_layout_get_log_attrs(int /*long*/ layout, int /*l
  * @param width cast=(int *)
  * @param height cast=(int *)
  */
-public static final native void _pango_layout_get_size(int /*long*/ layout, int[] width, int[] height);
-public static final void pango_layout_get_size(int /*long*/ layout, int[] width, int[] height) {
+public static final native void _pango_layout_get_size(long /*int*/ layout, int[] width, int[] height);
+public static final void pango_layout_get_size(long /*int*/ layout, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_pango_layout_get_size(layout, width, height);
@@ -14008,8 +14008,8 @@ public static final void pango_layout_get_size(int /*long*/ layout, int[] width,
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int _pango_layout_get_spacing(int /*long*/ layout);
-public static final int pango_layout_get_spacing(int /*long*/ layout) {
+public static final native int _pango_layout_get_spacing(long /*int*/ layout);
+public static final int pango_layout_get_spacing(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_spacing(layout);
@@ -14018,8 +14018,8 @@ public static final int pango_layout_get_spacing(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native int /*long*/ _pango_layout_get_tabs(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_tabs(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_tabs(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_tabs(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_tabs(layout);
@@ -14028,8 +14028,8 @@ public static final int /*long*/ pango_layout_get_tabs(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int /*long*/ _pango_layout_get_text(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_text(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_text(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_text(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_text(layout);
@@ -14038,8 +14038,8 @@ public static final int /*long*/ pango_layout_get_text(int /*long*/ layout) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native int _pango_layout_get_width(int /*long*/ layout);
-public static final int pango_layout_get_width(int /*long*/ layout) {
+public static final native int _pango_layout_get_width(long /*int*/ layout);
+public static final int pango_layout_get_width(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_width(layout);
@@ -14051,8 +14051,8 @@ public static final int pango_layout_get_width(int /*long*/ layout) {
  * @param layout cast=(PangoLayout*)
  * @param pos flags=no_in
  */
-public static final native void _pango_layout_index_to_pos(int /*long*/ layout, int index, PangoRectangle pos);
-public static final void pango_layout_index_to_pos(int /*long*/ layout, int index, PangoRectangle pos) {
+public static final native void _pango_layout_index_to_pos(long /*int*/ layout, int index, PangoRectangle pos);
+public static final void pango_layout_index_to_pos(long /*int*/ layout, int index, PangoRectangle pos) {
 	lock.lock();
 	try {
 		_pango_layout_index_to_pos(layout, index, pos);
@@ -14061,8 +14061,8 @@ public static final void pango_layout_index_to_pos(int /*long*/ layout, int inde
 	}
 }
 /** @param iter cast=(PangoLayoutIter*) */
-public static final native void _pango_layout_iter_free(int /*long*/ iter);
-public static final void pango_layout_iter_free(int /*long*/ iter) {
+public static final native void _pango_layout_iter_free(long /*int*/ iter);
+public static final void pango_layout_iter_free(long /*int*/ iter) {
 	lock.lock();
 	try {
 		_pango_layout_iter_free(iter);
@@ -14075,8 +14075,8 @@ public static final void pango_layout_iter_free(int /*long*/ iter) {
  * @param ink_rect flags=no_in
  * @param logical_rect flags=no_in
  */
-public static final native void _pango_layout_iter_get_line_extents(int /*long*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final void pango_layout_iter_get_line_extents(int /*long*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native void _pango_layout_iter_get_line_extents(long /*int*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final void pango_layout_iter_get_line_extents(long /*int*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		_pango_layout_iter_get_line_extents(iter, ink_rect, logical_rect);
@@ -14085,8 +14085,8 @@ public static final void pango_layout_iter_get_line_extents(int /*long*/ iter, P
 	}
 }
 /** @param iter cast=(PangoLayoutIter*) */
-public static final native int _pango_layout_iter_get_index(int /*long*/ iter);
-public static final int pango_layout_iter_get_index(int /*long*/ iter) {
+public static final native int _pango_layout_iter_get_index(long /*int*/ iter);
+public static final int pango_layout_iter_get_index(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_get_index(iter);
@@ -14095,8 +14095,8 @@ public static final int pango_layout_iter_get_index(int /*long*/ iter) {
 	}
 }
 /** @param iter cast=(PangoLayoutIter*) */
-public static final native int /*long*/ _pango_layout_iter_get_run(int /*long*/ iter);
-public static final int /*long*/ pango_layout_iter_get_run(int /*long*/ iter) {
+public static final native long /*int*/ _pango_layout_iter_get_run(long /*int*/ iter);
+public static final long /*int*/ pango_layout_iter_get_run(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_get_run(iter);
@@ -14105,8 +14105,8 @@ public static final int /*long*/ pango_layout_iter_get_run(int /*long*/ iter) {
 	}
 }
 /** @param iter cast=(PangoLayoutIter*) */
-public static final native boolean _pango_layout_iter_next_line(int /*long*/ iter);
-public static final boolean pango_layout_iter_next_line(int /*long*/ iter) {
+public static final native boolean _pango_layout_iter_next_line(long /*int*/ iter);
+public static final boolean pango_layout_iter_next_line(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_next_line(iter);
@@ -14115,8 +14115,8 @@ public static final boolean pango_layout_iter_next_line(int /*long*/ iter) {
 	}
 }
 /** @param iter cast=(PangoLayoutIter*) */
-public static final native boolean _pango_layout_iter_next_run(int /*long*/ iter);
-public static final boolean pango_layout_iter_next_run(int /*long*/ iter) {
+public static final native boolean _pango_layout_iter_next_run(long /*int*/ iter);
+public static final boolean pango_layout_iter_next_run(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_next_run(iter);
@@ -14129,8 +14129,8 @@ public static final boolean pango_layout_iter_next_run(int /*long*/ iter) {
  * @param ink_rect cast=(PangoRectangle *),flags=no_in
  * @param logical_rect cast=(PangoRectangle *),flags=no_in
  */
-public static final native void _pango_layout_line_get_extents(int /*long*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final void pango_layout_line_get_extents(int /*long*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native void _pango_layout_line_get_extents(long /*int*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final void pango_layout_line_get_extents(long /*int*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		_pango_layout_line_get_extents(line, ink_rect, logical_rect);
@@ -14143,8 +14143,8 @@ public static final void pango_layout_line_get_extents(int /*long*/ line, PangoR
  * @param index_ cast=(int *)
  * @param trailing cast=(int *)
  */
-public static final native boolean _pango_layout_line_x_to_index(int /*long*/ line, int x_pos, int[] index_, int[] trailing);
-public static final boolean pango_layout_line_x_to_index(int /*long*/ line, int x_pos, int[] index_, int[] trailing) {
+public static final native boolean _pango_layout_line_x_to_index(long /*int*/ line, int x_pos, int[] index_, int[] trailing);
+public static final boolean pango_layout_line_x_to_index(long /*int*/ line, int x_pos, int[] index_, int[] trailing) {
 	lock.lock();
 	try {
 		return _pango_layout_line_x_to_index(line, x_pos, index_, trailing);
@@ -14153,8 +14153,8 @@ public static final boolean pango_layout_line_x_to_index(int /*long*/ line, int
 	}
 }
 /** @param context cast=(PangoContext *) */
-public static final native int /*long*/ _pango_layout_new(int /*long*/ context);
-public static final int /*long*/ pango_layout_new(int /*long*/ context) {
+public static final native long /*int*/ _pango_layout_new(long /*int*/ context);
+public static final long /*int*/ pango_layout_new(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_layout_new(context);
@@ -14163,8 +14163,8 @@ public static final int /*long*/ pango_layout_new(int /*long*/ context) {
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native void _pango_layout_set_alignment (int /*long*/ layout, int alignment);
-public static final void pango_layout_set_alignment (int /*long*/ layout, int alignment) {
+public static final native void _pango_layout_set_alignment (long /*int*/ layout, int alignment);
+public static final void pango_layout_set_alignment (long /*int*/ layout, int alignment) {
 	lock.lock();
 	try {
 		_pango_layout_set_alignment(layout, alignment);
@@ -14176,8 +14176,8 @@ public static final void pango_layout_set_alignment (int /*long*/ layout, int al
  * @param layout cast=(PangoLayout *)
  * @param attrs cast=(PangoAttrList *)
  */
-public static final native void _pango_layout_set_attributes(int /*long*/ layout, int /*long*/ attrs);
-public static final void pango_layout_set_attributes(int /*long*/ layout, int /*long*/ attrs) {
+public static final native void _pango_layout_set_attributes(long /*int*/ layout, long /*int*/ attrs);
+public static final void pango_layout_set_attributes(long /*int*/ layout, long /*int*/ attrs) {
 	lock.lock();
 	try {
 		_pango_layout_set_attributes(layout, attrs);
@@ -14186,8 +14186,8 @@ public static final void pango_layout_set_attributes(int /*long*/ layout, int /*
 	}
 }
 /** @method flags=dynamic */
-public static final native void _pango_layout_set_auto_dir(int /*long*/ layout, boolean auto_dir);
-public static final void pango_layout_set_auto_dir(int /*long*/ layout, boolean auto_dir) {
+public static final native void _pango_layout_set_auto_dir(long /*int*/ layout, boolean auto_dir);
+public static final void pango_layout_set_auto_dir(long /*int*/ layout, boolean auto_dir) {
 	lock.lock();
 	try {
 		_pango_layout_set_auto_dir(layout, auto_dir);
@@ -14199,8 +14199,8 @@ public static final void pango_layout_set_auto_dir(int /*long*/ layout, boolean
  * @param context cast=(PangoLayout *)
  * @param descr cast=(PangoFontDescription *)
  */
-public static final native void _pango_layout_set_font_description(int /*long*/ context, int /*long*/ descr);
-public static final void pango_layout_set_font_description(int /*long*/ context, int /*long*/ descr) {
+public static final native void _pango_layout_set_font_description(long /*int*/ context, long /*int*/ descr);
+public static final void pango_layout_set_font_description(long /*int*/ context, long /*int*/ descr) {
 	lock.lock();
 	try {
 		_pango_layout_set_font_description(context, descr);
@@ -14209,8 +14209,8 @@ public static final void pango_layout_set_font_description(int /*long*/ context,
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native void _pango_layout_set_indent(int /*long*/ layout, int indent);
-public static final void pango_layout_set_indent(int /*long*/ layout, int indent) {
+public static final native void _pango_layout_set_indent(long /*int*/ layout, int indent);
+public static final void pango_layout_set_indent(long /*int*/ layout, int indent) {
 	lock.lock();
 	try {
 		_pango_layout_set_indent(layout, indent);
@@ -14219,8 +14219,8 @@ public static final void pango_layout_set_indent(int /*long*/ layout, int indent
 	}
 }
 /** @param layout cast=(PangoLayout*) */
-public static final native void _pango_layout_set_justify(int /*long*/ layout, boolean justify);
-public static final void pango_layout_set_justify(int /*long*/ layout, boolean justify) {
+public static final native void _pango_layout_set_justify(long /*int*/ layout, boolean justify);
+public static final void pango_layout_set_justify(long /*int*/ layout, boolean justify) {
 	lock.lock();
 	try {
 		_pango_layout_set_justify(layout, justify);
@@ -14232,8 +14232,8 @@ public static final void pango_layout_set_justify(int /*long*/ layout, boolean j
  * @param context cast=(PangoLayout *)
  * @param setting cast=(gboolean)
  */
-public static final native void _pango_layout_set_single_paragraph_mode(int /*long*/ context, boolean setting);
-public static final void pango_layout_set_single_paragraph_mode(int /*long*/ context, boolean setting) {
+public static final native void _pango_layout_set_single_paragraph_mode(long /*int*/ context, boolean setting);
+public static final void pango_layout_set_single_paragraph_mode(long /*int*/ context, boolean setting) {
 	lock.lock();
 	try {
 		_pango_layout_set_single_paragraph_mode(context, setting);
@@ -14242,8 +14242,8 @@ public static final void pango_layout_set_single_paragraph_mode(int /*long*/ con
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native void _pango_layout_set_spacing(int /*long*/ layout, int spacing);
-public static final void pango_layout_set_spacing(int /*long*/ layout, int spacing) {
+public static final native void _pango_layout_set_spacing(long /*int*/ layout, int spacing);
+public static final void pango_layout_set_spacing(long /*int*/ layout, int spacing) {
 	lock.lock();
 	try {
 		_pango_layout_set_spacing(layout, spacing);
@@ -14255,8 +14255,8 @@ public static final void pango_layout_set_spacing(int /*long*/ layout, int spaci
  * @param layout cast=(PangoLayout *)
  * @param tabs cast=(PangoTabArray *)
  */
-public static final native void _pango_layout_set_tabs(int /*long*/ layout, int /*long*/ tabs);
-public static final void pango_layout_set_tabs(int /*long*/ layout, int /*long*/ tabs) {
+public static final native void _pango_layout_set_tabs(long /*int*/ layout, long /*int*/ tabs);
+public static final void pango_layout_set_tabs(long /*int*/ layout, long /*int*/ tabs) {
 	lock.lock();
 	try {
 		_pango_layout_set_tabs(layout, tabs);
@@ -14269,8 +14269,8 @@ public static final void pango_layout_set_tabs(int /*long*/ layout, int /*long*/
  * @param text cast=(const char *),flags=no_out critical
  * @param length cast=(int)
  */
-public static final native void _pango_layout_set_text(int /*long*/ layout, byte[] text, int length);
-public static final void pango_layout_set_text(int /*long*/ layout, byte[] text, int length) {
+public static final native void _pango_layout_set_text(long /*int*/ layout, byte[] text, int length);
+public static final void pango_layout_set_text(long /*int*/ layout, byte[] text, int length) {
 	lock.lock();
 	try {
 		_pango_layout_set_text(layout, text, length);
@@ -14279,8 +14279,8 @@ public static final void pango_layout_set_text(int /*long*/ layout, byte[] text,
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native void _pango_layout_set_width(int /*long*/ layout, int width);
-public static final void pango_layout_set_width(int /*long*/ layout, int width) {
+public static final native void _pango_layout_set_width(long /*int*/ layout, int width);
+public static final void pango_layout_set_width(long /*int*/ layout, int width) {
 	lock.lock();
 	try {
 		_pango_layout_set_width(layout, width);
@@ -14289,8 +14289,8 @@ public static final void pango_layout_set_width(int /*long*/ layout, int width)
 	}
 }
 /** @param layout cast=(PangoLayout *) */
-public static final native void _pango_layout_set_wrap (int /*long*/ layout, int wrap);
-public static final void pango_layout_set_wrap (int /*long*/ layout, int wrap) {
+public static final native void _pango_layout_set_wrap (long /*int*/ layout, int wrap);
+public static final void pango_layout_set_wrap (long /*int*/ layout, int wrap) {
 	lock.lock();
 	try {
 		_pango_layout_set_wrap(layout, wrap);
@@ -14303,8 +14303,8 @@ public static final void pango_layout_set_wrap (int /*long*/ layout, int wrap) {
  * @param index cast=(int *)
  * @param trailing cast=(int *)
  */
-public static final native boolean _pango_layout_xy_to_index(int /*long*/ layout, int x, int y, int[] index, int[] trailing);
-public static final boolean pango_layout_xy_to_index(int /*long*/ layout, int x, int y, int[] index, int[] trailing) {
+public static final native boolean _pango_layout_xy_to_index(long /*int*/ layout, int x, int y, int[] index, int[] trailing);
+public static final boolean pango_layout_xy_to_index(long /*int*/ layout, int x, int y, int[] index, int[] trailing) {
 	lock.lock();
 	try {
 		return _pango_layout_xy_to_index(layout, x, y, index, trailing);
@@ -14313,8 +14313,8 @@ public static final boolean pango_layout_xy_to_index(int /*long*/ layout, int x,
 	}
 }
 /** @param tab_array cast=(PangoTabArray *) */
-public static final native int _pango_tab_array_get_size(int /*long*/ tab_array);
-public static final int pango_tab_array_get_size(int /*long*/ tab_array) {
+public static final native int _pango_tab_array_get_size(long /*int*/ tab_array);
+public static final int pango_tab_array_get_size(long /*int*/ tab_array) {
 	lock.lock();
 	try {
 		return _pango_tab_array_get_size(tab_array);
@@ -14327,8 +14327,8 @@ public static final int pango_tab_array_get_size(int /*long*/ tab_array) {
  * @param alignments cast=(PangoTabAlign **)
  * @param locations cast=(int **)
  */
-public static final native void _pango_tab_array_get_tabs(int /*long*/ tab_array, int /*long*/[] alignments, int /*long*/[] locations);
-public static final void pango_tab_array_get_tabs(int /*long*/ tab_array, int /*long*/[] alignments, int /*long*/[] locations) {
+public static final native void _pango_tab_array_get_tabs(long /*int*/ tab_array, long /*int*/[] alignments, long /*int*/[] locations);
+public static final void pango_tab_array_get_tabs(long /*int*/ tab_array, long /*int*/[] alignments, long /*int*/[] locations) {
 	lock.lock();
 	try {
 		_pango_tab_array_get_tabs(tab_array, alignments, locations);
@@ -14337,8 +14337,8 @@ public static final void pango_tab_array_get_tabs(int /*long*/ tab_array, int /*
 	}
 }
 /** @param tab_array cast=(PangoTabArray *) */
-public static final native void _pango_tab_array_free(int /*long*/ tab_array);
-public static final void pango_tab_array_free(int /*long*/ tab_array) {
+public static final native void _pango_tab_array_free(long /*int*/ tab_array);
+public static final void pango_tab_array_free(long /*int*/ tab_array) {
 	lock.lock();
 	try {
 		_pango_tab_array_free(tab_array);
@@ -14350,8 +14350,8 @@ public static final void pango_tab_array_free(int /*long*/ tab_array) {
  * @param initial_size cast=(gint)
  * @param positions_in_pixels cast=(gboolean)
  */
-public static final native int /*long*/ _pango_tab_array_new(int initial_size, boolean positions_in_pixels);
-public static final int /*long*/ pango_tab_array_new(int initial_size, boolean positions_in_pixels) {
+public static final native long /*int*/ _pango_tab_array_new(int initial_size, boolean positions_in_pixels);
+public static final long /*int*/ pango_tab_array_new(int initial_size, boolean positions_in_pixels) {
 	lock.lock();
 	try {
 		return _pango_tab_array_new(initial_size, positions_in_pixels);
@@ -14365,8 +14365,8 @@ public static final int /*long*/ pango_tab_array_new(int initial_size, boolean p
  * @param alignment cast=(PangoTabAlign)
  * @param location cast=(gint)
  */
-public static final native void _pango_tab_array_set_tab(int /*long*/ tab_array, int tab_index, int /*long*/ alignment, int location);
-public static final void pango_tab_array_set_tab(int /*long*/ tab_array, int tab_index, int /*long*/ alignment, int location) {
+public static final native void _pango_tab_array_set_tab(long /*int*/ tab_array, int tab_index, long /*int*/ alignment, int location);
+public static final void pango_tab_array_set_tab(long /*int*/ tab_array, int tab_index, long /*int*/ alignment, int location) {
 	lock.lock();
 	try {
 		_pango_tab_array_set_tab(tab_array, tab_index, alignment, location);
@@ -14380,8 +14380,8 @@ public static final void pango_tab_array_set_tab(int /*long*/ tab_array, int tab
  * @param relationship cast=(AtkRelationType)
  * @param target cast=(AtkObject *)
  */
-public static final native boolean _atk_object_add_relationship (int /*long*/ object, int relationship, int /*long*/ target);
-public static final boolean atk_object_add_relationship (int /*long*/ object, int relationship, int /*long*/ target) {
+public static final native boolean _atk_object_add_relationship (long /*int*/ object, int relationship, long /*int*/ target);
+public static final boolean atk_object_add_relationship (long /*int*/ object, int relationship, long /*int*/ target) {
 	lock.lock();
 	try {
 		return _atk_object_add_relationship(object, relationship, target);
diff --git a/org/eclipse/swt/internal/gtk/PangoAttribute.java b/org/eclipse/swt/internal/gtk/PangoAttribute.java
index f218643..e7ffd49 100644
--- a/org/eclipse/swt/internal/gtk/PangoAttribute.java
+++ b/org/eclipse/swt/internal/gtk/PangoAttribute.java
@@ -17,7 +17,7 @@ package org.eclipse.swt.internal.gtk;
 
 public class PangoAttribute {
 	/** @field cast=(const PangoAttrClass *) */
-	public int /*long*/ klass;
+	public long /*int*/ klass;
 	public int start_index;
 	public int end_index;
 	public static final int sizeof = OS.PangoAttribute_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/PangoItem.java b/org/eclipse/swt/internal/gtk/PangoItem.java
index c0f5b01..2cee5a8 100644
--- a/org/eclipse/swt/internal/gtk/PangoItem.java
+++ b/org/eclipse/swt/internal/gtk/PangoItem.java
@@ -19,16 +19,16 @@ public class PangoItem {
 	public int length;
 	public int num_chars;
 	/** @field accessor=analysis.shape_engine,cast=(PangoEngineShape *) */
-	public int /*long*/ analysis_shape_engine;
+	public long /*int*/ analysis_shape_engine;
 	/** @field accessor=analysis.lang_engine,cast=(PangoEngineLang *) */
-	public int /*long*/ analysis_lang_engine;
+	public long /*int*/ analysis_lang_engine;
 	/** @field accessor=analysis.font,cast=(PangoFont *) */
-	public int /*long*/ analysis_font;
+	public long /*int*/ analysis_font;
 	/** @field accessor=analysis.level */
 	public byte analysis_level;
 	/** @field accessor=analysis.language,cast=(PangoLanguage *) */
-	public int /*long*/ analysis_language;
+	public long /*int*/ analysis_language;
 	/** @field accessor=analysis.extra_attrs,cast=(GSList *) */
-	public int /*long*/ analysis_extra_attrs;
+	public long /*int*/ analysis_extra_attrs;
 	public static final int sizeof = OS.PangoItem_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/PangoLayoutLine.java b/org/eclipse/swt/internal/gtk/PangoLayoutLine.java
index d1517c6..b50c9c1 100644
--- a/org/eclipse/swt/internal/gtk/PangoLayoutLine.java
+++ b/org/eclipse/swt/internal/gtk/PangoLayoutLine.java
@@ -16,11 +16,11 @@ package org.eclipse.swt.internal.gtk;
 
 public class PangoLayoutLine {
 	/** @field cast=(PangoLayout *) */
-	public int /*long*/ layout;
+	public long /*int*/ layout;
 	public int start_index;
 	public int length;
 	/** @field cast=(GSList *) */
-	public int /*long*/ runs;
+	public long /*int*/ runs;
 //	public boolean is_paragraph_start;
 //	public byte resolved_dir;
 	public static final int sizeof = OS.PangoLayoutLine_sizeof();
diff --git a/org/eclipse/swt/internal/gtk/PangoLayoutRun.java b/org/eclipse/swt/internal/gtk/PangoLayoutRun.java
index b032b6a..121bb50 100644
--- a/org/eclipse/swt/internal/gtk/PangoLayoutRun.java
+++ b/org/eclipse/swt/internal/gtk/PangoLayoutRun.java
@@ -16,8 +16,8 @@ package org.eclipse.swt.internal.gtk;
 
 public class PangoLayoutRun {
 	/** @field cast=(PangoItem *) */
-	public int /*long*/ item;
+	public long /*int*/ item;
 	/** @field cast=(PangoGlyphString *) */
-	public int /*long*/ glyphs;
+	public long /*int*/ glyphs;
 	public static final int sizeof = OS.PangoLayoutRun_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/XAnyEvent.java b/org/eclipse/swt/internal/gtk/XAnyEvent.java
index 9fc6482..f13f486 100644
--- a/org/eclipse/swt/internal/gtk/XAnyEvent.java
+++ b/org/eclipse/swt/internal/gtk/XAnyEvent.java
@@ -12,11 +12,11 @@ package org.eclipse.swt.internal.gtk;
 
  
 public abstract class XAnyEvent extends XEvent {
-	public int /*long*/ serial;
+	public long /*int*/ serial;
 	public int send_event;
 	/** @field cast=(Display *) */
-	public int /*long*/ display;
+	public long /*int*/ display;
 	/** @field cast=(Window) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public static final int sizeof = OS.XAnyEvent_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/XClientMessageEvent.java b/org/eclipse/swt/internal/gtk/XClientMessageEvent.java
index b1428fd..8983ab4 100644
--- a/org/eclipse/swt/internal/gtk/XClientMessageEvent.java
+++ b/org/eclipse/swt/internal/gtk/XClientMessageEvent.java
@@ -13,16 +13,16 @@ package org.eclipse.swt.internal.gtk;
  
 public class XClientMessageEvent {
 	public int type;
-	public int /*long*/ serial;
+	public long /*int*/ serial;
 	public boolean send_event;
 	/** @field cast=(Display *) */
-	public int /*long*/ display;
+	public long /*int*/ display;
 	/** @field cast=(Window) */
-	public int /*long*/ window;
+	public long /*int*/ window;
 	/** @field cast=(Atom) */
-	public int /*long*/ message_type;
+	public long /*int*/ message_type;
 	public int format;
 	/** @field accessor=data.l,cast=(long *) */
-	public int /*long*/[] data = new int /*long*/[5];
+	public long /*int*/[] data = new long /*int*/[5];
 	public static final int sizeof = OS.XClientMessageEvent_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/XCrossingEvent.java b/org/eclipse/swt/internal/gtk/XCrossingEvent.java
index b8631b9..1aded65 100644
--- a/org/eclipse/swt/internal/gtk/XCrossingEvent.java
+++ b/org/eclipse/swt/internal/gtk/XCrossingEvent.java
@@ -13,9 +13,9 @@ package org.eclipse.swt.internal.gtk;
  
 public class XCrossingEvent extends XAnyEvent {
 	/** @field cast=(Window) */
-	public int /*long*/ root;
+	public long /*int*/ root;
 	/** @field cast=(Window) */
-	public int /*long*/ subwindow;
+	public long /*int*/ subwindow;
 	/** @field cast=(Time) */
 	public int time;
 	public int x;
diff --git a/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java b/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java
index 9509633..6277565 100644
--- a/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java
+++ b/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java
@@ -13,17 +13,17 @@ package org.eclipse.swt.internal.gtk;
  
 public class XRenderPictureAttributes {
 	public boolean repeat;
-	public int /*long*/ alpha_map;
+	public long /*int*/ alpha_map;
 	public int alpha_x_origin;
 	public int alpha_y_origin;
 	public int clip_x_origin;
 	public int clip_y_origin;
-	public int /*long*/ clip_mask;
+	public long /*int*/ clip_mask;
 	public boolean graphics_exposures;
 	public int subwindow_mode;
 	public int poly_edge;
 	public int poly_mode;
-	public int /*long*/ dither;
+	public long /*int*/ dither;
 	public boolean component_alpha;
 	public static final int sizeof = OS.XRenderPictureAttributes_sizeof();
 }
diff --git a/org/eclipse/swt/internal/gtk/XWindowChanges.java b/org/eclipse/swt/internal/gtk/XWindowChanges.java
index b748c34..df24fb9 100644
--- a/org/eclipse/swt/internal/gtk/XWindowChanges.java
+++ b/org/eclipse/swt/internal/gtk/XWindowChanges.java
@@ -17,7 +17,7 @@ public class XWindowChanges {
 	public int width;
 	public int height;
 	public int border_width;
-	public int /*long*/ sibling;
+	public long /*int*/ sibling;
 	public int stack_mode;
 	public static final int sizeof = OS.XWindowChanges_sizeof();
 }
diff --git a/org/eclipse/swt/internal/mozilla/XPCOM.java b/org/eclipse/swt/internal/mozilla/XPCOM.java
index f474386..3f1c3d9 100644
--- a/org/eclipse/swt/internal/mozilla/XPCOM.java
+++ b/org/eclipse/swt/internal/mozilla/XPCOM.java
@@ -139,25 +139,25 @@ public static final native int nsDynamicFunctionLoad_sizeof ();
  * @param src cast=(const void *),flags=no_out critical
  * @param size cast=(size_t)
  */
-public static final native void memmove (int /*long*/ dest, nsDynamicFunctionLoad src, int /*long*/ size);
+public static final native void memmove (long /*int*/ dest, nsDynamicFunctionLoad src, long /*int*/ size);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *)
  * @param nbytes cast=(size_t)
  */
-public static final native void memmove(nsID dest, int /*long*/ src, int nbytes);
+public static final native void memmove(nsID dest, long /*int*/ src, int nbytes);
 /**
  * @param dest cast=(void *)
  * @param src cast=(const void *)
  * @param nbytes cast=(size_t)
  */
-public static final native void memmove(int /*long*/ dest, nsID src, int nbytes);
+public static final native void memmove(long /*int*/ dest, nsID src, int nbytes);
 /** @method flags=no_gen */
-public static final native int strlen_PRUnichar(int /*long*/ s);
+public static final native int strlen_PRUnichar(long /*int*/ s);
 
 /** @method flags=no_gen */
-public static final native int _JS_EvaluateUCScriptForPrincipals(byte[] mozillaPath, int /*long*/ cx, int /*long*/ obj, int /*long*/ principals, char[] chars, int length, byte[] filename, int lineno, int /*long*/[] retVal);	
-public static final int JS_EvaluateUCScriptForPrincipals(byte[] mozillaPath, int /*long*/ cx, int /*long*/ obj, int /*long*/ principals, char[] chars, int length, byte[] filename, int lineno, int /*long*/[] retVal) {
+public static final native int _JS_EvaluateUCScriptForPrincipals(byte[] mozillaPath, long /*int*/ cx, long /*int*/ obj, long /*int*/ principals, char[] chars, int length, byte[] filename, int lineno, long /*int*/[] retVal);	
+public static final int JS_EvaluateUCScriptForPrincipals(byte[] mozillaPath, long /*int*/ cx, long /*int*/ obj, long /*int*/ principals, char[] chars, int length, byte[] filename, int lineno, long /*int*/[] retVal) {
 	lock.lock();
 	try {
 		return _JS_EvaluateUCScriptForPrincipals(mozillaPath, cx, obj, principals, chars, length, filename, lineno, retVal);
@@ -167,8 +167,8 @@ public static final int JS_EvaluateUCScriptForPrincipals(byte[] mozillaPath, int
 }
 
 /** @param result cast=(nsIComponentManager**) */
-public static final native int _NS_GetComponentManager(int /*long*/[] result);
-public static final int NS_GetComponentManager(int /*long*/[] result) {
+public static final native int _NS_GetComponentManager(long /*int*/[] result);
+public static final int NS_GetComponentManager(long /*int*/[] result) {
 	lock.lock();
 	try {
 		return _NS_GetComponentManager(result);
@@ -177,8 +177,8 @@ public static final int NS_GetComponentManager(int /*long*/[] result) {
 	}
 }
 /** @param result cast=(nsIServiceManager**) */
-public static final native int _NS_GetServiceManager(int /*long*/[] result);
-public static final int NS_GetServiceManager(int /*long*/[] result) {
+public static final native int _NS_GetServiceManager(long /*int*/[] result);
+public static final int NS_GetServiceManager(long /*int*/[] result) {
 	lock.lock();
 	try {
 		return _NS_GetServiceManager(result);
@@ -191,8 +191,8 @@ public static final int NS_GetServiceManager(int /*long*/[] result) {
  * @param binDirectory cast=(nsIFile *)
  * @param appFileLocationProvider cast=(nsIDirectoryServiceProvider *)
  */
-public static final native int _NS_InitXPCOM2(int /*long*/ result, int /*long*/ binDirectory, int /*long*/ appFileLocationProvider);
-public static final int NS_InitXPCOM2(int /*long*/ result, int /*long*/ binDirectory, int /*long*/ appFileLocationProvider) {
+public static final native int _NS_InitXPCOM2(long /*int*/ result, long /*int*/ binDirectory, long /*int*/ appFileLocationProvider);
+public static final int NS_InitXPCOM2(long /*int*/ result, long /*int*/ binDirectory, long /*int*/ appFileLocationProvider) {
 	lock.lock();
 	try {
 		return _NS_InitXPCOM2(result, binDirectory, appFileLocationProvider);
@@ -204,8 +204,8 @@ public static final int NS_InitXPCOM2(int /*long*/ result, int /*long*/ binDirec
  * @param path cast=(nsAString *),flags=struct
  * @param result cast=(nsILocalFile**)
  */
-public static final native int _NS_NewLocalFile(int /*long*/ path, int followLinks, int /*long*/[] result);
-public static final int NS_NewLocalFile(int /*long*/ path, int followLinks, int /*long*/[] result) {
+public static final native int _NS_NewLocalFile(long /*int*/ path, int followLinks, long /*int*/[] result);
+public static final int NS_NewLocalFile(long /*int*/ path, int followLinks, long /*int*/[] result) {
 	lock.lock();
 	try {
 		return _NS_NewLocalFile(path, followLinks, result);
@@ -214,8 +214,8 @@ public static final int NS_NewLocalFile(int /*long*/ path, int followLinks, int
 	}
 }
 /** @method flags=new */
-public static final native int /*long*/ _nsEmbedCString_new();
-public static final int /*long*/ nsEmbedCString_new() {
+public static final native long /*int*/ _nsEmbedCString_new();
+public static final long /*int*/ nsEmbedCString_new() {
 	lock.lock();
 	try {
 		return _nsEmbedCString_new();
@@ -227,8 +227,8 @@ public static final int /*long*/ nsEmbedCString_new() {
  * @method flags=new
  * @param aString cast=(const char *)
  */
-public static final native int /*long*/ _nsEmbedCString_new(byte[] aString, int length);
-public static final int /*long*/ nsEmbedCString_new(byte[] aString, int length) {
+public static final native long /*int*/ _nsEmbedCString_new(byte[] aString, int length);
+public static final long /*int*/ nsEmbedCString_new(byte[] aString, int length) {
 	lock.lock();
 	try {
 		return _nsEmbedCString_new(aString, length);
@@ -240,8 +240,8 @@ public static final int /*long*/ nsEmbedCString_new(byte[] aString, int length)
  * @method flags=new
  * @param aString cast=(const char *)
  */
-public static final native int /*long*/ _nsEmbedCString_new(int /*long*/ aString, int length);
-public static final int /*long*/ nsEmbedCString_new(int /*long*/ aString, int length) {
+public static final native long /*int*/ _nsEmbedCString_new(long /*int*/ aString, int length);
+public static final long /*int*/ nsEmbedCString_new(long /*int*/ aString, int length) {
 	lock.lock();
 	try {
 		return _nsEmbedCString_new(aString, length);
@@ -253,8 +253,8 @@ public static final int /*long*/ nsEmbedCString_new(int /*long*/ aString, int le
  * @method flags=delete
  * @param ptr cast=(nsEmbedCString *)
  */
-public static final native void _nsEmbedCString_delete(int /*long*/ ptr);
-public static final void nsEmbedCString_delete(int /*long*/ ptr) {
+public static final native void _nsEmbedCString_delete(long /*int*/ ptr);
+public static final void nsEmbedCString_delete(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		_nsEmbedCString_delete(ptr);
@@ -266,8 +266,8 @@ public static final void nsEmbedCString_delete(int /*long*/ ptr) {
  * @method flags=cpp
  * @param ptr cast=(nsEmbedCString *)
  */
-public static final native int _nsEmbedCString_Length(int /*long*/ ptr);
-public static final int nsEmbedCString_Length(int /*long*/ ptr) {
+public static final native int _nsEmbedCString_Length(long /*int*/ ptr);
+public static final int nsEmbedCString_Length(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _nsEmbedCString_Length(ptr);
@@ -279,8 +279,8 @@ public static final int nsEmbedCString_Length(int /*long*/ ptr) {
  * @method flags=cpp
  * @param ptr cast=(nsIScriptGlobalObject *)
  */
-public static final native int _nsIScriptGlobalObject_EnsureScriptEnvironment(int /*long*/ ptr, int lang);
-public static final int nsIScriptGlobalObject_EnsureScriptEnvironment(int /*long*/ ptr, int lang) {
+public static final native int _nsIScriptGlobalObject_EnsureScriptEnvironment(long /*int*/ ptr, int lang);
+public static final int nsIScriptGlobalObject_EnsureScriptEnvironment(long /*int*/ ptr, int lang) {
 	lock.lock();
 	try {
 		return _nsIScriptGlobalObject_EnsureScriptEnvironment(ptr, lang);
@@ -292,8 +292,8 @@ public static final int nsIScriptGlobalObject_EnsureScriptEnvironment(int /*long
  * @method flags=cpp
  * @param ptr cast=(nsIScriptGlobalObject *)
  */
-public static final native int /*long*/ _nsIScriptGlobalObject_GetScriptGlobal(int /*long*/ ptr, int lang);
-public static final int /*long*/ nsIScriptGlobalObject_GetScriptGlobal(int /*long*/ ptr, int lang) {
+public static final native long /*int*/ _nsIScriptGlobalObject_GetScriptGlobal(long /*int*/ ptr, int lang);
+public static final long /*int*/ nsIScriptGlobalObject_GetScriptGlobal(long /*int*/ ptr, int lang) {
 	lock.lock();
 	try {
 		return _nsIScriptGlobalObject_GetScriptGlobal(ptr, lang);
@@ -305,8 +305,8 @@ public static final int /*long*/ nsIScriptGlobalObject_GetScriptGlobal(int /*lon
  * @method flags=cpp
  * @param ptr cast=(nsIScriptGlobalObject *)
  */
-public static final native int /*long*/ _nsIScriptGlobalObject_GetScriptContext(int /*long*/ ptr, int lang);
-public static final int /*long*/ nsIScriptGlobalObject_GetScriptContext(int /*long*/ ptr, int lang) {
+public static final native long /*int*/ _nsIScriptGlobalObject_GetScriptContext(long /*int*/ ptr, int lang);
+public static final long /*int*/ nsIScriptGlobalObject_GetScriptContext(long /*int*/ ptr, int lang) {
 	lock.lock();
 	try {
 		return _nsIScriptGlobalObject_GetScriptContext(ptr, lang);
@@ -318,8 +318,8 @@ public static final int /*long*/ nsIScriptGlobalObject_GetScriptContext(int /*lo
  * @method flags=cpp
  * @param ptr cast=(nsIScriptContext *)
  */
-public static final native int /*long*/ _nsIScriptContext_GetNativeContext(int /*long*/ ptr);
-public static final int /*long*/ nsIScriptContext_GetNativeContext(int /*long*/ ptr) {
+public static final native long /*int*/ _nsIScriptContext_GetNativeContext(long /*int*/ ptr);
+public static final long /*int*/ nsIScriptContext_GetNativeContext(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _nsIScriptContext_GetNativeContext(ptr);
@@ -332,8 +332,8 @@ public static final int /*long*/ nsIScriptContext_GetNativeContext(int /*long*/
  * @method flags=cpp
  * @param ptr cast=(nsEmbedCString *)
  */
-public static final native int /*long*/ _nsEmbedCString_get(int /*long*/ ptr);
-public static final int /*long*/ nsEmbedCString_get(int /*long*/ ptr) {
+public static final native long /*int*/ _nsEmbedCString_get(long /*int*/ ptr);
+public static final long /*int*/ nsEmbedCString_get(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _nsEmbedCString_get(ptr);
@@ -345,8 +345,8 @@ public static final int /*long*/ nsEmbedCString_get(int /*long*/ ptr) {
  * @method flags=delete
  * @param ptr cast=(nsID *)
  */
-public static final native void _nsID_delete(int /*long*/ ptr);
-public static final void nsID_delete(int /*long*/ ptr) {
+public static final native void _nsID_delete(long /*int*/ ptr);
+public static final void nsID_delete(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		_nsID_delete(ptr);
@@ -355,8 +355,8 @@ public static final void nsID_delete(int /*long*/ ptr) {
 	}
 }
 /** @method flags=new */
-public static final native int /*long*/ _nsID_new();
-public static final int /*long*/ nsID_new() {
+public static final native long /*int*/ _nsID_new();
+public static final long /*int*/ nsID_new() {
 	lock.lock();
 	try {
 		return _nsID_new();
@@ -369,8 +369,8 @@ public static final int /*long*/ nsID_new() {
  * @param ptr cast=(nsID *)
  * @param other cast=(nsID *),flags=struct
  */
-public static final native int _nsID_Equals(int /*long*/ ptr, int /*long*/ other);
-public static final int nsID_Equals(int /*long*/ ptr, int /*long*/ other) {
+public static final native int _nsID_Equals(long /*int*/ ptr, long /*int*/ other);
+public static final int nsID_Equals(long /*int*/ ptr, long /*int*/ other) {
 	lock.lock();
 	try {
 		return _nsID_Equals(ptr, other);
@@ -379,8 +379,8 @@ public static final int nsID_Equals(int /*long*/ ptr, int /*long*/ other) {
 	}
 }
 /** @method flags=new */
-public static final native int /*long*/ _nsEmbedString_new();
-public static final int /*long*/ nsEmbedString_new() {
+public static final native long /*int*/ _nsEmbedString_new();
+public static final long /*int*/ nsEmbedString_new() {
 	lock.lock();
 	try {
 		return _nsEmbedString_new();
@@ -392,8 +392,8 @@ public static final int /*long*/ nsEmbedString_new() {
  * @method flags=new
  * @param aString cast=(PRUnichar *)
  */
-public static final native int /*long*/ _nsEmbedString_new(char[] aString);
-public static final int /*long*/ nsEmbedString_new(char[] aString) {
+public static final native long /*int*/ _nsEmbedString_new(char[] aString);
+public static final long /*int*/ nsEmbedString_new(char[] aString) {
 	lock.lock();
 	try {
 		return _nsEmbedString_new(aString);
@@ -405,8 +405,8 @@ public static final int /*long*/ nsEmbedString_new(char[] aString) {
  * @method flags=delete
  * @param ptr cast=(nsEmbedString *)
  */
-public static final native void _nsEmbedString_delete(int /*long*/ ptr);
-public static final void nsEmbedString_delete(int /*long*/ ptr) {
+public static final native void _nsEmbedString_delete(long /*int*/ ptr);
+public static final void nsEmbedString_delete(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		_nsEmbedString_delete(ptr);
@@ -418,8 +418,8 @@ public static final void nsEmbedString_delete(int /*long*/ ptr) {
  * @method flags=cpp
  * @param ptr cast=(nsEmbedString *)
  */
-public static final native int _nsEmbedString_Length(int /*long*/ ptr);
-public static final int nsEmbedString_Length(int /*long*/ ptr) {
+public static final native int _nsEmbedString_Length(long /*int*/ ptr);
+public static final int nsEmbedString_Length(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _nsEmbedString_Length(ptr);
@@ -431,8 +431,8 @@ public static final int nsEmbedString_Length(int /*long*/ ptr) {
  * @method flags=cpp
  * @param ptr cast=(nsEmbedString *)
  */
-public static final native int /*long*/ _nsEmbedString_get(int /*long*/ ptr);
-public static final int /*long*/ nsEmbedString_get(int /*long*/ ptr) {
+public static final native long /*int*/ _nsEmbedString_get(long /*int*/ ptr);
+public static final long /*int*/ nsEmbedString_get(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _nsEmbedString_get(ptr);
@@ -445,8 +445,8 @@ public static final int /*long*/ nsEmbedString_get(int /*long*/ ptr) {
  * @param ptr cast=(nsIMemory *)
  * @param size cast=(size_t)
  */
-public static final native int /*long*/ _nsIMemory_Alloc(int /*long*/ ptr, int size);
-public static final int /*long*/ nsIMemory_Alloc(int /*long*/ ptr, int size) {
+public static final native long /*int*/ _nsIMemory_Alloc(long /*int*/ ptr, int size);
+public static final long /*int*/ nsIMemory_Alloc(long /*int*/ ptr, int size) {
 	lock.lock();
 	try {
 		return _nsIMemory_Alloc(ptr, size);
@@ -460,8 +460,8 @@ public static final int /*long*/ nsIMemory_Alloc(int /*long*/ ptr, int size) {
  * @param ptr2 cast=(void *)
  * @param size cast=(size_t)
  */
-public static final native int /*long*/ _nsIMemory_Realloc(int /*long*/ ptr1, int /*long*/ ptr2, int size);
-public static final int /*long*/ nsIMemory_Realloc(int /*long*/ ptr1, int /*long*/ ptr2, int size) {
+public static final native long /*int*/ _nsIMemory_Realloc(long /*int*/ ptr1, long /*int*/ ptr2, int size);
+public static final long /*int*/ nsIMemory_Realloc(long /*int*/ ptr1, long /*int*/ ptr2, int size) {
 	lock.lock();
 	try {
 		return _nsIMemory_Realloc(ptr1, ptr2, size);
@@ -470,8 +470,8 @@ public static final int /*long*/ nsIMemory_Realloc(int /*long*/ ptr1, int /*long
 	}
 }
 /** @param functionLoad cast=(const nsDynamicFunctionLoad *) */
-public static final native int _XPCOMGlueLoadXULFunctions (int /*long*/ functionLoad);
-public static final int XPCOMGlueLoadXULFunctions (int /*long*/ functionLoad) {
+public static final native int _XPCOMGlueLoadXULFunctions (long /*int*/ functionLoad);
+public static final int XPCOMGlueLoadXULFunctions (long /*int*/ functionLoad) {
 	lock.lock();
 	try {
 		return _XPCOMGlueLoadXULFunctions(functionLoad);
@@ -499,8 +499,8 @@ public static final int XPCOMGlueShutdown() {
 	}
 }
 
-public static final native int _Call(int /*long*/ ptr);
-public static final int Call(int /*long*/ ptr) {
+public static final native int _Call(long /*int*/ ptr);
+public static final int Call(long /*int*/ ptr) {
 	lock.lock();
 	try {
 		return _Call(ptr);
@@ -516,8 +516,8 @@ public static final int Call(int /*long*/ ptr) {
  * @param aFromSegment cast=(const char *)
  * @param aWriteCount cast=(PRUint32 *)
  */
-public static final native int /*long*/ _Call(int /*long*/ ptr, int /*long*/ aInStream, int /*long*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount);
-public static final int /*long*/ Call(int /*long*/ ptr, int /*long*/ aInStream, int /*long*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount) {
+public static final native long /*int*/ _Call(long /*int*/ ptr, long /*int*/ aInStream, long /*int*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount);
+public static final long /*int*/ Call(long /*int*/ ptr, long /*int*/ aInStream, long /*int*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount) {
 	lock.lock();
 	try {
 		return _Call(ptr, aInStream, aClosure, aFromSegment, aToOffset, aCount, aWriteCount);
@@ -533,8 +533,8 @@ public static final int /*long*/ Call(int /*long*/ ptr, int /*long*/ aInStream,
  * @param aAppDirProvider cast=(nsIDirectoryServiceProvider *)
  * @param aStaticComponents cast=(nsStaticModuleInfo const *)
  */
-public static final native int _Call(int /*long*/ ptr, int /*long*/ aLibXULDirectory, int /*long*/ aAppDirectory, int /*long*/ aAppDirProvider, int /*long*/ aStaticComponents, int aStaticComponentsCount);
-public static final int Call(int /*long*/ ptr, int /*long*/ aLibXULDirectory, int /*long*/ aAppDirectory, int /*long*/ aAppDirProvider, int /*long*/ aStaticComponents, int aStaticComponentsCount) {
+public static final native int _Call(long /*int*/ ptr, long /*int*/ aLibXULDirectory, long /*int*/ aAppDirectory, long /*int*/ aAppDirProvider, long /*int*/ aStaticComponents, int aStaticComponentsCount);
+public static final int Call(long /*int*/ ptr, long /*int*/ aLibXULDirectory, long /*int*/ aAppDirectory, long /*int*/ aAppDirProvider, long /*int*/ aStaticComponents, int aStaticComponentsCount) {
 	lock.lock();
 	try {
 		return _Call(ptr, aLibXULDirectory, aAppDirectory, aAppDirProvider, aStaticComponents, aStaticComponentsCount);
@@ -543,8 +543,8 @@ public static final int Call(int /*long*/ ptr, int /*long*/ aLibXULDirectory, in
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl);
@@ -553,8 +553,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl) {
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -562,8 +562,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -571,8 +571,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, double arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, double arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, double arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, double arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -580,8 +580,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, double arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, float arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, float arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, float arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, float arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -589,8 +589,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, float arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, float[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, float[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, float[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, float[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -598,8 +598,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, float[] arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -607,8 +607,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -616,8 +616,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -625,8 +625,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -634,8 +634,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0) {
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0);
@@ -644,8 +644,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0) {
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -653,8 +653,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1)
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -662,8 +662,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -671,8 +671,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -680,8 +680,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long [] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long [] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long [] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long [] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -689,8 +689,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long []
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -698,8 +698,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -707,8 +707,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -716,8 +716,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -725,8 +725,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -734,8 +734,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -743,8 +743,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -752,8 +752,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -761,8 +761,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -770,8 +770,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -779,8 +779,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -788,8 +788,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -797,8 +797,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -806,8 +806,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -815,8 +815,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, char[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, char[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, char[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, char[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -824,8 +824,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, char[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -833,8 +833,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -842,8 +842,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -852,8 +852,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -861,8 +861,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -870,8 +870,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -879,8 +879,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -888,8 +888,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -897,8 +897,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long [] arg1);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long [] arg1) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long [] arg0, long [] arg1);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long [] arg0, long [] arg1) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1);
@@ -906,8 +906,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -915,8 +915,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, long arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, long arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, long arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, long arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -924,8 +924,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -934,8 +934,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, int arg1, int arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, int arg1, int arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, short arg0, int arg1, int arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, short arg0, int arg1, int arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -943,8 +943,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, int arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, long arg1, int arg2, long arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, long arg1, int arg2, long arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, short arg0, long arg1, int arg2, long arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, short arg0, long arg1, int arg2, long arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -953,8 +953,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short arg0, long ar
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -962,8 +962,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -971,8 +971,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -980,8 +980,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -989,8 +989,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -998,8 +998,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1007,8 +1007,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1016,8 +1016,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, long arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, long arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, long arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, long arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1025,8 +1025,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, long a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1034,8 +1034,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1043,8 +1043,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1052,8 +1052,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1061,8 +1061,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1, long arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1, long arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, long arg1, long arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, long arg1, long arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1070,8 +1070,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1079,8 +1079,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1088,8 +1088,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1097,8 +1097,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1106,8 +1106,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1115,8 +1115,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1124,8 +1124,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1133,8 +1133,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1, long [] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1, long [] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1, long [] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1, long [] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1142,8 +1142,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1151,8 +1151,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1160,8 +1160,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1169,8 +1169,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1178,8 +1178,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1187,8 +1187,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1196,8 +1196,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1205,8 +1205,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1214,8 +1214,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1223,8 +1223,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1232,8 +1232,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, char[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, char[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, char[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, char[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1241,8 +1241,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, char[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, char[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, char[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, char[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1250,8 +1250,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1259,8 +1259,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1268,8 +1268,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1277,8 +1277,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int[] arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int[] arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int[] arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int[] arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1286,8 +1286,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, long arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, long arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, long arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, long arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1295,8 +1295,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1304,8 +1304,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, int arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, int arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, int arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, int arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1313,8 +1313,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, short arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, short arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, short arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, short arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1322,8 +1322,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, short arg2);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, short arg2) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, short arg2);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, short arg2) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2);
@@ -1332,8 +1332,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1341,8 +1341,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1350,8 +1350,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1359,8 +1359,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1368,8 +1368,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1377,8 +1377,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1386,8 +1386,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1395,8 +1395,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1404,8 +1404,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1413,8 +1413,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1422,8 +1422,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1431,8 +1431,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1440,8 +1440,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1449,8 +1449,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1458,8 +1458,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1467,8 +1467,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1476,8 +1476,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1485,8 +1485,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1494,8 +1494,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, long[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, long[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, long[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, long[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1503,8 +1503,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1512,8 +1512,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1521,8 +1521,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1530,8 +1530,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1539,8 +1539,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1548,8 +1548,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1557,8 +1557,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, byte[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, byte[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, byte[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, byte[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1566,8 +1566,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, byte[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, byte[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, byte[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, byte[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1575,8 +1575,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1584,8 +1584,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1593,8 +1593,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, int arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, int arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0, int arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0, int arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1602,8 +1602,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, int a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, long arg1, int[] arg2, long[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, long arg1, int[] arg2, long[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0, long arg1, int[] arg2, long[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0, long arg1, int[] arg2, long[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1611,8 +1611,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0, long
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1620,8 +1620,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1629,8 +1629,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int[] arg2, int[] arg3);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int[] arg2, int[] arg3) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int[] arg2, int[] arg3);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int[] arg2, int[] arg3) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3);
@@ -1639,8 +1639,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1648,8 +1648,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1657,8 +1657,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1666,8 +1666,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1675,8 +1675,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1684,8 +1684,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1693,8 +1693,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1702,8 +1702,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1711,8 +1711,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1720,8 +1720,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3, int arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3, int arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3, int arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2, int arg3, int arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1730,8 +1730,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3, int arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3, int arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3, int arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2, long arg3, int arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1739,8 +1739,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1, int arg2, int arg3, int[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1, int arg2, int arg3, int[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1, int arg2, int arg3, int[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1, int arg2, int arg3, int[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1748,8 +1748,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1, long arg2, long arg3, long[] arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1, long arg2, long arg3, long[] arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1, long arg2, long arg3, long[] arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1, long arg2, long arg3, long[] arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1757,8 +1757,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, int arg3, int arg4);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, int arg3, int arg4) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, int arg3, int arg4);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, int arg3, int arg4) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4);
@@ -1767,8 +1767,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1776,8 +1776,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1785,8 +1785,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1794,8 +1794,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1803,8 +1803,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1812,8 +1812,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1821,8 +1821,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1831,8 +1831,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] a
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0, long[] arg1, long[] arg2, long[] arg3, long[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0, long[] arg1, long[] arg2, long[] arg3, long[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long[] arg0, long[] arg1, long[] arg2, long[] arg3, long[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long[] arg0, long[] arg1, long[] arg2, long[] arg3, long[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1840,8 +1840,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0, long[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1849,8 +1849,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1858,8 +1858,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int [] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int [] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1868,8 +1868,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1877,8 +1877,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1886,8 +1886,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1895,8 +1895,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1904,8 +1904,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1913,8 +1913,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1922,8 +1922,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1931,8 +1931,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1940,8 +1940,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1949,8 +1949,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[]
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1958,8 +1958,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1967,8 +1967,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1976,8 +1976,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1985,8 +1985,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, byte[] arg3, byte[] arg4, int arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, byte[] arg3, byte[] arg4, int arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, byte[] arg3, byte[] arg4, int arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, byte[] arg3, byte[] arg4, int arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -1994,8 +1994,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, byte[] arg3, byte[] arg4, long arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, byte[] arg3, byte[] arg4, long arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, byte[] arg3, byte[] arg4, long arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, byte[] arg3, byte[] arg4, long arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -2003,8 +2003,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -2012,8 +2012,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, int[] arg3, int[] arg4, int[] arg5);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, int[] arg3, int[] arg4, int[] arg5) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, int[] arg3, int[] arg4, int[] arg5);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, int[] arg3, int[] arg4, int[] arg5) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -2022,8 +2022,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2031,8 +2031,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2040,8 +2040,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2049,8 +2049,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2058,8 +2058,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2067,8 +2067,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2076,8 +2076,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2085,8 +2085,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2094,8 +2094,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2103,8 +2103,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, long arg3, int[] arg4, int[] arg5, int[] arg6);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long arg2, long arg3, int[] arg4, int[] arg5, int[] arg6) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, long arg3, int[] arg4, int[] arg5, int[] arg6);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long arg2, long arg3, int[] arg4, int[] arg5, int[] arg6) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -2113,8 +2113,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
@@ -2122,8 +2122,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
@@ -2131,8 +2131,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int[] arg7) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
@@ -2140,8 +2140,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long[] arg7);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long[] arg7) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long[] arg7);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6, long[] arg7) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
@@ -2150,8 +2150,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1
 	}
 }
 
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
@@ -2159,8 +2159,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
@@ -2168,8 +2168,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
@@ -2177,8 +2177,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
@@ -2186,8 +2186,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
@@ -2195,8 +2195,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] ar
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9);
@@ -2204,8 +2204,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] a
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
@@ -2213,8 +2213,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
@@ -2222,8 +2222,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
@@ -2231,8 +2231,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12);
@@ -2240,8 +2240,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
@@ -2249,8 +2249,8 @@ static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1,
 		lock.unlock();
 	}
 }
-static final native int _VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14);
-static final int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14) {
+static final native int _VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14);
+static final int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14) {
 	lock.lock();
 	try {
 		return _VtblCall(fnNumber, ppVtbl, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14);
diff --git a/org/eclipse/swt/internal/mozilla/XPCOMObject.java b/org/eclipse/swt/internal/mozilla/XPCOMObject.java
index bc22e54..9899a99 100644
--- a/org/eclipse/swt/internal/mozilla/XPCOMObject.java
+++ b/org/eclipse/swt/internal/mozilla/XPCOMObject.java
@@ -21,7 +21,7 @@ public class XPCOMObject {
 		IsSolaris = osName.startsWith ("sunos") || osName.startsWith("solaris"); //$NON-NLS-1$
 	}
 	
-	private int /*long*/ ppVtable;
+	private long /*int*/ ppVtable;
 
 	static private final int MAX_ARG_COUNT = 12;
 	static private final int MAX_VTABLE_LENGTH = 80;
@@ -31,7 +31,7 @@ public class XPCOMObject {
 	
 	
 public XPCOMObject (int[] argCounts) {
-	int /*long*/[] callbackAddresses = new int /*long*/[argCounts.length + OS_OFFSET];
+	long /*int*/[] callbackAddresses = new long /*int*/[argCounts.length + OS_OFFSET];
 	synchronized (Callbacks) {
 		for (int i = 0, length = argCounts.length; i < length; i++) {
 			if ((Callbacks[i + OS_OFFSET][argCounts[i]]) == null) {
@@ -42,737 +42,737 @@ public XPCOMObject (int[] argCounts) {
 		}
 	}
 
-	int /*long*/ pVtable = C.malloc (C.PTR_SIZEOF * (argCounts.length + OS_OFFSET));
+	long /*int*/ pVtable = C.malloc (C.PTR_SIZEOF * (argCounts.length + OS_OFFSET));
 	XPCOM.memmove (pVtable, callbackAddresses, C.PTR_SIZEOF * (argCounts.length + OS_OFFSET));
 	ppVtable = C.malloc (C.PTR_SIZEOF);
-	XPCOM.memmove (ppVtable, new int /*long*/[] {pVtable}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppVtable, new long /*int*/[] {pVtable}, C.PTR_SIZEOF);
 	ObjectMap.put (new LONG (ppVtable), this);
 }
 	
-static int /*long*/ callback0 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback0 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method0 (args);
 }
-static int /*long*/ callback1 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback1 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method1 (args);
 }
-static int /*long*/ callback10 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback10 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method10 (args);
 }
-static int /*long*/ callback11 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback11 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method11 (args);
 }
-static int /*long*/ callback12 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback12 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method12 (args);
 }
-static int /*long*/ callback13 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback13 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method13 (args);
 }
-static int /*long*/ callback14 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback14 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method14 (args);
 }
-static int /*long*/ callback15 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback15 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method15 (args);
 }
-static int /*long*/ callback16 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback16 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method16 (args);
 }
-static int /*long*/ callback17 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback17 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method17 (args);
 }
-static int /*long*/ callback18 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback18 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method18 (args);
 }
-static int /*long*/ callback19 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback19 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method19 (args);
 }
-static int /*long*/ callback2 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback2 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method2 (args);
 }
-static int /*long*/ callback20 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback20 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method20 (args);
 }
-static int /*long*/ callback21 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback21 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method21 (args);
 }
-static int /*long*/ callback22 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback22 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method22 (args);
 }
-static int /*long*/ callback23 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback23 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method23 (args);
 }
-static int /*long*/ callback24 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback24 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method24 (args);
 }
-static int /*long*/ callback25 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback25 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method25 (args);
 }
-static int /*long*/ callback26 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback26 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method26 (args);
 }
-static int /*long*/ callback27 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback27 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method27 (args);
 }
-static int /*long*/ callback28 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback28 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method28 (args);
 }
-static int /*long*/ callback29 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback29 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method29 (args);
 }
-static int /*long*/ callback3 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback3 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method3 (args);
 }
-static int /*long*/ callback30 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback30 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method30 (args);
 }
-static int /*long*/ callback31 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback31 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method31 (args);
 }
-static int /*long*/ callback32 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback32 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method32 (args);
 }
-static int /*long*/ callback33 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback33 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method33 (args);
 }
-static int /*long*/ callback34 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback34 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method34 (args);
 }
-static int /*long*/ callback35 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback35 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method35 (args);
 }
-static int /*long*/ callback36 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback36 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method36 (args);
 }
-static int /*long*/ callback37 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback37 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method37 (args);
 }
-static int /*long*/ callback38 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback38 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method38 (args);
 }
-static int /*long*/ callback39 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback39 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method39 (args);
 }
-static int /*long*/ callback4 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback4 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method4 (args);
 }
-static int /*long*/ callback40 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback40 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method40 (args);
 }
-static int /*long*/ callback41 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback41 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method41 (args);
 }
-static int /*long*/ callback42 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback42 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method42 (args);
 }
-static int /*long*/ callback43 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback43 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method43 (args);
 }
-static int /*long*/ callback44 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback44 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method44 (args);
 }
-static int /*long*/ callback45 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback45 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method45 (args);
 }
-static int /*long*/ callback46 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback46 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method46 (args);
 }
-static int /*long*/ callback47 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback47 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method47 (args);
 }
-static int /*long*/ callback48 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback48 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method48 (args);
 }
-static int /*long*/ callback49 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback49 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method49 (args);
 }
-static int /*long*/ callback5 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback5 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method5 (args);
 }
-static int /*long*/ callback50 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback50 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method50 (args);
 }
-static int /*long*/ callback51 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback51 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method51 (args);
 }
-static int /*long*/ callback52 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback52 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method52 (args);
 }
-static int /*long*/ callback53 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback53 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method53 (args);
 }
-static int /*long*/ callback54 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback54 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method54 (args);
 }
-static int /*long*/ callback55 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback55 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method55 (args);
 }
-static int /*long*/ callback56 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback56 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method56 (args);
 }
-static int /*long*/ callback57 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback57 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method57 (args);
 }
-static int /*long*/ callback58 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback58 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method58 (args);
 }
-static int /*long*/ callback59 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback59 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method59 (args);
 }
-static int /*long*/ callback6 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback6 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method6 (args);
 }
-static int /*long*/ callback60 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback60 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method60 (args);
 }
-static int /*long*/ callback61 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback61 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method61 (args);
 }
-static int /*long*/ callback62 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback62 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method62 (args);
 }
-static int /*long*/ callback63 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback63 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method63 (args);
 }
-static int /*long*/ callback64 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback64 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method64 (args);
 }
-static int /*long*/ callback65 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback65 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method65 (args);
 }
-static int /*long*/ callback66 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback66 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method66 (args);
 }
-static int /*long*/ callback67 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback67 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method67 (args);
 }
-static int /*long*/ callback68 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback68 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method68 (args);
 }
-static int /*long*/ callback69 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback69 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method69 (args);
 }
-static int /*long*/ callback7 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback7 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method7 (args);
 }
-static int /*long*/ callback70 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback70 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method70 (args);
 }
-static int /*long*/ callback71 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback71 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method71 (args);
 }
-static int /*long*/ callback72 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback72 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method72 (args);
 }
-static int /*long*/ callback73 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback73 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method73 (args);
 }
-static int /*long*/ callback74 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback74 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method74 (args);
 }
-static int /*long*/ callback75 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback75 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method75 (args);
 }
-static int /*long*/ callback76 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback76 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method76 (args);
 }
-static int /*long*/ callback77 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback77 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method77 (args);
 }
-static int /*long*/ callback78 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback78 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method78 (args);
 }
-static int /*long*/ callback79 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback79 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method79 (args);
 }
-static int /*long*/ callback8 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback8 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method8 (args);
 }
-static int /*long*/ callback9 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback9 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method9 (args);
 }
 
 public void dispose() {
 	// free the memory for this reference
-	int /*long*/[] pVtable = new int /*long*/[1];
+	long /*int*/[] pVtable = new long /*int*/[1];
 	XPCOM.memmove (pVtable, ppVtable, C.PTR_SIZEOF);
 	C.free (pVtable[0]);
 	C.free (ppVtable);	
@@ -783,248 +783,248 @@ public void dispose() {
 	ppVtable = 0;
 }
 	
-public int /*long*/ getAddress () {
+public long /*int*/ getAddress () {
 	return ppVtable;
 }
 
-public int /*long*/ method0 (int /*long*/[] args) {
+public long /*int*/ method0 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method1 (int /*long*/[] args) {
+public long /*int*/ method1 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method10 (int /*long*/[] args) {
+public long /*int*/ method10 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method11 (int /*long*/[] args) {
+public long /*int*/ method11 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method12 (int /*long*/[] args) {
+public long /*int*/ method12 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method13 (int /*long*/[] args) {
+public long /*int*/ method13 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method14 (int /*long*/[] args) {
+public long /*int*/ method14 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method15 (int /*long*/[] args) {
+public long /*int*/ method15 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method16 (int /*long*/[] args) {
+public long /*int*/ method16 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method17 (int /*long*/[] args) {
+public long /*int*/ method17 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method18 (int /*long*/[] args) {
+public long /*int*/ method18 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method19 (int /*long*/[] args) {
+public long /*int*/ method19 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method2 (int /*long*/[] args) {
+public long /*int*/ method2 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method20 (int /*long*/[] args) {
+public long /*int*/ method20 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method21 (int /*long*/[] args) {
+public long /*int*/ method21 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method22 (int /*long*/[] args) {
+public long /*int*/ method22 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method23 (int /*long*/[] args) {
+public long /*int*/ method23 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method24 (int /*long*/[] args) {
+public long /*int*/ method24 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method25 (int /*long*/[] args) {
+public long /*int*/ method25 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method26 (int /*long*/[] args) {
+public long /*int*/ method26 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method27 (int /*long*/[] args) {
+public long /*int*/ method27 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method28 (int /*long*/[] args) {
+public long /*int*/ method28 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method29 (int /*long*/[] args) {
+public long /*int*/ method29 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method3 (int /*long*/[] args) {
+public long /*int*/ method3 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method30 (int /*long*/[] args) {
+public long /*int*/ method30 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method31 (int /*long*/[] args) {
+public long /*int*/ method31 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method32 (int /*long*/[] args) {
+public long /*int*/ method32 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method33 (int /*long*/[] args) {
+public long /*int*/ method33 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method34 (int /*long*/[] args) {
+public long /*int*/ method34 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method35 (int /*long*/[] args) {
+public long /*int*/ method35 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method36 (int /*long*/[] args) {
+public long /*int*/ method36 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method37 (int /*long*/[] args) {
+public long /*int*/ method37 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method38 (int /*long*/[] args) {
+public long /*int*/ method38 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method39 (int /*long*/[] args) {
+public long /*int*/ method39 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method4 (int /*long*/[] args) {
+public long /*int*/ method4 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method40 (int /*long*/[] args) {
+public long /*int*/ method40 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method41 (int /*long*/[] args) {
+public long /*int*/ method41 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method42 (int /*long*/[] args) {
+public long /*int*/ method42 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method43 (int /*long*/[] args) {
+public long /*int*/ method43 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method44 (int /*long*/[] args) {
+public long /*int*/ method44 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method45 (int /*long*/[] args) {
+public long /*int*/ method45 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method46 (int /*long*/[] args) {
+public long /*int*/ method46 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method47 (int /*long*/[] args) {
+public long /*int*/ method47 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method48 (int /*long*/[] args) {
+public long /*int*/ method48 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method49 (int /*long*/[] args) {
+public long /*int*/ method49 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method5 (int /*long*/[] args) {
+public long /*int*/ method5 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method50 (int /*long*/[] args) {
+public long /*int*/ method50 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method51 (int /*long*/[] args) {
+public long /*int*/ method51 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method52 (int /*long*/[] args) {
+public long /*int*/ method52 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method53 (int /*long*/[] args) {
+public long /*int*/ method53 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method54 (int /*long*/[] args) {
+public long /*int*/ method54 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method55 (int /*long*/[] args) {
+public long /*int*/ method55 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method56 (int /*long*/[] args) {
+public long /*int*/ method56 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method57 (int /*long*/[] args) {
+public long /*int*/ method57 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method58 (int /*long*/[] args) {
+public long /*int*/ method58 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method59 (int /*long*/[] args) {
+public long /*int*/ method59 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method6 (int /*long*/[] args) {
+public long /*int*/ method6 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method60 (int /*long*/[] args) {
+public long /*int*/ method60 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method61 (int /*long*/[] args) {
+public long /*int*/ method61 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method62 (int /*long*/[] args) {
+public long /*int*/ method62 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method63 (int /*long*/[] args) {
+public long /*int*/ method63 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method64 (int /*long*/[] args) {
+public long /*int*/ method64 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method65 (int /*long*/[] args) {
+public long /*int*/ method65 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method66 (int /*long*/[] args) {
+public long /*int*/ method66 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method67 (int /*long*/[] args) {
+public long /*int*/ method67 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method68 (int /*long*/[] args) {
+public long /*int*/ method68 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method69 (int /*long*/[] args) {
+public long /*int*/ method69 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method7 (int /*long*/[] args) {
+public long /*int*/ method7 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method70 (int /*long*/[] args) {
+public long /*int*/ method70 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method71 (int /*long*/[] args) {
+public long /*int*/ method71 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method72 (int /*long*/[] args) {
+public long /*int*/ method72 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method73 (int /*long*/[] args) {
+public long /*int*/ method73 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method74 (int /*long*/[] args) {
+public long /*int*/ method74 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method75 (int /*long*/[] args) {
+public long /*int*/ method75 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method76 (int /*long*/[] args) {
+public long /*int*/ method76 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method77 (int /*long*/[] args) {
+public long /*int*/ method77 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method78 (int /*long*/[] args) {
+public long /*int*/ method78 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method79 (int /*long*/[] args) {
+public long /*int*/ method79 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method8 (int /*long*/[] args) {
+public long /*int*/ method8 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method9 (int /*long*/[] args) {
+public long /*int*/ method9 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 }
diff --git a/org/eclipse/swt/internal/mozilla/init/GREVersionRange.java b/org/eclipse/swt/internal/mozilla/init/GREVersionRange.java
index da361dd..5be1893 100644
--- a/org/eclipse/swt/internal/mozilla/init/GREVersionRange.java
+++ b/org/eclipse/swt/internal/mozilla/init/GREVersionRange.java
@@ -13,10 +13,10 @@ package org.eclipse.swt.internal.mozilla.init;
 /** @jniclass flags=cpp */
 public class GREVersionRange {
     /** @field cast=(const char *) */
-	public int /*long*/ lower;
+	public long /*int*/ lower;
     public boolean lowerInclusive;
     /** @field cast=(const char *) */
-	public int /*long*/ upper;
+	public long /*int*/ upper;
     public boolean upperInclusive;
     public static final int sizeof = XPCOMInit.GREVersionRange_sizeof();
 }
diff --git a/org/eclipse/swt/internal/mozilla/init/XPCOMInit.java b/org/eclipse/swt/internal/mozilla/init/XPCOMInit.java
index a746934..dbac2e1 100644
--- a/org/eclipse/swt/internal/mozilla/init/XPCOMInit.java
+++ b/org/eclipse/swt/internal/mozilla/init/XPCOMInit.java
@@ -40,8 +40,8 @@ public static final native int GREVersionRange_sizeof ();
  * @param properties cast=(const GREProperty *)
  * @param buffer cast=(char *)
  */
-public static final native int _GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, int /*long*/ properties, int propertiesLength, int /*long*/ buffer, int buflen);
-public static final int GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, int /*long*/ properties, int propertiesLength, int /*long*/ buffer, int buflen) {
+public static final native int _GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, long /*int*/ properties, int propertiesLength, long /*int*/ buffer, int buflen);
+public static final int GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, long /*int*/ properties, int propertiesLength, long /*int*/ buffer, int buflen) {
 	lock.lock();
 	try {
 		return _GRE_GetGREPathWithProperties(versions, versionsLength, properties, propertiesLength, buffer, buflen);
diff --git a/org/eclipse/swt/internal/mozilla/nsDynamicFunctionLoad.java b/org/eclipse/swt/internal/mozilla/nsDynamicFunctionLoad.java
index 7857539..550f562 100644
--- a/org/eclipse/swt/internal/mozilla/nsDynamicFunctionLoad.java
+++ b/org/eclipse/swt/internal/mozilla/nsDynamicFunctionLoad.java
@@ -12,7 +12,7 @@ package org.eclipse.swt.internal.mozilla;
 
 public class nsDynamicFunctionLoad {
     /** @field cast=(const char *) */
-	public int /*long*/ functionName;
+	public long /*int*/ functionName;
 	/** @field cast=(NSFuncPtr  *) */
-	public int /*long*/ function;
+	public long /*int*/ function;
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsEmbedString.java b/org/eclipse/swt/internal/mozilla/nsEmbedString.java
index 162a0ad..ad9d453 100644
--- a/org/eclipse/swt/internal/mozilla/nsEmbedString.java
+++ b/org/eclipse/swt/internal/mozilla/nsEmbedString.java
@@ -28,7 +28,7 @@
 package org.eclipse.swt.internal.mozilla;
 
 public class nsEmbedString {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	
 public nsEmbedString() {
 	handle = XPCOM.nsEmbedString_new();
@@ -42,14 +42,14 @@ public nsEmbedString(String string) {
 	}   
 }
 
-public int /*long*/ getAddress() {
+public long /*int*/ getAddress() {
 	return handle;
 }	
 	
 public String toString() {
 	if (handle == 0) return null;
 	int length = XPCOM.nsEmbedString_Length(handle);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get(handle);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get(handle);
 	char[] dest = new char[length];
 	XPCOM.memmove(dest, buffer, length * 2);
 	return new String(dest);
diff --git a/org/eclipse/swt/internal/mozilla/nsIAppShell.java b/org/eclipse/swt/internal/mozilla/nsIAppShell.java
index 9ce7481..c67dd14 100644
--- a/org/eclipse/swt/internal/mozilla/nsIAppShell.java
+++ b/org/eclipse/swt/internal/mozilla/nsIAppShell.java
@@ -37,11 +37,11 @@ public class nsIAppShell extends nsISupports {
 	public static final nsID NS_IAPPSHELL_IID =
 		new nsID(NS_IAPPSHELL_IID_STR);
 
-	public nsIAppShell(int /*long*/ address) {
+	public nsIAppShell(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Create(int /*long*/ argc, int /*long*/[] argv) {
+	public int Create(long /*int*/ argc, long /*int*/[] argv) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), argc, argv);
 	}
 
@@ -57,15 +57,15 @@ public class nsIAppShell extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress());
 	}
 
-	public int ListenToEventQueue(int /*long*/ aQueue, int aListen) {
+	public int ListenToEventQueue(long /*int*/ aQueue, int aListen) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aQueue, aListen);
 	}
 
-	public int GetNativeEvent(int /*long*/ aRealEvent, int /*long*/[] aEvent) {
+	public int GetNativeEvent(long /*int*/ aRealEvent, long /*int*/[] aEvent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aRealEvent, aEvent);
 	}
 
-	public int DispatchNativeEvent(int aRealEvent, int /*long*/ aEvent) {
+	public int DispatchNativeEvent(int aRealEvent, long /*int*/ aEvent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aRealEvent, aEvent);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java b/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java
index 2041790..363cabf 100644
--- a/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java
+++ b/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java
@@ -37,7 +37,7 @@ public class nsIAuthInformation extends nsISupports {
 	public static final nsID NS_IAUTHINFORMATION_IID =
 		new nsID(NS_IAUTHINFORMATION_IID_STR);
 
-	public nsIAuthInformation(int /*long*/ address) {
+	public nsIAuthInformation(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,35 +53,35 @@ public class nsIAuthInformation extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aFlags);
 	}
 
-	public int GetRealm(int /*long*/ aRealm) {
+	public int GetRealm(long /*int*/ aRealm) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aRealm);
 	}
 
-	public int GetAuthenticationScheme(int /*long*/ aAuthenticationScheme) {
+	public int GetAuthenticationScheme(long /*int*/ aAuthenticationScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aAuthenticationScheme);
 	}
 
-	public int GetUsername(int /*long*/ aUsername) {
+	public int GetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aUsername);
 	}
 
-	public int SetUsername(int /*long*/ aUsername) {
+	public int SetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aUsername);
 	}
 
-	public int GetPassword(int /*long*/ aPassword) {
+	public int GetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aPassword);
 	}
 
-	public int SetPassword(int /*long*/ aPassword) {
+	public int SetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aPassword);
 	}
 
-	public int GetDomain(int /*long*/ aDomain) {
+	public int GetDomain(long /*int*/ aDomain) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aDomain);
 	}
 
-	public int SetDomain(int /*long*/ aDomain) {
+	public int SetDomain(long /*int*/ aDomain) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aDomain);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIBadCertListener2.java b/org/eclipse/swt/internal/mozilla/nsIBadCertListener2.java
index 361bc5d..c909868 100644
--- a/org/eclipse/swt/internal/mozilla/nsIBadCertListener2.java
+++ b/org/eclipse/swt/internal/mozilla/nsIBadCertListener2.java
@@ -37,11 +37,11 @@ public class nsIBadCertListener2 extends nsISupports {
 	public static final nsID NS_IBADCERTLISTENER2_IID =
 		new nsID(NS_IBADCERTLISTENER2_IID_STR);
 
-	public  nsIBadCertListener2(int /*long*/ address) {
+	public  nsIBadCertListener2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int NotifyCertProblem(int /*long*/ socketInfo, int /*long*/ status, int /*long*/ targetSite, int[] _retval) {
+	public int NotifyCertProblem(long /*int*/ socketInfo, long /*int*/ status, long /*int*/ targetSite, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), socketInfo, status, targetSite, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java b/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java
index 23c915b..319b78d 100644
--- a/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java
+++ b/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java
@@ -37,11 +37,11 @@ public class nsIBaseWindow extends nsISupports {
 	public static final nsID NS_IBASEWINDOW_IID =
 		new nsID(NS_IBASEWINDOW_IID_STR);
 
-	public nsIBaseWindow(int /*long*/ address) {
+	public nsIBaseWindow(long /*int*/ address) {
 		super(address);
 	}
 
-	public int InitWindow(int /*long*/ parentNativeWindow, int /*long*/ parentWidget, int x, int y, int cx, int cy) {
+	public int InitWindow(long /*int*/ parentNativeWindow, long /*int*/ parentWidget, int x, int y, int cx, int cy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parentNativeWindow, parentWidget, x, y, cx, cy);
 	}
 
@@ -81,19 +81,19 @@ public class nsIBaseWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), force);
 	}
 
-	public int GetParentWidget(int /*long*/[] aParentWidget) {
+	public int GetParentWidget(long /*int*/[] aParentWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aParentWidget);
 	}
 
-	public int SetParentWidget(int /*long*/ aParentWidget) {
+	public int SetParentWidget(long /*int*/ aParentWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aParentWidget);
 	}
 
-	public int GetParentNativeWindow(int /*long*/[] aParentNativeWindow) {
+	public int GetParentNativeWindow(long /*int*/[] aParentNativeWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aParentNativeWindow);
 	}
 
-	public int SetParentNativeWindow(int /*long*/ aParentNativeWindow) {
+	public int SetParentNativeWindow(long /*int*/ aParentNativeWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aParentNativeWindow);
 	}
 
@@ -121,7 +121,7 @@ public class nsIBaseWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), aBlurSuppression);
 	}
 
-	public int GetMainWidget(int /*long*/[] aMainWidget) {
+	public int GetMainWidget(long /*int*/[] aMainWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), aMainWidget);
 	}
 
@@ -129,7 +129,7 @@ public class nsIBaseWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress());
 	}
 
-	public int GetTitle(int /*long*/[] aTitle) {
+	public int GetTitle(long /*int*/[] aTitle) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), aTitle);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsICancelable.java b/org/eclipse/swt/internal/mozilla/nsICancelable.java
index e20f203..b6af27d 100644
--- a/org/eclipse/swt/internal/mozilla/nsICancelable.java
+++ b/org/eclipse/swt/internal/mozilla/nsICancelable.java
@@ -37,7 +37,7 @@ public class nsICancelable extends nsISupports {
 	public static final nsID NS_ICANCELABLE_IID =
 		new nsID(NS_ICANCELABLE_IID_STR);
 
-	public nsICancelable(int /*long*/ address) {
+	public nsICancelable(long /*int*/ address) {
 		super(address);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsICategoryManager.java b/org/eclipse/swt/internal/mozilla/nsICategoryManager.java
index 8417352..5189b63 100644
--- a/org/eclipse/swt/internal/mozilla/nsICategoryManager.java
+++ b/org/eclipse/swt/internal/mozilla/nsICategoryManager.java
@@ -37,15 +37,15 @@ public class nsICategoryManager extends nsISupports {
 	public static final nsID NS_ICATEGORYMANAGER_IID =
 		new nsID(NS_ICATEGORYMANAGER_IID_STR);
 
-	public nsICategoryManager(int /*long*/ address) {
+	public nsICategoryManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetCategoryEntry(byte[] aCategory, byte[] aEntry, int /*long*/[] _retval) {
+	public int GetCategoryEntry(byte[] aCategory, byte[] aEntry, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aCategory, aEntry, _retval);
 	}
 
-	public int AddCategoryEntry(byte[] aCategory, byte[] aEntry, byte[] aValue, int aPersist, int aReplace, int /*long*/[] _retval) {
+	public int AddCategoryEntry(byte[] aCategory, byte[] aEntry, byte[] aValue, int aPersist, int aReplace, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aCategory, aEntry, aValue, aPersist, aReplace, _retval);
 	}
 
@@ -57,11 +57,11 @@ public class nsICategoryManager extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aCategory);
 	}
 
-	public int EnumerateCategory(byte[] aCategory, int /*long*/[] _retval) {
+	public int EnumerateCategory(byte[] aCategory, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aCategory, _retval);
 	}
 
-	public int EnumerateCategories(int /*long*/[] _retval) {
+	public int EnumerateCategories(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsICertOverrideService.java b/org/eclipse/swt/internal/mozilla/nsICertOverrideService.java
index bd5752a..63a1c64 100644
--- a/org/eclipse/swt/internal/mozilla/nsICertOverrideService.java
+++ b/org/eclipse/swt/internal/mozilla/nsICertOverrideService.java
@@ -37,7 +37,7 @@ public class nsICertOverrideService extends nsISupports {
 	public static final nsID NS_ICERTOVERRIDESERVICE_IID =
 		new nsID(NS_ICERTOVERRIDESERVICE_IID_STR);
 
-	public  nsICertOverrideService(int /*long*/ address) {
+	public  nsICertOverrideService(long /*int*/ address) {
 		super(address);
 	}
 
@@ -47,27 +47,27 @@ public class nsICertOverrideService extends nsISupports {
 
 	public static final int ERROR_TIME = 4;
 
-	public int RememberValidityOverride(int /*long*/ aHostName, int aPort, int /*long*/ aCert, int aOverrideBits, int aTemporary) {
+	public int RememberValidityOverride(long /*int*/ aHostName, int aPort, long /*int*/ aCert, int aOverrideBits, int aTemporary) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aHostName, aPort, aCert, aOverrideBits, aTemporary);
 	}
 
-	public int HasMatchingOverride(int /*long*/ aHostName, int aPort, int /*long*/ aCert, int[] aOverrideBits, int[] aIsTemporary, int[] _retval) {
+	public int HasMatchingOverride(long /*int*/ aHostName, int aPort, long /*int*/ aCert, int[] aOverrideBits, int[] aIsTemporary, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aHostName, aPort, aCert, aOverrideBits, aIsTemporary, _retval);
 	}
 
-	public int GetValidityOverride(int /*long*/ aHostName, int aPort, int /*long*/ aHashAlg, int /*long*/ aFingerprint, int[] aOverrideBits, int[] aIsTemporary, int[] _retval) {
+	public int GetValidityOverride(long /*int*/ aHostName, int aPort, long /*int*/ aHashAlg, long /*int*/ aFingerprint, int[] aOverrideBits, int[] aIsTemporary, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aHostName, aPort, aHashAlg, aFingerprint, aOverrideBits, aIsTemporary, _retval);
 	}
 
-	public int ClearValidityOverride(int /*long*/ aHostName, int aPort) {
+	public int ClearValidityOverride(long /*int*/ aHostName, int aPort) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aHostName, aPort);
 	}
 
-	public int GetAllOverrideHostsWithPorts(int[] aCount, int /*long*/[] aHostsWithPortsArray) {
+	public int GetAllOverrideHostsWithPorts(int[] aCount, long /*int*/[] aHostsWithPortsArray) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aCount, aHostsWithPortsArray);
 	}
 
-	public int IsCertUsedForOverrides(int /*long*/ aCert, int aCheckTemporaries, int aCheckPermanents, int[] _retval) {
+	public int IsCertUsedForOverrides(long /*int*/ aCert, int aCheckTemporaries, int aCheckPermanents, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aCert, aCheckTemporaries, aCheckPermanents, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsICertificateDialogs.java b/org/eclipse/swt/internal/mozilla/nsICertificateDialogs.java
index 44d581d..4a5b653 100644
--- a/org/eclipse/swt/internal/mozilla/nsICertificateDialogs.java
+++ b/org/eclipse/swt/internal/mozilla/nsICertificateDialogs.java
@@ -37,31 +37,31 @@ public class nsICertificateDialogs extends nsISupports {
 	public static final nsID NS_ICERTIFICATEDIALOGS_IID =
 		new nsID(NS_ICERTIFICATEDIALOGS_IID_STR);
 
-	public nsICertificateDialogs(int /*long*/ address) {
+	public nsICertificateDialogs(long /*int*/ address) {
 		super(address);
 	}
 
-	public int ConfirmDownloadCACert(int /*long*/ ctx, int /*long*/ cert, int[] trust, int[] _retval) {
+	public int ConfirmDownloadCACert(long /*int*/ ctx, long /*int*/ cert, int[] trust, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), ctx, cert, trust, _retval);
 	}
 
-	public int NotifyCACertExists(int /*long*/ ctx) {
+	public int NotifyCACertExists(long /*int*/ ctx) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), ctx);
 	}
 
-	public int SetPKCS12FilePassword(int /*long*/ ctx, int /*long*/ password, int[] _retval) {
+	public int SetPKCS12FilePassword(long /*int*/ ctx, long /*int*/ password, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), ctx, password, _retval);
 	}
 
-	public int GetPKCS12FilePassword(int /*long*/ ctx, int /*long*/ password, int[] _retval) {
+	public int GetPKCS12FilePassword(long /*int*/ ctx, long /*int*/ password, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), ctx, password, _retval);
 	}
 
-	public int ViewCert(int /*long*/ ctx, int /*long*/ cert) {
+	public int ViewCert(long /*int*/ ctx, long /*int*/ cert) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), ctx, cert);
 	}
 
-	public int CrlImportStatusDialog(int /*long*/ ctx, int /*long*/ crl) {
+	public int CrlImportStatusDialog(long /*int*/ ctx, long /*int*/ crl) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), ctx, crl);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIChannel.java b/org/eclipse/swt/internal/mozilla/nsIChannel.java
index 5868a23..1bab5d3 100644
--- a/org/eclipse/swt/internal/mozilla/nsIChannel.java
+++ b/org/eclipse/swt/internal/mozilla/nsIChannel.java
@@ -37,55 +37,55 @@ public class nsIChannel extends nsIRequest {
 	public static final nsID NS_ICHANNEL_IID =
 		new nsID(NS_ICHANNEL_IID_STR);
 
-	public nsIChannel(int /*long*/ address) {
+	public nsIChannel(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetOriginalURI(int /*long*/[] aOriginalURI) {
+	public int GetOriginalURI(long /*int*/[] aOriginalURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 1, getAddress(), aOriginalURI);
 	}
 
-	public int SetOriginalURI(int /*long*/ aOriginalURI) {
+	public int SetOriginalURI(long /*int*/ aOriginalURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 2, getAddress(), aOriginalURI);
 	}
 
-	public int GetURI(int /*long*/[] aURI) {
+	public int GetURI(long /*int*/[] aURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 3, getAddress(), aURI);
 	}
 
-	public int GetOwner(int /*long*/[] aOwner) {
+	public int GetOwner(long /*int*/[] aOwner) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 4, getAddress(), aOwner);
 	}
 
-	public int SetOwner(int /*long*/ aOwner) {
+	public int SetOwner(long /*int*/ aOwner) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 5, getAddress(), aOwner);
 	}
 
-	public int GetNotificationCallbacks(int /*long*/[] aNotificationCallbacks) {
+	public int GetNotificationCallbacks(long /*int*/[] aNotificationCallbacks) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 6, getAddress(), aNotificationCallbacks);
 	}
 
-	public int SetNotificationCallbacks(int /*long*/ aNotificationCallbacks) {
+	public int SetNotificationCallbacks(long /*int*/ aNotificationCallbacks) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 7, getAddress(), aNotificationCallbacks);
 	}
 
-	public int GetSecurityInfo(int /*long*/[] aSecurityInfo) {
+	public int GetSecurityInfo(long /*int*/[] aSecurityInfo) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 8, getAddress(), aSecurityInfo);
 	}
 
-	public int GetContentType(int /*long*/ aContentType) {
+	public int GetContentType(long /*int*/ aContentType) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 9, getAddress(), aContentType);
 	}
 
-	public int SetContentType(int /*long*/ aContentType) {
+	public int SetContentType(long /*int*/ aContentType) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 10, getAddress(), aContentType);
 	}
 
-	public int GetContentCharset(int /*long*/ aContentCharset) {
+	public int GetContentCharset(long /*int*/ aContentCharset) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 11, getAddress(), aContentCharset);
 	}
 
-	public int SetContentCharset(int /*long*/ aContentCharset) {
+	public int SetContentCharset(long /*int*/ aContentCharset) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 12, getAddress(), aContentCharset);
 	}
 
@@ -97,11 +97,11 @@ public class nsIChannel extends nsIRequest {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 14, getAddress(), aContentLength);
 	}
 
-	public int Open(int /*long*/[] _retval) {
+	public int Open(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 
-	public int AsyncOpen(int /*long*/ aListener, int /*long*/ aContext) {
+	public int AsyncOpen(long /*int*/ aListener, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 16, getAddress(), aListener, aContext);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIClassInfo.java b/org/eclipse/swt/internal/mozilla/nsIClassInfo.java
index 180f721..ae725a3 100644
--- a/org/eclipse/swt/internal/mozilla/nsIClassInfo.java
+++ b/org/eclipse/swt/internal/mozilla/nsIClassInfo.java
@@ -37,27 +37,27 @@ public class nsIClassInfo extends nsISupports {
 	public static final nsID NS_ICLASSINFO_IID =
 		new nsID(NS_ICLASSINFO_IID_STR);
 
-	public nsIClassInfo(int /*long*/ address) {
+	public nsIClassInfo(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetInterfaces(int[] count, int /*long*/[] array) {
+	public int GetInterfaces(int[] count, long /*int*/[] array) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), count, array);
 	}
 
-	public int GetHelperForLanguage(int language, int /*long*/[] _retval) {
+	public int GetHelperForLanguage(int language, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), language, _retval);
 	}
 
-	public int GetContractID(int /*long*/[] aContractID) {
+	public int GetContractID(long /*int*/[] aContractID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aContractID);
 	}
 
-	public int GetClassDescription(int /*long*/[] aClassDescription) {
+	public int GetClassDescription(long /*int*/[] aClassDescription) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aClassDescription);
 	}
 
-	public int GetClassID(int /*long*/ aClassID) {
+	public int GetClassID(long /*int*/ aClassID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aClassID);
 	}
 
@@ -85,7 +85,7 @@ public class nsIClassInfo extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aFlags);
 	}
 
-	public int GetClassIDNoAlloc(int /*long*/ aClassIDNoAlloc) {
+	public int GetClassIDNoAlloc(long /*int*/ aClassIDNoAlloc) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aClassIDNoAlloc);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIComponentManager.java b/org/eclipse/swt/internal/mozilla/nsIComponentManager.java
index 0dd1e04..63c327d 100644
--- a/org/eclipse/swt/internal/mozilla/nsIComponentManager.java
+++ b/org/eclipse/swt/internal/mozilla/nsIComponentManager.java
@@ -37,23 +37,23 @@ public class nsIComponentManager extends nsISupports {
 	public static final nsID NS_ICOMPONENTMANAGER_IID =
 		new nsID(NS_ICOMPONENTMANAGER_IID_STR);
 
-	public nsIComponentManager(int /*long*/ address) {
+	public nsIComponentManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetClassObject(nsID aClass, nsID aIID, int /*long*/[] result) {
+	public int GetClassObject(nsID aClass, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aClass, aIID, result);
 	}
 
-	public int GetClassObjectByContractID(byte[] aContractID, nsID aIID, int /*long*/[] result) {
+	public int GetClassObjectByContractID(byte[] aContractID, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContractID, aIID, result);
 	}
 
-	public int CreateInstance(nsID aClass, int /*long*/ aDelegate, nsID aIID, int /*long*/[] result) {
+	public int CreateInstance(nsID aClass, long /*int*/ aDelegate, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aClass, aDelegate, aIID, result);
 	}
 
-	public int CreateInstanceByContractID(byte[] aContractID, int /*long*/ aDelegate, nsID aIID, int /*long*/[] result) {
+	public int CreateInstanceByContractID(byte[] aContractID, long /*int*/ aDelegate, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContractID, aDelegate, aIID, result);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java b/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java
index 6ff0cff..ce33351 100644
--- a/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java
+++ b/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java
@@ -37,31 +37,31 @@ public class nsIComponentRegistrar extends nsISupports {
 	public static final nsID NS_ICOMPONENTREGISTRAR_IID =
 		new nsID(NS_ICOMPONENTREGISTRAR_IID_STR);
 
-	public nsIComponentRegistrar(int /*long*/ address) {
+	public nsIComponentRegistrar(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AutoRegister(int /*long*/ aSpec) {
+	public int AutoRegister(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSpec);
 	}
 
-	public int AutoUnregister(int /*long*/ aSpec) {
+	public int AutoUnregister(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSpec);
 	}
 
-	public int RegisterFactory(nsID aClass, byte[] aClassName, byte[] aContractID, int /*long*/ aFactory) {
+	public int RegisterFactory(nsID aClass, byte[] aClassName, byte[] aContractID, long /*int*/ aFactory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aClass, aClassName, aContractID, aFactory);
 	}
 
-	public int UnregisterFactory(nsID aClass, int /*long*/ aFactory) {
+	public int UnregisterFactory(nsID aClass, long /*int*/ aFactory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aClass, aFactory);
 	}
 
-	public int RegisterFactoryLocation(nsID aClass, byte[] aClassName, byte[] aContractID, int /*long*/ aFile, byte[] aLoaderStr, byte[] aType) {
+	public int RegisterFactoryLocation(nsID aClass, byte[] aClassName, byte[] aContractID, long /*int*/ aFile, byte[] aLoaderStr, byte[] aType) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aClass, aClassName, aContractID, aFile, aLoaderStr, aType);
 	}
 
-	public int UnregisterFactoryLocation(nsID aClass, int /*long*/ aFile) {
+	public int UnregisterFactoryLocation(nsID aClass, long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aClass, aFile);
 	}
 
@@ -73,19 +73,19 @@ public class nsIComponentRegistrar extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aContractID, _retval);
 	}
 
-	public int EnumerateCIDs(int /*long*/[] _retval) {
+	public int EnumerateCIDs(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), _retval);
 	}
 
-	public int EnumerateContractIDs(int /*long*/[] _retval) {
+	public int EnumerateContractIDs(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), _retval);
 	}
 
-	public int CIDToContractID(nsID aClass, int /*long*/[] _retval) {
+	public int CIDToContractID(nsID aClass, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aClass, _retval);
 	}
 
-	public int ContractIDToCID(byte[] aContractID, int /*long*/ _retval) {
+	public int ContractIDToCID(byte[] aContractID, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aContractID, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java b/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java
index b29155e..96e1355 100644
--- a/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java
+++ b/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java
@@ -37,7 +37,7 @@ public class nsIContextMenuListener extends nsISupports {
 	public static final nsID NS_ICONTEXTMENULISTENER_IID =
 		new nsID(NS_ICONTEXTMENULISTENER_IID_STR);
 
-	public nsIContextMenuListener(int /*long*/ address) {
+	public nsIContextMenuListener(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,7 +53,7 @@ public class nsIContextMenuListener extends nsISupports {
 
 	public static final int CONTEXT_INPUT = 16;
 
-	public int OnShowContextMenu(int aContextFlags, int /*long*/ aEvent, int /*long*/ aNode) {
+	public int OnShowContextMenu(int aContextFlags, long /*int*/ aEvent, long /*int*/ aNode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aContextFlags, aEvent, aNode);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsICookie.java b/org/eclipse/swt/internal/mozilla/nsICookie.java
index 77eb6d2..5bc725e 100644
--- a/org/eclipse/swt/internal/mozilla/nsICookie.java
+++ b/org/eclipse/swt/internal/mozilla/nsICookie.java
@@ -37,15 +37,15 @@ public class nsICookie extends nsISupports {
 	public static final nsID NS_ICOOKIE_IID =
 		new nsID(NS_ICOOKIE_IID_STR);
 
-	public nsICookie(int /*long*/ address) {
+	public nsICookie(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aName);
 	}
 
-	public int GetValue(int /*long*/ aValue) {
+	public int GetValue(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aValue);
 	}
 
@@ -53,11 +53,11 @@ public class nsICookie extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aIsDomain);
 	}
 
-	public int GetHost(int /*long*/ aHost) {
+	public int GetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aHost);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPath);
 	}
 
@@ -79,7 +79,7 @@ public class nsICookie extends nsISupports {
 
 	public static final int STATUS_REJECTED = 4;
 
-	public int GetStatus(int /*long*/ aStatus) {
+	public int GetStatus(long /*int*/ aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aStatus);
 	}
 
@@ -95,7 +95,7 @@ public class nsICookie extends nsISupports {
 
 	public static final int POLICY_NO_II = 5;
 
-	public int GetPolicy(int /*long*/ aPolicy) {
+	public int GetPolicy(long /*int*/ aPolicy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPolicy);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsICookieManager.java b/org/eclipse/swt/internal/mozilla/nsICookieManager.java
index a925dd8..56c8a12 100644
--- a/org/eclipse/swt/internal/mozilla/nsICookieManager.java
+++ b/org/eclipse/swt/internal/mozilla/nsICookieManager.java
@@ -37,7 +37,7 @@ public class nsICookieManager extends nsISupports {
 	public static final nsID NS_ICOOKIEMANAGER_IID =
 		new nsID(NS_ICOOKIEMANAGER_IID_STR);
 
-	public nsICookieManager(int /*long*/ address) {
+	public nsICookieManager(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@ public class nsICookieManager extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress());
 	}
 
-	public int GetEnumerator(int /*long*/[] aEnumerator) {
+	public int GetEnumerator(long /*int*/[] aEnumerator) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aEnumerator);
 	}
 
-	public int Remove(int /*long*/ aDomain, int /*long*/ aName, int /*long*/ aPath, int aBlocked) {
+	public int Remove(long /*int*/ aDomain, long /*int*/ aName, long /*int*/ aPath, int aBlocked) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aDomain, aName, aPath, aBlocked);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsICookieService.java b/org/eclipse/swt/internal/mozilla/nsICookieService.java
index f3faf9b..9ec84d7 100644
--- a/org/eclipse/swt/internal/mozilla/nsICookieService.java
+++ b/org/eclipse/swt/internal/mozilla/nsICookieService.java
@@ -38,23 +38,23 @@ public class nsICookieService extends nsISupports {
 	public static final nsID NS_ICOOKIESERVICE_IID =
 		new nsID(NS_ICOOKIESERVICE_IID_STR);
 
-	public nsICookieService(int /*long*/ address) {
+	public nsICookieService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetCookieString(int /*long*/ aURI, int /*long*/ aChannel, int /*long*/[] _retval) {
+	public int GetCookieString(long /*int*/ aURI, long /*int*/ aChannel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aURI, aChannel, _retval);
 	}
 
-	public int GetCookieStringFromHttp(int /*long*/ aURI, int /*long*/ aFirstURI, int /*long*/ aChannel, int /*long*/[] _retval) {
+	public int GetCookieStringFromHttp(long /*int*/ aURI, long /*int*/ aFirstURI, long /*int*/ aChannel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aURI, aFirstURI, aChannel, _retval);
 	}
 
-	public int SetCookieString(int /*long*/ aURI, int /*long*/ aPrompt, byte[] aCookie, int /*long*/ aChannel) {
+	public int SetCookieString(long /*int*/ aURI, long /*int*/ aPrompt, byte[] aCookie, long /*int*/ aChannel) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aPrompt, aCookie, aChannel);
 	}
 
-	public int SetCookieStringFromHttp(int /*long*/ aURI, int /*long*/ aFirstURI, int /*long*/ aPrompt, byte[] aCookie, byte[] aServerTime, int /*long*/ aChannel) {
+	public int SetCookieStringFromHttp(long /*int*/ aURI, long /*int*/ aFirstURI, long /*int*/ aPrompt, byte[] aCookie, byte[] aServerTime, long /*int*/ aChannel) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aURI, aFirstURI, aPrompt, aCookie, aServerTime, aChannel);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsICookieService_1_9.java b/org/eclipse/swt/internal/mozilla/nsICookieService_1_9.java
index 0824f34..39902c8 100644
--- a/org/eclipse/swt/internal/mozilla/nsICookieService_1_9.java
+++ b/org/eclipse/swt/internal/mozilla/nsICookieService_1_9.java
@@ -37,23 +37,23 @@ public class  nsICookieService_1_9 extends nsISupports {
 	public static final nsID NS_ICOOKIESERVICE_IID =
 		new nsID(NS_ICOOKIESERVICE_IID_STR);
 
-	public  nsICookieService_1_9(int /*long*/ address) {
+	public  nsICookieService_1_9(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetCookieString(int /*long*/ aURI, int /*long*/ aChannel, int /*long*/[] _retval) {
+	public int GetCookieString(long /*int*/ aURI, long /*int*/ aChannel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aURI, aChannel, _retval);
 	}
 
-	public int GetCookieStringFromHttp(int /*long*/ aURI, int /*long*/ aFirstURI, int /*long*/ aChannel, int /*long*/[] _retval) {
+	public int GetCookieStringFromHttp(long /*int*/ aURI, long /*int*/ aFirstURI, long /*int*/ aChannel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aURI, aFirstURI, aChannel, _retval);
 	}
 
-	public int SetCookieString(int /*long*/ aURI, int /*long*/ aPrompt, byte[] aCookie, int /*long*/ aChannel) {
+	public int SetCookieString(long /*int*/ aURI, long /*int*/ aPrompt, byte[] aCookie, long /*int*/ aChannel) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aPrompt, aCookie, aChannel);
 	}
 
-	public int SetCookieStringFromHttp(int /*long*/ aURI, int /*long*/ aFirstURI, int /*long*/ aPrompt, byte[] aCookie, byte[] aServerTime, int /*long*/ aChannel) {
+	public int SetCookieStringFromHttp(long /*int*/ aURI, long /*int*/ aFirstURI, long /*int*/ aPrompt, byte[] aCookie, byte[] aServerTime, long /*int*/ aChannel) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aURI, aFirstURI, aPrompt, aCookie, aServerTime, aChannel);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsID.java b/org/eclipse/swt/internal/mozilla/nsID.java
index a5fd6d8..d608287 100644
--- a/org/eclipse/swt/internal/mozilla/nsID.java
+++ b/org/eclipse/swt/internal/mozilla/nsID.java
@@ -44,9 +44,9 @@ public nsID(String id) {
 }
 
 public boolean Equals(nsID other) {
-	int /*long*/ ptr = XPCOM.nsID_new ();
+	long /*int*/ ptr = XPCOM.nsID_new ();
 	XPCOM.memmove (ptr, this, nsID.sizeof);
-	int /*long*/ otherPtr = XPCOM.nsID_new ();
+	long /*int*/ otherPtr = XPCOM.nsID_new ();
 	XPCOM.memmove (otherPtr, other, nsID.sizeof);
 	boolean result = XPCOM.nsID_Equals (ptr, otherPtr) != 0;
 	XPCOM.nsID_delete (ptr);
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java b/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java
index b07be67..220db6b 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java
@@ -37,7 +37,7 @@ public class nsIDOMEvent extends nsISupports {
 	public static final nsID NS_IDOMEVENT_IID =
 		new nsID(NS_IDOMEVENT_IID_STR);
 
-	public nsIDOMEvent(int /*long*/ address) {
+	public nsIDOMEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -47,15 +47,15 @@ public class nsIDOMEvent extends nsISupports {
 
 	public static final int BUBBLING_PHASE = 3;
 
-	public int GetType(int /*long*/ aType) {
+	public int GetType(long /*int*/ aType) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aType);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aTarget);
 	}
 
-	public int GetCurrentTarget(int /*long*/[] aCurrentTarget) {
+	public int GetCurrentTarget(long /*int*/[] aCurrentTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aCurrentTarget);
 	}
 
@@ -71,7 +71,7 @@ public class nsIDOMEvent extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aCancelable);
 	}
 
-	public int GetTimeStamp(int /*long*/[] aTimeStamp) {
+	public int GetTimeStamp(long /*int*/[] aTimeStamp) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aTimeStamp);
 	}
 
@@ -83,7 +83,7 @@ public class nsIDOMEvent extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress());
 	}
 
-	public int InitEvent(int /*long*/ eventTypeArg, int canBubbleArg, int cancelableArg) {
+	public int InitEvent(long /*int*/ eventTypeArg, int canBubbleArg, int cancelableArg) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), eventTypeArg, canBubbleArg, cancelableArg);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java b/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java
index fd08c33..e83aa11 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java
@@ -37,19 +37,19 @@ public class nsIDOMEventTarget extends nsISupports {
 	public static final nsID NS_IDOMEVENTTARGET_IID =
 		new nsID(NS_IDOMEVENTTARGET_IID_STR);
 
-	public nsIDOMEventTarget(int /*long*/ address) {
+	public nsIDOMEventTarget(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddEventListener(int /*long*/ type, int /*long*/ listener, int useCapture) {
+	public int AddEventListener(long /*int*/ type, long /*int*/ listener, int useCapture) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), type, listener, useCapture);
 	}
 
-	public int RemoveEventListener(int /*long*/ type, int /*long*/ listener, int useCapture) {
+	public int RemoveEventListener(long /*int*/ type, long /*int*/ listener, int useCapture) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), type, listener, useCapture);
 	}
 
-	public int DispatchEvent(int /*long*/ evt, int[] _retval) {
+	public int DispatchEvent(long /*int*/ evt, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), evt, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java b/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java
index 906c132..1b1c0ec 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java
@@ -37,7 +37,7 @@ public class nsIDOMKeyEvent extends nsIDOMUIEvent {
 	public static final nsID NS_IDOMKEYEVENT_IID =
 		new nsID(NS_IDOMKEYEVENT_IID_STR);
 
-	public nsIDOMKeyEvent(int /*long*/ address) {
+	public nsIDOMKeyEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -293,7 +293,7 @@ public class nsIDOMKeyEvent extends nsIDOMUIEvent {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 6, getAddress(), aMetaKey);
 	}
 
-	public int InitKeyEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, int keyCodeArg, int charCodeArg) {
+	public int InitKeyEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, int keyCodeArg, int charCodeArg) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 7, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, keyCodeArg, charCodeArg);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java b/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java
index 71b7a73..7911213 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java
@@ -37,7 +37,7 @@ public class nsIDOMMouseEvent extends nsIDOMUIEvent {
 	public static final nsID NS_IDOMMOUSEEVENT_IID =
 		new nsID(NS_IDOMMOUSEEVENT_IID_STR);
 
-	public nsIDOMMouseEvent(int /*long*/ address) {
+	public nsIDOMMouseEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -77,11 +77,11 @@ public class nsIDOMMouseEvent extends nsIDOMUIEvent {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 9, getAddress(), aButton);
 	}
 
-	public int GetRelatedTarget(int /*long*/[] aRelatedTarget) {
+	public int GetRelatedTarget(long /*int*/[] aRelatedTarget) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 10, getAddress(), aRelatedTarget);
 	}
 
-	public int InitMouseEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, short buttonArg, int /*long*/ relatedTargetArg) {
+	public int InitMouseEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, short buttonArg, long /*int*/ relatedTargetArg) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 11, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java b/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java
index a44ec1f..6648049 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java
@@ -37,15 +37,15 @@ public class nsIDOMSerializer extends nsISupports {
 	public static final nsID NS_IDOMSERIALIZER_IID =
 		new nsID(NS_IDOMSERIALIZER_IID_STR);
 
-	public nsIDOMSerializer(int /*long*/ address) {
+	public nsIDOMSerializer(long /*int*/ address) {
 		super(address);
 	}
 
-	public int SerializeToString(int /*long*/ root, int /*long*/[] _retval) {
+	public int SerializeToString(long /*int*/ root, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), root, _retval);
 	}
 
-	public int SerializeToStream(int /*long*/ root, int /*long*/ stream, byte[] charset) {
+	public int SerializeToStream(long /*int*/ root, long /*int*/ stream, byte[] charset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), root, stream, charset);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java b/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java
index 3a8ec8b..39b41ed 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java
@@ -37,15 +37,15 @@ public class nsIDOMSerializer_1_7 extends nsISupports {
 	public static final nsID NS_IDOMSERIALIZER_IID =
 		new nsID(NS_IDOMSERIALIZER_IID_STR);
 
-	public nsIDOMSerializer_1_7(int /*long*/ address) {
+	public nsIDOMSerializer_1_7(long /*int*/ address) {
 		super(address);
 	}
 
-	public int SerializeToString(int /*long*/ root, int /*long*/ _retval) {
+	public int SerializeToString(long /*int*/ root, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), root, _retval);
 	}
 
-	public int SerializeToStream(int /*long*/ root, int /*long*/ stream, int /*long*/ charset) {
+	public int SerializeToStream(long /*int*/ root, long /*int*/ stream, long /*int*/ charset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), root, stream, charset);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java b/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java
index 3a35f4b..fd2994b 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java
@@ -37,11 +37,11 @@ public class nsIDOMUIEvent extends nsIDOMEvent {
 	public static final nsID NS_IDOMUIEVENT_IID =
 		new nsID(NS_IDOMUIEVENT_IID_STR);
 
-	public nsIDOMUIEvent(int /*long*/ address) {
+	public nsIDOMUIEvent(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetView(int /*long*/[] aView) {
+	public int GetView(long /*int*/[] aView) {
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 1, getAddress(), aView);
 	}
 
@@ -49,7 +49,7 @@ public class nsIDOMUIEvent extends nsIDOMEvent {
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 2, getAddress(), aDetail);
 	}
 
-	public int InitUIEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int detailArg) {
+	public int InitUIEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int detailArg) {
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 3, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java b/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java
index 514843a..eeef96e 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java
@@ -37,35 +37,35 @@ public class nsIDOMWindow extends nsISupports {
 	public static final nsID NS_IDOMWINDOW_IID =
 		new nsID(NS_IDOMWINDOW_IID_STR);
 
-	public nsIDOMWindow(int /*long*/ address) {
+	public nsIDOMWindow(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetDocument(int /*long*/[] aDocument) {
+	public int GetDocument(long /*int*/[] aDocument) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aDocument);
 	}
 
-	public int GetParent(int /*long*/[] aParent) {
+	public int GetParent(long /*int*/[] aParent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aParent);
 	}
 
-	public int GetTop(int /*long*/[] aTop) {
+	public int GetTop(long /*int*/[] aTop) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aTop);
 	}
 
-	public int GetScrollbars(int /*long*/[] aScrollbars) {
+	public int GetScrollbars(long /*int*/[] aScrollbars) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aScrollbars);
 	}
 
-	public int GetFrames(int /*long*/[] aFrames) {
+	public int GetFrames(long /*int*/[] aFrames) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aFrames);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aName);
 	}
 
-	public int SetName(int /*long*/ aName) {
+	public int SetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aName);
 	}
 
@@ -93,7 +93,7 @@ public class nsIDOMWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), xScrollDif, yScrollDif);
 	}
 
-	public int GetSelection(int /*long*/[] _retval) {
+	public int GetSelection(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), _retval);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java b/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java
index 663688a..e250093 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java
@@ -37,7 +37,7 @@ public class nsIDOMWindowCollection extends nsISupports {
 	public static final nsID NS_IDOMWINDOWCOLLECTION_IID =
 		new nsID(NS_IDOMWINDOWCOLLECTION_IID_STR);
 
-	public nsIDOMWindowCollection(int /*long*/ address) {
+	public nsIDOMWindowCollection(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@ public class nsIDOMWindowCollection extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLength);
 	}
 
-	public int Item(int index, int /*long*/[] _retval) {
+	public int Item(int index, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), index, _retval);
 	}
 
-	public int NamedItem(int /*long*/ name, int /*long*/[] _retval) {
+	public int NamedItem(long /*int*/ name, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), name, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDataType.java b/org/eclipse/swt/internal/mozilla/nsIDataType.java
index 88e6093..cf9e0b6 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDataType.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDataType.java
@@ -11,7 +11,7 @@ public class nsIDataType extends nsISupports {
 	public static final nsID NS_IDATATYPE_IID =
 		new nsID(NS_IDATATYPE_IID_STR);
 
-	public nsIDataType(int /*long*/ address) {
+	public nsIDataType(long /*int*/ address) {
 		super(address);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java b/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java
index 58aef5f..9b07197 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java
@@ -37,7 +37,7 @@ public class nsIDirectoryService extends nsISupports {
 	public static final nsID NS_IDIRECTORYSERVICE_IID =
 		new nsID(NS_IDIRECTORYSERVICE_IID_STR);
 
-	public nsIDirectoryService(int /*long*/ address) {
+	public nsIDirectoryService(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@ public class nsIDirectoryService extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress());
 	}
 
-	public int RegisterProvider(int /*long*/ prov) {
+	public int RegisterProvider(long /*int*/ prov) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), prov);
 	}
 
-	public int UnregisterProvider(int /*long*/ prov) {
+	public int UnregisterProvider(long /*int*/ prov) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), prov);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java b/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java
index 8998396..435d97d 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java
@@ -37,11 +37,11 @@ public class nsIDirectoryServiceProvider extends nsISupports {
 	public static final nsID NS_IDIRECTORYSERVICEPROVIDER_IID =
 		new nsID(NS_IDIRECTORYSERVICEPROVIDER_IID_STR);
 
-	public nsIDirectoryServiceProvider(int /*long*/ address) {
+	public nsIDirectoryServiceProvider(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetFile(byte[] prop, int[] persistent, int /*long*/[] _retval) {
+	public int GetFile(byte[] prop, int[] persistent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), prop, persistent, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java b/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java
index a277b15..1a44e2d 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java
@@ -37,11 +37,11 @@ public class nsIDirectoryServiceProvider2 extends nsIDirectoryServiceProvider {
 	public static final nsID NS_IDIRECTORYSERVICEPROVIDER2_IID =
 		new nsID(NS_IDIRECTORYSERVICEPROVIDER2_IID_STRING);
 
-	public nsIDirectoryServiceProvider2(int /*long*/ address) {
+	public nsIDirectoryServiceProvider2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetFiles(byte[] prop, int /*long*/[] _retval) {
+	public int GetFiles(byte[] prop, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIDirectoryServiceProvider.LAST_METHOD_ID + 1, getAddress(), prop, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIDocShell.java b/org/eclipse/swt/internal/mozilla/nsIDocShell.java
index bed487c..ea3312c 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDocShell.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDocShell.java
@@ -37,23 +37,23 @@ public class nsIDocShell extends nsISupports {
 	public static final nsID NS_IDOCSHELL_IID =
 		new nsID(NS_IDOCSHELL_IID_STR);
 
-	public nsIDocShell(int /*long*/ address) {
+	public nsIDocShell(long /*int*/ address) {
 		super(address);
 	}
 
-	public int LoadURI(int /*long*/ uri, int /*long*/ loadInfo, int aLoadFlags, int firstParty) {
+	public int LoadURI(long /*int*/ uri, long /*int*/ loadInfo, int aLoadFlags, int firstParty) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uri, loadInfo, aLoadFlags, firstParty);
 	}
 
-	public int LoadStream(int /*long*/ aStream, int /*long*/ aURI, int /*long*/ aContentType, int /*long*/ aContentCharset, int /*long*/ aLoadInfo) {
+	public int LoadStream(long /*int*/ aStream, long /*int*/ aURI, long /*int*/ aContentType, long /*int*/ aContentCharset, long /*int*/ aLoadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aStream, aURI, aContentType, aContentCharset, aLoadInfo);
 	}
 
-	public int InternalLoad(int /*long*/ aURI, int /*long*/ aReferrer, int /*long*/ aOwner, int aInheritOwner, char[] aWindowTarget, int /*long*/ aPostDataStream, int /*long*/ aHeadersStream, int aLoadFlags, int /*long*/ aSHEntry, int firstParty, int /*long*/[] aDocShell, int /*long*/[] aRequest) {
+	public int InternalLoad(long /*int*/ aURI, long /*int*/ aReferrer, long /*int*/ aOwner, int aInheritOwner, char[] aWindowTarget, long /*int*/ aPostDataStream, long /*int*/ aHeadersStream, int aLoadFlags, long /*int*/ aSHEntry, int firstParty, long /*int*/[] aDocShell, long /*int*/[] aRequest) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aReferrer, aOwner, aInheritOwner, aWindowTarget, aPostDataStream, aHeadersStream, aLoadFlags, aSHEntry, firstParty, aDocShell, aRequest);
 	}
 
-	public int CreateLoadInfo(int /*long*/[] loadInfo) {
+	public int CreateLoadInfo(long /*int*/[] loadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), loadInfo);
 	}
 
@@ -61,7 +61,7 @@ public class nsIDocShell extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress());
 	}
 
-	public int SetCurrentURI(int /*long*/ aURI) {
+	public int SetCurrentURI(long /*int*/ aURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aURI);
 	}
 
@@ -69,43 +69,43 @@ public class nsIDocShell extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetPresContext(int /*long*/[] aPresContext) {
+	public int GetPresContext(long /*int*/[] aPresContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPresContext);
 	}
 
-	public int GetPresShell(int /*long*/[] aPresShell) {
+	public int GetPresShell(long /*int*/[] aPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPresShell);
 	}
 
-	public int GetEldestPresShell(int /*long*/[] aEldestPresShell) {
+	public int GetEldestPresShell(long /*int*/[] aEldestPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aEldestPresShell);
 	}
 
-	public int GetContentViewer(int /*long*/[] aContentViewer) {
+	public int GetContentViewer(long /*int*/[] aContentViewer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aContentViewer);
 	}
 
-	public int GetChromeEventHandler(int /*long*/[] aChromeEventHandler) {
+	public int GetChromeEventHandler(long /*int*/[] aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aChromeEventHandler);
 	}
 
-	public int SetChromeEventHandler(int /*long*/ aChromeEventHandler) {
+	public int SetChromeEventHandler(long /*int*/ aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aChromeEventHandler);
 	}
 
-	public int GetParentURIContentListener(int /*long*/[] aParentURIContentListener) {
+	public int GetParentURIContentListener(long /*int*/[] aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aParentURIContentListener);
 	}
 
-	public int SetParentURIContentListener(int /*long*/ aParentURIContentListener) {
+	public int SetParentURIContentListener(long /*int*/ aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aParentURIContentListener);
 	}
 
-	public int GetDocumentCharsetInfo(int /*long*/[] aDocumentCharsetInfo) {
+	public int GetDocumentCharsetInfo(long /*int*/[] aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), aDocumentCharsetInfo);
 	}
 
-	public int SetDocumentCharsetInfo(int /*long*/ aDocumentCharsetInfo) {
+	public int SetDocumentCharsetInfo(long /*int*/ aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aDocumentCharsetInfo);
 	}
 
@@ -153,7 +153,7 @@ public class nsIDocShell extends nsISupports {
 
 	public static final int ENUMERATE_BACKWARDS = 1;
 
-	public int GetDocShellEnumerator(int aItemType, int aDirection, int /*long*/[] _retval) {
+	public int GetDocShellEnumerator(int aItemType, int aDirection, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 28, getAddress(), aItemType, aDirection, _retval);
 	}
 
@@ -255,11 +255,11 @@ public class nsIDocShell extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 48, getAddress(), aIsExecutingOnLoadHandler);
 	}
 
-	public int GetLayoutHistoryState(int /*long*/[] aLayoutHistoryState) {
+	public int GetLayoutHistoryState(long /*int*/[] aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 49, getAddress(), aLayoutHistoryState);
 	}
 
-	public int SetLayoutHistoryState(int /*long*/ aLayoutHistoryState) {
+	public int SetLayoutHistoryState(long /*int*/ aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 50, getAddress(), aLayoutHistoryState);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java b/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java
index 526c759..3cbeb31 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java
@@ -37,15 +37,15 @@ public class nsIDocShell_1_8 extends nsISupports {
 	public static final nsID NS_IDOCSHELL_IID =
 		new nsID(NS_IDOCSHELL_IID_STR);
 
-	public nsIDocShell_1_8(int /*long*/ address) {
+	public nsIDocShell_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int LoadURI(int /*long*/ uri, int /*long*/ loadInfo, int aLoadFlags, int firstParty) {
+	public int LoadURI(long /*int*/ uri, long /*int*/ loadInfo, int aLoadFlags, int firstParty) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uri, loadInfo, aLoadFlags, firstParty);
 	}
 
-	public int LoadStream(int /*long*/ aStream, int /*long*/ aURI, int /*long*/ aContentType, int /*long*/ aContentCharset, int /*long*/ aLoadInfo) {
+	public int LoadStream(long /*int*/ aStream, long /*int*/ aURI, long /*int*/ aContentType, long /*int*/ aContentCharset, long /*int*/ aLoadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aStream, aURI, aContentType, aContentCharset, aLoadInfo);
 	}
 
@@ -55,11 +55,11 @@ public class nsIDocShell_1_8 extends nsISupports {
 
 	public static final int INTERNAL_LOAD_FLAGS_DONT_SEND_REFERRER = 2;
 
-	public int InternalLoad(int /*long*/ aURI, int /*long*/ aReferrer, int /*long*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, int /*long*/ aPostDataStream, int /*long*/ aHeadersStream, int aLoadFlags, int /*long*/ aSHEntry, int firstParty, int /*long*/[] aDocShell, int /*long*/[] aRequest) {
+	public int InternalLoad(long /*int*/ aURI, long /*int*/ aReferrer, long /*int*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, long /*int*/ aPostDataStream, long /*int*/ aHeadersStream, int aLoadFlags, long /*int*/ aSHEntry, int firstParty, long /*int*/[] aDocShell, long /*int*/[] aRequest) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aReferrer, aOwner, aFlags, aWindowTarget, aTypeHint, aPostDataStream, aHeadersStream, aLoadFlags, aSHEntry, firstParty, aDocShell, aRequest);
 	}
 
-	public int CreateLoadInfo(int /*long*/[] loadInfo) {
+	public int CreateLoadInfo(long /*int*/[] loadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), loadInfo);
 	}
 
@@ -67,7 +67,7 @@ public class nsIDocShell_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress());
 	}
 
-	public int SetCurrentURI(int /*long*/ aURI) {
+	public int SetCurrentURI(long /*int*/ aURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aURI);
 	}
 
@@ -75,35 +75,35 @@ public class nsIDocShell_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), isUnload);
 	}
 
-	public int GetPresContext(int /*long*/[] aPresContext) {
+	public int GetPresContext(long /*int*/[] aPresContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPresContext);
 	}
 
-	public int GetPresShell(int /*long*/[] aPresShell) {
+	public int GetPresShell(long /*int*/[] aPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPresShell);
 	}
 
-	public int GetEldestPresShell(int /*long*/[] aEldestPresShell) {
+	public int GetEldestPresShell(long /*int*/[] aEldestPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aEldestPresShell);
 	}
 
-	public int GetContentViewer(int /*long*/[] aContentViewer) {
+	public int GetContentViewer(long /*int*/[] aContentViewer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aContentViewer);
 	}
 
-	public int GetChromeEventHandler(int /*long*/[] aChromeEventHandler) {
+	public int GetChromeEventHandler(long /*int*/[] aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aChromeEventHandler);
 	}
 
-	public int SetChromeEventHandler(int /*long*/ aChromeEventHandler) {
+	public int SetChromeEventHandler(long /*int*/ aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aChromeEventHandler);
 	}
 
-	public int GetDocumentCharsetInfo(int /*long*/[] aDocumentCharsetInfo) {
+	public int GetDocumentCharsetInfo(long /*int*/[] aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aDocumentCharsetInfo);
 	}
 
-	public int SetDocumentCharsetInfo(int /*long*/ aDocumentCharsetInfo) {
+	public int SetDocumentCharsetInfo(long /*int*/ aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aDocumentCharsetInfo);
 	}
 
@@ -151,7 +151,7 @@ public class nsIDocShell_1_8 extends nsISupports {
 
 	public static final int ENUMERATE_BACKWARDS = 1;
 
-	public int GetDocShellEnumerator(int aItemType, int aDirection, int /*long*/[] _retval) {
+	public int GetDocShellEnumerator(int aItemType, int aDirection, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aItemType, aDirection, _retval);
 	}
 
@@ -255,11 +255,11 @@ public class nsIDocShell_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 46, getAddress(), aIsExecutingOnLoadHandler);
 	}
 
-	public int GetLayoutHistoryState(int /*long*/[] aLayoutHistoryState) {
+	public int GetLayoutHistoryState(long /*int*/[] aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 47, getAddress(), aLayoutHistoryState);
 	}
 
-	public int SetLayoutHistoryState(int /*long*/ aLayoutHistoryState) {
+	public int SetLayoutHistoryState(long /*int*/ aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 48, getAddress(), aLayoutHistoryState);
 	}
 
@@ -267,11 +267,11 @@ public class nsIDocShell_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 49, getAddress(), aShouldSaveLayoutState);
 	}
 
-	public int GetSecurityUI(int /*long*/[] aSecurityUI) {
+	public int GetSecurityUI(long /*int*/[] aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 50, getAddress(), aSecurityUI);
 	}
 
-	public int SetSecurityUI(int /*long*/ aSecurityUI) {
+	public int SetSecurityUI(long /*int*/ aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 51, getAddress(), aSecurityUI);
 	}
 
@@ -283,7 +283,7 @@ public class nsIDocShell_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 53, getAddress());
 	}
 
-	public int BeginRestore(int /*long*/ viewer, int top) {
+	public int BeginRestore(long /*int*/ viewer, int top) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 54, getAddress(), viewer, top);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIDownload.java b/org/eclipse/swt/internal/mozilla/nsIDownload.java
index 365f51f..9caf472 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDownload.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDownload.java
@@ -37,23 +37,23 @@ public class nsIDownload extends nsISupports {
 	public static final nsID NS_IDOWNLOAD_IID =
 		new nsID(NS_IDOWNLOAD_IID_STR);
 
-	public nsIDownload(int /*long*/ address) {
+	public nsIDownload(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Init(int /*long*/ aSource, int /*long*/ aTarget, char[] aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aPersist) {
+	public int Init(long /*int*/ aSource, long /*int*/ aTarget, char[] aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aPersist) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aPersist);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aTarget);
 	}
 
-	public int GetPersist(int /*long*/[] aPersist) {
+	public int GetPersist(long /*int*/[] aPersist) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aPersist);
 	}
 
@@ -61,7 +61,7 @@ public class nsIDownload extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPercentComplete);
 	}
 
-	public int GetDisplayName(int /*long*/[] aDisplayName) {
+	public int GetDisplayName(long /*int*/[] aDisplayName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDisplayName);
 	}
 
@@ -73,23 +73,23 @@ public class nsIDownload extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aStartTime);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aMIMEInfo);
 	}
 
-	public int GetListener(int /*long*/[] aListener) {
+	public int GetListener(long /*int*/[] aListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aListener);
 	}
 
-	public int SetListener(int /*long*/ aListener) {
+	public int SetListener(long /*int*/ aListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aListener);
 	}
 
-	public int GetObserver(int /*long*/[] aObserver) {
+	public int GetObserver(long /*int*/[] aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aObserver);
 	}
 
-	public int SetObserver(int /*long*/ aObserver) {
+	public int SetObserver(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aObserver);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java b/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java
index aeeb024..8105fd7 100644
--- a/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java
+++ b/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java
@@ -37,11 +37,11 @@ public class nsIDownload_1_8 extends nsITransfer {
 	public static final nsID NS_IDOWNLOAD_IID =
 		new nsID(NS_IDOWNLOAD_IID_STR);
 
-	public nsIDownload_1_8(int /*long*/ address) {
+	public nsIDownload_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 1, getAddress(), aTargetFile);
 	}
 
@@ -49,27 +49,27 @@ public class nsIDownload_1_8 extends nsITransfer {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 2, getAddress(), aPercentComplete);
 	}
 
-	public int GetAmountTransferred(int /*long*/ aAmountTransferred) {
+	public int GetAmountTransferred(long /*int*/ aAmountTransferred) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 3, getAddress(), aAmountTransferred);
 	}
 
-	public int GetSize(int /*long*/ aSize) {
+	public int GetSize(long /*int*/ aSize) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 4, getAddress(), aSize);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 5, getAddress(), aSource);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 6, getAddress(), aTarget);
 	}
 
-	public int GetCancelable(int /*long*/[] aCancelable) {
+	public int GetCancelable(long /*int*/[] aCancelable) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 7, getAddress(), aCancelable);
 	}
 
-	public int GetDisplayName(int /*long*/[] aDisplayName) {
+	public int GetDisplayName(long /*int*/[] aDisplayName) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 8, getAddress(), aDisplayName);
 	}
 
@@ -77,7 +77,7 @@ public class nsIDownload_1_8 extends nsITransfer {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 9, getAddress(), aStartTime);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 10, getAddress(), aMIMEInfo);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java b/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java
index 3bb3009..fe5ffec 100644
--- a/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java
+++ b/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java
@@ -37,7 +37,7 @@ public class nsIEmbeddingSiteWindow extends nsISupports {
 	public static final nsID NS_IEMBEDDINGSITEWINDOW_IID =
 		new nsID(NS_IEMBEDDINGSITEWINDOW_IID_STR);
 
-	public nsIEmbeddingSiteWindow(int /*long*/ address) {
+	public nsIEmbeddingSiteWindow(long /*int*/ address) {
 		super(address);
 	}
 
@@ -67,7 +67,7 @@ public class nsIEmbeddingSiteWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aVisibility);
 	}
 
-	public int GetTitle(int /*long*/[] aTitle) {
+	public int GetTitle(long /*int*/[] aTitle) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aTitle);
 	}
 
@@ -75,7 +75,7 @@ public class nsIEmbeddingSiteWindow extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aTitle);
 	}
 
-	public int GetSiteWindow(int /*long*/[] aSiteWindow) {
+	public int GetSiteWindow(long /*int*/[] aSiteWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aSiteWindow);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIFactory.java b/org/eclipse/swt/internal/mozilla/nsIFactory.java
index cd83018..3429f56 100644
--- a/org/eclipse/swt/internal/mozilla/nsIFactory.java
+++ b/org/eclipse/swt/internal/mozilla/nsIFactory.java
@@ -37,11 +37,11 @@ public class nsIFactory extends nsISupports {
 	public static final nsID NS_IFACTORY_IID =
 		new nsID(NS_IFACTORY_IID_STR);
 
-	public nsIFactory(int /*long*/ address) {
+	public nsIFactory(long /*int*/ address) {
 		super(address);
 	}
 
-	public int CreateInstance(int /*long*/ aOuter, nsID iid, int /*long*/[] result) {
+	public int CreateInstance(long /*int*/ aOuter, nsID iid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aOuter, iid, result);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIFile.java b/org/eclipse/swt/internal/mozilla/nsIFile.java
index e5d51b0..9beae64 100644
--- a/org/eclipse/swt/internal/mozilla/nsIFile.java
+++ b/org/eclipse/swt/internal/mozilla/nsIFile.java
@@ -37,7 +37,7 @@ public class nsIFile extends nsISupports {
 	public static final nsID NS_IFILE_IID =
 		new nsID(NS_IFILE_IID_STR);
 
-	public nsIFile(int /*long*/ address) {
+	public nsIFile(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@ public class nsIFile extends nsISupports {
 
 	public static final int DIRECTORY_TYPE = 1;
 
-	public int Append(int /*long*/ node) {
+	public int Append(long /*int*/ node) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), node);
 	}
 
-	public int AppendNative(int /*long*/ node) {
+	public int AppendNative(long /*int*/ node) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), node);
 	}
 
@@ -61,43 +61,43 @@ public class nsIFile extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), type, permissions);
 	}
 
-	public int GetLeafName(int /*long*/ aLeafName) {
+	public int GetLeafName(long /*int*/ aLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aLeafName);
 	}
 
-	public int SetLeafName(int /*long*/ aLeafName) {
+	public int SetLeafName(long /*int*/ aLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aLeafName);
 	}
 
-	public int GetNativeLeafName(int /*long*/ aNativeLeafName) {
+	public int GetNativeLeafName(long /*int*/ aNativeLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aNativeLeafName);
 	}
 
-	public int SetNativeLeafName(int /*long*/ aNativeLeafName) {
+	public int SetNativeLeafName(long /*int*/ aNativeLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aNativeLeafName);
 	}
 
-	public int CopyTo(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyTo(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToFollowingLinks(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToFollowingLinks(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToFollowingLinksNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToFollowingLinksNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), newParentDir, newName);
 	}
 
-	public int MoveTo(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int MoveTo(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), newParentDir, newName);
 	}
 
-	public int MoveToNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int MoveToNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), newParentDir, newName);
 	}
 
@@ -149,19 +149,19 @@ public class nsIFile extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aFileSizeOfLink);
 	}
 
-	public int GetTarget(int /*long*/ aTarget) {
+	public int GetTarget(long /*int*/ aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 27, getAddress(), aTarget);
 	}
 
-	public int GetNativeTarget(int /*long*/ aNativeTarget) {
+	public int GetNativeTarget(long /*int*/ aNativeTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 28, getAddress(), aNativeTarget);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 29, getAddress(), aPath);
 	}
 
-	public int GetNativePath(int /*long*/ aNativePath) {
+	public int GetNativePath(long /*int*/ aNativePath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 30, getAddress(), aNativePath);
 	}
 
@@ -205,23 +205,23 @@ public class nsIFile extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 40, getAddress(), type, permissions);
 	}
 
-	public int Clone(int /*long*/[] _retval) {
+	public int Clone(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 41, getAddress(), _retval);
 	}
 
-	public int Equals(int /*long*/ inFile, int[] _retval) {
+	public int Equals(long /*int*/ inFile, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 42, getAddress(), inFile, _retval);
 	}
 
-	public int Contains(int /*long*/ inFile, int recur, int[] _retval) {
+	public int Contains(long /*int*/ inFile, int recur, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 43, getAddress(), inFile, recur, _retval);
 	}
 
-	public int GetParent(int /*long*/[] aParent) {
+	public int GetParent(long /*int*/[] aParent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 44, getAddress(), aParent);
 	}
 
-	public int GetDirectoryEntries(int /*long*/[] aDirectoryEntries) {
+	public int GetDirectoryEntries(long /*int*/[] aDirectoryEntries) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 45, getAddress(), aDirectoryEntries);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIFilePicker.java b/org/eclipse/swt/internal/mozilla/nsIFilePicker.java
index 916f834..f74a83c 100644
--- a/org/eclipse/swt/internal/mozilla/nsIFilePicker.java
+++ b/org/eclipse/swt/internal/mozilla/nsIFilePicker.java
@@ -37,7 +37,7 @@ public class nsIFilePicker extends nsISupports {
 	public static final nsID NS_IFILEPICKER_IID =
 		new nsID(NS_IFILEPICKER_IID_STR);
 
-	public nsIFilePicker(int /*long*/ address) {
+	public nsIFilePicker(long /*int*/ address) {
 		super(address);
 	}
 
@@ -56,7 +56,7 @@ public class nsIFilePicker extends nsISupports {
 	public static final int filterXUL = 32;
 	public static final int filterApps = 64;
 
-	public int Init(int /*long*/ parent, char[] title, int mode) {
+	public int Init(long /*int*/ parent, char[] title, int mode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, title, mode);
 	}
 
@@ -68,7 +68,7 @@ public class nsIFilePicker extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), title, filter);
 	}
 
-	public int GetDefaultString(int /*long*/[] aDefaultString) {
+	public int GetDefaultString(long /*int*/[] aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aDefaultString);
 	}
 
@@ -76,7 +76,7 @@ public class nsIFilePicker extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aDefaultString);
 	}
 
-	public int GetDefaultExtension(int /*long*/[] aDefaultExtension) {
+	public int GetDefaultExtension(long /*int*/[] aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDefaultExtension);
 	}
 
@@ -92,27 +92,27 @@ public class nsIFilePicker extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aFilterIndex);
 	}
 
-	public int GetDisplayDirectory(int /*long*/[] aDisplayDirectory) {
+	public int GetDisplayDirectory(long /*int*/[] aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aDisplayDirectory);
 	}
 
-	public int SetDisplayDirectory(int /*long*/ aDisplayDirectory) {
+	public int SetDisplayDirectory(long /*int*/ aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aDisplayDirectory);
 	}
 
-	public int GetFile(int /*long*/[] aFile) {
+	public int GetFile(long /*int*/[] aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aFile);
 	}
 
-	public int GetFileURL(int /*long*/[] aFileURL) {
+	public int GetFileURL(long /*int*/[] aFileURL) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aFileURL);
 	}
 
-	public int GetFiles(int /*long*/[] aFiles) {
+	public int GetFiles(long /*int*/[] aFiles) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aFiles);
 	}
 
-	public int Show(int /*long*/ _retval) {
+	public int Show(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java b/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java
index 22b0ed3..4d03fd9 100644
--- a/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java
+++ b/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java
@@ -37,7 +37,7 @@ public class nsIFilePicker_1_8 extends nsISupports {
 	public static final nsID NS_IFILEPICKER_IID =
 		new nsID(NS_IFILEPICKER_IID_STR);
 
-	public nsIFilePicker_1_8(int /*long*/ address) {
+	public nsIFilePicker_1_8(long /*int*/ address) {
 		super(address);
 	}
 
@@ -56,7 +56,7 @@ public class nsIFilePicker_1_8 extends nsISupports {
 	public static final int filterXUL = 32;
 	public static final int filterApps = 64;
 
-	public int Init(int /*long*/ parent, int /*long*/ title, int mode) {
+	public int Init(long /*int*/ parent, long /*int*/ title, int mode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, title, mode);
 	}
 
@@ -64,23 +64,23 @@ public class nsIFilePicker_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), filterMask);
 	}
 
-	public int AppendFilter(int /*long*/ title, int /*long*/ filter) {
+	public int AppendFilter(long /*int*/ title, long /*int*/ filter) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), title, filter);
 	}
 
-	public int GetDefaultString(int /*long*/ aDefaultString) {
+	public int GetDefaultString(long /*int*/ aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aDefaultString);
 	}
 
-	public int SetDefaultString(int /*long*/ aDefaultString) {
+	public int SetDefaultString(long /*int*/ aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aDefaultString);
 	}
 
-	public int GetDefaultExtension(int /*long*/ aDefaultExtension) {
+	public int GetDefaultExtension(long /*int*/ aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDefaultExtension);
 	}
 
-	public int SetDefaultExtension(int /*long*/ aDefaultExtension) {
+	public int SetDefaultExtension(long /*int*/ aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aDefaultExtension);
 	}
 
@@ -92,27 +92,27 @@ public class nsIFilePicker_1_8 extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aFilterIndex);
 	}
 
-	public int GetDisplayDirectory(int /*long*/[] aDisplayDirectory) {
+	public int GetDisplayDirectory(long /*int*/[] aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aDisplayDirectory);
 	}
 
-	public int SetDisplayDirectory(int /*long*/ aDisplayDirectory) {
+	public int SetDisplayDirectory(long /*int*/ aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aDisplayDirectory);
 	}
 
-	public int GetFile(int /*long*/[] aFile) {
+	public int GetFile(long /*int*/[] aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aFile);
 	}
 
-	public int GetFileURL(int /*long*/[] aFileURL) {
+	public int GetFileURL(long /*int*/[] aFileURL) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aFileURL);
 	}
 
-	public int GetFiles(int /*long*/[] aFiles) {
+	public int GetFiles(long /*int*/[] aFiles) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aFiles);
 	}
 
-	public int Show(int /*long*/ _retval) {
+	public int Show(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java
index c003eb6..d1f6a36 100644
--- a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java
+++ b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java
@@ -37,27 +37,27 @@ public class nsIHelperAppLauncher extends nsISupports {
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher(int /*long*/ address) {
+	public nsIHelperAppLauncher(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/[] aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/[] aSuggestedFileName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
@@ -65,7 +65,7 @@ public class nsIHelperAppLauncher extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress());
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aWebProgressListener);
 	}
 
@@ -73,7 +73,7 @@ public class nsIHelperAppLauncher extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress());
 	}
 
-	public int GetDownloadInfo(int /*long*/[] aSourceUrl, long[] aTimeDownloadStarted, int /*long*/[] _retval) {
+	public int GetDownloadInfo(long /*int*/[] aSourceUrl, long[] aTimeDownloadStarted, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aSourceUrl, aTimeDownloadStarted, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java
index 10ca834..16f86bb 100644
--- a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java
+++ b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java
@@ -37,19 +37,19 @@ public class nsIHelperAppLauncherDialog extends nsISupports {
 	public static final nsID NS_IHELPERAPPLAUNCHERDIALOG_IID =
 		new nsID(NS_IHELPERAPPLAUNCHERDIALOG_IID_STR);
 
-	public nsIHelperAppLauncherDialog(int /*long*/ address) {
+	public nsIHelperAppLauncherDialog(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Show(int /*long*/ aLauncher, int /*long*/ aContext) {
+	public int Show(long /*int*/ aLauncher, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLauncher, aContext);
 	}
 
-	public int PromptForSaveToFile(int /*long*/ aWindowContext, char[] aDefaultFile, char[] aSuggestedFileExtension, int /*long*/[] _retval) {
+	public int PromptForSaveToFile(long /*int*/ aWindowContext, char[] aDefaultFile, char[] aSuggestedFileExtension, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWindowContext, aDefaultFile, aSuggestedFileExtension, _retval);
 	}
 
-	public int ShowProgressDialog(int /*long*/ aLauncher, int /*long*/ aContext) {
+	public int ShowProgressDialog(long /*int*/ aLauncher, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aLauncher, aContext);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java
index c97f263..8a85ac2 100644
--- a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java
+++ b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java
@@ -37,7 +37,7 @@ public class nsIHelperAppLauncherDialog_1_9 extends nsISupports {
 	public static final nsID NS_IHELPERAPPLAUNCHERDIALOG_IID =
 		new nsID(NS_IHELPERAPPLAUNCHERDIALOG_IID_STR);
 
-	public nsIHelperAppLauncherDialog_1_9(int /*long*/ address) {
+	public nsIHelperAppLauncherDialog_1_9(long /*int*/ address) {
 		super(address);
 	}
 
@@ -47,11 +47,11 @@ public class nsIHelperAppLauncherDialog_1_9 extends nsISupports {
 
 	public static final int REASON_TYPESNIFFED = 2;
 
-	public int Show(int /*long*/ aLauncher, int /*long*/ aWindowContext, int aReason) {
+	public int Show(long /*int*/ aLauncher, long /*int*/ aWindowContext, int aReason) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLauncher, aWindowContext, aReason);
 	}
 
-	public int PromptForSaveToFile(int /*long*/ aLauncher, int /*long*/ aWindowContext, char[] aDefaultFileName, char[] aSuggestedFileExtension, int aForcePrompt, int /*long*/[] _retval) {
+	public int PromptForSaveToFile(long /*int*/ aLauncher, long /*int*/ aWindowContext, char[] aDefaultFileName, char[] aSuggestedFileExtension, int aForcePrompt, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aLauncher, aWindowContext, aDefaultFileName, aSuggestedFileExtension, aForcePrompt, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java
index 1aca93b..823e42a 100644
--- a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java
+++ b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java
@@ -37,31 +37,31 @@ public class nsIHelperAppLauncher_1_8 extends nsICancelable {
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher_1_8(int /*long*/ address) {
+	public nsIHelperAppLauncher_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/ aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/ aSuggestedFileName) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 6, getAddress(), aWebProgressListener);
 	}
 
@@ -69,11 +69,11 @@ public class nsIHelperAppLauncher_1_8 extends nsICancelable {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 8, getAddress(), aTargetFile);
 	}
 
-	public int GetTimeDownloadStarted(int /*long*/ aTimeDownloadStarted) {
+	public int GetTimeDownloadStarted(long /*int*/ aTimeDownloadStarted) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 9, getAddress(), aTimeDownloadStarted);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java
index d277e75..bb3c6cf 100644
--- a/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java
+++ b/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java
@@ -37,31 +37,31 @@ public class nsIHelperAppLauncher_1_9 extends nsICancelable {
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher_1_9(int /*long*/ address) {
+	public nsIHelperAppLauncher_1_9(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/ aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/ aSuggestedFileName) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 6, getAddress(), aWebProgressListener);
 	}
 
@@ -69,7 +69,7 @@ public class nsIHelperAppLauncher_1_9 extends nsICancelable {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 8, getAddress(), aTargetFile);
 	}
 
@@ -77,7 +77,7 @@ public class nsIHelperAppLauncher_1_9 extends nsICancelable {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 9, getAddress(), aTargetFileIsExecutable);
 	}
 
-	public int GetTimeDownloadStarted(int /*long*/ aTimeDownloadStarted) {
+	public int GetTimeDownloadStarted(long /*int*/ aTimeDownloadStarted) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 10, getAddress(), aTimeDownloadStarted);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIIOService.java b/org/eclipse/swt/internal/mozilla/nsIIOService.java
index a4b52e1..88caa1b 100644
--- a/org/eclipse/swt/internal/mozilla/nsIIOService.java
+++ b/org/eclipse/swt/internal/mozilla/nsIIOService.java
@@ -37,11 +37,11 @@ public class nsIIOService extends nsISupports {
 	public static final nsID NS_IIOSERVICE_IID =
 		new nsID(NS_IIOSERVICE_IID_STR);
 
-	public nsIIOService(int /*long*/ address) {
+	public nsIIOService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetProtocolHandler(byte[] aScheme, int /*long*/[] _retval) {
+	public int GetProtocolHandler(byte[] aScheme, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aScheme, _retval);
 	}
 
@@ -49,19 +49,19 @@ public class nsIIOService extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aScheme, _retval);
 	}
 
-	public int NewURI(int /*long*/ aSpec, byte[] aOriginCharset, int /*long*/ aBaseURI, int /*long*/[] _retval) {
+	public int NewURI(long /*int*/ aSpec, byte[] aOriginCharset, long /*int*/ aBaseURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSpec, aOriginCharset, aBaseURI, _retval);
 	}
 
-	public int NewFileURI(int /*long*/ aFile, int /*long*/[] _retval) {
+	public int NewFileURI(long /*int*/ aFile, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aFile, _retval);
 	}
 
-	public int NewChannelFromURI(int /*long*/ aURI, int /*long*/[] _retval) {
+	public int NewChannelFromURI(long /*int*/ aURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aURI, _retval);
 	}
 
-	public int NewChannel(int /*long*/ aSpec, byte[] aOriginCharset, int /*long*/ aBaseURI, int /*long*/[] _retval) {
+	public int NewChannel(long /*int*/ aSpec, byte[] aOriginCharset, long /*int*/ aBaseURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aSpec, aOriginCharset, aBaseURI, _retval);
 	}
 
@@ -77,7 +77,7 @@ public class nsIIOService extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPort, aScheme, _retval);
 	}
 
-	public int ExtractScheme(int /*long*/ urlString, int /*long*/ _retval) {
+	public int ExtractScheme(long /*int*/ urlString, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), urlString, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIInputStream.java b/org/eclipse/swt/internal/mozilla/nsIInputStream.java
index 62959ad..15026fe 100644
--- a/org/eclipse/swt/internal/mozilla/nsIInputStream.java
+++ b/org/eclipse/swt/internal/mozilla/nsIInputStream.java
@@ -37,7 +37,7 @@ public class nsIInputStream extends nsISupports {
 	public static final nsID NS_IINPUTSTREAM_IID =
 		new nsID(NS_IINPUTSTREAM_IID_STR);
 
-	public nsIInputStream(int /*long*/ address) {
+	public nsIInputStream(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,7 +53,7 @@ public class nsIInputStream extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aBuf, aCount, _retval);
 	}
 
-	public int ReadSegments(int /*long*/ aWriter, int /*long*/ aClosure, int aCount, int[] _retval) {
+	public int ReadSegments(long /*int*/ aWriter, long /*int*/ aClosure, int aCount, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aWriter, aClosure, aCount, _retval);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java b/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java
index 16af6e2..d69ecf0 100644
--- a/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java
+++ b/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java
@@ -37,11 +37,11 @@ public class nsIInterfaceRequestor extends nsISupports {
 	public static final nsID NS_IINTERFACEREQUESTOR_IID =
 		new nsID(NS_IINTERFACEREQUESTOR_IID_STR);
 
-	public nsIInterfaceRequestor(int /*long*/ address) {
+	public nsIInterfaceRequestor(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetInterface(nsID uuid, int /*long*/[] result) {
+	public int GetInterface(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uuid, result);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java b/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java
index 5dbedbe..ea54083 100644
--- a/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java
+++ b/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java
@@ -37,7 +37,7 @@ public class nsIJSContextStack extends nsISupports {
 	public static final nsID NS_IJSCONTEXTSTACK_IID =
 		new nsID(NS_IJSCONTEXTSTACK_IID_STR);
 
-	public nsIJSContextStack(int /*long*/ address) {
+	public nsIJSContextStack(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,15 +45,15 @@ public class nsIJSContextStack extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aCount);
 	}
 
-	public int Peek(int /*long*/[] _retval) {
+	public int Peek(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 
-	public int Pop(int /*long*/[] _retval) {
+	public int Pop(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), _retval);
 	}
 
-	public int Push(int /*long*/ cx) {
+	public int Push(long /*int*/ cx) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), cx);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsILocalFile.java b/org/eclipse/swt/internal/mozilla/nsILocalFile.java
index 772bec8..b3c75d9 100644
--- a/org/eclipse/swt/internal/mozilla/nsILocalFile.java
+++ b/org/eclipse/swt/internal/mozilla/nsILocalFile.java
@@ -37,19 +37,19 @@ public class nsILocalFile extends nsIFile {
 	public static final nsID NS_ILOCALFILE_IID =
 		new nsID(NS_ILOCALFILE_IID_STR);
 
-	public nsILocalFile(int /*long*/ address) {
+	public nsILocalFile(long /*int*/ address) {
 		super(address);
 	}
 
-	public int InitWithPath(int /*long*/ filePath) {
+	public int InitWithPath(long /*int*/ filePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 1, getAddress(), filePath);
 	}
 
-	public int InitWithNativePath(int /*long*/ filePath) {
+	public int InitWithNativePath(long /*int*/ filePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 2, getAddress(), filePath);
 	}
 
-	public int InitWithFile(int /*long*/ aFile) {
+	public int InitWithFile(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 3, getAddress(), aFile);
 	}
 
@@ -61,15 +61,15 @@ public class nsILocalFile extends nsIFile {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 5, getAddress(), aFollowLinks);
 	}
 
-	public int OpenNSPRFileDesc(int flags, int mode, int /*long*/[] _retval) {
+	public int OpenNSPRFileDesc(int flags, int mode, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 6, getAddress(), flags, mode, _retval);
 	}
 
-	public int OpenANSIFileDesc(byte[] mode, int /*long*/[] _retval) {
+	public int OpenANSIFileDesc(byte[] mode, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 7, getAddress(), mode, _retval);
 	}
 
-	public int Load(int /*long*/[] _retval) {
+	public int Load(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 8, getAddress(), _retval);
 	}
 
@@ -77,19 +77,19 @@ public class nsILocalFile extends nsIFile {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 9, getAddress(), aDiskSpaceAvailable);
 	}
 
-	public int AppendRelativePath(int /*long*/ relativeFilePath) {
+	public int AppendRelativePath(long /*int*/ relativeFilePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 10, getAddress(), relativeFilePath);
 	}
 
-	public int AppendRelativeNativePath(int /*long*/ relativeFilePath) {
+	public int AppendRelativeNativePath(long /*int*/ relativeFilePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 11, getAddress(), relativeFilePath);
 	}
 
-	public int GetPersistentDescriptor(int /*long*/ aPersistentDescriptor) {
+	public int GetPersistentDescriptor(long /*int*/ aPersistentDescriptor) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 12, getAddress(), aPersistentDescriptor);
 	}
 
-	public int SetPersistentDescriptor(int /*long*/ aPersistentDescriptor) {
+	public int SetPersistentDescriptor(long /*int*/ aPersistentDescriptor) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 13, getAddress(), aPersistentDescriptor);
 	}
 
@@ -101,11 +101,11 @@ public class nsILocalFile extends nsIFile {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 15, getAddress());
 	}
 
-	public int GetRelativeDescriptor(int /*long*/ fromFile, int /*long*/ _retval) {
+	public int GetRelativeDescriptor(long /*int*/ fromFile, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 16, getAddress(), fromFile, _retval);
 	}
 
-	public int SetRelativeDescriptor(int /*long*/ fromFile, int /*long*/ relativeDesc) {
+	public int SetRelativeDescriptor(long /*int*/ fromFile, long /*int*/ relativeDesc) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 17, getAddress(), fromFile, relativeDesc);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIMemory.java b/org/eclipse/swt/internal/mozilla/nsIMemory.java
index 641777e..6083add 100644
--- a/org/eclipse/swt/internal/mozilla/nsIMemory.java
+++ b/org/eclipse/swt/internal/mozilla/nsIMemory.java
@@ -37,19 +37,19 @@ public class nsIMemory extends nsISupports {
 	public static final nsID NS_IMEMORY_IID =
 		new nsID(NS_IMEMORY_IID_STR);
 
-	public nsIMemory(int /*long*/ address) {
+	public nsIMemory(long /*int*/ address) {
 		super(address);
 	}
 
-	public int /*long*/ Alloc(int size) {
+	public long /*int*/ Alloc(int size) {
 		return XPCOM.nsIMemory_Alloc(getAddress(), size);
 	}
 
-	public int /*long*/ Realloc(int /*long*/ ptr, int newSize) {
+	public long /*int*/ Realloc(long /*int*/ ptr, int newSize) {
 		return XPCOM.nsIMemory_Realloc(getAddress(), ptr, newSize);
 	}
 
-	public int Free(int /*long*/ ptr) {
+	public int Free(long /*int*/ ptr) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), ptr);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIObserverService.java b/org/eclipse/swt/internal/mozilla/nsIObserverService.java
index 5b3775d..79c03e8 100644
--- a/org/eclipse/swt/internal/mozilla/nsIObserverService.java
+++ b/org/eclipse/swt/internal/mozilla/nsIObserverService.java
@@ -37,23 +37,23 @@ public class nsIObserverService extends nsISupports {
 	public static final nsID NS_IOBSERVERSERVICE_IID =
 		new nsID(NS_IOBSERVERSERVICE_IID_STR);
 
-	public nsIObserverService(int /*long*/ address) {
+	public nsIObserverService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddObserver(int /*long*/ anObserver, byte[] aTopic, int ownsWeak) {
+	public int AddObserver(long /*int*/ anObserver, byte[] aTopic, int ownsWeak) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), anObserver, aTopic, ownsWeak);
 	}
 
-	public int RemoveObserver(int /*long*/ anObserver, byte[] aTopic) {
+	public int RemoveObserver(long /*int*/ anObserver, byte[] aTopic) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), anObserver, aTopic);
 	}
 
-	public int NotifyObservers(int /*long*/ aSubject, byte[] aTopic, char[] someData) {
+	public int NotifyObservers(long /*int*/ aSubject, byte[] aTopic, char[] someData) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSubject, aTopic, someData);
 	}
 
-	public int EnumerateObservers(byte[] aTopic, int /*long*/[] _retval) {
+	public int EnumerateObservers(byte[] aTopic, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aTopic, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java b/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java
index 63ed2a3..fc9f825 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java
@@ -37,7 +37,7 @@ public class nsIPrefBranch extends nsISupports {
 	public static final nsID NS_IPREFBRANCH_IID =
 		new nsID(NS_IPREFBRANCH_IID_STR);
 
-	public nsIPrefBranch(int /*long*/ address) {
+	public nsIPrefBranch(long /*int*/ address) {
 		super(address);
 	}
 
@@ -49,7 +49,7 @@ public class nsIPrefBranch extends nsISupports {
 
 	public static final int PREF_BOOL = 128;
 
-	public int GetRoot(int /*long*/[] aRoot) {
+	public int GetRoot(long /*int*/[] aRoot) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aRoot);
 	}
 
@@ -65,7 +65,7 @@ public class nsIPrefBranch extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aPrefName, aValue);
 	}
 
-	public int GetCharPref(byte[] aPrefName, int /*long*/[] _retval) {
+	public int GetCharPref(byte[] aPrefName, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPrefName, _retval);
 	}
 
@@ -81,11 +81,11 @@ public class nsIPrefBranch extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPrefName, aValue);
 	}
 
-	public int GetComplexValue(byte[] aPrefName, nsID aType, int /*long*/[] aValue) {
+	public int GetComplexValue(byte[] aPrefName, nsID aType, long /*int*/[] aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPrefName, aType, aValue);
 	}
 
-	public int SetComplexValue(byte[] aPrefName, nsID aType, int /*long*/ aValue) {
+	public int SetComplexValue(byte[] aPrefName, nsID aType, long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aPrefName, aType, aValue);
 	}
 
@@ -113,7 +113,7 @@ public class nsIPrefBranch extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), aStartingAt);
 	}
 
-	public int GetChildList(byte[] aStartingAt, int[] aCount, int /*long*/[] aChildArray) {
+	public int GetChildList(byte[] aStartingAt, int[] aCount, long /*int*/[] aChildArray) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aStartingAt, aCount, aChildArray);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java b/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java
index ba0c32a..85ce219 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java
@@ -37,11 +37,11 @@ public class nsIPrefLocalizedString extends nsISupports {
 	public static final nsID NS_IPREFLOCALIZEDSTRING_IID =
 		new nsID(NS_IPREFLOCALIZEDSTRING_IID_STR);
 
-	public nsIPrefLocalizedString(int /*long*/ address) {
+	public nsIPrefLocalizedString(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetData(int /*long*/[] aData) {
+	public int GetData(long /*int*/[] aData) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aData);
 	}
 
@@ -49,7 +49,7 @@ public class nsIPrefLocalizedString extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aData);
 	}
 
-	public int ToString(int /*long*/[] _retval) {
+	public int ToString(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), _retval);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIPrefService.java b/org/eclipse/swt/internal/mozilla/nsIPrefService.java
index b3fc9fb..76459a0 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPrefService.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPrefService.java
@@ -37,11 +37,11 @@ public class nsIPrefService extends nsISupports {
 	public static final nsID NS_IPREFSERVICE_IID =
 		new nsID(NS_IPREFSERVICE_IID_STR);
 
-	public nsIPrefService(int /*long*/ address) {
+	public nsIPrefService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int ReadUserPrefs(int /*long*/ aFile) {
+	public int ReadUserPrefs(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aFile);
 	}
 
@@ -53,15 +53,15 @@ public class nsIPrefService extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress());
 	}
 
-	public int SavePrefFile(int /*long*/ aFile) {
+	public int SavePrefFile(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aFile);
 	}
 
-	public int GetBranch(byte[] aPrefRoot, int /*long*/[] _retval) {
+	public int GetBranch(byte[] aPrefRoot, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPrefRoot, _retval);
 	}
 
-	public int GetDefaultBranch(byte[] aPrefRoot, int /*long*/[] _retval) {
+	public int GetDefaultBranch(byte[] aPrefRoot, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aPrefRoot, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIPrincipal.java b/org/eclipse/swt/internal/mozilla/nsIPrincipal.java
index d8c3419..e7d3290 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPrincipal.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPrincipal.java
@@ -37,7 +37,7 @@ public class  nsIPrincipal extends nsISerializable {
 	public static final nsID NS_IPRINCIPAL_IID =
 		new nsID(NS_IPRINCIPAL_IID_STR);
 
-	public  nsIPrincipal(int /*long*/ address) {
+	public  nsIPrincipal(long /*int*/ address) {
 		super(address);
 	}
 
@@ -49,11 +49,11 @@ public class  nsIPrincipal extends nsISerializable {
 
 	public static final int ENABLE_GRANTED = 4;
 
-	public int GetPreferences(int /*long*/[] prefBranch, int /*long*/[] id, int /*long*/[] subjectName, int /*long*/[] grantedList, int /*long*/[] deniedList, int[] isTrusted) {
+	public int GetPreferences(long /*int*/[] prefBranch, long /*int*/[] id, long /*int*/[] subjectName, long /*int*/[] grantedList, long /*int*/[] deniedList, int[] isTrusted) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 1, getAddress(), prefBranch, id, subjectName, grantedList, deniedList, isTrusted);
 	}
 
-	public int Equals(int /*long*/ other, int[] _retval) {
+	public int Equals(long /*int*/ other, int[] _retval) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 2, getAddress(), other, _retval);
 	}
 
@@ -61,19 +61,19 @@ public class  nsIPrincipal extends nsISerializable {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 3, getAddress(), aHashValue);
 	}
 
-	public int GetJSPrincipals(int /*long*/ cx, int /*long*/[] _retval) {
+	public int GetJSPrincipals(long /*int*/ cx, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 4, getAddress(), cx, _retval);
 	}
 
-	public int GetSecurityPolicy(int /*long*/[] aSecurityPolicy) {
+	public int GetSecurityPolicy(long /*int*/[] aSecurityPolicy) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 5, getAddress(), aSecurityPolicy);
 	}
 
-	public int SetSecurityPolicy(int /*long*/ aSecurityPolicy) {
+	public int SetSecurityPolicy(long /*int*/ aSecurityPolicy) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 6, getAddress(), aSecurityPolicy);
 	}
 
-	public int CanEnableCapability(byte[] capability, int /*long*/ _retval) {
+	public int CanEnableCapability(byte[] capability, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 7, getAddress(), capability, _retval);
 	}
 
@@ -81,35 +81,35 @@ public class  nsIPrincipal extends nsISerializable {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 8, getAddress(), capability, canEnable);
 	}
 
-	public int IsCapabilityEnabled(byte[] capability, int /*long*/ annotation, int[] _retval) {
+	public int IsCapabilityEnabled(byte[] capability, long /*int*/ annotation, int[] _retval) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 9, getAddress(), capability, annotation, _retval);
 	}
 
-	public int EnableCapability(byte[] capability, int /*long*/[] annotation) {
+	public int EnableCapability(byte[] capability, long /*int*/[] annotation) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 10, getAddress(), capability, annotation);
 	}
 
-	public int RevertCapability(byte[] capability, int /*long*/[] annotation) {
+	public int RevertCapability(byte[] capability, long /*int*/[] annotation) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 11, getAddress(), capability, annotation);
 	}
 
-	public int DisableCapability(byte[] capability, int /*long*/[] annotation) {
+	public int DisableCapability(byte[] capability, long /*int*/[] annotation) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 12, getAddress(), capability, annotation);
 	}
 
-	public int GetURI(int /*long*/[] aURI) {
+	public int GetURI(long /*int*/[] aURI) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 13, getAddress(), aURI);
 	}
 
-	public int GetDomain(int /*long*/[] aDomain) {
+	public int GetDomain(long /*int*/[] aDomain) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 14, getAddress(), aDomain);
 	}
 
-	public int SetDomain(int /*long*/ aDomain) {
+	public int SetDomain(long /*int*/ aDomain) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 15, getAddress(), aDomain);
 	}
 
-	public int GetOrigin(int /*long*/[] aOrigin) {
+	public int GetOrigin(long /*int*/[] aOrigin) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 16, getAddress(), aOrigin);
 	}
 
@@ -117,27 +117,27 @@ public class  nsIPrincipal extends nsISerializable {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 17, getAddress(), aHasCertificate);
 	}
 
-	public int GetFingerprint(int /*long*/ aFingerprint) {
+	public int GetFingerprint(long /*int*/ aFingerprint) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 18, getAddress(), aFingerprint);
 	}
 
-	public int GetPrettyName(int /*long*/ aPrettyName) {
+	public int GetPrettyName(long /*int*/ aPrettyName) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 19, getAddress(), aPrettyName);
 	}
 
-	public int Subsumes(int /*long*/ other, int[] _retval) {
+	public int Subsumes(long /*int*/ other, int[] _retval) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 20, getAddress(), other, _retval);
 	}
 
-	public int CheckMayLoad(int /*long*/ uri, int report) {
+	public int CheckMayLoad(long /*int*/ uri, int report) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 21, getAddress(), uri, report);
 	}
 
-	public int GetSubjectName(int /*long*/ aSubjectName) {
+	public int GetSubjectName(long /*int*/ aSubjectName) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 22, getAddress(), aSubjectName);
 	}
 
-	public int GetCertificate(int /*long*/[] aCertificate) {
+	public int GetCertificate(long /*int*/[] aCertificate) {
 		return XPCOM.VtblCall(nsISerializable.LAST_METHOD_ID + 23, getAddress(), aCertificate);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java b/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java
index 2cc99e4..1170dc5 100644
--- a/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java
+++ b/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java
@@ -37,11 +37,11 @@ public class nsIProgressDialog extends nsIDownload {
 	public static final nsID NS_IPROGRESSDIALOG_IID =
 		new nsID(NS_IPROGRESSDIALOG_IID_STR);
 
-	public nsIProgressDialog(int /*long*/ address) {
+	public nsIProgressDialog(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Open(int /*long*/ aParent) {
+	public int Open(long /*int*/ aParent) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 1, getAddress(), aParent);
 	}
 
@@ -53,11 +53,11 @@ public class nsIProgressDialog extends nsIDownload {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 3, getAddress(), aCancelDownloadOnClose);
 	}
 
-	public int GetDialog(int /*long*/[] aDialog) {
+	public int GetDialog(long /*int*/[] aDialog) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 4, getAddress(), aDialog);
 	}
 
-	public int SetDialog(int /*long*/ aDialog) {
+	public int SetDialog(long /*int*/ aDialog) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 5, getAddress(), aDialog);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java b/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java
index 13c38f7..f3be58f 100644
--- a/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java
+++ b/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java
@@ -37,11 +37,11 @@ public class nsIProgressDialog_1_8 extends nsIDownload_1_8 {
 	public static final nsID NS_IPROGRESSDIALOG_IID =
 		new nsID(NS_IPROGRESSDIALOG_IID_STR);
 
-	public nsIProgressDialog_1_8(int /*long*/ address) {
+	public nsIProgressDialog_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Open(int /*long*/ aParent) {
+	public int Open(long /*int*/ aParent) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 1, getAddress(), aParent);
 	}
 
@@ -53,19 +53,19 @@ public class nsIProgressDialog_1_8 extends nsIDownload_1_8 {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 3, getAddress(), aCancelDownloadOnClose);
 	}
 
-	public int GetObserver(int /*long*/[] aObserver) {
+	public int GetObserver(long /*int*/[] aObserver) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 4, getAddress(), aObserver);
 	}
 
-	public int SetObserver(int /*long*/ aObserver) {
+	public int SetObserver(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 5, getAddress(), aObserver);
 	}
 
-	public int GetDialog(int /*long*/[] aDialog) {
+	public int GetDialog(long /*int*/[] aDialog) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 6, getAddress(), aDialog);
 	}
 
-	public int SetDialog(int /*long*/ aDialog) {
+	public int SetDialog(long /*int*/ aDialog) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 7, getAddress(), aDialog);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIPromptService.java b/org/eclipse/swt/internal/mozilla/nsIPromptService.java
index 92577e4..9219b41 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPromptService.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPromptService.java
@@ -37,23 +37,23 @@ public class nsIPromptService extends nsISupports {
 	public static final nsID NS_IPROMPTSERVICE_IID =
 		new nsID(NS_IPROMPTSERVICE_IID_STR);
 
-	public nsIPromptService(int /*long*/ address) {
+	public nsIPromptService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Alert(int /*long*/ aParent, char[] aDialogTitle, char[] aText) {
+	public int Alert(long /*int*/ aParent, char[] aDialogTitle, char[] aText) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aParent, aDialogTitle, aText);
 	}
 
-	public int AlertCheck(int /*long*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState) {
+	public int AlertCheck(long /*int*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aParent, aDialogTitle, aText, aCheckMsg, aCheckState);
 	}
 
-	public int Confirm(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int[] _retval) {
+	public int Confirm(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aParent, aDialogTitle, aText, _retval);
 	}
 
-	public int ConfirmCheck(int /*long*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int ConfirmCheck(long /*int*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aParent, aDialogTitle, aText, aCheckMsg, aCheckState, _retval);
 	}
 
@@ -91,23 +91,23 @@ public class nsIPromptService extends nsISupports {
 
 	public static final int STD_YES_NO_BUTTONS = 1027;
 	
-	public int ConfirmEx(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int aButtonFlags, char[] aButton0Title, char[] aButton1Title, char[] aButton2Title, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int ConfirmEx(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int aButtonFlags, char[] aButton0Title, char[] aButton1Title, char[] aButton2Title, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParent, aDialogTitle, aText, aButtonFlags, aButton0Title, aButton1Title, aButton2Title, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int Prompt(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aValue, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int Prompt(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aValue, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParent, aDialogTitle, aText, aValue, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int PromptUsernameAndPassword(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aUsername, int /*long*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int PromptUsernameAndPassword(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aUsername, long /*int*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aParent, aDialogTitle, aText, aUsername, aPassword, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int PromptPassword(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int PromptPassword(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aParent, aDialogTitle, aText, aPassword, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int Select(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int aCount, int /*long*/[] aSelectList, int[] aOutSelection, int[] _retval) {
+	public int Select(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int aCount, long /*int*/[] aSelectList, int[] aOutSelection, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aParent, aDialogTitle, aText, aCount, aSelectList, aOutSelection, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIPromptService2.java b/org/eclipse/swt/internal/mozilla/nsIPromptService2.java
index fec6bc5..5d0207f 100644
--- a/org/eclipse/swt/internal/mozilla/nsIPromptService2.java
+++ b/org/eclipse/swt/internal/mozilla/nsIPromptService2.java
@@ -37,15 +37,15 @@ public class nsIPromptService2 extends nsIPromptService {
 	public static final nsID NS_IPROMPTSERVICE2_IID =
 		new nsID(NS_IPROMPTSERVICE2_IID_STR);
 
-	public nsIPromptService2(int /*long*/ address) {
+	public nsIPromptService2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*long*/ authInfo, char[] checkboxLabel, int[] checkValue, int[] _retval) {
+	public int PromptAuth(long /*int*/ aParent, long /*int*/ aChannel, int level, long /*int*/ authInfo, char[] checkboxLabel, int[] checkValue, int[] _retval) {
 		return XPCOM.VtblCall(nsIPromptService.LAST_METHOD_ID + 1, getAddress(), aParent, aChannel, level, authInfo, checkboxLabel, checkValue, _retval);
 	}
 
-	public int AsyncPromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int /*long*/ aCallback, int /*long*/ aContext, int level, int /*long*/ authInfo, char[] checkboxLabel, int[] checkValue, int /*long*/[] _retval) {
+	public int AsyncPromptAuth(long /*int*/ aParent, long /*int*/ aChannel, long /*int*/ aCallback, long /*int*/ aContext, int level, long /*int*/ authInfo, char[] checkboxLabel, int[] checkValue, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIPromptService.LAST_METHOD_ID + 2, getAddress(), aParent, aChannel, aCallback, aContext, level, authInfo, checkboxLabel, checkValue, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIProperties.java b/org/eclipse/swt/internal/mozilla/nsIProperties.java
index 6311098..bd27675 100644
--- a/org/eclipse/swt/internal/mozilla/nsIProperties.java
+++ b/org/eclipse/swt/internal/mozilla/nsIProperties.java
@@ -37,15 +37,15 @@ public class nsIProperties extends nsISupports {
 	public static final nsID NS_IPROPERTIES_IID =
 		new nsID(NS_IPROPERTIES_IID_STR);
 
-	public nsIProperties(int /*long*/ address) {
+	public nsIProperties(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Get(byte[] prop, nsID iid, int /*long*/[] result) {
+	public int Get(byte[] prop, nsID iid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), prop, iid, result);
 	}
 
-	public int Set(byte[] prop, int /*long*/ value) {
+	public int Set(byte[] prop, long /*int*/ value) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), prop, value);
 	}
 
@@ -57,7 +57,7 @@ public class nsIProperties extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), prop);
 	}
 
-	public int GetKeys(int[] count, int /*long*/[] keys) {
+	public int GetKeys(int[] count, long /*int*/[] keys) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), count, keys);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIRequest.java b/org/eclipse/swt/internal/mozilla/nsIRequest.java
index 909ad0d..3241a28 100644
--- a/org/eclipse/swt/internal/mozilla/nsIRequest.java
+++ b/org/eclipse/swt/internal/mozilla/nsIRequest.java
@@ -37,11 +37,11 @@ public class nsIRequest extends nsISupports {
 	public static final nsID NS_IREQUEST_IID =
 		new nsID(NS_IREQUEST_IID_STR);
 
-	public nsIRequest(int /*long*/ address) {
+	public nsIRequest(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aName);
 	}
 
@@ -49,7 +49,7 @@ public class nsIRequest extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 
-	public int GetStatus(int /*long*/[] aStatus) {
+	public int GetStatus(long /*int*/[] aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aStatus);
 	}
 
@@ -65,15 +65,15 @@ public class nsIRequest extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress());
 	}
 
-	public int GetLoadGroup(int /*long*/[] aLoadGroup) {
+	public int GetLoadGroup(long /*int*/[] aLoadGroup) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aLoadGroup);
 	}
 
-	public int SetLoadGroup(int /*long*/ aLoadGroup) {
+	public int SetLoadGroup(long /*int*/ aLoadGroup) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aLoadGroup);
 	}
 
-	public int GetLoadFlags(int /*long*/[] aLoadFlags) {
+	public int GetLoadFlags(long /*int*/[] aLoadFlags) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aLoadFlags);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsISSLStatus.java b/org/eclipse/swt/internal/mozilla/nsISSLStatus.java
index 2754d62..aaec144 100644
--- a/org/eclipse/swt/internal/mozilla/nsISSLStatus.java
+++ b/org/eclipse/swt/internal/mozilla/nsISSLStatus.java
@@ -37,15 +37,15 @@ public class nsISSLStatus extends nsISupports {
 	public static final nsID NS_ISSLSTATUS_IID =
 		new nsID(NS_ISSLSTATUS_IID_STR);
 
-	public  nsISSLStatus(int /*long*/ address) {
+	public  nsISSLStatus(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetServerCert(int /*long*/[] aServerCert) {
+	public int GetServerCert(long /*int*/[] aServerCert) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aServerCert);
 	}
 
-	public int GetCipherName(int /*long*/[] aCipherName) {
+	public int GetCipherName(long /*int*/[] aCipherName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aCipherName);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9.java b/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9.java
index b2b7de8..f9f03c5 100644
--- a/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9.java
+++ b/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9.java
@@ -37,19 +37,19 @@ public class  nsIScriptSecurityManager_1_9 extends nsIXPCSecurityManager {
 	public static final nsID NS_ISCRIPTSECURITYMANAGER_IID =
 		new nsID(NS_ISCRIPTSECURITYMANAGER_IID_STR);
 
-	public  nsIScriptSecurityManager_1_9(int /*long*/ address) {
+	public  nsIScriptSecurityManager_1_9(long /*int*/ address) {
 		super(address);
 	}
 
-//	public int CheckPropertyAccess(int /*long*/ aJSContext, int /*long*/ aJSObject, byte[] aClassName, !ERROR UNKNOWN C TYPE <jsval >! aProperty, int aAction) {
+//	public int CheckPropertyAccess(long /*int*/ aJSContext, long /*int*/ aJSObject, byte[] aClassName, !ERROR UNKNOWN C TYPE <jsval >! aProperty, int aAction) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 1, getAddress(), aJSContext, aJSObject, aClassName, aProperty, aAction);
 //	}
 
-//	public int CheckConnect(int /*long*/ aJSContext, int /*long*/ aTargetURI, byte[] aClassName, byte[] aProperty) {
+//	public int CheckConnect(long /*int*/ aJSContext, long /*int*/ aTargetURI, byte[] aClassName, byte[] aProperty) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 2, getAddress(), aJSContext, aTargetURI, aClassName, aProperty);
 //	}
 
-	public int CheckLoadURIFromScript(int /*long*/ cx, int /*long*/ uri) {
+	public int CheckLoadURIFromScript(long /*int*/ cx, long /*int*/ uri) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 3, getAddress(), cx, uri);
 	}
 
@@ -65,47 +65,47 @@ public class  nsIScriptSecurityManager_1_9 extends nsIXPCSecurityManager {
 
 	public static final int DISALLOW_SCRIPT = 8;
 
-	public int CheckLoadURIWithPrincipal(int /*long*/ aPrincipal, int /*long*/ uri, int flags) {
+	public int CheckLoadURIWithPrincipal(long /*int*/ aPrincipal, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 4, getAddress(), aPrincipal, uri, flags);
 	}
 
-	public int CheckLoadURI(int /*long*/ from, int /*long*/ uri, int flags) {
+	public int CheckLoadURI(long /*int*/ from, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 5, getAddress(), from, uri, flags);
 	}
 
-	public int CheckLoadURIStrWithPrincipal(int /*long*/ aPrincipal, int /*long*/ uri, int flags) {
+	public int CheckLoadURIStrWithPrincipal(long /*int*/ aPrincipal, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 6, getAddress(), aPrincipal, uri, flags);
 	}
 
-	public int CheckLoadURIStr(int /*long*/ from, int /*long*/ uri, int flags) {
+	public int CheckLoadURIStr(long /*int*/ from, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 7, getAddress(), from, uri, flags);
 	}
 
-	public int CheckFunctionAccess(int /*long*/ cx, int /*long*/ funObj, int /*long*/ targetObj) {
+	public int CheckFunctionAccess(long /*int*/ cx, long /*int*/ funObj, long /*int*/ targetObj) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 8, getAddress(), cx, funObj, targetObj);
 	}
 
-	public int CanExecuteScripts(int /*long*/ cx, int /*long*/ principal, int[] _retval) {
+	public int CanExecuteScripts(long /*int*/ cx, long /*int*/ principal, int[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 9, getAddress(), cx, principal, _retval);
 	}
 
-	public int GetSubjectPrincipal(int /*long*/[] _retval) {
+	public int GetSubjectPrincipal(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 10, getAddress(), _retval);
 	}
 
-	public int GetSystemPrincipal(int /*long*/[] _retval) {
+	public int GetSystemPrincipal(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 11, getAddress(), _retval);
 	}
 
-//	public int GetCertificatePrincipal(int /*long*/ aCertFingerprint, int /*long*/ aSubjectName, int /*long*/ aPrettyName, int /*long*/ aCert, int /*long*/ aURI, int /*long*/[] _retval) {
+//	public int GetCertificatePrincipal(long /*int*/ aCertFingerprint, long /*int*/ aSubjectName, long /*int*/ aPrettyName, long /*int*/ aCert, long /*int*/ aURI, long /*int*/[] _retval) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 12, getAddress(), aCertFingerprint, aSubjectName, aPrettyName, aCert, aURI, _retval);
 //	}
 
-	public int GetCodebasePrincipal(int /*long*/ aURI, int /*long*/[] _retval) {
+	public int GetCodebasePrincipal(long /*int*/ aURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 13, getAddress(), aURI, _retval);
 	}
 
-//	public int RequestCapability(int /*long*/ principal, byte[] capability, int /*long*/ _retval) {
+//	public int RequestCapability(long /*int*/ principal, byte[] capability, long /*int*/ _retval) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 14, getAddress(), principal, capability, _retval);
 //	}
 
@@ -125,11 +125,11 @@ public class  nsIScriptSecurityManager_1_9 extends nsIXPCSecurityManager {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 18, getAddress(), capability);
 	}
 
-//	public int SetCanEnableCapability(int /*long*/ certificateFingerprint, byte[] capability, !ERROR UNKNOWN C TYPE <PRInt16 >! canEnable) {
+//	public int SetCanEnableCapability(long /*int*/ certificateFingerprint, byte[] capability, !ERROR UNKNOWN C TYPE <PRInt16 >! canEnable) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 19, getAddress(), certificateFingerprint, capability, canEnable);
 //	}
 
-	public int GetObjectPrincipal(int /*long*/ cx, int /*long*/ obj, int /*long*/[] _retval) {
+	public int GetObjectPrincipal(long /*int*/ cx, long /*int*/ obj, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 20, getAddress(), cx, obj, _retval);
 	}
 
@@ -137,23 +137,23 @@ public class  nsIScriptSecurityManager_1_9 extends nsIXPCSecurityManager {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 21, getAddress(), _retval);
 	}
 
-	public int CheckSameOrigin(int /*long*/ aJSContext, int /*long*/ aTargetURI) {
+	public int CheckSameOrigin(long /*int*/ aJSContext, long /*int*/ aTargetURI) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 22, getAddress(), aJSContext, aTargetURI);
 	}
 
-	public int CheckSameOriginURI(int /*long*/ aSourceURI, int /*long*/ aTargetURI, int reportError) {
+	public int CheckSameOriginURI(long /*int*/ aSourceURI, long /*int*/ aTargetURI, int reportError) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 23, getAddress(), aSourceURI, aTargetURI, reportError);
 	}
 
-	public int GetPrincipalFromContext(int /*long*/ cx, int /*long*/[] _retval) {
+	public int GetPrincipalFromContext(long /*int*/ cx, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 24, getAddress(), cx, _retval);
 	}
 
-	public int GetChannelPrincipal(int /*long*/ aChannel, int /*long*/[] _retval) {
+	public int GetChannelPrincipal(long /*int*/ aChannel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 25, getAddress(), aChannel, _retval);
 	}
 
-	public int IsSystemPrincipal(int /*long*/ aPrincipal, int[] _retval) {
+	public int IsSystemPrincipal(long /*int*/ aPrincipal, int[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 26, getAddress(), aPrincipal, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9_1.java b/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9_1.java
index 25ae481..7cd414b 100644
--- a/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9_1.java
+++ b/org/eclipse/swt/internal/mozilla/nsIScriptSecurityManager_1_9_1.java
@@ -37,19 +37,19 @@ public class nsIScriptSecurityManager_1_9_1 extends nsIXPCSecurityManager {
 	public static final nsID NS_ISCRIPTSECURITYMANAGER_IID =
 		new nsID(NS_ISCRIPTSECURITYMANAGER_IID_STR);
 
-	public  nsIScriptSecurityManager_1_9_1(int /*long*/ address) {
+	public  nsIScriptSecurityManager_1_9_1(long /*int*/ address) {
 		super(address);
 	}
 
-//	public int CheckPropertyAccess(int /*long*/ aJSContext, int /*long*/ aJSObject, byte[] aClassName, !ERROR UNKNOWN C TYPE <jsval >! aProperty, int aAction) {
+//	public int CheckPropertyAccess(long /*int*/ aJSContext, long /*int*/ aJSObject, byte[] aClassName, !ERROR UNKNOWN C TYPE <jsval >! aProperty, int aAction) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 1, getAddress(), aJSContext, aJSObject, aClassName, aProperty, aAction);
 //	}
 
-	public int CheckConnect(int /*long*/ aJSContext, int /*long*/ aTargetURI, byte[] aClassName, byte[] aProperty) {
+	public int CheckConnect(long /*int*/ aJSContext, long /*int*/ aTargetURI, byte[] aClassName, byte[] aProperty) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 2, getAddress(), aJSContext, aTargetURI, aClassName, aProperty);
 	}
 
-	public int CheckLoadURIFromScript(int /*long*/ cx, int /*long*/ uri) {
+	public int CheckLoadURIFromScript(long /*int*/ cx, long /*int*/ uri) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 3, getAddress(), cx, uri);
 	}
 
@@ -65,47 +65,47 @@ public class nsIScriptSecurityManager_1_9_1 extends nsIXPCSecurityManager {
 
 	public static final int DISALLOW_SCRIPT = 8;
 
-	public int CheckLoadURIWithPrincipal(int /*long*/ aPrincipal, int /*long*/ uri, int flags) {
+	public int CheckLoadURIWithPrincipal(long /*int*/ aPrincipal, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 4, getAddress(), aPrincipal, uri, flags);
 	}
 
-	public int CheckLoadURI(int /*long*/ from, int /*long*/ uri, int flags) {
+	public int CheckLoadURI(long /*int*/ from, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 5, getAddress(), from, uri, flags);
 	}
 
-	public int CheckLoadURIStrWithPrincipal(int /*long*/ aPrincipal, int /*long*/ uri, int flags) {
+	public int CheckLoadURIStrWithPrincipal(long /*int*/ aPrincipal, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 6, getAddress(), aPrincipal, uri, flags);
 	}
 
-	public int CheckLoadURIStr(int /*long*/ from, int /*long*/ uri, int flags) {
+	public int CheckLoadURIStr(long /*int*/ from, long /*int*/ uri, int flags) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 7, getAddress(), from, uri, flags);
 	}
 
-	public int CheckFunctionAccess(int /*long*/ cx, int /*long*/ funObj, int /*long*/ targetObj) {
+	public int CheckFunctionAccess(long /*int*/ cx, long /*int*/ funObj, long /*int*/ targetObj) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 8, getAddress(), cx, funObj, targetObj);
 	}
 
-//	public int CanExecuteScripts(int /*long*/ cx, int /*long*/ principal, int[] _retval NS_OUTPARAM) {
+//	public int CanExecuteScripts(long /*int*/ cx, long /*int*/ principal, int[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 9, getAddress(), cx, principal, _retval NS_OUTPARAM);
 //	}
 
-//	public int GetSubjectPrincipal(int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetSubjectPrincipal(long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 10, getAddress(), _retval NS_OUTPARAM);
 //	}
 
-	public int GetSystemPrincipal(int /*long*/[] _retval) {
+	public int GetSystemPrincipal(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 11, getAddress(), _retval);
 	}
 
-//	public int GetCertificatePrincipal(int /*long*/ aCertFingerprint, int /*long*/ aSubjectName, int /*long*/ aPrettyName, int /*long*/ aCert, int /*long*/ aURI, int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetCertificatePrincipal(long /*int*/ aCertFingerprint, long /*int*/ aSubjectName, long /*int*/ aPrettyName, long /*int*/ aCert, long /*int*/ aURI, long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 12, getAddress(), aCertFingerprint, aSubjectName, aPrettyName, aCert, aURI, _retval NS_OUTPARAM);
 //	}
 
-//	public int GetCodebasePrincipal(int /*long*/ aURI, int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetCodebasePrincipal(long /*int*/ aURI, long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 13, getAddress(), aURI, _retval NS_OUTPARAM);
 //	}
 
-//	public int RequestCapability(int /*long*/ principal, byte[] capability, int /*long*/ _retval NS_OUTPARAM) {
+//	public int RequestCapability(long /*int*/ principal, byte[] capability, long /*int*/ _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 14, getAddress(), principal, capability, _retval NS_OUTPARAM);
 //	}
 
@@ -125,11 +125,11 @@ public class nsIScriptSecurityManager_1_9_1 extends nsIXPCSecurityManager {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 18, getAddress(), capability);
 	}
 
-//	public int SetCanEnableCapability(int /*long*/ certificateFingerprint, byte[] capability, !ERROR UNKNOWN C TYPE <PRInt16 >! canEnable) {
+//	public int SetCanEnableCapability(long /*int*/ certificateFingerprint, byte[] capability, !ERROR UNKNOWN C TYPE <PRInt16 >! canEnable) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 19, getAddress(), certificateFingerprint, capability, canEnable);
 //	}
 
-//	public int GetObjectPrincipal(int /*long*/ cx, int /*long*/ obj, int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetObjectPrincipal(long /*int*/ cx, long /*int*/ obj, long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 20, getAddress(), cx, obj, _retval NS_OUTPARAM);
 //	}
 
@@ -137,23 +137,23 @@ public class nsIScriptSecurityManager_1_9_1 extends nsIXPCSecurityManager {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 21, getAddress(), _retval NS_OUTPARAM);
 //	}
 
-	public int CheckSameOrigin(int /*long*/ aJSContext, int /*long*/ aTargetURI) {
+	public int CheckSameOrigin(long /*int*/ aJSContext, long /*int*/ aTargetURI) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 22, getAddress(), aJSContext, aTargetURI);
 	}
 
-	public int CheckSameOriginURI(int /*long*/ aSourceURI, int /*long*/ aTargetURI, int reportError) {
+	public int CheckSameOriginURI(long /*int*/ aSourceURI, long /*int*/ aTargetURI, int reportError) {
 		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 23, getAddress(), aSourceURI, aTargetURI, reportError);
 	}
 
-//	public int GetPrincipalFromContext(int /*long*/ cx, int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetPrincipalFromContext(long /*int*/ cx, long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 24, getAddress(), cx, _retval NS_OUTPARAM);
 //	}
 
-//	public int GetChannelPrincipal(int /*long*/ aChannel, int /*long*/[] _retval NS_OUTPARAM) {
+//	public int GetChannelPrincipal(long /*int*/ aChannel, long /*int*/[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 25, getAddress(), aChannel, _retval NS_OUTPARAM);
 //	}
 
-//	public int IsSystemPrincipal(int /*long*/ aPrincipal, int[] _retval NS_OUTPARAM) {
+//	public int IsSystemPrincipal(long /*int*/ aPrincipal, int[] _retval NS_OUTPARAM) {
 //		return XPCOM.VtblCall(nsIXPCSecurityManager.LAST_METHOD_ID + 26, getAddress(), aPrincipal, _retval NS_OUTPARAM);
 //	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsISecurityCheckedComponent.java b/org/eclipse/swt/internal/mozilla/nsISecurityCheckedComponent.java
index bc58ffa..d8349d5 100644
--- a/org/eclipse/swt/internal/mozilla/nsISecurityCheckedComponent.java
+++ b/org/eclipse/swt/internal/mozilla/nsISecurityCheckedComponent.java
@@ -11,23 +11,23 @@ public class nsISecurityCheckedComponent extends nsISupports {
 	public static final nsID NS_ISECURITYCHECKEDCOMPONENT_IID =
 		new nsID(NS_ISECURITYCHECKEDCOMPONENT_IID_STR);
 
-	public nsISecurityCheckedComponent(int /*long*/ address) {
+	public nsISecurityCheckedComponent(long /*int*/ address) {
 		super(address);
 	}
 
-	public int CanCreateWrapper(int /*long*/ iid, int /*long*/[] _retval) {
+	public int CanCreateWrapper(long /*int*/ iid, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), iid, _retval);
 	}
 
-	public int CanCallMethod(int /*long*/ iid, char[] methodName, int /*long*/[] _retval) {
+	public int CanCallMethod(long /*int*/ iid, char[] methodName, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), iid, methodName, _retval);
 	}
 
-	public int CanGetProperty(int /*long*/ iid, char[] propertyName, int /*long*/[] _retval) {
+	public int CanGetProperty(long /*int*/ iid, char[] propertyName, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), iid, propertyName, _retval);
 	}
 
-	public int CanSetProperty(int /*long*/ iid, char[] propertyName, int /*long*/[] _retval) {
+	public int CanSetProperty(long /*int*/ iid, char[] propertyName, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), iid, propertyName, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsISerializable.java b/org/eclipse/swt/internal/mozilla/nsISerializable.java
index 6e2fed1..882468f 100644
--- a/org/eclipse/swt/internal/mozilla/nsISerializable.java
+++ b/org/eclipse/swt/internal/mozilla/nsISerializable.java
@@ -37,15 +37,15 @@ public class  nsISerializable extends nsISupports {
 	public static final nsID NS_ISERIALIZABLE_IID =
 		new nsID(NS_ISERIALIZABLE_IID_STR);
 
-	public  nsISerializable(int /*long*/ address) {
+	public  nsISerializable(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Read(int /*long*/ aInputStream) {
+	public int Read(long /*int*/ aInputStream) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aInputStream);
 	}
 
-	public int Write(int /*long*/ aOutputStream) {
+	public int Write(long /*int*/ aOutputStream) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aOutputStream);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIServiceManager.java b/org/eclipse/swt/internal/mozilla/nsIServiceManager.java
index 2f46a69..6b35781 100644
--- a/org/eclipse/swt/internal/mozilla/nsIServiceManager.java
+++ b/org/eclipse/swt/internal/mozilla/nsIServiceManager.java
@@ -37,15 +37,15 @@ public class nsIServiceManager extends nsISupports {
 	public static final nsID NS_ISERVICEMANAGER_IID =
 		new nsID(NS_ISERVICEMANAGER_IID_STR);
 
-	public nsIServiceManager(int /*long*/ address) {
+	public nsIServiceManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetService(nsID aClass, nsID aIID, int /*long*/[] result) {
+	public int GetService(nsID aClass, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aClass, aIID, result);
 	}
 
-	public int GetServiceByContractID(byte[] aContractID, nsID aIID, int /*long*/[] result) {
+	public int GetServiceByContractID(byte[] aContractID, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContractID, aIID, result);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java b/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java
index 9f29e75..3a65d38 100644
--- a/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java
+++ b/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java
@@ -37,7 +37,7 @@ public class nsISimpleEnumerator extends nsISupports {
 	public static final nsID NS_ISIMPLEENUMERATOR_IID =
 		new nsID(NS_ISIMPLEENUMERATOR_IID_STR);
 
-	public nsISimpleEnumerator(int /*long*/ address) {
+	public nsISimpleEnumerator(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,7 +45,7 @@ public class nsISimpleEnumerator extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), _retval);
 	}
 
-	public int GetNext(int /*long*/[] _retval) {
+	public int GetNext(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsISupports.java b/org/eclipse/swt/internal/mozilla/nsISupports.java
index e5d3d7c..8ec3e6d 100644
--- a/org/eclipse/swt/internal/mozilla/nsISupports.java
+++ b/org/eclipse/swt/internal/mozilla/nsISupports.java
@@ -44,17 +44,17 @@ public class nsISupports {
 	public static final nsID NS_ISUPPORTS_IID =
 		new nsID(NS_ISUPPORTS_IID_STR);
 
-	int /*long*/ address;
+	long /*int*/ address;
 
-	public nsISupports(int /*long*/ address) {
+	public nsISupports(long /*int*/ address) {
 		this.address = address;
 	}
 
-	public int /*long*/ getAddress() {
+	public long /*int*/ getAddress() {
 		return this.address;
 	}
 
-	public int QueryInterface(nsID uuid, int /*long*/[] result) {
+	public int QueryInterface(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(FIRST_METHOD_ID, getAddress(), uuid, result);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java b/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java
index 3d34624..1b1ddef 100644
--- a/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java
+++ b/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java
@@ -37,11 +37,11 @@ public class nsISupportsWeakReference extends nsISupports {
 	public static final nsID NS_ISUPPORTSWEAKREFERENCE_IID =
 		new nsID(NS_ISUPPORTSWEAKREFERENCE_IID_STR);
 
-	public nsISupportsWeakReference(int /*long*/ address) {
+	public nsISupportsWeakReference(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetWeakReference(int /*long*/[] _retval) {
+	public int GetWeakReference(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsITooltipListener.java b/org/eclipse/swt/internal/mozilla/nsITooltipListener.java
index e0c58a3..a42c1a7 100644
--- a/org/eclipse/swt/internal/mozilla/nsITooltipListener.java
+++ b/org/eclipse/swt/internal/mozilla/nsITooltipListener.java
@@ -37,7 +37,7 @@ public class nsITooltipListener extends nsISupports {
 	public static final nsID NS_ITOOLTIPLISTENER_IID =
 		new nsID(NS_ITOOLTIPLISTENER_IID_STR);
 
-	public nsITooltipListener(int /*long*/ address) {
+	public nsITooltipListener(long /*int*/ address) {
 		super(address);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsITransfer.java b/org/eclipse/swt/internal/mozilla/nsITransfer.java
index c9f0ba6..454b81f 100644
--- a/org/eclipse/swt/internal/mozilla/nsITransfer.java
+++ b/org/eclipse/swt/internal/mozilla/nsITransfer.java
@@ -37,11 +37,11 @@ public class nsITransfer extends nsIWebProgressListener2 {
 	public static final nsID NS_ITRANSFER_IID =
 		new nsID(NS_ITRANSFER_IID_STR);
 
-	public nsITransfer(int /*long*/ address) {
+	public nsITransfer(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Init(int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+	public int Init(long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 		return XPCOM.VtblCall(nsIWebProgressListener2.LAST_METHOD_ID + 1, getAddress(), aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aTempFile, aCancelable);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIURI.java b/org/eclipse/swt/internal/mozilla/nsIURI.java
index 6c4bc12..49b9a57 100644
--- a/org/eclipse/swt/internal/mozilla/nsIURI.java
+++ b/org/eclipse/swt/internal/mozilla/nsIURI.java
@@ -37,67 +37,67 @@ public class nsIURI extends nsISupports {
 	public static final nsID NS_IURI_IID =
 		new nsID(NS_IURI_IID_STR);
 
-	public nsIURI(int /*long*/ address) {
+	public nsIURI(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetSpec(int /*long*/ aSpec) {
+	public int GetSpec(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSpec);
 	}
 
-	public int SetSpec(int /*long*/ aSpec) {
+	public int SetSpec(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSpec);
 	}
 
-	public int GetPrePath(int /*long*/ aPrePath) {
+	public int GetPrePath(long /*int*/ aPrePath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aPrePath);
 	}
 
-	public int GetScheme(int /*long*/ aScheme) {
+	public int GetScheme(long /*int*/ aScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aScheme);
 	}
 
-	public int SetScheme(int /*long*/ aScheme) {
+	public int SetScheme(long /*int*/ aScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aScheme);
 	}
 
-	public int GetUserPass(int /*long*/ aUserPass) {
+	public int GetUserPass(long /*int*/ aUserPass) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aUserPass);
 	}
 
-	public int SetUserPass(int /*long*/ aUserPass) {
+	public int SetUserPass(long /*int*/ aUserPass) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aUserPass);
 	}
 
-	public int GetUsername(int /*long*/ aUsername) {
+	public int GetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aUsername);
 	}
 
-	public int SetUsername(int /*long*/ aUsername) {
+	public int SetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aUsername);
 	}
 
-	public int GetPassword(int /*long*/ aPassword) {
+	public int GetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aPassword);
 	}
 
-	public int SetPassword(int /*long*/ aPassword) {
+	public int SetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aPassword);
 	}
 
-	public int GetHostPort(int /*long*/ aHostPort) {
+	public int GetHostPort(long /*int*/ aHostPort) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aHostPort);
 	}
 
-	public int SetHostPort(int /*long*/ aHostPort) {
+	public int SetHostPort(long /*int*/ aHostPort) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aHostPort);
 	}
 
-	public int GetHost(int /*long*/ aHost) {
+	public int GetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aHost);
 	}
 
-	public int SetHost(int /*long*/ aHost) {
+	public int SetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aHost);
 	}
 
@@ -109,15 +109,15 @@ public class nsIURI extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aPort);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 18, getAddress(), aPath);
 	}
 
-	public int SetPath(int /*long*/ aPath) {
+	public int SetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 19, getAddress(), aPath);
 	}
 
-	public int Equals(int /*long*/ other, int[] _retval) {
+	public int Equals(long /*int*/ other, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), other, _retval);
 	}
 
@@ -125,23 +125,23 @@ public class nsIURI extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), scheme, _retval);
 	}
 
-	public int Clone(int /*long*/[] _retval) {
+	public int Clone(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress(), _retval);
 	}
 
-	public int Resolve(int /*long*/ relativePath, int /*long*/ _retval) {
+	public int Resolve(long /*int*/ relativePath, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), relativePath, _retval);
 	}
 
-	public int GetAsciiSpec(int /*long*/ aAsciiSpec) {
+	public int GetAsciiSpec(long /*int*/ aAsciiSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 24, getAddress(), aAsciiSpec);
 	}
 
-	public int GetAsciiHost(int /*long*/ aAsciiHost) {
+	public int GetAsciiHost(long /*int*/ aAsciiHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 25, getAddress(), aAsciiHost);
 	}
 
-	public int GetOriginCharset(int /*long*/ aOriginCharset) {
+	public int GetOriginCharset(long /*int*/ aOriginCharset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aOriginCharset);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java b/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java
index aa6378e..8b2235f 100644
--- a/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java
+++ b/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java
@@ -37,39 +37,39 @@ public class nsIURIContentListener extends nsISupports {
 	public static final nsID NS_IURICONTENTLISTENER_IID =
 		new nsID(NS_IURICONTENTLISTENER_IID_STR);
 
-	public nsIURIContentListener(int /*long*/ address) {
+	public nsIURIContentListener(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OnStartURIOpen(int /*long*/ aURI, int[] _retval) {
+	public int OnStartURIOpen(long /*int*/ aURI, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aURI, _retval);
 	}
 
-	public int DoContent(byte[] aContentType, int aIsContentPreferred, int /*long*/ aRequest, int /*long*/[] aContentHandler, int[] _retval) {
+	public int DoContent(byte[] aContentType, int aIsContentPreferred, long /*int*/ aRequest, long /*int*/[] aContentHandler, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContentType, aIsContentPreferred, aRequest, aContentHandler, _retval);
 	}
 
-	public int IsPreferred(byte[] aContentType, int /*long*/[] aDesiredContentType, int[] _retval) {
+	public int IsPreferred(byte[] aContentType, long /*int*/[] aDesiredContentType, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aContentType, aDesiredContentType, _retval);
 	}
 
-	public int CanHandleContent(byte[] aContentType, int aIsContentPreferred, int /*long*/[] aDesiredContentType, int[] _retval) {
+	public int CanHandleContent(byte[] aContentType, int aIsContentPreferred, long /*int*/[] aDesiredContentType, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContentType, aIsContentPreferred, aDesiredContentType, _retval);
 	}
 
-	public int GetLoadCookie(int /*long*/[] aLoadCookie) {
+	public int GetLoadCookie(long /*int*/[] aLoadCookie) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aLoadCookie);
 	}
 
-	public int SetLoadCookie(int /*long*/ aLoadCookie) {
+	public int SetLoadCookie(long /*int*/ aLoadCookie) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aLoadCookie);
 	}
 
-	public int GetParentContentListener(int /*long*/[] aParentContentListener) {
+	public int GetParentContentListener(long /*int*/[] aParentContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aParentContentListener);
 	}
 
-	public int SetParentContentListener(int /*long*/ aParentContentListener) {
+	public int SetParentContentListener(long /*int*/ aParentContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aParentContentListener);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIVariant.java b/org/eclipse/swt/internal/mozilla/nsIVariant.java
index 2de3baf..2026748 100644
--- a/org/eclipse/swt/internal/mozilla/nsIVariant.java
+++ b/org/eclipse/swt/internal/mozilla/nsIVariant.java
@@ -37,7 +37,7 @@ public class nsIVariant extends nsISupports {
 	public static final nsID NS_IVARIANT_IID =
 		new nsID(NS_IVARIANT_IID_STR);
 
-	public nsIVariant(int /*long*/ address) {
+	public nsIVariant(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@ public class nsIVariant extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aDataType);
 	}
 
-	public int GetAsInt8(int /*long*/ _retval) {
+	public int GetAsInt8(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 
-	public int GetAsInt16(int /*long*/ _retval) {
+	public int GetAsInt16(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), _retval);
 	}
 
@@ -61,7 +61,7 @@ public class nsIVariant extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), _retval);
 	}
 
-	public int GetAsUint8(int /*long*/ _retval) {
+	public int GetAsUint8(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), _retval);
 	}
 
@@ -73,7 +73,7 @@ public class nsIVariant extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), _retval);
 	}
 
-	public int GetAsUint64(int /*long*/ _retval) {
+	public int GetAsUint64(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), _retval);
 	}
 
@@ -81,7 +81,7 @@ public class nsIVariant extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), _retval);
 	}
 
-	public int GetAsDouble(int /*long*/ _retval) {
+	public int GetAsDouble(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), _retval);
 	}
 
@@ -97,51 +97,51 @@ public class nsIVariant extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), _retval);
 	}
 
-	public int GetAsID(int /*long*/ retval) {
+	public int GetAsID(long /*int*/ retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), retval);
 	}
 
-	public int GetAsAString(int /*long*/ _retval) {
+	public int GetAsAString(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), _retval);
 	}
 
-	public int GetAsDOMString(int /*long*/ _retval) {
+	public int GetAsDOMString(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), _retval);
 	}
 
-	public int GetAsACString(int /*long*/ _retval) {
+	public int GetAsACString(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 18, getAddress(), _retval);
 	}
 
-	public int GetAsAUTF8String(int /*long*/ _retval) {
+	public int GetAsAUTF8String(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 19, getAddress(), _retval);
 	}
 
-	public int GetAsString(int /*long*/[] _retval) {
+	public int GetAsString(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), _retval);
 	}
 
-	public int GetAsWString(int /*long*/[] _retval) {
+	public int GetAsWString(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), _retval);
 	}
 
-	public int GetAsISupports(int /*long*/[] _retval) {
+	public int GetAsISupports(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress(), _retval);
 	}
 
-	public int GetAsInterface(int /*long*/[] iid, int /*long*/[] iface) {
+	public int GetAsInterface(long /*int*/[] iid, long /*int*/[] iface) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), iid, iface);
 	}
 
-	public int GetAsArray(short[] type, int /*long*/ iid, int[] count, int /*long*/[] ptr) {
+	public int GetAsArray(short[] type, long /*int*/ iid, int[] count, long /*int*/[] ptr) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 24, getAddress(), type, iid, count, ptr);
 	}
 
-	public int GetAsStringWithSize(int[] size, int /*long*/[] str) {
+	public int GetAsStringWithSize(int[] size, long /*int*/[] str) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 25, getAddress(), size, str);
 	}
 
-	public int GetAsWStringWithSize(int[] size, int /*long*/[] str) {
+	public int GetAsWStringWithSize(int[] size, long /*int*/[] str) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), size, str);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIWeakReference.java b/org/eclipse/swt/internal/mozilla/nsIWeakReference.java
index faf448b..130e24e 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWeakReference.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWeakReference.java
@@ -37,11 +37,11 @@ public class nsIWeakReference extends nsISupports {
 	public static final nsID NS_IWEAKREFERENCE_IID =
 		new nsID(NS_IWEAKREFERENCE_IID_STR);
 
-	public nsIWeakReference(int /*long*/ address) {
+	public nsIWeakReference(long /*int*/ address) {
 		super(address);
 	}
 
-	public int QueryReferent(nsID uuid, int /*long*/[] result) {
+	public int QueryReferent(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uuid, result);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java
index 22113bd..5d5f269 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java
@@ -37,35 +37,35 @@ public class nsIWebBrowser extends nsISupports {
 	public static final nsID NS_IWEBBROWSER_IID =
 		new nsID(NS_IWEBBROWSER_IID_STR);
 
-	public nsIWebBrowser(int /*long*/ address) {
+	public nsIWebBrowser(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddWebBrowserListener(int /*long*/ aListener, nsID aIID) {
+	public int AddWebBrowserListener(long /*int*/ aListener, nsID aIID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aListener, aIID);
 	}
 
-	public int RemoveWebBrowserListener(int /*long*/ aListener, nsID aIID) {
+	public int RemoveWebBrowserListener(long /*int*/ aListener, nsID aIID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aListener, aIID);
 	}
 
-	public int GetContainerWindow(int /*long*/[] aContainerWindow) {
+	public int GetContainerWindow(long /*int*/[] aContainerWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aContainerWindow);
 	}
 
-	public int SetContainerWindow(int /*long*/ aContainerWindow) {
+	public int SetContainerWindow(long /*int*/ aContainerWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContainerWindow);
 	}
 
-	public int GetParentURIContentListener(int /*long*/[] aParentURIContentListener) {
+	public int GetParentURIContentListener(long /*int*/[] aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParentURIContentListener);
 	}
 
-	public int SetParentURIContentListener(int /*long*/ aParentURIContentListener) {
+	public int SetParentURIContentListener(long /*int*/ aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParentURIContentListener);
 	}
 
-	public int GetContentDOMWindow(int /*long*/[] aContentDOMWindow) {
+	public int GetContentDOMWindow(long /*int*/[] aContentDOMWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aContentDOMWindow);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java
index 823c4a6..8eba1d3 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java
@@ -37,7 +37,7 @@ public class nsIWebBrowserChrome extends nsISupports {
 	public static final nsID NS_IWEBBROWSERCHROME_IID =
 		new nsID(NS_IWEBBROWSERCHROME_IID_STR);
 
-	public nsIWebBrowserChrome(int /*long*/ address) {
+	public nsIWebBrowserChrome(long /*int*/ address) {
 		super(address);
 	}
 
@@ -51,11 +51,11 @@ public class nsIWebBrowserChrome extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), statusType, status);
 	}
 
-	public int GetWebBrowser(int /*long*/[] aWebBrowser) {
+	public int GetWebBrowser(long /*int*/[] aWebBrowser) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWebBrowser);
 	}
 
-	public int SetWebBrowser(int /*long*/ aWebBrowser) {
+	public int SetWebBrowser(long /*int*/ aWebBrowser) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aWebBrowser);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java
index 6ad6792..146bb70 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java
@@ -37,7 +37,7 @@ public class nsIWebBrowserChromeFocus extends nsISupports {
 	public static final nsID NS_IWEBBROWSERCHROMEFOCUS_IID =
 		new nsID(NS_IWEBBROWSERCHROMEFOCUS_IID_STR);
 
-	public nsIWebBrowserChromeFocus(int /*long*/ address) {
+	public nsIWebBrowserChromeFocus(long /*int*/ address) {
 		super(address);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java
index 788f44e..ec078af 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java
@@ -37,7 +37,7 @@ public class nsIWebBrowserFocus extends nsISupports {
 	public static final nsID NS_IWEBBROWSERFOCUS_IID =
 		new nsID(NS_IWEBBROWSERFOCUS_IID_STR);
 
-	public nsIWebBrowserFocus(int /*long*/ address) {
+	public nsIWebBrowserFocus(long /*int*/ address) {
 		super(address);
 	}
 
@@ -57,19 +57,19 @@ public class nsIWebBrowserFocus extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress());
 	}
 
-	public int GetFocusedWindow(int /*long*/[] aFocusedWindow) {
+	public int GetFocusedWindow(long /*int*/[] aFocusedWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aFocusedWindow);
 	}
 
-	public int SetFocusedWindow(int /*long*/ aFocusedWindow) {
+	public int SetFocusedWindow(long /*int*/ aFocusedWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aFocusedWindow);
 	}
 
-	public int GetFocusedElement(int /*long*/[] aFocusedElement) {
+	public int GetFocusedElement(long /*int*/[] aFocusedElement) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aFocusedElement);
 	}
 
-	public int SetFocusedElement(int /*long*/ aFocusedElement) {
+	public int SetFocusedElement(long /*int*/ aFocusedElement) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aFocusedElement);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowserSetup.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowserSetup.java
index 6ea241f..251806a 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowserSetup.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowserSetup.java
@@ -37,7 +37,7 @@ public class nsIWebBrowserSetup extends nsISupports {
 	public static final nsID NS_IWEBBROWSERSETUP_IID =
 		new nsID(NS_IWEBBROWSERSETUP_IID_STR);
 
-	public nsIWebBrowserSetup(int /*long*/ address) {
+	public nsIWebBrowserSetup(long /*int*/ address) {
 		super(address);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebBrowserStream.java b/org/eclipse/swt/internal/mozilla/nsIWebBrowserStream.java
index 740ab4c..b45672e 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebBrowserStream.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebBrowserStream.java
@@ -37,15 +37,15 @@ public class nsIWebBrowserStream extends nsISupports {
 	public static final nsID NS_IWEBBROWSERSTREAM_IID =
 		new nsID(NS_IWEBBROWSERSTREAM_IID_STR);
 
-	public nsIWebBrowserStream(int /*long*/ address) {
+	public nsIWebBrowserStream(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OpenStream(int /*long*/ aBaseURI, int /*long*/ aContentType) {
+	public int OpenStream(long /*int*/ aBaseURI, long /*int*/ aContentType) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aBaseURI, aContentType);
 	}
 
-	public int AppendToStream(int /*long*/ aData, int aLen) {
+	public int AppendToStream(long /*int*/ aData, int aLen) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aData, aLen);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java b/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java
index 24248d2..f6f7d0a 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java
@@ -37,7 +37,7 @@ public class nsIWebNavigation extends nsISupports {
 	public static final nsID NS_IWEBNAVIGATION_IID =
 		new nsID(NS_IWEBNAVIGATION_IID_STR);
 
-	public nsIWebNavigation(int /*long*/ address) {
+	public nsIWebNavigation(long /*int*/ address) {
 		super(address);
 	}
 
@@ -79,7 +79,7 @@ public class nsIWebNavigation extends nsISupports {
 
 	public static final int LOAD_FLAGS_CHARSET_CHANGE = 1024;
 
-	public int LoadURI(char[] uri, int loadFlags, int /*long*/ referrer, int /*long*/ postData, int /*long*/ headers) {
+	public int LoadURI(char[] uri, int loadFlags, long /*int*/ referrer, long /*int*/ postData, long /*int*/ headers) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), uri, loadFlags, referrer, postData, headers);
 	}
 
@@ -97,23 +97,23 @@ public class nsIWebNavigation extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), stopFlags);
 	}
 
-	public int GetDocument(int /*long*/[] aDocument) {
+	public int GetDocument(long /*int*/[] aDocument) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aDocument);
 	}
 
-	public int GetCurrentURI(int /*long*/[] aCurrentURI) {
+	public int GetCurrentURI(long /*int*/[] aCurrentURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aCurrentURI);
 	}
 
-	public int GetReferringURI(int /*long*/[] aReferringURI) {
+	public int GetReferringURI(long /*int*/[] aReferringURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aReferringURI);
 	}
 
-	public int GetSessionHistory(int /*long*/[] aSessionHistory) {
+	public int GetSessionHistory(long /*int*/[] aSessionHistory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aSessionHistory);
 	}
 
-	public int SetSessionHistory(int /*long*/ aSessionHistory) {
+	public int SetSessionHistory(long /*int*/ aSessionHistory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aSessionHistory);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java b/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java
index e6817fa..1bde34a 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java
@@ -37,7 +37,7 @@ public class nsIWebNavigationInfo extends nsISupports {
 	public static final nsID NS_IWEBNAVIGATIONINFO_IID =
 		new nsID(NS_IWEBNAVIGATIONINFO_IID_STR);
 
-	public nsIWebNavigationInfo(int /*long*/ address) {
+	public nsIWebNavigationInfo(long /*int*/ address) {
 		super(address);
 	}
 
@@ -49,7 +49,7 @@ public class nsIWebNavigationInfo extends nsISupports {
 
 	public static final int OTHER = 32768;
 
-	public int IsTypeSupported(int /*long*/ aType, int /*long*/ aWebNav, int[] _retval) {
+	public int IsTypeSupported(long /*int*/ aType, long /*int*/ aWebNav, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aType, aWebNav, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebProgress.java b/org/eclipse/swt/internal/mozilla/nsIWebProgress.java
index 05fd351..4ada0fb 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebProgress.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebProgress.java
@@ -37,7 +37,7 @@ public class nsIWebProgress extends nsISupports {
 	public static final nsID NS_IWEBPROGRESS_IID =
 		new nsID(NS_IWEBPROGRESS_IID_STR);
 
-	public nsIWebProgress(int /*long*/ address) {
+	public nsIWebProgress(long /*int*/ address) {
 		super(address);
 	}
 
@@ -61,15 +61,15 @@ public class nsIWebProgress extends nsISupports {
 
 	public static final int NOTIFY_ALL = 255;
 
-	public int AddProgressListener(int /*long*/ listener, int aNotifyMask) {
+	public int AddProgressListener(long /*int*/ listener, int aNotifyMask) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), listener, aNotifyMask);
 	}
 
-	public int RemoveProgressListener(int /*long*/ listener) {
+	public int RemoveProgressListener(long /*int*/ listener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), listener);
 	}
 
-	public int GetDOMWindow(int /*long*/[] aDOMWindow) {
+	public int GetDOMWindow(long /*int*/[] aDOMWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aDOMWindow);
 	}
 
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java b/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java
index 2704c1b..54fbd57 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java
@@ -37,7 +37,7 @@ public class nsIWebProgressListener extends nsISupports {
 	public static final nsID NS_IWEBPROGRESSLISTENER_IID =
 		new nsID(NS_IWEBPROGRESSLISTENER_IID_STR);
 
-	public nsIWebProgressListener(int /*long*/ address) {
+	public nsIWebProgressListener(long /*int*/ address) {
 		super(address);
 	}
 
@@ -71,23 +71,23 @@ public class nsIWebProgressListener extends nsISupports {
 
 	public static final int STATE_SECURE_LOW = 131072;
 
-	public int OnStateChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+	public int OnStateChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aWebProgress, aRequest, aStateFlags, aStatus);
 	}
 
-	public int OnProgressChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+	public int OnProgressChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 	}
 
-	public int OnLocationChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ location) {
+	public int OnLocationChange(long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ location) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aWebProgress, aRequest, location);
 	}
 
-	public int OnStatusChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, char[] aMessage) {
+	public int OnStatusChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, char[] aMessage) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aWebProgress, aRequest, aStatus, aMessage);
 	}
 
-	public int OnSecurityChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+	public int OnSecurityChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aWebProgress, aRequest, state);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java b/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java
index d27f486..c1fa07e 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java
@@ -37,11 +37,11 @@ public class nsIWebProgressListener2 extends nsIWebProgressListener {
 	public static final nsID NS_IWEBPROGRESSLISTENER2_IID =
 		new nsID(NS_IWEBPROGRESSLISTENER2_IID_STR);
 
-	public nsIWebProgressListener2(int /*long*/ address) {
+	public nsIWebProgressListener2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OnProgressChange64(int /*long*/ aWebProgress, int /*long*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
+	public int OnProgressChange64(long /*int*/ aWebProgress, long /*int*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
 		return XPCOM.VtblCall(nsIWebProgressListener.LAST_METHOD_ID + 1, getAddress(), aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java b/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java
index d7f5d7f..6693098 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java
@@ -37,11 +37,11 @@ public class nsIWindowCreator extends nsISupports {
 	public static final nsID NS_IWINDOWCREATOR_IID =
 		new nsID(NS_IWINDOWCREATOR_IID_STR);
 
-	public nsIWindowCreator(int /*long*/ address) {
+	public nsIWindowCreator(long /*int*/ address) {
 		super(address);
 	}
 
-	public int CreateChromeWindow(int /*long*/ parent, int chromeFlags, int /*long*/[] _retval) {
+	public int CreateChromeWindow(long /*int*/ parent, int chromeFlags, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, chromeFlags, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java b/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java
index 4bfec46..7596227 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java
@@ -37,13 +37,13 @@ public class nsIWindowCreator2 extends nsIWindowCreator {
 	public static final nsID NS_IWINDOWCREATOR2_IID =
 		new nsID(NS_IWINDOWCREATOR2_IID_STR);
 
-	public nsIWindowCreator2(int /*long*/ address) {
+	public nsIWindowCreator2(long /*int*/ address) {
 		super(address);
 	}
 
 	public static final int PARENT_IS_LOADING_OR_RUNNING_TIMEOUT = 1;
 
-	public int CreateChromeWindow2(int /*long*/ parent, int chromeFlags, int contextFlags, int /*long*/ uri, int[] cancel, int /*long*/[] _retval) {
+	public int CreateChromeWindow2(long /*int*/ parent, int chromeFlags, int contextFlags, long /*int*/ uri, int[] cancel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIWindowCreator.LAST_METHOD_ID + 1, getAddress(), parent, chromeFlags, contextFlags, uri, cancel, _retval);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java b/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java
index 6a1fc59..b105a9e 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java
@@ -37,51 +37,51 @@ public class nsIWindowWatcher extends nsISupports {
 	public static final nsID NS_IWINDOWWATCHER_IID =
 		new nsID(NS_IWINDOWWATCHER_IID_STR);
 
-	public nsIWindowWatcher(int /*long*/ address) {
+	public nsIWindowWatcher(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OpenWindow(int /*long*/ aParent, byte[] aUrl, byte[] aName, byte[] aFeatures, int /*long*/ aArguments, int /*long*/[] _retval) {
+	public int OpenWindow(long /*int*/ aParent, byte[] aUrl, byte[] aName, byte[] aFeatures, long /*int*/ aArguments, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aParent, aUrl, aName, aFeatures, aArguments, _retval);
 	}
 
-	public int RegisterNotification(int /*long*/ aObserver) {
+	public int RegisterNotification(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aObserver);
 	}
 
-	public int UnregisterNotification(int /*long*/ aObserver) {
+	public int UnregisterNotification(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aObserver);
 	}
 
-	public int GetWindowEnumerator(int /*long*/[] _retval) {
+	public int GetWindowEnumerator(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), _retval);
 	}
 
-	public int GetNewPrompter(int /*long*/ aParent, int /*long*/[] _retval) {
+	public int GetNewPrompter(long /*int*/ aParent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParent, _retval);
 	}
 
-	public int GetNewAuthPrompter(int /*long*/ aParent, int /*long*/[] _retval) {
+	public int GetNewAuthPrompter(long /*int*/ aParent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParent, _retval);
 	}
 
-	public int SetWindowCreator(int /*long*/ creator) {
+	public int SetWindowCreator(long /*int*/ creator) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), creator);
 	}
 
-	public int GetChromeForWindow(int /*long*/ aWindow, int /*long*/[] _retval) {
+	public int GetChromeForWindow(long /*int*/ aWindow, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aWindow, _retval);
 	}
 
-	public int GetWindowByName(char[] aTargetName, int /*long*/ aCurrentWindow, int /*long*/[] _retval) {
+	public int GetWindowByName(char[] aTargetName, long /*int*/ aCurrentWindow, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aTargetName, aCurrentWindow, _retval);
 	}
 
-	public int GetActiveWindow(int /*long*/[] aActiveWindow) {
+	public int GetActiveWindow(long /*int*/[] aActiveWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aActiveWindow);
 	}
 
-	public int SetActiveWindow(int /*long*/ aActiveWindow) {
+	public int SetActiveWindow(long /*int*/ aActiveWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aActiveWindow);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIWritableVariant.java b/org/eclipse/swt/internal/mozilla/nsIWritableVariant.java
index 30b340c..33a8769 100644
--- a/org/eclipse/swt/internal/mozilla/nsIWritableVariant.java
+++ b/org/eclipse/swt/internal/mozilla/nsIWritableVariant.java
@@ -11,7 +11,7 @@ public class nsIWritableVariant extends nsIVariant {
 	public static final nsID NS_IWRITABLEVARIANT_IID =
 		new nsID(NS_IWRITABLEVARIANT_IID_STR);
 
-	public nsIWritableVariant(int /*long*/ address) {
+	public nsIWritableVariant(long /*int*/ address) {
 		super(address);
 	}
 
@@ -75,23 +75,23 @@ public class nsIWritableVariant extends nsIVariant {
 //		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 15, getAddress(), aValue);
 //	}
 
-	public int SetAsID(int /*long*/ aValue) {
+	public int SetAsID(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 16, getAddress(), aValue);
 	}
 
-	public int SetAsAString(int /*long*/ aValue) {
+	public int SetAsAString(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 17, getAddress(), aValue);
 	}
 
-	public int SetAsDOMString(int /*long*/ aValue) {
+	public int SetAsDOMString(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 18, getAddress(), aValue);
 	}
 
-	public int SetAsACString(int /*long*/ aValue) {
+	public int SetAsACString(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 19, getAddress(), aValue);
 	}
 
-	public int SetAsAUTF8String(int /*long*/ aValue) {
+	public int SetAsAUTF8String(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 20, getAddress(), aValue);
 	}
 
@@ -103,15 +103,15 @@ public class nsIWritableVariant extends nsIVariant {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 22, getAddress(), aValue);
 	}
 
-	public int SetAsISupports(int /*long*/ aValue) {
+	public int SetAsISupports(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 23, getAddress(), aValue);
 	}
 
-	public int SetAsInterface(nsID iid, int /*long*/ iface) {
+	public int SetAsInterface(nsID iid, long /*int*/ iface) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 24, getAddress(), iid, iface);
 	}
 
-	public int SetAsArray(short type, int /*long*/ iid, int count, int /*long*/ ptr) {
+	public int SetAsArray(short type, long /*int*/ iid, int count, long /*int*/ ptr) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 25, getAddress(), type, iid, count, ptr);
 	}
 
@@ -135,7 +135,7 @@ public class nsIWritableVariant extends nsIVariant {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 30, getAddress());
 	}
 
-	public int SetFromVariant(int /*long*/ aValue) {
+	public int SetFromVariant(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsIVariant.LAST_METHOD_ID + 31, getAddress(), aValue);
 	}
 }
diff --git a/org/eclipse/swt/internal/mozilla/nsIX509Cert.java b/org/eclipse/swt/internal/mozilla/nsIX509Cert.java
index 6023055..7c82afa 100644
--- a/org/eclipse/swt/internal/mozilla/nsIX509Cert.java
+++ b/org/eclipse/swt/internal/mozilla/nsIX509Cert.java
@@ -37,87 +37,87 @@ public class nsIX509Cert extends nsISupports {
 	public static final nsID NS_IX509CERT_IID =
 		new nsID(NS_IX509CERT_IID_STR);
 
-	public  nsIX509Cert(int /*long*/ address) {
+	public  nsIX509Cert(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetNickname(int /*long*/ aNickname) {
+	public int GetNickname(long /*int*/ aNickname) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aNickname);
 	}
 
-	public int GetEmailAddress(int /*long*/ aEmailAddress) {
+	public int GetEmailAddress(long /*int*/ aEmailAddress) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aEmailAddress);
 	}
 
-	public int GetEmailAddresses(int[] length, int /*long*/[] addresses) {
+	public int GetEmailAddresses(int[] length, long /*int*/[] addresses) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), length, addresses);
 	}
 
-	public int ContainsEmailAddress(int /*long*/ aEmailAddress, int[] _retval) {
+	public int ContainsEmailAddress(long /*int*/ aEmailAddress, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aEmailAddress, _retval);
 	}
 
-	public int GetSubjectName(int /*long*/ aSubjectName) {
+	public int GetSubjectName(long /*int*/ aSubjectName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aSubjectName);
 	}
 
-	public int GetCommonName(int /*long*/ aCommonName) {
+	public int GetCommonName(long /*int*/ aCommonName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aCommonName);
 	}
 
-	public int GetOrganization(int /*long*/ aOrganization) {
+	public int GetOrganization(long /*int*/ aOrganization) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aOrganization);
 	}
 
-	public int GetOrganizationalUnit(int /*long*/ aOrganizationalUnit) {
+	public int GetOrganizationalUnit(long /*int*/ aOrganizationalUnit) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aOrganizationalUnit);
 	}
 
-	public int GetSha1Fingerprint(int /*long*/ aSha1Fingerprint) {
+	public int GetSha1Fingerprint(long /*int*/ aSha1Fingerprint) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aSha1Fingerprint);
 	}
 
-	public int GetMd5Fingerprint(int /*long*/ aMd5Fingerprint) {
+	public int GetMd5Fingerprint(long /*int*/ aMd5Fingerprint) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aMd5Fingerprint);
 	}
 
-	public int GetTokenName(int /*long*/ aTokenName) {
+	public int GetTokenName(long /*int*/ aTokenName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aTokenName);
 	}
 
-	public int GetIssuerName(int /*long*/ aIssuerName) {
+	public int GetIssuerName(long /*int*/ aIssuerName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aIssuerName);
 	}
 
-	public int GetSerialNumber(int /*long*/ aSerialNumber) {
+	public int GetSerialNumber(long /*int*/ aSerialNumber) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aSerialNumber);
 	}
 
-	public int GetIssuerCommonName(int /*long*/ aIssuerCommonName) {
+	public int GetIssuerCommonName(long /*int*/ aIssuerCommonName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aIssuerCommonName);
 	}
 
-	public int GetIssuerOrganization(int /*long*/ aIssuerOrganization) {
+	public int GetIssuerOrganization(long /*int*/ aIssuerOrganization) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aIssuerOrganization);
 	}
 
-	public int GetIssuerOrganizationUnit(int /*long*/ aIssuerOrganizationUnit) {
+	public int GetIssuerOrganizationUnit(long /*int*/ aIssuerOrganizationUnit) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), aIssuerOrganizationUnit);
 	}
 
-	public int GetIssuer(int /*long*/[] aIssuer) {
+	public int GetIssuer(long /*int*/[] aIssuer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aIssuer);
 	}
 
-	public int GetValidity(int /*long*/[] aValidity) {
+	public int GetValidity(long /*int*/[] aValidity) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 18, getAddress(), aValidity);
 	}
 
-	public int GetDbKey(int /*long*/[] aDbKey) {
+	public int GetDbKey(long /*int*/[] aDbKey) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 19, getAddress(), aDbKey);
 	}
 
-	public int GetWindowTitle(int /*long*/[] aWindowTitle) {
+	public int GetWindowTitle(long /*int*/[] aWindowTitle) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), aWindowTitle);
 	}
 
@@ -173,15 +173,15 @@ public class nsIX509Cert extends nsISupports {
 
 	public static final int CERT_USAGE_AnyCA = 11;
 
-	public int GetChain(int /*long*/[] _retval) {
+	public int GetChain(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), _retval);
 	}
 
-	public int GetUsagesArray(int ignoreOcsp, int[] verified, int[] count, int /*long*/[] usages) {
+	public int GetUsagesArray(int ignoreOcsp, int[] verified, int[] count, long /*int*/[] usages) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress(), ignoreOcsp, verified, count, usages);
 	}
 
-	public int GetUsagesString(int ignoreOcsp, int[] verified, int /*long*/ usages) {
+	public int GetUsagesString(int ignoreOcsp, int[] verified, long /*int*/ usages) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), ignoreOcsp, verified, usages);
 	}
 
@@ -189,15 +189,15 @@ public class nsIX509Cert extends nsISupports {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 24, getAddress(), usage, _retval);
 	}
 
-	public int GetASN1Structure(int /*long*/[] aASN1Structure) {
+	public int GetASN1Structure(long /*int*/[] aASN1Structure) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 25, getAddress(), aASN1Structure);
 	}
 
-	public int GetRawDER(int[] length, int /*long*/[] data) {
+	public int GetRawDER(int[] length, long /*int*/[] data) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), length, data);
 	}
 
-	public int Equals(int /*long*/ other, int[] _retval) {
+	public int Equals(long /*int*/ other, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 27, getAddress(), other, _retval);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIX509CertValidity.java b/org/eclipse/swt/internal/mozilla/nsIX509CertValidity.java
index 2357b4d..feb15fe 100644
--- a/org/eclipse/swt/internal/mozilla/nsIX509CertValidity.java
+++ b/org/eclipse/swt/internal/mozilla/nsIX509CertValidity.java
@@ -37,39 +37,39 @@ public class nsIX509CertValidity extends nsISupports {
 	public static final nsID NS_IX509CERTVALIDITY_IID =
 		new nsID(NS_IX509CERTVALIDITY_IID_STR);
 
-	public  nsIX509CertValidity(int /*long*/ address) {
+	public  nsIX509CertValidity(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetNotBefore(int /*long*/ aNotBefore) {
+	public int GetNotBefore(long /*int*/ aNotBefore) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aNotBefore);
 	}
 
-	public int GetNotBeforeLocalTime(int /*long*/ aNotBeforeLocalTime) {
+	public int GetNotBeforeLocalTime(long /*int*/ aNotBeforeLocalTime) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aNotBeforeLocalTime);
 	}
 
-	public int GetNotBeforeLocalDay(int /*long*/ aNotBeforeLocalDay) {
+	public int GetNotBeforeLocalDay(long /*int*/ aNotBeforeLocalDay) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aNotBeforeLocalDay);
 	}
 
-	public int GetNotBeforeGMT(int /*long*/ aNotBeforeGMT) {
+	public int GetNotBeforeGMT(long /*int*/ aNotBeforeGMT) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aNotBeforeGMT);
 	}
 
-	public int GetNotAfter(int /*long*/ aNotAfter) {
+	public int GetNotAfter(long /*int*/ aNotAfter) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aNotAfter);
 	}
 
-	public int GetNotAfterLocalTime(int /*long*/ aNotAfterLocalTime) {
+	public int GetNotAfterLocalTime(long /*int*/ aNotAfterLocalTime) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aNotAfterLocalTime);
 	}
 
-	public int GetNotAfterLocalDay(int /*long*/ aNotAfterLocalDay) {
+	public int GetNotAfterLocalDay(long /*int*/ aNotAfterLocalDay) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aNotAfterLocalDay);
 	}
 
-	public int GetNotAfterGMT(int /*long*/ aNotAfterGMT) {
+	public int GetNotAfterGMT(long /*int*/ aNotAfterGMT) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aNotAfterGMT);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/mozilla/nsIXPCSecurityManager.java b/org/eclipse/swt/internal/mozilla/nsIXPCSecurityManager.java
index 884b6d9..3302ac4 100644
--- a/org/eclipse/swt/internal/mozilla/nsIXPCSecurityManager.java
+++ b/org/eclipse/swt/internal/mozilla/nsIXPCSecurityManager.java
@@ -37,7 +37,7 @@ public class nsIXPCSecurityManager extends nsISupports {
 	public static final nsID NS_IXPCSECURITYMANAGER_IID =
 		new nsID(NS_IXPCSECURITYMANAGER_IID_STR);
 
-	public nsIXPCSecurityManager(int /*long*/ address) {
+	public nsIXPCSecurityManager(long /*int*/ address) {
 		super(address);
 	}
 
@@ -55,15 +55,15 @@ public class nsIXPCSecurityManager extends nsISupports {
 
 	public static final int HOOK_ALL = 63;
 
-	public int CanCreateWrapper(int /*long*/ aJSContext, nsID aIID, int /*long*/ aObj, int /*long*/ aClassInfo, int /*long*/[] aPolicy) {
+	public int CanCreateWrapper(long /*int*/ aJSContext, nsID aIID, long /*int*/ aObj, long /*int*/ aClassInfo, long /*int*/[] aPolicy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aJSContext, aIID, aObj, aClassInfo, aPolicy);
 	}
 
-	public int CanCreateInstance(int /*long*/ aJSContext, nsID aCID) {
+	public int CanCreateInstance(long /*int*/ aJSContext, nsID aCID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aJSContext, aCID);
 	}
 
-	public int CanGetService(int /*long*/ aJSContext, nsID aCID) {
+	public int CanGetService(long /*int*/ aJSContext, nsID aCID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aJSContext, aCID);
 	}
 
@@ -73,7 +73,7 @@ public class nsIXPCSecurityManager extends nsISupports {
 
 	public static final int ACCESS_SET_PROPERTY = 2;
 
-	public int CanAccess(int aAction, int /*long*/ aCallContext, int /*long*/ aJSContext, int /*long*/ aJSObject, int /*long*/ aObj, int /*long*/ aClassInfo, int /*long*/ aName, int /*long*/[] aPolicy) {
+	public int CanAccess(int aAction, long /*int*/ aCallContext, long /*int*/ aJSContext, long /*int*/ aJSObject, long /*int*/ aObj, long /*int*/ aClassInfo, long /*int*/ aName, long /*int*/[] aPolicy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aAction, aCallContext, aJSContext, aJSObject, aObj, aClassInfo, aName, aPolicy);
 	}
 }
\ No newline at end of file
diff --git a/org/eclipse/swt/internal/opengl/glx/GLX.java b/org/eclipse/swt/internal/opengl/glx/GLX.java
index 4f1d979..6e071ff 100644
--- a/org/eclipse/swt/internal/opengl/glx/GLX.java
+++ b/org/eclipse/swt/internal/opengl/glx/GLX.java
@@ -231,8 +231,8 @@ public static final void glViewport(int x, int y, int width, int height) {
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native int /*long*/ _glXChooseVisual(int /*long*/ dpy, int screen, int[] attribList);
-public static final int /*long*/ glXChooseVisual(int /*long*/ dpy, int screen, int[] attribList) {
+public static final native long /*int*/ _glXChooseVisual(long /*int*/ dpy, int screen, int[] attribList);
+public static final long /*int*/ glXChooseVisual(long /*int*/ dpy, int screen, int[] attribList) {
 	lock.lock();
 	try {
 		return _glXChooseVisual(dpy, screen, attribList);
@@ -245,8 +245,8 @@ public static final int /*long*/ glXChooseVisual(int /*long*/ dpy, int screen, i
  * @param src cast=(GLXContext)
  * @param dst cast=(GLXContext)
  */
-public static final native void _glXCopyContext(int /*long*/ dpy, int /*long*/ src, int /*long*/ dst, int mask);
-public static final void glXCopyContext(int /*long*/ dpy, int /*long*/ src, int /*long*/ dst, int mask) {
+public static final native void _glXCopyContext(long /*int*/ dpy, long /*int*/ src, long /*int*/ dst, int mask);
+public static final void glXCopyContext(long /*int*/ dpy, long /*int*/ src, long /*int*/ dst, int mask) {
 	lock.lock();
 	try {
 		_glXCopyContext(dpy, src, dst, mask);
@@ -258,8 +258,8 @@ public static final void glXCopyContext(int /*long*/ dpy, int /*long*/ src, int
  * @param dpy cast=(Display *)
  * @param shareList cast=(GLXContext)
  */
-public static final native int /*long*/ _glXCreateContext(int /*long*/ dpy, XVisualInfo vis, int /*long*/ shareList, boolean direct);
-public static final int /*long*/ glXCreateContext(int /*long*/ dpy, XVisualInfo vis, int /*long*/ shareList, boolean direct) {
+public static final native long /*int*/ _glXCreateContext(long /*int*/ dpy, XVisualInfo vis, long /*int*/ shareList, boolean direct);
+public static final long /*int*/ glXCreateContext(long /*int*/ dpy, XVisualInfo vis, long /*int*/ shareList, boolean direct) {
 	lock.lock();
 	try {
 		return _glXCreateContext(dpy, vis, shareList, direct);
@@ -271,8 +271,8 @@ public static final int /*long*/ glXCreateContext(int /*long*/ dpy, XVisualInfo
  * @param dpy cast=(Display *)
  * @param pixmap cast=(Pixmap)
  */
-public static final native int /*long*/ _glXCreateGLXPixmap(int /*long*/ dpy, XVisualInfo vis, int /*long*/ pixmap);
-public static final int /*long*/ glXCreateGLXPixmap(int /*long*/ dpy, XVisualInfo vis, int /*long*/ pixmap) {
+public static final native long /*int*/ _glXCreateGLXPixmap(long /*int*/ dpy, XVisualInfo vis, long /*int*/ pixmap);
+public static final long /*int*/ glXCreateGLXPixmap(long /*int*/ dpy, XVisualInfo vis, long /*int*/ pixmap) {
 	lock.lock();
 	try {
 		return _glXCreateGLXPixmap(dpy, vis, pixmap);
@@ -284,8 +284,8 @@ public static final int /*long*/ glXCreateGLXPixmap(int /*long*/ dpy, XVisualInf
  * @param dpy cast=(Display *)
  * @param ctx cast=(GLXContext)
  */
-public static final native void _glXDestroyContext(int /*long*/ dpy, int /*long*/ ctx);
-public static final void glXDestroyContext(int /*long*/ dpy, int /*long*/ ctx) {
+public static final native void _glXDestroyContext(long /*int*/ dpy, long /*int*/ ctx);
+public static final void glXDestroyContext(long /*int*/ dpy, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		_glXDestroyContext(dpy, ctx);
@@ -297,8 +297,8 @@ public static final void glXDestroyContext(int /*long*/ dpy, int /*long*/ ctx) {
  * @param dpy cast=(Display *)
  * @param pix cast=(GLXPixmap)
  */
-public static final native void _glXDestroyGLXPixmap(int /*long*/ dpy, int /*long*/ pix);
-public static final void glXDestroyGLXPixmap(int /*long*/ dpy, int /*long*/ pix) {
+public static final native void _glXDestroyGLXPixmap(long /*int*/ dpy, long /*int*/ pix);
+public static final void glXDestroyGLXPixmap(long /*int*/ dpy, long /*int*/ pix) {
 	lock.lock();
 	try {
 		_glXDestroyGLXPixmap(dpy, pix);
@@ -307,8 +307,8 @@ public static final void glXDestroyGLXPixmap(int /*long*/ dpy, int /*long*/ pix)
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native int /*long*/ _glXGetClientString(int /*long*/ dpy, int name);
-public static final int /*long*/ glXGetClientString(int /*long*/ dpy, int name) {
+public static final native long /*int*/ _glXGetClientString(long /*int*/ dpy, int name);
+public static final long /*int*/ glXGetClientString(long /*int*/ dpy, int name) {
 	lock.lock();
 	try {
 		return _glXGetClientString(dpy, name);
@@ -317,8 +317,8 @@ public static final int /*long*/ glXGetClientString(int /*long*/ dpy, int name)
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native int _glXGetConfig(int /*long*/ dpy, XVisualInfo vis, int attrib, int[] value);
-public static final int glXGetConfig(int /*long*/ dpy, XVisualInfo vis, int attrib, int[] value) {
+public static final native int _glXGetConfig(long /*int*/ dpy, XVisualInfo vis, int attrib, int[] value);
+public static final int glXGetConfig(long /*int*/ dpy, XVisualInfo vis, int attrib, int[] value) {
 	lock.lock();
 	try {
 		return _glXGetConfig(dpy, vis, attrib, value);
@@ -326,8 +326,8 @@ public static final int glXGetConfig(int /*long*/ dpy, XVisualInfo vis, int attr
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXGetCurrentContext();
-public static final int /*long*/ glXGetCurrentContext() {
+public static final native long /*int*/ _glXGetCurrentContext();
+public static final long /*int*/ glXGetCurrentContext() {
 	lock.lock();
 	try {
 		return _glXGetCurrentContext();
@@ -335,8 +335,8 @@ public static final int /*long*/ glXGetCurrentContext() {
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXGetCurrentDrawable();
-public static final int /*long*/ glXGetCurrentDrawable() {
+public static final native long /*int*/ _glXGetCurrentDrawable();
+public static final long /*int*/ glXGetCurrentDrawable() {
 	lock.lock();
 	try {
 		return _glXGetCurrentDrawable();
@@ -348,8 +348,8 @@ public static final int /*long*/ glXGetCurrentDrawable() {
  * @param dpy cast=(Display *)
  * @param ctx cast=(GLXContext)
  */
-public static final native boolean _glXIsDirect(int /*long*/ dpy, int /*long*/ ctx);
-public static final boolean glXIsDirect(int /*long*/ dpy, int /*long*/ ctx) {
+public static final native boolean _glXIsDirect(long /*int*/ dpy, long /*int*/ ctx);
+public static final boolean glXIsDirect(long /*int*/ dpy, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		return _glXIsDirect(dpy, ctx);
@@ -362,8 +362,8 @@ public static final boolean glXIsDirect(int /*long*/ dpy, int /*long*/ ctx) {
  * @param drawable cast=(GLXDrawable)
  * @param ctx cast=(GLXContext)
  */
-public static final native boolean _glXMakeCurrent(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ ctx);
-public static final boolean glXMakeCurrent(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ ctx) {
+public static final native boolean _glXMakeCurrent(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ ctx);
+public static final boolean glXMakeCurrent(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		return _glXMakeCurrent(dpy, drawable, ctx);
@@ -372,8 +372,8 @@ public static final boolean glXMakeCurrent(int /*long*/ dpy, int /*long*/ drawab
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native boolean _glXQueryExtension(int /*long*/ dpy, int[] errorBase, int[] eventBase);
-public static final boolean glXQueryExtension(int /*long*/ dpy, int[] errorBase, int[] eventBase) {
+public static final native boolean _glXQueryExtension(long /*int*/ dpy, int[] errorBase, int[] eventBase);
+public static final boolean glXQueryExtension(long /*int*/ dpy, int[] errorBase, int[] eventBase) {
 	lock.lock();
 	try {
 		return _glXQueryExtension(dpy, errorBase, eventBase);
@@ -382,8 +382,8 @@ public static final boolean glXQueryExtension(int /*long*/ dpy, int[] errorBase,
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native int /*long*/ _glXQueryExtensionsString(int /*long*/ dpy, int screen);
-public static final int /*long*/ glXQueryExtensionsString(int /*long*/ dpy, int screen) {
+public static final native long /*int*/ _glXQueryExtensionsString(long /*int*/ dpy, int screen);
+public static final long /*int*/ glXQueryExtensionsString(long /*int*/ dpy, int screen) {
 	lock.lock();
 	try {
 		return _glXQueryExtensionsString(dpy, screen);
@@ -392,8 +392,8 @@ public static final int /*long*/ glXQueryExtensionsString(int /*long*/ dpy, int
 	}
 }
 /** @param dpy cast=(Display *) */
-public static final native int /*long*/ _glXQueryServerString(int /*long*/ dpy, int screen, int name);
-public static final int /*long*/ glXQueryServerString(int /*long*/ dpy, int screen, int name) {
+public static final native long /*int*/ _glXQueryServerString(long /*int*/ dpy, int screen, int name);
+public static final long /*int*/ glXQueryServerString(long /*int*/ dpy, int screen, int name) {
 	lock.lock();
 	try {
 		return _glXQueryServerString(dpy, screen, name);
@@ -406,8 +406,8 @@ public static final int /*long*/ glXQueryServerString(int /*long*/ dpy, int scre
  * @param major flags=no_in
  * @param minor flags=no_in
  */
-public static final native boolean _glXQueryVersion(int /*long*/ dpy, int[] major, int[] minor);
-public static final boolean glXQueryVersion(int /*long*/ dpy, int[] major, int[] minor) {
+public static final native boolean _glXQueryVersion(long /*int*/ dpy, int[] major, int[] minor);
+public static final boolean glXQueryVersion(long /*int*/ dpy, int[] major, int[] minor) {
 	lock.lock();
 	try {
 		return _glXQueryVersion(dpy, major, minor);
@@ -419,8 +419,8 @@ public static final boolean glXQueryVersion(int /*long*/ dpy, int[] major, int[]
  * @param dpy cast=(Display *)
  * @param drawable cast=(GLXDrawable)
  */
-public static final native void _glXSwapBuffers(int /*long*/ dpy, int /*long*/ drawable);
-public static final void glXSwapBuffers(int /*long*/ dpy, int /*long*/ drawable) {
+public static final native void _glXSwapBuffers(long /*int*/ dpy, long /*int*/ drawable);
+public static final void glXSwapBuffers(long /*int*/ dpy, long /*int*/ drawable) {
 	lock.lock();
 	try {
 		_glXSwapBuffers(dpy, drawable);
@@ -450,5 +450,5 @@ public static final void glXWaitX() {
  * @param src cast=(const void *)
  * @param size cast=(size_t)
  */
-public static final native void memmove(XVisualInfo dest, int /*long*/ src, int size);
+public static final native void memmove(XVisualInfo dest, long /*int*/ src, int size);
 }
diff --git a/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java b/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java
index 8faa6cf..c7b6733 100644
--- a/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java
+++ b/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java
@@ -12,7 +12,7 @@ package org.eclipse.swt.internal.opengl.glx;
 
 public class XVisualInfo {
 	/** @field cast=(Visual *) */
-	public int /*long*/ visual;
+	public long /*int*/ visual;
 	public int visualid;
 	public int screen;
 	public int depth;
diff --git a/org/eclipse/swt/internal/theme/ButtonDrawData.java b/org/eclipse/swt/internal/theme/ButtonDrawData.java
index a170c1f..1b2442b 100644
--- a/org/eclipse/swt/internal/theme/ButtonDrawData.java
+++ b/org/eclipse/swt/internal/theme/ButtonDrawData.java
@@ -25,10 +25,10 @@ public ButtonDrawData() {
 void draw(Theme theme, GC gc, Rectangle bounds) {
 	int state = this.state[DrawData.WIDGET_WHOLE];
 
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 	if ((style & SWT.RADIO) != 0) {
-		int /*long*/ radioButtonHandle = theme.radioButtonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (radioButtonHandle);
+		long /*int*/ radioButtonHandle = theme.radioButtonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (radioButtonHandle);
 		theme.transferClipping (gc, gtkStyle);
 		int indicator_size = theme.getWidgetProperty(radioButtonHandle, "indicator-size");
 		int indicator_spacing = theme.getWidgetProperty(radioButtonHandle, "indicator-spacing");
@@ -74,8 +74,8 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 	}
 	
 	if ((style & SWT.CHECK) != 0) {
-		int /*long*/ checkButtonHandle = theme.checkButtonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (checkButtonHandle);
+		long /*int*/ checkButtonHandle = theme.checkButtonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (checkButtonHandle);
 		theme.transferClipping (gc, gtkStyle);
 		int indicator_size = theme.getWidgetProperty(checkButtonHandle, "indicator-size");
 		int indicator_spacing = theme.getWidgetProperty(checkButtonHandle, "indicator-spacing");
@@ -122,8 +122,8 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 	
 
 	if ((style & SWT.PUSH) != 0) {
-		int /*long*/ buttonHandle = theme.buttonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+		long /*int*/ buttonHandle = theme.buttonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 		theme.transferClipping (gc, gtkStyle);		
 		int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 		int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
diff --git a/org/eclipse/swt/internal/theme/ComboDrawData.java b/org/eclipse/swt/internal/theme/ComboDrawData.java
index 3bab8a1..f476292 100644
--- a/org/eclipse/swt/internal/theme/ComboDrawData.java
+++ b/org/eclipse/swt/internal/theme/ComboDrawData.java
@@ -24,9 +24,9 @@ public ComboDrawData() {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	
 	int x = bounds.x;
@@ -61,10 +61,10 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 		OS.gtk_paint_box(gtkStyle, drawable, state_type, shadow_type, null, buttonHandle, detail, arrow_button_x, y, arrow_button_width, height);
 	}		
 	byte[] arrow_detail = Converter.wcsToMbcs(null, "arrow", true);
-	int /*long*/ arrowHandle = theme.arrowHandle;
+	long /*int*/ arrowHandle = theme.arrowHandle;
 	OS.gtk_paint_arrow(gtkStyle, drawable, state_type, OS.GTK_SHADOW_OUT, null, arrowHandle, arrow_detail, OS.GTK_ARROW_DOWN, true, arrow_x, arrow_y, arrow_width, arrow_height);
 	
-	int /*long*/ entryHandle = theme.entryHandle;
+	long /*int*/ entryHandle = theme.entryHandle;
 	gtkStyle = OS.gtk_widget_get_style(entryHandle);
 	theme.transferClipping(gc, gtkStyle);
 	state_type = getStateType(DrawData.WIDGET_WHOLE);
@@ -100,8 +100,8 @@ int getStateType(int part) {
 
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
 	int interior_focus = theme.getWidgetProperty(buttonHandle, "interior-focus");
 	int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
diff --git a/org/eclipse/swt/internal/theme/DrawData.java b/org/eclipse/swt/internal/theme/DrawData.java
index f4492b5..40fbec3 100644
--- a/org/eclipse/swt/internal/theme/DrawData.java
+++ b/org/eclipse/swt/internal/theme/DrawData.java
@@ -79,21 +79,21 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 }
 
 void drawImage(Theme theme, Image image, GC gc, Rectangle bounds) {
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 	Rectangle rect = image.getBounds();
 	int state_type = getStateType(DrawData.WIDGET_WHOLE);
 	if (state_type == OS.GTK_STATE_NORMAL) {
 		gc.drawImage(image, 0, 0, rect.width, rect.height, bounds.x, bounds.y, bounds.width, bounds.height);
 	} else {
-		int /*long*/ pixbuf = Theme.createPixbuf(image);
-		int /*long*/ source = OS.gtk_icon_source_new();
+		long /*int*/ pixbuf = Theme.createPixbuf(image);
+		long /*int*/ source = OS.gtk_icon_source_new();
 		if (source != 0) {
 			OS.gtk_icon_source_set_pixbuf(source, pixbuf);
 			//TODO - always uses buttonHandle
-			int /*long*/ buttonHandle = theme.buttonHandle;
-			int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+			long /*int*/ buttonHandle = theme.buttonHandle;
+			long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 			theme.transferClipping(gc, gtkStyle);
-			int /*long*/ rendered = OS.gtk_style_render_icon(gtkStyle, source, OS.GTK_TEXT_DIR_NONE, state_type, -1, buttonHandle, null);
+			long /*int*/ rendered = OS.gtk_style_render_icon(gtkStyle, source, OS.GTK_TEXT_DIR_NONE, state_type, -1, buttonHandle, null);
 			OS.g_object_unref(pixbuf);
 			//TODO - stretching
 			if (rendered != 0) {
@@ -106,12 +106,12 @@ void drawImage(Theme theme, Image image, GC gc, Rectangle bounds) {
 }
 
 void drawText(Theme theme, String text, int flags, GC gc, Rectangle bounds) {
-	int /*long*/ widget = getTextHandle(theme);
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(widget);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ widget = getTextHandle(theme);
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(widget);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping (gc, gtkStyle);
 	byte[] buffer = Converter.wcsToMbcs(null, text, true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
 	int[] width = new int[1], height = new int[1];
 	OS.pango_layout_get_size(layout, width, height);
 	OS.pango_layout_set_width(layout, bounds.width * OS.PANGO_SCALE);
@@ -160,7 +160,7 @@ int getStateType(int part) {
 	return state_type;
 }
 
-int /*long*/ getTextHandle(Theme theme) {
+long /*int*/ getTextHandle(Theme theme) {
 	return theme.labelHandle;
 }
 
@@ -169,9 +169,9 @@ int hit(Theme theme, Point position, Rectangle bounds) {
 }
 
 Rectangle measureText(Theme theme, String text, int flags, GC gc, Rectangle bounds) {
-	int /*long*/ widget = getTextHandle(theme);
+	long /*int*/ widget = getTextHandle(theme);
 	byte[] buffer = Converter.wcsToMbcs(null, text, true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
 	if (bounds != null) OS.pango_layout_set_width(layout, bounds.width);
 	if ((flags & DrawData.DRAW_LEFT) != 0) {
 		OS.pango_layout_set_alignment(layout, OS.PANGO_ALIGN_LEFT);
diff --git a/org/eclipse/swt/internal/theme/ExpanderDrawData.java b/org/eclipse/swt/internal/theme/ExpanderDrawData.java
index 7553116..3f98b50 100644
--- a/org/eclipse/swt/internal/theme/ExpanderDrawData.java
+++ b/org/eclipse/swt/internal/theme/ExpanderDrawData.java
@@ -22,9 +22,9 @@ public ExpanderDrawData() {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ treeHandle = theme.treeHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (treeHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ treeHandle = theme.treeHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (treeHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int state_type = getStateType(DrawData.WIDGET_WHOLE);
 	int expander_style = OS.GTK_EXPANDER_COLAPSED;
@@ -38,7 +38,7 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
-	int /*long*/ treeHandle = theme.treeHandle;
+	long /*int*/ treeHandle = theme.treeHandle;
 	int expander_size = theme.getWidgetProperty(treeHandle, "expander-size");
 	if (new Rectangle(bounds.x, bounds.y, expander_size, expander_size).contains(position)) {
 		return DrawData.WIDGET_WHOLE;
diff --git a/org/eclipse/swt/internal/theme/GroupDrawData.java b/org/eclipse/swt/internal/theme/GroupDrawData.java
index bd18278..fa3d414 100644
--- a/org/eclipse/swt/internal/theme/GroupDrawData.java
+++ b/org/eclipse/swt/internal/theme/GroupDrawData.java
@@ -29,9 +29,9 @@ public GroupDrawData() {
 static final int GROUP_HEADER_X = 9;
 static final int GROUP_HEADER_PAD = 2;
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ frameHandle = theme.frameHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (frameHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ frameHandle = theme.frameHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (frameHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
 	int ythickness = OS.gtk_style_get_ythickness(gtkStyle);
diff --git a/org/eclipse/swt/internal/theme/ProgressBarDrawData.java b/org/eclipse/swt/internal/theme/ProgressBarDrawData.java
index 04d3ea9..e3b843b 100644
--- a/org/eclipse/swt/internal/theme/ProgressBarDrawData.java
+++ b/org/eclipse/swt/internal/theme/ProgressBarDrawData.java
@@ -22,9 +22,9 @@ public ProgressBarDrawData() {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ progressHandle = theme.progressHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (progressHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ progressHandle = theme.progressHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (progressHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	byte[] detail = Converter.wcsToMbcs(null, "trough", true);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
diff --git a/org/eclipse/swt/internal/theme/TabFolderDrawData.java b/org/eclipse/swt/internal/theme/TabFolderDrawData.java
index a261ec4..84cabdf 100644
--- a/org/eclipse/swt/internal/theme/TabFolderDrawData.java
+++ b/org/eclipse/swt/internal/theme/TabFolderDrawData.java
@@ -31,9 +31,9 @@ public TabFolderDrawData() {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	height -= tabsHeight;
diff --git a/org/eclipse/swt/internal/theme/TabItemDrawData.java b/org/eclipse/swt/internal/theme/TabItemDrawData.java
index 00b05e2..b0d7454 100644
--- a/org/eclipse/swt/internal/theme/TabItemDrawData.java
+++ b/org/eclipse/swt/internal/theme/TabItemDrawData.java
@@ -27,8 +27,8 @@ public TabItemDrawData() {
 }
 
 Rectangle computeTrim(Theme theme, GC gc) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(notebookHandle);
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(notebookHandle);
 	int hborder, vborder;
 	if (OS.GTK_VERSION >= OS.VERSION(2, 4, 0)) {
 		hborder = theme.getWidgetProperty(notebookHandle, "tab-hborder");
@@ -50,9 +50,9 @@ Rectangle computeTrim(Theme theme, GC gc) {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	if ((state[DrawData.WIDGET_WHOLE] & DrawData.SELECTED) == 0) {
diff --git a/org/eclipse/swt/internal/theme/Theme.java b/org/eclipse/swt/internal/theme/Theme.java
index a174a93..7a7320d 100644
--- a/org/eclipse/swt/internal/theme/Theme.java
+++ b/org/eclipse/swt/internal/theme/Theme.java
@@ -18,7 +18,7 @@ import org.eclipse.swt.internal.gtk.*;
 public class Theme {
 	Device device;
 	
-	int /*long*/ shellHandle, fixedHandle, buttonHandle, arrowHandle,
+	long /*int*/ shellHandle, fixedHandle, buttonHandle, arrowHandle,
 		frameHandle, entryHandle, checkButtonHandle, radioButtonHandle, 
 		notebookHandle, treeHandle, progressHandle, toolbarHandle,
 		labelHandle, separatorHandle;
@@ -68,29 +68,29 @@ public Theme(Device device) {
 }
 
 //TODO - share this code 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -109,10 +109,10 @@ static int /*long*/ createPixbuf(Image image) {
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
@@ -218,18 +218,18 @@ public Rectangle measureText(GC gc, Rectangle bounds, DrawData data, String text
 	return data.measureText(this, text, flags, gc, bounds);
 }
 
-int getWidgetProperty(int /*long*/ handle, String name) {
+int getWidgetProperty(long /*int*/ handle, String name) {
 	byte[] propertyName = Converter.wcsToMbcs(null, name, true);
 	int[] result = new int[1];
 	OS.gtk_widget_style_get(handle, propertyName, result, 0);
 	return result[0];
 }
 
-void transferClipping(GC gc, int /*long*/ style) {
+void transferClipping(GC gc, long /*int*/ style) {
 	GCData data = gc.getGCData();
-	int /*long*/ clipRgn = data.clipRgn;
-	int /*long*/ damageRgn = data.damageRgn;
-	int /*long*/ clipping = clipRgn;
+	long /*int*/ clipRgn = data.clipRgn;
+	long /*int*/ damageRgn = data.damageRgn;
+	long /*int*/ clipping = clipRgn;
 	if (damageRgn != 0) {
 		if (clipping != 0) {
 			clipping = OS.gdk_region_new();
@@ -239,7 +239,7 @@ void transferClipping(GC gc, int /*long*/ style) {
 			clipping = damageRgn;
 		}
 	}
-	int /*long*/ [] curGC = new int /*long*/ [1];
+	long /*int*/ [] curGC = new long /*int*/ [1];
 	for (int i = 0; i < 5; i++) {
 		OS.gtk_style_get_fg_gc (style, i, curGC);
 		if (curGC[0] != 0) OS.gdk_gc_set_clip_region (curGC[0], clipping);
diff --git a/org/eclipse/swt/internal/theme/ToolBarDrawData.java b/org/eclipse/swt/internal/theme/ToolBarDrawData.java
index 4c99b12..584977d 100644
--- a/org/eclipse/swt/internal/theme/ToolBarDrawData.java
+++ b/org/eclipse/swt/internal/theme/ToolBarDrawData.java
@@ -21,9 +21,9 @@ public ToolBarDrawData() {
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ toolbarHandle = theme.toolbarHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (toolbarHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ toolbarHandle = theme.toolbarHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (toolbarHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	byte[] detail = Converter.wcsToMbcs(null, "toolbar", true);
diff --git a/org/eclipse/swt/internal/theme/ToolItemDrawData.java b/org/eclipse/swt/internal/theme/ToolItemDrawData.java
index 67cc405..40754df 100644
--- a/org/eclipse/swt/internal/theme/ToolItemDrawData.java
+++ b/org/eclipse/swt/internal/theme/ToolItemDrawData.java
@@ -27,8 +27,8 @@ public ToolItemDrawData() {
 }
 
 Rectangle computeTrim(Theme theme, GC gc) {
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
 	int focus_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
 	int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
@@ -47,13 +47,13 @@ Rectangle computeTrim(Theme theme, GC gc) {
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
 	int state = this.state[DrawData.WIDGET_WHOLE];
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 
 	if ((style & SWT.SEPARATOR) != 0) {
 		int state_type = getStateType(DrawData.WIDGET_WHOLE);
-		int /*long*/ separatorHandle = theme.separatorHandle;
+		long /*int*/ separatorHandle = theme.separatorHandle;
 		byte[] detail = Converter.wcsToMbcs(null, "vseparator", true);
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (separatorHandle);
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (separatorHandle);
 		theme.transferClipping(gc, gtkStyle);
 		if ((parent.style & SWT.VERTICAL) != 0) {
 			OS.gtk_paint_hline(gtkStyle, drawable, state_type, null, separatorHandle, detail, bounds.x, bounds.x + bounds.width, bounds.y + bounds.height / 2);
@@ -63,8 +63,8 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 		return;
 	}
 
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 	theme.transferClipping (gc, gtkStyle);
 	int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
@@ -83,7 +83,7 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 	}
 	
 	int[] relief = new int[1];
-	int /*long*/ toolbarHandle = theme.toolbarHandle;
+	long /*int*/ toolbarHandle = theme.toolbarHandle;
 	OS.gtk_widget_style_get(toolbarHandle, OS.button_relief, relief, 0);
 
 	int shadow_type = OS.GTK_SHADOW_OUT;
@@ -149,8 +149,8 @@ void draw(Theme theme, GC gc, Rectangle bounds) {
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
 	if ((style & SWT.DROP_DOWN) != 0) {
-		int /*long*/ buttonHandle = theme.buttonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+		long /*int*/ buttonHandle = theme.buttonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 		int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
 		int interior_focus = theme.getWidgetProperty(buttonHandle, "interior-focus");
 		int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
diff --git a/org/eclipse/swt/opengl/GLCanvas.java b/org/eclipse/swt/opengl/GLCanvas.java
index af4b7a6..c48546b 100644
--- a/org/eclipse/swt/opengl/GLCanvas.java
+++ b/org/eclipse/swt/opengl/GLCanvas.java
@@ -27,9 +27,9 @@ import org.eclipse.swt.internal.opengl.glx.*;
  */
 
 public class GLCanvas extends Canvas {
-	int /*long*/ context;
-	int /*long*/ xWindow;
-	int /*long*/ glWindow;
+	long /*int*/ context;
+	long /*int*/ xWindow;
+	long /*int*/ glWindow;
 	XVisualInfo vinfo;
 	static final int MAX_ATTRIBUTES = 32;
 
@@ -104,9 +104,9 @@ public GLCanvas (Composite parent, int style, GLData data) {
 	}
 	glxAttrib [pos++] = 0;
 	OS.gtk_widget_realize (handle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-	int /*long*/ infoPtr = GLX.glXChooseVisual (xDisplay, OS.XDefaultScreen (xDisplay), glxAttrib);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ infoPtr = GLX.glXChooseVisual (xDisplay, OS.XDefaultScreen (xDisplay), glxAttrib);
 	if (infoPtr == 0) {
 		dispose ();
 		SWT.error (SWT.ERROR_UNSUPPORTED_DEPTH);
@@ -114,9 +114,9 @@ public GLCanvas (Composite parent, int style, GLData data) {
 	vinfo = new XVisualInfo ();
 	GLX.memmove (vinfo, infoPtr, XVisualInfo.sizeof);
 	OS.XFree (infoPtr);
-	int /*long*/ screen = OS.gdk_screen_get_default ();
-	int /*long*/ gdkvisual = OS.gdk_x11_screen_lookup_visual (screen, vinfo.visualid);
-	int /*long*/ share = data.shareContext != null ? data.shareContext.context : 0;
+	long /*int*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ gdkvisual = OS.gdk_x11_screen_lookup_visual (screen, vinfo.visualid);
+	long /*int*/ share = data.shareContext != null ? data.shareContext.context : 0;
 	context = GLX.glXCreateContext (xDisplay, vinfo, share, true);
 	if (context == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	GdkWindowAttr attrs = new GdkWindowAttr ();
@@ -156,8 +156,8 @@ public GLCanvas (Composite parent, int style, GLData data) {
 				OS.gdk_window_resize (glWindow, clientArea.width, clientArea.height);
 				break;
 			case SWT.Dispose:
-				int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-				int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+				long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+				long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 				if (context != 0) {
 					if (GLX.glXGetCurrentContext () == context) {
 						GLX.glXMakeCurrent (xDisplay, 0, 0);
@@ -189,8 +189,8 @@ public GLCanvas (Composite parent, int style, GLData data) {
  */
 public GLData getGLData () {
 	checkWidget ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLData data = new GLData ();
 	int [] value = new int [1];
 	GLX.glXGetConfig (xDisplay, vinfo, GLX.GLX_DOUBLEBUFFER, value);
@@ -252,8 +252,8 @@ public boolean isCurrent () {
 public void setCurrent () {
 	checkWidget ();
 	if (GLX.glXGetCurrentContext () == context) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLX.glXMakeCurrent (xDisplay, xWindow, context);
 }
 
@@ -267,8 +267,8 @@ public void setCurrent () {
  */
 public void swapBuffers () {
 	checkWidget ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLX.glXSwapBuffers (xDisplay, xWindow);
 }
 }
diff --git a/org/eclipse/swt/printing/PrintDialog.java b/org/eclipse/swt/printing/PrintDialog.java
index f8bc7cb..2deec27 100644
--- a/org/eclipse/swt/printing/PrintDialog.java
+++ b/org/eclipse/swt/printing/PrintDialog.java
@@ -34,7 +34,7 @@ import org.eclipse.swt.widgets.*;
 public class PrintDialog extends Dialog {
 	PrinterData printerData = new PrinterData();
 
-	int /*long*/ handle;
+	long /*int*/ handle;
 	int index;
 	byte [] settingsData;
 	
@@ -292,7 +292,7 @@ public PrinterData open() {
 		return Printer.getDefaultPrinterData();
 	} else {
 		byte [] titleBytes = Converter.wcsToMbcs (null, getText(), true);
-		int /*long*/ topHandle = getParent().handle;
+		long /*int*/ topHandle = getParent().handle;
 		while (topHandle != 0 && !OS.GTK_IS_WINDOW(topHandle)) {
 			topHandle = OS.gtk_widget_get_parent(topHandle);
 		}
@@ -305,8 +305,8 @@ public PrinterData open() {
 			OS.GTK_PRINT_CAPABILITY_COLLATE | OS.GTK_PRINT_CAPABILITY_COPIES | OS.GTK_PRINT_CAPABILITY_PAGE_SET);
 		
 		/* Set state into print dialog settings. */
-		int /*long*/ settings = OS.gtk_print_settings_new();
-		int /*long*/ page_setup = OS.gtk_page_setup_new();
+		long /*int*/ settings = OS.gtk_print_settings_new();
+		long /*int*/ page_setup = OS.gtk_page_setup_new();
 		
 		if (printerData.otherData != null) {
 			Printer.restore(printerData.otherData, settings, page_setup);
@@ -361,7 +361,7 @@ public PrinterData open() {
 		Display display = getParent() != null ? getParent().getDisplay (): Display.getCurrent ();
 		
 		int signalId = 0;
-		int /*long*/ hookId = 0;
+		long /*int*/ hookId = 0;
 		if ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {
 			signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 			hookId = OS.g_signal_add_emission_hook (signalId, 0, ((LONG) display.getData (GET_EMISSION_PROC_KEY)).value, handle, 0);
@@ -380,7 +380,7 @@ public PrinterData open() {
 			OS.g_signal_remove_emission_hook (signalId, hookId);
 		}
 		if (response == OS.GTK_RESPONSE_OK) {
-			int /*long*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);
+			long /*int*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);
 			if (printer != 0) {
 				/* Get state from print dialog. */
 				settings = OS.gtk_print_unix_dialog_get_settings(handle); // must unref
@@ -394,7 +394,7 @@ public PrinterData open() {
 					case OS.GTK_PRINT_PAGES_RANGES:
 						data.scope = PrinterData.PAGE_RANGE;
 						int[] num_ranges = new int[1];
-						int /*long*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);
+						long /*int*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);
 						int [] pageRange = new int[2];
 						int length = num_ranges[0];
 						int min = Integer.MAX_VALUE, max = 0;
@@ -416,7 +416,7 @@ public PrinterData open() {
 				
 				data.printToFile = data.name.equals("Print to File"); //$NON-NLS-1$
 				if (data.printToFile) {
-					int /*long*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);
+					long /*int*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);
 					int length = OS.strlen (address);
 					byte [] buffer = new byte [length];
 					OS.memmove (buffer, address, length);
@@ -429,7 +429,7 @@ public PrinterData open() {
 
 				/* Save other print_settings data as key/value pairs in otherData. */
 				Callback printSettingsCallback = new Callback(this, "GtkPrintSettingsFunc", 3); //$NON-NLS-1$
-				int /*long*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();
+				long /*int*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();
 				if (GtkPrintSettingsFunc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 				index = 0;
 				settingsData = new byte[1024];
@@ -445,7 +445,7 @@ public PrinterData open() {
 				store("bottom_margin", OS.gtk_page_setup_get_bottom_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
 				store("left_margin", OS.gtk_page_setup_get_left_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
 				store("right_margin", OS.gtk_page_setup_get_right_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
-				int /*long*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$
+				long /*int*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$
 				storeBytes("paper_size_name", OS.gtk_paper_size_get_name(paper_size)); //$NON-NLS-1$
 				storeBytes("paper_size_display_name", OS.gtk_paper_size_get_display_name(paper_size)); //$NON-NLS-1$
 				storeBytes("paper_size_ppd_name", OS.gtk_paper_size_get_ppd_name(paper_size)); //$NON-NLS-1$
@@ -463,7 +463,7 @@ public PrinterData open() {
 	}
 }
 
-int /*long*/ GtkPrintSettingsFunc (int /*long*/ key, int /*long*/ value, int /*long*/ data) {
+long /*int*/ GtkPrintSettingsFunc (long /*int*/ key, long /*int*/ value, long /*int*/ data) {
 	int length = OS.strlen (key);
 	byte [] keyBuffer = new byte [length];
 	OS.memmove (keyBuffer, key, length);
@@ -486,7 +486,7 @@ void store(String key, boolean value) {
 	store(key, String.valueOf(value));
 }
 
-void storeBytes(String key, int /*long*/ value) {
+void storeBytes(String key, long /*int*/ value) {
 	int length = OS.strlen (value);
 	byte [] valueBuffer = new byte [length];
 	OS.memmove (valueBuffer, value, length);
diff --git a/org/eclipse/swt/printing/Printer.java b/org/eclipse/swt/printing/Printer.java
index 8ff2500..ae0eca7 100644
--- a/org/eclipse/swt/printing/Printer.java
+++ b/org/eclipse/swt/printing/Printer.java
@@ -46,12 +46,12 @@ public final class Printer extends Device {
 	static PrinterData [] printerList;
 	
 	PrinterData data;
-	int /*long*/ printer;
-	int /*long*/ printJob;
-	int /*long*/ settings;
-	int /*long*/ pageSetup;
-	int /*long*/ surface;
-	int /*long*/ cairo;
+	long /*int*/ printer;
+	long /*int*/ printJob;
+	long /*int*/ settings;
+	long /*int*/ pageSetup;
+	long /*int*/ surface;
+	long /*int*/ cairo;
 	
 	/**
 	 * whether or not a GC was created for this printer
@@ -82,18 +82,18 @@ public static PrinterData[] getPrinterList() {
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]");
 	}
 	Callback printerCallback = new Callback(Printer.class, "GtkPrinterFunc_List", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_List = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_List = printerCallback.getAddress();
 	if (GtkPrinterFunc_List == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	OS.gtk_enumerate_printers(GtkPrinterFunc_List, 0, 0, true);
 	printerCallback.dispose ();
 	return printerList;
 }
 
-static int /*long*/ GtkPrinterFunc_List (int /*long*/ printer, int /*long*/ user_data) {
+static long /*int*/ GtkPrinterFunc_List (long /*int*/ printer, long /*int*/ user_data) {
 	int length = printerList.length;
 	PrinterData [] newList = new PrinterData [length + 1];
 	System.arraycopy (printerList, 0, newList, 0, length);
@@ -129,18 +129,18 @@ public static PrinterData getDefaultPrinterData() {
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]");
 	}
 	Callback printerCallback = new Callback(Printer.class, "GtkPrinterFunc_Default", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_Default = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_Default = printerCallback.getAddress();
 	if (GtkPrinterFunc_Default == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	OS.gtk_enumerate_printers(GtkPrinterFunc_Default, 0, 0, true);
 	printerCallback.dispose ();
 	return printerList[0];
 }
 
-static int /*long*/ GtkPrinterFunc_Default (int /*long*/ printer, int /*long*/ user_data) {
+static long /*int*/ GtkPrinterFunc_Default (long /*int*/ printer, long /*int*/ user_data) {
 	if (OS.gtk_printer_is_default(printer)) {
 		printerList[0] = printerDataFromGtkPrinter(printer);
 		return 1;
@@ -150,9 +150,9 @@ static int /*long*/ GtkPrinterFunc_Default (int /*long*/ printer, int /*long*/ u
 	return 0;
 }
 
-int /*long*/ gtkPrinterFromPrinterData() {
+long /*int*/ gtkPrinterFromPrinterData() {
 	Callback printerCallback = new Callback(this, "GtkPrinterFunc_FindNamedPrinter", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_FindNamedPrinter = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_FindNamedPrinter = printerCallback.getAddress();
 	if (GtkPrinterFunc_FindNamedPrinter == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	printer = 0;
 	OS.gtk_enumerate_printers(GtkPrinterFunc_FindNamedPrinter, 0, 0, true);
@@ -160,7 +160,7 @@ int /*long*/ gtkPrinterFromPrinterData() {
 	return printer;
 }
 
-int /*long*/ GtkPrinterFunc_FindNamedPrinter (int /*long*/ printer, int /*long*/ user_data) {
+long /*int*/ GtkPrinterFunc_FindNamedPrinter (long /*int*/ printer, long /*int*/ user_data) {
 	PrinterData pd = printerDataFromGtkPrinter(printer);
 	if (pd.driver.equals(data.driver) && pd.name.equals(data.name)) {
 		this.printer = printer;
@@ -172,9 +172,9 @@ int /*long*/ GtkPrinterFunc_FindNamedPrinter (int /*long*/ printer, int /*long*/
 	return 0;
 }
 
-static PrinterData printerDataFromGtkPrinter(int /*long*/ printer) {
-	int /*long*/ backend = OS.gtk_printer_get_backend(printer);
-	int /*long*/ address = OS.G_OBJECT_TYPE_NAME(backend);
+static PrinterData printerDataFromGtkPrinter(long /*int*/ printer) {
+	long /*int*/ backend = OS.gtk_printer_get_backend(printer);
+	long /*int*/ address = OS.G_OBJECT_TYPE_NAME(backend);
 	int length = OS.strlen (address);
 	byte [] buffer = new byte [length];
 	OS.memmove (buffer, address, length);
@@ -192,7 +192,7 @@ static PrinterData printerDataFromGtkPrinter(int /*long*/ printer) {
 /* 
 * Restore printer settings and page_setup data from data.
 */
-static void restore(byte [] data, int /*long*/ settings, int /*long*/ page_setup) {
+static void restore(byte [] data, long /*int*/ settings, long /*int*/ page_setup) {
 	settingsData = data;
 	start = end = 0;
 	while (end < settingsData.length && settingsData[end] != 0) {
@@ -225,7 +225,7 @@ static void restore(byte [] data, int /*long*/ settings, int /*long*/ page_setup
 	double width = restoreDouble("paper_size_width"); //$NON-NLS-1$
 	double height = restoreDouble("paper_size_height"); //$NON-NLS-1$
 	boolean custom = restoreBoolean("paper_size_is_custom"); //$NON-NLS-1$
-	int /*long*/ paper_size = 0;
+	long /*int*/ paper_size = 0;
 	if (custom) {
 		if (ppd_name.length > 0) {
 			paper_size = OS.gtk_paper_size_new_from_ppd(ppd_name, display_name, width, height);
@@ -350,8 +350,8 @@ static byte [] restoreBytes(String key, boolean nullTerminate) {
 public Font getSystemFont () {
 	checkDevice ();
 	if (systemFont != null) return systemFont;
-	int /*long*/ style = OS.gtk_widget_get_default_style();	
-	int /*long*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
+	long /*int*/ style = OS.gtk_widget_get_default_style();	
+	long /*int*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
 	return systemFont = Font.gtk_new (this, defaultFont);
 }
 
@@ -368,11 +368,11 @@ public Font getSystemFont () {
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC(GCData data) {
+public long /*int*/ internal_new_GC(GCData data) {
 	GdkVisual visual = new GdkVisual ();
 	OS.memmove (visual, OS.gdk_visual_get_system());
-	int /*long*/ drawable = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, visual.depth);
-	int /*long*/ gdkGC = OS.gdk_gc_new (drawable);
+	long /*int*/ drawable = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, visual.depth);
+	long /*int*/ gdkGC = OS.gdk_gc_new (drawable);
 	if (gdkGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	if (data != null) {
 		if (isGCCreated) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
@@ -408,7 +408,7 @@ public int /*long*/ internal_new_GC(GCData data) {
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC(int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC(long /*int*/ gdkGC, GCData data) {
 	if (data != null) isGCCreated = false;
 	OS.g_object_unref (gdkGC);
 	if (data != null) {
diff --git a/org/eclipse/swt/program/Program.java b/org/eclipse/swt/program/Program.java
index 57456d5..78b6e07 100644
--- a/org/eclipse/swt/program/Program.java
+++ b/org/eclipse/swt/program/Program.java
@@ -42,7 +42,7 @@ public final class Program {
 	 */
 	boolean gnomeExpectUri;
 	
-	static int /*long*/ cdeShell;
+	static long /*int*/ cdeShell;
 
 	static final String[] CDE_ICON_EXT = { ".m.pm",   ".l.pm",   ".s.pm",   ".t.pm" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
 	static final String[] CDE_MASK_EXT = { ".m_m.bm", ".l_m.bm", ".s_m.bm", ".t_m.bm" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
@@ -70,11 +70,11 @@ static int getDesktop(final Display display) {
 	int desktop = DESKTOP_UNKNOWN;
 
 	/* Get the list of properties on the root window. */
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ rootWindow = OS.XDefaultRootWindow(xDisplay);
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ rootWindow = OS.XDefaultRootWindow(xDisplay);
 	int[] numProp = new int[1];
-	int /*long*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);
-	int /*long*/ [] property = new int /*long*/ [numProp[0]];
+	long /*int*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);
+	long /*int*/ [] property = new long /*int*/ [numProp[0]];
 	if (propList != 0) {
 		OS.memmove(property, propList, (property.length * OS.PTR_SIZEOF));
 		OS.XFree(propList);
@@ -93,10 +93,10 @@ static int getDesktop(final Display display) {
 	 */
 	if (desktop == DESKTOP_UNKNOWN) {
 		byte[] gnomeName = Converter.wcsToMbcs(null, "_NET_SUPPORTING_WM_CHECK", true);
-		int /*long*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);
+		long /*int*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);
 		if (gnome != OS.None && (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) && gnome_init()) {
 			desktop = DESKTOP_GNOME;
-			int /*long*/ icon_theme = GNOME.gnome_icon_theme_new();
+			long /*int*/ icon_theme = GNOME.gnome_icon_theme_new();
 			display.setData(ICON_THEME_DATA, new LONG(icon_theme));
 			display.addListener(SWT.Dispose, new Listener() {
 				public void handleEvent(Event event) {
@@ -112,10 +112,10 @@ static int getDesktop(final Display display) {
 			});
 			/* Check for libgnomevfs-2 version 2.4 */
 			byte[] buffer = Converter.wcsToMbcs(null, "libgnomevfs-2.so.0", true);
-			int /*long*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);
+			long /*int*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);
 			if (libgnomevfs != 0) {
 				buffer = Converter.wcsToMbcs(null, "gnome_vfs_url_show", true);
-				int /*long*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);
+				long /*int*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);
 				if (gnome_vfs_url_show != 0) {
 					desktop = DESKTOP_GNOME_24;
 				}
@@ -131,7 +131,7 @@ static int getDesktop(final Display display) {
 	*/
 	if (desktop == DESKTOP_UNKNOWN) {
 		byte[] cdeName = Converter.wcsToMbcs(null, "_DT_SM_PREFERENCES", true);
-		int /*long*/ cde = OS.XInternAtom(xDisplay, cdeName, true);
+		long /*int*/ cde = OS.XInternAtom(xDisplay, cdeName, true);
 		for (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {
 			if (property[index] == OS.None) continue; /* do not match atoms that do not exist */
 			if (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;
@@ -146,7 +146,7 @@ boolean cde_execute(String fileName) {
 	/* Use the character encoding for the default locale */
 	byte[] action = Converter.wcsToMbcs(null, command, true);
 	byte[] fileArg = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ ptr = OS.g_malloc(fileArg.length);
+	long /*int*/ ptr = OS.g_malloc(fileArg.length);
 	OS.memmove(ptr, fileArg, fileArg.length);
 	DtActionArg args = new DtActionArg();
 	args.argClass = CDE.DtACTION_FILE;
@@ -176,7 +176,7 @@ static String cde_getAttribute(String dataType, String attrName) {
 	byte[] dataTypeBuf = Converter.wcsToMbcs(null, dataType, true);
 	byte[] attrNameBuf = Converter.wcsToMbcs(null, attrName, true);
 	byte[] optNameBuf = null;
-	int /*long*/ attrValue = CDE.DtDtsDataTypeToAttributeValue(dataTypeBuf, attrNameBuf, optNameBuf);
+	long /*int*/ attrValue = CDE.DtDtsDataTypeToAttributeValue(dataTypeBuf, attrNameBuf, optNameBuf);
 	if (attrValue == 0) return null;
 	int length = OS.strlen(attrValue);
 	byte[] attrValueBuf = new byte[length];
@@ -189,11 +189,11 @@ static String cde_getAttribute(String dataType, String attrName) {
 static Hashtable cde_getDataTypeInfo() {
 	Hashtable dataTypeInfo = new Hashtable();
 	int index;
-	int /*long*/ dataTypeList = CDE.DtDtsDataTypeNames();
+	long /*int*/ dataTypeList = CDE.DtDtsDataTypeNames();
 	if (dataTypeList != 0) {
 		/* For each data type name in the list */
 		index = 0; 
-		int /*long*/ [] dataType = new int /*long*/ [1];
+		long /*int*/ [] dataType = new long /*int*/ [1];
 		OS.memmove(dataType, dataTypeList + (index++ * 4), 4);
 		while (dataType[0] != 0) {
 			int length = OS.strlen(dataType[0]);
@@ -277,13 +277,13 @@ static boolean cde_init(Display display) {
 
 	/* Use the character encoding for the default locale */
 	CDE.XtToolkitInitialize();
-	int /*long*/ xtContext = CDE.XtCreateApplicationContext ();
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ xtContext = CDE.XtCreateApplicationContext ();
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
 	byte[] appName = Converter.wcsToMbcs(null, "CDE", true);
 	byte[] appClass = Converter.wcsToMbcs(null, "CDE", true);
-	int /*long*/ [] argc = new int /*long*/ [] {0};
+	long /*int*/ [] argc = new long /*int*/ [] {0};
 	CDE.XtDisplayInitialize(xtContext, xDisplay, appName, appClass, 0, 0, argc, 0);
-	int /*long*/ widgetClass = CDE.topLevelShellWidgetClass ();
+	long /*int*/ widgetClass = CDE.topLevelShellWidgetClass ();
 	cdeShell = CDE.XtAppCreateShell (appName, appClass, widgetClass, xDisplay, null, 0);
 	CDE.XtSetMappedWhenManaged (cdeShell, false);
 	CDE.XtResizeWidget (cdeShell, 10, 10, 0);
@@ -343,10 +343,10 @@ static String[] parseCommand(String cmd) {
  */
 boolean gnome_24_execute(String fileName) {
 	byte[] mimeTypeBuffer = Converter.wcsToMbcs(null, name, true);
-	int /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
+	long /*int*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
 	byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
-	int /*long*/ list = GNOME.g_list_append(0, uri);
+	long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
+	long /*int*/ list = GNOME.g_list_append(0, uri);
 	int result = GNOME.gnome_vfs_mime_application_launch(ptr, list);
 	GNOME.gnome_vfs_mime_application_free(ptr);
 	GNOME.g_free(uri);
@@ -359,7 +359,7 @@ boolean gnome_24_execute(String fileName) {
  */
 static boolean gnome_24_launch(String fileName) {
 	byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
+	long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
 	int result = GNOME.gnome_vfs_url_show(uri);
 	GNOME.g_free(uri);
 	return (result == GNOME.GNOME_VFS_OK);
@@ -372,7 +372,7 @@ boolean gnome_execute(String fileName) {
 	if (gnomeExpectUri) {
 		/* Convert the given path into a URL */
 		byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-		int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input(fileNameBuffer);
+		long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input(fileNameBuffer);
 		if (uri != 0) {
 			int length = OS.strlen(uri);
 			if (length > 0) {
@@ -436,24 +436,24 @@ ImageData gnome_getImageData() {
  */
 static Hashtable gnome_getMimeInfo() {
 	Hashtable mimeInfo = new Hashtable();
-	int /*long*/[] mimeData = new int /*long*/[1];
-	int /*long*/[] extensionData = new int /*long*/[1];
-	int /*long*/ mimeList = GNOME.gnome_vfs_get_registered_mime_types();
-	int /*long*/ mimeElement = mimeList;
+	long /*int*/[] mimeData = new long /*int*/[1];
+	long /*int*/[] extensionData = new long /*int*/[1];
+	long /*int*/ mimeList = GNOME.gnome_vfs_get_registered_mime_types();
+	long /*int*/ mimeElement = mimeList;
 	while (mimeElement != 0) {
 		OS.memmove (mimeData, mimeElement, OS.PTR_SIZEOF);
-		int /*long*/ mimePtr = mimeData[0];
+		long /*int*/ mimePtr = mimeData[0];
 		int mimeLength = OS.strlen(mimePtr);
 		byte[] mimeTypeBuffer = new byte[mimeLength];
 		OS.memmove(mimeTypeBuffer, mimePtr, mimeLength);
 		String mimeType = new String(Converter.mbcsToWcs(null, mimeTypeBuffer));
-		int /*long*/ extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);
+		long /*int*/ extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);
 		if (extensionList != 0) {
 			Vector extensions = new Vector();
-			int /*long*/ extensionElement = extensionList;
+			long /*int*/ extensionElement = extensionList;
 			while (extensionElement != 0) {
 				OS.memmove(extensionData, extensionElement, OS.PTR_SIZEOF);
-				int /*long*/ extensionPtr = extensionData[0];
+				long /*int*/ extensionPtr = extensionData[0];
 				int extensionLength = OS.strlen(extensionPtr);
 				byte[] extensionBuffer = new byte[extensionLength];
 				OS.memmove(extensionBuffer, extensionPtr, extensionLength);
@@ -475,7 +475,7 @@ static String gnome_getMimeType(String extension) {
 	String mimeType = null;
 	String fileName = "swt" + extension;
 	byte[] extensionBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ typeName = GNOME.gnome_vfs_mime_type_from_name(extensionBuffer);
+	long /*int*/ typeName = GNOME.gnome_vfs_mime_type_from_name(extensionBuffer);
 	if (typeName != 0) {
 		int length = OS.strlen(typeName);
 		if (length > 0) {
@@ -490,7 +490,7 @@ static String gnome_getMimeType(String extension) {
 static Program gnome_getProgram(Display display, String mimeType) {
 	Program program = null;
 	byte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);
-	int /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
+	long /*int*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
 	if (ptr != 0) {
 		program = new Program();
 		program.display = display;
@@ -507,9 +507,9 @@ static Program gnome_getProgram(Display display, String mimeType) {
 		buffer = new byte[length + 1];
 		OS.memmove(buffer, application.id, length);
 		LONG gnomeIconTheme = (LONG)display.getData(ICON_THEME_DATA);
-		int /*long*/ icon_name = GNOME.gnome_icon_lookup(gnomeIconTheme.value, 0, null, buffer, 0, mimeTypeBuffer, 
+		long /*int*/ icon_name = GNOME.gnome_icon_lookup(gnomeIconTheme.value, 0, null, buffer, 0, mimeTypeBuffer, 
 				GNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);
-		int /*long*/ path = 0;
+		long /*int*/ path = 0;
 		if (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(gnomeIconTheme.value, icon_name, PREFERRED_ICON_SIZE, null, null);
 		if (path != 0) {
 			length = OS.strlen(path);
diff --git a/org/eclipse/swt/widgets/Button.java b/org/eclipse/swt/widgets/Button.java
index 41802dc..51f7262 100644
--- a/org/eclipse/swt/widgets/Button.java
+++ b/org/eclipse/swt/widgets/Button.java
@@ -46,7 +46,7 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Button extends Control {
-	int /*long*/ boxHandle, labelHandle, imageHandle, arrowHandle, groupHandle;
+	long /*int*/ boxHandle, labelHandle, imageHandle, arrowHandle, groupHandle;
 	boolean selected, grayed;
 	ImageList imageList;
 	Image image;
@@ -165,7 +165,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	}
 	if (wHint != SWT.DEFAULT || hHint != SWT.DEFAULT) {
 		if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_CAN_DEFAULT) != 0) {
-			int /*long*/ [] buffer = new int /*long*/ [1];
+			long /*int*/ [] buffer = new long /*int*/ [1];
 			GtkBorder border = new GtkBorder ();
 			OS.gtk_widget_style_get (handle, OS.default_border, buffer, 0);
 			if (buffer[0] != 0) {
@@ -266,7 +266,7 @@ void deregister () {
 	if (arrowHandle != 0) display.removeWidget (arrowHandle);
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	if (labelHandle != 0) return labelHandle;
 	return super.fontHandle ();
 }
@@ -382,14 +382,14 @@ public String getText () {
 	return text;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	if ((style & SWT.RADIO) != 0) selected  = getSelection ();
 	return result;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	if ((style & SWT.RADIO) != 0) {
 		if ((parent.getStyle () & SWT.NO_RADIO_GROUP) != 0) {
 			setSelection (!selected);
@@ -411,8 +411,8 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	// widget could be disposed at this point
 	if (handle == 0) return 0;
 	if ((style & SWT.PUSH) != 0 && OS.GTK_WIDGET_HAS_DEFAULT (handle)) {
@@ -422,8 +422,8 @@ int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	// widget could be disposed at this point
 	if (handle == 0) return 0;
 	if ((style & SWT.PUSH) != 0 && !OS.GTK_WIDGET_HAS_DEFAULT (handle)) {
@@ -435,8 +435,8 @@ int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	if ((style & SWT.RADIO) != 0) selected  = getSelection ();
 	return result;
@@ -640,7 +640,7 @@ void setBackgroundColor (GdkColor color) {
 	if (imageHandle != 0) setBackgroundColor(imageHandle, color);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -715,7 +715,7 @@ public void setImage (Image image) {
 		if (image.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 		imageList = new ImageList ();
 		int imageIndex = imageList.add (image);
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		if (text.length () == 0) OS.gtk_widget_hide (labelHandle);
 		OS.gtk_widget_show (imageHandle);
diff --git a/org/eclipse/swt/widgets/Canvas.java b/org/eclipse/swt/widgets/Canvas.java
index ea6a149..d31f712 100644
--- a/org/eclipse/swt/widgets/Canvas.java
+++ b/org/eclipse/swt/widgets/Canvas.java
@@ -147,46 +147,46 @@ public IME getIME () {
 	return ime;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_button_press_event (widget, event);
+		long /*int*/ result = ime.gtk_button_press_event (widget, event);
 		if (result != 0) return result;
 	}
 	return  super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_commit (imcontext, text);
+		long /*int*/ result = ime.gtk_commit (imcontext, text);
 		if (result != 0) return result;
 	}
 	return super.gtk_commit (imcontext, text);
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ event) {
 	if ((state & OBSCURED) != 0) return 0;
 	boolean isFocus = caret != null && caret.isFocusCaret ();
 	if (isFocus) caret.killFocus ();
-	int /*long*/ result = super.gtk_expose_event (widget, event);
+	long /*int*/ result = super.gtk_expose_event (widget, event);
 	if (isFocus) caret.setFocus ();
 	return result;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	if (caret != null) caret.setFocus ();
 	return result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	if (caret != null) caret.killFocus ();
 	return result;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_preedit_changed (imcontext);
+		long /*int*/ result = ime.gtk_preedit_changed (imcontext);
 		if (result != 0) return result;
 	}
 	return super.gtk_preedit_changed (imcontext);
@@ -246,16 +246,16 @@ public void scroll (int destX, int destY, int x, int y, int width, int height, b
 	if (!isVisible ()) return;
 	boolean isFocus = caret != null && caret.isFocusCaret ();
 	if (isFocus) caret.killFocus ();
-	int /*long*/ window = paintWindow ();
-	int /*long*/ visibleRegion = OS.gdk_drawable_get_visible_region (window);
+	long /*int*/ window = paintWindow ();
+	long /*int*/ visibleRegion = OS.gdk_drawable_get_visible_region (window);
 	GdkRectangle srcRect = new GdkRectangle ();
 	srcRect.x = x;
 	srcRect.y = y;
 	srcRect.width = width;
 	srcRect.height = height;
-	int /*long*/ copyRegion = OS.gdk_region_rectangle (srcRect);
+	long /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);
 	OS.gdk_region_intersect(copyRegion, visibleRegion);
-	int /*long*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);	
+	long /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);	
 	OS.gdk_region_subtract (invalidateRegion, visibleRegion);
 	OS.gdk_region_offset (invalidateRegion, deltaX, deltaY);
 	GdkRectangle copyRect = new GdkRectangle();
@@ -272,7 +272,7 @@ public void scroll (int destX, int destY, int x, int y, int width, int height, b
 //		GC gc = new GC (this);
 //		gc.copyArea (x, y, width, height, destX, destY);
 //		gc.dispose ();
-		int /*long*/ gdkGC = OS.gdk_gc_new (window);
+		long /*int*/ gdkGC = OS.gdk_gc_new (window);
 		OS.gdk_gc_set_exposures (gdkGC, true);
 		OS.gdk_draw_drawable (window, gdkGC, window, copyRect.x, copyRect.y, copyRect.x + deltaX, copyRect.y + deltaY, copyRect.width, copyRect.height);
 		OS.g_object_unref (gdkGC);
@@ -394,7 +394,7 @@ public void setIME (IME ime) {
 }
 	
 void updateCaret () {
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle == 0) return;
 	GdkRectangle rect = new GdkRectangle ();
 	rect.x = caret.x;
diff --git a/org/eclipse/swt/widgets/Caret.java b/org/eclipse/swt/widgets/Caret.java
index 8bfa82f..5f64049 100644
--- a/org/eclipse/swt/widgets/Caret.java
+++ b/org/eclipse/swt/widgets/Caret.java
@@ -97,13 +97,13 @@ void createWidget (int index) {
 boolean drawCaret () {
 	if (parent == null) return false;
 	if (parent.isDisposed ()) return false;
-	int /*long*/ window = parent.paintWindow ();
-	int /*long*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ window = parent.paintWindow ();
+	long /*int*/ gc = OS.gdk_gc_new (window);
 	GdkColor color = new GdkColor ();
 	color.red = (short) 0xffff;
 	color.green = (short) 0xffff;
 	color.blue = (short) 0xffff;
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
 	OS.gdk_colormap_alloc_color (colormap, color, true, true);
 	OS.gdk_gc_set_foreground (gc, color);
 	OS.gdk_gc_set_function (gc, OS.GDK_XOR);
diff --git a/org/eclipse/swt/widgets/ColorDialog.java b/org/eclipse/swt/widgets/ColorDialog.java
index 257f07a..4d5a46a 100644
--- a/org/eclipse/swt/widgets/ColorDialog.java
+++ b/org/eclipse/swt/widgets/ColorDialog.java
@@ -114,12 +114,12 @@ public RGB getRGB () {
  */
 public RGB open () {
 	byte [] buffer = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ handle = OS.gtk_color_selection_dialog_new (buffer);
+	long /*int*/ handle = OS.gtk_color_selection_dialog_new (buffer);
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -143,7 +143,7 @@ public RGB open () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
diff --git a/org/eclipse/swt/widgets/Combo.java b/org/eclipse/swt/widgets/Combo.java
index 6e526d3..5560390 100644
--- a/org/eclipse/swt/widgets/Combo.java
+++ b/org/eclipse/swt/widgets/Combo.java
@@ -57,9 +57,9 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Combo extends Composite {
-	int /*long*/ buttonHandle, entryHandle, listHandle, textRenderer, cellHandle, popupHandle;
+	long /*int*/ buttonHandle, entryHandle, listHandle, textRenderer, cellHandle, popupHandle;
 	int lastEventTime, visibleCount = 5;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	String [] items = new String [0];
 	boolean ignoreSelect, lockText;
@@ -182,13 +182,13 @@ public void add (String string, int index) {
 		* stopping the "delete" and "insert_text" signal emission. 
 		*/
 		ignoreSelect = lockText = true;
-		int /*long*/ item = OS.gtk_list_item_new_with_label (buffer);
-		int /*long*/ label = OS.gtk_bin_get_child (item); 
+		long /*int*/ item = OS.gtk_list_item_new_with_label (buffer);
+		long /*int*/ label = OS.gtk_bin_get_child (item); 
 		setForegroundColor (label, getForegroundColor ());
 		OS.gtk_widget_modify_font (label, getFontDescription ());
 		OS.gtk_widget_set_direction (label, OS.gtk_widget_get_direction (handle));
 		OS.gtk_widget_show (item);
-		int /*long*/ items = OS.g_list_append (0, item);
+		long /*int*/ items = OS.g_list_append (0, item);
 		OS.gtk_list_insert_items (listHandle, items, index);
 		ignoreSelect = lockText = false;
 	}
@@ -343,9 +343,9 @@ void clearText () {
 		if ((style & SWT.READ_ONLY) != 0) {
 			int index = OS.gtk_combo_box_get_active (handle);
 			if (index != -1) {
-				int /*long*/ modelHandle = OS.gtk_combo_box_get_model (handle);
-				int /*long*/ [] ptr = new int /*long*/ [1];
-				int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+				long /*int*/ modelHandle = OS.gtk_combo_box_get_model (handle);
+				long /*int*/ [] ptr = new long /*int*/ [1];
+				long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 				OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 				OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
 				OS.g_free (iter);
@@ -369,10 +369,10 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	if (hHint != SWT.DEFAULT && hHint < 0) hHint = 0;
 	int[] w = new int [1], h = new int [1];
 	OS.gtk_widget_realize (entryHandle);
-	int /*long*/ layout = OS.gtk_entry_get_layout (entryHandle);
+	long /*int*/ layout = OS.gtk_entry_get_layout (entryHandle);
 	OS.pango_layout_get_size (layout, w, h);
 	int xborder = Display.INNER_BORDER, yborder = Display.INNER_BORDER;
-	int /*long*/ style = OS.gtk_widget_get_style (entryHandle);
+	long /*int*/ style = OS.gtk_widget_get_style (entryHandle);
 	xborder += OS.gtk_style_get_xthickness (style);
 	yborder += OS.gtk_style_get_ythickness (style);
 	int [] property = new int [1];
@@ -388,7 +388,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	GtkRequisition arrowRequesition = new GtkRequisition ();
 	OS.gtk_widget_size_request (buttonHandle, arrowRequesition);
 	GtkRequisition listRequesition = new GtkRequisition ();
-	int /*long*/ listParent = OS.gtk_widget_get_parent (listHandle);
+	long /*int*/ listParent = OS.gtk_widget_get_parent (listHandle);
 	OS.gtk_widget_size_request (listParent != 0 ? listParent : listHandle, listRequesition);
 	
 	width = Math.max (listRequesition.width, width) + arrowRequesition.width + 4;
@@ -421,7 +421,7 @@ void createHandle (int index) {
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
-		int /*long*/ oldList = OS.gtk_window_list_toplevels ();  
+		long /*int*/ oldList = OS.gtk_window_list_toplevels ();  
 		if ((style & SWT.READ_ONLY) != 0) {
 			handle = OS.gtk_combo_box_new_text ();
 			if (handle == 0) error (SWT.ERROR_NO_HANDLES);
@@ -467,9 +467,9 @@ void createHandle (int index) {
 		*/
 		OS.gtk_container_forall (handle, display.allChildrenProc, 0);
 		if (display.allChildren != 0) {
-			int /*long*/ list = display.allChildren;
+			long /*int*/ list = display.allChildren;
 			while (list != 0) {
-				int /*long*/ widget = OS.g_list_data (list);
+				long /*int*/ widget = OS.g_list_data (list);
 				if (OS.GTK_IS_BUTTON (widget)) {
 					buttonHandle = widget;
 					break;
@@ -498,14 +498,14 @@ void createHandle (int index) {
 		listHandle = combo.list;
 		
 		if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
-			int /*long*/ parentHandle = 0;
-			int /*long*/ temp = listHandle;
+			long /*int*/ parentHandle = 0;
+			long /*int*/ temp = listHandle;
 			while ((temp = OS.gtk_widget_get_parent(temp)) != 0) {
 				parentHandle = temp;
 			}
 			popupHandle = parentHandle;
 			if (popupHandle != 0) {
-				int /*long*/ modalGroup = getShell().modalGroup;
+				long /*int*/ modalGroup = getShell().modalGroup;
 				if (modalGroup != 0) {
 					OS.gtk_window_group_add_window (modalGroup, popupHandle);
 				}
@@ -518,11 +518,11 @@ void createHandle (int index) {
 		* to hook events.  The fix is to find the first child that is
 		* not the entry or list and assume this is the arrow handle.
 		*/
-		int /*long*/ list = OS.gtk_container_get_children (handle);
+		long /*int*/ list = OS.gtk_container_get_children (handle);
 		if (list != 0) {
 			int i = 0, count = OS.g_list_length (list);
 			while (i<count) {
-				int /*long*/ childHandle = OS.g_list_nth_data (list, i);
+				long /*int*/ childHandle = OS.g_list_nth_data (list, i);
 				if (childHandle != entryHandle && childHandle != listHandle) {
 					buttonHandle = childHandle;
 					break;
@@ -563,15 +563,15 @@ void deregister () {
 	if (buttonHandle != 0) display.removeWidget (buttonHandle);
 	if (entryHandle != 0) display.removeWidget (entryHandle);
 	if (listHandle != 0) display.removeWidget (listHandle);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -580,18 +580,18 @@ boolean filterKey (int keyval, int /*long*/ event) {
 	return false;
 }
 
-int /*long*/ findPopupHandle (int /*long*/ oldList) {
-	int /*long*/ hdl = 0;
-	int /*long*/ currentList = OS.gtk_window_list_toplevels();
-	int /*long*/ oldFromList = oldList;
-	int /*long*/ newFromList = currentList;
+long /*int*/ findPopupHandle (long /*int*/ oldList) {
+	long /*int*/ hdl = 0;
+	long /*int*/ currentList = OS.gtk_window_list_toplevels();
+	long /*int*/ oldFromList = oldList;
+	long /*int*/ newFromList = currentList;
 	boolean isFound;
 	while (newFromList != 0) {
-		int /*long*/ newToplevel = OS.g_list_data(newFromList);
+		long /*int*/ newToplevel = OS.g_list_data(newFromList);
 		isFound = false;
 		oldFromList = oldList;
 		while (oldFromList != 0) {
-			int /*long*/ oldToplevel = OS.g_list_data(oldFromList);
+			long /*int*/ oldToplevel = OS.g_list_data(oldFromList);
 			if (newToplevel == oldToplevel) {
 				isFound = true;
 				break;
@@ -609,7 +609,7 @@ int /*long*/ findPopupHandle (int /*long*/ oldList) {
 	return hdl;
 }
 
-void fixModal (int /*long*/ group, int /*long*/ modalGroup) {
+void fixModal (long /*int*/ group, long /*int*/ modalGroup) {
 	if (popupHandle != 0) {
 		if (group != 0) {
 			OS.gtk_window_group_add_window (group, popupHandle);
@@ -631,7 +631,7 @@ void fixIM () {
 	*  filter has to be called by SWT.
 	*/	
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -641,12 +641,12 @@ void fixIM () {
 	gdkEventKey = 0;
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	if (entryHandle != 0) return entryHandle;
 	return super.fontHandle ();
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if ((style & SWT.READ_ONLY) != 0 && buttonHandle != 0) return buttonHandle;
 	}
@@ -676,9 +676,9 @@ void hookEvents () {
 	}
 	int eventMask =	OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_PRESS_MASK | 
 		OS.GDK_BUTTON_RELEASE_MASK;
- 	int /*long*/ [] handles = new int /*long*/ [] {buttonHandle, entryHandle, listHandle};
+ 	long /*int*/ [] handles = new long /*int*/ [] {buttonHandle, entryHandle, listHandle};
 	for (int i=0; i<handles.length; i++) {
-		int /*long*/ eventHandle = handles [i];
+		long /*int*/ eventHandle = handles [i];
 		if (eventHandle != 0) {
 			/* Connect the mouse signals */
 			OS.gtk_widget_add_events (eventHandle, eventMask);
@@ -702,7 +702,7 @@ void hookEvents () {
 			}
 		}
 	}
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -711,7 +711,7 @@ void hookEvents () {
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	return entryHandle != 0 ? OS.GTK_ENTRY_IM_CONTEXT (entryHandle) : 0;
 }
 
@@ -736,8 +736,8 @@ public void deselect (int index) {
 		}
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
 		boolean selected = OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
 		if (selected) {
 			OS.gtk_list_unselect_all (listHandle);
@@ -778,9 +778,9 @@ boolean dragDetect(int x, int y, boolean filter, boolean[] consume) {
 	if (filter && entryHandle != 0) {
 		int [] index = new int [1];
 		int [] trailing = new int [1];
-		int /*long*/ layout = OS.gtk_entry_get_layout (entryHandle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (entryHandle);
 		OS.pango_layout_xy_to_index (layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, trailing);
-		int /*long*/ ptr = OS.pango_layout_get_text (layout);
+		long /*int*/ ptr = OS.pango_layout_get_text (layout);
 		int position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 		Point selection = getSelection ();
 		if (selection.x <= position && position < selection.y) {
@@ -794,11 +794,11 @@ boolean dragDetect(int x, int y, boolean filter, boolean[] consume) {
 	return super.dragDetect (x, y, filter, consume);
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return fixedHandle;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -963,7 +963,7 @@ public Point getSelection () {
 			int index = OS.gtk_combo_box_get_active (handle);
 			if (index != -1) length = getItem (index).length ();
 		} else {
-			int /*long*/ str = OS.gtk_entry_get_text (entryHandle);
+			long /*int*/ str = OS.gtk_entry_get_text (entryHandle);
 			if (str != 0) length = (int)/*64*/OS.g_utf8_strlen (str, -1);
 		}
 		return new Point (0, length);
@@ -993,10 +993,10 @@ public int getSelectionIndex () {
 		return OS.gtk_combo_box_get_active (handle);
 	}
 	int index = 0, result = -1;
-	int /*long*/ children = OS.gtk_container_get_children (listHandle);
-	int /*long*/ temp = children;
+	long /*int*/ children = OS.gtk_container_get_children (listHandle);
+	long /*int*/ temp = children;
 	while (temp != 0) {
-		int /*long*/ item = OS.g_list_data (temp);
+		long /*int*/ item = OS.g_list_data (temp);
 		if (OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED) {
 			result = index;
 			break;
@@ -1023,7 +1023,7 @@ public int getSelectionIndex () {
 public String getText () {
 	checkWidget();
 	if (entryHandle != 0) {
-		int /*long*/ str = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ str = OS.gtk_entry_get_text (entryHandle);
 		if (str == 0) return "";
 		int length = OS.strlen (str);
 		byte [] buffer = new byte [length];
@@ -1104,12 +1104,12 @@ public int getVisibleItemCount () {
 	return visibleCount;
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	/*
 	* Feature in GTK. Depending on where the user clicks, GTK prevents 
 	* the left mouse button event from being propagated. The fix is to
@@ -1125,7 +1125,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (widget == handle) {
 			if (entryHandle == 0) {
@@ -1149,7 +1149,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 		}
 	} else {
 		if (!ignoreSelect) {
-			int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+			long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 			int length = OS.strlen (ptr);
 			byte [] buffer = new byte [length];
 			OS.memmove (buffer, ptr, length);
@@ -1170,7 +1170,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1189,7 +1189,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if (!OS.gtk_editable_get_editable (entryHandle)) return 0;
 	int length = OS.strlen (text);
@@ -1227,7 +1227,7 @@ int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (lockText) {
 		OS.gtk_list_unselect_item (listHandle, 0);
 		OS.g_signal_stop_emission_by_name (entryHandle, OS.delete_text);
@@ -1253,7 +1253,7 @@ int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent)  {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent)  {
 	/*
 	* Feature in GTK. Depending on where the user clicks, GTK prevents 
 	* the left mouse button event from being propagated. The fix is to
@@ -1305,12 +1305,12 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent)  {
 	return super.gtk_event_after(widget, gdkEvent);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	if (lockText) {
 		OS.gtk_list_unselect_item (listHandle, 0);
 		OS.g_signal_stop_emission_by_name (entryHandle, OS.insert_text);
@@ -1324,7 +1324,7 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	String newText = verifyText (oldText, pos [0], pos [0]);
@@ -1356,8 +1356,8 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
@@ -1403,7 +1403,7 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -1470,14 +1470,14 @@ boolean isFocusHandle(int widget) {
 	return super.isFocusHandle (widget);
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ childHandle =  entryHandle != 0 ? entryHandle : handle;	
+long /*int*/ paintWindow () {
+	long /*int*/ childHandle =  entryHandle != 0 ? entryHandle : handle;	
 	OS.gtk_widget_realize (childHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (childHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (childHandle);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if ((style & SWT.READ_ONLY) != 0) return window;
 	}
-	int /*long*/ children = OS.gdk_window_get_children (window);
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) window = OS.g_list_data (children);
 	OS.g_list_free (children);
 	return window;
@@ -1502,7 +1502,7 @@ public void paste () {
 	if (entryHandle != 0) OS.gtk_editable_paste_clipboard (entryHandle);
 }
 
-int /*long*/ parentingHandle() {
+long /*int*/ parentingHandle() {
 	return fixedHandle;
 }
 
@@ -1511,7 +1511,7 @@ void register () {
 	if (buttonHandle != 0) display.addWidget (buttonHandle, this);
 	if (entryHandle != 0) display.addWidget (entryHandle, this);
 	if (listHandle != 0) display.addWidget (listHandle, this);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -1555,10 +1555,10 @@ public void remove (int index) {
 		OS.gtk_combo_box_remove_text (handle, index);
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
 		boolean selected = OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
-		int /*long*/ items = OS.g_list_append (0, item);
+		long /*int*/ items = OS.g_list_append (0, item);
 		OS.gtk_list_remove_items (listHandle, items);
 		OS.g_list_free (items);
 		OS.g_list_free (children);
@@ -1605,10 +1605,10 @@ public void remove (int start, int end) {
 	} else {
 		boolean selected = false;
 		ignoreSelect = true;
-		int /*long*/ items = 0;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ items = 0;
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
 		for (int i = start; i <= end; i++) {
-			int /*long*/ item = OS.g_list_nth_data (children, i);
+			long /*int*/ item = OS.g_list_nth_data (children, i);
 			selected |= OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
 			items = OS.g_list_append (items, item);
 		}
@@ -1798,7 +1798,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return super.setBounds (x, y, width, newHeight, move, resize);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (entryHandle != 0) OS.gtk_widget_modify_font (entryHandle, font);
@@ -1819,11 +1819,11 @@ void setFontDescription (int /*long*/ font) {
 		OS.gtk_widget_modify_font (entryHandle, font);
 		if (listHandle != 0) {
 			OS.gtk_widget_modify_font (listHandle, font);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					OS.gtk_widget_modify_font (widget, font);
 				}
 				OS.g_list_free (itemsList);
@@ -1841,11 +1841,11 @@ void setForegroundColor (GdkColor color) {
 		setForegroundColor (entryHandle, color);
 		if (listHandle != 0) {
 			setForegroundColor (listHandle, color);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					setForegroundColor (widget, color);
 				}
 				OS.g_list_free (itemsList);
@@ -1886,9 +1886,9 @@ public void setItem (int index, String string) {
 		}
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
-		int /*long*/ label = OS.gtk_bin_get_child (item);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ label = OS.gtk_bin_get_child (item);
 		OS.gtk_label_set_text (label, buffer);
 		OS.g_list_free (children);
 		ignoreSelect = false;
@@ -1934,15 +1934,15 @@ public void setItems (String [] items) {
 	} else {
 		lockText = ignoreSelect = true;
 		OS.gtk_list_clear_items (listHandle, 0, -1);
-		int /*long*/ font = getFontDescription ();
+		long /*int*/ font = getFontDescription ();
 		GdkColor color = getForegroundColor ();
 		int direction = OS.gtk_widget_get_direction (handle);
 		int i = 0;
 		while (i < items.length) {
 			String string = items [i];
 			byte [] buffer = Converter.wcsToMbcs (null, string, true);
-			int /*long*/ item = OS.gtk_list_item_new_with_label (buffer);
-			int /*long*/ label = OS.gtk_bin_get_child (item); 
+			long /*int*/ item = OS.gtk_list_item_new_with_label (buffer);
+			long /*int*/ label = OS.gtk_bin_get_child (item); 
 			setForegroundColor (label, color);
 			OS.gtk_widget_modify_font (label, font);
 			OS.gtk_widget_set_direction (label, direction);
@@ -2020,11 +2020,11 @@ public void setOrientation (int orientation) {
 		if (entryHandle != 0) OS.gtk_widget_set_direction (entryHandle, dir);
 		if (listHandle != 0) {
 			OS.gtk_widget_set_direction (listHandle, dir);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					OS.gtk_widget_set_direction (widget, dir);
 				}
 				OS.g_list_free (itemsList);
@@ -2111,7 +2111,7 @@ public void setText (String string) {
 	* fix is to block the firing of these events and fire them ourselves in a consistent manner. 
 	*/
 	if (hooks (SWT.Verify) || filters (SWT.Verify)) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 		string = verifyText (string, 0, (int)/*64*/OS.g_utf8_strlen (ptr, -1));
 		if (string == null) return;
 	}
@@ -2195,9 +2195,9 @@ boolean translateTraversal (GdkEventKey keyEvent) {
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext = imContext (); 
+			long /*int*/ imContext = imContext (); 
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -2216,7 +2216,7 @@ String verifyText (String string, int start, int end) {
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
diff --git a/org/eclipse/swt/widgets/Composite.java b/org/eclipse/swt/widgets/Composite.java
index 62cda31..25295c4 100644
--- a/org/eclipse/swt/widgets/Composite.java
+++ b/org/eclipse/swt/widgets/Composite.java
@@ -47,8 +47,8 @@ import org.eclipse.swt.graphics.*;
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Composite extends Scrollable {
-	public int /*long*/  embeddedHandle;
-	int /*long*/ imHandle, socketHandle;
+	public long /*int*/  embeddedHandle;
+	long /*int*/ imHandle, socketHandle;
 	Layout layout;
 	Control[] tabList;
 	int layoutCount, backgroundMode;
@@ -101,15 +101,15 @@ static int checkStyle (int style) {
 }
 
 Control [] _getChildren () {
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return new Control [0];
 	int count = OS.g_list_length (list);
 	Control [] children = new Control [count];
 	int i = 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ handle = OS.g_list_data (temp);
+		long /*int*/ handle = OS.g_list_data (temp);
 		if (handle != 0) {
 			Widget widget = display.getWidget (handle);
 			if (widget != null && widget != this) {
@@ -203,7 +203,7 @@ protected void checkSubclass () {
 	/* Do nothing - Subclassing is allowed */
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	if (scrolledHandle != 0) return 0;
 	return super.childStyle ();
 }
@@ -263,9 +263,9 @@ void createHandle (int index, boolean fixed, boolean scrolled) {
 			if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_fixed_set_has_window (fixedHandle, true);
 		}
-		int /*long*/ vadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+		long /*int*/ vadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 		if (vadj == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ hadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+		long /*int*/ hadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 		if (hadj == 0) error (SWT.ERROR_NO_HANDLES);
 		scrolledHandle = OS.gtk_scrolled_window_new (hadj, vadj);
 		if (scrolledHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);
@@ -333,7 +333,7 @@ void drawBackground (GC gc, int x, int y, int width, int height) {
 	Control control = findBackgroundControl ();
 	if (control != null) {
 		GCData data = gc.getGCData ();
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) {
 			Cairo.cairo_save (cairo);
 			if (control.backgroundImage != null) {
@@ -341,15 +341,15 @@ void drawBackground (GC gc, int x, int y, int width, int height) {
 				Cairo.cairo_translate (cairo, -pt.x, -pt.y);
 				x += pt.x;
 				y += pt.y;
-				int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-				int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual (OS.gdk_visual_get_system());
-				int /*long*/ drawable = control.backgroundImage.pixmap;
-				int /*long*/ xDrawable = OS.GDK_PIXMAP_XID (drawable);				
+				long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+				long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual (OS.gdk_visual_get_system());
+				long /*int*/ drawable = control.backgroundImage.pixmap;
+				long /*int*/ xDrawable = OS.GDK_PIXMAP_XID (drawable);				
 				int [] w = new int [1], h = new int [1];
 				OS.gdk_drawable_get_size (drawable, w, h);
-				int /*long*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);
+				long /*int*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);
 				if (surface == 0) error (SWT.ERROR_NO_HANDLES);
-				int /*long*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);
+				long /*int*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);
 				if (pattern == 0) error (SWT.ERROR_NO_HANDLES);
 				Cairo.cairo_pattern_set_extend (pattern, Cairo.CAIRO_EXTEND_REPEAT);
 				if ((data.style & SWT.MIRRORED) != 0) {
@@ -367,7 +367,7 @@ void drawBackground (GC gc, int x, int y, int width, int height) {
 			Cairo.cairo_fill (cairo);
 			Cairo.cairo_restore (cairo);
 		} else {
-			int /*long*/ gdkGC = gc.handle;
+			long /*int*/ gdkGC = gc.handle;
 			GdkGCValues values = new GdkGCValues ();
 			OS.gdk_gc_get_values (gdkGC, values);
 			if (control.backgroundImage != null) {
@@ -425,7 +425,7 @@ void fixChildren (Shell newShell, Shell oldShell, Decorations newDecorations, De
 	}
 }
 
-void fixModal(int /*long*/ group, int /*long*/ modalGroup)  {
+void fixModal(long /*int*/ group, long /*int*/ modalGroup)  {
 	Control[] controls = _getChildren ();
 	for (int i = 0; i < controls.length; i++) {
 		controls[i].fixModal (group, modalGroup);
@@ -464,15 +464,15 @@ void fixTabList (Control control) {
 
 void fixZOrder () {
 	if ((state & CANVAS) != 0) return;
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);
 	if (parentWindow == 0) return;
-	int /*long*/ [] userData = new int /*long*/ [1];
-	int /*long*/ windowList = OS.gdk_window_get_children (parentWindow);
+	long /*int*/ [] userData = new long /*int*/ [1];
+	long /*int*/ windowList = OS.gdk_window_get_children (parentWindow);
 	if (windowList != 0) {
-		int /*long*/ windows = windowList;
+		long /*int*/ windows = windowList;
 		while (windows != 0) {
-			int /*long*/ window = OS.g_list_data (windows);
+			long /*int*/ window = OS.g_list_data (windows);
 			if (window != redrawWindow) {
 				OS.gdk_window_get_user_data (window, userData);
 				if (userData [0] == 0 || OS.G_OBJECT_TYPE (userData [0]) != display.gtk_fixed_get_type ()) {
@@ -485,12 +485,12 @@ void fixZOrder () {
 	}
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	if (socketHandle != 0) return socketHandle;
 	return super.focusHandle ();
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (socketHandle != 0) OS.GTK_WIDGET_SET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
 	boolean result = super.forceFocus (focusHandle);
 	if (socketHandle != 0) OS.GTK_WIDGET_UNSET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
@@ -551,7 +551,7 @@ int getChildrenCount () {
 	* NOTE: The current implementation will count
 	* non-registered children.
 	*/
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -565,7 +565,7 @@ public Rectangle getClientArea () {
 			return new Rectangle (0, 0, 0, 0);
 		}
 		forceResize ();
-		int /*long*/ clientHandle = clientHandle ();
+		long /*int*/ clientHandle = clientHandle ();
 		int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 		int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 		return new Rectangle (0, 0, width, height);
@@ -646,8 +646,8 @@ public Control [] getTabList () {
 	return tabList;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	if ((state & CANVAS) != 0) {
 		if ((style & SWT.NO_FOCUS) == 0 && hooksKeys ()) {
@@ -661,7 +661,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	if ((state & CANVAS) == 0) {
 		return super.gtk_expose_event (widget, eventPtr);
@@ -672,7 +672,7 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	if (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
 	OS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);
-	int /*long*/ [] rectangles = new int /*long*/ [1];
+	long /*int*/ [] rectangles = new long /*int*/ [1];
 	int [] n_rectangles = new int [1];
 	OS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);
 	GdkRectangle rect = new GdkRectangle ();
@@ -684,7 +684,7 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 		event.width = rect.width;
 		event.height = rect.height;
 		if ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;
-		int /*long*/ damageRgn = OS.gdk_region_new ();
+		long /*int*/ damageRgn = OS.gdk_region_new ();
 		OS.gdk_region_union_with_rect (damageRgn, rect);
 		GCData data = new GCData ();
 		data.damageRgn = damageRgn;
@@ -699,8 +699,8 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  The default behavior when the return key
@@ -720,30 +720,30 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	if (widget == socketHandle) return 0;
 	return super.gtk_focus (widget, directionType);
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	return (state & CANVAS) != 0 ? 1 : result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	return (state & CANVAS) != 0 ? 1 : result;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	fixZOrder ();
 	return 0;	
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
 	if ((style & SWT.NO_BACKGROUND) != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, false);
 	}
 	if (socketHandle != 0) {
@@ -752,16 +752,16 @@ int /*long*/ gtk_realize (int /*long*/ widget) {
 	return result;
 }
 
-int /*long*/ gtk_scroll_child (int /*long*/ widget, int /*long*/ scrollType, int /*long*/ horizontal) {
+long /*int*/ gtk_scroll_child (long /*int*/ widget, long /*int*/ scrollType, long /*int*/ horizontal) {
 	/* Stop GTK scroll child signal for canvas */
 	OS.g_signal_stop_emission_by_name (widget, OS.scroll_child);
 	return 1;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
-	int /*long*/ result = super.gtk_style_set (widget, previousStyle);
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
+	long /*int*/ result = super.gtk_style_set (widget, previousStyle);
 	if ((style & SWT.NO_BACKGROUND) != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, false);
 	}
 	return result;
@@ -785,7 +785,7 @@ boolean hooksKeys () {
 	return hooks (SWT.KeyDown) || hooks (SWT.KeyUp);
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return imHandle;
 }
 
@@ -1003,16 +1003,16 @@ void markLayout (boolean changed, boolean all) {
 	}
 }
 
-void moveAbove (int /*long*/ child, int /*long*/ sibling) {
+void moveAbove (long /*int*/ child, long /*int*/ sibling) {
 	if (child == sibling) return;
-	int /*long*/ parentHandle = parentingHandle ();
+	long /*int*/ parentHandle = parentingHandle ();
 	GtkFixed fixed = new GtkFixed ();
 	OS.memmove (fixed, parentHandle);
-	int /*long*/ children = fixed.children;
+	long /*int*/ children = fixed.children;
 	if (children == 0) return;
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ [] widget = new int /*long*/ [1];
-	int /*long*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ [] widget = new long /*int*/ [1];
+	long /*int*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.memmove (widget, data [0], OS.PTR_SIZEOF);
@@ -1040,20 +1040,20 @@ void moveAbove (int /*long*/ child, int /*long*/ sibling) {
 	OS.memmove (parentHandle, fixed);
 }
 
-void moveBelow (int /*long*/ child, int /*long*/ sibling) {
+void moveBelow (long /*int*/ child, long /*int*/ sibling) {
 	if (child == sibling) return;
-	int /*long*/ parentHandle = parentingHandle ();
+	long /*int*/ parentHandle = parentingHandle ();
 	if (sibling == 0 && parentHandle == fixedHandle) {
 		moveAbove (child, scrolledHandle != 0  ? scrolledHandle : handle);
 		return;
 	}
 	GtkFixed fixed = new GtkFixed ();
 	OS.memmove (fixed, parentHandle);
-	int /*long*/ children = fixed.children;
+	long /*int*/ children = fixed.children;
 	if (children == 0) return;
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ [] widget = new int /*long*/ [1];
-	int /*long*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ [] widget = new long /*int*/ [1];
+	long /*int*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.memmove (widget, data [0], OS.PTR_SIZEOF);
@@ -1085,7 +1085,7 @@ void moveChildren(int oldWidth) {
 	Control[] children = _getChildren ();
 	for (int i = 0; i < children.length; i++) {
 		Control child = children[i];
-		int /*long*/ topHandle = child.topHandle ();
+		long /*int*/ topHandle = child.topHandle ();
 		int x = OS.GTK_WIDGET_X (topHandle);
 		int y = OS.GTK_WIDGET_Y (topHandle);
 		int controlWidth = (child.state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
@@ -1127,12 +1127,12 @@ Point minimumSize (int wHint, int hHint, boolean changed) {
 	return new Point (width, height);
 }
 
-int /*long*/ parentingHandle () {
+long /*int*/ parentingHandle () {
 	if ((state & CANVAS) != 0) return handle;
 	return fixedHandle != 0 ? fixedHandle : handle;
 }
 
-void printWidget (GC gc, int /*long*/ drawable, int depth, int x, int y) {
+void printWidget (GC gc, long /*int*/ drawable, int depth, int x, int y) {
 	Region oldClip = new Region (gc.getDevice ());
 	Region newClip = new Region (gc.getDevice ());
 	gc.getClipping (oldClip);
diff --git a/org/eclipse/swt/widgets/Control.java b/org/eclipse/swt/widgets/Control.java
index cabd66b..a31abae 100644
--- a/org/eclipse/swt/widgets/Control.java
+++ b/org/eclipse/swt/widgets/Control.java
@@ -44,8 +44,8 @@ import org.eclipse.swt.internal.gtk.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public abstract class Control extends Widget implements Drawable {
-	int /*long*/ fixedHandle;
-	int /*long*/ redrawWindow, enableWindow;
+	long /*int*/ fixedHandle;
+	long /*int*/ redrawWindow, enableWindow;
 	int drawCount;
 	Composite parent;
 	Cursor cursor;
@@ -105,13 +105,13 @@ Font defaultFont () {
 void deregister () {
 	super.deregister ();
 	if (fixedHandle != 0) display.removeWidget (fixedHandle);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) display.removeWidget (imHandle);
 }
 
 boolean drawGripper (int x, int y, int width, int height, boolean vertical) {
-	int /*long*/ paintHandle = paintHandle ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle);
+	long /*int*/ paintHandle = paintHandle ();
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle);
 	if (window == 0) return false;
 	int orientation = vertical ? OS.GTK_ORIENTATION_HORIZONTAL : OS.GTK_ORIENTATION_VERTICAL;
 	if ((style & SWT.MIRRORED) != 0) x = getClientWidth () - width - x;
@@ -123,16 +123,16 @@ void enableWidget (boolean enabled) {
 	OS.gtk_widget_set_sensitive (handle, enabled);
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return eventHandle ();
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return handle;
 }
 
-int /*long*/ eventWindow () {
-	int /*long*/ eventHandle = eventHandle ();
+long /*int*/ eventWindow () {
+	long /*int*/ eventHandle = eventHandle ();
 	OS.gtk_widget_realize (eventHandle);
 	return OS.GTK_WIDGET_WINDOW (eventHandle);
 }
@@ -144,7 +144,7 @@ void fixFocus (Control focusControl) {
 		if (control.setFocus ()) return;
 	}
 	shell.setSavedFocus (focusControl);
-	int /*long*/ focusHandle = shell.vboxHandle;
+	long /*int*/ focusHandle = shell.vboxHandle;
 	OS.GTK_WIDGET_SET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
 	OS.gtk_widget_grab_focus (focusHandle);
 	OS.GTK_WIDGET_UNSET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
@@ -154,7 +154,7 @@ void fixStyle () {
 	if (fixedHandle != 0) fixStyle (fixedHandle);
 }
 
-void fixStyle (int /*long*/ handle) {
+void fixStyle (long /*int*/ handle) {
 	/*
 	* Feature in GTK.  Some GTK themes apply a different background to
 	* the contents of a GtkNotebook.  However, in an SWT TabFolder, the
@@ -168,7 +168,7 @@ void fixStyle (int /*long*/ handle) {
 	*/
 	if ((state & BACKGROUND) != 0) return;
 	if ((state & THEME_BACKGROUND) == 0) return;
-	int /*long*/ childStyle = parent.childStyle ();
+	long /*int*/ childStyle = parent.childStyle ();
 	if (childStyle != 0) {
 		GdkColor color = new GdkColor();
 		OS.gtk_style_get_bg (childStyle, 0, color);
@@ -176,11 +176,11 @@ void fixStyle (int /*long*/ handle) {
 	}
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	return handle;
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	return handle;
 }
 
@@ -190,7 +190,7 @@ boolean hasFocus () {
 
 void hookEvents () {
 	/* Connect the keyboard signals */
-	int /*long*/ focusHandle = focusHandle ();
+	long /*int*/ focusHandle = focusHandle ();
 	int focusMask = OS.GDK_KEY_PRESS_MASK | OS.GDK_KEY_RELEASE_MASK | OS.GDK_FOCUS_CHANGE_MASK;
 	OS.gtk_widget_add_events (focusHandle, focusMask);
 	OS.g_signal_connect_closure_by_id (focusHandle, display.signalIds [POPUP_MENU], 0, display.closures [POPUP_MENU], false);
@@ -202,7 +202,7 @@ void hookEvents () {
 	OS.g_signal_connect_closure_by_id (focusHandle, display.signalIds [FOCUS_OUT_EVENT], 0, display.closures [FOCUS_OUT_EVENT], false);
 
 	/* Connect the mouse signals */
-	int /*long*/ eventHandle = eventHandle ();
+	long /*int*/ eventHandle = eventHandle ();
 	int eventMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_PRESS_MASK | OS.GDK_BUTTON_RELEASE_MASK;
 	OS.gtk_widget_add_events (eventHandle, eventMask);
 	OS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT], false);
@@ -211,7 +211,7 @@ void hookEvents () {
 	OS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [SCROLL_EVENT], 0, display.closures [SCROLL_EVENT], false);
 	
 	/* Connect enter/exit signals */
-	int /*long*/ enterExitHandle = enterExitHandle ();
+	long /*int*/ enterExitHandle = enterExitHandle ();
 	int enterExitMask = OS.GDK_ENTER_NOTIFY_MASK | OS.GDK_LEAVE_NOTIFY_MASK;
 	OS.gtk_widget_add_events (enterExitHandle, enterExitMask);
 	OS.g_signal_connect_closure_by_id (enterExitHandle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);
@@ -227,7 +227,7 @@ void hookEvents () {
 	* The signal is hooked to the fixedHandle to catch events sent to
 	* lightweight widgets.
 	*/
-	int /*long*/ blockHandle = fixedHandle != 0 ? fixedHandle : eventHandle;
+	long /*int*/ blockHandle = fixedHandle != 0 ? fixedHandle : eventHandle;
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT_INVERSE], true);
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT_INVERSE], true);
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [MOTION_NOTIFY_EVENT], 0, display.closures [MOTION_NOTIFY_EVENT_INVERSE], true);
@@ -239,7 +239,7 @@ void hookEvents () {
 	}
 	
 	/* Connect the paint signal */
-	int /*long*/ paintHandle = paintHandle ();
+	long /*int*/ paintHandle = paintHandle ();
 	int paintMask = OS.GDK_EXPOSURE_MASK | OS.GDK_VISIBILITY_NOTIFY_MASK;
 	OS.gtk_widget_add_events (paintHandle, paintMask);
 	OS.g_signal_connect_closure_by_id (paintHandle, display.signalIds [EXPOSE_EVENT], 0, display.closures [EXPOSE_EVENT_INVERSE], false);
@@ -249,7 +249,7 @@ void hookEvents () {
 	/* Connect the Input Method signals */
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [REALIZE], 0, display.closures [REALIZE], true);
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [UNREALIZE], 0, display.closures [UNREALIZE], false);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		OS.g_signal_connect_closure (imHandle, OS.commit, display.closures [COMMIT], false);
 		OS.g_signal_connect_closure (imHandle, OS.preedit_changed, display.closures [PREEDIT_CHANGED], false);
@@ -257,11 +257,11 @@ void hookEvents () {
 	
 	OS.g_signal_connect_closure_by_id (paintHandle, display.signalIds [STYLE_SET], 0, display.closures [STYLE_SET], false);
    
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.g_signal_connect_closure_by_id (topHandle, display.signalIds [MAP], 0, display.closures [MAP], true);
 }
 
-int /*long*/ hoverProc (int /*long*/ widget) {
+long /*int*/ hoverProc (long /*int*/ widget) {
 	int [] x = new int [1], y = new int [1], mask = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, mask);
 	sendMouseEvent (SWT.MouseHover, 0, /*time*/0, x [0], y [0], false, mask [0]);
@@ -269,14 +269,14 @@ int /*long*/ hoverProc (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ topHandle() {
+long /*int*/ topHandle() {
 	if (fixedHandle != 0) return fixedHandle;
 	return super.topHandle ();
 }
 
-int /*long*/ paintHandle () {
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ paintHandle = handle;
+long /*int*/ paintHandle () {
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ paintHandle = handle;
 	while (paintHandle != topHandle) {
 		if ((OS.GTK_WIDGET_FLAGS (paintHandle) & OS.GTK_NO_WINDOW) == 0) break;
 		paintHandle = OS.gtk_widget_get_parent (paintHandle);
@@ -284,8 +284,8 @@ int /*long*/ paintHandle () {
 	return paintHandle;
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ paintHandle = paintHandle ();
+long /*int*/ paintWindow () {
+	long /*int*/ paintHandle = paintHandle ();
 	OS.gtk_widget_realize (paintHandle);
 	return OS.GTK_WIDGET_WINDOW (paintHandle);
 }
@@ -311,25 +311,25 @@ public boolean print (GC gc) {
 	checkWidget ();
 	if (gc == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (gc.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_realize (topHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	GCData data = gc.getGCData ();
 	OS.gdk_window_process_updates (window, true);
 	printWidget (gc, data.drawable, OS.gdk_drawable_get_depth (data.drawable), 0, 0);
 	return true;
 }
 
-void printWidget (GC gc, int /*long*/ drawable, int depth, int x, int y) {
+void printWidget (GC gc, long /*int*/ drawable, int depth, int x, int y) {
 	boolean obscured = (state & OBSCURED) != 0;
 	state &= ~OBSCURED;
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	printWindow (true, this, gc, drawable, depth, window, x, y);
 	if (obscured) state |= OBSCURED;
 }
 
-void printWindow (boolean first, Control control, GC gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {
+void printWindow (boolean first, Control control, GC gc, long /*int*/ drawable, int depth, long /*int*/ window, int x, int y) {
 	if (OS.gdk_drawable_get_depth (window) != depth) return;
 	GdkRectangle rect = new GdkRectangle ();
 	int [] width = new int [1], height = new int [1];
@@ -337,13 +337,13 @@ void printWindow (boolean first, Control control, GC gc, int /*long*/ drawable,
 	rect.width = width [0];
 	rect.height = height [0];
 	OS.gdk_window_begin_paint_rect (window, rect);
-	int /*long*/ [] real_drawable = new int /*long*/ [1];
+	long /*int*/ [] real_drawable = new long /*int*/ [1];
 	int [] x_offset = new int [1], y_offset = new int [1];
 	OS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);	
-	int /*long*/ [] userData = new int /*long*/ [1];
+	long /*int*/ [] userData = new long /*int*/ [1];
 	OS.gdk_window_get_user_data (window, userData);
 	if (userData [0] != 0) {
-		int /*long*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);
+		long /*int*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);
 		GdkEventExpose event = new GdkEventExpose ();
 		event.type = OS.GDK_EXPOSE;
 		event.window = OS.g_object_ref (window);
@@ -359,7 +359,7 @@ void printWindow (boolean first, Control control, GC gc, int /*long*/ drawable,
 	if (!first) {
 		int [] cX = new int [1], cY = new int [1];
 		OS.gdk_window_get_position (window, cX, cY);
-		int /*long*/ parentWindow = OS.gdk_window_get_parent (window);
+		long /*int*/ parentWindow = OS.gdk_window_get_parent (window);
 		int [] pW = new int [1], pH = new int [1];
 		OS.gdk_drawable_get_size (parentWindow, pW, pH);
 		srcX = x_offset [0] - cX [0];
@@ -370,18 +370,18 @@ void printWindow (boolean first, Control control, GC gc, int /*long*/ drawable,
 		destHeight = Math.min (cY [0] + height [0], pH [0]);
 	}
 	GCData gcData = gc.getGCData();
-	int /*long*/ cairo = gcData.cairo;
+	long /*int*/ cairo = gcData.cairo;
 	if (cairo != 0) {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY();
-		int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
-		int /*long*/ xDrawable = OS.GDK_PIXMAP_XID(real_drawable [0]);
-		int /*long*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width [0], height [0]);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY();
+		long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
+		long /*int*/ xDrawable = OS.GDK_PIXMAP_XID(real_drawable [0]);
+		long /*int*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width [0], height [0]);
 		if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		Cairo.cairo_save(cairo);
 		Cairo.cairo_rectangle(cairo, destX , destY, destWidth, destHeight);
 		Cairo.cairo_clip(cairo);
 		Cairo.cairo_translate(cairo, destX, destY);
-		int /*long*/ pattern = Cairo.cairo_pattern_create_for_surface(surface);
+		long /*int*/ pattern = Cairo.cairo_pattern_create_for_surface(surface);
 		if (pattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		Cairo.cairo_pattern_set_filter(pattern, Cairo.CAIRO_FILTER_BEST);
 		Cairo.cairo_set_source(cairo, pattern);
@@ -397,13 +397,13 @@ void printWindow (boolean first, Control control, GC gc, int /*long*/ drawable,
 		OS.gdk_draw_drawable (drawable, gc.handle, real_drawable [0], srcX, srcY, destX, destY, destWidth, destHeight);
 	}
 	OS.gdk_window_end_paint (window);
-	int /*long*/ children = OS.gdk_window_get_children (window);
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) {
-		int /*long*/ windows = children;
+		long /*int*/ windows = children;
 		while (windows != 0) {
-			int /*long*/ child = OS.g_list_data (windows);
+			long /*int*/ child = OS.g_list_data (windows);
 			if (OS.gdk_window_is_visible (child)) {
-				int /*long*/ [] data = new int /*long*/ [1];
+				long /*int*/ [] data = new long /*int*/ [1];
 				OS.gdk_window_get_user_data (child, data);
 				if (data [0] != 0) {
 					Widget widget = display.findWidget (data [0]);
@@ -517,7 +517,7 @@ void checkMirrored () {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) style |= SWT.MIRRORED;
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	return parent.childStyle ();
 }
 
@@ -577,7 +577,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	return computeNativeSize (handle, wHint, hHint, changed);	
 }
 
-Point computeNativeSize (int /*long*/ h, int wHint, int hHint, boolean changed) {
+Point computeNativeSize (long /*int*/ h, int wHint, int hHint, boolean changed) {
 	int width = wHint, height = hHint;
 	if (wHint == SWT.DEFAULT && hHint == SWT.DEFAULT) {
 		GtkRequisition requisition = new GtkRequisition ();
@@ -603,7 +603,7 @@ void forceResize () {
 	* topHandle.  Note that all calls to gtk_widget_size_allocate()
 	* must be preceded by a call to gtk_widget_size_request().
 	*/
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	GtkRequisition requisition = new GtkRequisition ();
 	gtk_widget_size_request (topHandle, requisition);
 	GtkAllocation allocation = new GtkAllocation ();
@@ -654,7 +654,7 @@ public Accessible getAccessible () {
  */
 public Rectangle getBounds () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int y = OS.GTK_WIDGET_Y (topHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
@@ -719,7 +719,7 @@ void markLayout (boolean changed, boolean all) {
 	/* Do nothing */
 }
 
-void modifyStyle (int /*long*/ handle, int /*long*/ style) {
+void modifyStyle (long /*int*/ handle, long /*int*/ style) {
 	super.modifyStyle(handle, style);
 	/*
 	* Bug in GTK.  When changing the style of a control that  
@@ -730,8 +730,8 @@ void modifyStyle (int /*long*/ handle, int /*long*/ style) {
 }
 
 void moveHandle (int x, int y) {
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ parentHandle = parent.parentingHandle ();
 	/*
 	* Feature in GTK.  Calling gtk_fixed_move() to move a child causes
 	* the whole parent to redraw.  This is a performance problem. The
@@ -749,13 +749,13 @@ void moveHandle (int x, int y) {
 }
 
 void resizeHandle (int width, int height) {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_set_size_request (topHandle, width, height);
 	if (topHandle != handle) OS.gtk_widget_set_size_request (handle, width, height);
 }
 
 int setBounds (int x, int y, int width, int height, boolean move, boolean resize) {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	boolean sendMove = move;
 	if ((parent.style & SWT.MIRRORED) != 0) {
 		int clientWidth = parent.getClientWidth ();
@@ -879,7 +879,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
  */
 public Point getLocation () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int y = OS.GTK_WIDGET_Y (topHandle);
 	if ((parent.style & SWT.MIRRORED) != 0) {
@@ -944,7 +944,7 @@ public void setLocation(int x, int y) {
  */
 public Point getSize () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (topHandle);
 	return new Point (width, height);
@@ -994,15 +994,15 @@ public void setSize (Point size) {
 public void setRegion (Region region) {
 	checkWidget ();
 	if (region != null && region.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle ());
-	int /*long*/ shape_region = (region == null) ? 0 : region.handle;
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle ());
+	long /*int*/ shape_region = (region == null) ? 0 : region.handle;
 	OS.gdk_window_shape_combine_region (window, shape_region, 0, 0);
 	this.region = region;
 }
 
 void setRelations () {
-	int /*long*/ parentHandle = parent.parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
 	int count = OS.g_list_length (list);
 	if (count > 1) {
@@ -1010,7 +1010,7 @@ void setRelations () {
 		 * the receiver is the last item in the list, so its predecessor will
 		 * be the second-last item in the list
 		 */
-		int /*long*/ handle = OS.g_list_nth_data (list, count - 2);
+		long /*int*/ handle = OS.g_list_nth_data (list, count - 2);
 		if (handle != 0) {
 			Widget widget = display.getWidget (handle);
 			if (widget != null && widget != this) {
@@ -1058,7 +1058,7 @@ boolean isDescribedByLabel () {
 	return true;
 }
 
-boolean isFocusHandle (int /*long*/ widget) {
+boolean isFocusHandle (long /*int*/ widget) {
 	return widget == focusHandle (); 
 }
 
@@ -1197,7 +1197,7 @@ public void setLayoutData (Object layoutData) {
  */
 public Point toControl (int x, int y) {
 	checkWidget ();
-	int /*long*/ window = eventWindow ();
+	long /*int*/ window = eventWindow ();
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	x -= origin_x [0];
@@ -1246,7 +1246,7 @@ public Point toControl (Point point) {
  */
 public Point toDisplay (int x, int y) {
 	checkWidget();
-	int /*long*/ window = eventWindow ();
+	long /*int*/ window = eventWindow ();
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	if ((style & SWT.MIRRORED) != 0) x = getClientWidth () - x;
@@ -1894,12 +1894,12 @@ public void removePaintListener(PaintListener listener) {
  */
 void removeRelation () {
 	if (!isDescribedByLabel ()) return;		/* there will not be any */
-	int /*long*/ accessible = OS.gtk_widget_get_accessible (handle);
+	long /*int*/ accessible = OS.gtk_widget_get_accessible (handle);
 	if (accessible == 0) return;
-	int /*long*/ set = ATK.atk_object_ref_relation_set (accessible);
+	long /*int*/ set = ATK.atk_object_ref_relation_set (accessible);
 	int count = ATK.atk_relation_set_get_n_relations (set);
 	for (int i = 0; i < count; i++) {
-		int /*long*/ relation = ATK.atk_relation_set_get_relation (set, 0);
+		long /*int*/ relation = ATK.atk_relation_set_get_relation (set, 0);
 		ATK.atk_relation_set_remove (set, relation);
 	}
 	OS.g_object_unref (set);
@@ -2022,7 +2022,7 @@ boolean dragDetect (int button, int count, int stateMask, int x, int y) {
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean quit = false, dragging = false;
 	while (!quit) {
-		int /*long*/ eventPtr = 0;
+		long /*int*/ eventPtr = 0;
 		/*
 		* There should be an event on the queue already, but
 		* in cases where there isn't one, stop trying after
@@ -2077,8 +2077,8 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	return dragging;
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
-	int /*long*/ imHandle = imHandle ();
+boolean filterKey (int keyval, long /*int*/ event) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		return OS.gtk_im_context_filter_keypress (imHandle, event);
 	}
@@ -2100,13 +2100,13 @@ void fixChildren (Shell newShell, Shell oldShell, Decorations newDecorations, De
 	oldDecorations.fixDecorations (newDecorations, this, menus);
 }
 
-int /*long*/ fixedMapProc (int /*long*/ widget) {
+long /*int*/ fixedMapProc (long /*int*/ widget) {
 	OS.GTK_WIDGET_SET_FLAGS (widget, OS.GTK_MAPPED);
-	int /*long*/ widgetList = OS.gtk_container_get_children (widget);
+	long /*int*/ widgetList = OS.gtk_container_get_children (widget);
 	if (widgetList != 0) {
-		int /*long*/ widgets = widgetList;
+		long /*int*/ widgets = widgetList;
 		while (widgets != 0) {
-			int /*long*/ child = OS.g_list_data (widgets);
+			long /*int*/ child = OS.g_list_data (widgets);
 			if (OS.GTK_WIDGET_VISIBLE (child) && OS.gtk_widget_get_child_visible (child) && !OS.GTK_WIDGET_MAPPED (child)) {
 				OS.gtk_widget_map (child);
 			}
@@ -2120,7 +2120,7 @@ int /*long*/ fixedMapProc (int /*long*/ widget) {
 	return 0;
 }
 
-void fixModal(int /*long*/ group, int /*long*/ modalGroup) {	
+void fixModal(long /*int*/ group, long /*int*/ modalGroup) {	
 }
 
 /**
@@ -2146,14 +2146,14 @@ public boolean forceFocus () {
 	return forceFocus (focusHandle ());
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (OS.GTK_WIDGET_HAS_FOCUS (focusHandle)) return true;
 	/* When the control is zero sized it must be realized */
 	OS.gtk_widget_realize (focusHandle);
 	OS.gtk_widget_grab_focus (focusHandle);
 	Shell shell = getShell ();
-	int /*long*/ shellHandle = shell.shellHandle;
-	int /*long*/ handle = OS.gtk_window_get_focus (shellHandle);
+	long /*int*/ shellHandle = shell.shellHandle;
+	long /*int*/ handle = OS.gtk_window_get_focus (shellHandle);
 	while (handle != 0) {
 		if (handle == focusHandle) {
 			/* Cancel any previous ignoreFocus requests */
@@ -2214,7 +2214,7 @@ public Image getBackgroundImage () {
 }
 
 GdkColor getBgColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_bg (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2222,7 +2222,7 @@ GdkColor getBgColor () {
 }
 
 GdkColor getBaseColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_base (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2327,8 +2327,8 @@ public Font getFont () {
 	return font != null ? font : defaultFont ();
 }
 	
-int /*long*/ getFontDescription () {
-	int /*long*/ fontHandle = fontHandle ();
+long /*int*/ getFontDescription () {
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	return OS.gtk_style_get_font_desc (OS.gtk_widget_get_style (fontHandle));
 }
@@ -2353,7 +2353,7 @@ GdkColor getForegroundColor () {
 }
 
 GdkColor getFgColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_fg (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2365,7 +2365,7 @@ Point getIMCaretPos () {
 }
 
 GdkColor getTextColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_text (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2417,7 +2417,7 @@ public Menu getMenu () {
 public Monitor getMonitor () {
 	checkWidget();
 	Monitor monitor = null;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, paintWindow ());
 		GdkRectangle dest = new GdkRectangle ();
@@ -2560,11 +2560,11 @@ public boolean getVisible () {
 	return (state & HIDDEN) == 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	return gtk_button_press_event (widget, event, true);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event, boolean sendMouseDown) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event, boolean sendMouseDown) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
@@ -2579,10 +2579,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event, bo
 	if (((shell.style & SWT.ON_TOP) != 0) && (((shell.style & SWT.NO_FOCUS) == 0) || ((style & SWT.NO_FOCUS) == 0))) {
 		shell.forceActive();
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if (gdkEvent.type == OS.GDK_BUTTON_PRESS) {
 		display.clickCount = 1;
-		int /*long*/ nextEvent = OS.gdk_event_peek ();
+		long /*int*/ nextEvent = OS.gdk_event_peek ();
 		if (nextEvent != 0) {
 			int eventType = OS.GDK_EVENT_TYPE (nextEvent);
 			if (eventType == OS.GDK_2BUTTON_PRESS) display.clickCount = 2;
@@ -2629,7 +2629,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event, bo
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	/*
@@ -2648,7 +2648,7 @@ int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event)
 	return sendMouseEvent (SWT.MouseUp, button, display.clickCount, 0, false, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	if (text == 0) return 0;
 	int length = OS.strlen (text);
 	if (length == 0) return 0;
@@ -2659,7 +2659,7 @@ int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {
 		/*
 		 * Feature in GTK. Children of a shell will inherit and display the shell's
@@ -2672,7 +2672,7 @@ int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
 			char [] chars = fixMnemonic (toolTipText, false);
 			buffer = Converter.wcsToMbcs (null, chars, true);
 		}
-		int /*long*/ toolHandle = getShell().handle;
+		long /*int*/ toolHandle = getShell().handle;
 		OS.gtk_widget_set_tooltip_text (toolHandle, buffer);
 	}
 	if (display.currentControl == this) return 0;
@@ -2702,7 +2702,7 @@ boolean checkSubwindow () {
 	return false;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -2744,7 +2744,7 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 				}
 			} else {
 				display.ignoreFocus = false;
-				int /*long*/ grabHandle = OS.gtk_grab_get_current ();
+				long /*int*/ grabHandle = OS.gtk_grab_get_current ();
 				if (grabHandle != 0) {
 					if (OS.G_OBJECT_TYPE (grabHandle) == OS.GTK_TYPE_MENU ()) {
 						display.ignoreFocus = true;
@@ -2760,7 +2760,7 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	if (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
@@ -2782,34 +2782,34 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	/* Stop GTK traversal for every widget */
 	return 1;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	// widget could be disposed at this point
 	if (handle != 0) {
 		Control oldControl = display.imControl;
 		if (oldControl != this)  {
 			if (oldControl != null && !oldControl.isDisposed ()) {
-				int /*long*/ oldIMHandle = oldControl.imHandle ();
+				long /*int*/ oldIMHandle = oldControl.imHandle ();
 				if (oldIMHandle != 0) OS.gtk_im_context_reset (oldIMHandle);
 			}
 		}
 		if (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {
-			int /*long*/ imHandle = imHandle ();
+			long /*int*/ imHandle = imHandle ();
 			if (imHandle != 0) OS.gtk_im_context_focus_in (imHandle);
 		}
 	}
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	// widget could be disposed at this point
 	if (handle != 0) {
 		if (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {
-			int /*long*/ imHandle = imHandle ();
+			long /*int*/ imHandle = imHandle ();
 			if (imHandle != 0) {
 				OS.gtk_im_context_focus_out (imHandle);
 			}
@@ -2818,7 +2818,7 @@ int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (!hasFocus ()) return 0;
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
@@ -2837,16 +2837,16 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
 	return super.gtk_key_press_event (widget, event);
 }
 
-int /*long*/ gtk_key_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_release_event (long /*int*/ widget, long /*int*/ event) {
 	if (!hasFocus ()) return 0;
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		if (OS.gtk_im_context_filter_keypress (imHandle, event)) return 1;
 	}
 	return super.gtk_key_release_event (widget, event);
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (display.currentControl != this) return 0;
 	display.removeMouseHoverTimeout (handle);
 	int result = 0;
@@ -2861,15 +2861,15 @@ int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	int result = 0;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey keyEvent = new GdkEventKey ();
 		OS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);
 		if (keyEvent.type == OS.GDK_KEY_PRESS) {
 			Control focusControl = display.getFocusControl ();
-			int /*long*/ focusHandle = focusControl != null ? focusControl.focusHandle () : 0;
+			long /*int*/ focusHandle = focusControl != null ? focusControl.focusHandle () : 0;
 			if (focusHandle != 0) {
 				display.mnemonicControl = this;
 				OS.gtk_widget_event (focusHandle, eventPtr);
@@ -2882,7 +2882,7 @@ int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
 	OS.memmove (gdkEvent, event, GdkEventMotion.sizeof);
 	if (this == display.currentControl && (hooks (SWT.MouseHover) || filters (SWT.MouseHover))) {
@@ -2892,7 +2892,7 @@ int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
 	int state = gdkEvent.state;
 	if (gdkEvent.is_hint != 0) {
 		int [] pointer_x = new int [1], pointer_y = new int [1], mask = new int [1];
-		int /*long*/ window = eventWindow ();
+		long /*int*/ window = eventWindow ();
 		OS.gdk_window_get_pointer (window, pointer_x, pointer_y, mask);
 		x = pointer_x [0];
 		y = pointer_y [0];
@@ -2902,32 +2902,32 @@ int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
 	if (!hasFocus()) return 0;
 	int [] x = new int [1], y = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, null);
 	return showMenu (x [0], y [0]) ? 1 : 0;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	display.showIMWindow (this);
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ imHandle = imHandle ();
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		OS.gtk_im_context_set_client_window (imHandle, window);
 	}
 	if (backgroundImage != null) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, backgroundImage.pixmap, false);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	GdkEventScroll gdkEvent = new GdkEventScroll ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventScroll.sizeof);
 	switch (gdkEvent.direction) {
@@ -2943,29 +2943,29 @@ int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	if (!hasFocus ()) return 0;
 	return sendHelpEvent (helpType) ? 1 : 0;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
 	if (backgroundImage != null) {
 		setBackgroundPixmap (backgroundImage.pixmap);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_unrealize (int /*long*/ widget) {
-	int /*long*/ imHandle = imHandle ();
+long /*int*/ gtk_unrealize (long /*int*/ widget) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) OS.gtk_im_context_set_client_window (imHandle, 0);
 	return 0;	
 }
 
-int /*long*/ gtk_visibility_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_visibility_notify_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventVisibility gdkEvent = new GdkEventVisibility ();
 	OS.memmove (gdkEvent, event, GdkEventVisibility.sizeof);
-	int /*long*/ paintWindow = paintWindow();
-	int /*long*/ window = gdkEvent.window;
+	long /*int*/ paintWindow = paintWindow();
+	long /*int*/ window = gdkEvent.window;
 	if (window == paintWindow) {
 		if (gdkEvent.state == OS.GDK_VISIBILITY_FULLY_OBSCURED) {
 			state |= OBSCURED;
@@ -2984,7 +2984,7 @@ int /*long*/ gtk_visibility_notify_event (int /*long*/ widget, int /*long*/ even
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	OS.gtk_widget_size_request (widget, requisition);	
 }
 
@@ -3001,11 +3001,11 @@ void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	checkWidget ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window == 0) SWT.error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new (window);
+	long /*int*/ gdkGC = OS.gdk_gc_new (window);
 	if (gdkGC == 0) error (SWT.ERROR_NO_HANDLES);	
 	if (data != null) {
 		int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;
@@ -3027,7 +3027,7 @@ public int /*long*/ internal_new_GC (GCData data) {
 	return gdkGC;
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return 0;
 }
 
@@ -3044,7 +3044,7 @@ int /*long*/ imHandle () {
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	checkWidget ();
 	OS.g_object_unref (gdkGC);
 }
@@ -3184,7 +3184,7 @@ boolean mnemonicMatch (char key) {
 void register () {
 	super.register ();
 	if (fixedHandle != 0) display.addWidget (fixedHandle, this);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) display.addWidget (imHandle, this);
 }
 
@@ -3260,7 +3260,7 @@ void redrawChildren () {
 
 void redrawWidget (int x, int y, int width, int height, boolean redrawAll, boolean all, boolean trim) {
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	GdkRectangle rect = new GdkRectangle ();
 	if (redrawAll) {
 		int [] w = new int [1], h = new int [1];
@@ -3310,7 +3310,7 @@ void releaseWidget () {
 	super.releaseWidget ();
 	if (display.currentControl == this) display.currentControl = null;
 	display.removeMouseHoverTimeout (handle);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		OS.gtk_im_context_reset (imHandle);
 		OS.gtk_im_context_set_client_window (imHandle, 0);
@@ -3376,7 +3376,7 @@ void sendFocusEvent (int type) {
 	}
 }
 
-boolean sendHelpEvent (int /*long*/ helpType) {
+boolean sendHelpEvent (long /*int*/ helpType) {
 	Control control = this;
 	while (control != null) {
 		if (control.hooks (SWT.Help)) {
@@ -3407,7 +3407,7 @@ boolean sendMouseEvent (int type, int button, int count, int detail, boolean sen
 		event.x = (int)x;
 		event.y = (int)y;
 	} else {
-		int /*long*/ window = eventWindow ();
+		long /*int*/ window = eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		event.x = (int)x - origin_x [0];
@@ -3461,7 +3461,7 @@ public void setBackground (Color color) {
 	}
 	boolean set = false;
 	if (gdkColor == null) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 		set = (OS.gtk_rc_style_get_color_flags (style, OS.GTK_STATE_NORMAL) & OS.GTK_RC_BG) != 0;
 	} else {
 		GdkColor oldColor = getBackgroundColor ();
@@ -3478,10 +3478,10 @@ public void setBackground (Color color) {
 	}
 }
 
-void setBackgroundColor (int /*long*/ handle, GdkColor color) {
+void setBackgroundColor (long /*int*/ handle, GdkColor color) {
 	int index = OS.GTK_STATE_NORMAL;
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
-	int /*long*/ ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
+	long /*int*/ ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);
 	if (ptr != 0) OS.g_free (ptr);
 	String name = color == null ? "<parent>" : "<none>";
 	byte[] buffer = Converter.wcsToMbcs (null, name, true);
@@ -3535,8 +3535,8 @@ public void setBackgroundImage (Image image) {
 	redrawChildren ();
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+void setBackgroundPixmap (long /*int*/ pixmap) {
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, backgroundImage.pixmap, false);
 }
 
@@ -3590,14 +3590,14 @@ public void setCursor (Cursor cursor) {
 	setCursor (cursor != null ? cursor.handle : 0);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ window = eventWindow ();
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ window = eventWindow ();
 	if (window != 0) {
 		OS.gdk_window_set_cursor (window, cursor);
 		if (!OS.GDK_WINDOWING_X11 ()) {
 			OS.gdk_flush ();
 		} else {
-			int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+			long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 			OS.XFlush (xDisplay);
 		}
 	}
@@ -3665,9 +3665,9 @@ public void setEnabled (boolean enabled) {
 		}
 	} else {
 		OS.gtk_widget_realize (handle);
-		int /*long*/ parentHandle = parent.eventHandle ();
-		int /*long*/ window = parent.eventWindow ();
-		int /*long*/ topHandle = topHandle ();
+		long /*int*/ parentHandle = parent.eventHandle ();
+		long /*int*/ window = parent.eventWindow ();
+		long /*int*/ topHandle = topHandle ();
 		GdkWindowAttr attributes = new GdkWindowAttr ();
 		attributes.x = OS.GTK_WIDGET_X (topHandle);
 		attributes.y = OS.GTK_WIDGET_Y (topHandle);
@@ -3682,9 +3682,9 @@ public void setEnabled (boolean enabled) {
 			if (!OS.GDK_WINDOWING_X11 ()) {
 				OS.gdk_window_raise (enableWindow);
 			} else {
-				int /*long*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);			
-				int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);
-				int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);
+				long /*int*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);			
+				long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);
+				long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);
 				int xScreen = OS.XDefaultScreen (xDisplay);
 				int flags = OS.CWStackMode | OS.CWSibling;			
 				XWindowChanges changes = new XWindowChanges ();
@@ -3737,7 +3737,7 @@ public void setFont (Font font) {
 	checkWidget();
 	if (((state & FONT) == 0) && font == null) return;
 	this.font = font;
-	int /*long*/ fontDesc;
+	long /*int*/ fontDesc;
 	if (font == null) {
 		fontDesc = defaultFont ().handle;
 	} else {
@@ -3752,7 +3752,7 @@ public void setFont (Font font) {
 	setFontDescription (fontDesc);
 }
 	
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 }
 
@@ -3783,7 +3783,7 @@ public void setForeground (Color color) {
 	}
 	boolean set = false;
 	if (gdkColor == null) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 		set = (OS.gtk_rc_style_get_color_flags (style, OS.GTK_STATE_NORMAL) & OS.GTK_RC_FG) != 0;
 	} else {
 		GdkColor oldColor = getForegroundColor ();
@@ -3811,7 +3811,7 @@ void setInitialBounds () {
 		* first sized.  The fix is to set the value to (0, 0) as
 		* expected by SWT.
 		*/
-		int /*long*/ topHandle = topHandle ();
+		long /*int*/ topHandle = topHandle ();
 		if ((parent.style & SWT.MIRRORED) != 0) {
 			OS.GTK_WIDGET_SET_X (topHandle, parent.getClientWidth ());
 		} else {
@@ -3893,7 +3893,7 @@ public boolean setParent (Composite parent) {
 	if (this.parent == parent) return true;
 	if (!isReparentable ()) return false;
 	OS.gtk_widget_realize (parent.handle);
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
 	if ((this.parent.style & SWT.MIRRORED) != 0) {
@@ -3912,7 +3912,7 @@ public boolean setParent (Composite parent) {
 		newDecorations.fixAccelGroup ();
 		oldDecorations.fixAccelGroup ();
 	}
-	int /*long*/ newParent = parent.parentingHandle();
+	long /*int*/ newParent = parent.parentingHandle();
 	OS.gtk_widget_reparent (topHandle, newParent);
 	OS.gtk_fixed_move (newParent, topHandle, x, y);
 	this.parent = parent;
@@ -3925,7 +3925,7 @@ void setParentBackground () {
 	if (fixedHandle != 0) setBackgroundColor (fixedHandle, null);
 }
 
-void setParentWindow (int /*long*/ widget) {
+void setParentWindow (long /*int*/ widget) {
 }
 
 boolean setRadioSelection (boolean value) {
@@ -3960,7 +3960,7 @@ public void setRedraw (boolean redraw) {
 	if (redraw) {
 		if (--drawCount == 0) {
 			if (redrawWindow != 0) {
-				int /*long*/ window = paintWindow ();
+				long /*int*/ window = paintWindow ();
 				/* Explicitly hiding the window avoids flicker on GTK+ >= 2.6 */
 				OS.gdk_window_hide (redrawWindow);
 				OS.gdk_window_destroy (redrawWindow);
@@ -3971,7 +3971,7 @@ public void setRedraw (boolean redraw) {
 	} else {
 		if (drawCount++ == 0) {
 			if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) != 0) {
-				int /*long*/ window = paintWindow ();
+				long /*int*/ window = paintWindow ();
 				Rectangle rect = getBounds ();
 				GdkWindowAttr attributes = new GdkWindowAttr ();
 				attributes.width = rect.width;
@@ -4066,7 +4066,7 @@ void setToolTipText (Shell shell, String newString) {
 public void setVisible (boolean visible) {
 	checkWidget();
 	if (((state & HIDDEN) == 0) == visible) return;
-	int /*long*/ topHandle = topHandle();
+	long /*int*/ topHandle = topHandle();
 	if (visible) {
 		/*
 		* It is possible (but unlikely), that application
@@ -4147,11 +4147,11 @@ void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fi
 		}
 	}
 
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ siblingHandle = sibling != null ? sibling.topHandle () : 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ siblingHandle = sibling != null ? sibling.topHandle () : 0;
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	if (window != 0) {
-		int /*long*/ siblingWindow = 0;
+		long /*int*/ siblingWindow = 0;
 		if (sibling != null) {
 			if (above && sibling.enableWindow != 0) {
 				siblingWindow = enableWindow;
@@ -4159,7 +4159,7 @@ void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fi
 				siblingWindow = OS.GTK_WIDGET_WINDOW (siblingHandle);
 			}
 		}
-		int /*long*/ redrawWindow = fixChildren ? parent.redrawWindow : 0;
+		long /*int*/ redrawWindow = fixChildren ? parent.redrawWindow : 0;
 		if (!OS.GDK_WINDOWING_X11 () || (siblingWindow == 0 && (!above || redrawWindow == 0))) {
 			if (above) {
 				OS.gdk_window_raise (window);
@@ -4174,8 +4174,8 @@ void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fi
 			changes.sibling = OS.gdk_x11_drawable_get_xid (siblingWindow != 0 ? siblingWindow : redrawWindow);
 			changes.stack_mode = above ? OS.Above : OS.Below;
 			if (redrawWindow != 0 && siblingWindow == 0) changes.stack_mode = OS.Below;
-			int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-			int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
+			long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+			long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
 			int xScreen = OS.XDefaultScreen (xDisplay);
 			int flags = OS.CWStackMode | OS.CWSibling;
 			/*
@@ -4242,10 +4242,10 @@ void setZOrder (Control sibling, boolean above, boolean fixRelations, boolean fi
 
 void setWidgetBackground  () {
 	if (fixedHandle != 0) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (fixedHandle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (fixedHandle);
 		modifyStyle (fixedHandle, style);
 	}
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 	modifyStyle (handle, style);
 }
 
@@ -4273,8 +4273,8 @@ boolean showMenu (int x, int y) {
 void showWidget () {
 	// Comment this line to disable zero-sized widgets
 	state |= ZERO_WIDTH | ZERO_HEIGHT;
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ parentHandle = parent.parentingHandle ();
 	parent.setParentWindow (topHandle);
 	OS.gtk_container_add (parentHandle, topHandle);
 	if (handle != 0 && handle != topHandle) OS.gtk_widget_show (handle);
@@ -4541,7 +4541,7 @@ void update (boolean all, boolean flush) {
 //	checkWidget();
 	if (!OS.GTK_WIDGET_VISIBLE (topHandle ())) return; 
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (flush) display.flushExposes (window, all);
 	OS.gdk_window_process_updates (window, all);
 	OS.gdk_flush ();
@@ -4559,7 +4559,7 @@ void updateLayout (boolean all) {
 	/* Do nothing */
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case EXPOSE_EVENT_INVERSE: {
 			if ((OS.GTK_VERSION <  OS.VERSION (2, 8, 0)) && ((state & OBSCURED) == 0)) {
@@ -4567,10 +4567,10 @@ int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ us
 				if (control != null && control.backgroundImage != null) {
 					GdkEventExpose gdkEvent = new GdkEventExpose ();
 					OS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);
-					int /*long*/ paintWindow = paintWindow();
-					int /*long*/ window = gdkEvent.window;
+					long /*int*/ paintWindow = paintWindow();
+					long /*int*/ window = gdkEvent.window;
 					if (window != paintWindow) break;
-					int /*long*/ gdkGC = OS.gdk_gc_new (window);
+					long /*int*/ gdkGC = OS.gdk_gc_new (window);
 					OS.gdk_gc_set_clip_region (gdkGC, gdkEvent.region);
 					int[] dest_x = new int[1], dest_y = new int[1];
 					OS.gtk_widget_translate_coordinates (paintHandle (), control.paintHandle (), 0, 0, dest_x, dest_y);
diff --git a/org/eclipse/swt/widgets/DateTime.java b/org/eclipse/swt/widgets/DateTime.java
index 11248e3..b257294 100644
--- a/org/eclipse/swt/widgets/DateTime.java
+++ b/org/eclipse/swt/widgets/DateTime.java
@@ -483,17 +483,17 @@ public int getYear () {
 	}
 }
 
-int /*long*/ gtk_day_selected (int /*long*/ widget) {
+long /*int*/ gtk_day_selected (long /*int*/ widget) {
 	sendSelectionEvent ();
 	return 0;
 }
 
-int /*long*/ gtk_day_selected_double_click (int /*long*/ widget) {
+long /*int*/ gtk_day_selected_double_click (long /*int*/ widget) {
 	postEvent(SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_month_changed (int /*long*/ widget) {
+long /*int*/ gtk_month_changed (long /*int*/ widget) {
 	sendSelectionEvent ();
 	return 0;
 }
diff --git a/org/eclipse/swt/widgets/Decorations.java b/org/eclipse/swt/widgets/Decorations.java
index 38ed5a2..d95979b 100644
--- a/org/eclipse/swt/widgets/Decorations.java
+++ b/org/eclipse/swt/widgets/Decorations.java
@@ -102,7 +102,7 @@ public class Decorations extends Canvas {
 	Menu [] menus;
 	Control savedFocus;
 	Button defaultButton, saveDefault;
-	int /*long*/ accelGroup, vboxHandle;
+	long /*int*/ accelGroup, vboxHandle;
 	
 Decorations () {
 	/* Do nothing */
@@ -171,17 +171,17 @@ void _setImages (Image [] images) {
 		sort (bestImages);
 		images = bestImages;
 	}
-	int /*long*/ pixbufs = 0;
+	long /*int*/ pixbufs = 0;
 	if (images != null) {
 		for (int i = 0; i < images.length; i++) {
 			Image image = images [i];
-			int /*long*/ pixbuf = Display.createPixbuf (image);
+			long /*int*/ pixbuf = Display.createPixbuf (image);
 			pixbufs = OS.g_list_append (pixbufs, pixbuf);			
 		}
 	}
 	OS.gtk_window_set_icon_list (topHandle (), pixbufs);
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ temp = pixbufs;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ temp = pixbufs;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.g_object_unref (data [0]);
@@ -232,7 +232,7 @@ void createAccelGroup () {
 	accelGroup = OS.gtk_accel_group_new ();
 	if (accelGroup == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	//FIXME - what should we do for Decorations
-	int /*long*/ shellHandle = topHandle ();
+	long /*int*/ shellHandle = topHandle ();
 	OS.gtk_window_add_accel_group (shellHandle, accelGroup);
 }
 
@@ -243,7 +243,7 @@ void createWidget (int index) {
 
 void destroyAccelGroup () {
 	if (accelGroup == 0) return;
-	int /*long*/ shellHandle = topHandle ();
+	long /*int*/ shellHandle = topHandle ();
 	OS.gtk_window_remove_accel_group (shellHandle, accelGroup);
 	//TEMPORARY CODE
 //	OS.g_object_unref (accelGroup);
@@ -533,7 +533,7 @@ boolean restoreFocus () {
  */
 public void setDefaultButton (Button button) {
 	checkWidget();
-	int /*long*/ buttonHandle = 0;
+	long /*int*/ buttonHandle = 0;
 	if (button != null) {
 		if (button.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 		if (button.menuShell () != this) error (SWT.ERROR_INVALID_PARENT);
@@ -745,7 +745,7 @@ boolean traverseReturn () {
 	* key.
 	*/
 	if (!button.isVisible () || !button.isEnabled ()) return true;
-	int /*long*/ shellHandle = _getShell ().topHandle ();
+	long /*int*/ shellHandle = _getShell ().topHandle ();
 	return OS.gtk_window_activate_default (shellHandle);
 }
 
diff --git a/org/eclipse/swt/widgets/DirectoryDialog.java b/org/eclipse/swt/widgets/DirectoryDialog.java
index 8b31222..9458aaf 100644
--- a/org/eclipse/swt/widgets/DirectoryDialog.java
+++ b/org/eclipse/swt/widgets/DirectoryDialog.java
@@ -125,16 +125,16 @@ public String open () {
 }
 String openChooserDialog () {
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ shellHandle = parent.topHandle ();
+	long /*int*/ shellHandle = parent.topHandle ();
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
-	int /*long*/ handle = 0;
+	long /*int*/ handle = 0;
 	if (display.getDismissalAlignment() == SWT.RIGHT) {
 		handle = OS.gtk_file_chooser_dialog_new (titleBytes, shellHandle, OS.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER, OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL, OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK, 0);
 	} else {
 		handle = OS.gtk_file_chooser_dialog_new (titleBytes, shellHandle, OS.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER, OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK, OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL, 0);
 	}
 	OS.gtk_window_set_modal (handle, true);
-	int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+	long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 	if (pixbufs != 0) {
 		OS.gtk_window_set_icon_list (handle, pixbufs);
 		OS.g_list_free (pixbufs);
@@ -152,7 +152,7 @@ String openChooserDialog () {
 		* when setting a file name that is not a true canonical path. 
 		* The fix is to use the canonical path.
 		*/
-		int /*long*/ ptr = OS.realpath (buffer, null);
+		long /*int*/ ptr = OS.realpath (buffer, null);
 		if (ptr != 0) {
 			OS.gtk_file_chooser_set_current_folder (handle, ptr);
 			OS.g_free (ptr);
@@ -160,9 +160,9 @@ String openChooserDialog () {
 	}
 	if (message.length () > 0) {
 		byte [] buffer = Converter.wcsToMbcs (null, message, true);
-		int /*long*/ box = OS.gtk_hbox_new (false, 0);
+		long /*int*/ box = OS.gtk_hbox_new (false, 0);
 		if (box == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ label = OS.gtk_label_new (buffer);
+		long /*int*/ label = OS.gtk_label_new (buffer);
 		if (label == 0) error (SWT.ERROR_NO_HANDLES);
 		OS.gtk_container_add (box, label);
 		OS.gtk_widget_show (label);
@@ -178,7 +178,7 @@ String openChooserDialog () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -191,13 +191,13 @@ String openChooserDialog () {
 		display.setModalDialog (oldModal);
 	}
 	if (response == OS.GTK_RESPONSE_OK) {
-		int /*long*/ path = OS.gtk_file_chooser_get_filename (handle);
+		long /*int*/ path = OS.gtk_file_chooser_get_filename (handle);
 		if (path != 0) {
-			int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
+			long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
 			OS.g_free (path);
 			if (utf8Ptr != 0) {
-				int /*long*/ [] items_written = new int /*long*/ [1];
-				int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+				long /*int*/ [] items_written = new long /*int*/ [1];
+				long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 				OS.g_free (utf8Ptr);
 				if (utf16Ptr != 0) {
 					int clength = (int)/*64*/items_written [0];
@@ -216,11 +216,11 @@ String openChooserDialog () {
 }
 String openClassicDialog () {
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ handle = OS.gtk_file_selection_new (titleBytes);
+	long /*int*/ handle = OS.gtk_file_selection_new (titleBytes);
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -236,8 +236,8 @@ String openClassicDialog () {
 		int length = path.length ();
 		char [] buffer = new char [length + 1];
 		path.getChars (0, length, buffer, 0);
-		int /*long*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
-		int /*long*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
+		long /*int*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
+		long /*int*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
 		OS.gtk_file_selection_set_filename (handle, fileNamePtr);
 		OS.g_free (utf8Ptr);
 		OS.g_free (fileNamePtr);		
@@ -245,12 +245,12 @@ String openClassicDialog () {
 	GtkFileSelection selection = new GtkFileSelection ();
 	OS.memmove (selection, handle);
 	OS.gtk_file_selection_hide_fileop_buttons (handle);
-	int /*long*/ fileListParent = OS.gtk_widget_get_parent (selection.file_list);
+	long /*int*/ fileListParent = OS.gtk_widget_get_parent (selection.file_list);
 	OS.gtk_widget_hide (selection.file_list);
 	OS.gtk_widget_hide (fileListParent);
 	if (message.length () > 0) {
 		byte [] buffer = Converter.wcsToMbcs (null, message, true);
-		int /*long*/ labelHandle = OS.gtk_label_new (buffer);
+		long /*int*/ labelHandle = OS.gtk_label_new (buffer);
 		OS.gtk_label_set_line_wrap (labelHandle, true);		
 		OS.gtk_misc_set_alignment (labelHandle, 0.0f, 0.0f);
 		OS.gtk_container_add (selection.main_vbox, labelHandle);
@@ -266,7 +266,7 @@ String openClassicDialog () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -279,11 +279,11 @@ String openClassicDialog () {
 		display.setModalDialog (oldModal);
 	}
 	if (response == OS.GTK_RESPONSE_OK) {
-		int /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
-		int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
+		long /*int*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
+		long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
 		if (utf8Ptr != 0) {
-			int /*long*/ [] items_written = new int /*long*/ [1];
-			int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+			long /*int*/ [] items_written = new long /*int*/ [1];
+			long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 			if (utf16Ptr != 0) {
 				int length = (int)/*64*/items_written [0];
 				char [] buffer = new char [length];
diff --git a/org/eclipse/swt/widgets/Display.java b/org/eclipse/swt/widgets/Display.java
index 0e1945f..0f08ad2 100644
--- a/org/eclipse/swt/widgets/Display.java
+++ b/org/eclipse/swt/widgets/Display.java
@@ -98,29 +98,29 @@ public class Display extends Device {
 
 	/* Events Dispatching and Callback */
 	int gdkEventCount;
-	int /*long*/ [] gdkEvents;
+	long /*int*/ [] gdkEvents;
 	Widget [] gdkEventWidgets;
 	int [] dispatchEvents;
 	Event [] eventQueue;
-	int /*long*/ fds;
+	long /*int*/ fds;
 	int allocated_nfds;
 	boolean wake;
 	int [] max_priority = new int [1], timeout = new int [1];
 	Callback eventCallback, filterCallback;
-	int /*long*/ eventProc, filterProc, windowProc2, windowProc3, windowProc4, windowProc5;
+	long /*int*/ eventProc, filterProc, windowProc2, windowProc3, windowProc4, windowProc5;
 	Callback windowCallback2, windowCallback3, windowCallback4, windowCallback5;
 	EventTable eventTable, filterTable;
 	static String APP_NAME = "SWT"; //$NON-NLS-1$
 	static final String DISPATCH_EVENT_KEY = "org.eclipse.swt.internal.gtk.dispatchEvent"; //$NON-NLS-1$
 	static final String ADD_WIDGET_KEY = "org.eclipse.swt.internal.addWidget"; //$NON-NLS-1$
-	int /*long*/ [] closures;
+	long /*int*/ [] closures;
 	int [] signalIds;
-	int /*long*/ shellMapProcClosure;
+	long /*int*/ shellMapProcClosure;
 
 	/* Widget Table */
 	int [] indexTable;
 	int freeSlot;
-	int /*long*/ lastHandle;
+	long /*int*/ lastHandle;
 	Widget lastWidget;
 	Widget [] widgetTable;
 	final static int GROW_SIZE = 1024;
@@ -151,7 +151,7 @@ public class Display extends Device {
 	
 	/* Input method resources */
 	Control imControl;
-	int /*long*/ preeditWindow, preeditLabel;
+	long /*int*/ preeditWindow, preeditLabel;
 
 	/* Sync/Async Widget Communication */
 	Synchronizer synchronizer = new Synchronizer (this);
@@ -167,40 +167,40 @@ public class Display extends Device {
 	int [] timerIds;
 	Runnable [] timerList;
 	Callback timerCallback;
-	int /*long*/ timerProc;
+	long /*int*/ timerProc;
 	Callback windowTimerCallback;
-	int /*long*/ windowTimerProc;
+	long /*int*/ windowTimerProc;
 	
 	/* Caret */
 	Caret currentCaret;
 	Callback caretCallback;
 	int caretId;
-	int /*long*/ caretProc;
+	long /*int*/ caretProc;
 	
 	/* Mnemonics */
 	Control mnemonicControl;
 
 	/* Mouse hover */
 	int mouseHoverId;
-	int /*long*/ mouseHoverHandle, mouseHoverProc;
+	long /*int*/ mouseHoverHandle, mouseHoverProc;
 	Callback mouseHoverCallback;
 	
 	/* Menu position callback */
-	int /*long*/ menuPositionProc;
+	long /*int*/ menuPositionProc;
 	Callback menuPositionCallback;
 
 	/* Tooltip size allocate callback */
-	int /*long*/ sizeAllocateProc;
+	long /*int*/ sizeAllocateProc;
 	Callback sizeAllocateCallback;
-	int /*long*/ sizeRequestProc;
+	long /*int*/ sizeRequestProc;
 	Callback sizeRequestCallback;
 
 	/* Shell map callback */
-	int /*long*/ shellMapProc;
+	long /*int*/ shellMapProc;
 	Callback shellMapCallback;
 	
 	/* Idle proc callback */
-	int /*long*/ idleProc;
+	long /*int*/ idleProc;
 	int idleHandle;
 	Callback idleCallback;
 	static final String ADD_IDLE_PROC_KEY = "org.eclipse.swt.internal.gtk.addIdleProc"; //$NON-NLS-1$
@@ -211,29 +211,29 @@ public class Display extends Device {
 	/* GtkTreeView callbacks */
 	int[] treeSelection;
 	int treeSelectionLength;
-	int /*long*/ treeSelectionProc;
+	long /*int*/ treeSelectionProc;
 	Callback treeSelectionCallback;
-	int /*long*/ cellDataProc;
+	long /*int*/ cellDataProc;
 	Callback cellDataCallback;
 	
 	/* Set direction callback */
-	int /*long*/ setDirectionProc;
+	long /*int*/ setDirectionProc;
 	Callback setDirectionCallback;
 	static final String GET_DIRECTION_PROC_KEY = "org.eclipse.swt.internal.gtk.getDirectionProc"; //$NON-NLS-1$
 	
 	/* Set emissionProc callback */
-	int /*long*/ emissionProc;
+	long /*int*/ emissionProc;
 	Callback emissionProcCallback;
 	static final String GET_EMISSION_PROC_KEY = "org.eclipse.swt.internal.gtk.getEmissionProc"; //$NON-NLS-1$
 	
 	/* Get all children callback */
-	int /*long*/ allChildrenProc, allChildren;
+	long /*int*/ allChildrenProc, allChildren;
 	Callback allChildrenCallback;
 
 	/* Settings callbacks */
-	int /*long*/ styleSetProc;
+	long /*int*/ styleSetProc;
 	Callback styleSetCallback;
-	int /*long*/ shellHandle;
+	long /*int*/ shellHandle;
 	boolean settingsChanged, runSettings;
 	
 	/* Entry focus behaviour */
@@ -243,14 +243,14 @@ public class Display extends Device {
 	Control currentControl;
 	
 	/* Flush exposes */
-	int /*long*/ checkIfEventProc;
+	long /*int*/ checkIfEventProc;
 	Callback checkIfEventCallback;
-	int /*long*/ flushWindow;
+	long /*int*/ flushWindow;
 	boolean flushAll;
 	GdkRectangle flushRect = new GdkRectangle ();
 	XExposeEvent exposeEvent = new XExposeEvent ();
 	XVisibilityEvent visibilityEvent = new XVisibilityEvent ();
-	int /*long*/ [] flushData = new int /*long*/ [1];
+	long /*int*/ [] flushData = new long /*int*/ [1];
 
 	/* System Resources */
 	Font systemFont;
@@ -280,20 +280,20 @@ public class Display extends Device {
 	int lastEventTime, lastUserEventTime;
 	
 	/* Pango layout constructor */
-	int /*long*/ pangoLayoutNewProc, pangoLayoutNewDefaultProc;
+	long /*int*/ pangoLayoutNewProc, pangoLayoutNewDefaultProc;
 	Callback pangoLayoutNewCallback;
 	
 	/* Fixed Subclass */
-	static int /*long*/ fixed_type;
-	static int /*long*/ fixed_info_ptr;
+	static long /*int*/ fixed_type;
+	static long /*int*/ fixed_info_ptr;
 	static Callback fixedClassInitCallback, fixedMapCallback, fixedSizeAllocateCallback;
-	static int /*long*/ fixedClassInitProc, fixedMapProc, fixedSizeAllocateProc, oldFixedSizeAllocateProc;
+	static long /*int*/ fixedClassInitProc, fixedMapProc, fixedSizeAllocateProc, oldFixedSizeAllocateProc;
 
 	/* Renderer Subclass */
-	static int /*long*/ text_renderer_type, pixbuf_renderer_type, toggle_renderer_type;
-	static int /*long*/ text_renderer_info_ptr, pixbuf_renderer_info_ptr, toggle_renderer_info_ptr;
+	static long /*int*/ text_renderer_type, pixbuf_renderer_type, toggle_renderer_type;
+	static long /*int*/ text_renderer_info_ptr, pixbuf_renderer_info_ptr, toggle_renderer_info_ptr;
 	static Callback rendererClassInitCallback, rendererRenderCallback, rendererGetSizeCallback;
-	static int /*long*/ rendererClassInitProc, rendererRenderProc, rendererGetSizeProc;
+	static long /*int*/ rendererClassInitProc, rendererRenderProc, rendererGetSizeProc;
 
 	/* Key Mappings */
 	static final int [] [] KeyTable = {
@@ -522,16 +522,16 @@ public void addFilter (int eventType, Listener listener) {
 	filterTable.hook (eventType, listener);
 }
 
-void addGdkEvent (int /*long*/ event) {
+void addGdkEvent (long /*int*/ event) {
 	if (gdkEvents == null) {
 		int length = GROW_SIZE;
-		gdkEvents = new int /*long*/ [length];
+		gdkEvents = new long /*int*/ [length];
 		gdkEventWidgets = new Widget [length];
 		gdkEventCount = 0;
 	}
 	if (gdkEventCount == gdkEvents.length) {
 		int length = gdkEventCount + GROW_SIZE;
-		int /*long*/ [] newEvents = new int /*long*/ [length];
+		long /*int*/ [] newEvents = new long /*int*/ [length];
 		System.arraycopy (gdkEvents, 0, newEvents, 0, gdkEventCount);
 		gdkEvents = newEvents;
 		Widget [] newWidgets = new Widget [length];
@@ -539,7 +539,7 @@ void addGdkEvent (int /*long*/ event) {
 		gdkEventWidgets = newWidgets;
 	}
 	Widget widget = null;
-	int /*long*/ handle = OS.gtk_get_event_widget (event);
+	long /*int*/ handle = OS.gtk_get_event_widget (event);
 	if (handle != 0) {
 		do {
 			widget = getWidget (handle);
@@ -590,7 +590,7 @@ public void addListener (int eventType, Listener listener) {
 	eventTable.hook (eventType, listener);
 }
 
-int /*long*/ allChildrenProc (int /*long*/ widget, int /*long*/ recurse) {
+long /*int*/ allChildrenProc (long /*int*/ widget, long /*int*/ recurse) {
 	allChildren = OS.g_list_append (allChildren, widget);
 	if (recurse != 0 && OS.GTK_IS_CONTAINER (widget)) {
 		OS.gtk_container_forall (widget, allChildrenProc, recurse);
@@ -598,7 +598,7 @@ int /*long*/ allChildrenProc (int /*long*/ widget, int /*long*/ recurse) {
 	return 0;
 }
 
-void addMouseHoverTimeout (int /*long*/ handle) {
+void addMouseHoverTimeout (long /*int*/ handle) {
 	if (mouseHoverId != 0) OS.gtk_timeout_remove (mouseHoverId);
 	mouseHoverId = OS.gtk_timeout_add (400, mouseHoverProc, handle);
 	mouseHoverHandle = handle;
@@ -623,7 +623,7 @@ void addPopup (Menu menu) {
 	popups [index] = menu;
 }
 
-void addWidget (int /*long*/ handle, Widget widget) {
+void addWidget (long /*int*/ handle, Widget widget) {
 	if (handle == 0) return;
 	if (freeSlot == -1) {
 		int length = (freeSlot = indexTable.length) + GROW_SIZE;
@@ -696,12 +696,12 @@ public void beep () {
 	if (!OS.GDK_WINDOWING_X11 ()) {
 		OS.gdk_flush ();
 	} else {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 		OS.XFlush (xDisplay);
 	}
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	Widget widget = getWidget (data);
 	if (widget == null) return 0;
 	return widget.cellDataProc (tree_column, cell, tree_model, iter, data);
@@ -724,7 +724,7 @@ static void checkDisplay (Thread thread, boolean multiple) {
 	}
 }
 
-int /*long*/ checkIfEventProc (int /*long*/ display, int /*long*/ xEvent, int /*long*/ userData) {
+long /*int*/ checkIfEventProc (long /*int*/ display, long /*int*/ xEvent, long /*int*/ userData) {
 	int type = OS.X_EVENT_TYPE (xEvent);
 	switch (type) {
 		case OS.VisibilityNotify:
@@ -734,11 +734,11 @@ int /*long*/ checkIfEventProc (int /*long*/ display, int /*long*/ xEvent, int /*
 		default:
 			return 0;
 	}
-	int /*long*/ window = OS.gdk_window_lookup (OS.X_EVENT_WINDOW (xEvent));
+	long /*int*/ window = OS.gdk_window_lookup (OS.X_EVENT_WINDOW (xEvent));
 	if (window == 0) return 0;
 	if (flushWindow != 0) {
 		if (flushAll) {
-			int /*long*/ tempWindow = window;
+			long /*int*/ tempWindow = window;
 			do {
 				if (tempWindow == flushWindow) break;
 			} while ((tempWindow = OS.gdk_window_get_parent (tempWindow)) != 0);
@@ -763,7 +763,7 @@ int /*long*/ checkIfEventProc (int /*long*/ display, int /*long*/ xEvent, int /*
 		case OS.VisibilityNotify: {
 			OS.memmove (visibilityEvent, xEvent, XVisibilityEvent.sizeof);
 			OS.gdk_window_get_user_data (window, flushData);
-			int /*long*/ handle = flushData [0];
+			long /*int*/ handle = flushData [0];
 			Widget widget = handle != 0 ? getWidget (handle) : null;
 			if (widget != null && widget instanceof Control) {
 				Control control = (Control) widget;
@@ -859,11 +859,11 @@ void createDisplay (DeviceData data) {
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]"); //$NON-NLS-1$
 	}
 	if (OS.GDK_WINDOWING_X11 ()) xDisplay = OS.GDK_DISPLAY ();
-	int /*long*/ ptr = OS.gtk_check_version (MAJOR, MINOR, MICRO);
+	long /*int*/ ptr = OS.gtk_check_version (MAJOR, MINOR, MICRO);
 	if (ptr != 0) {
 		int length = OS.strlen (ptr);
 		byte [] buffer = new byte [length];
@@ -963,9 +963,9 @@ void createDisplay (DeviceData data) {
 }
 
 Image createImage (String name) {
-	int /*long*/ style = OS.gtk_widget_get_default_style ();
+	long /*int*/ style = OS.gtk_widget_get_default_style ();
 	byte[] buffer = Converter.wcsToMbcs (null, name, true);
-	int /*long*/ pixbuf = OS.gtk_icon_set_render_icon (
+	long /*int*/ pixbuf = OS.gtk_icon_set_render_icon (
 		OS.gtk_icon_factory_lookup_default (buffer), style,
 		OS.GTK_TEXT_DIR_NONE, OS.GTK_STATE_NORMAL, OS.GTK_ICON_SIZE_DIALOG, 0, 0);
 	if (pixbuf == 0) return null;
@@ -973,7 +973,7 @@ Image createImage (String name) {
 	int height = OS.gdk_pixbuf_get_height (pixbuf);
 	int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
 	boolean hasAlpha = OS.gdk_pixbuf_get_has_alpha (pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 	byte [] data = new byte [stride * height];
 	OS.memmove (data, pixels, data.length);
 	OS.g_object_unref (pixbuf);
@@ -998,29 +998,29 @@ Image createImage (String name) {
 	return new Image (this, imageData);
 }
 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -1039,10 +1039,10 @@ static int /*long*/ createPixbuf(Image image) {
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
@@ -1081,7 +1081,7 @@ protected void destroy () {
 void destroyDisplay () {
 }
 
-int /*long*/ emissionProc (int /*long*/ ihint, int /*long*/ n_param_values, int /*long*/ param_values, int /*long*/ data) {
+long /*int*/ emissionProc (long /*int*/ ihint, long /*int*/ n_param_values, long /*int*/ param_values, long /*int*/ data) {
 	if (OS.gtk_widget_get_toplevel (OS.g_value_peek_pointer(param_values)) == data) {
 		OS.gtk_widget_set_direction (OS.g_value_peek_pointer(param_values), OS.GTK_TEXT_DIR_RTL);
 	}
@@ -1150,7 +1150,7 @@ void error (int code) {
 	SWT.error (code);
 }
 
-int /*long*/ eventProc (int /*long*/ event, int /*long*/ data) {
+long /*int*/ eventProc (long /*int*/ event, long /*int*/ data) {
 	/*
 	* Use gdk_event_get_time() rather than event.time or
 	* gtk_get_current_event_time().  If the event does not
@@ -1205,7 +1205,7 @@ int /*long*/ eventProc (int /*long*/ event, int /*long*/ data) {
  *    <li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
  * </ul>
  */
-public Widget findWidget (int /*long*/ handle) {
+public Widget findWidget (long /*int*/ handle) {
 	checkDevice ();
 	return getWidget (handle);
 }
@@ -1232,7 +1232,7 @@ public Widget findWidget (int /*long*/ handle) {
  * 
  * @since 3.1
  */
-public Widget findWidget (int /*long*/ handle, int /*long*/ id) {
+public Widget findWidget (long /*int*/ handle, long /*int*/ id) {
 	checkDevice ();
 	return null;
 }
@@ -1254,12 +1254,12 @@ public Widget findWidget (int /*long*/ handle, int /*long*/ id) {
  * 
  * @since 3.3
  */
-public Widget findWidget (Widget widget, int /*long*/ id) {
+public Widget findWidget (Widget widget, long /*int*/ id) {
 	checkDevice ();
 	return null;
 }
 
-static int /*long*/ fixedClassInitProc (int /*long*/ g_class, int /*long*/ class_data) {
+static long /*int*/ fixedClassInitProc (long /*int*/ g_class, long /*int*/ class_data) {
 	GtkWidgetClass klass = new GtkWidgetClass ();
 	OS.memmove (klass, g_class);
 	klass.map = fixedMapProc;
@@ -1269,21 +1269,21 @@ static int /*long*/ fixedClassInitProc (int /*long*/ g_class, int /*long*/ class
 	return 0;
 }
 
-static int /*long*/ fixedMapProc (int /*long*/ handle) {
+static long /*int*/ fixedMapProc (long /*int*/ handle) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.fixedMapProc (handle);
 	return 0;
 }
 
-static int /*long*/ fixedSizeAllocateProc (int /*long*/ handle, int /*long*/ allocation) {
+static long /*int*/ fixedSizeAllocateProc (long /*int*/ handle, long /*int*/ allocation) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.fixedSizeAllocateProc (handle, allocation);
 	return OS.Call (oldFixedSizeAllocateProc, handle, allocation);
 }
 
-static int /*long*/ rendererClassInitProc (int /*long*/ g_class, int /*long*/ class_data) {
+static long /*int*/ rendererClassInitProc (long /*int*/ g_class, long /*int*/ class_data) {
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
 	klass.render = rendererRenderProc;
@@ -1292,28 +1292,28 @@ static int /*long*/ rendererClassInitProc (int /*long*/ g_class, int /*long*/ cl
 	return 0;
 }
 
-static int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ handle, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
+static long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ handle, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.rendererGetSizeProc (cell, handle, cell_area, x_offset, y_offset, width, height);
 	return 0;
 }
 
-static int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ handle, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+static long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ handle, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.rendererRenderProc (cell, window, handle, background_area, cell_area, expose_area, flags);
 	return 0;
 }
 
-void flushExposes (int /*long*/ window, boolean all) {
+void flushExposes (long /*int*/ window, boolean all) {
 	OS.gdk_flush ();
 	OS.gdk_flush ();
 	if (OS.GDK_WINDOWING_X11 ()) {
 		this.flushWindow = window;
 		this.flushAll = all;
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-		int /*long*/ xEvent = OS.g_malloc (XEvent.sizeof);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xEvent = OS.g_malloc (XEvent.sizeof);
 		OS.XCheckIfEvent (xDisplay, xEvent, checkIfEventProc, 0);
 		OS.g_free (xEvent);
 		this.flushWindow = 0;
@@ -1366,7 +1366,7 @@ public static Display getCurrent () {
 
 int getCaretBlinkTime () {
 //	checkDevice ();
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	if (settings == 0) return 500;
 	int [] buffer = new int [1];
 	OS.g_object_get (settings, OS.gtk_cursor_blink, buffer, 0);
@@ -1396,9 +1396,9 @@ int getCaretBlinkTime () {
 public Control getCursorControl () {
 	checkDevice();
 	int[] x = new int[1], y = new int[1];
-	int /*long*/ handle = 0;
-	int /*long*/ [] user_data = new int /*long*/ [1];
-	int /*long*/ window = OS.gdk_window_at_pointer (x,y);
+	long /*int*/ handle = 0;
+	long /*int*/ [] user_data = new long /*int*/ [1];
+	long /*int*/ window = OS.gdk_window_at_pointer (x,y);
 	if (window != 0) {
 		OS.gdk_window_get_user_data (window, user_data);
 		handle = user_data [0];
@@ -1411,8 +1411,8 @@ public Control getCursorControl () {
 		if (!OS.GDK_WINDOWING_X11 ()) return null;
 		OS.gdk_error_trap_push ();
 		int[] unusedInt = new int[1];
-		int /*long*/[] unusedPtr = new int /*long*/[1], buffer = new int /*long*/[1];
-		int /*long*/ xWindow, xParent = OS.XDefaultRootWindow (xDisplay);
+		long /*int*/[] unusedPtr = new long /*int*/[1], buffer = new long /*int*/[1];
+		long /*int*/ xWindow, xParent = OS.XDefaultRootWindow (xDisplay);
 		do {
 			if (OS.XQueryPointer (xDisplay, xParent, unusedPtr, buffer, unusedInt, unusedInt, unusedInt, unusedInt, unusedInt) == 0) {
 				handle = 0;
@@ -1420,7 +1420,7 @@ public Control getCursorControl () {
 			}
 			if ((xWindow = buffer [0]) != 0) {
 				xParent = xWindow;
-				int /*long*/ gdkWindow = OS.gdk_window_lookup (xWindow);
+				long /*int*/ gdkWindow = OS.gdk_window_lookup (xWindow);
 				if (gdkWindow != 0)	{
 					OS.gdk_window_get_user_data (gdkWindow, user_data);
 					if (user_data[0] != 0) handle = user_data[0];	
@@ -1440,15 +1440,15 @@ public Control getCursorControl () {
 	return null;
 }
 
-static GtkBorder getEntryInnerBorder (int /*long*/ handle) {
+static GtkBorder getEntryInnerBorder (long /*int*/ handle) {
     GtkBorder gtkBorder = new GtkBorder();
     if (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {
-	    int /*long*/ border = OS.gtk_entry_get_inner_border (handle);
+	    long /*int*/ border = OS.gtk_entry_get_inner_border (handle);
 	    if (border != 0) {
 	    	OS.memmove (gtkBorder, border, GtkBorder.sizeof);
 	    	return gtkBorder;
 	    }
-	    int /*long*/ []  borderPtr = new int /*long*/ [1];
+	    long /*int*/ []  borderPtr = new long /*int*/ [1];
 	    OS.gtk_widget_style_get (handle, OS.inner_border, borderPtr,0);
 	    if (borderPtr[0] != 0) {
 	        OS.memmove (gtkBorder, borderPtr[0], GtkBorder.sizeof);
@@ -1473,7 +1473,7 @@ boolean filters (int eventType) {
 	return filterTable.hooks (eventType);
 }
 
-int /*long*/ filterProc (int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data) {
+long /*int*/ filterProc (long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data) {
 	if (data == 0) {
 		/*
 		* Feature in GTK.  When button 4, 5, 6, or 7 is released, GTK
@@ -1630,19 +1630,19 @@ public Point getDPI () {
 	return new Point (dpi, dpi);
 }
 
-int /*long*/ gtk_fixed_get_type () {
+long /*int*/ gtk_fixed_get_type () {
 	return fixed_type;
 }
 
-int /*long*/ gtk_cell_renderer_text_get_type () {
+long /*int*/ gtk_cell_renderer_text_get_type () {
 	return text_renderer_type;
 }
 
-int /*long*/ gtk_cell_renderer_pixbuf_get_type () {
+long /*int*/ gtk_cell_renderer_pixbuf_get_type () {
 	return pixbuf_renderer_type;
 }
 
-int /*long*/ gtk_cell_renderer_toggle_get_type () {
+long /*int*/ gtk_cell_renderer_toggle_get_type () {
 	return toggle_renderer_type;
 }
 
@@ -1687,7 +1687,7 @@ public int getDismissalAlignment () {
 	checkDevice ();
 	int [] buffer = new int [1];
 	if (OS.GTK_VERSION >= OS.VERSION (2, 6, 0)) {
-		int /*long*/ settings = OS.gtk_settings_get_default ();
+		long /*int*/ settings = OS.gtk_settings_get_default ();
 		OS.g_object_get (settings, OS.gtk_alternative_button_order, buffer, 0);
 	}
 	return buffer [0] == 1 ? SWT.LEFT : SWT.RIGHT;
@@ -1707,7 +1707,7 @@ public int getDismissalAlignment () {
  */
 public int getDoubleClickTime () {
 	checkDevice ();
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	int [] buffer = new int [1];
 	OS.g_object_get (settings, OS.gtk_double_click_time, buffer, 0);
 	return buffer [0];
@@ -1732,8 +1732,8 @@ public Control getFocusControl () {
 		return focusControl;
 	}
 	if (activeShell == null) return null;
-	int /*long*/ shellHandle = activeShell.shellHandle;
-	int /*long*/ handle = OS.gtk_window_get_focus (shellHandle);
+	long /*int*/ shellHandle = activeShell.shellHandle;
+	long /*int*/ handle = OS.gtk_window_get_focus (shellHandle);
 	if (handle == 0) return null;
 	do {
 		Widget widget = getWidget (handle);
@@ -1830,12 +1830,12 @@ Dialog getModalDialog () {
  */
 Rectangle getWorkArea() {
 	byte[] name = Converter.wcsToMbcs (null, "_NET_WORKAREA", true); //$NON-NLS-1$
-	int /*long*/ atom = OS.gdk_atom_intern (name, true);
+	long /*int*/ atom = OS.gdk_atom_intern (name, true);
 	if (atom == OS.GDK_NONE) return null;
-	int /*long*/[] actualType = new int /*long*/[1];
+	long /*int*/[] actualType = new long /*int*/[1];
 	int[] actualFormat = new int[1];
 	int[] actualLength = new int[1];
-	int /*long*/[] data = new int /*long*/[1];
+	long /*int*/[] data = new long /*int*/[1];
 	if (!OS.gdk_property_get (OS.GDK_ROOT_PARENT (), atom, OS.GDK_NONE, 0, 16, 0, actualType, actualFormat, actualLength, data)) {
 		return null;
 	}
@@ -1866,7 +1866,7 @@ public Monitor [] getMonitors () {
 	checkDevice ();
 	Monitor [] monitors = null;
 	Rectangle workArea = getWorkArea();
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorCount = OS.gdk_screen_get_n_monitors (screen);
 		if (monitorCount > 0) {
@@ -2168,12 +2168,12 @@ void initializeSystemColors () {
 	GdkColor gdkColor;
 	
 	/* Get Tooltip resources */
-	int /*long*/ tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);
+	long /*int*/ tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);
 	if (tooltipShellHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	byte[] gtk_tooltips = Converter.wcsToMbcs (null, "gtk-tooltips", true); //$NON-NLS-1$
 	OS.gtk_widget_set_name (tooltipShellHandle, gtk_tooltips);
 	OS.gtk_widget_realize (tooltipShellHandle);
-	int /*long*/ tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);
+	long /*int*/ tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);
 	gdkColor = new GdkColor();
 	OS.gtk_style_get_fg (tooltipStyle, OS.GTK_STATE_NORMAL, gdkColor);
 	COLOR_INFO_FOREGROUND = gdkColor;
@@ -2183,7 +2183,7 @@ void initializeSystemColors () {
 	OS.gtk_widget_destroy (tooltipShellHandle);	
 
 	/* Get Shell resources */
-	int /*long*/ style = OS.gtk_widget_get_style (shellHandle);	
+	long /*int*/ style = OS.gtk_widget_get_style (shellHandle);	
 	gdkColor = new GdkColor();
 	OS.gtk_style_get_black (style, gdkColor);
 	COLOR_WIDGET_DARK_SHADOW = gdkColor;
@@ -2264,8 +2264,8 @@ void initializeSystemColors () {
 public Font getSystemFont () {
 	checkDevice ();
 	if (systemFont != null) return systemFont;
-	int /*long*/ style = OS.gtk_widget_get_style (shellHandle);	
-	int /*long*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
+	long /*int*/ style = OS.gtk_widget_get_style (shellHandle);	
+	long /*int*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
 	return systemFont = Font.gtk_new (this, defaultFont);
 }
 
@@ -2303,10 +2303,10 @@ public Thread getThread () {
 	}
 }
 
-Widget getWidget (int /*long*/ handle) {
+Widget getWidget (long /*int*/ handle) {
 	if (handle == 0) return null;
 	if (lastWidget != null && lastHandle == handle) return lastWidget;
-	int /*long*/ index = OS.g_object_get_qdata (handle, SWT_OBJECT_INDEX) - 1;
+	long /*int*/ index = OS.g_object_get_qdata (handle, SWT_OBJECT_INDEX) - 1;
 	if (0 <= index && index < widgetTable.length) {
 		lastHandle = handle;
 		return lastWidget = widgetTable [(int)/*64*/index];
@@ -2314,7 +2314,7 @@ Widget getWidget (int /*long*/ handle) {
 	return null;	
 }
 
-int /*long*/ idleProc (int /*long*/ data) {
+long /*int*/ idleProc (long /*int*/ data) {
 	boolean result = runAsyncMessages (false);
 	if (!result) {
 		synchronized (idleLock) {
@@ -2344,7 +2344,7 @@ protected void init () {
 }
 
 void initializeCallbacks () {
-	closures = new int /*long*/ [Widget.LAST_SIGNAL];
+	closures = new long /*int*/ [Widget.LAST_SIGNAL];
 	signalIds = new int [Widget.LAST_SIGNAL];
 
 	/* Cache signals for GtkWidget */
@@ -2540,8 +2540,8 @@ void initializeSubclasses () {
 		pangoLayoutNewCallback = new Callback (this, "pangoLayoutNewProc", 3); //$NON-NLS-1$
 		pangoLayoutNewProc = pangoLayoutNewCallback.getAddress ();
 		if (pangoLayoutNewProc == 0) error (SWT.ERROR_NO_MORE_CALLBACKS);
-		int /*long*/ pangoLayoutType = OS.PANGO_TYPE_LAYOUT ();
-		int /*long*/ pangoLayoutClass = OS.g_type_class_ref (pangoLayoutType);
+		long /*int*/ pangoLayoutType = OS.PANGO_TYPE_LAYOUT ();
+		long /*int*/ pangoLayoutClass = OS.g_type_class_ref (pangoLayoutType);
 		pangoLayoutNewDefaultProc = OS.G_OBJECT_CLASS_CONSTRUCTOR (pangoLayoutClass);
 		OS.G_OBJECT_CLASS_SET_CONSTRUCTOR (pangoLayoutClass, pangoLayoutNewProc);
 		OS.g_type_class_unref (pangoLayoutClass);
@@ -2563,10 +2563,10 @@ void initializeSystemSettings () {
 	* fix is to for the initializaion by creating
 	* a temporary GtkEntry.
 	*/
-	int /*long*/ entry = OS.gtk_entry_new ();
+	long /*int*/ entry = OS.gtk_entry_new ();
 	OS.gtk_widget_destroy (entry);
 	int [] buffer2 = new int [1];
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	OS.g_object_get (settings, OS.gtk_entry_select_on_focus, buffer2, 0);
 	entrySelectOnFocus = buffer2 [0] != 0;
 }
@@ -2582,9 +2582,9 @@ void initializeWindowManager () {
 	/* Get the window manager name */
 	windowManager = ""; //$NON-NLS-1$
 	if (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {
-		int /*long*/ screen = OS.gdk_screen_get_default ();
+		long /*int*/ screen = OS.gdk_screen_get_default ();
 		if (screen != 0) {
-			int /*long*/ ptr2 = OS.gdk_x11_screen_get_window_manager_name (screen);
+			long /*int*/ ptr2 = OS.gdk_x11_screen_get_window_manager_name (screen);
 			if (ptr2 != 0) {
 				int length = OS.strlen (ptr2);
 				if (length > 0) {
@@ -2610,7 +2610,7 @@ void initializeWindowManager () {
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	OS.g_object_unref (gdkGC);
 }
 
@@ -2634,10 +2634,10 @@ public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
  *    <li>ERROR_NO_HANDLES if a handle could not be obtained for gc creation</li>
  * </ul>
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	if (isDisposed()) SWT.error(SWT.ERROR_DEVICE_DISPOSED);
-	int /*long*/ root = OS.GDK_ROOT_PARENT ();
-	int /*long*/ gdkGC = OS.gdk_gc_new (root);
+	long /*int*/ root = OS.GDK_ROOT_PARENT ();
+	long /*int*/ gdkGC = OS.gdk_gc_new (root);
 	if (gdkGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	OS.gdk_gc_set_subwindow (gdkGC, OS.GDK_INCLUDE_INFERIORS);
 	if (data != null) {
@@ -2743,7 +2743,7 @@ public Point map (Control from, Control to, int x, int y) {
 	Point point = new Point (x, y);
 	if (from == to) return point;
 	if (from != null) {
-		int /*long*/ window = from.eventWindow ();
+		long /*int*/ window = from.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		if ((from.style & SWT.MIRRORED) != 0) point.x = from.getClientWidth () - point.x;
@@ -2751,7 +2751,7 @@ public Point map (Control from, Control to, int x, int y) {
 		point.y += origin_y [0];
 	}
 	if (to != null) {
-		int /*long*/ window = to.eventWindow ();
+		long /*int*/ window = to.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		point.x -= origin_x [0];
@@ -2820,7 +2820,7 @@ static char mbcsToWcs (char ch) {
 	return result [0];
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	Widget widget = getWidget (menu);
 	if (widget == null) return 0;
 	return widget.menuPositionProc (menu, x, y, push_in, user_data);	
@@ -2872,7 +2872,7 @@ public Rectangle map (Control from, Control to, int x, int y, int width, int hei
 	if (from == to) return rect;
 	boolean fromRTL = false, toRTL = false;
 	if (from != null) {
-		int /*long*/ window = from.eventWindow ();
+		long /*int*/ window = from.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		if (fromRTL = (from.style & SWT.MIRRORED) != 0) rect.x = from.getClientWidth() - rect.x;
@@ -2880,7 +2880,7 @@ public Rectangle map (Control from, Control to, int x, int y, int width, int hei
 		rect.y += origin_y [0];
 	}
 	if (to != null) {
-		int /*long*/ window = to.eventWindow ();
+		long /*int*/ window = to.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		rect.x -= origin_x [0];
@@ -2891,14 +2891,14 @@ public Rectangle map (Control from, Control to, int x, int y, int width, int hei
 	return rect;
 }
 
-int /*long*/ mouseHoverProc (int /*long*/ handle) {
+long /*int*/ mouseHoverProc (long /*int*/ handle) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.hoverProc (handle);
 }
 
-int /*long*/ pangoLayoutNewProc (int /*long*/ type, int /*long*/ n_construct_properties, int /*long*/ construct_properties) {
-	int /*long*/ layout = OS.Call (pangoLayoutNewDefaultProc, type, (int)/*64*/n_construct_properties, construct_properties);
+long /*int*/ pangoLayoutNewProc (long /*int*/ type, long /*int*/ n_construct_properties, long /*int*/ construct_properties) {
+	long /*int*/ layout = OS.Call (pangoLayoutNewDefaultProc, type, (int)/*64*/n_construct_properties, construct_properties);
 	OS.pango_layout_set_auto_dir (layout, false);
 	return layout;
 }
@@ -2977,13 +2977,13 @@ public boolean post (Event event) {
 			if (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);
 			if (event == null) error (SWT.ERROR_NULL_ARGUMENT);
 			if (!OS.GDK_WINDOWING_X11()) return false;
-			int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+			long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 			int type = event.type;
 			switch (type) {
 				case SWT.KeyDown:
 				case SWT.KeyUp: {
 					int keyCode = 0;
-					int /*long*/ keysym = untranslateKey (event.keyCode);
+					long /*int*/ keysym = untranslateKey (event.keyCode);
 					if (keysym != 0) keyCode = OS.XKeysymToKeycode (xDisplay, keysym);
 					if (keyCode == 0) {
 						char key = event.character;
@@ -3065,7 +3065,7 @@ void postEvent (Event event) {
 void putGdkEvents () {
 	if (gdkEventCount != 0) {
 		for (int i = 0; i < gdkEventCount; i++) {
-			int /*long*/ event = gdkEvents [i];
+			long /*int*/ event = gdkEvents [i];
 			Widget widget = gdkEventWidgets [i];
 			if (widget == null || !widget.isDisposed ()) {
 				OS.gdk_event_put (event);
@@ -3318,8 +3318,8 @@ void releaseDisplay () {
 
 	/* Dispose subclass */
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
-		int /*long*/ pangoLayoutType = OS.PANGO_TYPE_LAYOUT ();
-		int /*long*/ pangoLayoutClass = OS.g_type_class_ref (pangoLayoutType);
+		long /*int*/ pangoLayoutType = OS.PANGO_TYPE_LAYOUT ();
+		long /*int*/ pangoLayoutClass = OS.g_type_class_ref (pangoLayoutType);
 		OS.G_OBJECT_CLASS_SET_CONSTRUCTOR (pangoLayoutClass, pangoLayoutNewDefaultProc);
 		OS.g_type_class_unref (pangoLayoutClass);
 		pangoLayoutNewCallback.dispose ();
@@ -3381,9 +3381,9 @@ public void removeFilter (int eventType, Listener listener) {
 	if (filterTable.size () == 0) filterTable = null;
 }
 
-int /*long*/ removeGdkEvent () {
+long /*int*/ removeGdkEvent () {
 	if (gdkEventCount == 0) return 0;
-	int /*long*/ event = gdkEvents [0];
+	long /*int*/ event = gdkEvents [0];
 	--gdkEventCount;
 	System.arraycopy (gdkEvents, 1, gdkEvents, 0, gdkEventCount);
 	System.arraycopy (gdkEventWidgets, 1, gdkEventWidgets, 0, gdkEventCount);
@@ -3432,7 +3432,7 @@ public void removeListener (int eventType, Listener listener) {
 	eventTable.unhook (eventType, listener);
 }
 
-void removeMouseHoverTimeout (int /*long*/ handle) {
+void removeMouseHoverTimeout (long /*int*/ handle) {
 	if (handle != mouseHoverHandle) return;
 	if (mouseHoverId != 0) OS.gtk_timeout_remove (mouseHoverId);
 	mouseHoverId = 0;
@@ -3449,7 +3449,7 @@ void removePopup (Menu menu) {
 	}
 }
 
-Widget removeWidget (int /*long*/ handle) {
+Widget removeWidget (long /*int*/ handle) {
 	if (handle == 0) return null;
 	lastWidget = null;
 	Widget widget = null;
@@ -3571,8 +3571,8 @@ public static void setAppName (String name) {
 public void setCursorLocation (int x, int y) {
 	checkDevice ();
 	if (OS.GDK_WINDOWING_X11 ()) {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-		int /*long*/ xWindow = OS.XDefaultRootWindow (xDisplay);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xWindow = OS.XDefaultRootWindow (xDisplay);
 		OS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, x, y);
 	}
 }
@@ -3640,7 +3640,7 @@ public void setData (String key, Object value) {
 	}
 	if (key.equals (ADD_WIDGET_KEY)) {
 		Object [] data = (Object []) value;
-		int /*long*/ handle = ((LONG) data [0]).value;
+		long /*int*/ handle = ((LONG) data [0]).value;
 		Widget widget = (Widget) data [1];
 		if (widget != null) {
 			addWidget (handle, widget);
@@ -3729,10 +3729,10 @@ public void setData (Object data) {
 	this.data = data;
 }
 
-int /*long*/ setDirectionProc (int /*long*/ widget, int /*long*/ direction) {
+long /*int*/ setDirectionProc (long /*int*/ widget, long /*int*/ direction) {
 	OS.gtk_widget_set_direction (widget, (int)/*64*/ direction);
 	if (OS.GTK_IS_MENU_ITEM (widget)) {
-		int /*long*/ submenu = OS.gtk_menu_item_get_submenu (widget);
+		long /*int*/ submenu = OS.gtk_menu_item_get_submenu (widget);
 		if (submenu != 0) {
 			OS.gtk_widget_set_direction (submenu, (int)/*64*/ direction);
 			OS.gtk_container_forall (submenu, setDirectionProc, direction);
@@ -3807,9 +3807,9 @@ void showIMWindow (Control control) {
 		OS.gtk_container_add (preeditWindow, preeditLabel);
 		OS.gtk_widget_show (preeditLabel);
 	}
-	int /*long*/ [] preeditString = new int /*long*/ [1];
-	int /*long*/ [] pangoAttrs = new int /*long*/ [1];
-	int /*long*/ imHandle = control.imHandle ();
+	long /*int*/ [] preeditString = new long /*int*/ [1];
+	long /*int*/ [] pangoAttrs = new long /*int*/ [1];
+	long /*int*/ imHandle = control.imHandle ();
 	OS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, null);
 	if (preeditString [0] != 0 && OS.strlen (preeditString [0]) > 0) {
 		Control widget = control.findBackgroundControl ();
@@ -3863,7 +3863,7 @@ public boolean sleep () {
 		fds = OS.g_malloc (OS.GPollFD_sizeof () * allocated_nfds);
 	}
 	max_priority [0] = timeout [0] = 0;
-	int /*long*/ context = OS.g_main_context_default ();
+	long /*int*/ context = OS.g_main_context_default ();
 	boolean result = false;
 	do {
 		if (OS.g_main_context_acquire (context)) {
@@ -3874,7 +3874,7 @@ public boolean sleep () {
 				allocated_nfds = nfds;
 				fds = OS.g_malloc (OS.GPollFD_sizeof() * allocated_nfds);
 			}
-			int /*long*/ poll = OS.g_main_context_get_poll_func (context);
+			long /*int*/ poll = OS.g_main_context_get_poll_func (context);
 			if (poll != 0) {
 				if (nfds > 0 || timeout [0] != 0) {
 					/*
@@ -3968,7 +3968,7 @@ public void timerExec (int milliseconds, Runnable runnable) {
 	}
 }
 
-int /*long*/ timerProc (int /*long*/ i) {
+long /*int*/ timerProc (long /*int*/ i) {
 	if (timerList == null) return 0;
 	int index = (int)/*64*/i;
 	if (0 <= index && index < timerList.length) {
@@ -3980,7 +3980,7 @@ int /*long*/ timerProc (int /*long*/ i) {
 	return 0;
 }
 
-int /*long*/ caretProc (int /*long*/ clientData) {
+long /*int*/ caretProc (long /*int*/ clientData) {
 	caretId = 0;
 	if (currentCaret == null) {
 		return 0;
@@ -3995,19 +3995,19 @@ int /*long*/ caretProc (int /*long*/ clientData) {
 	return 0;
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (user_data);
 	if (widget == null) return 0;
 	return widget.sizeAllocateProc (handle, arg0, user_data);
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (user_data);
 	if (widget == null) return 0;
 	return widget.sizeRequestProc (handle, arg0, user_data);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, long /*int*/ data) {
 	Widget widget = getWidget (data);
 	if (widget == null) return 0;
 	return widget.treeSelectionProc (model, path, iter, treeSelection, treeSelectionLength++);
@@ -4065,13 +4065,13 @@ void setCurrentCaret (Caret caret) {
 	caretId = OS.gtk_timeout_add (blinkRate, caretProc, 0); 
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.shellMapProc (handle, arg0, user_data);
 }
 
-int /*long*/ styleSetProc (int /*long*/ gobject, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ styleSetProc (long /*int*/ gobject, long /*int*/ arg1, long /*int*/ user_data) {
 	settingsChanged = true;
 	return 0;
 }
@@ -4179,31 +4179,31 @@ static char wcsToMbcs (char ch) {
 	return 0;
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, arg1, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, arg1, arg2, user_data);
 }
 
-int /*long*/ windowTimerProc (int /*long*/ handle) {
+long /*int*/ windowTimerProc (long /*int*/ handle) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.timerProc (handle);
diff --git a/org/eclipse/swt/widgets/ExpandBar.java b/org/eclipse/swt/widgets/ExpandBar.java
index b3584f8..3ae57b2 100644
--- a/org/eclipse/swt/widgets/ExpandBar.java
+++ b/org/eclipse/swt/widgets/ExpandBar.java
@@ -160,14 +160,14 @@ void createHandle (int index) {
 			OS.gtk_scrolled_window_set_policy (scrolledHandle, OS.GTK_POLICY_NEVER, OS.GTK_POLICY_AUTOMATIC);
 			OS.gtk_container_add (fixedHandle, scrolledHandle);
 			OS.gtk_scrolled_window_add_with_viewport (scrolledHandle, handle);
-			int /*long*/ viewport = OS.gtk_bin_get_child (scrolledHandle);
+			long /*int*/ viewport = OS.gtk_bin_get_child (scrolledHandle);
 			OS.gtk_viewport_set_shadow_type (viewport, OS.GTK_SHADOW_NONE);
 		} else {
 			OS.gtk_container_add (fixedHandle, handle);
 		}
 		OS.gtk_container_set_border_width (handle, 0);
 	} else {
-		int /*long*/ topHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
+		long /*int*/ topHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 		if (topHandle == 0) error (SWT.ERROR_NO_HANDLES);
 		OS.gtk_fixed_set_has_window (topHandle, true);
 		if ((style & SWT.V_SCROLL) != 0) {
@@ -241,11 +241,11 @@ void destroyItem (ExpandItem item) {
 	layoutItems (index, true);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return OS.GTK_VERSION >= OS.VERSION (2, 4, 0) ? fixedHandle : handle;
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null && lastFocus.setFocus ()) return true;
 		for (int i = 0; i < itemCount; i++) {
@@ -366,7 +366,7 @@ public int getSpacing () {
 	return spacing;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -387,7 +387,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) {
 			GdkEventButton gdkEvent = new GdkEventButton ();
@@ -407,7 +407,7 @@ int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event)
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		GdkEventExpose gdkEvent = new GdkEventExpose ();
 		OS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);
@@ -425,24 +425,24 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return super.gtk_expose_event (widget, eventPtr);
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) lastFocus.redraw ();
 	}
 	return super.gtk_focus_in_event(widget, event);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) lastFocus.redraw ();
 	}
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (!hasFocus ()) return 0;
-		int /*long*/ result = super.gtk_key_press_event (widget, event);
+		long /*int*/ result = super.gtk_key_press_event (widget, event);
 		if (result != 0) return result;
 		int index = 0;
 		while (index < itemCount) {
@@ -556,13 +556,13 @@ void layoutItems (int index, boolean setScrollbar) {
 	}
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
-	int /*long*/ result = super.gtk_size_allocate (widget, allocation);
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
+	long /*int*/ result = super.gtk_size_allocate (widget, allocation);
 	layoutItems (0, false);
 	return result;
 }
 
-int /*long*/ parentingHandle () {
+long /*int*/ parentingHandle () {
 	return OS.GTK_VERSION >= OS.VERSION (2, 4, 0) ? fixedHandle : handle;
 }
 
@@ -621,7 +621,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		for (int i = 0; i < itemCount; i++) {
@@ -647,7 +647,7 @@ void setScrollbar () {
 	ExpandItem item = items [itemCount - 1];
 	int maxHeight = item.y + getBandHeight () + spacing;
 	if (item.expanded) maxHeight += item.height;
-	int /*long*/ adjustmentHandle = OS.gtk_scrolled_window_get_vadjustment (scrolledHandle);
+	long /*int*/ adjustmentHandle = OS.gtk_scrolled_window_get_vadjustment (scrolledHandle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, adjustmentHandle);
 	yCurrentScroll = (int)adjustment.value;
@@ -667,7 +667,7 @@ void setScrollbar () {
 	OS.gtk_scrolled_window_set_policy (scrolledHandle, OS.GTK_POLICY_NEVER, policy);
 	int width = OS.GTK_WIDGET_WIDTH (fixedHandle) - spacing * 2;
 	if (policy == OS.GTK_POLICY_ALWAYS) {
-		int /*long*/ vHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);
+		long /*int*/ vHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);
 		GtkRequisition requisition = new GtkRequisition ();
 		OS.gtk_widget_size_request (vHandle, requisition);
 		width -= requisition.width;
diff --git a/org/eclipse/swt/widgets/ExpandItem.java b/org/eclipse/swt/widgets/ExpandItem.java
index e141b60..39b8013 100644
--- a/org/eclipse/swt/widgets/ExpandItem.java
+++ b/org/eclipse/swt/widgets/ExpandItem.java
@@ -39,7 +39,7 @@ public class ExpandItem extends Item {
 	ExpandBar parent;
 	Control control;
 	ImageList imageList;
-	int /*long*/ clientHandle, boxHandle, labelHandle, imageHandle;
+	long /*int*/ clientHandle, boxHandle, labelHandle, imageHandle;
 	boolean expanded;
 	int x, y, width, height;
 	int imageHeight, imageWidth;
@@ -316,7 +316,7 @@ int getPreferredWidth (GC gc) {
 	return width;
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	Event event = new Event ();
 	event.item = this;
 	int type = OS.gtk_expander_get_expanded (handle) ? SWT.Collapse : SWT.Expand;
@@ -324,23 +324,23 @@ int /*long*/ gtk_activate (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	setFocus ();
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 	parent.lastFocus = this;
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	parent.layoutItems (0, false);
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event(widget, event);
 	return 0;
 }
@@ -518,7 +518,7 @@ boolean setFocus () {
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -563,7 +563,7 @@ public void setImage (Image image) {
 			if (image.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 			imageList = new ImageList ();
 			int imageIndex = imageList.add (image);
-			int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+			long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 			OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 			if (text.length () == 0) OS.gtk_widget_hide (labelHandle);
 			OS.gtk_widget_show (imageHandle);
@@ -618,7 +618,7 @@ void showWidget (int index) {
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case ACTIVATE_INVERSE: {
 			expanded = OS.gtk_expander_get_expanded (handle);
diff --git a/org/eclipse/swt/widgets/FileDialog.java b/org/eclipse/swt/widgets/FileDialog.java
index 6cbca21..3c71ef8 100644
--- a/org/eclipse/swt/widgets/FileDialog.java
+++ b/org/eclipse/swt/widgets/FileDialog.java
@@ -46,7 +46,7 @@ public class FileDialog extends Dialog {
 	int filterIndex = -1;
 	boolean overwrite = false;
 	boolean uriMode;
-	int /*long*/ handle;
+	long /*int*/ handle;
 	static final char SEPARATOR = System.getProperty ("file.separator").charAt (0);
 	static final char EXTENSION_SEPARATOR = ';';
 	
@@ -102,7 +102,7 @@ String computeResultChooserDialog () {
 	/* MULTI is only valid if the native dialog's action is Open */
 	fullPath = null;
 	if ((style & (SWT.SAVE | SWT.MULTI)) == SWT.MULTI) {
-		int /*long*/ list = 0;
+		long /*int*/ list = 0;
 		if (uriMode) {
 			list = OS.gtk_file_chooser_get_uris (handle);
 		} else {
@@ -110,11 +110,11 @@ String computeResultChooserDialog () {
 		}
 		int listLength = OS.g_slist_length (list);
 		fileNames = new String [listLength];
-		int /*long*/ current = list;
+		long /*int*/ current = list;
 		int writePos = 0;
 		for (int i = 0; i < listLength; i++) {
-			int /*long*/ name = OS.g_slist_data (current);
-			int /*long*/ utf8Ptr = 0;
+			long /*int*/ name = OS.g_slist_data (current);
+			long /*int*/ utf8Ptr = 0;
 			if (uriMode) {
 				utf8Ptr = name;
 			} else {
@@ -122,8 +122,8 @@ String computeResultChooserDialog () {
 				OS.g_free (name);
 			}
 			if (utf8Ptr != 0) {
-				int /*long*/ [] items_written = new int /*long*/ [1];
-				int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+				long /*int*/ [] items_written = new long /*int*/ [1];
+				long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 				OS.g_free (utf8Ptr);
 				if (utf16Ptr != 0) {
 					int clength = (int)/*64*/items_written [0];
@@ -143,19 +143,19 @@ String computeResultChooserDialog () {
 		}
 		OS.g_slist_free (list);
 	} else {
-		int /*long*/ utf8Ptr = 0;
+		long /*int*/ utf8Ptr = 0;
 		if (uriMode) {
 			utf8Ptr = OS.gtk_file_chooser_get_uri (handle);
 		} else {
-			int /*long*/ path = OS.gtk_file_chooser_get_filename (handle);
+			long /*int*/ path = OS.gtk_file_chooser_get_filename (handle);
 			if (path != 0) {
 				utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
 				OS.g_free (path);
 			}
 		}
 		if (utf8Ptr != 0) {
-			int /*long*/ [] items_written = new int /*long*/ [1];
-			int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+			long /*int*/ [] items_written = new long /*int*/ [1];
+			long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 			OS.g_free (utf8Ptr);
 			if (utf16Ptr != 0) {
 				int clength = (int)/*64*/items_written [0];
@@ -169,9 +169,9 @@ String computeResultChooserDialog () {
 		}
 	}
 	filterIndex = -1;
-	int /*long*/ filter = OS.gtk_file_chooser_get_filter (handle);
+	long /*int*/ filter = OS.gtk_file_chooser_get_filter (handle);
 	if (filter != 0) {
-		int /*long*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);
+		long /*int*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);
 		if (filterNamePtr != 0) {
 			int length = OS.strlen (filterNamePtr);
 			byte[] buffer = new byte [length];
@@ -204,23 +204,23 @@ String computeResultClassicDialog () {
 	filterIndex = -1;
 	GtkFileSelection selection = new GtkFileSelection ();
 	OS.memmove (selection, handle);
-	int /*long*/ entry = selection.selection_entry;
-	int /*long*/ entryText = OS.gtk_entry_get_text (entry);
+	long /*int*/ entry = selection.selection_entry;
+	long /*int*/ entryText = OS.gtk_entry_get_text (entry);
 	int entryLength = OS.strlen (entryText);
 	if (entryLength == 0) {
-		int /*long*/ fileList = selection.file_list;
-		int /*long*/ listSelection = OS.gtk_tree_view_get_selection (fileList);
-		int /*long*/[] model = new int /*long*/[1];
-		int /*long*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);
+		long /*int*/ fileList = selection.file_list;
+		long /*int*/ listSelection = OS.gtk_tree_view_get_selection (fileList);
+		long /*int*/[] model = new long /*int*/[1];
+		long /*int*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);
 		if (selectedList == 0) return null;
 		int listLength = OS.g_list_length (selectedList);
 		if (listLength == 0) {
 			OS.g_list_free (selectedList);
 			return null;
 		}
-		int /*long*/ path = OS.g_list_nth_data (selectedList, 0);
-		int /*long*/ [] ptr = new int /*long*/[1];
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ path = OS.g_list_nth_data (selectedList, 0);
+		long /*int*/ [] ptr = new long /*int*/[1];
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter (model [0], iter, path)) {
 			OS.gtk_tree_model_get (model [0], iter, 0, ptr, -1);
 		}
@@ -237,10 +237,10 @@ String computeResultClassicDialog () {
 		OS.gtk_entry_set_text (entry, buffer);
 	}
 
-	int /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
-	int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
-	int /*long*/ [] items_written = new int /*long*/ [1];
-	int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+	long /*int*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
+	long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
+	long /*int*/ [] items_written = new long /*int*/ [1];
+	long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 	entryLength = (int)/*64*/items_written [0];
 	char [] buffer = new char [entryLength];
 	OS.memmove (buffer, utf16Ptr, entryLength * 2);
@@ -258,9 +258,9 @@ String computeResultClassicDialog () {
 	if ((style & SWT.MULTI) == 0) {
 		fileNames = new String[] {fileName};
 	} else {
-		int /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);
-		int /*long*/ namesPtr1 = namesPtr;
-		int /*long*/ [] namePtr = new int /*long*/ [1];
+		long /*int*/ namesPtr = OS.gtk_file_selection_get_selections (handle);
+		long /*int*/ namesPtr1 = namesPtr;
+		long /*int*/ [] namePtr = new long /*int*/ [1];
 		OS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);
 		int length = 0;
 		while (namePtr[0] != 0) {
@@ -269,11 +269,11 @@ String computeResultClassicDialog () {
 			OS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);
 		}
 		fileNames = new String [length];
-		namePtr = new int /*long*/ [length];
+		namePtr = new long /*int*/ [length];
 		OS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);
 		for (int i = 0; i < length; i++) {			
 			utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);
-			items_written = new int /*long*/ [1];
+			items_written = new long /*int*/ [1];
 			utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 			buffer = new char [(int)/*64*/items_written [0]];
 			OS.memmove (buffer, utf16Ptr, items_written [0] * 2);
@@ -391,7 +391,7 @@ String openChooserDialog () {
 	int action = (style & SWT.SAVE) != 0 ?
 		OS.GTK_FILE_CHOOSER_ACTION_SAVE :
 		OS.GTK_FILE_CHOOSER_ACTION_OPEN;
-	int /*long*/ shellHandle = parent.topHandle ();
+	long /*int*/ shellHandle = parent.topHandle ();
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
 	if (display.getDismissalAlignment() == SWT.RIGHT) {
 		handle = OS.gtk_file_chooser_dialog_new (titleBytes, shellHandle, action, OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL, OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK, 0);
@@ -399,7 +399,7 @@ String openChooserDialog () {
 		handle = OS.gtk_file_chooser_dialog_new (titleBytes, shellHandle, action, OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK, OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL, 0);
 	}
 	OS.gtk_window_set_modal (handle, true);
-	int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+	long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 	if (pixbufs != 0) {
 		OS.gtk_window_set_icon_list (handle, pixbufs);
 		OS.g_list_free (pixbufs);
@@ -416,7 +416,7 @@ String openChooserDialog () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -439,9 +439,9 @@ String openClassicDialog () {
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
 	handle = OS.gtk_file_selection_new (titleBytes);
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -458,7 +458,7 @@ String openClassicDialog () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -498,7 +498,7 @@ void presetChooserDialog () {
 				* when setting a file name that is not a true canonical path. 
 				* The fix is to use the canonical path.
 				*/
-				int /*long*/ ptr = OS.realpath (buffer, null);
+				long /*int*/ ptr = OS.realpath (buffer, null);
 				OS.gtk_file_chooser_set_current_folder (handle, ptr);
 				OS.g_free (ptr);
 			}
@@ -529,7 +529,7 @@ void presetChooserDialog () {
 			* when setting a file name that is not a true canonical path. 
 			* The fix is to use the canonical path.
 			*/
-			int /*long*/ ptr = OS.realpath (buffer, null);
+			long /*int*/ ptr = OS.realpath (buffer, null);
 			if (ptr != 0) {
 				OS.gtk_file_chooser_set_filename (handle, ptr);
 				OS.g_free (ptr);
@@ -547,10 +547,10 @@ void presetChooserDialog () {
 	/* Set the extension filters */
 	if (filterNames == null) filterNames = new String [0];
 	if (filterExtensions == null) filterExtensions = new String [0];
-	int /*long*/ initialFilter = 0;
+	long /*int*/ initialFilter = 0;
 	for (int i = 0; i < filterExtensions.length; i++) {
 		if (filterExtensions [i] != null) {
-			int /*long*/ filter = OS.gtk_file_filter_new ();
+			long /*int*/ filter = OS.gtk_file_filter_new ();
 			if (filterNames.length > i && filterNames [i] != null) {
 				byte [] name = Converter.wcsToMbcs (null, filterNames [i], true);
 				OS.gtk_file_filter_set_name (filter, name);
@@ -606,8 +606,8 @@ void presetClassicDialog () {
 	int length = fullPath.length ();
 	char [] buffer = new char [length + 1];
 	fullPath.getChars (0, length, buffer, 0);
-	int /*long*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
-	int /*long*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
+	long /*int*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
+	long /*int*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
 	OS.gtk_file_selection_set_filename (handle, fileNamePtr);
 	OS.g_free (utf8Ptr);
 	OS.g_free (fileNamePtr);
diff --git a/org/eclipse/swt/widgets/FontDialog.java b/org/eclipse/swt/widgets/FontDialog.java
index d2c7d32..96dcad2 100644
--- a/org/eclipse/swt/widgets/FontDialog.java
+++ b/org/eclipse/swt/widgets/FontDialog.java
@@ -134,15 +134,15 @@ public RGB getRGB () {
  * </ul>
  */
 public FontData open () {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	byte [] titleBytes;
 	titleBytes = Converter.wcsToMbcs (null, title, true);
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
 	handle = OS.gtk_font_selection_dialog_new (titleBytes);
 	if (parent!=null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for(handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -151,7 +151,7 @@ public FontData open () {
 	OS.gtk_window_set_modal (handle, true);
 	if (fontData != null) {
 		Font font = new Font (display, fontData);
-		int /*long*/ fontName = OS.pango_font_description_to_string (font.handle);
+		long /*int*/ fontName = OS.pango_font_description_to_string (font.handle);
 		int length = OS.strlen (fontName);
 		byte [] buffer = new byte [length + 1];
 		OS.memmove (buffer, fontName, length);
@@ -166,7 +166,7 @@ public FontData open () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -180,12 +180,12 @@ public FontData open () {
 	}
 	boolean success = response == OS.GTK_RESPONSE_OK; 
 	if (success) {
-		int /*long*/ fontName = OS.gtk_font_selection_dialog_get_font_name (handle);
+		long /*int*/ fontName = OS.gtk_font_selection_dialog_get_font_name (handle);
 		int length = OS.strlen (fontName);
 		byte [] buffer = new byte [length + 1];
 		OS.memmove (buffer, fontName, length);
 		OS.g_free (fontName);
-		int /*long*/ fontDesc = OS.pango_font_description_from_string (buffer);
+		long /*int*/ fontDesc = OS.pango_font_description_from_string (buffer);
 		Font font = Font.gtk_new (display, fontDesc);
 		fontData = font.getFontData () [0];
 		OS.pango_font_description_free (fontDesc);		
diff --git a/org/eclipse/swt/widgets/Group.java b/org/eclipse/swt/widgets/Group.java
index f2b75d0..1e7d2df 100644
--- a/org/eclipse/swt/widgets/Group.java
+++ b/org/eclipse/swt/widgets/Group.java
@@ -41,7 +41,7 @@ import org.eclipse.swt.graphics.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Group extends Composite {
-	int /*long*/ clientHandle, labelHandle;
+	long /*int*/ clientHandle, labelHandle;
 	String text = "";
 
 /**
@@ -96,7 +96,7 @@ protected void checkSubclass () {
 	if (!isValidSubclass ()) error (SWT.ERROR_INVALID_SUBCLASS);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	return clientHandle;
 }
 
@@ -157,7 +157,7 @@ void enableWidget (boolean enabled) {
 	OS.gtk_widget_set_sensitive (labelHandle, enabled);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
@@ -201,7 +201,7 @@ boolean mnemonicMatch (char key) {
 	return mnemonicMatch (labelHandle, key);
 }
 
-int /*long*/ parentingHandle() {
+long /*int*/ parentingHandle() {
 	return fixedHandle;
 }
 
@@ -227,7 +227,7 @@ void setBackgroundColor (GdkColor color) {
 	setBackgroundColor(fixedHandle, color);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	OS.gtk_widget_modify_font (labelHandle, font);
 }
diff --git a/org/eclipse/swt/widgets/IME.java b/org/eclipse/swt/widgets/IME.java
index cc0036e..d846047 100644
--- a/org/eclipse/swt/widgets/IME.java
+++ b/org/eclipse/swt/widgets/IME.java
@@ -242,14 +242,14 @@ public boolean getWideCaret () {
 	return false; 
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (!isInlineEnabled ()) return 0;
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) OS.gtk_im_context_reset (imHandle);
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ textPtr) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ textPtr) {
 	if (!isInlineEnabled ()) return 0;
 	boolean doit = true;
 	ranges = null;
@@ -278,14 +278,14 @@ int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ textPtr) {
 	return doit ? 0 : 1;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	if (!isInlineEnabled ()) return 0;
 	ranges = null;
 	styles = null;
 	commitCount = 0;
-	int /*long*/ imHandle = imHandle ();
-	int /*long*/ [] preeditString = new int /*long*/ [1];
-	int /*long*/ [] pangoAttrs = new int /*long*/ [1];
+	long /*int*/ imHandle = imHandle ();
+	long /*int*/ [] preeditString = new long /*int*/ [1];
+	long /*int*/ [] pangoAttrs = new long /*int*/ [1];
 	int [] cursorPos = new int [1];
 	OS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, cursorPos);
 	caretOffset = cursorPos [0];
@@ -297,7 +297,7 @@ int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
 		chars = Converter.mbcsToWcs (null, buffer);
 		if (pangoAttrs [0] != 0) {
 			int count = 0;
-			int /*long*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);
+			long /*int*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);
 			while (OS.pango_attr_iterator_next (iterator)) count++;
 			OS.pango_attr_iterator_destroy (iterator);
 			ranges = new int [count * 2];
@@ -312,7 +312,7 @@ int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
 				ranges [i * 2] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + start [0]);
 				ranges [i * 2 + 1] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + end [0]) - 1;
 				styles [i] = new TextStyle (null, null, null);
-				int /*long*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);
+				long /*int*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);
 				if (attr != 0) {
 					OS.memmove (attrColor, attr, PangoAttrColor.sizeof);
 					GdkColor color = new GdkColor ();
@@ -395,7 +395,7 @@ int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
 	return 1;
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return parent.imHandle ();
 }
 
diff --git a/org/eclipse/swt/widgets/ImageList.java b/org/eclipse/swt/widgets/ImageList.java
index cab405e..d34b314 100644
--- a/org/eclipse/swt/widgets/ImageList.java
+++ b/org/eclipse/swt/widgets/ImageList.java
@@ -15,13 +15,13 @@ import org.eclipse.swt.internal.gtk.*;
 import org.eclipse.swt.graphics.*;
 
 class ImageList {
-	int /*long*/ [] pixbufs;
+	long /*int*/ [] pixbufs;
 	int width = -1, height = -1;
 	Image [] images;
 	
 public ImageList() {
 	images = new Image [4];
-	pixbufs = new int /*long*/ [4];
+	pixbufs = new long /*int*/ [4];
 }
 
 public int add (Image image) {
@@ -41,7 +41,7 @@ public int add (Image image) {
 		Image [] newImages = new Image [images.length + 4];
 		System.arraycopy (images, 0, newImages, 0, images.length);
 		images = newImages;
-		int /*long*/ [] newPixbufs = new int /*long*/ [pixbufs.length + 4];
+		long /*int*/ [] newPixbufs = new long /*int*/ [pixbufs.length + 4];
 		System.arraycopy (pixbufs, 0, newPixbufs, 0, pixbufs.length);
 		pixbufs = newPixbufs;
 	}
@@ -62,7 +62,7 @@ public Image get (int index) {
 	return images [index];
 }
 
-int /*long*/ getPixbuf (int index) {
+long /*int*/ getPixbuf (int index) {
 	return pixbufs [index];
 }
 
@@ -74,7 +74,7 @@ public int indexOf (Image image) {
 	return -1;
 }
 
-int indexOf (int /*long*/ pixbuf) {
+int indexOf (long /*int*/ pixbuf) {
 	if (pixbuf == 0) return -1;
 	for (int index=0; index<images.length; index++) {
 		if (pixbuf == pixbufs [index]) return index;
@@ -112,17 +112,17 @@ public void remove (Image image) {
 void set (int index, Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ pixbuf = Display.createPixbuf (image);
+	long /*int*/ pixbuf = Display.createPixbuf (image);
 	if (width == -1 || height == -1) {
 		width = w [0];
 		height = h [0];
 	}
 	if (w [0] != width || h [0] != height) {
-		int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, width, height, OS.GDK_INTERP_BILINEAR);
+		long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, width, height, OS.GDK_INTERP_BILINEAR);
 		OS.g_object_unref (pixbuf);
 		pixbuf = scaledPixbuf;
 	}
-	int /*long*/ oldPixbuf = pixbufs [index];
+	long /*int*/ oldPixbuf = pixbufs [index];
 	if (oldPixbuf != 0) {
 		if (images [index] == image) {
 			OS.gdk_pixbuf_copy_area (pixbuf, 0, 0, width, height, oldPixbuf, 0, 0);
diff --git a/org/eclipse/swt/widgets/Label.java b/org/eclipse/swt/widgets/Label.java
index 82ec5be..0ca491e 100644
--- a/org/eclipse/swt/widgets/Label.java
+++ b/org/eclipse/swt/widgets/Label.java
@@ -50,7 +50,7 @@ import org.eclipse.swt.graphics.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Label extends Control {
-	int /*long*/ frameHandle, labelHandle, imageHandle;
+	long /*int*/ frameHandle, labelHandle, imageHandle;
 	ImageList imageList;
 	Image image;
 	String text;
@@ -108,8 +108,8 @@ static int checkStyle (int style) {
 void addRelation (Control control) {
 	if (!control.isDescribedByLabel ()) return;
 	if (labelHandle == 0) return;
-	int /*long*/ accessible = OS.gtk_widget_get_accessible (labelHandle);
-	int /*long*/ controlAccessible = OS.gtk_widget_get_accessible (control.handle);
+	long /*int*/ accessible = OS.gtk_widget_get_accessible (labelHandle);
+	long /*int*/ controlAccessible = OS.gtk_widget_get_accessible (control.handle);
 	if (accessible != 0 && controlAccessible != 0) {
 		OS.atk_object_add_relationship (controlAccessible, OS.ATK_RELATION_LABELLED_BY, accessible);
 	}
@@ -135,7 +135,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	boolean fixWrap = labelHandle != 0 && (style & SWT.WRAP) != 0 && (OS.GTK_WIDGET_FLAGS (labelHandle) & OS.GTK_VISIBLE) != 0;
 	if (fixWrap || frameHandle != 0) forceResize ();
 	if (fixWrap) {
-		int /*long*/ labelLayout = OS.gtk_label_get_layout (labelHandle);
+		long /*int*/ labelLayout = OS.gtk_label_get_layout (labelHandle);
 		int pangoWidth = OS.pango_layout_get_width (labelLayout);
 		if (wHint != SWT.DEFAULT) {
 			OS.pango_layout_set_width (labelLayout, wHint * OS.PANGO_SCALE);
@@ -179,11 +179,11 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	* muliple lines of text.
 	*/
 	if (hHint == SWT.DEFAULT && labelHandle != 0) {
-		int /*long*/ layout = OS.gtk_label_get_layout (labelHandle);
-		int /*long*/ context = OS.pango_layout_get_context (layout);
-		int /*long*/ lang = OS.pango_context_get_language (context);
-		int /*long*/ font = getFontDescription ();
-		int /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);
+		long /*int*/ layout = OS.gtk_label_get_layout (labelHandle);
+		long /*int*/ context = OS.pango_layout_get_context (layout);
+		long /*int*/ lang = OS.pango_context_get_language (context);
+		long /*int*/ font = getFontDescription ();
+		long /*int*/ metrics = OS.pango_context_get_metrics (context, font, lang);
 		int ascent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_ascent (metrics));
 		int descent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_descent (metrics));
 		OS.pango_font_metrics_unref (metrics);
@@ -192,7 +192,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 		OS.g_object_get (labelHandle, OS.ypad, buffer, 0);
 		fontHeight += 2 * buffer [0];
 		if (frameHandle != 0) {
-			int /*long*/ style = OS.gtk_widget_get_style (frameHandle);
+			long /*int*/ style = OS.gtk_widget_get_style (frameHandle);
 			fontHeight += 2 * OS.gtk_style_get_ythickness (style);
 			fontHeight += 2 * OS.gtk_container_get_border_width (frameHandle);
 		}
@@ -254,7 +254,7 @@ void deregister () {
 	if (imageHandle != 0) display.removeWidget (imageHandle);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
@@ -487,7 +487,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -531,7 +531,7 @@ public void setImage (Image image) {
 	if (image != null) {
 		imageList = new ImageList ();
 		int imageIndex = imageList.add (image);
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_hide (labelHandle);
 		OS.gtk_widget_show (imageHandle);
diff --git a/org/eclipse/swt/widgets/Link.java b/org/eclipse/swt/widgets/Link.java
index 265b3dc..d5c59db 100644
--- a/org/eclipse/swt/widgets/Link.java
+++ b/org/eclipse/swt/widgets/Link.java
@@ -282,8 +282,8 @@ public String getText () {
 	return text;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);	
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);	
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -321,8 +321,8 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_release_event (widget, event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_release_event (widget, event);
 	if (result != 0) return result;
 	if (focusIndex == -1) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
@@ -345,8 +345,8 @@ int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event)
 	return result;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
-	int /*long*/ result = super.gtk_event_after (widget, gdkEvent);
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
+	long /*int*/ result = super.gtk_event_after (widget, gdkEvent);
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -357,7 +357,7 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return result;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventExpose.sizeof);
@@ -398,8 +398,8 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (focusIndex == -1) return result;
 	GdkEventKey gdkEvent = new GdkEventKey ();
@@ -428,8 +428,8 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_motion_notify_event (widget, event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_motion_notify_event (widget, event);
 	if (result != 0) return result;
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
 	OS.memmove (gdkEvent, event, GdkEventMotion.sizeof);
@@ -662,7 +662,7 @@ int setBounds(int x, int y, int width, int height, boolean move, boolean resize)
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	layout.setFont (Font.gtk_new (display, font));
 }
diff --git a/org/eclipse/swt/widgets/List.java b/org/eclipse/swt/widgets/List.java
index b1df97f..c1a3357 100644
--- a/org/eclipse/swt/widgets/List.java
+++ b/org/eclipse/swt/widgets/List.java
@@ -40,7 +40,7 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class List extends Scrollable {
-	int /*long*/ modelHandle;
+	long /*int*/ modelHandle;
 
 	static final int TEXT_COLUMN = 0;
 
@@ -96,7 +96,7 @@ public void add (String string) {
 	checkWidget();
 	if (string == null) error (SWT.ERROR_NULL_ARGUMENT);
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	OS.gtk_list_store_append (modelHandle, iter);
 	OS.gtk_list_store_set (modelHandle, iter, TEXT_COLUMN, buffer, -1);
@@ -134,7 +134,7 @@ public void add (String string, int index) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	/*
 	* Feature in GTK.  It is much faster to append to a list store
@@ -196,14 +196,14 @@ void createHandle (int index) {
 	* Columns:
 	* 0 - text
 	*/
-	int /*long*/ [] types = new int /*long*/ [] {OS.G_TYPE_STRING ()};
+	long /*int*/ [] types = new long /*int*/ [] {OS.G_TYPE_STRING ()};
 	modelHandle = OS.gtk_list_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);
 	OS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, TEXT_COLUMN);
@@ -212,7 +212,7 @@ void createHandle (int index) {
 	OS.gtk_container_add (scrolledHandle, handle);
 	
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -276,8 +276,8 @@ void deregister() {
 public void deselect (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index); 
 	OS.gtk_tree_selection_unselect_iter (selection, iter);
@@ -307,8 +307,8 @@ public void deselect (int start, int end) {
 	if (start >= count && end >= count) return;
 	start = Math.min (count - 1, Math.max (0, start));
 	end = Math.min (count - 1, Math.max (0, end));
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index); 
@@ -338,9 +338,9 @@ public void deselect (int start, int end) {
 public void deselect (int [] indices) {
 	checkWidget();
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<indices.length; i++) {
 		int index = indices [i];
@@ -362,7 +362,7 @@ public void deselect (int [] indices) {
  */
 public void deselectAll () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -371,10 +371,10 @@ public void deselectAll () {
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -387,7 +387,7 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -408,10 +408,10 @@ GdkColor getBackgroundColor () {
  */
 public int getFocusIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return -1;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	int [] index = new int []{-1};
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
@@ -442,8 +442,8 @@ public String getItem (int index) {
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ [] ptr = new long /*int*/ [1];
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
 	OS.g_free (iter);
@@ -484,13 +484,13 @@ public int getItemCount () {
 public int getItemHeight () {
 	checkWidget();
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 	if (itemCount == 0) {
 		int [] w = new int [1], h = new int [1];
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
 		return h [0];
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 		int [] w = new int [1], h = new int [1];
@@ -519,9 +519,9 @@ public int getItemHeight () {
 public String [] getItems () {
 	checkWidget();
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	String [] result = new String [count];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	for (int index=0; index<count; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
@@ -575,7 +575,7 @@ public String [] getSelection () {
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -598,7 +598,7 @@ public int getSelectionCount () {
  */
 public int getSelectionIndex () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		display.treeSelectionLength  = 0;
@@ -612,14 +612,14 @@ public int getSelectionIndex () {
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] index = new int [1];
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				OS.memmove (index, indices, 4);
 				break;
@@ -649,7 +649,7 @@ public int getSelectionIndex () {
  */
 public int [] getSelectionIndices () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		display.treeSelectionLength  = 0;
@@ -665,15 +665,15 @@ public int [] getSelectionIndices () {
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -703,24 +703,24 @@ public int [] getSelectionIndices () {
  */
 public int getTopIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return 0;
 	if (path [0] == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 	int[] index = new int [1];
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
 	return index [0];
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	postEvent (SWT.Selection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select list view, when multiple items are already
@@ -734,10 +734,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -752,10 +752,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -775,8 +775,8 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -798,8 +798,8 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -812,14 +812,14 @@ int /*long*/ gtk_popup_menu (int /*long*/ widget) {
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
 void hookEvents () {
 	super.hookEvents();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 }
@@ -892,15 +892,15 @@ public int indexOf (String string, int start) {
  */
 public boolean isSelected (int index) {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	byte [] buffer = Converter.wcsToMbcs (null, Integer.toString (index), true);
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (buffer);
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (buffer);
 	boolean answer = OS.gtk_tree_selection_path_is_selected (selection, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -935,9 +935,9 @@ public void remove (int index) {
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_remove (modelHandle, iter);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -967,8 +967,8 @@ public void remove (int start, int end) {
 	if (!(0 <= start && start <= end && end < count)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=end; index>=start; index--) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
@@ -1029,8 +1029,8 @@ public void remove (int [] indices) {
 	if (!(0 <= start && start <= end && end < count)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	int last = -1;
 	for (int i=0; i<newIndices.length; i++) {
@@ -1055,7 +1055,7 @@ public void remove (int [] indices) {
  */
 public void removeAll () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1101,13 +1101,13 @@ public void removeSelectionListener(SelectionListener listener) {
 public void select (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	OS.gtk_tree_selection_select_iter (selection, iter); 
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 		OS.gtk_tree_path_free (path);
 	}
@@ -1144,14 +1144,14 @@ public void select (int start, int end) {
 	if (count == 0 || start >= count) return;
 	start = Math.max (0, start);
 	end = Math.min (end, count - 1);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_selection_select_iter (selection, iter);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -1187,9 +1187,9 @@ public void select (int [] indices) {
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
 	int length = indices.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<length; i++) {
 		int index = indices [i];
@@ -1197,7 +1197,7 @@ public void select (int [] indices) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_selection_select_iter (selection, iter); 
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -1219,7 +1219,7 @@ public void select (int [] indices) {
 public void selectAll () {
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1233,10 +1233,10 @@ void selectFocusIndex (int index) {
 	*/
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 	if (!(0 <= index && index < count))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 	/*
@@ -1303,7 +1303,7 @@ public void setItem (int index, String string) {
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
 	OS.gtk_list_store_set (modelHandle, iter, TEXT_COLUMN, buffer, -1);
@@ -1330,11 +1330,11 @@ public void setItems (String [] items) {
 	for (int i=0; i<items.length; i++) {
 		if (items [i] == null) error (SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	for (int i=0; i<items.length; i++) {
 		String string = items [i];
@@ -1504,9 +1504,9 @@ public void setSelection (String [] items) {
 public void setTopIndex (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0))) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0, 0);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
 		/*
@@ -1543,9 +1543,9 @@ public void showSelection () {
 	checkWidget();
 	int index = getSelectionIndex ();
 	if (index == -1) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	/*
 	* This code intentionally commented.
 	* Bug in GTK.  According to the documentation, gtk_tree_view_scroll_to_cell
@@ -1579,9 +1579,9 @@ public void showSelection () {
 	OS.g_free (iter);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) { 
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {
 			int [] index = new int [1];
 			OS.memmove (index, indices, 4);
diff --git a/org/eclipse/swt/widgets/Menu.java b/org/eclipse/swt/widgets/Menu.java
index 5e042a6..5bc88fa 100644
--- a/org/eclipse/swt/widgets/Menu.java
+++ b/org/eclipse/swt/widgets/Menu.java
@@ -44,7 +44,7 @@ public class Menu extends Widget {
 	boolean hasLocation;
 	MenuItem cascade, selectedItem;
 	Decorations parent;
-	int /*long*/ imItem, imSeparator, imHandle;
+	long /*int*/ imItem, imSeparator, imHandle;
 	ImageList imageList;
 
 /**
@@ -209,7 +209,7 @@ void _setVisible (boolean visible) {
 					OS.gtk_menu_shell_set_take_focus (handle, false);
 				}
 			}
-			int /*long*/ address = hasLocation ? display.menuPositionProc: 0;
+			long /*int*/ address = hasLocation ? display.menuPositionProc: 0;
 			/*
 			* Bug in GTK.  The timestamp passed into gtk_menu_popup is used
 			* to perform an X pointer grab.  It cannot be zero, else the grab
@@ -225,7 +225,7 @@ void _setVisible (boolean visible) {
 	}
 }
 
-void addAccelerators (int /*long*/ accelGroup) {
+void addAccelerators (long /*int*/ accelGroup) {
 	MenuItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
 		MenuItem item = items[i];
@@ -291,7 +291,7 @@ void createHandle (int index) {
 	if ((style & SWT.BAR) != 0) {
 		handle = OS.gtk_menu_bar_new ();
 		if (handle == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ vboxHandle = parent.vboxHandle;
+		long /*int*/ vboxHandle = parent.vboxHandle;
 		OS.gtk_container_add (vboxHandle, handle);
 		OS.gtk_box_set_child_packing (vboxHandle, handle, false, true, 0, OS.GTK_PACK_START);
 	} else {
@@ -300,7 +300,7 @@ void createHandle (int index) {
 	}
 }
 
-void createIMMenu (int /*long*/ imHandle) {
+void createIMMenu (long /*int*/ imHandle) {
 	if (this.imHandle == imHandle) return;
 	this.imHandle = imHandle;
 	if (imHandle == 0) {
@@ -325,7 +325,7 @@ void createIMMenu (int /*long*/ imHandle) {
 		OS.gtk_widget_show (imItem);
 		OS.gtk_menu_shell_insert (handle, imItem, -1);
 	}
-	int /*long*/ imSubmenu = OS.gtk_menu_new ();
+	long /*int*/ imSubmenu = OS.gtk_menu_new ();
 	OS.gtk_im_multicontext_append_menuitems (imHandle, imSubmenu);
 	OS.gtk_menu_item_set_submenu (imItem, imSubmenu);
 }
@@ -351,7 +351,7 @@ void fixMenus (Decorations newParent) {
 	if (!OS.GTK_WIDGET_MAPPED (handle)) {
 		return new Rectangle (0, 0, 0, 0);
 	}
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	int x = origin_x [0] + OS.GTK_WIDGET_X (handle);
@@ -415,13 +415,13 @@ public boolean getEnabled () {
  */
 public MenuItem getItem (int index) {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	int count = OS.g_list_length (list);
 	if (imSeparator != 0) count--;
 	if (imItem != 0) count--;
 	if (!(0 <= index && index < count)) error (SWT.ERROR_INVALID_RANGE);
-	int /*long*/ data = OS.g_list_nth_data (list, index);
+	long /*int*/ data = OS.g_list_nth_data (list, index);
 	OS.g_list_free (list);
 	if (data == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	return (MenuItem) display.getWidget (data);
@@ -439,7 +439,7 @@ public MenuItem getItem (int index) {
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -466,7 +466,7 @@ public int getItemCount () {
  */
 public MenuItem [] getItems () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return new MenuItem [0];
 	int count = OS.g_list_length (list);
 	if (imSeparator != 0) count--;
@@ -474,7 +474,7 @@ public MenuItem [] getItems () {
 	MenuItem [] items = new MenuItem [count];
 	int index = 0;
 	for (int i=0; i<count; i++) {
-		int /*long*/ data = OS.g_list_nth_data (list, i);
+		long /*int*/ data = OS.g_list_nth_data (list, i);
 		MenuItem item = (MenuItem) display.getWidget (data);
 		if (item != null) items [index++] = item; 
 	}
@@ -600,7 +600,7 @@ public boolean getVisible () {
 	return OS.GTK_WIDGET_MAPPED (handle);
 }
 
-int /*long*/ gtk_hide (int /*long*/ widget) {
+long /*int*/ gtk_hide (long /*int*/ widget) {
 	if ((style & SWT.POP_UP) != 0) {
 		if (display.activeShell != null) display.activeShell = getShell ();
 	}
@@ -619,7 +619,7 @@ int /*long*/ gtk_hide (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_show (int /*long*/ widget) {
+long /*int*/ gtk_show (long /*int*/ widget) {
 	if ((style & SWT.POP_UP) != 0) {
 		if (display.activeShell != null) display.activeShell = getShell ();
 		return 0;
@@ -629,7 +629,7 @@ int /*long*/ gtk_show (int /*long*/ widget) {
 }
 
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	if (sendHelpEvent (helpType)) {
 		OS.gtk_menu_shell_deactivate (handle);
 		return 1;
@@ -714,7 +714,7 @@ public boolean isVisible () {
 	return getVisible ();
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	/*
 	* Feature in GTK.  The menu position function sets the position of the
 	* top-left pixel of the menu.  If the menu would be off-screen, GTK will
@@ -802,7 +802,7 @@ public void removeMenuListener (MenuListener listener) {
 	eventTable.unhook (SWT.Show, listener);
 }
 
-void removeAccelerators (int /*long*/ accelGroup) {
+void removeAccelerators (long /*int*/ accelGroup) {
 	MenuItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
 		MenuItem item = items[i];
@@ -834,7 +834,7 @@ public void removeHelpListener (HelpListener listener) {
 	eventTable.unhook (SWT.Help, listener);
 }
 
-boolean sendHelpEvent (int /*long*/ helpType) {
+boolean sendHelpEvent (long /*int*/ helpType) {
 	if (selectedItem != null && !selectedItem.isDisposed()) {
 		if (selectedItem.hooks (SWT.Help)) {
 			selectedItem.postEvent (SWT.Help);
diff --git a/org/eclipse/swt/widgets/MenuItem.java b/org/eclipse/swt/widgets/MenuItem.java
index d676e46..6680484 100644
--- a/org/eclipse/swt/widgets/MenuItem.java
+++ b/org/eclipse/swt/widgets/MenuItem.java
@@ -38,7 +38,7 @@ import org.eclipse.swt.events.*;
  */
 public class MenuItem extends Item {
 	Menu parent, menu;
-	int /*long*/ groupHandle;
+	long /*int*/ groupHandle;
 	int accelerator;
 	
 /**
@@ -127,11 +127,11 @@ public MenuItem (Menu parent, int style, int index) {
 	createWidget (index);
 }
 
-void addAccelerator (int /*long*/ accelGroup) {
+void addAccelerator (long /*int*/ accelGroup) {
 	updateAccelerator (accelGroup, true);
 }
 
-void addAccelerators (int /*long*/ accelGroup) {
+void addAccelerators (long /*int*/ accelGroup) {
 	addAccelerator (accelGroup);
 	if (menu != null) menu.addAccelerators (accelGroup);
 }
@@ -252,7 +252,7 @@ void createHandle (int index) {
 			if (groupHandle == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.g_object_ref (groupHandle);
 			OS.gtk_object_sink (groupHandle);
-			int /*long*/ group = OS.gtk_radio_menu_item_get_group (groupHandle);
+			long /*int*/ group = OS.gtk_radio_menu_item_get_group (groupHandle);
 			handle = OS.gtk_radio_menu_item_new_with_label (group, buffer);
 			break;
 		case SWT.CHECK:
@@ -265,10 +265,10 @@ void createHandle (int index) {
 	}
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
 	if ((style & SWT.SEPARATOR) == 0) {
-		int /*long*/ label = OS.gtk_bin_get_child (handle);
+		long /*int*/ label = OS.gtk_bin_get_child (handle);
 		OS.gtk_accel_label_set_accel_widget (label, 0);
 	}
-	int /*long*/ parentHandle = parent.handle;
+	long /*int*/ parentHandle = parent.handle;
 	boolean enabled = OS.GTK_WIDGET_SENSITIVE (parentHandle);     
 	if (!enabled) OS.GTK_WIDGET_SET_FLAGS (parentHandle, OS.GTK_SENSITIVE);
 	OS.gtk_menu_shell_insert (parentHandle, handle, index);
@@ -300,7 +300,7 @@ public int getAccelerator () {
 	return accelerator;
 }
 
-int /*long*/ getAccelGroup () {
+long /*int*/ getAccelGroup () {
 	Menu menu = parent;
 	while (menu != null && menu.cascade != null) {
 		menu = menu.cascade.parent;
@@ -401,7 +401,7 @@ public boolean getSelection () {
 	return OS.gtk_check_menu_item_get_active(handle);
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	if ((style & SWT.CASCADE) != 0 && menu != null) return 0;
 	/*
 	* Bug in GTK.  When an ancestor menu is disabled and
@@ -412,7 +412,7 @@ int /*long*/ gtk_activate (int /*long*/ widget) {
 	*/
 	if (!isEnabled ()) return 0;
 	Event event = new Event ();
-	int /*long*/ ptr = OS.gtk_get_current_event ();
+	long /*int*/ ptr = OS.gtk_get_current_event ();
 	if (ptr != 0) {
 		GdkEvent gdkEvent = new GdkEvent ();
 		OS.memmove (gdkEvent, ptr, GdkEvent.sizeof);
@@ -439,13 +439,13 @@ int /*long*/ gtk_activate (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_select (int /*long*/ item) {
+long /*int*/ gtk_select (long /*int*/ item) {
 	parent.selectedItem = this;
 	sendEvent (SWT.Arm);
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	boolean handled = hooks (SWT.Help);
 	if (handled) {
 		postEvent (SWT.Help);
@@ -504,7 +504,7 @@ void releaseParent () {
 
 void releaseWidget () {
 	super.releaseWidget ();
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	if (groupHandle != 0) OS.g_object_unref (groupHandle);
 	groupHandle = 0;
@@ -512,11 +512,11 @@ void releaseWidget () {
 	parent = null;
 }
 
-void removeAccelerator (int /*long*/ accelGroup) {
+void removeAccelerator (long /*int*/ accelGroup) {
 	updateAccelerator (accelGroup, false);
 }
 
-void removeAccelerators (int /*long*/ accelGroup) {
+void removeAccelerators (long /*int*/ accelGroup) {
 	removeAccelerator (accelGroup);
 	if (menu != null) menu.removeAccelerators (accelGroup);
 }
@@ -622,7 +622,7 @@ void selectRadio () {
 public void setAccelerator (int accelerator) {
 	checkWidget();
 	if (this.accelerator == accelerator) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	this.accelerator = accelerator;
 	if (accelGroup != 0) addAccelerator (accelGroup);
@@ -644,7 +644,7 @@ public void setAccelerator (int accelerator) {
 public void setEnabled (boolean enabled) {
 	checkWidget();
 	if (OS.GTK_WIDGET_SENSITIVE (handle) == enabled) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	OS.gtk_widget_set_sensitive (handle, enabled);
 	if (accelGroup != 0) addAccelerator (accelGroup);
@@ -681,8 +681,8 @@ public void setImage (Image image) {
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
-		int /*long*/ imageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ imageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);
 		OS.gtk_image_menu_item_set_image (handle, imageHandle);
 		OS.gtk_widget_show (imageHandle);
 	} else {
@@ -734,7 +734,7 @@ public void setMenu (Menu menu) {
 	/* Assign the new menu */
 	Menu oldMenu = this.menu;
 	if (oldMenu == menu) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerators (accelGroup);
 	if (oldMenu != null) {
 		oldMenu.cascade = null;
@@ -844,17 +844,17 @@ public void setText (String string) {
 	}
 	char [] chars = fixMnemonic (string);
 	byte [] buffer = Converter.wcsToMbcs (null, chars, true);
-	int /*long*/ label = OS.gtk_bin_get_child (handle);
+	long /*int*/ label = OS.gtk_bin_get_child (handle);
 	OS.gtk_label_set_text_with_mnemonic (label, buffer);
 	buffer = Converter.wcsToMbcs (null, accelString, true);
-	int /*long*/ ptr = OS.g_malloc (buffer.length);
+	long /*int*/ ptr = OS.g_malloc (buffer.length);
 	OS.memmove (ptr, buffer, buffer.length);
-	int /*long*/ oldPtr = OS.GTK_ACCEL_LABEL_GET_ACCEL_STRING (label);
+	long /*int*/ oldPtr = OS.GTK_ACCEL_LABEL_GET_ACCEL_STRING (label);
 	OS.GTK_ACCEL_LABEL_SET_ACCEL_STRING (label, ptr);
 	if (oldPtr != 0) OS.g_free (oldPtr);
 }
 
-void updateAccelerator (int /*long*/ accelGroup, boolean add) {
+void updateAccelerator (long /*int*/ accelGroup, boolean add) {
 	if (accelerator == 0 || !getEnabled ()) return;
 	if ((accelerator & SWT.COMMAND) != 0) return;
 	int mask = 0;
diff --git a/org/eclipse/swt/widgets/MessageBox.java b/org/eclipse/swt/widgets/MessageBox.java
index 3d1cfd1..1468968 100644
--- a/org/eclipse/swt/widgets/MessageBox.java
+++ b/org/eclipse/swt/widgets/MessageBox.java
@@ -42,7 +42,7 @@ import org.eclipse.swt.internal.gtk.*;
 public class MessageBox extends Dialog {
 
 	String message = "";
-	int /*long*/ handle;
+	long /*int*/ handle;
 /**
  * Constructs a new instance of this class given only its parent.
  *
@@ -141,7 +141,7 @@ public void setMessage (String string) {
  * </ul>
  */
 public int open () {
-	int /*long*/ parentHandle = (parent != null) ? parent.topHandle() : 0;
+	long /*int*/ parentHandle = (parent != null) ? parent.topHandle() : 0;
 	int dialogFlags = OS.GTK_DIALOG_DESTROY_WITH_PARENT;
 	if ((style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {
 		dialogFlags |= OS.GTK_DIALOG_MODAL;
@@ -155,7 +155,7 @@ public int open () {
 	handle = OS.gtk_message_dialog_new(parentHandle, dialogFlags, messageType, 0, buffer);
 	if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	if (parentHandle != 0) {
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (parentHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (parentHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -172,7 +172,7 @@ public int open () {
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
diff --git a/org/eclipse/swt/widgets/Monitor.java b/org/eclipse/swt/widgets/Monitor.java
index f22948a..1ea2c09 100644
--- a/org/eclipse/swt/widgets/Monitor.java
+++ b/org/eclipse/swt/widgets/Monitor.java
@@ -22,7 +22,7 @@ import org.eclipse.swt.graphics.*;
  * @since 3.0
  */
 public final class Monitor {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	int x, y, width, height;
 	int clientX, clientY, clientWidth, clientHeight;
 	
diff --git a/org/eclipse/swt/widgets/ProgressBar.java b/org/eclipse/swt/widgets/ProgressBar.java
index 34f3886..8af9a6f 100644
--- a/org/eclipse/swt/widgets/ProgressBar.java
+++ b/org/eclipse/swt/widgets/ProgressBar.java
@@ -162,8 +162,8 @@ public int getState () {
 	return SWT.NORMAL;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
 	if (result != 0) return result;
 	/*
 	* Bug in GTK.  When a progress bar has been unrealized after being
@@ -272,7 +272,7 @@ public void setState (int state) {
 	//NOT IMPLEMENTED
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	if (isVisible ()) OS.gtk_progress_bar_pulse (handle);
 	return 1;
 }
@@ -295,7 +295,7 @@ void updateBar (int selection, int minimum, int maximum) {
 	* but unexpected.  The fix is to force all
 	* outstanding redraws to be delivered.
 	*/
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	OS.gdk_window_process_updates (window, false);
 	OS.gdk_flush ();
 }
diff --git a/org/eclipse/swt/widgets/Sash.java b/org/eclipse/swt/widgets/Sash.java
index 4c5d29c..321e763 100644
--- a/org/eclipse/swt/widgets/Sash.java
+++ b/org/eclipse/swt/widgets/Sash.java
@@ -41,7 +41,7 @@ import org.eclipse.swt.events.*;
 public class Sash extends Control {
 	boolean dragging;
 	int startX, startY, lastX, lastY;
-	int /*long*/ defaultCursor;
+	long /*int*/ defaultCursor;
 
 	private final static int INCREMENT = 1;
 	private final static int PAGE_INCREMENT = 9;
@@ -145,12 +145,12 @@ void createHandle (int index) {
 
 void drawBand (int x, int y, int width, int height) {
 	if ((style & SWT.SMOOTH) != 0) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
 	if (window == 0) return;
 	byte [] bits = {-86, 85, -86, 85, -86, 85, -86, 85};
-	int /*long*/ stipplePixmap = OS.gdk_bitmap_create_from_data (window, bits, 8, 8);
-	int /*long*/ gc = OS.gdk_gc_new (window);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ stipplePixmap = OS.gdk_bitmap_create_from_data (window, bits, 8, 8);
+	long /*int*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	GdkColor color = new GdkColor ();
 	OS.gdk_color_white (colormap, color);
 	OS.gdk_gc_set_foreground (gc, color);	
@@ -163,8 +163,8 @@ void drawBand (int x, int y, int width, int height) {
 	OS.g_object_unref (gc);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -172,7 +172,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr)
 	if (button != 1) return 0;
 	if (gdkEvent.type == OS.GDK_2BUTTON_PRESS) return 0;
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (widget);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (widget);
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	startX = (int) (gdkEvent.x_root - origin_x [0]);
@@ -210,8 +210,8 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr)
 	return result;	
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_release_event (widget, eventPtr);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_release_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -240,8 +240,8 @@ int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ eventPt
 	return result;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	if (result != 0) return result;
 	// widget could be disposed at this point
 	if (handle != 0) {
@@ -251,8 +251,8 @@ int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -287,9 +287,9 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 			if (newX == lastX && newY == lastY) return result;
 			
 			/* Ensure that the pointer image does not change */
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 			int grabMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK;
-			int /*long*/ gdkCursor = cursor != null ? cursor.handle : defaultCursor;
+			long /*int*/ gdkCursor = cursor != null ? cursor.handle : defaultCursor;
 			int ptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, gdkCursor, OS.GDK_CURRENT_TIME);
 
 			/* The event must be sent because its doit flag is used. */
@@ -326,8 +326,8 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_motion_notify_event (widget, eventPtr);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_motion_notify_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (!dragging) return 0;
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
@@ -389,7 +389,7 @@ int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr
 	return result;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
+long /*int*/ gtk_realize (long /*int*/ widget) {
 	setCursor (cursor != null ? cursor.handle : 0);
 	return super.gtk_realize (widget);
 }
@@ -430,7 +430,7 @@ public void removeSelectionListener(SelectionListener listener) {
 	eventTable.unhook (SWT.DefaultSelection,listener);	
 }
 
-void setCursor (int /*long*/ cursor) {
+void setCursor (long /*int*/ cursor) {
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 }
 
diff --git a/org/eclipse/swt/widgets/Scale.java b/org/eclipse/swt/widgets/Scale.java
index 47e6ebb..19509c5 100644
--- a/org/eclipse/swt/widgets/Scale.java
+++ b/org/eclipse/swt/widgets/Scale.java
@@ -127,7 +127,7 @@ void createHandle (int index) {
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
+	long /*int*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
 	if (hAdjustment == 0) error (SWT.ERROR_NO_HANDLES);	
 	if ((style & SWT.HORIZONTAL) != 0) {
 		handle = OS.gtk_hscale_new (hAdjustment);
@@ -159,7 +159,7 @@ void hookEvents () {
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.step_increment;
@@ -177,7 +177,7 @@ public int getIncrement () {
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.upper;
@@ -195,7 +195,7 @@ public int getMaximum () {
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.lower;
@@ -215,7 +215,7 @@ public int getMinimum () {
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_increment;
@@ -233,13 +233,13 @@ public int getPageIncrement () {
  */
 public int getSelection () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.value;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	postEvent (SWT.Selection);
 	return 0;
 }
diff --git a/org/eclipse/swt/widgets/ScrollBar.java b/org/eclipse/swt/widgets/ScrollBar.java
index b2fcd24..d99621e 100644
--- a/org/eclipse/swt/widgets/ScrollBar.java
+++ b/org/eclipse/swt/widgets/ScrollBar.java
@@ -84,7 +84,7 @@ import org.eclipse.swt.events.*;
  */
 public class ScrollBar extends Widget {
 	Scrollable parent;
-	int /*long*/ adjustmentHandle;
+	long /*int*/ adjustmentHandle;
 	int detail;
 	boolean dragSent;
 	
@@ -344,7 +344,7 @@ public int getThumb () {
  */
 public boolean getVisible () {
 	checkWidget ();
-	int /*long*/ scrolledHandle = parent.scrolledHandle;
+	long /*int*/ scrolledHandle = parent.scrolledHandle;
 	int [] hsp = new int [1], vsp = new int [1];
 	OS.gtk_scrolled_window_get_policy (scrolledHandle, hsp, vsp);
 	if ((style & SWT.HORIZONTAL) != 0) {
@@ -354,20 +354,20 @@ public boolean getVisible () {
 	}
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	detail = OS.GTK_SCROLL_NONE;
 	dragSent = false;	
 	return result;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	detail = (int)/*64*/scroll;
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	Event event = new Event ();
 	dragSent = detail == OS.GTK_SCROLL_JUMP;
 	switch (detail) {
@@ -395,7 +395,7 @@ int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent gtkEvent = new GdkEvent ();
 	OS.memmove (gtkEvent, gdkEvent, GdkEvent.sizeof);
 	switch (gtkEvent.type) {
diff --git a/org/eclipse/swt/widgets/Scrollable.java b/org/eclipse/swt/widgets/Scrollable.java
index ab33045..6ef46db 100644
--- a/org/eclipse/swt/widgets/Scrollable.java
+++ b/org/eclipse/swt/widgets/Scrollable.java
@@ -33,7 +33,7 @@ import org.eclipse.swt.graphics.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public abstract class Scrollable extends Control {
-	int /*long*/ scrolledHandle;
+	long /*int*/ scrolledHandle;
 	ScrollBar horizontalBar, verticalBar;
 
 /**
@@ -74,7 +74,7 @@ public Scrollable (Composite parent, int style) {
 	super (parent, style);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	return handle;
 }
 
@@ -116,7 +116,7 @@ public Rectangle computeTrim (int x, int y, int width, int height) {
 	trimWidth  += vScrollBarWidth ();
 	if (scrolledHandle != 0) {
 		if (OS.gtk_scrolled_window_get_shadow_type (scrolledHandle) != OS.GTK_SHADOW_NONE) {
-			int /*long*/ style = OS.gtk_widget_get_style (scrolledHandle);
+			long /*int*/ style = OS.gtk_widget_get_style (scrolledHandle);
 			int xthickness = OS.gtk_style_get_xthickness (style);
 			int ythickness = OS.gtk_style_get_ythickness (style);
 			trimX -= xthickness;
@@ -195,7 +195,7 @@ public int getBorderWidth () {
 public Rectangle getClientArea () {
 	checkWidget ();
 	forceResize ();
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int x = OS.GTK_WIDGET_X (clientHandle);
 	int y = OS.GTK_WIDGET_Y (clientHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
@@ -233,8 +233,8 @@ public ScrollBar getVerticalBar () {
 	return verticalBar;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_scroll_event (widget, eventPtr);
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_scroll_event (widget, eventPtr);
 	
 	/*
 	* Feature in GTK.  Scrolled windows do not scroll if the scrollbars
@@ -268,7 +268,7 @@ int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
 
 int hScrollBarWidth() {
 	if (horizontalBar==null) return 0;
-	int /*long*/ hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);
+	long /*int*/ hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);
 	if (hBarHandle==0) return 0;
 	GtkRequisition requisition = new GtkRequisition();
 	OS.gtk_widget_size_request(hBarHandle, requisition);
@@ -312,9 +312,9 @@ void redrawWidget (int x, int y, int width, int height, boolean redrawAll, boole
 	super.redrawWidget (x, y, width, height, redrawAll, all, trim);
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
 	if (!trim) return;
-	int /*long*/ topHandle = topHandle (), paintHandle = paintHandle ();
+	long /*int*/ topHandle = topHandle (), paintHandle = paintHandle ();
 	if (topHandle == paintHandle) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	if (redrawAll) {
 		rect.width = OS.GTK_WIDGET_WIDTH (topHandle);
@@ -362,7 +362,7 @@ void showWidget () {
 	if (scrolledHandle != 0) OS.gtk_widget_show (scrolledHandle);
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	if (fixedHandle != 0) return fixedHandle;
 	if (scrolledHandle != 0) return scrolledHandle;
 	return super.topHandle ();
@@ -374,7 +374,7 @@ void updateScrollBarValue (ScrollBar bar) {
 
 int vScrollBarWidth() {
 	if (verticalBar == null) return 0;
-	int /*long*/ vBarHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR(scrolledHandle);
+	long /*int*/ vBarHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR(scrolledHandle);
 	if (vBarHandle == 0) return 0;
 	GtkRequisition requisition = new GtkRequisition();
 	OS.gtk_widget_size_request (vBarHandle, requisition);
diff --git a/org/eclipse/swt/widgets/Shell.java b/org/eclipse/swt/widgets/Shell.java
index 9e3a131..0364ae4 100644
--- a/org/eclipse/swt/widgets/Shell.java
+++ b/org/eclipse/swt/widgets/Shell.java
@@ -117,7 +117,7 @@ import org.eclipse.swt.events.*;
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Shell extends Decorations {
-	int /*long*/ shellHandle, tooltipsHandle, tooltipWindow, group, modalGroup;
+	long /*int*/ shellHandle, tooltipsHandle, tooltipWindow, group, modalGroup;
 	boolean mapped, moved, resized, opened, fullScreen, showWithParent, modified, center;
 	int oldX, oldY, oldWidth, oldHeight;
 	int minWidth, minHeight;
@@ -252,7 +252,7 @@ public Shell (Display display, int style) {
 	this (display, null, style, 0, false);
 }
 
-Shell (Display display, Shell parent, int style, int /*long*/ handle, boolean embedded) {
+Shell (Display display, Shell parent, int style, long /*int*/ handle, boolean embedded) {
 	super ();
 	checkSubclass ();
 	if (display == null) display = Display.getCurrent ();
@@ -356,7 +356,7 @@ public Shell (Shell parent, int style) {
 	this (parent != null ? parent.display : null, parent, style, 0, false);
 }
 
-public static Shell gtk_new (Display display, int /*long*/ handle) {
+public static Shell gtk_new (Display display, long /*int*/ handle) {
 	return new Shell (display, null, SWT.NO_TRIM, handle, true);
 }
 
@@ -377,7 +377,7 @@ public static Shell gtk_new (Display display, int /*long*/ handle) {
  * 
  * @since 3.3
  */
-public static Shell internal_new (Display display, int /*long*/ handle) {
+public static Shell internal_new (Display display, long /*int*/ handle) {
 	return new Shell (display, null, SWT.NO_TRIM, handle, false);
 }
 
@@ -448,7 +448,7 @@ void adjustTrim () {
 	if (display.ignoreTrim) return;
 	int width = OS.GTK_WIDGET_WIDTH (shellHandle);
 	int height = OS.GTK_WIDGET_HEIGHT (shellHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gdk_window_get_frame_extents (window, rect);
 	int trimWidth = Math.max (0, rect.width - width);
@@ -503,7 +503,7 @@ void bringToTop (boolean force) {
 	if (!force) {
 		if (activeShell == null) return;
 		if (!display.activePending) {
-			int /*long*/ focusHandle = OS.gtk_window_get_focus (activeShell.shellHandle);
+			long /*int*/ focusHandle = OS.gtk_window_get_focus (activeShell.shellHandle);
 			if (focusHandle != 0 && !OS.GTK_WIDGET_HAS_FOCUS (focusHandle)) return;
 		}
 	}
@@ -531,10 +531,10 @@ void bringToTop (boolean force) {
 	* window.  The fix is to use XSetInputFocus() to force
 	* the focus.
 	*/
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	if ((xFocus || (style & SWT.ON_TOP) != 0) && OS.GDK_WINDOWING_X11 ()) {
-		int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-		int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
+		long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+		long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
 		OS.gdk_error_trap_push ();
 		/* Use CurrentTime instead of the last event time to ensure that the shell becomes active */
 		OS.XSetInputFocus (xDisplay, xWindow, OS.RevertToParent, OS.CurrentTime);
@@ -584,7 +584,7 @@ void checkOpen () {
 	if (!opened) resized = false;
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	return 0;
 }
 
@@ -682,7 +682,7 @@ void createHandle (int index) {
 	} else {
 		vboxHandle = OS.gtk_bin_get_child (shellHandle);
 		if (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ children = OS.gtk_container_get_children (vboxHandle);
+		long /*int*/ children = OS.gtk_container_get_children (vboxHandle);
 		if (OS.g_list_length (children) > 0) {
 			scrolledHandle = OS.g_list_data (children);
 		}
@@ -702,7 +702,7 @@ void createHandle (int index) {
 	OS.gtk_widget_realize (shellHandle);
 }
 
-int /*long*/ filterProc (int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data2) {
+long /*int*/ filterProc (long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data2) {
 	int eventType = OS.X_EVENT_TYPE (xEvent);
 	if (eventType != OS.FocusOut && eventType != OS.FocusIn) return 0;
 	XFocusChangeEvent xFocusEvent = new XFocusChangeEvent();
@@ -766,7 +766,7 @@ void hookEvents () {
 	OS.g_signal_connect_closure_by_id (shellHandle, display.signalIds [MAP_EVENT], 0, display.shellMapProcClosure, false);
 	OS.g_signal_connect_closure_by_id (shellHandle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);
 	OS.g_signal_connect_closure (shellHandle, OS.move_focus, display.closures [MOVE_FOCUS], false);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	OS.gdk_window_add_filter  (window, display.filterProc, shellHandle);
 }
 
@@ -795,7 +795,7 @@ void releaseParent () {
 	/* Do nothing */
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	return shellHandle;
 }
 
@@ -826,15 +826,15 @@ void fixShell (Shell newShell, Control control) {
 	}
 }
 
-int /*long*/ fixedSizeAllocateProc(int /*long*/ widget, int /*long*/ allocationPtr) {
+long /*int*/ fixedSizeAllocateProc(long /*int*/ widget, long /*int*/ allocationPtr) {
 	int clientWidth = 0;
 	if ((style & SWT.MIRRORED) != 0) clientWidth = getClientWidth ();
-	int /*long*/ result = super.fixedSizeAllocateProc (widget, allocationPtr);
+	long /*int*/ result = super.fixedSizeAllocateProc (widget, allocationPtr);
 	if ((style & SWT.MIRRORED) != 0) moveChildren (clientWidth);
 	return result;
 }
 
-void fixStyle (int /*long*/ handle) {
+void fixStyle (long /*int*/ handle) {
 }
 
 void forceResize () {
@@ -1070,7 +1070,7 @@ public Shell [] getShells () {
 	return result;
 }
 
-int /*long*/ gtk_configure_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_configure_event (long /*int*/ widget, long /*int*/ event) {
 	int [] x = new int [1], y = new int [1];
 	OS.gtk_window_get_position (shellHandle, x, y);
 	if (!moved || oldX != x [0] || oldY != y [0]) {
@@ -1083,19 +1083,19 @@ int /*long*/ gtk_configure_event (int /*long*/ widget, int /*long*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_delete_event (long /*int*/ widget, long /*int*/ event) {
 	if (isEnabled()) closeWidget ();
 	return 1;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (widget != shellHandle) {
 		return super.gtk_enter_notify_event (widget, event);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	switch ((int)/*64*/directionType) {
 		case OS.GTK_DIR_TAB_FORWARD:
 		case OS.GTK_DIR_TAB_BACKWARD:
@@ -1112,17 +1112,17 @@ int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
 	return super.gtk_focus (widget, directionType);
 }
 
-int /*long*/ gtk_move_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_move_focus (long /*int*/ widget, long /*int*/ directionType) {
 	Control control = display.getFocusControl ();
 	if (control != null) {
-		int /*long*/ focusHandle = control.focusHandle ();
+		long /*int*/ focusHandle = control.focusHandle ();
 		OS.gtk_widget_child_focus (focusHandle, (int)/*64*/directionType);
 	}
 	OS.g_signal_stop_emission_by_name (shellHandle, OS.move_focus);
 	return 1;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	/* Stop menu mnemonics when the shell is disabled */
 	if (widget == shellHandle) {
 		return (state & DISABLED) != 0 ? 1 : 0;
@@ -1130,7 +1130,7 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
 	return super.gtk_key_press_event (widget, event);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	int width = OS.GTK_WIDGET_WIDTH (shellHandle);
 	int height = OS.GTK_WIDGET_HEIGHT (shellHandle);
 	if (!resized || oldWidth != width || oldHeight != height) {
@@ -1141,9 +1141,9 @@ int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	if ((style & SWT.SHELL_TRIM) != SWT.SHELL_TRIM) {
 		int decorations = 0;
 		if ((style & SWT.NO_TRIM) == 0) {
@@ -1169,7 +1169,7 @@ int /*long*/ gtk_realize (int /*long*/ widget) {
 	return result;
 }
 
-int /*long*/ gtk_window_state_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_window_state_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventWindowState gdkEvent = new GdkEventWindowState ();
 	OS.memmove (gdkEvent, event, GdkEventWindowState.sizeof);
 	minimized = (gdkEvent.new_window_state & OS.GDK_WINDOW_STATE_ICONIFIED) != 0;
@@ -1418,13 +1418,13 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return result;
 }
 
-void setCursor (int /*long*/ cursor) {
+void setCursor (long /*int*/ cursor) {
 	if (enableWindow != 0) {
 		OS.gdk_window_set_cursor (enableWindow, cursor);
 		if (!OS.GDK_WINDOWING_X11 ()) {
 			OS.gdk_flush ();
 		} else {
-			int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+			long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 			OS.XFlush (xDisplay);
 		}
 	}
@@ -1457,9 +1457,9 @@ public void setEnabled (boolean enabled) {
 			enableWindow = 0;
 		}
 	} else {
-		int /*long*/ parentHandle = shellHandle;
+		long /*int*/ parentHandle = shellHandle;
 		OS.gtk_widget_realize (parentHandle);
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);
 		Rectangle rect = getBounds ();
 		GdkWindowAttr attributes = new GdkWindowAttr ();
 		attributes.width = rect.width;
@@ -1474,7 +1474,7 @@ public void setEnabled (boolean enabled) {
 				if (!OS.GDK_WINDOWING_X11 ()) {
 					OS.gdk_flush ();
 				} else {
-					int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+					long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 					OS.XFlush (xDisplay);
 				}
 			}
@@ -1548,7 +1548,7 @@ void setInitialBounds () {
 	if ((state & FOREIGN_HANDLE) != 0) return;
 	int width = OS.gdk_screen_width () * 5 / 8;
 	int height = OS.gdk_screen_height () * 5 / 8;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		if (OS.gdk_screen_get_n_monitors (screen) > 1) {
 			int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, paintWindow ());
@@ -1583,13 +1583,13 @@ public void setMenuBar (Menu menu) {
 		if (menu.parent != this) error (SWT.ERROR_INVALID_PARENT);
 	}
 	if (menuBar != null) {
-		int /*long*/ menuHandle = menuBar.handle;
+		long /*int*/ menuHandle = menuBar.handle;
 		OS.gtk_widget_hide (menuHandle);
 		destroyAccelGroup ();
 	}
 	menuBar = menu;
 	if (menuBar != null) {
-		int /*long*/ menuHandle = menu.handle;
+		long /*int*/ menuHandle = menu.handle;
 		OS.gtk_widget_show (menuHandle);
 		createAccelGroup ();
 		menuBar.addAccelerators (accelGroup);
@@ -1835,7 +1835,7 @@ void setZOrder (Control sibling, boolean above, boolean fixRelations) {
 	if (mapped) setZOrder (sibling, above, false, false);
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	mapped = true;
 	display.dispatchEvents = null;
 	return 0;
@@ -1849,12 +1849,12 @@ void showWidget () {
 	if (vboxHandle != 0) OS.gtk_widget_show (vboxHandle);
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	int offset = 16;
 	int [] x = new int [1], y = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, null);
 	y [0] += offset;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorNumber = OS.gdk_screen_get_monitor_at_point (screen, x[0], y[0]);
 		GdkRectangle dest = new GdkRectangle ();
@@ -1872,7 +1872,7 @@ int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*lon
 	return 0;
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	OS.gtk_widget_hide (handle);
 	return 0;
 }
@@ -1918,7 +1918,7 @@ int trimWidth () {
 }
 
 void updateModal () {
-	int /*long*/ group = 0;
+	long /*int*/ group = 0;
 	if (display.getModalDialog () == null) {
 		Shell modal = getModalShell ();
 		int mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;
@@ -2072,16 +2072,16 @@ void releaseWidget () {
 	tooltipsHandle = 0;
 	if (group != 0) OS.g_object_unref (group);
 	group = modalGroup = 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	OS.gdk_window_remove_filter(window, display.filterProc, shellHandle);
 	lastActive = null;
 }
 
-void setToolTipText (int /*long*/ tipWidget, String string) {
+void setToolTipText (long /*int*/ tipWidget, String string) {
 	setToolTipText (tipWidget, tipWidget, string);
 }
 
-void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String string) {
+void setToolTipText (long /*int*/ rootWidget, long /*int*/ tipWidget, String string) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {
 		byte [] buffer = null;
 		if (string != null && string.length () > 0) {
@@ -2097,12 +2097,12 @@ void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String str
 		* 2 fake GDK_MOTION_NOTIFY events (to mimic the GTK call) which 
 		* contain the proper x and y coordinates.
 		*/
-		int /*long*/ eventPtr = 0;
-		int /*long*/ tipWindow = OS.GTK_WIDGET_WINDOW (rootWidget);
+		long /*int*/ eventPtr = 0;
+		long /*int*/ tipWindow = OS.GTK_WIDGET_WINDOW (rootWidget);
 		if (tipWindow != 0) {
 			int [] x = new int [1], y = new int [1];
-			int /*long*/ window = OS.gdk_window_at_pointer (x, y);
-			int /*long*/ [] user_data = new int /*long*/ [1];
+			long /*int*/ window = OS.gdk_window_at_pointer (x, y);
+			long /*int*/ [] user_data = new long /*int*/ [1];
 			if (window != 0) OS.gdk_window_get_user_data (window, user_data);
 			if (tipWidget == user_data [0]) {
 				eventPtr = OS.gdk_event_new (OS.GDK_MOTION_NOTIFY);
@@ -2148,7 +2148,7 @@ void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String str
 		if (OS.GTK_VERSION >= OS.VERSION (2, 2, 1)) {
 			OS.gtk_tooltips_force_window (tooltipsHandle);
 		}
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);
 		if (tipWindow != 0 && tipWindow != tooltipWindow) {
 			OS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);
 			tooltipWindow = tipWindow;
@@ -2164,9 +2164,9 @@ void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String str
 		if (tipWindow != 0) {
 			if ((OS.GTK_WIDGET_FLAGS (tipWidget) & (OS.GTK_REALIZED | OS.GTK_VISIBLE)) != 0) {
 				int [] x = new int [1], y = new int [1];
-				int /*long*/ window = OS.gdk_window_at_pointer (x, y);
+				long /*int*/ window = OS.gdk_window_at_pointer (x, y);
 				if (window != 0) {
-					int /*long*/ [] user_data = new int /*long*/ [1];
+					long /*int*/ [] user_data = new long /*int*/ [1];
 					OS.gdk_window_get_user_data (window, user_data);
 					if (tipWidget == user_data [0]) {
 						/* 
@@ -2180,7 +2180,7 @@ void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String str
 						int handler_id = OS.g_signal_connect (tipWindow, OS.size_request, display.sizeRequestProc, shellHandle);
 						OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);
 						OS.gtk_widget_hide (tipWindow);
-						int /*long*/ data = OS.gtk_tooltips_data_get (tipWidget);
+						long /*int*/ data = OS.gtk_tooltips_data_get (tipWidget);
 						OS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);
 						OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);
 						if (handler_id != 0) OS.g_signal_handler_disconnect (tipWindow, handler_id);
diff --git a/org/eclipse/swt/widgets/Slider.java b/org/eclipse/swt/widgets/Slider.java
index 61d636b..8ca81fc 100644
--- a/org/eclipse/swt/widgets/Slider.java
+++ b/org/eclipse/swt/widgets/Slider.java
@@ -153,7 +153,7 @@ void createHandle (int index) {
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+	long /*int*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 	if (hAdjustment == 0) error (SWT.ERROR_NO_HANDLES);
 	if ((style & SWT.HORIZONTAL) != 0) {
 		handle = OS.gtk_hscrollbar_new (hAdjustment);
@@ -175,20 +175,20 @@ void createHandle (int index) {
 	OS.gtk_container_add (fixedHandle, handle);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	detail = OS.GTK_SCROLL_NONE;
 	dragSent = false;
 	return result;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	detail = (int)/*64*/scroll;
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	Event event = new Event ();
 	dragSent = detail == OS.GTK_SCROLL_JUMP;
 	switch (detail) {
@@ -214,7 +214,7 @@ int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent gtkEvent = new GdkEvent ();
 	OS.memmove (gtkEvent, gdkEvent, GdkEvent.sizeof);
 	switch (gtkEvent.type) {
@@ -247,13 +247,13 @@ void hookEvents () {
 
 void register () {
 	super.register ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	display.addWidget (hAdjustment, this);
 }
 
 void deregister () {
 	super.deregister ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	display.removeWidget (hAdjustment);
 }
 
@@ -284,7 +284,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.step_increment;
@@ -302,7 +302,7 @@ public int getIncrement () {
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.upper;
@@ -320,7 +320,7 @@ public int getMaximum () {
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.lower;
@@ -340,7 +340,7 @@ public int getMinimum () {
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_increment;
@@ -358,7 +358,7 @@ public int getPageIncrement () {
  */
 public int getSelection () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.value;
@@ -377,7 +377,7 @@ public int getSelection () {
  */
 public int getThumb () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_size;
@@ -444,7 +444,7 @@ public void setIncrement (int value) {
  */
 public void setMaximum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int minimum = (int) adjustment.lower;
@@ -474,7 +474,7 @@ public void setMaximum (int value) {
 public void setMinimum (int value) {
 	checkWidget ();
 	if (value < 0) return;
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int maximum = (int) adjustment.upper;
@@ -554,7 +554,7 @@ public void setSelection (int value) {
 public void setThumb (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	value = (int) Math.min (value, (int)(adjustment.upper - adjustment.lower));
@@ -595,7 +595,7 @@ public void setValues (int selection, int minimum, int maximum, int thumb, int i
 	if (increment < 1) return;
 	if (pageIncrement < 1) return;
 	thumb = Math.min (thumb, maximum - minimum);
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	adjustment.value = Math.min (Math.max (selection, minimum), maximum - thumb);
diff --git a/org/eclipse/swt/widgets/Spinner.java b/org/eclipse/swt/widgets/Spinner.java
index b08c147..d593d4d 100644
--- a/org/eclipse/swt/widgets/Spinner.java
+++ b/org/eclipse/swt/widgets/Spinner.java
@@ -45,7 +45,7 @@ import org.eclipse.swt.events.*;
 public class Spinner extends Composite {
 	static final int MIN_ARROW_WIDTH = 6;
 	int lastEventTime = 0;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	
 	/**
@@ -202,8 +202,8 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	if (hHint != SWT.DEFAULT && hHint < 0) hHint = 0;
 	int[] w = new int [1], h = new int [1];
 	OS.gtk_widget_realize (handle);
-	int /*long*/ layout = OS.gtk_entry_get_layout (handle);
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ layout = OS.gtk_entry_get_layout (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -221,7 +221,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 		string = buffer.toString ();
 	}
 	byte [] buffer1 = Converter.wcsToMbcs (null, string, false);
-	int /*long*/ ptr = OS.pango_layout_get_text (layout);
+	long /*int*/ ptr = OS.pango_layout_get_text (layout);
 	int length = OS.strlen (ptr);
 	byte [] buffer2 = new byte [length];
 	OS.memmove (buffer2, ptr, length);	
@@ -239,7 +239,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 public Rectangle computeTrim (int x, int y, int width, int height) {
 	checkWidget ();
 	int xborder = 0, yborder = 0;
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		xborder += OS.gtk_style_get_xthickness (style);
 		yborder += OS.gtk_style_get_ythickness (style);
@@ -251,7 +251,7 @@ public Rectangle computeTrim (int x, int y, int width, int height) {
 		xborder += property [0];
 		yborder += property [0];
 	}
-	int /*long*/ fontDesc = OS.gtk_style_get_font_desc (style);
+	long /*int*/ fontDesc = OS.gtk_style_get_font_desc (style);
 	int fontSize = OS.pango_font_description_get_size (fontDesc);
 	int arrowSize = Math.max (OS.PANGO_PIXELS (fontSize), MIN_ARROW_WIDTH);
 	arrowSize = arrowSize - arrowSize % 2;	
@@ -290,7 +290,7 @@ void createHandle (int index) {
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ adjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
+	long /*int*/ adjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
 	if (adjustment == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_spin_button_new (adjustment, 1, 0);
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
@@ -319,23 +319,23 @@ public void cut () {
 
 void deregister () {
 	super.deregister ();
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return fixedHandle;
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -354,7 +354,7 @@ void fixIM () {
 	*  filter has to be called by SWT.
 	*/	
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -370,7 +370,7 @@ GdkColor getBackgroundColor () {
 
 public int getBorderWidth () {
 	checkWidget();
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		 return OS.gtk_style_get_xthickness (style);
 	}
@@ -394,7 +394,7 @@ GdkColor getForegroundColor () {
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -415,7 +415,7 @@ public int getIncrement () {
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -436,7 +436,7 @@ public int getMaximum () {
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -458,7 +458,7 @@ public int getMinimum () {
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -479,7 +479,7 @@ public int getPageIncrement () {
  */
 public int getSelection () {
 	checkWidget ();	
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -504,7 +504,7 @@ public int getSelection () {
  */
 public String getText () {
 	checkWidget ();
-	int /*long*/ str = OS.gtk_entry_get_text (handle);
+	long /*int*/ str = OS.gtk_entry_get_text (handle);
 	if (str == 0) return "";
 	int length = OS.strlen (str);
 	byte [] buffer = new byte [length];
@@ -551,26 +551,26 @@ public int getDigits () {
 }
 
 String getDecimalSeparator () {
-	int /*long*/ ptr = OS.localeconv_decimal_point ();
+	long /*int*/ ptr = OS.localeconv_decimal_point ();
 	int length = OS.strlen (ptr);
 	byte [] buffer = new byte [length];
 	OS.memmove (buffer, ptr, length);	
 	return new String (Converter.mbcsToWcs (null, buffer));
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
-	int /*long*/ str = OS.gtk_entry_get_text (handle);
+long /*int*/ gtk_changed (long /*int*/ widget) {
+	long /*int*/ str = OS.gtk_entry_get_text (handle);
 	int length = OS.strlen (str);
 	if (length > 0) {
-		int /*long*/ [] endptr = new int /*long*/ [1];
+		long /*int*/ [] endptr = new long /*int*/ [1];
 		double value = OS.g_strtod (str, endptr);
 		if (endptr [0] == str + length) {
-			int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+			long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 			GtkAdjustment adjustment = new GtkAdjustment ();
 			OS.memmove (adjustment, hAdjustment);
 			if (value != adjustment.value && adjustment.lower <= value && value <= adjustment.upper) {
@@ -587,7 +587,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -606,7 +606,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if (!OS.gtk_editable_get_editable (handle)) return 0;
 	int length = OS.strlen (text);
@@ -644,7 +644,7 @@ int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	String newText = verifyText ("", (int)/*64*/start_pos, (int)/*64*/end_pos);
 	if (newText == null) {
@@ -665,17 +665,17 @@ int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	if (cursor != null) setCursor (cursor.handle);
 	return super.gtk_event_after (widget, gdkEvent);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 //	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	if (new_text == 0 || new_text_length == 0) return 0;
 	byte [] buffer = new byte [(int)/*64*/new_text_length];
@@ -684,7 +684,7 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	String newText = verifyText (oldText, pos [0], pos [0]);
@@ -716,15 +716,15 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -732,7 +732,7 @@ int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ widget) {
+long /*int*/ gtk_value_changed (long /*int*/ widget) {
 	postEvent (SWT.Selection);
 	return 0;
 }
@@ -745,7 +745,7 @@ void hookEvents () {
 	OS.g_signal_connect_closure (handle, OS.value_changed, display.closures [VALUE_CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.activate, display.closures [ACTIVATE], false);
 	OS.g_signal_connect_closure (handle, OS.populate_popup, display.closures [POPULATE_POPUP], false);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -754,13 +754,13 @@ void hookEvents () {
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	return OS.GTK_ENTRY_IM_CONTEXT (handle);
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ window = super.paintWindow ();
-	int /*long*/ children = OS.gdk_window_get_children (window);
+long /*int*/ paintWindow () {
+	long /*int*/ window = super.paintWindow ();
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) window = OS.g_list_data (children);
 	OS.g_list_free (children);
 	return window;
@@ -785,7 +785,7 @@ public void paste () {
 
 void register () {
 	super.register ();
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -872,14 +872,14 @@ void setBackgroundColor (GdkColor color) {
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ defaultCursor = 0;
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ defaultCursor = 0;
 	if (cursor == 0) defaultCursor = OS.gdk_cursor_new (OS.GDK_XTERM);
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 	if (cursor == 0) OS.gdk_cursor_destroy (defaultCursor);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 }
 
@@ -898,7 +898,7 @@ void setFontDescription (int /*long*/ font) {
 public void setIncrement (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -924,7 +924,7 @@ public void setIncrement (int value) {
  */
 public void setMaximum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -951,7 +951,7 @@ public void setMaximum (int value) {
  */
 public void setMinimum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -978,7 +978,7 @@ public void setMinimum (int value) {
 public void setPageIncrement (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -1065,7 +1065,7 @@ public void setDigits (int value) {
 	if (value < 0) error (SWT.ERROR_INVALID_ARGUMENT);
 	int digits = OS.gtk_spin_button_get_digits (handle);
 	if (value == digits) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int diff = Math.abs (value - digits);
@@ -1137,9 +1137,9 @@ boolean translateTraversal (GdkEventKey keyEvent) {
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext =  imContext ();
+			long /*int*/ imContext =  imContext ();
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -1158,7 +1158,7 @@ String verifyText (String string, int start, int end) {
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1179,7 +1179,7 @@ String verifyText (String string, int start, int end) {
 		index = 0;
 	}
 	if (string.length () > 0) {
-		int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+		long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 		GtkAdjustment adjustment = new GtkAdjustment ();
 		OS.memmove (adjustment, hAdjustment);
 		if (adjustment.lower < 0 && string.charAt (0) == '-') index++;
diff --git a/org/eclipse/swt/widgets/TabFolder.java b/org/eclipse/swt/widgets/TabFolder.java
index 68ddc4b..a9e27ad 100644
--- a/org/eclipse/swt/widgets/TabFolder.java
+++ b/org/eclipse/swt/widgets/TabFolder.java
@@ -100,8 +100,8 @@ protected void checkSubclass () {
 	if (!isValidSubclass ()) error (SWT.ERROR_INVALID_SUBCLASS);
 }
 
-int /*long*/ childStyle () {
-	int /*long*/ rcStyle = OS.gtk_widget_get_modifier_style (handle);
+long /*int*/ childStyle () {
+	long /*int*/ rcStyle = OS.gtk_widget_get_modifier_style (handle);
 	if ((OS.gtk_rc_style_get_color_flags (rcStyle, 0) & OS.GTK_RC_BG) != 0) return 0;
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_widget_get_style (handle);
@@ -139,7 +139,7 @@ public void addSelectionListener(SelectionListener listener) {
 	addListener(SWT.DefaultSelection,typedListener);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	int index = OS.gtk_notebook_get_current_page (handle);
 	if (index != -1 && items [index] != null) {
 		return items [index].pageHandle;
@@ -164,7 +164,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 public Rectangle computeTrim (int x, int y, int width, int height) {
 	checkWidget();
 	forceResize ();
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int clientX = OS.GTK_WIDGET_X (clientHandle);
 	int clientY = OS.GTK_WIDGET_Y (clientHandle);
 	x -= clientX;
@@ -201,7 +201,7 @@ void createWidget (int index) {
 }
 
 void createItem (TabItem item, int index) {
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	int itemCount = 0;
 	if (list != 0) {
 		itemCount = OS.g_list_length (list);
@@ -213,15 +213,15 @@ void createItem (TabItem item, int index) {
 		System.arraycopy (items, 0, newItems, 0, items.length);
 		items = newItems;
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 0);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 0);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
-	int /*long*/ pageHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
+	long /*int*/ pageHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (pageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, SWITCH_PAGE);
 	OS.gtk_notebook_insert_page (handle, pageHandle, boxHandle, index);
@@ -283,7 +283,7 @@ void destroyItem (TabItem item) {
 	}
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return handle;
 }
 		
@@ -305,7 +305,7 @@ int /*long*/ eventHandle () {
 public TabItem getItem (int index) {
 	checkWidget();
 	if (!(0 <= index && index < getItemCount())) error (SWT.ERROR_INVALID_RANGE);	
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -334,7 +334,7 @@ public TabItem getItem (int index) {
 public TabItem getItem(Point point) {
 	checkWidget();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return null;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -358,7 +358,7 @@ public TabItem getItem(Point point) {
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -428,11 +428,11 @@ public int getSelectionIndex () {
 	return OS.gtk_notebook_get_current_page (handle);
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	return 0;
 }
 
-int /*long*/ gtk_switch_page (int /*long*/ widget, int /*long*/ page, int /*long*/ page_num) {
+long /*int*/ gtk_switch_page (long /*int*/ widget, long /*int*/ page, long /*int*/ page_num) {
 	int index = OS.gtk_notebook_get_current_page (handle);
 	if (index != -1) {
 		Control control = items [index].getControl ();
@@ -477,7 +477,7 @@ void hookEvents () {
 public int indexOf (TabItem item) {
 	checkWidget();
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return -1;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -494,7 +494,7 @@ Point minimumSize (int wHint, int hHint, boolean flushCache) {
 		Control child = children [i];
 		int index = 0;
 		int count = 0;
-		int /*long*/ list = OS.gtk_container_get_children (handle);
+		long /*int*/ list = OS.gtk_container_get_children (handle);
 		if (list != 0) {
 			count = OS.g_list_length (list);
 			OS.g_list_free (list);
@@ -519,7 +519,7 @@ Point minimumSize (int wHint, int hHint, boolean flushCache) {
 boolean mnemonicHit (char key) {
 	int itemCount = getItemCount ();
 	for (int i=0; i<itemCount; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -528,7 +528,7 @@ boolean mnemonicHit (char key) {
 boolean mnemonicMatch (char key) {
 	int itemCount = getItemCount ();
 	for (int i=0; i<itemCount; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -602,7 +602,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TabItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
diff --git a/org/eclipse/swt/widgets/TabItem.java b/org/eclipse/swt/widgets/TabItem.java
index a19d175..b2298ce 100644
--- a/org/eclipse/swt/widgets/TabItem.java
+++ b/org/eclipse/swt/widgets/TabItem.java
@@ -34,7 +34,7 @@ import org.eclipse.swt.graphics.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class TabItem extends Item {
-	int /*long*/ labelHandle, imageHandle, pageHandle;
+	long /*int*/ labelHandle, imageHandle, pageHandle;
 	Control control;
 	TabFolder parent;
 	String toolTipText;
@@ -206,12 +206,12 @@ public String getToolTipText () {
 	return toolTipText;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event (widget, event);
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
@@ -281,7 +281,7 @@ public void setControl (Control control) {
 	if (oldControl != null) oldControl.setVisible (false);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -304,7 +304,7 @@ public void setImage (Image image) {
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff --git a/org/eclipse/swt/widgets/Table.java b/org/eclipse/swt/widgets/Table.java
index 451650d..8cad767 100644
--- a/org/eclipse/swt/widgets/Table.java
+++ b/org/eclipse/swt/widgets/Table.java
@@ -68,9 +68,9 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Table extends Composite {
-	int /*long*/ modelHandle, checkRenderer;
+	long /*int*/ modelHandle, checkRenderer;
 	int itemCount, columnCount, lastIndexOf, sortDirection;
-	int /*long*/ ignoreCell;
+	long /*int*/ ignoreCell;
 	TableItem [] items;
 	TableColumn [] columns;
 	TableItem currentItem;
@@ -170,9 +170,9 @@ static int checkStyle (int style) {
 	return checkBits (style, SWT.SINGLE, SWT.MULTI, 0, 0, 0, 0);
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	if (cell == ignoreCell) return 0;
-	int /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
 	int [] index = new int [1];
 	OS.memmove (index, OS.gtk_tree_path_get_indices (path), 4);
 	TableItem item = _getItem (index[0]);
@@ -223,7 +223,7 @@ int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*lo
 			setData = checkData (item);
 		}
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	if (setData) {
 		ptr [0] = 0;
 		if (isPixbuf) {
@@ -332,7 +332,7 @@ public void addSelectionListener (SelectionListener listener) {
 	addListener (SWT.DefaultSelection, typedListener);
 }
 
-int calculateWidth (int /*long*/ column, int /*long*/ iter) {
+int calculateWidth (long /*int*/ column, long /*int*/ iter) {
 	OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 	/*
 	* Bug in GTK.  The width calculated by gtk_tree_view_column_cell_get_size()
@@ -348,11 +348,11 @@ int calculateWidth (int /*long*/ column, int /*long*/ iter) {
 	int [] w = new int [1];
 	OS.gtk_widget_style_get(handle, OS.focus_line_width, w, 0);
 	width += 2 * w [0];
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ renderer = OS.g_list_data (temp);
+		long /*int*/ renderer = OS.g_list_data (temp);
 		if (renderer != 0) {
 			OS.gtk_cell_renderer_get_size (renderer, handle, null, null, null, w, null);
 			width += w [0];
@@ -524,18 +524,18 @@ void createColumn (TableColumn column, int index) {
 			modelIndex++;
 		}
 		if (modelIndex == modelLength) {
-			int /*long*/ oldModel = modelHandle;
-			int /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
-			int /*long*/ newModel = OS.gtk_list_store_newv (types.length, types);
+			long /*int*/ oldModel = modelHandle;
+			long /*int*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
+			long /*int*/ newModel = OS.gtk_list_store_newv (types.length, types);
 			if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			for (int i=0; i<itemCount; i++) {
-				int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+				long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 				if (newItem == 0) error (SWT.ERROR_NO_HANDLES);
 				OS.gtk_list_store_append (newModel, newItem);
 				TableItem item = items [i];
 				if (item != null) {
-					int /*long*/ oldItem = item.handle;
+					long /*int*/ oldItem = item.handle;
 					for (int j=0; j<modelLength; j++) {
 						OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 						OS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);
@@ -553,7 +553,7 @@ void createColumn (TableColumn column, int index) {
 			modelHandle = newModel;
 		}
 	}
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	if (index == 0 && columnCount > 0) {
 		TableColumn checkColumn = columns [0];
@@ -610,7 +610,7 @@ void createHandle (int index) {
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	scrolledHandle = OS.gtk_scrolled_window_new (0, 0);
 	if (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ [] types = getColumnTypes (1);
+	long /*int*/ [] types = getColumnTypes (1);
 	modelHandle = OS.gtk_list_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
@@ -625,7 +625,7 @@ void createHandle (int index) {
 	OS.gtk_container_add (scrolledHandle, handle);
 	
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -669,11 +669,11 @@ void createItem (TableColumn column, int index) {
 	} else {
 		createColumn (column, index);
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 3);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 3);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
@@ -682,7 +682,7 @@ void createItem (TableColumn column, int index) {
 	column.labelHandle = labelHandle;
 	column.imageHandle = imageHandle;	
 	OS.gtk_tree_view_column_set_widget (column.handle, boxHandle);
-	int /*long*/ widget = OS.gtk_widget_get_parent (boxHandle);
+	long /*int*/ widget = OS.gtk_widget_get_parent (boxHandle);
 	while (widget != handle) {
 		if (OS.GTK_IS_BUTTON (widget)) {
 			column.buttonHandle = widget;
@@ -748,7 +748,7 @@ void createItem (TableItem item, int index) {
 	items [index] = item;
 }
 
-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
+void createRenderers (long /*int*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
 	OS.gtk_tree_view_column_clear (columnHandle);
 	if ((style & SWT.CHECK) != 0 && check) {
 		OS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);
@@ -771,9 +771,9 @@ void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check,
 			OS.g_object_set_qdata (checkRenderer, Display.SWT_OBJECT_INDEX1, columnHandle);
 		}
 	}
-	int /*long*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
+	long /*int*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
 	if (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
 	
 	if (ownerDraw) {
@@ -877,7 +877,7 @@ public void deselect (int index) {
 	checkWidget();
 	if (index < 0 || index >= itemCount) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_iter (selection, _getItem (index).handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -902,7 +902,7 @@ public void deselect (int index) {
 public void deselect (int start, int end) {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		if (index < 0 || index >= itemCount) continue;
@@ -933,7 +933,7 @@ public void deselect (int [] indices) {
 	checkWidget();
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<indices.length; i++) {
 		int index = indices[i];
@@ -955,7 +955,7 @@ public void deselect (int [] indices) {
 public void deselectAll () {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -969,7 +969,7 @@ void destroyItem (TableColumn column) {
 		index++;
 	}
 	if (index == columnCount) return;
-	int /*long*/ columnHandle = column.handle;
+	long /*int*/ columnHandle = column.handle;
 	if (columnCount == 1) {
 		firstCustomDraw = column.customDraw;
 	}
@@ -977,18 +977,18 @@ void destroyItem (TableColumn column) {
 	columns [columnCount] = null;
 	OS.gtk_tree_view_remove_column (handle, columnHandle);
 	if (columnCount == 0) {
-		int /*long*/ oldModel = modelHandle;
-		int /*long*/[] types = getColumnTypes (1);
-		int /*long*/ newModel = OS.gtk_list_store_newv (types.length, types);
+		long /*int*/ oldModel = modelHandle;
+		long /*int*/[] types = getColumnTypes (1);
+		long /*int*/ newModel = OS.gtk_list_store_newv (types.length, types);
 		if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ [] ptr = new int /*long*/ [1];
+		long /*int*/ [] ptr = new long /*int*/ [1];
 		for (int i=0; i<itemCount; i++) {
-			int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (newItem == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_list_store_append (newModel, newItem);
 			TableItem item = items [i];
 			if (item != null) {
-				int /*long*/ oldItem = item.handle;
+				long /*int*/ oldItem = item.handle;
 				for (int j=0; j<FIRST_COLUMN; j++) {
 					OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 					OS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);
@@ -1019,7 +1019,7 @@ void destroyItem (TableColumn column) {
 		for (int i=0; i<itemCount; i++) {
 			TableItem item = items [i];
 			if (item != null) {
-				int /*long*/ iter = item.handle;
+				long /*int*/ iter = item.handle;
 				int modelIndex = column.modelIndex;
 				OS.gtk_list_store_set (modelHandle, iter, modelIndex + CELL_PIXBUF, 0, -1);
 				OS.gtk_list_store_set (modelHandle, iter, modelIndex + CELL_TEXT, 0, -1);
@@ -1076,7 +1076,7 @@ void destroyItem (TableItem item) {
 		index++;
 	}
 	if (index == itemCount) return;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_remove (modelHandle, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1088,10 +1088,10 @@ void destroyItem (TableItem item) {
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1104,7 +1104,7 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -1142,13 +1142,13 @@ public Rectangle getClientArea () {
 	checkWidget ();
 	forceResize ();
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binX = new int [1], binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, binX, binY);
 	int [] fixedX = new int [1], fixedY = new int [1];
 	OS.gdk_window_get_origin (fixedWindow, fixedX, fixedY);
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 	return new Rectangle (fixedX [0] - binX [0], fixedY [0] - binY [0], width, height);
@@ -1213,8 +1213,8 @@ public int getColumnCount () {
 	return columnCount;
 }
 
-int /*long*/[] getColumnTypes (int columnCount) {
-	int /*long*/[] types = new int /*long*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
+long /*int*/[] getColumnTypes (int columnCount) {
+	long /*int*/[] types = new long /*int*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
 	// per row data
 	types [CHECKED_COLUMN] = OS.G_TYPE_BOOLEAN ();
 	types [GRAYED_COLUMN] = OS.G_TYPE_BOOLEAN ();
@@ -1263,13 +1263,13 @@ int /*long*/[] getColumnTypes (int columnCount) {
 public int [] getColumnOrder () {
 	checkWidget ();
 	if (columnCount == 0) return new int [0];
-	int /*long*/ list = OS.gtk_tree_view_get_columns (handle);
+	long /*int*/ list = OS.gtk_tree_view_get_columns (handle);
 	if (list == 0) return new int [0];
 	int  i = 0, count = OS.g_list_length (list);
 	int [] order = new int [count];
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ column = OS.g_list_data (temp);
+		long /*int*/ column = OS.g_list_data (temp);
 		if (column != 0) {
 			for (int j=0; j<columnCount; j++) {
 				if (columns [j].handle == column) {
@@ -1319,11 +1319,11 @@ public TableColumn [] getColumns () {
 }
 
 TableItem getFocusItem () {
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return null;
 	TableItem item = null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	if (indices != 0) {
 		int [] index = new int []{-1};
 		OS.memmove (index, indices, 4);
@@ -1371,7 +1371,7 @@ public int getHeaderHeight () {
 		GtkRequisition requisition = new GtkRequisition ();
 		int height = 0;
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ buttonHandle = columns [i].buttonHandle;
+			long /*int*/ buttonHandle = columns [i].buttonHandle;
 			if (buttonHandle != 0) {
 				OS.gtk_widget_size_request (buttonHandle, requisition);
 				height = Math.max (height, requisition.height);
@@ -1380,8 +1380,8 @@ public int getHeaderHeight () {
 		return height;
 	}
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, null, binY);
 	int [] fixedY = new int [1];
@@ -1458,11 +1458,11 @@ public TableItem getItem (int index) {
 public TableItem getItem (Point point) {
 	checkWidget();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, point.x, point.y, path, null, null, null)) return null;
 	if (path [0] == 0) return null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	TableItem item = null;
 	if (indices != 0) {
 		int [] index = new int [1];
@@ -1502,7 +1502,7 @@ public int getItemCount () {
 public int getItemHeight () {
 	checkWidget();
 	if (itemCount == 0) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 		int [] w = new int [1], h = new int [1];
 		ignoreSize = true;
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1510,11 +1510,11 @@ public int getItemHeight () {
 		return h [0];
 	} else {
 		int height = 0;
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		int columnCount = Math.max (1, this.columnCount);
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 			OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 			int [] w = new int [1], h = new int [1];
 			OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1577,14 +1577,14 @@ public boolean getLinesVisible() {
 	return OS.gtk_tree_view_get_rules_hint (handle);
 }
 
-int /*long*/ getPixbufRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getPixbufRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ pixbufRenderer = 0;
+	long /*int*/ pixbufRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {
 			pixbufRenderer = renderer;
 			break;
@@ -1613,7 +1613,7 @@ int /*long*/ getPixbufRenderer (int /*long*/ column) {
  */
 public TableItem [] getSelection () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
@@ -1627,15 +1627,15 @@ public TableItem [] getSelection () {
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -1663,7 +1663,7 @@ public TableItem [] getSelection () {
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -1689,25 +1689,25 @@ public int getSelectionIndex () {
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 		OS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);
 		if (display.treeSelectionLength == 0) return -1;
 		return display.treeSelection [0];
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	/*
 	* Bug in GTK.  gtk_tree_selection_get_selected_rows() segmentation faults
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] index = new int [1];
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				OS.memmove (index, indices, 4);
 				break;
@@ -1737,7 +1737,7 @@ public int getSelectionIndex () {
  */
 public int [] getSelectionIndices () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
@@ -1752,15 +1752,15 @@ public int [] getSelectionIndices () {
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -1818,14 +1818,14 @@ public int getSortDirection () {
 	return sortDirection;
 }
 
-int /*long*/ getTextRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getTextRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ textRenderer = 0;
+	long /*int*/ textRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_TEXT (renderer)) {
 			textRenderer = renderer;
 			break;
@@ -1850,22 +1850,22 @@ int /*long*/ getTextRenderer (int /*long*/ column) {
  */
 public int getTopIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return 0;
 	if (path [0] == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 	int[] index = new int [1];
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
 	return index [0];
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select table view, when multiple items are already
@@ -1877,10 +1877,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	*/
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1895,10 +1895,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1918,13 +1918,13 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	TableItem item = getFocusItem ();
 	if (item != null) {
 		Event event = new Event ();
@@ -1934,8 +1934,8 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -1959,8 +1959,8 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -1973,15 +1973,15 @@ int /*long*/ gtk_popup_menu (int /*long*/ widget) {
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_motion_notify_event (widget, event);
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	TableItem item = null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 	if (indices != 0) {
 		int [] index = new int []{-1};
 		OS.memmove (index, indices, 4);
@@ -2007,10 +2007,10 @@ int gtk_row_inserted (int model, int path, int iter) {
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (pathStr);
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (pathStr);
 	if (path == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 	if (indices != 0) {
 		int [] index = new int [1];
 		OS.memmove (index, indices, 4);
@@ -2025,7 +2025,7 @@ int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	/*
 	 * Bug in GTK.  For some reason, gtk_widget_size_request() fails
 	 * to include the height of the tree view items when there are
@@ -2036,17 +2036,17 @@ void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
 		super.gtk_widget_size_request (widget, requisition);
 		return;
 	}
-	int /*long*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
+	long /*int*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
 	boolean fixVisible = columns != 0;
 	while (list != 0) {
-		int /*long*/ column = OS.g_list_data (list);
+		long /*int*/ column = OS.g_list_data (list);
 		if (OS.gtk_tree_view_column_get_visible (column)) {
 			fixVisible = false;
 			break;
 		}
 		list = OS.g_list_next (list);
 	}
-	int /*long*/ columnHandle = 0;
+	long /*int*/ columnHandle = 0;
 	if (fixVisible) {
 		columnHandle = OS.g_list_data (columns);
 		OS.gtk_tree_view_column_set_visible (columnHandle, true);
@@ -2059,13 +2059,13 @@ void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
 }
 
 void hideFirstColumn () {
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, false);	
 }
 
 void hookEvents () {
 	super.hookEvents ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 	if (checkRenderer != 0) {
@@ -2155,9 +2155,9 @@ public int indexOf (TableItem item) {
  */
 public boolean isSelected (int index) {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	byte [] buffer = Converter.wcsToMbcs (null, Integer.toString (index), true);
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (buffer);
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (buffer);
 	boolean answer = OS.gtk_tree_selection_path_is_selected (selection, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
@@ -2165,7 +2165,7 @@ public boolean isSelected (int index) {
 
 boolean mnemonicHit (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -2173,13 +2173,13 @@ boolean mnemonicHit (char key) {
 
 boolean mnemonicMatch (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -2269,7 +2269,7 @@ void releaseWidget () {
 public void remove (int index) {
 	checkWidget();
 	if (!(0 <= index && index < itemCount)) error (SWT.ERROR_ITEM_NOT_REMOVED);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	TableItem item = items [index];
 	boolean disposed = false;
 	if (item != null) {
@@ -2282,7 +2282,7 @@ public void remove (int index) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	}
 	if (!disposed) {
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 		OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 		OS.gtk_list_store_remove (modelHandle, iter);
 		OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2314,8 +2314,8 @@ public void remove (int start, int end) {
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 	if (fixAccessibility ()) {
 		ignoreAccessibility = true;
@@ -2367,9 +2367,9 @@ public void remove (int [] indices) {
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	int last = -1;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 	if (fixAccessibility ()) {
 		ignoreAccessibility = true;
@@ -2423,7 +2423,7 @@ public void removeAll () {
 	}
 	items = new TableItem [4];
 	itemCount = 0;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	if (fixAccessibility ()) {
 		ignoreAccessibility = true;
@@ -2485,16 +2485,16 @@ public void removeSelectionListener(SelectionListener listener) {
 	eventTable.unhook (SWT.DefaultSelection,listener);	
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
-	int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ widget, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
+	long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
-	int /*long*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
+	long /*int*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
 	if (!ignoreSize && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
-		int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+		long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 		TableItem item = null;
 		if (iter != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			int [] buffer = new int [1];
 			OS.memmove (buffer, OS.gtk_tree_path_get_indices (path), 4);
 			int index = buffer [0];
@@ -2504,7 +2504,7 @@ int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*
 		if (item != null) {
 			int columnIndex = 0;
 			if (columnCount > 0) {
-				int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+				long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 				for (int i = 0; i < columnCount; i++) {
 					if (columns [i].handle == columnHandle) {
 						columnIndex = i;
@@ -2543,18 +2543,18 @@ int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*
 	return result;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ widget, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ widget, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	TableItem item = null;
-	int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+	long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 	if (iter != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		int [] buffer = new int [1];
 		OS.memmove (buffer, OS.gtk_tree_path_get_indices (path), 4);
 		int index = buffer [0];
 		item = _getItem (index);
 		OS.gtk_tree_path_free (path);
 	}
-	int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+	long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 	int columnIndex = 0;
 	if (columnCount > 0) {
 		for (int i = 0; i < columnCount; i++) {
@@ -2568,7 +2568,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 		if (OS.GTK_IS_CELL_RENDERER_TOGGLE (cell) || (OS.GTK_IS_CELL_RENDERER_PIXBUF (cell) && (columnIndex != 0 || (style & SWT.CHECK) == 0))) {
 			drawFlags = (int)/*64*/flags;
 			drawState = SWT.FOREGROUND;
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			OS.gtk_tree_model_get (modelHandle, item.handle, Table.BACKGROUND_COLUMN, ptr, -1);
 			if (ptr [0] == 0) {
 				int modelIndex = columnCount == 0 ? Table.FIRST_COLUMN : columns [columnIndex].modelIndex;
@@ -2579,7 +2579,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 			if ((flags & OS.GTK_CELL_RENDERER_FOCUSED) != 0) drawState |= SWT.FOCUSED;			
 			
 			GdkRectangle rect = new GdkRectangle ();
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 			OS.gtk_tree_path_free (path);
 			
@@ -2623,7 +2623,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 				if ((drawState & SWT.SELECTED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_SELECTED;
 				if ((drawState & SWT.FOCUSED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_FOCUSED;
 				if ((drawState & SWT.SELECTED) != 0) {
-					int /*long*/ style = OS.gtk_widget_get_style (widget);					
+					long /*int*/ style = OS.gtk_widget_get_style (widget);					
 					//TODO - parity and sorted
 					byte[] detail = Converter.wcsToMbcs (null, "cell_odd", true);
 					OS.gtk_paint_flat_box (style, window, OS.GTK_STATE_SELECTED, OS.GTK_SHADOW_NONE, rect, widget, detail, rect.x, rect.y, rect.width, rect.height);
@@ -2634,7 +2634,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 			}
 		}
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if ((drawState & SWT.BACKGROUND) != 0 && (drawState & SWT.SELECTED) == 0) {
 		GC gc = new GC (this);
 		gc.setBackground (item.getBackground (columnIndex));
@@ -2644,7 +2644,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 		gc.dispose ();
 	}
 	if ((drawState & SWT.FOREGROUND) != 0 || OS.GTK_IS_CELL_RENDERER_TOGGLE (cell)) {
-		int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+		long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 		GtkCellRendererClass klass = new GtkCellRendererClass ();
 		OS.memmove (klass, g_class);
 		if (drawForeground != null && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
@@ -2656,7 +2656,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 		if (OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
 			if (hooks (SWT.PaintItem)) {
 				GdkRectangle rect = new GdkRectangle ();
-				int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+				long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 				OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 				OS.gtk_tree_path_free (path);
 				ignoreSize = true;
@@ -2707,8 +2707,8 @@ void resetCustomDraw () {
 	for (int i=0; i<end; i++) {
 		boolean customDraw = columnCount != 0 ? columns [i].customDraw : firstCustomDraw;
 		if (customDraw) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
-			int /*long*/ textRenderer = getTextRenderer (column);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ textRenderer = getTextRenderer (column);
 			OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, 0, 0, 0);
 			if (columnCount != 0) columns [i].customDraw = false;
 		}
@@ -2732,12 +2732,12 @@ public void select (int index) {
 	checkWidget();
 	if (!(0 <= index && index < itemCount))  return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	TableItem item = _getItem (index);
 	OS.gtk_tree_selection_select_iter (selection, item.handle);
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 		OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 		OS.gtk_tree_path_free (path);
 	}
@@ -2775,13 +2775,13 @@ public void select (int start, int end) {
 	start = Math.max (0, start);
 	end = Math.min (end, itemCount - 1);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		TableItem item = _getItem (index);
 		OS.gtk_tree_selection_select_iter (selection, item.handle);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -2819,7 +2819,7 @@ public void select (int [] indices) {
 	int length = indices.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<length; i++) {
 		int index = indices [i];
@@ -2827,7 +2827,7 @@ public void select (int [] indices) {
 		TableItem item = _getItem (index);
 		OS.gtk_tree_selection_select_iter (selection, item.handle);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -2851,7 +2851,7 @@ public void selectAll () {
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2866,8 +2866,8 @@ void selectFocusIndex (int index) {
 	*/
 	if (!(0 <= index && index < itemCount))  return;
 	TableItem item = _getItem (index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 	/*
@@ -2889,9 +2889,9 @@ void setBackgroundColor (GdkColor color) {
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
+void setBackgroundPixmap (long /*int*/ pixmap) {
 	super.setBackgroundPixmap (pixmap);
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);	
 }
 
@@ -2955,13 +2955,13 @@ public void setColumnOrder (int [] order) {
 		seen [index] = true;
 	}
 	for (int i=0; i<order.length; i++) {
-		int /*long*/ column = columns [order [i]].handle;
-		int /*long*/ baseColumn = i == 0 ? 0 : columns [order [i-1]].handle;
+		long /*int*/ column = columns [order [i]].handle;
+		long /*int*/ baseColumn = i == 0 ? 0 : columns [order [i-1]].handle;
 		OS.gtk_tree_view_move_column_after (handle, column, baseColumn);
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TableColumn[] columns = getColumns ();
 	for (int i = 0; i < columns.length; i++) {
@@ -3016,7 +3016,7 @@ public void setItemCount (int count) {
 	System.arraycopy (items, 0, newItems, 0, itemCount);
 	items = newItems;
 	if (isVirtual) {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 		if (fixAccessibility ()) {
 			ignoreAccessibility = true;
@@ -3065,12 +3065,12 @@ public void setLinesVisible (boolean show) {
 
 void setParentBackground () {
 	super.setParentBackground ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);
 }
 
-void setParentWindow (int /*long*/ widget) {
-	int /*long*/ window = eventWindow ();
+void setParentWindow (long /*int*/ widget) {
+	long /*int*/ window = eventWindow ();
 	OS.gtk_widget_set_parent_window (widget, window);
 }
 
@@ -3088,7 +3088,7 @@ public void setRedraw (boolean redraw) {
 	}
 }
 
-void setScrollWidth (int /*long*/ column, TableItem item) {
+void setScrollWidth (long /*int*/ column, TableItem item) {
 	if (columnCount != 0 || currentItem == item) return;
 	/*
 	* Use GTK_TREE_VIEW_COLUMN_GROW_ONLY on GTK versions < 2.3.2
@@ -3345,7 +3345,7 @@ public void setSelection (TableItem [] items) {
 public void setTopIndex (int index) {
 	checkWidget();
 	if (!(0 <= index && index < itemCount)) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, _getItem (index).handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, _getItem (index).handle);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0f, 0f);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
 		/*
@@ -3419,10 +3419,10 @@ boolean showFirstColumn () {
 	*/
 	int columnCount = Math.max (1, this.columnCount);
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 		if (OS.gtk_tree_view_column_get_visible (column)) return false;
 	}
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, true);
 	return true;
 }
@@ -3453,8 +3453,8 @@ public void showItem (TableItem item) {
 	showItem (item.handle);
 }
 
-void showItem (int /*long*/ iter) {
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+void showItem (long /*int*/ iter) {
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	/*
 	* This code intentionally commented.
 	* Bug in GTK.  According to the documentation, gtk_tree_view_scroll_to_cell
@@ -3507,9 +3507,9 @@ public void showSelection () {
 	showItem (item.handle);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) { 
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {
 			int [] index = new int [1];
 			OS.memmove (index, indices, 4);
@@ -3528,12 +3528,12 @@ void updateScrollBarValue (ScrollBar bar) {
 	* The fix is to queue a resize event for each child to
 	* force the position to be corrected.
 	*/
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ widget = OS.g_list_data (temp);
+		long /*int*/ widget = OS.g_list_data (temp);
 		if (widget != 0) OS.gtk_widget_queue_resize  (widget);
 		temp = OS.g_list_next (temp);
 	}
diff --git a/org/eclipse/swt/widgets/TableColumn.java b/org/eclipse/swt/widgets/TableColumn.java
index 4a62dfe..b75688f 100644
--- a/org/eclipse/swt/widgets/TableColumn.java
+++ b/org/eclipse/swt/widgets/TableColumn.java
@@ -36,7 +36,7 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class TableColumn extends Item {
-	int /*long*/ labelHandle, imageHandle, buttonHandle;
+	long /*int*/ labelHandle, imageHandle, buttonHandle;
 	Table parent;
 	int modelIndex, lastButton, lastTime, lastX, lastWidth;
 	boolean customDraw, useFixedWidth;
@@ -324,7 +324,7 @@ public int getWidth () {
 	return OS.gtk_tree_view_column_get_width (handle);
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	/*
 	* There is no API to get a double click on a table column.  Normally, when
 	* the mouse is double clicked, this is indicated by GDK_2BUTTON_PRESS
@@ -334,7 +334,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	*/
 	boolean doubleClick = false;
 	boolean postEvent = true;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -366,7 +366,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -382,11 +382,11 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	useFixedWidth = false;
 	int x = OS.GTK_WIDGET_X (widget);
 	int width = OS.GTK_WIDGET_WIDTH (widget);
@@ -438,7 +438,7 @@ public void pack () {
 			}
 		}
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter_first (parent.modelHandle, iter)) {
 			do {
 				width = Math.max (width, parent.calculateWidth (handle, iter));
@@ -545,7 +545,7 @@ public void setAlignment (int alignment) {
 	parent.createRenderers (handle, modelIndex, index == 0, style);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -560,7 +560,7 @@ public void setImage (Image image) {
 		}
 		int imageIndex = headerImageList.indexOf (image);
 		if (imageIndex == -1) imageIndex = headerImageList.add (image);
-		int /*long*/ pixbuf = headerImageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = headerImageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff --git a/org/eclipse/swt/widgets/TableItem.java b/org/eclipse/swt/widgets/TableItem.java
index f348437..358d0be 100644
--- a/org/eclipse/swt/widgets/TableItem.java
+++ b/org/eclipse/swt/widgets/TableItem.java
@@ -127,7 +127,7 @@ static Table checkNull (Table control) {
 }
 
 Color _getBackground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.BACKGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getBackground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -138,7 +138,7 @@ Color _getBackground () {
 Color _getBackground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getBackground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_BACKGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getBackground ();
@@ -148,13 +148,13 @@ Color _getBackground (int index) {
 }
 
 boolean _getChecked () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.CHECKED_COLUMN, ptr, -1);
 	return ptr [0] != 0;
 }
 
 Color _getForeground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.FOREGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getForeground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -165,7 +165,7 @@ Color _getForeground () {
 Color _getForeground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getForeground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex =  parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_FOREGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getForeground ();
@@ -177,7 +177,7 @@ Color _getForeground (int index) {
 Image _getImage (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return null;
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_PIXBUF, ptr, -1);
 	if (ptr [0] == 0) return null;
@@ -190,7 +190,7 @@ Image _getImage (int index) {
 String _getText (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return "";
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_TEXT, ptr, -1);
 	if (ptr [0] == 0) return "";
@@ -269,14 +269,14 @@ public Rectangle getBounds () {
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -357,15 +357,15 @@ public Color getBackground (int index) {
 public Rectangle getBounds (int index) {
 	checkWidget();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
@@ -549,18 +549,18 @@ public Image getImage (int index) {
 public Rectangle getImageBounds (int index) {
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle ();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
 	OS.gtk_tree_path_free (path);
@@ -675,19 +675,19 @@ public Rectangle getTextBounds (int index) {
 	if (0 > index || index > count - 1) return new Rectangle (0, 0, 0, 0);
 	// TODO fully test on early and later versions of GTK
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -735,12 +735,12 @@ public Rectangle getTextBounds (int index) {
 
 void redraw () {
 	if ((OS.GTK_WIDGET_FLAGS (parent.handle) & OS.GTK_REALIZED) != 0) {
-		int /*long*/ parentHandle = parent.handle;
-		int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+		long /*int*/ parentHandle = parent.handle;
+		long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 		GdkRectangle rect = new GdkRectangle ();
 		OS.gtk_tree_view_get_cell_area (parentHandle, path, 0, rect);
 		OS.gtk_tree_path_free (path);
-		int /*long*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
+		long /*int*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
 		rect.x = 0;
 		int [] w = new int [1], h = new int [1];
 		OS.gdk_drawable_get_size (window, w, h);
@@ -845,16 +845,16 @@ public void setBackground (int index, Color color) {
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -918,7 +918,7 @@ public void setFont (Font font){
 	if (oldFont == font) return;
 	this.font = font;
 	if (oldFont != null && oldFont.equals (font)) return;
-	int /*long*/ fontHandle = font != null ? font.handle : 0;
+	long /*int*/ fontHandle = font != null ? font.handle : 0;
 	OS.gtk_list_store_set (parent.modelHandle, handle, Table.FONT_COLUMN, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -969,7 +969,7 @@ public void setFont (int index, Font font) {
 	if (oldFont != null && oldFont.equals (font)) return;
 
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
-	int /*long*/ fontHandle  = font != null ? font.handle : 0;
+	long /*int*/ fontHandle  = font != null ? font.handle : 0;
 	OS.gtk_list_store_set (parent.modelHandle, handle, modelIndex + Table.CELL_FONT, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -987,16 +987,16 @@ public void setFont (int index, Font font) {
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1092,16 +1092,16 @@ public void setForeground (int index, Color color){
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1134,7 +1134,7 @@ public void setGrayed (boolean grayed) {
 	* GTK+'s "inconsistent" state does not match SWT's concept of grayed.
 	* Render checked+grayed as "inconsistent", unchecked+grayed as blank.
 	*/
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.CHECKED_COLUMN, ptr, -1);
 	OS.gtk_list_store_set (parent.modelHandle, handle, Table.GRAYED_COLUMN, ptr [0] == 0 ? false : grayed, -1);
 	cached = true;
@@ -1164,7 +1164,7 @@ public void setImage (int index, Image image) {
 	}
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return;
-	int /*long*/ pixbuf = 0;
+	long /*int*/ pixbuf = 0;
 	if (image != null) {
 		ImageList imageList = parent.imageList;
 		if (imageList == null) imageList = parent.imageList = new ImageList ();
@@ -1192,10 +1192,10 @@ public void setImage (int index, Image image) {
 	if ((parent.style & SWT.VIRTUAL) != 0 && parent.currentItem == null) {
 		if (OS.GTK_VERSION >= OS.VERSION (2, 3, 2)) {
 			if (image != null) {
-				int /*long*/parentHandle = parent.handle;
-				int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
+				long /*int*/parentHandle = parent.handle;
+				long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
 				int [] w = new int [1];
-				int /*long*/ pixbufRenderer = parent.getPixbufRenderer(column);
+				long /*int*/ pixbufRenderer = parent.getPixbufRenderer(column);
 				OS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, null, w);
 				if (w[0] < image.getBounds().width) {
 					/*
@@ -1203,7 +1203,7 @@ public void setImage (int index, Image image) {
 					* are relying on the fact that it is done as part of modifying
 					* the style.
 					*/
-					int /*long*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
+					long /*int*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
 					parent.modifyStyle (parentHandle, style);
 				}
 			} 
diff --git a/org/eclipse/swt/widgets/Text.java b/org/eclipse/swt/widgets/Text.java
index 0973f06..06c9ace 100644
--- a/org/eclipse/swt/widgets/Text.java
+++ b/org/eclipse/swt/widgets/Text.java
@@ -56,9 +56,9 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Text extends Scrollable {
-	int /*long*/ bufferHandle;
+	long /*int*/ bufferHandle;
 	int tabs = 8, lastEventTime = 0;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	boolean doubleClick;
 	String message = "";
@@ -325,7 +325,7 @@ public void append (String string) {
 		OS.gtk_text_buffer_get_end_iter (bufferHandle, position);
 		OS.gtk_text_buffer_insert (bufferHandle, position, buffer, buffer.length);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
@@ -345,8 +345,8 @@ public void clearSelection () {
 		OS.gtk_editable_select_region (handle, position, position);
 	} else {
 		byte [] position = new byte [ITER_SIZEOF];
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, insertMark);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, position);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, position);
@@ -360,13 +360,13 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	int[] w = new int [1], h = new int [1];
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_widget_realize (handle);
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		OS.pango_layout_get_size (layout, w, h);
 	} else {
 		byte [] start =  new byte [ITER_SIZEOF], end  =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_bounds (bufferHandle, start, end);
-		int /*long*/ text = OS.gtk_text_buffer_get_text (bufferHandle, start, end, true);
-		int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, text);
+		long /*int*/ text = OS.gtk_text_buffer_get_text (bufferHandle, start, end, true);
+		long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, text);
 		OS.g_free (text);
 		OS.pango_layout_set_width (layout, wHint * OS.PANGO_SCALE);
 		OS.pango_layout_get_size (layout, w, h);
@@ -376,7 +376,7 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	int height = OS.PANGO_PIXELS (h [0]);
 	if ((style & SWT.SINGLE) != 0 && message.length () > 0) {
 		byte [] buffer = Converter.wcsToMbcs (null, message, true);
-		int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
+		long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
 		OS.pango_layout_get_size (layout, w, h);
 		OS.g_object_unref (layout);
 		width = Math.max (width, OS.PANGO_PIXELS (w [0]));
@@ -395,7 +395,7 @@ public Rectangle computeTrim (int x, int y, int width, int height) {
 	int xborder = 0, yborder = 0;
 	if ((style & SWT.SINGLE) != 0) {
 		if ((style & SWT.BORDER) != 0) {
-			int /*long*/ style = OS.gtk_widget_get_style (handle);
+			long /*int*/ style = OS.gtk_widget_get_style (handle);
 			xborder += OS.gtk_style_get_xthickness (style);
 			yborder += OS.gtk_style_get_ythickness (style);
 		}
@@ -440,7 +440,7 @@ public void copy () {
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_copy_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_copy_clipboard (bufferHandle, clipboard);
 	}
 }
@@ -462,7 +462,7 @@ public void cut () {
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_cut_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_cut_clipboard (bufferHandle, clipboard, OS.gtk_text_view_get_editable (handle));
 	}
 }
@@ -470,7 +470,7 @@ public void cut () {
 void deregister () {
 	super.deregister ();
 	if (bufferHandle != 0) display.removeWidget (bufferHandle);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
@@ -498,9 +498,9 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 			if ((style & SWT.SINGLE) != 0) {
 				int [] index = new int [1];
 				int [] trailing = new int [1];
-				int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+				long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 				OS.pango_layout_xy_to_index (layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, trailing);
-				int /*long*/ ptr = OS.pango_layout_get_text (layout);
+				long /*int*/ ptr = OS.pango_layout_get_text (layout);
 				position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 			} else {
 				byte [] p = new byte [ITER_SIZEOF];
@@ -519,15 +519,15 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	return super.dragDetect (x, y, filter, consume);
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -546,7 +546,7 @@ void fixIM () {
 	*  filter has to be called by SWT.
 	*/
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -563,7 +563,7 @@ GdkColor getBackgroundColor () {
 public int getBorderWidth () {
 	checkWidget();
 	if ((style & SWT.MULTI) != 0) return super.getBorderWidth ();
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		 return OS.gtk_style_get_xthickness (style);
 	}
@@ -587,7 +587,7 @@ public int getCaretLineNumber () {
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) return 0;
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	return OS.gtk_text_iter_get_line (position);
 }
@@ -615,7 +615,7 @@ public Point getCaretLocation () {
 		}
 		int [] offset_x = new int [1], offset_y = new int [1];
 		OS.gtk_entry_get_layout_offsets (handle, offset_x, offset_y);
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		PangoRectangle pos = new PangoRectangle ();
 		OS.pango_layout_index_to_pos (layout, index, pos);
 		int x = offset_x [0] + OS.PANGO_PIXELS (pos.x) - getBorderWidth ();
@@ -623,7 +623,7 @@ public Point getCaretLocation () {
 		return new Point (x, y);
 	}
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_text_view_get_iter_location (handle, position, rect);
@@ -652,7 +652,7 @@ public int getCaretPosition () {
 		return OS.gtk_editable_get_position (handle);
 	}
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	return OS.gtk_text_iter_get_offset (position);
 }
@@ -670,7 +670,7 @@ public int getCaretPosition () {
 public int getCharCount () {
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		return (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	return OS.gtk_text_buffer_get_char_count (bufferHandle);
@@ -839,9 +839,9 @@ public int getOrientation () {
 	if ((style & SWT.SINGLE) != 0) {
 		int [] index = new int [1];
 		int [] trailing = new int [1];
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		OS.pango_layout_xy_to_index (layout, point.x * OS.PANGO_SCALE, point.y * OS.PANGO_SCALE, index, trailing);
-		int /*long*/ ptr = OS.pango_layout_get_text (layout);
+		long /*int*/ ptr = OS.pango_layout_get_text (layout);
 		position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 	} else {
 		byte [] p = new byte [ITER_SIZEOF];
@@ -937,7 +937,7 @@ public int getTabs () {
 
 int getTabWidth (int tabs) {
 	byte[] buffer = Converter.wcsToMbcs(null, " ", true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
 	int [] width = new int [1];
 	int [] height = new int [1];
 	OS.pango_layout_get_size (layout, width, height);
@@ -961,7 +961,7 @@ int getTabWidth (int tabs) {
  */
 public String getText () {
 	checkWidget ();
-	int /*long*/ address;
+	long /*int*/ address;
 	if ((style & SWT.SINGLE) != 0) {
 		address = OS.gtk_entry_get_text (handle);
 	} else {
@@ -999,7 +999,7 @@ public String getText () {
 public String getText (int start, int end) {
 	checkWidget ();
 	if (!(start <= end && 0 <= end)) return "";
-	int /*long*/ address;
+	long /*int*/ address;
 	if ((style & SWT.SINGLE) != 0) {
 		start = Math.max (0, start);
 		address = OS.gtk_editable_get_chars (handle, start, end + 1);
@@ -1100,13 +1100,13 @@ public int getTopPixel () {
 	return lineTop [0];
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -1121,7 +1121,7 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 }
 
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	/*
 	* Feature in GTK.  When the user types, GTK positions
 	* the caret after sending the changed signal.  This
@@ -1130,7 +1130,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1149,7 +1149,7 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if ((style & SWT.SINGLE) != 0) {
 		if (!OS.gtk_editable_get_editable (handle)) return 0;
@@ -1191,7 +1191,7 @@ int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_range (int /*long*/ widget, int /*long*/ iter1, int /*long*/ iter2) {
+long /*int*/ gtk_delete_range (long /*int*/ widget, long /*int*/ iter1, long /*int*/ iter2) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	byte [] startIter = new byte [ITER_SIZEOF];
 	byte [] endIter = new byte [ITER_SIZEOF];
@@ -1227,7 +1227,7 @@ int /*long*/ gtk_delete_range (int /*long*/ widget, int /*long*/ iter1, int /*lo
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	String newText = verifyText ("", (int)/*64*/start_pos, (int)/*64*/end_pos);
 	if (newText == null) {
@@ -1255,7 +1255,7 @@ int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	if (cursor != null) setCursor (cursor.handle);
 	/*
 	* Feature in GTK.  The gtk-entry-select-on-focus property is a global
@@ -1271,7 +1271,7 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 				GdkEventFocus gdkEventFocus = new GdkEventFocus ();
 				OS.memmove (gdkEventFocus, gdkEvent, GdkEventFocus.sizeof);
 				if (gdkEventFocus.in == 0) {
-					int /*long*/ settings = OS.gtk_settings_get_default ();
+					long /*int*/ settings = OS.gtk_settings_get_default ();
 					OS.g_object_set (settings, OS.gtk_entry_select_on_focus, true, 0);
 				}
 				break;
@@ -1280,29 +1280,29 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return super.gtk_event_after (widget, gdkEvent);
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ event) {
 	if ((state & OBSCURED) != 0) return 0;
-	int /*long*/ result = super.gtk_expose_event (widget, event);
+	long /*int*/ result = super.gtk_expose_event (widget, event);
 	if ((style & SWT.SINGLE) != 0 && message.length () > 0) {
-		int /*long*/ str = OS.gtk_entry_get_text (handle);
+		long /*int*/ str = OS.gtk_entry_get_text (handle);
 		if (!OS.GTK_WIDGET_HAS_FOCUS (handle) && OS.strlen (str) == 0) {
 			GdkEventExpose gdkEvent = new GdkEventExpose ();
 			OS.memmove (gdkEvent, event, GdkEventExpose.sizeof);
-			int /*long*/ window = paintWindow ();
+			long /*int*/ window = paintWindow ();
 			int [] w = new int [1], h = new int [1];
 			OS.gdk_drawable_get_size (window, w, h);
 			GtkBorder innerBorder = Display.getEntryInnerBorder (handle);
 			int width = w [0] - innerBorder.left - innerBorder.right;
 			int height = h [0] - innerBorder.top - innerBorder.bottom;
-			int /*long*/ context = OS.gtk_widget_get_pango_context (handle);
-			int /*long*/ lang = OS.pango_context_get_language (context);
-			int /*long*/ metrics = OS.pango_context_get_metrics (context, getFontDescription (), lang);
+			long /*int*/ context = OS.gtk_widget_get_pango_context (handle);
+			long /*int*/ lang = OS.pango_context_get_language (context);
+			long /*int*/ metrics = OS.pango_context_get_metrics (context, getFontDescription (), lang);
 			int ascent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_ascent (metrics));
 			int descent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_descent (metrics));
 			OS.pango_font_metrics_unref (metrics);
 			byte [] buffer = Converter.wcsToMbcs (null, message, true);
-			int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
-			int /*long*/ line = OS.pango_layout_get_line (layout, 0);
+			long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
+			long /*int*/ line = OS.pango_layout_get_line (layout, 0);
 			PangoRectangle rect = new PangoRectangle ();
 			OS.pango_layout_line_get_extents (line, null, rect);
 			rect.y = OS.PANGO_PIXELS (rect.y);
@@ -1325,8 +1325,8 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
 				case SWT.CENTER: x = (width - rect.width) / 2; break;
 				case SWT.RIGHT: x = rtl ? innerBorder.left : width - rect.width; break;
 			}
-			int /*long*/ gc = OS.gdk_gc_new	(window);
-			int /*long*/ style = OS.gtk_widget_get_style (handle);	
+			long /*int*/ gc = OS.gdk_gc_new	(window);
+			long /*int*/ style = OS.gtk_widget_get_style (handle);	
 			GdkColor textColor = new GdkColor ();
 			OS.gtk_style_get_text (style, OS.GTK_STATE_INSENSITIVE, textColor);
 			GdkColor baseColor = new GdkColor ();
@@ -1339,13 +1339,13 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_grab_focus (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_grab_focus (widget);
+long /*int*/ gtk_grab_focus (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_grab_focus (widget);
 	/*
 	* Feature in GTK.  GtkEntry widgets select their text on focus in,
 	* clearing the previous selection.  This behavior is controlled by
@@ -1354,13 +1354,13 @@ int /*long*/ gtk_grab_focus (int /*long*/ widget) {
 	* the entry has done focus in processing.
 	*/
 	if ((style & SWT.SINGLE) != 0 && display.entrySelectOnFocus) {
-		int /*long*/ settings = OS.gtk_settings_get_default ();
+		long /*int*/ settings = OS.gtk_settings_get_default ();
 		OS.g_object_set (settings, OS.gtk_entry_select_on_focus, false, 0);
 	}
 	return result;
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	if (new_text == 0 || new_text_length == 0) return 0;
 	byte [] buffer = new byte [(int)/*64*/new_text_length];
@@ -1369,7 +1369,7 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	/* Use the selection when the text was deleted */
@@ -1408,15 +1408,15 @@ int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -1424,7 +1424,7 @@ int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
 	return 0;
 }
 
-int /*long*/ gtk_text_buffer_insert_text (int /*long*/ widget, int /*long*/ iter, int /*long*/ text, int /*long*/ length) {
+long /*int*/ gtk_text_buffer_insert_text (long /*int*/ widget, long /*int*/ iter, long /*int*/ text, long /*int*/ length) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	byte [] position = new byte [ITER_SIZEOF];
 	OS.memmove (position, iter, position.length);
@@ -1468,7 +1468,7 @@ void hookEvents () {
 		OS.g_signal_connect_closure (bufferHandle, OS.delete_range, display.closures [DELETE_RANGE], false);
 		OS.g_signal_connect_closure (handle, OS.populate_popup, display.closures [POPULATE_POPUP], false);
 	}
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -1477,7 +1477,7 @@ void hookEvents () {
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	if ((style & SWT.SINGLE) != 0) {
 		return OS.gtk_editable_get_editable (handle) ? OS.GTK_ENTRY_IM_CONTEXT (handle) : 0;
 	} 
@@ -1518,15 +1518,15 @@ public void insert (String string) {
 		}
 		OS.gtk_text_buffer_insert (bufferHandle, start, buffer, buffer.length);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, start);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ window = super.paintWindow ();
-		int /*long*/ children = OS.gdk_window_get_children (window);
+		long /*int*/ window = super.paintWindow ();
+		long /*int*/ children = OS.gdk_window_get_children (window);
 		if (children != 0) window = OS.g_list_data (children);
 		OS.g_list_free (children);
 		return window;
@@ -1552,7 +1552,7 @@ public void paste () {
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_paste_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_paste_clipboard (bufferHandle, clipboard, null, OS.gtk_text_view_get_editable (handle));
 	}
 }
@@ -1560,7 +1560,7 @@ public void paste () {
 void register () {
 	super.register ();
 	if (bufferHandle != 0) display.addWidget (bufferHandle, this);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -1575,7 +1575,7 @@ void releaseWidget () {
 		* it around until ownership of the clipboard is lost.
 		*/
 		if ((style & SWT.MULTI) != 0) {
-			int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+			long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 			OS.gtk_text_buffer_paste_clipboard (bufferHandle, clipboard, null, OS.gtk_text_view_get_editable (handle));
 		}
 	}
@@ -1672,8 +1672,8 @@ public void selectAll () {
 		byte [] end =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, start, 0);
 		OS.gtk_text_buffer_get_end_iter (bufferHandle, end);
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, start);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, end);
 	}
@@ -1684,8 +1684,8 @@ void setBackgroundColor (GdkColor color) {
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ defaultCursor = 0;
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ defaultCursor = 0;
 	if (cursor == 0) defaultCursor = OS.gdk_cursor_new (OS.GDK_XTERM);
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 	if (cursor == 0) OS.gdk_cursor_destroy (defaultCursor);
@@ -1764,7 +1764,7 @@ public void setEditable (boolean editable) {
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	setTabStops (tabs);
 }
@@ -1847,7 +1847,7 @@ public void setSelection (int start) {
 		byte [] position =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, position, start);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
@@ -1887,8 +1887,8 @@ public void setSelection (int start, int end) {
 		byte [] endIter =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, startIter, start);
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, endIter, end);
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, startIter);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, endIter);
 	}
@@ -1954,7 +1954,7 @@ public void setTabs (int tabs) {
 void setTabStops (int tabs) {
 	if ((style & SWT.SINGLE) != 0) return;
 	int tabWidth = getTabWidth (tabs);
-	int /*long*/ tabArray = OS.pango_tab_array_new (1, false);
+	long /*int*/ tabArray = OS.pango_tab_array_new (1, false);
 	OS.pango_tab_array_set_tab (tabArray, 0, OS.PANGO_TAB_LEFT, tabWidth);
 	OS.gtk_text_view_set_tabs (handle, tabArray);
 	OS.pango_tab_array_free (tabArray);
@@ -2008,7 +2008,7 @@ public void setText (String string) {
 		OS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, TEXT_BUFFER_INSERT_TEXT);
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, position, 0);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 	sendEvent (SWT.Modify);
@@ -2080,7 +2080,7 @@ public void setTopIndex (int index) {
 public void showSelection () {
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) return;
-	int /*long*/ mark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 	OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
@@ -2091,9 +2091,9 @@ boolean translateTraversal (GdkEventKey keyEvent) {
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext =  imContext ();
+			long /*int*/ imContext =  imContext ();
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -2127,7 +2127,7 @@ String verifyText (String string, int start, int end) {
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
diff --git a/org/eclipse/swt/widgets/ToolBar.java b/org/eclipse/swt/widgets/ToolBar.java
index 2d7306e..a2ace8d 100644
--- a/org/eclipse/swt/widgets/ToolBar.java
+++ b/org/eclipse/swt/widgets/ToolBar.java
@@ -188,11 +188,11 @@ Widget [] computeTabList () {
 	return result;
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
-int /*long*/ enterExitHandle() {
+long /*int*/ enterExitHandle() {
 	return handle;
 }
 
@@ -210,7 +210,7 @@ void fixChildren (Shell newShell, Shell oldShell, Decorations newDecorations, De
 	}
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (lastFocus != null && lastFocus.setFocus ()) return true;
 	ToolItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
@@ -279,7 +279,7 @@ public ToolItem getItem (Point point) {
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -308,13 +308,13 @@ public ToolItem [] getItems () {
 }
 
 ToolItem [] _getItems () {
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return new ToolItem [0];
 	int count = OS.g_list_length (list);
 	ToolItem [] items = new ToolItem [count];
 	int index = 0;
 	for (int i=0; i<count; i++) {
-		int /*long*/ data = OS.g_list_nth_data (list, i);
+		long /*int*/ data = OS.g_list_nth_data (list, i);
 		Widget widget = display.getWidget (data);
 		if (widget != null) items [index++] = (ToolItem) widget;
 	}
@@ -364,9 +364,9 @@ ToolItem [] _getTabItemList () {
 	return tabItemList;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if (!hasFocus ()) return 0;
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	ToolItem [] items = getItems ();
 	int length = items.length;
@@ -387,7 +387,7 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 				if ((item.style & SWT.DROP_DOWN) != 0) {
 					Event event = new Event ();
 					event.detail = SWT.ARROW;
-					int /*long*/ topHandle = item.topHandle ();
+					long /*int*/ topHandle = item.topHandle ();
 					event.x = OS.GTK_WIDGET_X (topHandle);
 					event.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);
 					if ((style & SWT.MIRRORED) != 0) event.x = getClientWidth() - OS.GTK_WIDGET_WIDTH(topHandle) - event.x;
@@ -449,7 +449,7 @@ public int indexOf (ToolItem item) {
 boolean mnemonicHit (char key) {
 	ToolItem [] items = getItems ();
 	for (int i=0; i<items.length; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -458,7 +458,7 @@ boolean mnemonicHit (char key) {
 boolean mnemonicMatch (char key) {
 	ToolItem [] items = getItems ();
 	for (int i=0; i<items.length; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
@@ -504,7 +504,7 @@ int setBounds (int x, int y, int width, int height, boolean move, boolean resize
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	ToolItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
diff --git a/org/eclipse/swt/widgets/ToolItem.java b/org/eclipse/swt/widgets/ToolItem.java
index 6013cfc..2cef5a7 100644
--- a/org/eclipse/swt/widgets/ToolItem.java
+++ b/org/eclipse/swt/widgets/ToolItem.java
@@ -38,7 +38,7 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class ToolItem extends Item {
-	int /*long*/ boxHandle, arrowHandle, arrowBoxHandle, separatorHandle, labelHandle, imageHandle;
+	long /*int*/ boxHandle, arrowHandle, arrowBoxHandle, separatorHandle, labelHandle, imageHandle;
 	ToolBar parent;
 	Control control;
 	Image hotImage, disabledImage;
@@ -246,11 +246,11 @@ void createHandle (int index) {
 	}
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 //	This code is intentionally commented.
-//	int /*long*/ fontHandle = parent.fontHandle ();
+//	long /*int*/ fontHandle = parent.fontHandle ();
 //	GdkColor color = new GdkColor ();
-//	int /*long*/ style = OS.gtk_widget_get_style (fontHandle);
+//	long /*int*/ style = OS.gtk_widget_get_style (fontHandle);
 //	OS.gtk_style_get_fg (style, OS.GTK_STATE_NORMAL, color);
-//	int /*long*/ font = OS.gtk_style_get_font_desc (style);
+//	long /*int*/ font = OS.gtk_style_get_font_desc (style);
 //	setForegroundColor (color);
 //	setFontDescription (font);
 	if ((parent.state & FOREGROUND) != 0) {
@@ -306,7 +306,7 @@ public void dispose () {
 public Rectangle getBounds () {
 	checkWidget();
 	parent.forceResize ();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x, y, width, height;
 	/*
 	* Bug in GTK.  Toolbar items are only allocated their minimum size
@@ -395,7 +395,7 @@ public Image getDisabledImage () {
  */
 public boolean getEnabled () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	return OS.GTK_WIDGET_SENSITIVE (topHandle);
 }
 
@@ -485,11 +485,11 @@ public String getToolTipText () {
 public int getWidth () {
 	checkWidget();
 	parent.forceResize ();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	return OS.GTK_WIDGET_WIDTH (topHandle);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	double x = gdkEvent.x;
@@ -497,14 +497,14 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	double y = gdkEvent.y;
 	gdkEvent.y += OS.GTK_WIDGET_Y (handle);
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
-	int /*long*/ result = parent.gtk_button_press_event (widget, event);
+	long /*int*/ result = parent.gtk_button_press_event (widget, event);
 	gdkEvent.x = x;
 	gdkEvent.y = y;
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	double x = gdkEvent.x;
@@ -512,17 +512,17 @@ int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event)
 	double y = gdkEvent.y;
 	gdkEvent.y += OS.GTK_WIDGET_Y (handle);
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
-	int /*long*/ result = parent.gtk_button_release_event (widget, event);
+	long /*int*/ result = parent.gtk_button_release_event (widget, event);
 	gdkEvent.x = x;
 	gdkEvent.y = y;
 	OS.memmove(event, gdkEvent, GdkEventButton.sizeof);
 	return result;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	Event event = new Event ();
 	if ((style & SWT.DROP_DOWN) != 0) {
-		int /*long*/ eventPtr = OS.gtk_get_current_event ();
+		long /*int*/ eventPtr = OS.gtk_get_current_event ();
 		if (eventPtr != 0) {
 			GdkEvent gdkEvent = new GdkEvent ();
 			OS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);
@@ -538,7 +538,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 					if ((((parent.style & SWT.RIGHT_TO_LEFT) == 0) && x <= (int)x_win [0])
 						|| (((parent.style & SWT.RIGHT_TO_LEFT) != 0) && (int)x_win [0] <= x + width)) {
 						event.detail = SWT.ARROW;
-						int /*long*/ topHandle = topHandle ();
+						long /*int*/ topHandle = topHandle ();
 						event.x = OS.GTK_WIDGET_X (topHandle);
 						if ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - OS.GTK_WIDGET_WIDTH (topHandle) - event.x;
 						event.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);
@@ -558,7 +558,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event (widget, event);
 	drawHotImage = (parent.style & SWT.FLAT) != 0 && hotImage != null;
 	if (drawHotImage && imageHandle != 0) {
@@ -566,7 +566,7 @@ int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
 		if (imageList != null) {
 			int index = imageList.indexOf (hotImage);
 			if (index != -1) {
-				int /*long*/ pixbuf = imageList.getPixbuf (index);
+				long /*int*/ pixbuf = imageList.getPixbuf (index);
 				OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 			}
 		}
@@ -574,7 +574,7 @@ int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -590,13 +590,13 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 	parent.lastFocus = this;
 	return 0;
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_leave_notify_event (widget, event);
 	if (drawHotImage) {
 		drawHotImage = false;
@@ -605,7 +605,7 @@ int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
 			if (imageList != null) {
 				int index = imageList.indexOf (image);
 				if (index != -1) {
-					int /*long*/ pixbuf = imageList.getPixbuf (index);
+					long /*int*/ pixbuf = imageList.getPixbuf (index);
 					OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 				}
 			}
@@ -614,12 +614,12 @@ int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	parent.fixZOrder ();
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
@@ -656,7 +656,7 @@ void hookEvents () {
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT], false);
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [EVENT_AFTER], 0, display.closures[EVENT_AFTER], false);
 
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.g_signal_connect_closure_by_id (topHandle, display.signalIds [MAP], 0, display.closures [MAP], true);
 }
 
@@ -840,7 +840,7 @@ public void setDisabledImage (Image image) {
  */
 public void setEnabled (boolean enabled) {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_set_sensitive (topHandle, enabled);
 	if (enabled) {
 		/*
@@ -868,7 +868,7 @@ boolean setFocus () {
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -927,7 +927,7 @@ public void setImage (Image image) {
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff --git a/org/eclipse/swt/widgets/ToolTip.java b/org/eclipse/swt/widgets/ToolTip.java
index a106744..bee88a4 100644
--- a/org/eclipse/swt/widgets/ToolTip.java
+++ b/org/eclipse/swt/widgets/ToolTip.java
@@ -47,7 +47,7 @@ public class ToolTip extends Widget {
 	String text, message;
 	TrayItem item;
 	int x, y, timerId;
-	int /*long*/ layoutText = 0, layoutMessage = 0;
+	long /*int*/ layoutText = 0, layoutMessage = 0;
 	int [] borderPolygon;
 	boolean spikeAbove, autohide;
 	
@@ -135,7 +135,7 @@ public void addSelectionListener (SelectionListener listener) {
 }
 
 void configure () {
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	OS.gtk_widget_realize (handle);
 	int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, OS.GTK_WIDGET_WINDOW (handle));
 	GdkRectangle dest = new GdkRectangle ();
@@ -249,9 +249,9 @@ void configure () {
 			OS.gtk_window_move (handle, Math.min(dest.width - w, x - w + 17), y - h - TIP_HEIGHT);
 		}
 	}
-	int /*long*/ rgn = OS.gdk_region_polygon (polyline, polyline.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ rgn = OS.gdk_region_polygon (polyline, polyline.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gtk_widget_realize (handle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 	OS.gdk_window_shape_combine_region (window, rgn, 0, 0);
 	OS.gdk_region_destroy (rgn);
 }
@@ -291,13 +291,13 @@ void createWidget (int index) {
 void deregister () {
 	super.deregister ();
 	if ((style & SWT.BALLOON) == 0) {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) display.removeWidget (tipWindow);
 	}
 }
 
 void destroyWidget () {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	if (parent != null) parent.removeTooTip (this);
 	releaseHandle ();
 	if (topHandle != 0 && (state & HANDLE) != 0) {
@@ -330,7 +330,7 @@ Point getLocation () {
 	int x = this.x;
 	int y = this.y;
 	if (item != null) {
-		int /*long*/ itemHandle = item.handle; 
+		long /*int*/ itemHandle = item.handle; 
 		if(OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {
 			GdkRectangle area = new GdkRectangle ();
 			OS.gtk_status_icon_get_geometry (itemHandle, 0, area, 0);
@@ -338,7 +338,7 @@ Point getLocation () {
 			y = area.y + area.height / 2;
 		} else {
 			OS.gtk_widget_realize (itemHandle);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (itemHandle);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (itemHandle);
 			int [] px = new int [1], py = new int [1];
 			OS.gdk_window_get_origin (window, px, py);
 			x = px [0] + OS.GTK_WIDGET_WIDTH (itemHandle) / 2;
@@ -458,19 +458,19 @@ public String getText () {
 public boolean getVisible () {
 	checkWidget ();
 	if ((style & SWT.BALLOON) != 0) return OS.GTK_WIDGET_VISIBLE (handle);
-	int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+	long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 	return OS.GTK_WIDGET_VISIBLE (tipWindow);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	notifyListeners (SWT.Selection, new Event ());
 	setVisible (false);
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ gdkGC = OS.gdk_gc_new (window);
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ gdkGC = OS.gdk_gc_new (window);
 	OS.gdk_draw_polygon (window, gdkGC, 0, borderPolygon, borderPolygon.length / 2);
 	int x = BORDER + PADDING;
 	int y = BORDER + PADDING;
@@ -484,8 +484,8 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 			case SWT.ICON_WARNING: buffer = Converter.wcsToMbcs (null, "gtk-dialog-warning", true); break;
 		}
 		if (buffer != null) {
-			int /*long*/ style = OS.gtk_widget_get_default_style ();
-			int /*long*/ pixbuf = OS.gtk_icon_set_render_icon (
+			long /*int*/ style = OS.gtk_widget_get_default_style ();
+			long /*int*/ pixbuf = OS.gtk_icon_set_render_icon (
 				OS.gtk_icon_factory_lookup_default (buffer), 
 				style,
 				OS.GTK_TEXT_DIR_NONE, 
@@ -511,11 +511,11 @@ int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	Point point = getLocation (); 
 	int x = point.x;
 	int y = point.y;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	OS.gtk_widget_realize (widget);
 	int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, OS.GTK_WIDGET_WINDOW (widget));
 	GdkRectangle dest = new GdkRectangle ();
@@ -534,7 +534,7 @@ void hookEvents () {
 		OS.gtk_widget_add_events (handle, OS.GDK_BUTTON_PRESS_MASK);
 		OS.g_signal_connect_closure (handle, OS.button_press_event, display.closures [BUTTON_PRESS_EVENT], false);
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) {
 			OS.g_signal_connect_closure (tipWindow, OS.size_allocate, display.closures [SIZE_ALLOCATE], false);
 			OS.gtk_widget_add_events (tipWindow, OS.GDK_BUTTON_PRESS_MASK);
@@ -565,7 +565,7 @@ public boolean isVisible () {
 void register () {
 	super.register ();
 	if ((style & SWT.BALLOON) == 0) {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) display.addWidget (tipWindow, this);
 	}
 }
@@ -652,7 +652,7 @@ public void setLocation (int x, int y) {
 	if ((style & SWT.BALLOON) != 0) {
 		if (OS.GTK_WIDGET_VISIBLE (handle)) configure ();
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (OS.GTK_WIDGET_VISIBLE (tipWindow)) {
 			OS.gtk_window_move (tipWindow, x, y);
 		}
@@ -744,13 +744,13 @@ public void setText (String string) {
 		if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 			OS.pango_layout_set_auto_dir (layoutText, false);
 		}
-		int /*long*/ boldAttr = OS.pango_attr_weight_new (OS.PANGO_WEIGHT_BOLD);
+		long /*int*/ boldAttr = OS.pango_attr_weight_new (OS.PANGO_WEIGHT_BOLD);
 		PangoAttribute attribute = new PangoAttribute ();
 		OS.memmove (attribute, boldAttr, PangoAttribute.sizeof);
 		attribute.start_index = 0;
 		attribute.end_index = buffer.length;
 		OS.memmove (boldAttr, attribute, PangoAttribute.sizeof);
-		int /*long*/ attrList = OS.pango_attr_list_new ();
+		long /*int*/ attrList = OS.pango_attr_list_new ();
 		OS.pango_attr_list_insert (attrList, boldAttr);
 		OS.pango_layout_set_attributes (layoutText, attrList);
 		OS.pango_attr_list_unref (attrList);
@@ -784,13 +784,13 @@ public void setVisible (boolean visible) {
 			configure ();
 			OS.gtk_widget_show (handle);
 		} else {
-			int /*long*/ vboxHandle = parent.vboxHandle;
+			long /*int*/ vboxHandle = parent.vboxHandle;
 			StringBuffer string = new StringBuffer (text);
 			if (text.length () > 0) string.append ("\n\n");
 			string.append (message);
 			byte [] buffer = Converter.wcsToMbcs (null, string.toString(), true);
 			OS.gtk_tooltips_set_tip (handle, vboxHandle, buffer, null);
-			int /*long*/ data = OS.gtk_tooltips_data_get (vboxHandle);
+			long /*int*/ data = OS.gtk_tooltips_data_get (vboxHandle);
 			OS.GTK_TOOLTIPS_SET_ACTIVE (handle, data);
 			OS.gtk_tooltips_set_tip (handle, vboxHandle, buffer, null);
 		}		
@@ -799,17 +799,17 @@ public void setVisible (boolean visible) {
 		if ((style & SWT.BALLOON) != 0) {
 			OS.gtk_widget_hide (handle);
 		} else {
-			int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+			long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 			OS.gtk_widget_hide (tipWindow);
 		}
 	}
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	if ((style & SWT.BALLOON) != 0) {
 		OS.gtk_widget_hide (handle);
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		OS.gtk_widget_hide (tipWindow);
 	}
 	return 0;
diff --git a/org/eclipse/swt/widgets/Tracker.java b/org/eclipse/swt/widgets/Tracker.java
index e5729d3..0c47431 100644
--- a/org/eclipse/swt/widgets/Tracker.java
+++ b/org/eclipse/swt/widgets/Tracker.java
@@ -42,7 +42,7 @@ import org.eclipse.swt.events.*;
 public class Tracker extends Widget {
 	Composite parent;
 	Cursor cursor;
-	int /*long*/ lastCursor, window;
+	long /*int*/ lastCursor, window;
 	boolean tracking, cancelled, grabbed, stippled;
 	Rectangle [] rectangles = new Rectangle [0], proportions = rectangles;
 	Rectangle bounds;
@@ -305,14 +305,14 @@ Rectangle [] computeProportions (Rectangle [] rects) {
 }
 
 void drawRectangles (Rectangle [] rects) {
-	int /*long*/ window = OS.GDK_ROOT_PARENT ();
+	long /*int*/ window = OS.GDK_ROOT_PARENT ();
 	if (parent != null) {
 		window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
 	} 
 	if (window == 0) return;
-	int /*long*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ gc = OS.gdk_gc_new (window);
 	if (gc == 0) return;
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
 	GdkColor color = new GdkColor ();
 	OS.gdk_color_white (colormap, color);
 	OS.gdk_gc_set_foreground (gc, color);
@@ -365,17 +365,17 @@ public boolean getStippled () {
 }
 
 boolean grab () {
-	int /*long*/ cursor = this.cursor != null ? this.cursor.handle : 0;
+	long /*int*/ cursor = this.cursor != null ? this.cursor.handle : 0;
 	int result = OS.gdk_pointer_grab (window, false, OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK, window, cursor, OS.GDK_CURRENT_TIME);
 	return result == OS.GDK_GRAB_SUCCESS;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	return gtk_mouse (OS.GDK_BUTTON_RELEASE, widget, event);
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventKey keyEvent = new GdkEventKey ();
 	OS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);
@@ -509,8 +509,8 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ cursor = this.cursor != null ? this.cursor.handle : 0;
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ cursor = this.cursor != null ? this.cursor.handle : 0;
 	if (cursor != lastCursor) {
 		ungrab ();
 		grabbed = grab ();
@@ -519,7 +519,7 @@ int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr
 	return gtk_mouse (OS.GDK_MOTION_NOTIFY, widget, eventPtr);
 }
 
-int /*long*/ gtk_mouse (int eventType, int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_mouse (int eventType, long /*int*/ widget, long /*int*/ eventPtr) {
 	int [] newX = new int [1], newY = new int [1];
 	OS.gdk_window_get_pointer (window, newX, newY, null);
 	if (oldX != newX [0] || oldY != newY [0]) {
@@ -709,7 +709,7 @@ public boolean open () {
 	GdkEvent gdkEvent = new GdkEvent();
 	while (tracking) {
 		if (parent != null && parent.isDisposed ()) break;
-		int /*long*/ eventPtr;
+		long /*int*/ eventPtr;
 		while (true) {
 			eventPtr = OS.gdk_event_get ();
 			if (eventPtr != 0) {
@@ -719,7 +719,7 @@ public boolean open () {
 			}
 		}
 		OS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);
-		int /*long*/ widget = OS.gtk_get_event_widget (eventPtr);
+		long /*int*/ widget = OS.gtk_get_event_widget (eventPtr);
 		switch (gdkEvent.type) {
 			case OS.GDK_MOTION_NOTIFY: gtk_motion_notify_event (widget, eventPtr); break;
 			case OS.GDK_BUTTON_RELEASE: gtk_button_release_event (widget, eventPtr); break;
diff --git a/org/eclipse/swt/widgets/TrayItem.java b/org/eclipse/swt/widgets/TrayItem.java
index 7d1fb1f..99f74ee 100644
--- a/org/eclipse/swt/widgets/TrayItem.java
+++ b/org/eclipse/swt/widgets/TrayItem.java
@@ -40,8 +40,8 @@ public class TrayItem extends Item {
 	Tray parent;
 	ToolTip toolTip;
 	String toolTipText;
-	int /*long*/ imageHandle;
-	int /*long*/ tooltipsHandle;
+	long /*int*/ imageHandle;
+	long /*int*/ tooltipsHandle;
 	ImageList imageList;
 
 /**
@@ -164,20 +164,20 @@ void createHandle (int index) {
 		OS.gtk_container_add (handle, imageHandle);
 		OS.gtk_widget_show (handle);
 		OS.gtk_widget_show (imageHandle);
-		int /*long*/ id = OS.gtk_plug_get_id (handle);
+		long /*int*/ id = OS.gtk_plug_get_id (handle);
 		int monitor = 0;
-		int /*long*/ screen = OS.gdk_screen_get_default ();
+		long /*int*/ screen = OS.gdk_screen_get_default ();
 		if (screen != 0) {
 			monitor = OS.gdk_screen_get_number (screen);
 		}
 		byte [] trayBuffer = Converter.wcsToMbcs (null, "_NET_SYSTEM_TRAY_S" + monitor, true);
-		int /*long*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);
-		int /*long*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-		int /*long*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);
+		long /*int*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);
+		long /*int*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);
 		byte [] messageBuffer = Converter.wcsToMbcs (null, "_NET_SYSTEM_TRAY_OPCODE", true);
-		int /*long*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);
-		int /*long*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);
+		long /*int*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);
+		long /*int*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);
 		XClientMessageEvent event = new XClientMessageEvent ();
 		event.type = OS.ClientMessage;
 		event.window = trayWindow;
@@ -186,7 +186,7 @@ void createHandle (int index) {
 		event.data [0] = OS.GDK_CURRENT_TIME;
 		event.data [1] = OS.SYSTEM_TRAY_REQUEST_DOCK;
 		event.data [2] = id;
-		int /*long*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);
+		long /*int*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);
 		OS.memmove (clientEvent, event, XClientMessageEvent.sizeof);
 		OS.XSendEvent (xDisplay, trayWindow, false, OS.NoEventMask, clientEvent);
 		OS.g_free (clientEvent);
@@ -254,7 +254,7 @@ public String getToolTipText () {
 	return toolTipText;
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.Selection);
 	/*
 	* Feature in GTK. GTK will generate a single-click event before sending 
@@ -262,10 +262,10 @@ int /*long*/ gtk_activate (int /*long*/ widget) {
 	* the single-click as the current event and for the double-click in the
 	* event queue.
 	*/
-	int /*long*/ nextEvent = OS.gdk_event_peek ();
+	long /*int*/ nextEvent = OS.gdk_event_peek ();
 	if (nextEvent != 0) {
 		int nextEventType = OS.GDK_EVENT_TYPE (nextEvent);
-		int /*long*/ currEvent = OS.gtk_get_current_event ();
+		long /*int*/ currEvent = OS.gtk_get_current_event ();
 		int currEventType = 0;
 		if (currEvent != 0) {
 			currEventType = OS.GDK_EVENT_TYPE (currEvent);
@@ -279,7 +279,7 @@ int /*long*/ gtk_activate (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
@@ -295,13 +295,13 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr)
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	if (image != null && image.mask != 0) {
 		if (OS.gdk_drawable_get_depth (image.mask) == 1) {
 			int xoffset = (int) Math.floor (OS.GTK_WIDGET_X (widget) + ((OS.GTK_WIDGET_WIDTH (widget) - OS.GTK_WIDGET_REQUISITION_WIDTH (widget)) * 0.5) + 0.5);
 			int yoffset = (int) Math.floor (OS.GTK_WIDGET_Y (widget) + ((OS.GTK_WIDGET_HEIGHT (widget) - OS.GTK_WIDGET_REQUISITION_HEIGHT (widget)) * 0.5) + 0.5);
 			Rectangle b = image.getBounds();
-			int /*long*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);
+			long /*int*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);
 			if (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			GdkImage gdkImage = new GdkImage();
 			OS.memmove (gdkImage, gdkImagePtr);
@@ -320,7 +320,7 @@ int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
 				}
 			}
 			OS.gtk_widget_realize (handle);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 			OS.gdk_window_shape_combine_region (window, region.handle, 0, 0);
 			region.dispose ();
 		}
@@ -328,7 +328,7 @@ int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
 	return 0;
 }
 
-int /*long*/ gtk_status_icon_popup_menu (int /*long*/ widget, int /*long*/ button, int /*long*/ activate_time) {
+long /*int*/ gtk_status_icon_popup_menu (long /*int*/ widget, long /*int*/ button, long /*int*/ activate_time) {
 	sendEvent (SWT.MenuDetect);
 	return 0;
 }
@@ -468,7 +468,7 @@ public void setImage (Image image) {
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		if (OS.GTK_VERSION >= OS.VERSION (2, 10, 0)) {
 			OS.gtk_status_icon_set_from_pixbuf (handle, pixbuf);
 			OS.gtk_status_icon_set_visible (handle, true);
diff --git a/org/eclipse/swt/widgets/Tree.java b/org/eclipse/swt/widgets/Tree.java
index e6a26ce..12b0605 100644
--- a/org/eclipse/swt/widgets/Tree.java
+++ b/org/eclipse/swt/widgets/Tree.java
@@ -75,9 +75,9 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class Tree extends Composite {
-	int /*long*/ modelHandle, checkRenderer;
+	long /*int*/ modelHandle, checkRenderer;
 	int columnCount, sortDirection;
-	int /*long*/ ignoreCell;
+	long /*int*/ ignoreCell;
 	TreeItem[] items;
 	TreeColumn [] columns;
 	TreeColumn sortColumn;
@@ -155,14 +155,14 @@ void _addListener (int eventType, Listener listener) {
 	}
 }
 
-TreeItem _getItem (int /*long*/ iter) {
+TreeItem _getItem (long /*int*/ iter) {
 	int id = getId (iter, true);
 	if (items [id] != null) return items [id];
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	int depth = OS.gtk_tree_path_get_depth (path);
 	int [] indices = new int [depth];
 	OS.memmove (indices, OS.gtk_tree_path_get_indices (path), 4*depth);
-	int /*long*/ parentIter = 0;
+	long /*int*/ parentIter = 0;
 	if (depth > 1) {
 		OS.gtk_tree_path_up (path);
 		parentIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
@@ -174,8 +174,8 @@ TreeItem _getItem (int /*long*/ iter) {
 	return items [id];
 }
 
-TreeItem _getItem (int /*long*/ parentIter, int index) {
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+TreeItem _getItem (long /*int*/ parentIter, int index) {
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child(modelHandle, iter, parentIter, index);
 	int id = getId (iter, true);
 	OS.g_free (iter);
@@ -183,7 +183,7 @@ TreeItem _getItem (int /*long*/ parentIter, int index) {
 	return items [id] = new TreeItem (this, parentIter, SWT.NONE, index, false);
 }
 
-int getId (int /*long*/ iter, boolean queryModel) {
+int getId (long /*int*/ iter, boolean queryModel) {
 	if (queryModel) {
 		int[] value = new int[1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, value, -1);
@@ -219,7 +219,7 @@ static int checkStyle (int style) {
 	return checkBits (style, SWT.SINGLE, SWT.MULTI, 0, 0, 0, 0);
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	if (cell == ignoreCell) return 0;
 	TreeItem item = _getItem (iter);
 	if (item != null) OS.g_object_set_qdata (cell, Display.SWT_OBJECT_INDEX2, item.handle);
@@ -246,7 +246,7 @@ int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*lo
 		* fix is to only provide the data if the row is visible.
 		*/
 		if (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
 			OS.gtk_widget_realize (handle);
 			GdkRectangle visible = new GdkRectangle ();
 			OS.gtk_tree_view_get_visible_rect (handle, visible);
@@ -268,7 +268,7 @@ int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*lo
 			setData = checkData (item);
 		}
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	if (setData) {
 		if (isPixbuf) {
 			ptr [0] = 0;
@@ -406,7 +406,7 @@ public void addTreeListener(TreeListener listener) {
 	addListener (SWT.Collapse, typedListener);
 }
 
-int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {
+int calculateWidth (long /*int*/ column, long /*int*/ iter, boolean recurse) {
 	OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 	/*
 	* Bug in GTK.  The width calculated by gtk_tree_view_column_cell_get_size()
@@ -420,7 +420,7 @@ int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {
 	
 	int width = 0;
 	int [] w = new int [1];
-	int /*long*/ path = 0;
+	long /*int*/ path = 0;
 
 	if (OS.gtk_tree_view_get_expander_column (handle) == column) {
 		/* indent */
@@ -435,11 +435,11 @@ int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {
 	}
 	OS.gtk_widget_style_get(handle, OS.focus_line_width, w, 0);
 	width += 2 * w [0];
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ renderer = OS.g_list_data (temp);
+		long /*int*/ renderer = OS.g_list_data (temp);
 		if (renderer != 0) {
 			OS.gtk_cell_renderer_get_size (renderer, handle, null, null, null, w, null);
 			width += w [0];
@@ -452,7 +452,7 @@ int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {
 		if (path == 0) path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		boolean expanded = OS.gtk_tree_view_row_expanded (handle, path);
 		if (expanded) {
-			int /*long*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			boolean valid = OS.gtk_tree_model_iter_children (modelHandle, childIter, iter);
 			while (valid) {
 				width = Math.max (width, calculateWidth (column, childIter, true));
@@ -498,8 +498,8 @@ public void clear(int index, boolean all) {
 	clear (0, index, all);
 }
 
-void clear (int /*long*/ parentIter, int index, boolean all) {
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+void clear (long /*int*/ parentIter, int index, boolean all) {
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child(modelHandle, iter, parentIter, index);
 	int[] value = new int[1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, value, -1);
@@ -534,10 +534,10 @@ public void clearAll (boolean all) {
 	checkWidget ();
 	clearAll (all, 0);
 }
-void clearAll (boolean all, int /*long*/ parentIter) {
+void clearAll (boolean all, long /*int*/ parentIter) {
 	int length = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (length == 0) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parentIter);
 	int[] value = new int[1];
 	while (valid) {
@@ -563,13 +563,13 @@ public Point computeSize (int wHint, int hHint, boolean changed) {
 	return size;
 }
 
-void copyModel (int /*long*/ oldModel, int oldStart, int /*long*/ newModel, int newStart, int /*long*/ [] types, int /*long*/ oldParent, int /*long*/ newParent, int modelLength) {
-	int /*long*/ iter = OS.g_malloc(OS.GtkTreeIter_sizeof ());
+void copyModel (long /*int*/ oldModel, int oldStart, long /*int*/ newModel, int newStart, long /*int*/ [] types, long /*int*/ oldParent, long /*int*/ newParent, int modelLength) {
+	long /*int*/ iter = OS.g_malloc(OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_iter_children (oldModel, iter, oldParent))  {
-		int /*long*/ [] oldItems = new int /*long*/ [OS.gtk_tree_model_iter_n_children (oldModel, oldParent)];
+		long /*int*/ [] oldItems = new long /*int*/ [OS.gtk_tree_model_iter_n_children (oldModel, oldParent)];
 		int oldIndex = 0;
 		do {
-			int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (newItem == 0) error (SWT.ERROR_NO_HANDLES);	
 			OS.gtk_tree_store_append (newModel, newItem, newParent);
 			int [] index = new int [1];
@@ -578,9 +578,9 @@ void copyModel (int /*long*/ oldModel, int oldStart, int /*long*/ newModel, int
 			if (index [0] != -1) {
 				item = items [index [0]];
 				if (item != null) {
-					int /*long*/ oldItem = item.handle;
+					long /*int*/ oldItem = item.handle;
 					oldItems[oldIndex++] = oldItem;
-					int /*long*/ [] ptr = new int /*long*/ [1];
+					long /*int*/ [] ptr = new long /*int*/ [1];
 					for (int j = 0; j < FIRST_COLUMN; j++) {
 						OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 						OS.gtk_tree_store_set (newModel, newItem, j, ptr [0], -1);
@@ -605,7 +605,7 @@ void copyModel (int /*long*/ oldModel, int oldStart, int /*long*/ newModel, int
 			}
 		} while (OS.gtk_tree_model_iter_next(oldModel, iter));
 		for (int i = 0; i < oldItems.length; i++) {
-			int /*long*/ oldItem = oldItems [i];
+			long /*int*/ oldItem = oldItems [i];
 			if (oldItem != 0) {
 				OS.gtk_tree_store_remove (oldModel, oldItem);
 				OS.g_free (oldItem);
@@ -638,17 +638,17 @@ void createColumn (TreeColumn column, int index) {
 			modelIndex++;
 		}
 		if (modelIndex == modelLength) {
-			int /*long*/ oldModel = modelHandle;
-			int /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
-			int /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);
+			long /*int*/ oldModel = modelHandle;
+			long /*int*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
+			long /*int*/ newModel = OS.gtk_tree_store_newv (types.length, types);
 			if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-			copyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, modelLength);
+			copyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (long /*int*/)0, (long /*int*/)0, modelLength);
 			OS.gtk_tree_view_set_model (handle, newModel);
 			OS.g_object_unref (oldModel);
 			modelHandle = newModel;
 		}
 	}
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	if (index == 0 && columnCount > 0) {
 		TreeColumn checkColumn = columns [0];
@@ -705,7 +705,7 @@ void createHandle (int index) {
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	scrolledHandle = OS.gtk_scrolled_window_new (0, 0);
 	if (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ [] types = getColumnTypes (1);
+	long /*int*/ [] types = getColumnTypes (1);
 	modelHandle = OS.gtk_tree_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
@@ -720,7 +720,7 @@ void createHandle (int index) {
 	OS.gtk_container_add (scrolledHandle, handle);
 
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -769,11 +769,11 @@ void createItem (TreeColumn column, int index) {
 	} else {
 		createColumn (column, index);
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 3);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 3);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
@@ -782,7 +782,7 @@ void createItem (TreeColumn column, int index) {
 	column.labelHandle = labelHandle;
 	column.imageHandle = imageHandle;	
 	OS.gtk_tree_view_column_set_widget (column.handle, boxHandle);
-	int /*long*/ widget = OS.gtk_widget_get_parent (boxHandle);
+	long /*int*/ widget = OS.gtk_widget_get_parent (boxHandle);
 	while (widget != handle) {
 		if (OS.GTK_IS_BUTTON (widget)) {
 			column.buttonHandle = widget;
@@ -816,7 +816,7 @@ void createItem (TreeColumn column, int index) {
 	}
 }
 
-void createItem (TreeItem item, int /*long*/ parentIter, int index) {
+void createItem (TreeItem item, long /*int*/ parentIter, int index) {
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (index == -1) index = count;
 	if (!(0 <= index && index <= count)) error (SWT.ERROR_INVALID_RANGE);
@@ -836,7 +836,7 @@ void createItem (TreeItem item, int /*long*/ parentIter, int index) {
 	modelChanged = true;
 }
 
-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
+void createRenderers (long /*int*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
 	OS.gtk_tree_view_column_clear (columnHandle);
 	if ((style & SWT.CHECK) != 0 && check) {
 		OS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);
@@ -859,9 +859,9 @@ void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check,
 			OS.g_object_set_qdata (checkRenderer, Display.SWT_OBJECT_INDEX1, columnHandle);
 		}
 	}
-	int /*long*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
+	long /*int*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
 	if (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
 	
 	if (ownerDraw) {
@@ -971,7 +971,7 @@ public void deselect (TreeItem item) {
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_iter (selection, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -989,7 +989,7 @@ public void deselect (TreeItem item) {
 public void deselectAll() {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1003,7 +1003,7 @@ void destroyItem (TreeColumn column) {
 		index++;
 	}
 	if (index == columnCount) return;
-	int /*long*/ columnHandle = column.handle;
+	long /*int*/ columnHandle = column.handle;
 	if (columnCount == 1) {
 		firstCustomDraw = column.customDraw;
 	}
@@ -1011,11 +1011,11 @@ void destroyItem (TreeColumn column) {
 	columns [columnCount] = null;
 	OS.gtk_tree_view_remove_column (handle, columnHandle);
 	if (columnCount == 0) {
-		int /*long*/ oldModel = modelHandle;
-		int /*long*/[] types = getColumnTypes (1);
-		int /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);
+		long /*int*/ oldModel = modelHandle;
+		long /*int*/[] types = getColumnTypes (1);
+		long /*int*/ newModel = OS.gtk_tree_store_newv (types.length, types);
 		if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-		copyModel(oldModel, column.modelIndex, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, FIRST_COLUMN + CELL_TYPES);
+		copyModel(oldModel, column.modelIndex, newModel, FIRST_COLUMN, types, (long /*int*/)0, (long /*int*/)0, FIRST_COLUMN + CELL_TYPES);
 		OS.gtk_tree_view_set_model (handle, newModel);
 		OS.g_object_unref (oldModel);
 		modelHandle = newModel;
@@ -1025,7 +1025,7 @@ void destroyItem (TreeColumn column) {
 		for (int i=0; i<items.length; i++) {
 			TreeItem item = items [i];
 			if (item != null) {
-				int /*long*/ iter = item.handle;
+				long /*int*/ iter = item.handle;
 				int modelIndex = column.modelIndex;
 				OS.gtk_tree_store_set (modelHandle, iter, modelIndex + CELL_PIXBUF, 0, -1);
 				OS.gtk_tree_store_set (modelHandle, iter, modelIndex + CELL_TEXT, 0, -1);
@@ -1090,7 +1090,7 @@ void destroyItem (TreeItem item) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 0, 6)) {
 		int length = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		if (length > 0) {
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, 0);
 			while (valid) {
 				if (item.handle == iter) {
@@ -1102,7 +1102,7 @@ void destroyItem (TreeItem item) {
 			OS.g_free (iter);
 		}
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_store_remove (modelHandle, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1112,10 +1112,10 @@ void destroyItem (TreeItem item) {
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1128,7 +1128,7 @@ boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -1166,13 +1166,13 @@ public Rectangle getClientArea () {
 	checkWidget ();
 	forceResize ();
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binX = new int [1], binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, binX, binY);
 	int [] fixedX = new int [1], fixedY = new int [1];
 	OS.gdk_window_get_origin (fixedWindow, fixedX, fixedY);
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 	return new Rectangle (fixedX [0] - binX [0], fixedY [0] - binY [0], width, height);
@@ -1272,13 +1272,13 @@ public int getColumnCount () {
 public int [] getColumnOrder () {
 	checkWidget ();
 	if (columnCount == 0) return new int [0];
-	int /*long*/ list = OS.gtk_tree_view_get_columns (handle);
+	long /*int*/ list = OS.gtk_tree_view_get_columns (handle);
 	if (list == 0) return new int [0];
 	int  i = 0, count = OS.g_list_length (list);
 	int [] order = new int [count];
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ column = OS.g_list_data (temp);
+		long /*int*/ column = OS.g_list_data (temp);
 		if (column != 0) {
 			for (int j=0; j<columnCount; j++) {
 				if (columns [j].handle == column) {
@@ -1293,8 +1293,8 @@ public int [] getColumnOrder () {
 	return order;
 }
 
-int /*long*/[] getColumnTypes (int columnCount) {
-	int /*long*/[] types = new int /*long*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
+long /*int*/[] getColumnTypes (int columnCount) {
+	long /*int*/[] types = new long /*int*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
 	// per row data
 	types [ID_COLUMN] = OS.G_TYPE_INT ();
 	types [CHECKED_COLUMN] = OS.G_TYPE_BOOLEAN (); 
@@ -1350,11 +1350,11 @@ public TreeColumn [] getColumns () {
 }
 
 TreeItem getFocusItem () {
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -1405,7 +1405,7 @@ public int getHeaderHeight () {
 		GtkRequisition requisition = new GtkRequisition ();
 		int height = 0;
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ buttonHandle = columns [i].buttonHandle;
+			long /*int*/ buttonHandle = columns [i].buttonHandle;
 			if (buttonHandle != 0) {
 				OS.gtk_widget_size_request (buttonHandle, requisition);
 				height = Math.max (height, requisition.height);
@@ -1414,8 +1414,8 @@ public int getHeaderHeight () {
 		return height;
 	}
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, null, binY);
 	int [] fixedY = new int [1];
@@ -1498,13 +1498,13 @@ public TreeItem getItem (int index) {
 public TreeItem getItem (Point point) {
 	checkWidget ();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
-	int /*long*/ [] columnHandle = new int /*long*/ [1];
+	long /*int*/ [] columnHandle = new long /*int*/ [1];
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, point.x, point.y, path, columnHandle, null, null)) return null;
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		boolean overExpander = false;
 		if (OS.gtk_tree_view_get_expander_column (handle) == columnHandle [0]) {
@@ -1561,7 +1561,7 @@ public int getItemHeight () {
 	checkWidget ();
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 	if (itemCount == 0) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 		int [] w = new int [1], h = new int [1];
 		ignoreSize = true;
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1569,11 +1569,11 @@ public int getItemHeight () {
 		return h [0];
 	} else {
 		int height = 0;
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		int columnCount = Math.max (1, this.columnCount);
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 			OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 			int [] w = new int [1], h = new int [1];
 			OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1606,7 +1606,7 @@ public TreeItem [] getItems () {
 	return getItems (0);
 }
 
-TreeItem [] getItems (int /*long*/ parent) {
+TreeItem [] getItems (long /*int*/ parent) {
 	int length = OS.gtk_tree_model_iter_n_children (modelHandle, parent);
 	TreeItem[] result = new TreeItem [length];
 	if (length == 0) return result;
@@ -1617,7 +1617,7 @@ TreeItem [] getItems (int /*long*/ parent) {
 	} else {
 		int i = 0;
 		int[] index = new int [1];
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parent);
 		while (valid) {
 			OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -1671,14 +1671,14 @@ public TreeItem getParentItem () {
 	return null;
 }
 
-int /*long*/ getPixbufRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getPixbufRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ pixbufRenderer = 0;
+	long /*int*/ pixbufRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {
 			pixbufRenderer = renderer;
 			break;
@@ -1707,7 +1707,7 @@ int /*long*/ getPixbufRenderer (int /*long*/ column) {
  */
 public TreeItem[] getSelection () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [items.length];
@@ -1721,15 +1721,15 @@ public TreeItem[] getSelection () {
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		TreeItem [] treeSelection = new TreeItem [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (OS.gtk_tree_model_get_iter (modelHandle, iter, data)) {
 				treeSelection [length] = _getItem (iter);
 				length++;
@@ -1759,7 +1759,7 @@ public TreeItem[] getSelection () {
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -1811,14 +1811,14 @@ public int getSortDirection () {
 	return sortDirection;
 }
 
-int /*long*/ getTextRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getTextRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ textRenderer = 0;
+	long /*int*/ textRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_TEXT (renderer)) {
 			textRenderer = renderer;
 			break;
@@ -1845,12 +1845,12 @@ int /*long*/ getTextRenderer (int /*long*/ column) {
  */
 public TreeItem getTopItem () {
 	checkWidget ();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return null;
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		item = _getItem (iter);
 	}
@@ -1859,11 +1859,11 @@ public TreeItem getTopItem () {
 	return item;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select tree view, when multiple items are already
@@ -1875,10 +1875,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	*/
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1893,10 +1893,10 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1916,13 +1916,13 @@ int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	TreeItem item = getFocusItem ();
 	if (item != null) {
 		Event event = new Event ();
@@ -1932,14 +1932,14 @@ int /*long*/ gtk_changed (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_expand_collapse_cursor_row (int /*long*/ widget, int /*long*/ logical, int /*long*/ expand, int /*long*/ open_all) {
+long /*int*/ gtk_expand_collapse_cursor_row (long /*int*/ widget, long /*int*/ logical, long /*int*/ expand, long /*int*/ open_all) {
 	// FIXME - this flag is never cleared.  It should be cleared when the expand all operation completes.
 	if (expand != 0 && open_all != 0) expandAll = true;
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -1963,14 +1963,14 @@ int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_motion_notify_event (widget, event);
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -1983,10 +1983,10 @@ int /*long*/ gtk_popup_menu (int /*long*/ widget) {
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	if (path == 0) return 0;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path)) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -2013,7 +2013,7 @@ int gtk_row_inserted (int model, int path, int iter) {
 	return 0;
 }
 
-int /*long*/ gtk_test_collapse_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_collapse_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	int [] index = new int [1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
 	TreeItem item = items [index [0]];
@@ -2051,7 +2051,7 @@ int /*long*/ gtk_test_collapse_row (int /*long*/ tree, int /*long*/ iter, int /*
 	return 0;
 }
 
-int /*long*/ gtk_test_expand_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_expand_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	int [] index = new int [1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
 	TreeItem item = items [index [0]];
@@ -2093,11 +2093,11 @@ int /*long*/ gtk_test_expand_row (int /*long*/ tree, int /*long*/ iter, int /*lo
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (pathStr);
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (pathStr);
 	if (path == 0) return 0;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path)) {
 		item = _getItem (iter);
 	}
@@ -2113,7 +2113,7 @@ int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	/*
 	 * Bug in GTK.  For some reason, gtk_widget_size_request() fails
 	 * to include the height of the tree view items when there are
@@ -2124,17 +2124,17 @@ void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
 		super.gtk_widget_size_request (widget, requisition);
 		return;
 	}
-	int /*long*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
+	long /*int*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
 	boolean fixVisible = columns != 0;
 	while (list != 0) {
-		int /*long*/ column = OS.g_list_data (list);
+		long /*int*/ column = OS.g_list_data (list);
 		if (OS.gtk_tree_view_column_get_visible (column)) {
 			fixVisible = false;
 			break;
 		}
 		list = OS.g_list_next (list);
 	}
-	int /*long*/ columnHandle = 0;
+	long /*int*/ columnHandle = 0;
 	if (fixVisible) {
 		columnHandle = OS.g_list_data (columns);
 		OS.gtk_tree_view_column_set_visible (columnHandle, true);
@@ -2147,13 +2147,13 @@ void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
 }
 
 void hideFirstColumn () {
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, false);	
 }
 	
 void hookEvents () {
 	super.hookEvents ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 	OS.g_signal_connect_closure (handle, OS.test_expand_row, display.closures [TEST_EXPAND_ROW], false);
@@ -2221,10 +2221,10 @@ public int indexOf (TreeItem item) {
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	int index = -1;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	int depth = OS.gtk_tree_path_get_depth (path);
 	if (depth == 1) {
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {	
 			int[] temp = new int[1];
 			OS.memmove (temp, indices, 4);
@@ -2237,7 +2237,7 @@ public int indexOf (TreeItem item) {
 
 boolean mnemonicHit (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -2245,13 +2245,13 @@ boolean mnemonicHit (char key) {
 
 boolean mnemonicMatch (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -2298,9 +2298,9 @@ void releaseItem (TreeItem item, boolean release) {
 	items [index [0]] = null;
 }
 
-void releaseItems (int /*long*/ parentIter) {
+void releaseItems (long /*int*/ parentIter) {
 	int[] index = new int [1];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parentIter);
 	while (valid) {
 		releaseItems (iter);
@@ -2350,14 +2350,14 @@ void releaseWidget () {
 	currentItem = null;
 }
 
-void remove (int /*long*/ parentIter, int start, int end) {
+void remove (long /*int*/ parentIter, int start, int end) {
 	if (start > end) return;
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 	if (fixAccessibility ()) {
 		ignoreAccessibility = true;
@@ -2397,7 +2397,7 @@ public void removeAll () {
 		if (item != null && !item.isDisposed ()) item.release (false);
 	}
 	items = new TreeItem[4];
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	if (fixAccessibility ()) {
 		ignoreAccessibility = true;
@@ -2482,19 +2482,19 @@ public void removeTreeListener(TreeListener listener) {
 	eventTable.unhook (SWT.Collapse, listener);
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
-	int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ widget, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
+	long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
-	int /*long*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
+	long /*int*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
 	if (!ignoreSize && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
-		int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+		long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 		TreeItem item = null;
 		if (iter != 0) item = _getItem (iter);
 		if (item != null) {
 			int columnIndex = 0;
 			if (columnCount > 0) {
-				int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+				long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 				for (int i = 0; i < columnCount; i++) {
 					if (columns [i].handle == columnHandle) {
 						columnIndex = i;
@@ -2533,11 +2533,11 @@ int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*
 	return result;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ widget, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ widget, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+	long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 	if (iter != 0) item = _getItem (iter);
-	int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+	long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 	int columnIndex = 0;
 	if (columnCount > 0) {
 		for (int i = 0; i < columnCount; i++) {
@@ -2551,7 +2551,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 		if (OS.GTK_IS_CELL_RENDERER_TOGGLE (cell) || (OS.GTK_IS_CELL_RENDERER_PIXBUF (cell) && (columnIndex != 0 || (style & SWT.CHECK) == 0))) {
 			drawFlags = (int)/*64*/flags;
 			drawState = SWT.FOREGROUND;
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			OS.gtk_tree_model_get (modelHandle, item.handle, Tree.BACKGROUND_COLUMN, ptr, -1);
 			if (ptr [0] == 0) {
 				int modelIndex = columnCount == 0 ? Tree.FIRST_COLUMN : columns [columnIndex].modelIndex;
@@ -2562,7 +2562,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 			if ((flags & OS.GTK_CELL_RENDERER_FOCUSED) != 0) drawState |= SWT.FOCUSED;			
 			
 			GdkRectangle rect = new GdkRectangle ();
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 			OS.gtk_tree_path_free (path);
 			
@@ -2606,7 +2606,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 				if ((drawState & SWT.SELECTED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_SELECTED;
 				if ((drawState & SWT.FOCUSED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_FOCUSED;
 				if ((drawState & SWT.SELECTED) != 0) {
-					int /*long*/ style = OS.gtk_widget_get_style (widget);					
+					long /*int*/ style = OS.gtk_widget_get_style (widget);					
 					//TODO - parity and sorted
 					byte[] detail = Converter.wcsToMbcs (null, "cell_odd", true);
 					OS.gtk_paint_flat_box (style, window, OS.GTK_STATE_SELECTED, OS.GTK_SHADOW_NONE, rect, widget, detail, rect.x, rect.y, rect.width, rect.height);
@@ -2617,7 +2617,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 			}
 		}
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if ((drawState & SWT.BACKGROUND) != 0 && (drawState & SWT.SELECTED) == 0) {
 		GC gc = new GC (this);
 		gc.setBackground (item.getBackground (columnIndex));
@@ -2627,7 +2627,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 		gc.dispose ();
 	}
 	if ((drawState & SWT.FOREGROUND) != 0 || OS.GTK_IS_CELL_RENDERER_TOGGLE (cell)) {
-		int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+		long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 		GtkCellRendererClass klass = new GtkCellRendererClass ();
 		OS.memmove (klass, g_class);
 		if (drawForeground != null && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
@@ -2640,7 +2640,7 @@ int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*l
 			if (hooks (SWT.PaintItem)) {
 				GdkRectangle rect = new GdkRectangle ();
 				GdkRectangle clipRect = new GdkRectangle ();
-				int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+				long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 				OS.gtk_tree_view_get_cell_area (handle, path, columnHandle, rect);
 				OS.gtk_tree_view_get_background_area (handle, path, columnHandle, clipRect);
 				OS.gtk_tree_path_free (path);
@@ -2704,8 +2704,8 @@ void resetCustomDraw () {
 	for (int i=0; i<end; i++) {
 		boolean customDraw = columnCount != 0 ? columns [i].customDraw : firstCustomDraw;
 		if (customDraw) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
-			int /*long*/ textRenderer = getTextRenderer (column);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ textRenderer = getTextRenderer (column);
 			OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, 0, 0, 0);
 			if (columnCount != 0) columns [i].customDraw = false;
 		}
@@ -2739,7 +2739,7 @@ public void setInsertMark (TreeItem item, boolean before) {
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
 	Rectangle rect = item.getBounds();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos(handle, rect.x, rect.y, path, null, null, null)) return;
 	if (path [0] == 0) return;
@@ -2748,7 +2748,7 @@ public void setInsertMark (TreeItem item, boolean before) {
 	OS.gtk_tree_path_free (path [0]);
 }
 
-void setItemCount (int /*long*/ parentIter, int count) {
+void setItemCount (long /*int*/ parentIter, int count) {
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (count == itemCount) return;
 	boolean isVirtual = (style & SWT.VIRTUAL) != 0;
@@ -2759,7 +2759,7 @@ void setItemCount (int /*long*/ parentIter, int count) {
 			ignoreAccessibility = true;
 		}
 		for (int i=itemCount; i<count; i++) {
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_tree_store_append (modelHandle, iter, parentIter);
 			OS.gtk_tree_store_set (modelHandle, iter, ID_COLUMN, -1, -1);
@@ -2818,7 +2818,7 @@ public void select (TreeItem item) {
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_iter (selection, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2840,7 +2840,7 @@ public void selectAll () {
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2852,9 +2852,9 @@ void setBackgroundColor (GdkColor color) {
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
+void setBackgroundPixmap (long /*int*/ pixmap) {
 	super.setBackgroundPixmap (pixmap);
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);	
 }
 
@@ -2919,15 +2919,15 @@ public void setColumnOrder (int [] order) {
 		if (seen [index]) error (SWT.ERROR_INVALID_ARGUMENT);
 		seen [index] = true;
 	}
-	int /*long*/ baseColumn = 0;
+	long /*int*/ baseColumn = 0;
 	for (int i=0; i<order.length; i++) {
-		int /*long*/ column = columns [order [i]].handle;
+		long /*int*/ column = columns [order [i]].handle;
 		OS.gtk_tree_view_move_column_after (handle, column, baseColumn);
 		baseColumn = column;
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TreeColumn[] columns = getColumns ();
 	for (int i = 0; i < columns.length; i++) {
@@ -2989,16 +2989,16 @@ public void setLinesVisible (boolean show) {
 
 void setParentBackground () {
 	super.setParentBackground ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);
 }
 
-void setParentWindow (int /*long*/ widget) {
-	int /*long*/ window = eventWindow ();
+void setParentWindow (long /*int*/ widget) {
+	long /*int*/ window = eventWindow ();
 	OS.gtk_widget_set_parent_window (widget, window);
 }
 
-void setScrollWidth (int /*long*/ column, TreeItem item) {
+void setScrollWidth (long /*int*/ column, TreeItem item) {
 	if (columnCount != 0 || currentItem == item) return;
 	/*
 	* Use GTK_TREE_VIEW_COLUMN_GROW_ONLY on GTK versions < 2.3.2
@@ -3067,7 +3067,7 @@ public void setSelection (TreeItem [] items) {
 	int length = items.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	boolean first = true;
 	for (int i = 0; i < length; i++) {
@@ -3075,7 +3075,7 @@ public void setSelection (TreeItem [] items) {
 		if (item == null) continue;
 		if (item.isDisposed ()) break;
 		if (item.parent != this) continue;
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 		showItem (path, false);
 		if (first) {
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
@@ -3168,7 +3168,7 @@ public void setTopItem (TreeItem item) {
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error(SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	showItem (path, false);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0f, 0f);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
@@ -3243,10 +3243,10 @@ boolean showFirstColumn () {
 	*/
 	int columnCount = Math.max (1, this.columnCount);
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 		if (OS.gtk_tree_view_column_get_visible (column)) return false;
 	}
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, true);
 	return true;
 }
@@ -3269,13 +3269,13 @@ public void showSelection () {
 	if (items.length != 0 && items [0] != null) showItem (items [0]);
 }
 
-void showItem (int /*long*/ path, boolean scroll) {
+void showItem (long /*int*/ path, boolean scroll) {
 	int depth = OS.gtk_tree_path_get_depth (path);
 	if (depth > 1) {
 		int [] indices = new int [depth - 1];
-		int /*long*/ indicesPtr = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indicesPtr = OS.gtk_tree_path_get_indices (path);
 		OS.memmove (indices, indicesPtr, indices.length * 4);
-		int /*long*/ tempPath = OS.gtk_tree_path_new ();
+		long /*int*/ tempPath = OS.gtk_tree_path_new ();
 		for (int i=0; i<indices.length; i++) {
 			OS.gtk_tree_path_append_index (tempPath, indices [i]);
 			OS.gtk_tree_view_expand_row (handle, tempPath, false);
@@ -3347,12 +3347,12 @@ public void showItem (TreeItem item) {
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error(SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	showItem (path, true);
 	OS.gtk_tree_path_free (path);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -3370,12 +3370,12 @@ void updateScrollBarValue (ScrollBar bar) {
 	* The fix is to queue a resize event for each child to
 	* force the position to be corrected.
 	*/
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ widget = OS.g_list_data (temp);
+		long /*int*/ widget = OS.g_list_data (temp);
 		if (widget != 0) OS.gtk_widget_queue_resize  (widget);
 		temp = OS.g_list_next (temp);
 	}
diff --git a/org/eclipse/swt/widgets/TreeColumn.java b/org/eclipse/swt/widgets/TreeColumn.java
index a3b6ee5..3413263 100644
--- a/org/eclipse/swt/widgets/TreeColumn.java
+++ b/org/eclipse/swt/widgets/TreeColumn.java
@@ -38,7 +38,7 @@ import org.eclipse.swt.events.*;
  * @noextend This class is not intended to be subclassed by clients.
  */
 public class TreeColumn extends Item {
-	int /*long*/ labelHandle, imageHandle, buttonHandle;
+	long /*int*/ labelHandle, imageHandle, buttonHandle;
 	Tree parent;
 	int modelIndex, lastButton, lastTime, lastX, lastWidth;
 	boolean customDraw, useFixedWidth;
@@ -326,7 +326,7 @@ public int getWidth () {
 	return OS.gtk_tree_view_column_get_width (handle);
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	/*
 	* There is no API to get a double click on a table column.  Normally, when
 	* the mouse is double clicked, this is indicated by GDK_2BUTTON_PRESS
@@ -336,7 +336,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	*/
 	boolean doubleClick = false;
 	boolean postEvent = true;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -368,7 +368,7 @@ int /*long*/ gtk_clicked (int /*long*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -384,11 +384,11 @@ int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	useFixedWidth = false;
 	int x = OS.GTK_WIDGET_X (widget);
 	int width = OS.GTK_WIDGET_WIDTH (widget);
@@ -435,7 +435,7 @@ public void pack () {
 	if ((parent.style & SWT.VIRTUAL) != 0) {
 		//NOT DONE
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter_first (parent.modelHandle, iter)) {
 			do {
 				width = Math.max (width, parent.calculateWidth (handle, iter, true));
@@ -542,7 +542,7 @@ public void setAlignment (int alignment) {
 	parent.createRenderers (handle, modelIndex, index == 0, style);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -557,7 +557,7 @@ public void setImage (Image image) {
 		}
 		int imageIndex = headerImageList.indexOf (image);
 		if (imageIndex == -1) imageIndex = headerImageList.add (image);
-		int /*long*/ pixbuf = headerImageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = headerImageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff --git a/org/eclipse/swt/widgets/TreeItem.java b/org/eclipse/swt/widgets/TreeItem.java
index 1102499..0316c92 100644
--- a/org/eclipse/swt/widgets/TreeItem.java
+++ b/org/eclipse/swt/widgets/TreeItem.java
@@ -181,7 +181,7 @@ public TreeItem (TreeItem parentItem, int style, int index) {
 	this (checkNull (parentItem).parent, parentItem.handle, style, checkIndex (index), true);
 }
 
-TreeItem (Tree parent, int /*long*/ parentIter, int style, int index, boolean create) {
+TreeItem (Tree parent, long /*int*/ parentIter, int style, int index, boolean create) {
 	super (parent, style);
 	this.parent = parent;
 	if (create) {
@@ -212,7 +212,7 @@ protected void checkSubclass () {
 }
 
 Color _getBackground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.BACKGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getBackground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -223,7 +223,7 @@ Color _getBackground () {
 Color _getBackground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getBackground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_BACKGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getBackground ();
@@ -233,13 +233,13 @@ Color _getBackground (int index) {
 }
 
 boolean _getChecked () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.CHECKED_COLUMN, ptr, -1);
 	return ptr [0] != 0;
 }
 
 Color _getForeground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.FOREGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getForeground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -250,7 +250,7 @@ Color _getForeground () {
 Color _getForeground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getForeground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex =  parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_FOREGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getForeground ();
@@ -262,7 +262,7 @@ Color _getForeground (int index) {
 Image _getImage (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return null;
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_PIXBUF, ptr, -1);
 	if (ptr [0] == 0) return null;
@@ -275,7 +275,7 @@ Image _getImage (int index) {
 String _getText (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return "";
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_TEXT, ptr, -1);
 	if (ptr [0] == 0) return ""; //$NON-NLS-1$
@@ -423,15 +423,15 @@ public Rectangle getBounds (int index) {
 	// TODO fully test on early and later versions of GTK
 	checkWidget();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
@@ -494,14 +494,14 @@ public Rectangle getBounds () {
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -594,7 +594,7 @@ public boolean getChecked () {
  */
 public boolean getExpanded () {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	boolean answer = OS.gtk_tree_view_row_expanded (parent.handle, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
@@ -746,18 +746,18 @@ public Rectangle getImageBounds (int index) {
 	// TODO fully test on early and later versions of GTK
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.getColumnCount ()) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle ();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
 	if ((parent.getStyle () & SWT.MIRRORED) != 0) rect.x = parent.getClientWidth () - rect.width - rect.x;
@@ -908,12 +908,12 @@ public Tree getParent () {
  */
 public TreeItem getParentItem () {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	TreeItem item = null;
 	int depth = OS.gtk_tree_path_get_depth (path); 
 	if (depth > 1) {
 		OS.gtk_tree_path_up (path);
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter (parent.modelHandle, iter, path)) {
 			item = parent._getItem (iter);
 		}
@@ -971,19 +971,19 @@ public Rectangle getTextBounds (int index) {
 	if (0 > index || index > count - 1) return new Rectangle (0, 0, 0, 0);
 	// TODO fully test on early and later versions of GTK
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -1066,8 +1066,8 @@ public int indexOf (TreeItem item) {
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	int index = -1;
 	boolean isParent = false;
-	int /*long*/ currentPath = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
-	int /*long*/ parentPath = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
+	long /*int*/ currentPath = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ parentPath = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
 	int depth = OS.gtk_tree_path_get_depth (parentPath);
 	if (depth > 1 && OS.gtk_tree_path_up(parentPath)) {
 		if (OS.gtk_tree_path_compare(currentPath, parentPath) == 0) isParent = true;
@@ -1075,9 +1075,9 @@ public int indexOf (TreeItem item) {
 	OS.gtk_tree_path_free (currentPath);
 	OS.gtk_tree_path_free (parentPath);
 	if (!isParent) return index;
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
 	if (depth > 1) {
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {	
 			int[] temp = new int[depth];
 			OS.memmove (temp, indices, 4 * temp.length);
@@ -1089,13 +1089,13 @@ public int indexOf (TreeItem item) {
 }
 
 void redraw () {
-	int /*long*/ parentHandle = parent.handle;
+	long /*int*/ parentHandle = parent.handle;
 	if ((OS.GTK_WIDGET_FLAGS (parentHandle) & OS.GTK_REALIZED) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 		GdkRectangle rect = new GdkRectangle ();
 		OS.gtk_tree_view_get_cell_area (parentHandle, path, 0, rect);
 		OS.gtk_tree_path_free (path);
-		int /*long*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
+		long /*int*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
 		rect.x = 0;
 		int [] w = new int [1], h = new int [1];
 		OS.gdk_drawable_get_size (window, w, h);
@@ -1136,15 +1136,15 @@ void releaseWidget () {
  */
 public void removeAll () {
 	checkWidget ();
-	int /*long*/ modelHandle = parent.modelHandle;
+	long /*int*/ modelHandle = parent.modelHandle;
 	int length = OS.gtk_tree_model_iter_n_children (modelHandle, handle);
 	if (length == 0) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 	if (parent.fixAccessibility ()) {
 		parent.ignoreAccessibility = true;
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (parent.handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (parent.handle);
 	int [] value = new int [1];
 	while (OS.gtk_tree_model_iter_children (modelHandle, iter, handle)) {
 		OS.gtk_tree_model_get (modelHandle, iter, Tree.ID_COLUMN, value, -1);
@@ -1249,16 +1249,16 @@ public void setBackground (int index, Color color) {
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1309,7 +1309,7 @@ public void setChecked (boolean checked) {
  */
 public void setExpanded (boolean expanded) {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	if (expanded) {
 		OS.g_signal_handlers_block_matched (parent.handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, TEST_EXPAND_ROW);
 		OS.gtk_tree_view_expand_row (parent.handle, path, false);
@@ -1351,7 +1351,7 @@ public void setFont (Font font){
 	if (oldFont == font) return;
 	this.font = font;
 	if (oldFont != null && oldFont.equals (font)) return;
-	int /*long*/ fontHandle = font != null ? font.handle : 0;
+	long /*int*/ fontHandle = font != null ? font.handle : 0;
 	OS.gtk_tree_store_set (parent.modelHandle, handle, Tree.FONT_COLUMN, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -1402,7 +1402,7 @@ public void setFont (int index, Font font) {
 	if (oldFont != null && oldFont.equals (font)) return;
 	
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
-	int /*long*/ fontHandle  = font != null ? font.handle : 0;
+	long /*int*/ fontHandle  = font != null ? font.handle : 0;
 	OS.gtk_tree_store_set (parent.modelHandle, handle, modelIndex + Tree.CELL_FONT, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -1420,16 +1420,16 @@ public void setFont (int index, Font font) {
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1529,16 +1529,16 @@ public void setForeground (int index, Color color){
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1571,7 +1571,7 @@ public void setGrayed (boolean grayed) {
 	* GTK+'s "inconsistent" state does not match SWT's concept of grayed.
 	* Render checked+grayed as "inconsistent", unchecked+grayed as blank.
 	*/
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.CHECKED_COLUMN, ptr, -1);
 	OS.gtk_tree_store_set (parent.modelHandle, handle, Tree.GRAYED_COLUMN, ptr [0] == 0 ? false : grayed, -1);
 	cached = true;
@@ -1603,7 +1603,7 @@ public void setImage (int index, Image image) {
 	}
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return;
-	int /*long*/ pixbuf = 0;
+	long /*int*/ pixbuf = 0;
 	if (image != null) {
 		ImageList imageList = parent.imageList;
 		if (imageList == null) imageList = parent.imageList = new ImageList ();
@@ -1633,10 +1633,10 @@ public void setImage (int index, Image image) {
 	if ((parent.style & SWT.VIRTUAL) != 0 && parent.currentItem == null) {
 		if (OS.GTK_VERSION >= OS.VERSION (2, 3, 2)) {
 			if (image != null) {
-				int /*long*/parentHandle = parent.handle;
-				int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
+				long /*int*/parentHandle = parent.handle;
+				long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
 				int [] w = new int [1];
-				int /*long*/ pixbufRenderer = parent.getPixbufRenderer(column);
+				long /*int*/ pixbufRenderer = parent.getPixbufRenderer(column);
 				OS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, null, w);
 				if (w[0] < image.getBounds().width) {
 					/*
@@ -1644,7 +1644,7 @@ public void setImage (int index, Image image) {
 					 * are relying on the fact that it is done as part of modifying
 					 * the style.
 					 */
-					int /*long*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
+					long /*int*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
 					parent.modifyStyle (parentHandle, style);
 				}
 			} 
diff --git a/org/eclipse/swt/widgets/Widget.java b/org/eclipse/swt/widgets/Widget.java
index a391ca1..b8712cb 100644
--- a/org/eclipse/swt/widgets/Widget.java
+++ b/org/eclipse/swt/widgets/Widget.java
@@ -54,7 +54,7 @@ public abstract class Widget {
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	int style, state;
 	Display display;
 	EventTable eventTable;
@@ -269,7 +269,7 @@ public void addDisposeListener (DisposeListener listener) {
 	addListener (SWT.Dispose, typedListener);
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	return 0;
 }
 
@@ -285,7 +285,7 @@ static int checkBits (int style, int int0, int int1, int int2, int int3, int int
 	return style;
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	return 0;
 }
 
@@ -406,7 +406,7 @@ void deregister () {
 }
 
 void destroyWidget () {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	releaseHandle ();
 	if (topHandle != 0 && (state & HANDLE) != 0) {
 		OS.gtk_widget_destroy (topHandle);
@@ -600,269 +600,269 @@ public int getStyle () {
 }
 
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	return 0;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_configure_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_configure_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_day_selected (int /*long*/ widget) {
+long /*int*/ gtk_day_selected (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_day_selected_double_click (int /*long*/ widget) {
+long /*int*/ gtk_day_selected_double_click (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_delete_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_range (int /*long*/ widget, int /*long*/ iter1, int /*long*/ iter2) {
+long /*int*/ gtk_delete_range (long /*int*/ widget, long /*int*/ iter1, long /*int*/ iter2) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_expand_collapse_cursor_row (int /*long*/ widget, int /*long*/ logical, int /*long*/ expand, int /*long*/ open_all) {
+long /*int*/ gtk_expand_collapse_cursor_row (long /*int*/ widget, long /*int*/ logical, long /*int*/ expand, long /*int*/ open_all) {
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_grab_focus (int /*long*/ widget) {
+long /*int*/ gtk_grab_focus (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_hide (int /*long*/ widget) {
+long /*int*/ gtk_hide (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_input (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_input (long /*int*/ widget, long /*int*/ arg1) {
 	return 0;
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
 	return sendKeyEvent (SWT.KeyDown, gdkEvent) ? 0 : 1;
 }
 
-int /*long*/ gtk_key_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
 	return sendKeyEvent (SWT.KeyUp, gdkEvent) ? 0 : 1;
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_map_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_map_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return 0;
 }
 
-int /*long*/ gtk_month_changed (int /*long*/ widget) {
+long /*int*/ gtk_month_changed (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_move_focus (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_move_focus (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_output (int /*long*/ widget) {
+long /*int*/ gtk_output (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	return 0;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
+long /*int*/ gtk_realize (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	return 0;
 }
 
-int /*long*/ gtk_row_deleted (int /*long*/ model, int /*long*/ path) {
+long /*int*/ gtk_row_deleted (long /*int*/ model, long /*int*/ path) {
 	return 0;
 }
 
-int /*long*/ gtk_row_inserted (int /*long*/ model, int /*long*/ path, int /*long*/ iter) {
+long /*int*/ gtk_row_inserted (long /*int*/ model, long /*int*/ path, long /*int*/ iter) {
 	return 0;
 }
 
-int /*long*/ gtk_scroll_child (int /*long*/ widget, int /*long*/ scrollType, int /*long*/ horizontal) {
+long /*int*/ gtk_scroll_child (long /*int*/ widget, long /*int*/ scrollType, long /*int*/ horizontal) {
 	return 0;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_select (int /*long*/ item) {
+long /*int*/ gtk_select (long /*int*/ item) {
 	return 0;
 }
 
-int /*long*/ gtk_show (int /*long*/ widget) {
+long /*int*/ gtk_show (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	return 0;
 }
 
-int /*long*/ gtk_status_icon_popup_menu (int /*long*/ handle, int /*long*/ button, int /*long*/ activate_time) {
+long /*int*/ gtk_status_icon_popup_menu (long /*int*/ handle, long /*int*/ button, long /*int*/ activate_time) {
 	return 0;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
 	return 0;
 }
 
-int /*long*/ gtk_switch_page (int /*long*/ widget, int /*long*/ page, int /*long*/ page_num) {
+long /*int*/ gtk_switch_page (long /*int*/ widget, long /*int*/ page, long /*int*/ page_num) {
 	return 0;
 }
 
-int /*long*/ gtk_test_collapse_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_collapse_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	return 0;
 }
 
-int /*long*/ gtk_test_expand_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_expand_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	return 0;
 }
 
-int /*long*/ gtk_text_buffer_insert_text (int /*long*/ widget, int /*long*/ iter, int /*long*/ text, int /*long*/ length) {
+long /*int*/ gtk_text_buffer_insert_text (long /*int*/ widget, long /*int*/ iter, long /*int*/ text, long /*int*/ length) {
 	return 0;
 }
 
-int /*long*/ gtk_timer () {
+long /*int*/ gtk_timer () {
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
 	return 0;
 }
 
-int /*long*/ gtk_unmap (int /*long*/ widget) {
+long /*int*/ gtk_unmap (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_unmap_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_unmap_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_unrealize (int /*long*/ widget) {
+long /*int*/ gtk_unrealize (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	return 0;
 }
 
-int /*long*/ gtk_visibility_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_visibility_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_window_state_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_window_state_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int fontHeight (int /*long*/ font, int /*long*/ widgetHandle) {
-	int /*long*/ context = OS.gtk_widget_get_pango_context (widgetHandle);
-	int /*long*/ lang = OS.pango_context_get_language (context);
-	int /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);
+int fontHeight (long /*int*/ font, long /*int*/ widgetHandle) {
+	long /*int*/ context = OS.gtk_widget_get_pango_context (widgetHandle);
+	long /*int*/ lang = OS.pango_context_get_language (context);
+	long /*int*/ metrics = OS.pango_context_get_metrics (context, font, lang);
 	int ascent = OS.pango_font_metrics_get_ascent (metrics);
 	int descent = OS.pango_font_metrics_get_descent (metrics);
 	OS.pango_font_metrics_unref (metrics);
 	return OS.PANGO_PIXELS (ascent + descent);
 }
 
-int /*long*/ filterProc(int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data2) {
+long /*int*/ filterProc(long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data2) {
 	return 0;
 }
 
@@ -870,11 +870,11 @@ boolean filters (int eventType) {
 	return display.filters (eventType);
 }
 
-int /*long*/ fixedMapProc (int /*long*/ widget) {
+long /*int*/ fixedMapProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ fixedSizeAllocateProc(int /*long*/ widget, int /*long*/ allocationPtr) {
+long /*int*/ fixedSizeAllocateProc(long /*int*/ widget, long /*int*/ allocationPtr) {
 	return OS.Call (Display.oldFixedSizeAllocateProc, widget, allocationPtr);
 }
 
@@ -973,15 +973,15 @@ boolean hooks (int eventType) {
 	return eventTable.hooks (eventType);
 }
 
-int /*long*/ hoverProc (int /*long*/ widget) {
+long /*int*/ hoverProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	return 0;
 }
 
-boolean mnemonicHit (int /*long*/ mnemonicHandle, char key) {
+boolean mnemonicHit (long /*int*/ mnemonicHandle, char key) {
 	if (!mnemonicMatch (mnemonicHandle, key)) return false;
 	OS.g_signal_handlers_block_matched (mnemonicHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, MNEMONIC_ACTIVATE);
 	boolean result = OS.gtk_widget_mnemonic_activate (mnemonicHandle, false);
@@ -989,13 +989,13 @@ boolean mnemonicHit (int /*long*/ mnemonicHandle, char key) {
 	return result;
 }
 
-boolean mnemonicMatch (int /*long*/ mnemonicHandle, char key) {
+boolean mnemonicMatch (long /*int*/ mnemonicHandle, char key) {
 	int keyval1 = OS.gdk_keyval_to_lower (OS.gdk_unicode_to_keyval (key));
 	int keyval2 = OS.gdk_keyval_to_lower (OS.gtk_label_get_mnemonic_keyval (mnemonicHandle)); 
 	return keyval1 == keyval2;
 }
 
-void modifyStyle (int /*long*/ handle, int /*long*/ style) {
+void modifyStyle (long /*int*/ handle, long /*int*/ style) {
 	OS.gtk_widget_modify_style (handle, style);
 }
 
@@ -1138,11 +1138,11 @@ protected void removeListener (int eventType, SWTEventListener handler) {
 	eventTable.unhook (eventType, handler);
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ handle, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ handle, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
 	return 0;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ handle, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ handle, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	return 0;
 }
 
@@ -1229,7 +1229,7 @@ boolean sendKeyEvent (int type, GdkEventKey keyEvent) {
 
 char [] sendIMKeyEvent (int type, GdkEventKey keyEvent, char [] chars) {
 	int index = 0, count = 0, state = 0;
-	int /*long*/ ptr = 0;
+	long /*int*/ ptr = 0;
 	if (keyEvent == null) {
 		ptr = OS.gtk_get_current_event ();
 		if (ptr != 0) {
@@ -1384,8 +1384,8 @@ public void setData (String key, Object value) {
 	}
 }
 
-void setForegroundColor (int /*long*/ handle, GdkColor color) {
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+void setForegroundColor (long /*int*/ handle, GdkColor color) {
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_NORMAL, color);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_ACTIVE, color);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_PRELIGHT, color);
@@ -1473,15 +1473,15 @@ boolean setTabItemFocus (boolean next) {
 	return false;
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
@@ -1500,15 +1500,15 @@ public String toString () {
 	return getName () + " {" + string + "}";
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	return handle;
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int [] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int [] selection, int length) {
 	return 0;
 }
 
@@ -1516,7 +1516,7 @@ boolean translateTraversal (int event) {
 	return false;
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case ACTIVATE: return gtk_activate (handle);
 		case CHANGED: return gtk_changed (handle);
@@ -1540,13 +1540,13 @@ int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case EXPOSE_EVENT_INVERSE: {
 			GdkEventExpose gdkEvent = new GdkEventExpose ();
 			OS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);
-			int /*long*/ paintWindow = paintWindow();
-			int /*long*/ window = gdkEvent.window;
+			long /*int*/ paintWindow = paintWindow();
+			long /*int*/ window = gdkEvent.window;
 			if (window != paintWindow) return 0;
 			return (state & OBSCURED) != 0 ? 1 : 0;
 		}
@@ -1589,7 +1589,7 @@ int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ us
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case DELETE_RANGE: return gtk_delete_range (handle, arg0, arg1);
 		case DELETE_TEXT: return gtk_delete_text (handle, arg0, arg1);
@@ -1604,7 +1604,7 @@ int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ ar
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case CHANGE_VALUE: return gtk_change_value (handle, arg0, arg1, arg2);
 		case EXPAND_COLLAPSE_CURSOR_ROW: return gtk_expand_collapse_cursor_row (handle, arg0, arg1, arg2);
