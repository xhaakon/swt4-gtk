diff -ur x86/atk.c x86_64/atk.c
--- x86/atk.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/atk.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -44,72 +44,72 @@
 #endif
 
 #ifndef NO__1ATK_1ACTION_1GET_1IFACE
-JNIEXPORT jint JNICALL ATK_NATIVE(_1ATK_1ACTION_1GET_1IFACE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1ATK_1ACTION_1GET_1IFACE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1ATK_1ACTION_1GET_1IFACE_FUNC);
-	rc = (jint)ATK_ACTION_GET_IFACE(arg0);
+	rc = (jlong)ATK_ACTION_GET_IFACE(arg0);
 	ATK_NATIVE_EXIT(env, that, _1ATK_1ACTION_1GET_1IFACE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1ATK_1COMPONENT_1GET_1IFACE
-JNIEXPORT jint JNICALL ATK_NATIVE(_1ATK_1COMPONENT_1GET_1IFACE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1ATK_1COMPONENT_1GET_1IFACE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1ATK_1COMPONENT_1GET_1IFACE_FUNC);
-	rc = (jint)ATK_COMPONENT_GET_IFACE(arg0);
+	rc = (jlong)ATK_COMPONENT_GET_IFACE(arg0);
 	ATK_NATIVE_EXIT(env, that, _1ATK_1COMPONENT_1GET_1IFACE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1ATK_1OBJECT_1FACTORY_1CLASS
-JNIEXPORT jint JNICALL ATK_NATIVE(_1ATK_1OBJECT_1FACTORY_1CLASS)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1ATK_1OBJECT_1FACTORY_1CLASS)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1ATK_1OBJECT_1FACTORY_1CLASS_FUNC);
-	rc = (jint)ATK_OBJECT_FACTORY_CLASS(arg0);
+	rc = (jlong)ATK_OBJECT_FACTORY_CLASS(arg0);
 	ATK_NATIVE_EXIT(env, that, _1ATK_1OBJECT_1FACTORY_1CLASS_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1ATK_1SELECTION_1GET_1IFACE
-JNIEXPORT jint JNICALL ATK_NATIVE(_1ATK_1SELECTION_1GET_1IFACE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1ATK_1SELECTION_1GET_1IFACE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1ATK_1SELECTION_1GET_1IFACE_FUNC);
-	rc = (jint)ATK_SELECTION_GET_IFACE(arg0);
+	rc = (jlong)ATK_SELECTION_GET_IFACE(arg0);
 	ATK_NATIVE_EXIT(env, that, _1ATK_1SELECTION_1GET_1IFACE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1ATK_1TEXT_1GET_1IFACE
-JNIEXPORT jint JNICALL ATK_NATIVE(_1ATK_1TEXT_1GET_1IFACE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1ATK_1TEXT_1GET_1IFACE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1ATK_1TEXT_1GET_1IFACE_FUNC);
-	rc = (jint)ATK_TEXT_GET_IFACE(arg0);
+	rc = (jlong)ATK_TEXT_GET_IFACE(arg0);
 	ATK_NATIVE_EXIT(env, that, _1ATK_1TEXT_1GET_1IFACE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1ACCESSIBLE
-JNIEXPORT jint JNICALL ATK_NATIVE(_1GTK_1ACCESSIBLE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1GTK_1ACCESSIBLE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1GTK_1ACCESSIBLE_FUNC);
-	rc = (jint)GTK_ACCESSIBLE(arg0);
+	rc = (jlong)GTK_ACCESSIBLE(arg0);
 	ATK_NATIVE_EXIT(env, that, _1GTK_1ACCESSIBLE_FUNC);
 	return rc;
 }
@@ -117,7 +117,7 @@
 
 #ifndef NO__1atk_1focus_1tracker_1notify
 JNIEXPORT void JNICALL ATK_NATIVE(_1atk_1focus_1tracker_1notify)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	ATK_NATIVE_ENTER(env, that, _1atk_1focus_1tracker_1notify_FUNC);
 	atk_focus_tracker_notify((AtkObject *)arg0);
@@ -126,36 +126,36 @@
 #endif
 
 #ifndef NO__1atk_1get_1default_1registry
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1get_1default_1registry)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1get_1default_1registry)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1get_1default_1registry_FUNC);
-	rc = (jint)atk_get_default_registry();
+	rc = (jlong)atk_get_default_registry();
 	ATK_NATIVE_EXIT(env, that, _1atk_1get_1default_1registry_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1atk_1object_1factory_1create_1accessible
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1object_1factory_1create_1accessible)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1object_1factory_1create_1accessible)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1object_1factory_1create_1accessible_FUNC);
-	rc = (jint)atk_object_factory_create_accessible((AtkObjectFactory *)arg0, (GObject *)arg1);
+	rc = (jlong)atk_object_factory_create_accessible((AtkObjectFactory *)arg0, (GObject *)arg1);
 	ATK_NATIVE_EXIT(env, that, _1atk_1object_1factory_1create_1accessible_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1atk_1object_1factory_1get_1accessible_1type
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1object_1factory_1get_1accessible_1type)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1object_1factory_1get_1accessible_1type)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1object_1factory_1get_1accessible_1type_FUNC);
-	rc = (jint)atk_object_factory_get_accessible_type((AtkObjectFactory *)arg0);
+	rc = (jlong)atk_object_factory_get_accessible_type((AtkObjectFactory *)arg0);
 	ATK_NATIVE_EXIT(env, that, _1atk_1object_1factory_1get_1accessible_1type_FUNC);
 	return rc;
 }
@@ -163,7 +163,7 @@
 
 #ifndef NO__1atk_1object_1initialize
 JNIEXPORT void JNICALL ATK_NATIVE(_1atk_1object_1initialize)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	ATK_NATIVE_ENTER(env, that, _1atk_1object_1initialize_FUNC);
 	atk_object_initialize((AtkObject *)arg0, (gpointer)arg1);
@@ -172,24 +172,24 @@
 #endif
 
 #ifndef NO__1atk_1object_1ref_1relation_1set
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1object_1ref_1relation_1set)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1object_1ref_1relation_1set)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1object_1ref_1relation_1set_FUNC);
-	rc = (jint)atk_object_ref_relation_set((AtkObject *)arg0);
+	rc = (jlong)atk_object_ref_relation_set((AtkObject *)arg0);
 	ATK_NATIVE_EXIT(env, that, _1atk_1object_1ref_1relation_1set_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1atk_1registry_1get_1factory
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1registry_1get_1factory)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1registry_1get_1factory)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1registry_1get_1factory_FUNC);
-	rc = (jint)atk_registry_get_factory((AtkRegistry *)arg0, (GType)arg1);
+	rc = (jlong)atk_registry_get_factory((AtkRegistry *)arg0, (GType)arg1);
 	ATK_NATIVE_EXIT(env, that, _1atk_1registry_1get_1factory_FUNC);
 	return rc;
 }
@@ -197,7 +197,7 @@
 
 #ifndef NO__1atk_1registry_1set_1factory_1type
 JNIEXPORT void JNICALL ATK_NATIVE(_1atk_1registry_1set_1factory_1type)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	ATK_NATIVE_ENTER(env, that, _1atk_1registry_1set_1factory_1type_FUNC);
 	atk_registry_set_factory_type((AtkRegistry *)arg0, (GType)arg1, (GType)arg2);
@@ -207,7 +207,7 @@
 
 #ifndef NO__1atk_1relation_1set_1get_1n_1relations
 JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1relation_1set_1get_1n_1relations)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1relation_1set_1get_1n_1relations_FUNC);
@@ -218,12 +218,12 @@
 #endif
 
 #ifndef NO__1atk_1relation_1set_1get_1relation
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1relation_1set_1get_1relation)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1relation_1set_1get_1relation)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1relation_1set_1get_1relation_FUNC);
-	rc = (jint)atk_relation_set_get_relation((AtkRelationSet *)arg0, arg1);
+	rc = (jlong)atk_relation_set_get_relation((AtkRelationSet *)arg0, arg1);
 	ATK_NATIVE_EXIT(env, that, _1atk_1relation_1set_1get_1relation_FUNC);
 	return rc;
 }
@@ -231,7 +231,7 @@
 
 #ifndef NO__1atk_1relation_1set_1remove
 JNIEXPORT void JNICALL ATK_NATIVE(_1atk_1relation_1set_1remove)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	ATK_NATIVE_ENTER(env, that, _1atk_1relation_1set_1remove_FUNC);
 	atk_relation_set_remove((AtkRelationSet *)arg0, (AtkRelation *)arg1);
@@ -241,7 +241,7 @@
 
 #ifndef NO__1atk_1state_1set_1add_1state
 JNIEXPORT jboolean JNICALL ATK_NATIVE(_1atk_1state_1set_1add_1state)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jboolean rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1state_1set_1add_1state_FUNC);
@@ -252,236 +252,236 @@
 #endif
 
 #ifndef NO__1atk_1state_1set_1new
-JNIEXPORT jint JNICALL ATK_NATIVE(_1atk_1state_1set_1new)
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1atk_1state_1set_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	ATK_NATIVE_ENTER(env, that, _1atk_1state_1set_1new_FUNC);
-	rc = (jint)atk_state_set_new();
+	rc = (jlong)atk_state_set_new();
 	ATK_NATIVE_EXIT(env, that, _1atk_1state_1set_1new_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__II
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__II)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+#ifndef NO__1call__JJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__II_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1);
-	ATK_NATIVE_EXIT(env, that, _1call__II_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1);
+	ATK_NATIVE_EXIT(env, that, _1call__JJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__III
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__III)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+#ifndef NO__1call__JJJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__III_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2);
-	ATK_NATIVE_EXIT(env, that, _1call__III_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2);
+	ATK_NATIVE_EXIT(env, that, _1call__JJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__IIII
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__IIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+#ifndef NO__1call__JJJJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__IIII_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2, arg3);
-	ATK_NATIVE_EXIT(env, that, _1call__IIII_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJJJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2, arg3);
+	ATK_NATIVE_EXIT(env, that, _1call__JJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__IIIII
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__IIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+#ifndef NO__1call__JJJJJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJJJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__IIIII_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2, arg3, arg4);
-	ATK_NATIVE_EXIT(env, that, _1call__IIIII_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJJJJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2, arg3, arg4);
+	ATK_NATIVE_EXIT(env, that, _1call__JJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__IIIIII
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__IIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+#ifndef NO__1call__JJJJJJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJJJJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__IIIIII_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2, arg3, arg4, arg5);
-	ATK_NATIVE_EXIT(env, that, _1call__IIIIII_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJJJJJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2, arg3, arg4, arg5);
+	ATK_NATIVE_EXIT(env, that, _1call__JJJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1call__IIIIIII
-JNIEXPORT jint JNICALL ATK_NATIVE(_1call__IIIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+#ifndef NO__1call__JJJJJJJ
+JNIEXPORT jlong JNICALL ATK_NATIVE(_1call__JJJJJJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6)
 {
-	jint rc = 0;
-	ATK_NATIVE_ENTER(env, that, _1call__IIIIIII_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2, arg3, arg4, arg5, arg6);
-	ATK_NATIVE_EXIT(env, that, _1call__IIIIIII_FUNC);
+	jlong rc = 0;
+	ATK_NATIVE_ENTER(env, that, _1call__JJJJJJJ_FUNC);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2, arg3, arg4, arg5, arg6);
+	ATK_NATIVE_EXIT(env, that, _1call__JJJJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC);
 	if (arg1) getAtkActionIfaceFields(env, arg1, (AtkActionIface *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC);
 	if (arg1) getAtkComponentIfaceFields(env, arg1, (AtkComponentIface *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC);
 	if (arg1) getAtkHypertextIfaceFields(env, arg1, (AtkHypertextIface *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC);
 	if (arg1) getAtkObjectClassFields(env, arg1, (AtkObjectClass *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC);
 	if (arg1) getAtkObjectFactoryClassFields(env, arg1, (AtkObjectFactoryClass *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC);
 	if (arg1) getAtkSelectionIfaceFields(env, arg1, (AtkSelectionIface *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC);
 	if (arg1) getAtkTextIfaceFields(env, arg1, (AtkTextIface *)arg0);
-	ATK_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J_FUNC);
 	if (arg0) setAtkActionIfaceFields(env, arg0, (AtkActionIface *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J_FUNC);
 	if (arg0) setAtkComponentIfaceFields(env, arg0, (AtkComponentIface *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J_FUNC);
 	if (arg0) setAtkHypertextIfaceFields(env, arg0, (AtkHypertextIface *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J_FUNC);
 	if (arg0) setAtkObjectClassFields(env, arg0, (AtkObjectClass *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J_FUNC);
 	if (arg0) setAtkObjectFactoryClassFields(env, arg0, (AtkObjectFactoryClass *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J_FUNC);
 	if (arg0) setAtkSelectionIfaceFields(env, arg0, (AtkSelectionIface *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J_FUNC);
 	if (arg0) setAtkTextIfaceFields(env, arg0, (AtkTextIface *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I
-JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J
+JNIEXPORT void JNICALL ATK_NATIVE(memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I_FUNC);
+	ATK_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J_FUNC);
 	if (arg0) setGtkAccessibleFields(env, arg0, (GtkAccessible *)arg1);
-	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I_FUNC);
+	ATK_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J_FUNC);
 }
 #endif
 
diff -ur x86/atk_stats.c x86_64/atk_stats.c
--- x86/atk_stats.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/atk_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -42,27 +42,27 @@
 	"_1atk_1relation_1set_1remove",
 	"_1atk_1state_1set_1add_1state",
 	"_1atk_1state_1set_1new",
-	"_1call__II",
-	"_1call__III",
-	"_1call__IIII",
-	"_1call__IIIII",
-	"_1call__IIIIII",
-	"_1call__IIIIIII",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2",
-	"memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I",
-	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I",
+	"_1call__JJ",
+	"_1call__JJJ",
+	"_1call__JJJJ",
+	"_1call__JJJJJ",
+	"_1call__JJJJJJ",
+	"_1call__JJJJJJJ",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2",
+	"memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J",
+	"memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J",
 };
 
 #define STATS_NATIVE(func) Java_org_eclipse_swt_tools_internal_NativeStats_##func
diff -ur x86/atk_stats.h x86_64/atk_stats.h
--- x86/atk_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/atk_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -50,25 +50,25 @@
 	_1atk_1relation_1set_1remove_FUNC,
 	_1atk_1state_1set_1add_1state_FUNC,
 	_1atk_1state_1set_1new_FUNC,
-	_1call__II_FUNC,
-	_1call__III_FUNC,
-	_1call__IIII_FUNC,
-	_1call__IIIII_FUNC,
-	_1call__IIIIII_FUNC,
-	_1call__IIIIIII_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2I_FUNC,
+	_1call__JJ_FUNC,
+	_1call__JJJ_FUNC,
+	_1call__JJJJ_FUNC,
+	_1call__JJJJJ_FUNC,
+	_1call__JJJJJJ_FUNC,
+	_1call__JJJJJJJ_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkActionIface_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkComponentIface_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkHypertextIface_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectClass_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkObjectFactoryClass_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkSelectionIface_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_AtkTextIface_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_accessibility_gtk_GtkAccessible_2J_FUNC,
 } ATK_FUNCS;
diff -ur x86/atk_structs.c x86_64/atk_structs.c
--- x86/atk_structs.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/atk_structs.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -29,36 +29,36 @@
 {
 	if (AtkActionIfaceFc.cached) return;
 	AtkActionIfaceFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkActionIfaceFc.do_action = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "do_action", "I");
-	AtkActionIfaceFc.get_n_actions = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_n_actions", "I");
-	AtkActionIfaceFc.get_description = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_description", "I");
-	AtkActionIfaceFc.get_name = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_name", "I");
-	AtkActionIfaceFc.get_keybinding = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_keybinding", "I");
-	AtkActionIfaceFc.set_description = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "set_description", "I");
+	AtkActionIfaceFc.do_action = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "do_action", "J");
+	AtkActionIfaceFc.get_n_actions = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_n_actions", "J");
+	AtkActionIfaceFc.get_description = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_description", "J");
+	AtkActionIfaceFc.get_name = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_name", "J");
+	AtkActionIfaceFc.get_keybinding = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "get_keybinding", "J");
+	AtkActionIfaceFc.set_description = (*env)->GetFieldID(env, AtkActionIfaceFc.clazz, "set_description", "J");
 	AtkActionIfaceFc.cached = 1;
 }
 
 AtkActionIface *getAtkActionIfaceFields(JNIEnv *env, jobject lpObject, AtkActionIface *lpStruct)
 {
 	if (!AtkActionIfaceFc.cached) cacheAtkActionIfaceFields(env, lpObject);
-	lpStruct->do_action = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.do_action);
-	lpStruct->get_n_actions = (gint (*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.get_n_actions);
-	lpStruct->get_description = (G_CONST_RETURN gchar *(*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.get_description);
-	lpStruct->get_name = (G_CONST_RETURN gchar *(*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.get_name);
-	lpStruct->get_keybinding = (G_CONST_RETURN gchar *(*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.get_keybinding);
-	lpStruct->set_description = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkActionIfaceFc.set_description);
+	lpStruct->do_action = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.do_action);
+	lpStruct->get_n_actions = (gint (*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.get_n_actions);
+	lpStruct->get_description = (G_CONST_RETURN gchar *(*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.get_description);
+	lpStruct->get_name = (G_CONST_RETURN gchar *(*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.get_name);
+	lpStruct->get_keybinding = (G_CONST_RETURN gchar *(*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.get_keybinding);
+	lpStruct->set_description = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkActionIfaceFc.set_description);
 	return lpStruct;
 }
 
 void setAtkActionIfaceFields(JNIEnv *env, jobject lpObject, AtkActionIface *lpStruct)
 {
 	if (!AtkActionIfaceFc.cached) cacheAtkActionIfaceFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.do_action, (jint)lpStruct->do_action);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.get_n_actions, (jint)lpStruct->get_n_actions);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.get_description, (jint)lpStruct->get_description);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.get_name, (jint)lpStruct->get_name);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.get_keybinding, (jint)lpStruct->get_keybinding);
-	(*env)->SetIntField(env, lpObject, AtkActionIfaceFc.set_description, (jint)lpStruct->set_description);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.do_action, (jlong)lpStruct->do_action);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.get_n_actions, (jlong)lpStruct->get_n_actions);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.get_description, (jlong)lpStruct->get_description);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.get_name, (jlong)lpStruct->get_name);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.get_keybinding, (jlong)lpStruct->get_keybinding);
+	(*env)->SetLongField(env, lpObject, AtkActionIfaceFc.set_description, (jlong)lpStruct->set_description);
 }
 #endif
 
@@ -75,57 +75,57 @@
 {
 	if (AtkComponentIfaceFc.cached) return;
 	AtkComponentIfaceFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkComponentIfaceFc.add_focus_handler = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "add_focus_handler", "I");
-	AtkComponentIfaceFc.contains = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "contains", "I");
-	AtkComponentIfaceFc.ref_accessible_at_point = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "ref_accessible_at_point", "I");
-	AtkComponentIfaceFc.get_extents = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_extents", "I");
-	AtkComponentIfaceFc.get_position = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_position", "I");
-	AtkComponentIfaceFc.get_size = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_size", "I");
-	AtkComponentIfaceFc.grab_focus = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "grab_focus", "I");
-	AtkComponentIfaceFc.remove_focus_handler = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "remove_focus_handler", "I");
-	AtkComponentIfaceFc.set_extents = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_extents", "I");
-	AtkComponentIfaceFc.set_position = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_position", "I");
-	AtkComponentIfaceFc.set_size = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_size", "I");
-	AtkComponentIfaceFc.get_layer = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_layer", "I");
-	AtkComponentIfaceFc.get_mdi_zorder = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_mdi_zorder", "I");
+	AtkComponentIfaceFc.add_focus_handler = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "add_focus_handler", "J");
+	AtkComponentIfaceFc.contains = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "contains", "J");
+	AtkComponentIfaceFc.ref_accessible_at_point = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "ref_accessible_at_point", "J");
+	AtkComponentIfaceFc.get_extents = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_extents", "J");
+	AtkComponentIfaceFc.get_position = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_position", "J");
+	AtkComponentIfaceFc.get_size = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_size", "J");
+	AtkComponentIfaceFc.grab_focus = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "grab_focus", "J");
+	AtkComponentIfaceFc.remove_focus_handler = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "remove_focus_handler", "J");
+	AtkComponentIfaceFc.set_extents = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_extents", "J");
+	AtkComponentIfaceFc.set_position = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_position", "J");
+	AtkComponentIfaceFc.set_size = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "set_size", "J");
+	AtkComponentIfaceFc.get_layer = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_layer", "J");
+	AtkComponentIfaceFc.get_mdi_zorder = (*env)->GetFieldID(env, AtkComponentIfaceFc.clazz, "get_mdi_zorder", "J");
 	AtkComponentIfaceFc.cached = 1;
 }
 
 AtkComponentIface *getAtkComponentIfaceFields(JNIEnv *env, jobject lpObject, AtkComponentIface *lpStruct)
 {
 	if (!AtkComponentIfaceFc.cached) cacheAtkComponentIfaceFields(env, lpObject);
-	lpStruct->add_focus_handler = (guint (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.add_focus_handler);
-	lpStruct->contains = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.contains);
-	lpStruct->ref_accessible_at_point = (AtkObject *(*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.ref_accessible_at_point);
-	lpStruct->get_extents = (void (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.get_extents);
-	lpStruct->get_position = (void (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.get_position);
-	lpStruct->get_size = (void (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.get_size);
-	lpStruct->grab_focus = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.grab_focus);
-	lpStruct->remove_focus_handler = (void (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.remove_focus_handler);
-	lpStruct->set_extents = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.set_extents);
-	lpStruct->set_position = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.set_position);
-	lpStruct->set_size = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.set_size);
-	lpStruct->get_layer = (AtkLayer (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.get_layer);
-	lpStruct->get_mdi_zorder = (gint (*)())(*env)->GetIntField(env, lpObject, AtkComponentIfaceFc.get_mdi_zorder);
+	lpStruct->add_focus_handler = (guint (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.add_focus_handler);
+	lpStruct->contains = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.contains);
+	lpStruct->ref_accessible_at_point = (AtkObject *(*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.ref_accessible_at_point);
+	lpStruct->get_extents = (void (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.get_extents);
+	lpStruct->get_position = (void (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.get_position);
+	lpStruct->get_size = (void (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.get_size);
+	lpStruct->grab_focus = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.grab_focus);
+	lpStruct->remove_focus_handler = (void (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.remove_focus_handler);
+	lpStruct->set_extents = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.set_extents);
+	lpStruct->set_position = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.set_position);
+	lpStruct->set_size = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.set_size);
+	lpStruct->get_layer = (AtkLayer (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.get_layer);
+	lpStruct->get_mdi_zorder = (gint (*)())(*env)->GetLongField(env, lpObject, AtkComponentIfaceFc.get_mdi_zorder);
 	return lpStruct;
 }
 
 void setAtkComponentIfaceFields(JNIEnv *env, jobject lpObject, AtkComponentIface *lpStruct)
 {
 	if (!AtkComponentIfaceFc.cached) cacheAtkComponentIfaceFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.add_focus_handler, (jint)lpStruct->add_focus_handler);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.contains, (jint)lpStruct->contains);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.ref_accessible_at_point, (jint)lpStruct->ref_accessible_at_point);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.get_extents, (jint)lpStruct->get_extents);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.get_position, (jint)lpStruct->get_position);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.get_size, (jint)lpStruct->get_size);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.grab_focus, (jint)lpStruct->grab_focus);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.remove_focus_handler, (jint)lpStruct->remove_focus_handler);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.set_extents, (jint)lpStruct->set_extents);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.set_position, (jint)lpStruct->set_position);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.set_size, (jint)lpStruct->set_size);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.get_layer, (jint)lpStruct->get_layer);
-	(*env)->SetIntField(env, lpObject, AtkComponentIfaceFc.get_mdi_zorder, (jint)lpStruct->get_mdi_zorder);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.add_focus_handler, (jlong)lpStruct->add_focus_handler);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.contains, (jlong)lpStruct->contains);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.ref_accessible_at_point, (jlong)lpStruct->ref_accessible_at_point);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.get_extents, (jlong)lpStruct->get_extents);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.get_position, (jlong)lpStruct->get_position);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.get_size, (jlong)lpStruct->get_size);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.grab_focus, (jlong)lpStruct->grab_focus);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.remove_focus_handler, (jlong)lpStruct->remove_focus_handler);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.set_extents, (jlong)lpStruct->set_extents);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.set_position, (jlong)lpStruct->set_position);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.set_size, (jlong)lpStruct->set_size);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.get_layer, (jlong)lpStruct->get_layer);
+	(*env)->SetLongField(env, lpObject, AtkComponentIfaceFc.get_mdi_zorder, (jlong)lpStruct->get_mdi_zorder);
 }
 #endif
 
@@ -142,27 +142,27 @@
 {
 	if (AtkHypertextIfaceFc.cached) return;
 	AtkHypertextIfaceFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkHypertextIfaceFc.get_link = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_link", "I");
-	AtkHypertextIfaceFc.get_n_links = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_n_links", "I");
-	AtkHypertextIfaceFc.get_link_index = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_link_index", "I");
+	AtkHypertextIfaceFc.get_link = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_link", "J");
+	AtkHypertextIfaceFc.get_n_links = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_n_links", "J");
+	AtkHypertextIfaceFc.get_link_index = (*env)->GetFieldID(env, AtkHypertextIfaceFc.clazz, "get_link_index", "J");
 	AtkHypertextIfaceFc.cached = 1;
 }
 
 AtkHypertextIface *getAtkHypertextIfaceFields(JNIEnv *env, jobject lpObject, AtkHypertextIface *lpStruct)
 {
 	if (!AtkHypertextIfaceFc.cached) cacheAtkHypertextIfaceFields(env, lpObject);
-	lpStruct->get_link = (AtkHyperlink *(*)())(*env)->GetIntField(env, lpObject, AtkHypertextIfaceFc.get_link);
-	lpStruct->get_n_links = (gint (*)())(*env)->GetIntField(env, lpObject, AtkHypertextIfaceFc.get_n_links);
-	lpStruct->get_link_index = (gint (*)())(*env)->GetIntField(env, lpObject, AtkHypertextIfaceFc.get_link_index);
+	lpStruct->get_link = (AtkHyperlink *(*)())(*env)->GetLongField(env, lpObject, AtkHypertextIfaceFc.get_link);
+	lpStruct->get_n_links = (gint (*)())(*env)->GetLongField(env, lpObject, AtkHypertextIfaceFc.get_n_links);
+	lpStruct->get_link_index = (gint (*)())(*env)->GetLongField(env, lpObject, AtkHypertextIfaceFc.get_link_index);
 	return lpStruct;
 }
 
 void setAtkHypertextIfaceFields(JNIEnv *env, jobject lpObject, AtkHypertextIface *lpStruct)
 {
 	if (!AtkHypertextIfaceFc.cached) cacheAtkHypertextIfaceFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkHypertextIfaceFc.get_link, (jint)lpStruct->get_link);
-	(*env)->SetIntField(env, lpObject, AtkHypertextIfaceFc.get_n_links, (jint)lpStruct->get_n_links);
-	(*env)->SetIntField(env, lpObject, AtkHypertextIfaceFc.get_link_index, (jint)lpStruct->get_link_index);
+	(*env)->SetLongField(env, lpObject, AtkHypertextIfaceFc.get_link, (jlong)lpStruct->get_link);
+	(*env)->SetLongField(env, lpObject, AtkHypertextIfaceFc.get_n_links, (jlong)lpStruct->get_n_links);
+	(*env)->SetLongField(env, lpObject, AtkHypertextIfaceFc.get_link_index, (jlong)lpStruct->get_link_index);
 }
 #endif
 
@@ -179,87 +179,87 @@
 {
 	if (AtkObjectClassFc.cached) return;
 	AtkObjectClassFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkObjectClassFc.get_name = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_name", "I");
-	AtkObjectClassFc.get_description = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_description", "I");
-	AtkObjectClassFc.get_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_parent", "I");
-	AtkObjectClassFc.get_n_children = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_n_children", "I");
-	AtkObjectClassFc.ref_child = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_child", "I");
-	AtkObjectClassFc.get_index_in_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_index_in_parent", "I");
-	AtkObjectClassFc.ref_relation_set = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_relation_set", "I");
-	AtkObjectClassFc.get_role = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_role", "I");
-	AtkObjectClassFc.get_layer = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_layer", "I");
-	AtkObjectClassFc.get_mdi_zorder = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_mdi_zorder", "I");
-	AtkObjectClassFc.ref_state_set = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_state_set", "I");
-	AtkObjectClassFc.set_name = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_name", "I");
-	AtkObjectClassFc.set_description = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_description", "I");
-	AtkObjectClassFc.set_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_parent", "I");
-	AtkObjectClassFc.set_role = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_role", "I");
-	AtkObjectClassFc.connect_property_change_handler = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "connect_property_change_handler", "I");
-	AtkObjectClassFc.remove_property_change_handler = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "remove_property_change_handler", "I");
-	AtkObjectClassFc.initialize = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "initialize", "I");
-	AtkObjectClassFc.children_changed = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "children_changed", "I");
-	AtkObjectClassFc.focus_event = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "focus_event", "I");
-	AtkObjectClassFc.property_change = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "property_change", "I");
-	AtkObjectClassFc.state_change = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "state_change", "I");
-	AtkObjectClassFc.visible_data_changed = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "visible_data_changed", "I");
+	AtkObjectClassFc.get_name = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_name", "J");
+	AtkObjectClassFc.get_description = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_description", "J");
+	AtkObjectClassFc.get_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_parent", "J");
+	AtkObjectClassFc.get_n_children = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_n_children", "J");
+	AtkObjectClassFc.ref_child = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_child", "J");
+	AtkObjectClassFc.get_index_in_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_index_in_parent", "J");
+	AtkObjectClassFc.ref_relation_set = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_relation_set", "J");
+	AtkObjectClassFc.get_role = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_role", "J");
+	AtkObjectClassFc.get_layer = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_layer", "J");
+	AtkObjectClassFc.get_mdi_zorder = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "get_mdi_zorder", "J");
+	AtkObjectClassFc.ref_state_set = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "ref_state_set", "J");
+	AtkObjectClassFc.set_name = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_name", "J");
+	AtkObjectClassFc.set_description = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_description", "J");
+	AtkObjectClassFc.set_parent = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_parent", "J");
+	AtkObjectClassFc.set_role = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "set_role", "J");
+	AtkObjectClassFc.connect_property_change_handler = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "connect_property_change_handler", "J");
+	AtkObjectClassFc.remove_property_change_handler = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "remove_property_change_handler", "J");
+	AtkObjectClassFc.initialize = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "initialize", "J");
+	AtkObjectClassFc.children_changed = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "children_changed", "J");
+	AtkObjectClassFc.focus_event = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "focus_event", "J");
+	AtkObjectClassFc.property_change = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "property_change", "J");
+	AtkObjectClassFc.state_change = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "state_change", "J");
+	AtkObjectClassFc.visible_data_changed = (*env)->GetFieldID(env, AtkObjectClassFc.clazz, "visible_data_changed", "J");
 	AtkObjectClassFc.cached = 1;
 }
 
 AtkObjectClass *getAtkObjectClassFields(JNIEnv *env, jobject lpObject, AtkObjectClass *lpStruct)
 {
 	if (!AtkObjectClassFc.cached) cacheAtkObjectClassFields(env, lpObject);
-	lpStruct->get_name = (G_CONST_RETURN gchar *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_name);
-	lpStruct->get_description = (G_CONST_RETURN gchar *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_description);
-	lpStruct->get_parent = (AtkObject *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_parent);
-	lpStruct->get_n_children = (gint (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_n_children);
-	lpStruct->ref_child = (AtkObject *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.ref_child);
-	lpStruct->get_index_in_parent = (gint (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_index_in_parent);
-	lpStruct->ref_relation_set = (AtkRelationSet *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.ref_relation_set);
-	lpStruct->get_role = (AtkRole (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_role);
-	lpStruct->get_layer = (AtkLayer (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_layer);
-	lpStruct->get_mdi_zorder = (gint (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.get_mdi_zorder);
-	lpStruct->ref_state_set = (AtkStateSet *(*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.ref_state_set);
-	lpStruct->set_name = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.set_name);
-	lpStruct->set_description = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.set_description);
-	lpStruct->set_parent = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.set_parent);
-	lpStruct->set_role = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.set_role);
-	lpStruct->connect_property_change_handler = (guint (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.connect_property_change_handler);
-	lpStruct->remove_property_change_handler = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.remove_property_change_handler);
-	lpStruct->initialize = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.initialize);
-	lpStruct->children_changed = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.children_changed);
-	lpStruct->focus_event = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.focus_event);
-	lpStruct->property_change = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.property_change);
-	lpStruct->state_change = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.state_change);
-	lpStruct->visible_data_changed = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectClassFc.visible_data_changed);
+	lpStruct->get_name = (G_CONST_RETURN gchar *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_name);
+	lpStruct->get_description = (G_CONST_RETURN gchar *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_description);
+	lpStruct->get_parent = (AtkObject *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_parent);
+	lpStruct->get_n_children = (gint (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_n_children);
+	lpStruct->ref_child = (AtkObject *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.ref_child);
+	lpStruct->get_index_in_parent = (gint (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_index_in_parent);
+	lpStruct->ref_relation_set = (AtkRelationSet *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.ref_relation_set);
+	lpStruct->get_role = (AtkRole (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_role);
+	lpStruct->get_layer = (AtkLayer (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_layer);
+	lpStruct->get_mdi_zorder = (gint (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.get_mdi_zorder);
+	lpStruct->ref_state_set = (AtkStateSet *(*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.ref_state_set);
+	lpStruct->set_name = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.set_name);
+	lpStruct->set_description = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.set_description);
+	lpStruct->set_parent = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.set_parent);
+	lpStruct->set_role = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.set_role);
+	lpStruct->connect_property_change_handler = (guint (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.connect_property_change_handler);
+	lpStruct->remove_property_change_handler = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.remove_property_change_handler);
+	lpStruct->initialize = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.initialize);
+	lpStruct->children_changed = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.children_changed);
+	lpStruct->focus_event = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.focus_event);
+	lpStruct->property_change = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.property_change);
+	lpStruct->state_change = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.state_change);
+	lpStruct->visible_data_changed = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectClassFc.visible_data_changed);
 	return lpStruct;
 }
 
 void setAtkObjectClassFields(JNIEnv *env, jobject lpObject, AtkObjectClass *lpStruct)
 {
 	if (!AtkObjectClassFc.cached) cacheAtkObjectClassFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_name, (jint)lpStruct->get_name);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_description, (jint)lpStruct->get_description);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_parent, (jint)lpStruct->get_parent);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_n_children, (jint)lpStruct->get_n_children);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.ref_child, (jint)lpStruct->ref_child);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_index_in_parent, (jint)lpStruct->get_index_in_parent);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.ref_relation_set, (jint)lpStruct->ref_relation_set);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_role, (jint)lpStruct->get_role);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_layer, (jint)lpStruct->get_layer);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.get_mdi_zorder, (jint)lpStruct->get_mdi_zorder);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.ref_state_set, (jint)lpStruct->ref_state_set);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.set_name, (jint)lpStruct->set_name);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.set_description, (jint)lpStruct->set_description);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.set_parent, (jint)lpStruct->set_parent);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.set_role, (jint)lpStruct->set_role);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.connect_property_change_handler, (jint)lpStruct->connect_property_change_handler);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.remove_property_change_handler, (jint)lpStruct->remove_property_change_handler);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.initialize, (jint)lpStruct->initialize);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.children_changed, (jint)lpStruct->children_changed);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.focus_event, (jint)lpStruct->focus_event);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.property_change, (jint)lpStruct->property_change);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.state_change, (jint)lpStruct->state_change);
-	(*env)->SetIntField(env, lpObject, AtkObjectClassFc.visible_data_changed, (jint)lpStruct->visible_data_changed);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_name, (jlong)lpStruct->get_name);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_description, (jlong)lpStruct->get_description);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_parent, (jlong)lpStruct->get_parent);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_n_children, (jlong)lpStruct->get_n_children);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.ref_child, (jlong)lpStruct->ref_child);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_index_in_parent, (jlong)lpStruct->get_index_in_parent);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.ref_relation_set, (jlong)lpStruct->ref_relation_set);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_role, (jlong)lpStruct->get_role);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_layer, (jlong)lpStruct->get_layer);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.get_mdi_zorder, (jlong)lpStruct->get_mdi_zorder);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.ref_state_set, (jlong)lpStruct->ref_state_set);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.set_name, (jlong)lpStruct->set_name);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.set_description, (jlong)lpStruct->set_description);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.set_parent, (jlong)lpStruct->set_parent);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.set_role, (jlong)lpStruct->set_role);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.connect_property_change_handler, (jlong)lpStruct->connect_property_change_handler);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.remove_property_change_handler, (jlong)lpStruct->remove_property_change_handler);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.initialize, (jlong)lpStruct->initialize);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.children_changed, (jlong)lpStruct->children_changed);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.focus_event, (jlong)lpStruct->focus_event);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.property_change, (jlong)lpStruct->property_change);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.state_change, (jlong)lpStruct->state_change);
+	(*env)->SetLongField(env, lpObject, AtkObjectClassFc.visible_data_changed, (jlong)lpStruct->visible_data_changed);
 }
 #endif
 
@@ -276,27 +276,27 @@
 {
 	if (AtkObjectFactoryClassFc.cached) return;
 	AtkObjectFactoryClassFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkObjectFactoryClassFc.create_accessible = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "create_accessible", "I");
-	AtkObjectFactoryClassFc.invalidate = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "invalidate", "I");
-	AtkObjectFactoryClassFc.get_accessible_type = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "get_accessible_type", "I");
+	AtkObjectFactoryClassFc.create_accessible = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "create_accessible", "J");
+	AtkObjectFactoryClassFc.invalidate = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "invalidate", "J");
+	AtkObjectFactoryClassFc.get_accessible_type = (*env)->GetFieldID(env, AtkObjectFactoryClassFc.clazz, "get_accessible_type", "J");
 	AtkObjectFactoryClassFc.cached = 1;
 }
 
 AtkObjectFactoryClass *getAtkObjectFactoryClassFields(JNIEnv *env, jobject lpObject, AtkObjectFactoryClass *lpStruct)
 {
 	if (!AtkObjectFactoryClassFc.cached) cacheAtkObjectFactoryClassFields(env, lpObject);
-	lpStruct->create_accessible = (AtkObject *(*)())(*env)->GetIntField(env, lpObject, AtkObjectFactoryClassFc.create_accessible);
-	lpStruct->invalidate = (void (*)())(*env)->GetIntField(env, lpObject, AtkObjectFactoryClassFc.invalidate);
-	lpStruct->get_accessible_type = (GType (*)())(*env)->GetIntField(env, lpObject, AtkObjectFactoryClassFc.get_accessible_type);
+	lpStruct->create_accessible = (AtkObject *(*)())(*env)->GetLongField(env, lpObject, AtkObjectFactoryClassFc.create_accessible);
+	lpStruct->invalidate = (void (*)())(*env)->GetLongField(env, lpObject, AtkObjectFactoryClassFc.invalidate);
+	lpStruct->get_accessible_type = (GType (*)())(*env)->GetLongField(env, lpObject, AtkObjectFactoryClassFc.get_accessible_type);
 	return lpStruct;
 }
 
 void setAtkObjectFactoryClassFields(JNIEnv *env, jobject lpObject, AtkObjectFactoryClass *lpStruct)
 {
 	if (!AtkObjectFactoryClassFc.cached) cacheAtkObjectFactoryClassFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkObjectFactoryClassFc.create_accessible, (jint)lpStruct->create_accessible);
-	(*env)->SetIntField(env, lpObject, AtkObjectFactoryClassFc.invalidate, (jint)lpStruct->invalidate);
-	(*env)->SetIntField(env, lpObject, AtkObjectFactoryClassFc.get_accessible_type, (jint)lpStruct->get_accessible_type);
+	(*env)->SetLongField(env, lpObject, AtkObjectFactoryClassFc.create_accessible, (jlong)lpStruct->create_accessible);
+	(*env)->SetLongField(env, lpObject, AtkObjectFactoryClassFc.invalidate, (jlong)lpStruct->invalidate);
+	(*env)->SetLongField(env, lpObject, AtkObjectFactoryClassFc.get_accessible_type, (jlong)lpStruct->get_accessible_type);
 }
 #endif
 
@@ -313,42 +313,42 @@
 {
 	if (AtkSelectionIfaceFc.cached) return;
 	AtkSelectionIfaceFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkSelectionIfaceFc.add_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "add_selection", "I");
-	AtkSelectionIfaceFc.clear_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "clear_selection", "I");
-	AtkSelectionIfaceFc.ref_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "ref_selection", "I");
-	AtkSelectionIfaceFc.get_selection_count = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "get_selection_count", "I");
-	AtkSelectionIfaceFc.is_child_selected = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "is_child_selected", "I");
-	AtkSelectionIfaceFc.remove_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "remove_selection", "I");
-	AtkSelectionIfaceFc.select_all_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "select_all_selection", "I");
-	AtkSelectionIfaceFc.selection_changed = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "selection_changed", "I");
+	AtkSelectionIfaceFc.add_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "add_selection", "J");
+	AtkSelectionIfaceFc.clear_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "clear_selection", "J");
+	AtkSelectionIfaceFc.ref_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "ref_selection", "J");
+	AtkSelectionIfaceFc.get_selection_count = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "get_selection_count", "J");
+	AtkSelectionIfaceFc.is_child_selected = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "is_child_selected", "J");
+	AtkSelectionIfaceFc.remove_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "remove_selection", "J");
+	AtkSelectionIfaceFc.select_all_selection = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "select_all_selection", "J");
+	AtkSelectionIfaceFc.selection_changed = (*env)->GetFieldID(env, AtkSelectionIfaceFc.clazz, "selection_changed", "J");
 	AtkSelectionIfaceFc.cached = 1;
 }
 
 AtkSelectionIface *getAtkSelectionIfaceFields(JNIEnv *env, jobject lpObject, AtkSelectionIface *lpStruct)
 {
 	if (!AtkSelectionIfaceFc.cached) cacheAtkSelectionIfaceFields(env, lpObject);
-	lpStruct->add_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.add_selection);
-	lpStruct->clear_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.clear_selection);
-	lpStruct->ref_selection = (AtkObject *(*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.ref_selection);
-	lpStruct->get_selection_count = (gint (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.get_selection_count);
-	lpStruct->is_child_selected = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.is_child_selected);
-	lpStruct->remove_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.remove_selection);
-	lpStruct->select_all_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.select_all_selection);
-	lpStruct->selection_changed = (void (*)())(*env)->GetIntField(env, lpObject, AtkSelectionIfaceFc.selection_changed);
+	lpStruct->add_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.add_selection);
+	lpStruct->clear_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.clear_selection);
+	lpStruct->ref_selection = (AtkObject *(*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.ref_selection);
+	lpStruct->get_selection_count = (gint (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.get_selection_count);
+	lpStruct->is_child_selected = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.is_child_selected);
+	lpStruct->remove_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.remove_selection);
+	lpStruct->select_all_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.select_all_selection);
+	lpStruct->selection_changed = (void (*)())(*env)->GetLongField(env, lpObject, AtkSelectionIfaceFc.selection_changed);
 	return lpStruct;
 }
 
 void setAtkSelectionIfaceFields(JNIEnv *env, jobject lpObject, AtkSelectionIface *lpStruct)
 {
 	if (!AtkSelectionIfaceFc.cached) cacheAtkSelectionIfaceFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.add_selection, (jint)lpStruct->add_selection);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.clear_selection, (jint)lpStruct->clear_selection);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.ref_selection, (jint)lpStruct->ref_selection);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.get_selection_count, (jint)lpStruct->get_selection_count);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.is_child_selected, (jint)lpStruct->is_child_selected);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.remove_selection, (jint)lpStruct->remove_selection);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.select_all_selection, (jint)lpStruct->select_all_selection);
-	(*env)->SetIntField(env, lpObject, AtkSelectionIfaceFc.selection_changed, (jint)lpStruct->selection_changed);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.add_selection, (jlong)lpStruct->add_selection);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.clear_selection, (jlong)lpStruct->clear_selection);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.ref_selection, (jlong)lpStruct->ref_selection);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.get_selection_count, (jlong)lpStruct->get_selection_count);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.is_child_selected, (jlong)lpStruct->is_child_selected);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.remove_selection, (jlong)lpStruct->remove_selection);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.select_all_selection, (jlong)lpStruct->select_all_selection);
+	(*env)->SetLongField(env, lpObject, AtkSelectionIfaceFc.selection_changed, (jlong)lpStruct->selection_changed);
 }
 #endif
 
@@ -365,78 +365,78 @@
 {
 	if (AtkTextIfaceFc.cached) return;
 	AtkTextIfaceFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	AtkTextIfaceFc.get_text = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text", "I");
-	AtkTextIfaceFc.get_text_after_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_after_offset", "I");
-	AtkTextIfaceFc.get_text_at_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_at_offset", "I");
-	AtkTextIfaceFc.get_character_at_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_at_offset", "I");
-	AtkTextIfaceFc.get_text_before_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_before_offset", "I");
-	AtkTextIfaceFc.get_caret_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_caret_offset", "I");
-	AtkTextIfaceFc.get_run_attributes = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_run_attributes", "I");
-	AtkTextIfaceFc.get_default_attributes = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_default_attributes", "I");
-	AtkTextIfaceFc.get_character_extents = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_extents", "I");
-	AtkTextIfaceFc.get_character_count = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_count", "I");
-	AtkTextIfaceFc.get_offset_at_point = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_offset_at_point", "I");
-	AtkTextIfaceFc.get_n_selections = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_n_selections", "I");
-	AtkTextIfaceFc.get_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_selection", "I");
-	AtkTextIfaceFc.add_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "add_selection", "I");
-	AtkTextIfaceFc.remove_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "remove_selection", "I");
-	AtkTextIfaceFc.set_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "set_selection", "I");
-	AtkTextIfaceFc.set_caret_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "set_caret_offset", "I");
-	AtkTextIfaceFc.text_changed = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_changed", "I");
-	AtkTextIfaceFc.text_caret_moved = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_caret_moved", "I");
-	AtkTextIfaceFc.text_selection_changed = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_selection_changed", "I");
+	AtkTextIfaceFc.get_text = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text", "J");
+	AtkTextIfaceFc.get_text_after_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_after_offset", "J");
+	AtkTextIfaceFc.get_text_at_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_at_offset", "J");
+	AtkTextIfaceFc.get_character_at_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_at_offset", "J");
+	AtkTextIfaceFc.get_text_before_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_text_before_offset", "J");
+	AtkTextIfaceFc.get_caret_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_caret_offset", "J");
+	AtkTextIfaceFc.get_run_attributes = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_run_attributes", "J");
+	AtkTextIfaceFc.get_default_attributes = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_default_attributes", "J");
+	AtkTextIfaceFc.get_character_extents = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_extents", "J");
+	AtkTextIfaceFc.get_character_count = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_character_count", "J");
+	AtkTextIfaceFc.get_offset_at_point = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_offset_at_point", "J");
+	AtkTextIfaceFc.get_n_selections = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_n_selections", "J");
+	AtkTextIfaceFc.get_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "get_selection", "J");
+	AtkTextIfaceFc.add_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "add_selection", "J");
+	AtkTextIfaceFc.remove_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "remove_selection", "J");
+	AtkTextIfaceFc.set_selection = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "set_selection", "J");
+	AtkTextIfaceFc.set_caret_offset = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "set_caret_offset", "J");
+	AtkTextIfaceFc.text_changed = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_changed", "J");
+	AtkTextIfaceFc.text_caret_moved = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_caret_moved", "J");
+	AtkTextIfaceFc.text_selection_changed = (*env)->GetFieldID(env, AtkTextIfaceFc.clazz, "text_selection_changed", "J");
 	AtkTextIfaceFc.cached = 1;
 }
 
 AtkTextIface *getAtkTextIfaceFields(JNIEnv *env, jobject lpObject, AtkTextIface *lpStruct)
 {
 	if (!AtkTextIfaceFc.cached) cacheAtkTextIfaceFields(env, lpObject);
-	lpStruct->get_text = (gchar *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_text);
-	lpStruct->get_text_after_offset = (gchar *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_text_after_offset);
-	lpStruct->get_text_at_offset = (gchar *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_text_at_offset);
-	lpStruct->get_character_at_offset = (gunichar (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_character_at_offset);
-	lpStruct->get_text_before_offset = (gchar *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_text_before_offset);
-	lpStruct->get_caret_offset = (gint (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_caret_offset);
-	lpStruct->get_run_attributes = (AtkAttributeSet *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_run_attributes);
-	lpStruct->get_default_attributes = (AtkAttributeSet *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_default_attributes);
-	lpStruct->get_character_extents = (void (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_character_extents);
-	lpStruct->get_character_count = (gint (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_character_count);
-	lpStruct->get_offset_at_point = (gint (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_offset_at_point);
-	lpStruct->get_n_selections = (gint (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_n_selections);
-	lpStruct->get_selection = (gchar *(*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.get_selection);
-	lpStruct->add_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.add_selection);
-	lpStruct->remove_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.remove_selection);
-	lpStruct->set_selection = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.set_selection);
-	lpStruct->set_caret_offset = (gboolean (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.set_caret_offset);
-	lpStruct->text_changed = (void (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.text_changed);
-	lpStruct->text_caret_moved = (void (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.text_caret_moved);
-	lpStruct->text_selection_changed = (void (*)())(*env)->GetIntField(env, lpObject, AtkTextIfaceFc.text_selection_changed);
+	lpStruct->get_text = (gchar *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_text);
+	lpStruct->get_text_after_offset = (gchar *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_text_after_offset);
+	lpStruct->get_text_at_offset = (gchar *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_text_at_offset);
+	lpStruct->get_character_at_offset = (gunichar (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_character_at_offset);
+	lpStruct->get_text_before_offset = (gchar *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_text_before_offset);
+	lpStruct->get_caret_offset = (gint (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_caret_offset);
+	lpStruct->get_run_attributes = (AtkAttributeSet *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_run_attributes);
+	lpStruct->get_default_attributes = (AtkAttributeSet *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_default_attributes);
+	lpStruct->get_character_extents = (void (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_character_extents);
+	lpStruct->get_character_count = (gint (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_character_count);
+	lpStruct->get_offset_at_point = (gint (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_offset_at_point);
+	lpStruct->get_n_selections = (gint (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_n_selections);
+	lpStruct->get_selection = (gchar *(*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.get_selection);
+	lpStruct->add_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.add_selection);
+	lpStruct->remove_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.remove_selection);
+	lpStruct->set_selection = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.set_selection);
+	lpStruct->set_caret_offset = (gboolean (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.set_caret_offset);
+	lpStruct->text_changed = (void (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.text_changed);
+	lpStruct->text_caret_moved = (void (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.text_caret_moved);
+	lpStruct->text_selection_changed = (void (*)())(*env)->GetLongField(env, lpObject, AtkTextIfaceFc.text_selection_changed);
 	return lpStruct;
 }
 
 void setAtkTextIfaceFields(JNIEnv *env, jobject lpObject, AtkTextIface *lpStruct)
 {
 	if (!AtkTextIfaceFc.cached) cacheAtkTextIfaceFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_text, (jint)lpStruct->get_text);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_text_after_offset, (jint)lpStruct->get_text_after_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_text_at_offset, (jint)lpStruct->get_text_at_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_character_at_offset, (jint)lpStruct->get_character_at_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_text_before_offset, (jint)lpStruct->get_text_before_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_caret_offset, (jint)lpStruct->get_caret_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_run_attributes, (jint)lpStruct->get_run_attributes);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_default_attributes, (jint)lpStruct->get_default_attributes);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_character_extents, (jint)lpStruct->get_character_extents);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_character_count, (jint)lpStruct->get_character_count);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_offset_at_point, (jint)lpStruct->get_offset_at_point);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_n_selections, (jint)lpStruct->get_n_selections);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.get_selection, (jint)lpStruct->get_selection);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.add_selection, (jint)lpStruct->add_selection);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.remove_selection, (jint)lpStruct->remove_selection);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.set_selection, (jint)lpStruct->set_selection);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.set_caret_offset, (jint)lpStruct->set_caret_offset);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.text_changed, (jint)lpStruct->text_changed);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.text_caret_moved, (jint)lpStruct->text_caret_moved);
-	(*env)->SetIntField(env, lpObject, AtkTextIfaceFc.text_selection_changed, (jint)lpStruct->text_selection_changed);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_text, (jlong)lpStruct->get_text);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_text_after_offset, (jlong)lpStruct->get_text_after_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_text_at_offset, (jlong)lpStruct->get_text_at_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_character_at_offset, (jlong)lpStruct->get_character_at_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_text_before_offset, (jlong)lpStruct->get_text_before_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_caret_offset, (jlong)lpStruct->get_caret_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_run_attributes, (jlong)lpStruct->get_run_attributes);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_default_attributes, (jlong)lpStruct->get_default_attributes);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_character_extents, (jlong)lpStruct->get_character_extents);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_character_count, (jlong)lpStruct->get_character_count);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_offset_at_point, (jlong)lpStruct->get_offset_at_point);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_n_selections, (jlong)lpStruct->get_n_selections);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.get_selection, (jlong)lpStruct->get_selection);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.add_selection, (jlong)lpStruct->add_selection);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.remove_selection, (jlong)lpStruct->remove_selection);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.set_selection, (jlong)lpStruct->set_selection);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.set_caret_offset, (jlong)lpStruct->set_caret_offset);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.text_changed, (jlong)lpStruct->text_changed);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.text_caret_moved, (jlong)lpStruct->text_caret_moved);
+	(*env)->SetLongField(env, lpObject, AtkTextIfaceFc.text_selection_changed, (jlong)lpStruct->text_selection_changed);
 }
 #endif
 
@@ -453,21 +453,21 @@
 {
 	if (GtkAccessibleFc.cached) return;
 	GtkAccessibleFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkAccessibleFc.widget = (*env)->GetFieldID(env, GtkAccessibleFc.clazz, "widget", "I");
+	GtkAccessibleFc.widget = (*env)->GetFieldID(env, GtkAccessibleFc.clazz, "widget", "J");
 	GtkAccessibleFc.cached = 1;
 }
 
 GtkAccessible *getGtkAccessibleFields(JNIEnv *env, jobject lpObject, GtkAccessible *lpStruct)
 {
 	if (!GtkAccessibleFc.cached) cacheGtkAccessibleFields(env, lpObject);
-	lpStruct->widget = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkAccessibleFc.widget);
+	lpStruct->widget = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkAccessibleFc.widget);
 	return lpStruct;
 }
 
 void setGtkAccessibleFields(JNIEnv *env, jobject lpObject, GtkAccessible *lpStruct)
 {
 	if (!GtkAccessibleFc.cached) cacheGtkAccessibleFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkAccessibleFc.widget, (jint)lpStruct->widget);
+	(*env)->SetLongField(env, lpObject, GtkAccessibleFc.widget, (jlong)lpStruct->widget);
 }
 #endif
 
diff -ur x86/atk_structs.h x86_64/atk_structs.h
--- x86/atk_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/atk_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
diff -ur x86/cairo.c x86_64/cairo.c
--- x86/cairo.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/cairo.c	2009-02-11 17:53:48.000000000 -0500
@@ -15,7 +15,7 @@
  *
  * IBM
  * -  Binding to permit interfacing between Cairo and SWT
- * -  Copyright (C) 2005, 2007 IBM Corp.  All Rights Reserved.
+ * -  Copyright (C) 2005, 2008 IBM Corp.  All Rights Reserved.
  *
  * ***** END LICENSE BLOCK ***** */
 
@@ -39,7 +39,7 @@
 
 #ifndef NO__1cairo_1append_1path
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1append_1path)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1append_1path_FUNC);
 	cairo_append_path((cairo_t *)arg0, (cairo_path_t *)arg1);
@@ -49,7 +49,7 @@
 
 #ifndef NO__1cairo_1arc
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1arc)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1arc_FUNC);
 	cairo_arc((cairo_t *)arg0, arg1, arg2, arg3, arg4, arg5);
@@ -59,7 +59,7 @@
 
 #ifndef NO__1cairo_1arc_1negative
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1arc_1negative)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1arc_1negative_FUNC);
 	cairo_arc_negative((cairo_t *)arg0, arg1, arg2, arg3, arg4, arg5);
@@ -69,7 +69,7 @@
 
 #ifndef NO__1cairo_1clip
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1clip)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1clip_FUNC);
 	cairo_clip((cairo_t *)arg0);
@@ -79,7 +79,7 @@
 
 #ifndef NO__1cairo_1clip_1preserve
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1clip_1preserve)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1clip_1preserve_FUNC);
 	cairo_clip_preserve((cairo_t *)arg0);
@@ -89,7 +89,7 @@
 
 #ifndef NO__1cairo_1close_1path
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1close_1path)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1close_1path_FUNC);
 	cairo_close_path((cairo_t *)arg0);
@@ -99,7 +99,7 @@
 
 #ifndef NO__1cairo_1copy_1page
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1copy_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1copy_1page_FUNC);
 	cairo_copy_page((cairo_t *)arg0);
@@ -108,36 +108,36 @@
 #endif
 
 #ifndef NO__1cairo_1copy_1path
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1copy_1path)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1copy_1path)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1copy_1path_FUNC);
-	rc = (jint)cairo_copy_path((cairo_t *)arg0);
+	rc = (jlong)cairo_copy_path((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1copy_1path_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1copy_1path_1flat
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1copy_1path_1flat)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1copy_1path_1flat)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1copy_1path_1flat_FUNC);
-	rc = (jint)cairo_copy_path_flat((cairo_t *)arg0);
+	rc = (jlong)cairo_copy_path_flat((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1copy_1path_1flat_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1create
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1create)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1create)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1create_FUNC);
-	rc = (jint)cairo_create((cairo_surface_t *)arg0);
+	rc = (jlong)cairo_create((cairo_surface_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1create_FUNC);
 	return rc;
 }
@@ -145,7 +145,7 @@
 
 #ifndef NO__1cairo_1curve_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1curve_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5, jdouble arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5, jdouble arg6)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1curve_1to_FUNC);
 	cairo_curve_to((cairo_t *)arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -155,7 +155,7 @@
 
 #ifndef NO__1cairo_1destroy
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1destroy_FUNC);
 	cairo_destroy((cairo_t *)arg0);
@@ -165,7 +165,7 @@
 
 #ifndef NO__1cairo_1device_1to_1user
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1device_1to_1user)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -182,7 +182,7 @@
 
 #ifndef NO__1cairo_1device_1to_1user_1distance
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1device_1to_1user_1distance)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -199,7 +199,7 @@
 
 #ifndef NO__1cairo_1fill
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1fill)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1fill_FUNC);
 	cairo_fill((cairo_t *)arg0);
@@ -209,7 +209,7 @@
 
 #ifndef NO__1cairo_1fill_1extents
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1fill_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2, jdoubleArray arg3, jdoubleArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2, jdoubleArray arg3, jdoubleArray arg4)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -232,7 +232,7 @@
 
 #ifndef NO__1cairo_1fill_1preserve
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1fill_1preserve)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1fill_1preserve_FUNC);
 	cairo_fill_preserve((cairo_t *)arg0);
@@ -242,7 +242,7 @@
 
 #ifndef NO__1cairo_1font_1extents
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1font_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	cairo_font_extents_t _arg1, *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1font_1extents_FUNC);
@@ -255,12 +255,12 @@
 #endif
 
 #ifndef NO__1cairo_1font_1options_1create
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1font_1options_1create)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1font_1options_1create)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1font_1options_1create_FUNC);
-	rc = (jint)cairo_font_options_create();
+	rc = (jlong)cairo_font_options_create();
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1font_1options_1create_FUNC);
 	return rc;
 }
@@ -268,7 +268,7 @@
 
 #ifndef NO__1cairo_1font_1options_1destroy
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1font_1options_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1font_1options_1destroy_FUNC);
 	cairo_font_options_destroy((cairo_font_options_t *)arg0);
@@ -278,7 +278,7 @@
 
 #ifndef NO__1cairo_1font_1options_1get_1antialias
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1font_1options_1get_1antialias)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1font_1options_1get_1antialias_FUNC);
@@ -290,7 +290,7 @@
 
 #ifndef NO__1cairo_1font_1options_1set_1antialias
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1font_1options_1set_1antialias)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1font_1options_1set_1antialias_FUNC);
 	cairo_font_options_set_antialias((cairo_font_options_t *)arg0, arg1);
@@ -300,7 +300,7 @@
 
 #ifndef NO__1cairo_1get_1antialias
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1antialias)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1antialias_FUNC);
@@ -312,7 +312,7 @@
 
 #ifndef NO__1cairo_1get_1current_1point
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1get_1current_1point)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -329,7 +329,7 @@
 
 #ifndef NO__1cairo_1get_1fill_1rule
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1fill_1rule)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1fill_1rule_FUNC);
@@ -340,12 +340,12 @@
 #endif
 
 #ifndef NO__1cairo_1get_1font_1face
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1font_1face)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1get_1font_1face)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1font_1face_FUNC);
-	rc = (jint)cairo_get_font_face((cairo_t *)arg0);
+	rc = (jlong)cairo_get_font_face((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1get_1font_1face_FUNC);
 	return rc;
 }
@@ -353,7 +353,7 @@
 
 #ifndef NO__1cairo_1get_1font_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1get_1font_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1font_1matrix_FUNC);
@@ -367,7 +367,7 @@
 
 #ifndef NO__1cairo_1get_1font_1options
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1get_1font_1options)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1font_1options_FUNC);
 	cairo_get_font_options((cairo_t *)arg0, (cairo_font_options_t *)arg1);
@@ -377,7 +377,7 @@
 
 #ifndef NO__1cairo_1get_1line_1cap
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1line_1cap)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1line_1cap_FUNC);
@@ -389,7 +389,7 @@
 
 #ifndef NO__1cairo_1get_1line_1join
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1line_1join)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1line_1join_FUNC);
@@ -401,7 +401,7 @@
 
 #ifndef NO__1cairo_1get_1line_1width
 JNIEXPORT jdouble JNICALL Cairo_NATIVE(_1cairo_1get_1line_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jdouble rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1line_1width_FUNC);
@@ -413,7 +413,7 @@
 
 #ifndef NO__1cairo_1get_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1get_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1matrix_FUNC);
@@ -427,7 +427,7 @@
 
 #ifndef NO__1cairo_1get_1miter_1limit
 JNIEXPORT jdouble JNICALL Cairo_NATIVE(_1cairo_1get_1miter_1limit)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jdouble rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1miter_1limit_FUNC);
@@ -439,7 +439,7 @@
 
 #ifndef NO__1cairo_1get_1operator
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1operator)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1operator_FUNC);
@@ -450,24 +450,24 @@
 #endif
 
 #ifndef NO__1cairo_1get_1source
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1source)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1get_1source)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1source_FUNC);
-	rc = (jint)cairo_get_source((cairo_t *)arg0);
+	rc = (jlong)cairo_get_source((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1get_1source_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1get_1target
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1get_1target)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1get_1target)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1target_FUNC);
-	rc = (jint)cairo_get_target((cairo_t *)arg0);
+	rc = (jlong)cairo_get_target((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1get_1target_FUNC);
 	return rc;
 }
@@ -475,7 +475,7 @@
 
 #ifndef NO__1cairo_1get_1tolerance
 JNIEXPORT jdouble JNICALL Cairo_NATIVE(_1cairo_1get_1tolerance)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jdouble rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1get_1tolerance_FUNC);
@@ -487,7 +487,7 @@
 
 #ifndef NO__1cairo_1glyph_1extents
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1glyph_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlong arg3)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1glyph_1extents_FUNC);
 	cairo_glyph_extents((cairo_t *)arg0, (cairo_glyph_t *)arg1, arg2, (cairo_text_extents_t *)arg3);
@@ -497,7 +497,7 @@
 
 #ifndef NO__1cairo_1glyph_1path
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1glyph_1path)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1glyph_1path_FUNC);
 	cairo_glyph_path((cairo_t *)arg0, (cairo_glyph_t *)arg1, arg2);
@@ -507,7 +507,7 @@
 
 #ifndef NO__1cairo_1identity_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1identity_1matrix)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1identity_1matrix_FUNC);
 	cairo_identity_matrix((cairo_t *)arg0);
@@ -516,24 +516,24 @@
 #endif
 
 #ifndef NO__1cairo_1image_1surface_1create
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1create)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1create)
 	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1image_1surface_1create_FUNC);
-	rc = (jint)cairo_image_surface_create(arg0, arg1, arg2);
+	rc = (jlong)cairo_image_surface_create(arg0, arg1, arg2);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1image_1surface_1create_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1image_1surface_1create_1for_1data
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1create_1for_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1create_1for_1data)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1image_1surface_1create_1for_1data_FUNC);
-	rc = (jint)cairo_image_surface_create_for_data((unsigned char *)arg0, arg1, arg2, arg3, arg4);
+	rc = (jlong)cairo_image_surface_create_for_data((unsigned char *)arg0, arg1, arg2, arg3, arg4);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1image_1surface_1create_1for_1data_FUNC);
 	return rc;
 }
@@ -541,7 +541,7 @@
 
 #ifndef NO__1cairo_1image_1surface_1get_1height
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1get_1height)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1image_1surface_1get_1height_FUNC);
@@ -553,7 +553,7 @@
 
 #ifndef NO__1cairo_1image_1surface_1get_1width
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1image_1surface_1get_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1image_1surface_1get_1width_FUNC);
@@ -565,7 +565,7 @@
 
 #ifndef NO__1cairo_1in_1fill
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1in_1fill)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1in_1fill_FUNC);
@@ -577,7 +577,7 @@
 
 #ifndef NO__1cairo_1in_1stroke
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1in_1stroke)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1in_1stroke_FUNC);
@@ -589,7 +589,7 @@
 
 #ifndef NO__1cairo_1line_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1line_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1line_1to_FUNC);
 	cairo_line_to((cairo_t *)arg0, arg1, arg2);
@@ -599,7 +599,7 @@
 
 #ifndef NO__1cairo_1mask
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1mask)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1mask_FUNC);
 	cairo_mask((cairo_t *)arg0, (cairo_pattern_t *)arg1);
@@ -609,7 +609,7 @@
 
 #ifndef NO__1cairo_1mask_1surface
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1mask_1surface)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jdouble arg2, jdouble arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jdouble arg2, jdouble arg3)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1mask_1surface_FUNC);
 	cairo_mask_surface((cairo_t *)arg0, (cairo_surface_t *)arg1, arg2, arg3);
@@ -807,7 +807,7 @@
 
 #ifndef NO__1cairo_1move_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1move_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1move_1to_FUNC);
 	cairo_move_to((cairo_t *)arg0, arg1, arg2);
@@ -817,7 +817,7 @@
 
 #ifndef NO__1cairo_1new_1path
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1new_1path)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1new_1path_FUNC);
 	cairo_new_path((cairo_t *)arg0);
@@ -827,7 +827,7 @@
 
 #ifndef NO__1cairo_1paint
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1paint)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1paint_FUNC);
 	cairo_paint((cairo_t *)arg0);
@@ -837,7 +837,7 @@
 
 #ifndef NO__1cairo_1paint_1with_1alpha
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1paint_1with_1alpha)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1paint_1with_1alpha_FUNC);
 	cairo_paint_with_alpha((cairo_t *)arg0, arg1);
@@ -847,7 +847,7 @@
 
 #ifndef NO__1cairo_1path_1destroy
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1path_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1path_1destroy_FUNC);
 	cairo_path_destroy((cairo_path_t *)arg0);
@@ -857,7 +857,7 @@
 
 #ifndef NO__1cairo_1pattern_1add_1color_1stop_1rgb
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1add_1color_1stop_1rgb)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1add_1color_1stop_1rgb_FUNC);
 	cairo_pattern_add_color_stop_rgb((cairo_pattern_t *)arg0, arg1, arg2, arg3, arg4);
@@ -867,7 +867,7 @@
 
 #ifndef NO__1cairo_1pattern_1add_1color_1stop_1rgba
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1add_1color_1stop_1rgba)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1add_1color_1stop_1rgba_FUNC);
 	cairo_pattern_add_color_stop_rgba((cairo_pattern_t *)arg0, arg1, arg2, arg3, arg4, arg5);
@@ -876,36 +876,36 @@
 #endif
 
 #ifndef NO__1cairo_1pattern_1create_1for_1surface
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1for_1surface)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1for_1surface)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1create_1for_1surface_FUNC);
-	rc = (jint)cairo_pattern_create_for_surface((cairo_surface_t *)arg0);
+	rc = (jlong)cairo_pattern_create_for_surface((cairo_surface_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1pattern_1create_1for_1surface_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1pattern_1create_1linear
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1linear)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1linear)
 	(JNIEnv *env, jclass that, jdouble arg0, jdouble arg1, jdouble arg2, jdouble arg3)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1create_1linear_FUNC);
-	rc = (jint)cairo_pattern_create_linear(arg0, arg1, arg2, arg3);
+	rc = (jlong)cairo_pattern_create_linear(arg0, arg1, arg2, arg3);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1pattern_1create_1linear_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1pattern_1create_1radial
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1radial)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1pattern_1create_1radial)
 	(JNIEnv *env, jclass that, jdouble arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1create_1radial_FUNC);
-	rc = (jint)cairo_pattern_create_radial(arg0, arg1, arg2, arg3, arg4, arg5);
+	rc = (jlong)cairo_pattern_create_radial(arg0, arg1, arg2, arg3, arg4, arg5);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1pattern_1create_1radial_FUNC);
 	return rc;
 }
@@ -913,7 +913,7 @@
 
 #ifndef NO__1cairo_1pattern_1destroy
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1destroy_FUNC);
 	cairo_pattern_destroy((cairo_pattern_t *)arg0);
@@ -923,7 +923,7 @@
 
 #ifndef NO__1cairo_1pattern_1get_1extend
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1pattern_1get_1extend)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1get_1extend_FUNC);
@@ -935,7 +935,7 @@
 
 #ifndef NO__1cairo_1pattern_1get_1filter
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1pattern_1get_1filter)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1get_1filter_FUNC);
@@ -947,7 +947,7 @@
 
 #ifndef NO__1cairo_1pattern_1get_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1get_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1get_1matrix_FUNC);
@@ -961,7 +961,7 @@
 
 #ifndef NO__1cairo_1pattern_1reference
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1reference)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1reference_FUNC);
 	cairo_pattern_reference((cairo_pattern_t *)arg0);
@@ -971,7 +971,7 @@
 
 #ifndef NO__1cairo_1pattern_1set_1extend
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1set_1extend)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1set_1extend_FUNC);
 	cairo_pattern_set_extend((cairo_pattern_t *)arg0, arg1);
@@ -981,7 +981,7 @@
 
 #ifndef NO__1cairo_1pattern_1set_1filter
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1set_1filter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1set_1filter_FUNC);
 	cairo_pattern_set_filter((cairo_pattern_t *)arg0, arg1);
@@ -991,7 +991,7 @@
 
 #ifndef NO__1cairo_1pattern_1set_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pattern_1set_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pattern_1set_1matrix_FUNC);
@@ -1005,7 +1005,7 @@
 
 #ifndef NO__1cairo_1pdf_1surface_1set_1size
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1pdf_1surface_1set_1size)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1pdf_1surface_1set_1size_FUNC);
 /*
@@ -1031,7 +1031,7 @@
 
 #ifndef NO__1cairo_1ps_1surface_1set_1size
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1ps_1surface_1set_1size)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1ps_1surface_1set_1size_FUNC);
 /*
@@ -1057,7 +1057,7 @@
 
 #ifndef NO__1cairo_1rectangle
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1rectangle)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1rectangle_FUNC);
 	cairo_rectangle((cairo_t *)arg0, arg1, arg2, arg3, arg4);
@@ -1066,12 +1066,12 @@
 #endif
 
 #ifndef NO__1cairo_1reference
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1reference)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1reference)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1reference_FUNC);
-	rc = (jint)cairo_reference((cairo_t *)arg0);
+	rc = (jlong)cairo_reference((cairo_t *)arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1reference_FUNC);
 	return rc;
 }
@@ -1079,7 +1079,7 @@
 
 #ifndef NO__1cairo_1rel_1curve_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1rel_1curve_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5, jdouble arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5, jdouble arg6)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1rel_1curve_1to_FUNC);
 	cairo_rel_curve_to((cairo_t *)arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -1089,7 +1089,7 @@
 
 #ifndef NO__1cairo_1rel_1line_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1rel_1line_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1rel_1line_1to_FUNC);
 	cairo_rel_line_to((cairo_t *)arg0, arg1, arg2);
@@ -1099,7 +1099,7 @@
 
 #ifndef NO__1cairo_1rel_1move_1to
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1rel_1move_1to)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1rel_1move_1to_FUNC);
 	cairo_rel_move_to((cairo_t *)arg0, arg1, arg2);
@@ -1109,7 +1109,7 @@
 
 #ifndef NO__1cairo_1reset_1clip
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1reset_1clip)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1reset_1clip_FUNC);
 	cairo_reset_clip((cairo_t *)arg0);
@@ -1119,7 +1119,7 @@
 
 #ifndef NO__1cairo_1restore
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1restore)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1restore_FUNC);
 	cairo_restore((cairo_t *)arg0);
@@ -1129,7 +1129,7 @@
 
 #ifndef NO__1cairo_1rotate
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1rotate)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1rotate_FUNC);
 	cairo_rotate((cairo_t *)arg0, arg1);
@@ -1139,7 +1139,7 @@
 
 #ifndef NO__1cairo_1save
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1save)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1save_FUNC);
 	cairo_save((cairo_t *)arg0);
@@ -1149,7 +1149,7 @@
 
 #ifndef NO__1cairo_1scale
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1scale)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1scale_FUNC);
 	cairo_scale((cairo_t *)arg0, arg1, arg2);
@@ -1159,7 +1159,7 @@
 
 #ifndef NO__1cairo_1select_1font_1face
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1select_1font_1face)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jint arg3)
 {
 	jbyte *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1select_1font_1face_FUNC);
@@ -1173,7 +1173,7 @@
 
 #ifndef NO__1cairo_1set_1antialias
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1antialias)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1antialias_FUNC);
 	cairo_set_antialias((cairo_t *)arg0, arg1);
@@ -1183,7 +1183,7 @@
 
 #ifndef NO__1cairo_1set_1dash
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1dash)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jint arg2, jdouble arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jint arg2, jdouble arg3)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1dash_FUNC);
@@ -1197,7 +1197,7 @@
 
 #ifndef NO__1cairo_1set_1fill_1rule
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1fill_1rule)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1fill_1rule_FUNC);
 	cairo_set_fill_rule((cairo_t *)arg0, arg1);
@@ -1207,7 +1207,7 @@
 
 #ifndef NO__1cairo_1set_1font_1face
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1font_1face)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1font_1face_FUNC);
 	cairo_set_font_face((cairo_t *)arg0, (cairo_font_face_t *)arg1);
@@ -1217,7 +1217,7 @@
 
 #ifndef NO__1cairo_1set_1font_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1font_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1font_1matrix_FUNC);
@@ -1231,7 +1231,7 @@
 
 #ifndef NO__1cairo_1set_1font_1options
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1font_1options)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1font_1options_FUNC);
 	cairo_set_font_options((cairo_t *)arg0, (cairo_font_options_t *)arg1);
@@ -1241,7 +1241,7 @@
 
 #ifndef NO__1cairo_1set_1font_1size
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1font_1size)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1font_1size_FUNC);
 	cairo_set_font_size((cairo_t *)arg0, arg1);
@@ -1251,7 +1251,7 @@
 
 #ifndef NO__1cairo_1set_1line_1cap
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1line_1cap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1line_1cap_FUNC);
 	cairo_set_line_cap((cairo_t *)arg0, arg1);
@@ -1261,7 +1261,7 @@
 
 #ifndef NO__1cairo_1set_1line_1join
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1line_1join)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1line_1join_FUNC);
 	cairo_set_line_join((cairo_t *)arg0, arg1);
@@ -1271,7 +1271,7 @@
 
 #ifndef NO__1cairo_1set_1line_1width
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1line_1width)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1line_1width_FUNC);
 	cairo_set_line_width((cairo_t *)arg0, arg1);
@@ -1281,7 +1281,7 @@
 
 #ifndef NO__1cairo_1set_1matrix
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1matrix)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1matrix_FUNC);
@@ -1295,7 +1295,7 @@
 
 #ifndef NO__1cairo_1set_1miter_1limit
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1miter_1limit)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1miter_1limit_FUNC);
 	cairo_set_miter_limit((cairo_t *)arg0, arg1);
@@ -1305,7 +1305,7 @@
 
 #ifndef NO__1cairo_1set_1operator
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1operator)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1operator_FUNC);
 	cairo_set_operator((cairo_t *)arg0, arg1);
@@ -1315,7 +1315,7 @@
 
 #ifndef NO__1cairo_1set_1source
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1source)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1source_FUNC);
 	cairo_set_source((cairo_t *)arg0, (cairo_pattern_t *)arg1);
@@ -1325,7 +1325,7 @@
 
 #ifndef NO__1cairo_1set_1source_1rgb
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1source_1rgb)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1source_1rgb_FUNC);
 	cairo_set_source_rgb((cairo_t *)arg0, arg1, arg2, arg3);
@@ -1335,7 +1335,7 @@
 
 #ifndef NO__1cairo_1set_1source_1rgba
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1source_1rgba)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1source_1rgba_FUNC);
 	cairo_set_source_rgba((cairo_t *)arg0, arg1, arg2, arg3, arg4);
@@ -1345,7 +1345,7 @@
 
 #ifndef NO__1cairo_1set_1source_1surface
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1source_1surface)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jdouble arg2, jdouble arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jdouble arg2, jdouble arg3)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1source_1surface_FUNC);
 	cairo_set_source_surface((cairo_t *)arg0, (cairo_surface_t *)arg1, arg2, arg3);
@@ -1355,7 +1355,7 @@
 
 #ifndef NO__1cairo_1set_1tolerance
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1set_1tolerance)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1set_1tolerance_FUNC);
 	cairo_set_tolerance((cairo_t *)arg0, arg1);
@@ -1365,7 +1365,7 @@
 
 #ifndef NO__1cairo_1show_1glyphs
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1show_1glyphs)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1show_1glyphs_FUNC);
 	cairo_show_glyphs((cairo_t *)arg0, (cairo_glyph_t *)arg1, arg2);
@@ -1375,7 +1375,7 @@
 
 #ifndef NO__1cairo_1show_1page
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1show_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1show_1page_FUNC);
 	cairo_show_page((cairo_t *)arg0);
@@ -1385,7 +1385,7 @@
 
 #ifndef NO__1cairo_1show_1text
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1show_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1show_1text_FUNC);
@@ -1399,7 +1399,7 @@
 
 #ifndef NO__1cairo_1status
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1status)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1status_FUNC);
@@ -1410,12 +1410,12 @@
 #endif
 
 #ifndef NO__1cairo_1status_1to_1string
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1status_1to_1string)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1status_1to_1string)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1status_1to_1string_FUNC);
-	rc = (jint)cairo_status_to_string(arg0);
+	rc = (jlong)cairo_status_to_string(arg0);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1status_1to_1string_FUNC);
 	return rc;
 }
@@ -1423,7 +1423,7 @@
 
 #ifndef NO__1cairo_1stroke
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1stroke)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1stroke_FUNC);
 	cairo_stroke((cairo_t *)arg0);
@@ -1433,7 +1433,7 @@
 
 #ifndef NO__1cairo_1stroke_1extents
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1stroke_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2, jdoubleArray arg3, jdoubleArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2, jdoubleArray arg3, jdoubleArray arg4)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -1456,7 +1456,7 @@
 
 #ifndef NO__1cairo_1stroke_1preserve
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1stroke_1preserve)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1stroke_1preserve_FUNC);
 	cairo_stroke_preserve((cairo_t *)arg0);
@@ -1465,12 +1465,12 @@
 #endif
 
 #ifndef NO__1cairo_1surface_1create_1similar
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1surface_1create_1similar)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1surface_1create_1similar)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1create_1similar_FUNC);
-	rc = (jint)cairo_surface_create_similar((cairo_surface_t *)arg0, arg1, arg2, arg3);
+	rc = (jlong)cairo_surface_create_similar((cairo_surface_t *)arg0, arg1, arg2, arg3);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1surface_1create_1similar_FUNC);
 	return rc;
 }
@@ -1478,7 +1478,7 @@
 
 #ifndef NO__1cairo_1surface_1destroy
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1surface_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1destroy_FUNC);
 	cairo_surface_destroy((cairo_surface_t *)arg0);
@@ -1488,7 +1488,7 @@
 
 #ifndef NO__1cairo_1surface_1finish
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1surface_1finish)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1finish_FUNC);
 	cairo_surface_finish((cairo_surface_t *)arg0);
@@ -1498,7 +1498,7 @@
 
 #ifndef NO__1cairo_1surface_1get_1type
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1surface_1get_1type)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1get_1type_FUNC);
@@ -1526,12 +1526,12 @@
 #endif
 
 #ifndef NO__1cairo_1surface_1get_1user_1data
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1surface_1get_1user_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1surface_1get_1user_1data)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1get_1user_1data_FUNC);
-	rc = (jint)cairo_surface_get_user_data((cairo_surface_t *)arg0, (cairo_user_data_key_t *)arg1);
+	rc = (jlong)cairo_surface_get_user_data((cairo_surface_t *)arg0, (cairo_user_data_key_t *)arg1);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1surface_1get_1user_1data_FUNC);
 	return rc;
 }
@@ -1539,7 +1539,7 @@
 
 #ifndef NO__1cairo_1surface_1reference
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1surface_1reference)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1reference_FUNC);
 	cairo_surface_reference((cairo_surface_t *)arg0);
@@ -1549,7 +1549,7 @@
 
 #ifndef NO__1cairo_1surface_1set_1device_1offset
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1surface_1set_1device_1offset)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1set_1device_1offset_FUNC);
 	cairo_surface_set_device_offset((cairo_surface_t *)arg0, arg1, arg2);
@@ -1559,7 +1559,7 @@
 
 #ifndef NO__1cairo_1surface_1set_1fallback_1resolution
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1surface_1set_1fallback_1resolution)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1set_1fallback_1resolution_FUNC);
 /*
@@ -1568,7 +1568,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble, jdouble);
+		typedef void (*FPTR)(jlong, jdouble, jdouble);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(cairo_surface_set_fallback_resolution_LIB, RTLD_LAZY);
@@ -1585,7 +1585,7 @@
 
 #ifndef NO__1cairo_1surface_1set_1user_1data
 JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1surface_1set_1user_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	jint rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1surface_1set_1user_1data_FUNC);
@@ -1597,7 +1597,7 @@
 
 #ifndef NO__1cairo_1text_1extents
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1text_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jobject arg2)
 {
 	jbyte *lparg1=NULL;
 	cairo_text_extents_t _arg2, *lparg2=NULL;
@@ -1614,7 +1614,7 @@
 
 #ifndef NO__1cairo_1text_1path
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1text_1path)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1text_1path_FUNC);
@@ -1628,7 +1628,7 @@
 
 #ifndef NO__1cairo_1transform
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1transform)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1)
 {
 	jdouble *lparg1=NULL;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1transform_FUNC);
@@ -1642,7 +1642,7 @@
 
 #ifndef NO__1cairo_1translate
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1translate)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1translate_FUNC);
 	cairo_translate((cairo_t *)arg0, arg1, arg2);
@@ -1652,7 +1652,7 @@
 
 #ifndef NO__1cairo_1user_1to_1device
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1user_1to_1device)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -1669,7 +1669,7 @@
 
 #ifndef NO__1cairo_1user_1to_1device_1distance
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1user_1to_1device_1distance)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -1685,24 +1685,24 @@
 #endif
 
 #ifndef NO__1cairo_1xlib_1surface_1create
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1xlib_1surface_1create)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1xlib_1surface_1create)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1xlib_1surface_1create_FUNC);
-	rc = (jint)cairo_xlib_surface_create((Display *)arg0, (Drawable)arg1, (Visual *)arg2, arg3, arg4);
+	rc = (jlong)cairo_xlib_surface_create((Display *)arg0, (Drawable)arg1, (Visual *)arg2, arg3, arg4);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1xlib_1surface_1create_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1cairo_1xlib_1surface_1create_1for_1bitmap
-JNIEXPORT jint JNICALL Cairo_NATIVE(_1cairo_1xlib_1surface_1create_1for_1bitmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL Cairo_NATIVE(_1cairo_1xlib_1surface_1create_1for_1bitmap)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1xlib_1surface_1create_1for_1bitmap_FUNC);
-	rc = (jint)cairo_xlib_surface_create_for_bitmap((Display *)arg0, (Pixmap)arg1, (Screen *)arg2, arg3, arg4);
+	rc = (jlong)cairo_xlib_surface_create_for_bitmap((Display *)arg0, (Pixmap)arg1, (Screen *)arg2, arg3, arg4);
 	Cairo_NATIVE_EXIT(env, that, _1cairo_1xlib_1surface_1create_1for_1bitmap_FUNC);
 	return rc;
 }
@@ -1710,7 +1710,7 @@
 
 #ifndef NO__1cairo_1xlib_1surface_1set_1size
 JNIEXPORT void JNICALL Cairo_NATIVE(_1cairo_1xlib_1surface_1set_1size)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	Cairo_NATIVE_ENTER(env, that, _1cairo_1xlib_1surface_1set_1size_FUNC);
 	cairo_xlib_surface_set_size((cairo_surface_t *)arg0, arg1, arg2);
@@ -1778,45 +1778,45 @@
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II
-JNIEXPORT void JNICALL Cairo_NATIVE(memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ
+JNIEXPORT void JNICALL Cairo_NATIVE(memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	cairo_path_data_t _arg0, *lparg0=NULL;
-	Cairo_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II_FUNC);
+	Cairo_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ_FUNC);
 	if (arg0) if ((lparg0 = getcairo_path_data_tFields(env, arg0, &_arg0)) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setcairo_path_data_tFields(env, arg0, lparg0);
-	Cairo_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II_FUNC);
+	Cairo_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II
-JNIEXPORT void JNICALL Cairo_NATIVE(memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ
+JNIEXPORT void JNICALL Cairo_NATIVE(memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	cairo_path_t _arg0, *lparg0=NULL;
-	Cairo_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II_FUNC);
+	Cairo_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ_FUNC);
 	if (arg0) if ((lparg0 = getcairo_path_tFields(env, arg0, &_arg0)) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setcairo_path_tFields(env, arg0, lparg0);
-	Cairo_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II_FUNC);
+	Cairo_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3DII
-JNIEXPORT void JNICALL Cairo_NATIVE(memmove___3DII)
-	(JNIEnv *env, jclass that, jdoubleArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3DJJ
+JNIEXPORT void JNICALL Cairo_NATIVE(memmove___3DJJ)
+	(JNIEnv *env, jclass that, jdoubleArray arg0, jlong arg1, jlong arg2)
 {
 	jdouble *lparg0=NULL;
-	Cairo_NATIVE_ENTER(env, that, memmove___3DII_FUNC);
+	Cairo_NATIVE_ENTER(env, that, memmove___3DJJ_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetDoubleArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseDoubleArrayElements(env, arg0, lparg0, 0);
-	Cairo_NATIVE_EXIT(env, that, memmove___3DII_FUNC);
+	Cairo_NATIVE_EXIT(env, that, memmove___3DJJ_FUNC);
 }
 #endif
 
diff -ur x86/cairo_stats.c x86_64/cairo_stats.c
--- x86/cairo_stats.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/cairo_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -15,7 +15,7 @@
  *
  * IBM
  * -  Binding to permit interfacing between Cairo and SWT
- * -  Copyright (C) 2005, 2007 IBM Corp.  All Rights Reserved.
+ * -  Copyright (C) 2005, 2008 IBM Corp.  All Rights Reserved.
  *
  * ***** END LICENSE BLOCK ***** */
 
@@ -169,9 +169,9 @@
 	"cairo_1path_1t_1sizeof",
 	"cairo_1text_1extents_1t_1sizeof",
 	"cairo_1version",
-	"memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II",
-	"memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II",
-	"memmove___3DII",
+	"memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ",
+	"memmove___3DJJ",
 };
 
 #define STATS_NATIVE(func) Java_org_eclipse_swt_tools_internal_NativeStats_##func
diff -ur x86/cairo_stats.h x86_64/cairo_stats.h
--- x86/cairo_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/cairo_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -15,7 +15,7 @@
  *
  * IBM
  * -  Binding to permit interfacing between Cairo and SWT
- * -  Copyright (C) 2005, 2007 IBM Corp.  All Rights Reserved.
+ * -  Copyright (C) 2005, 2008 IBM Corp.  All Rights Reserved.
  *
  * ***** END LICENSE BLOCK ***** */
 
@@ -177,7 +177,7 @@
 	cairo_1path_1t_1sizeof_FUNC,
 	cairo_1text_1extents_1t_1sizeof_FUNC,
 	cairo_1version_FUNC,
-	memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2II_FUNC,
-	memmove___3DII_FUNC,
+	memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1data_1t_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_cairo_cairo_1path_1t_2JJ_FUNC,
+	memmove___3DJJ_FUNC,
 } Cairo_FUNCS;
diff -ur x86/cairo_structs.c x86_64/cairo_structs.c
--- x86/cairo_structs.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/cairo_structs.c	2009-02-11 17:53:48.000000000 -0500
@@ -15,7 +15,7 @@
  *
  * IBM
  * -  Binding to permit interfacing between Cairo and SWT
- * -  Copyright (C) 2005, 2007 IBM Corp.  All Rights Reserved.
+ * -  Copyright (C) 2005, 2008 IBM Corp.  All Rights Reserved.
  *
  * ***** END LICENSE BLOCK ***** */
 
@@ -113,7 +113,7 @@
 	if (cairo_path_tFc.cached) return;
 	cairo_path_tFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	cairo_path_tFc.status = (*env)->GetFieldID(env, cairo_path_tFc.clazz, "status", "I");
-	cairo_path_tFc.data = (*env)->GetFieldID(env, cairo_path_tFc.clazz, "data", "I");
+	cairo_path_tFc.data = (*env)->GetFieldID(env, cairo_path_tFc.clazz, "data", "J");
 	cairo_path_tFc.num_data = (*env)->GetFieldID(env, cairo_path_tFc.clazz, "num_data", "I");
 	cairo_path_tFc.cached = 1;
 }
@@ -122,7 +122,7 @@
 {
 	if (!cairo_path_tFc.cached) cachecairo_path_tFields(env, lpObject);
 	lpStruct->status = (*env)->GetIntField(env, lpObject, cairo_path_tFc.status);
-	lpStruct->data = (cairo_path_data_t *)(*env)->GetIntField(env, lpObject, cairo_path_tFc.data);
+	lpStruct->data = (cairo_path_data_t *)(*env)->GetLongField(env, lpObject, cairo_path_tFc.data);
 	lpStruct->num_data = (*env)->GetIntField(env, lpObject, cairo_path_tFc.num_data);
 	return lpStruct;
 }
@@ -131,7 +131,7 @@
 {
 	if (!cairo_path_tFc.cached) cachecairo_path_tFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, cairo_path_tFc.status, (jint)lpStruct->status);
-	(*env)->SetIntField(env, lpObject, cairo_path_tFc.data, (jint)lpStruct->data);
+	(*env)->SetLongField(env, lpObject, cairo_path_tFc.data, (jlong)lpStruct->data);
 	(*env)->SetIntField(env, lpObject, cairo_path_tFc.num_data, (jint)lpStruct->num_data);
 }
 #endif
diff -ur x86/cairo_structs.h x86_64/cairo_structs.h
--- x86/cairo_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/cairo_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -15,7 +15,7 @@
  *
  * IBM
  * -  Binding to permit interfacing between Cairo and SWT
- * -  Copyright (C) 2005, 2007 IBM Corp.  All Rights Reserved.
+ * -  Copyright (C) 2005, 2008 IBM Corp.  All Rights Reserved.
  *
  * ***** END LICENSE BLOCK ***** */
 
diff -ur x86/c.c x86_64/c.c
--- x86/c.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/c.c	2009-02-11 17:53:46.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,7 +29,7 @@
 
 #ifndef NO_free
 JNIEXPORT void JNICALL C_NATIVE(free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	C_NATIVE_ENTER(env, that, free_FUNC);
 	free((void *)arg0);
@@ -38,14 +38,14 @@
 #endif
 
 #ifndef NO_getenv
-JNIEXPORT jint JNICALL C_NATIVE(getenv)
+JNIEXPORT jlong JNICALL C_NATIVE(getenv)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	C_NATIVE_ENTER(env, that, getenv_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)getenv((const char *)lparg0);
+	rc = (jlong)getenv((const char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	C_NATIVE_EXIT(env, that, getenv_FUNC);
@@ -54,33 +54,33 @@
 #endif
 
 #ifndef NO_malloc
-JNIEXPORT jint JNICALL C_NATIVE(malloc)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL C_NATIVE(malloc)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	C_NATIVE_ENTER(env, that, malloc_FUNC);
-	rc = (jint)malloc(arg0);
+	rc = (jlong)malloc(arg0);
 	C_NATIVE_EXIT(env, that, malloc_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_memmove__III
-JNIEXPORT void JNICALL C_NATIVE(memmove__III)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__JJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__JJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
-	C_NATIVE_ENTER(env, that, memmove__III_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__JJJ_FUNC);
 	memmove((void *)arg0, (const void *)arg1, (size_t)arg2);
-	C_NATIVE_EXIT(env, that, memmove__III_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__JJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3BI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+#ifndef NO_memmove__J_3BJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3BJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2)
 {
 	jbyte *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3BI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3BJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -99,16 +99,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3BI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3BJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3CI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3CI)
-	(JNIEnv *env, jclass that, jint arg0, jcharArray arg1, jint arg2)
+#ifndef NO_memmove__J_3CJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3CJ)
+	(JNIEnv *env, jclass that, jlong arg0, jcharArray arg1, jlong arg2)
 {
 	jchar *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3CI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3CJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -127,16 +127,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseCharArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3CI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3CJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3DI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3DI)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jint arg2)
+#ifndef NO_memmove__J_3DJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3DJ)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jlong arg2)
 {
 	jdouble *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3DI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3DJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -155,16 +155,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseDoubleArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3DI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3DJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3FI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3FI)
-	(JNIEnv *env, jclass that, jint arg0, jfloatArray arg1, jint arg2)
+#ifndef NO_memmove__J_3FJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3FJ)
+	(JNIEnv *env, jclass that, jlong arg0, jfloatArray arg1, jlong arg2)
 {
 	jfloat *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3FI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3FJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -183,16 +183,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseFloatArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3FI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3FJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3II
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3II)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jint arg2)
+#ifndef NO_memmove__J_3IJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3IJ)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jlong arg2)
 {
 	jint *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3II_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3IJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -211,16 +211,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3II_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3IJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3JI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3JI)
-	(JNIEnv *env, jclass that, jint arg0, jlongArray arg1, jint arg2)
+#ifndef NO_memmove__J_3JJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlong arg2)
 {
 	jlong *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3JI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3JJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -239,16 +239,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3JI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__I_3SI
-JNIEXPORT void JNICALL C_NATIVE(memmove__I_3SI)
-	(JNIEnv *env, jclass that, jint arg0, jshortArray arg1, jint arg2)
+#ifndef NO_memmove__J_3SJ
+JNIEXPORT void JNICALL C_NATIVE(memmove__J_3SJ)
+	(JNIEnv *env, jclass that, jlong arg0, jshortArray arg1, jlong arg2)
 {
 	jshort *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove__I_3SI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove__J_3SJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg1) if ((lparg1 = (*env)->GetPrimitiveArrayCritical(env, arg1, NULL)) == NULL) goto fail;
@@ -267,16 +267,16 @@
 	{
 		if (arg1 && lparg1) (*env)->ReleaseShortArrayElements(env, arg1, lparg1, JNI_ABORT);
 	}
-	C_NATIVE_EXIT(env, that, memmove__I_3SI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove__J_3SJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3BII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3BII)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3BJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3BJJ)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlong arg1, jlong arg2)
 {
 	jbyte *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3BII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3BJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -295,17 +295,17 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3BII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3BJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3B_3CI
-JNIEXPORT void JNICALL C_NATIVE(memmove___3B_3CI)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jcharArray arg1, jint arg2)
+#ifndef NO_memmove___3B_3CJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3B_3CJ)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jcharArray arg1, jlong arg2)
 {
 	jbyte *lparg0=NULL;
 	jchar *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3B_3CI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3B_3CJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -328,16 +328,16 @@
 		if (arg1 && lparg1) (*env)->ReleaseCharArrayElements(env, arg1, lparg1, JNI_ABORT);
 		if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3B_3CI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3B_3CJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3CII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3CII)
-	(JNIEnv *env, jclass that, jcharArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3CJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3CJJ)
+	(JNIEnv *env, jclass that, jcharArray arg0, jlong arg1, jlong arg2)
 {
 	jchar *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3CII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3CJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -356,16 +356,16 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseCharArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3CII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3CJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3DII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3DII)
-	(JNIEnv *env, jclass that, jdoubleArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3DJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3DJJ)
+	(JNIEnv *env, jclass that, jdoubleArray arg0, jlong arg1, jlong arg2)
 {
 	jdouble *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3DII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3DJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -384,16 +384,16 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseDoubleArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3DII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3DJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3FII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3FII)
-	(JNIEnv *env, jclass that, jfloatArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3FJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3FJJ)
+	(JNIEnv *env, jclass that, jfloatArray arg0, jlong arg1, jlong arg2)
 {
 	jfloat *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3FII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3FJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -412,16 +412,16 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseFloatArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3FII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3FJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3III
-JNIEXPORT void JNICALL C_NATIVE(memmove___3III)
-	(JNIEnv *env, jclass that, jintArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3IJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3IJJ)
+	(JNIEnv *env, jclass that, jintArray arg0, jlong arg1, jlong arg2)
 {
 	jint *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3III_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3IJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -440,17 +440,17 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseIntArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3III_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3IJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3I_3BI
-JNIEXPORT void JNICALL C_NATIVE(memmove___3I_3BI)
-	(JNIEnv *env, jclass that, jintArray arg0, jbyteArray arg1, jint arg2)
+#ifndef NO_memmove___3I_3BJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3I_3BJ)
+	(JNIEnv *env, jclass that, jintArray arg0, jbyteArray arg1, jlong arg2)
 {
 	jint *lparg0=NULL;
 	jbyte *lparg1=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3I_3BI_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3I_3BJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -471,16 +471,16 @@
 		if (arg0 && lparg0) (*env)->ReleaseIntArrayElements(env, arg0, lparg0, 0);
 	}
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	C_NATIVE_EXIT(env, that, memmove___3I_3BI_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3I_3BJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3JII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3JII)
-	(JNIEnv *env, jclass that, jlongArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3JJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3JJJ)
+	(JNIEnv *env, jclass that, jlongArray arg0, jlong arg1, jlong arg2)
 {
 	jlong *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3JII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3JJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -499,16 +499,16 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseLongArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3JII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3JJJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove___3SII
-JNIEXPORT void JNICALL C_NATIVE(memmove___3SII)
-	(JNIEnv *env, jclass that, jshortArray arg0, jint arg1, jint arg2)
+#ifndef NO_memmove___3SJJ
+JNIEXPORT void JNICALL C_NATIVE(memmove___3SJJ)
+	(JNIEnv *env, jclass that, jshortArray arg0, jlong arg1, jlong arg2)
 {
 	jshort *lparg0=NULL;
-	C_NATIVE_ENTER(env, that, memmove___3SII_FUNC);
+	C_NATIVE_ENTER(env, that, memmove___3SJJ_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -527,17 +527,17 @@
 	{
 		if (arg0 && lparg0) (*env)->ReleaseShortArrayElements(env, arg0, lparg0, 0);
 	}
-	C_NATIVE_EXIT(env, that, memmove___3SII_FUNC);
+	C_NATIVE_EXIT(env, that, memmove___3SJJ_FUNC);
 }
 #endif
 
 #ifndef NO_memset
-JNIEXPORT jint JNICALL C_NATIVE(memset)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL C_NATIVE(memset)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	C_NATIVE_ENTER(env, that, memset_FUNC);
-	rc = (jint)memset((void *)arg0, arg1, (size_t)arg2);
+	rc = (jlong)memset((void *)arg0, arg1, (size_t)arg2);
 	C_NATIVE_EXIT(env, that, memset_FUNC);
 	return rc;
 }
@@ -545,7 +545,7 @@
 
 #ifndef NO_strlen
 JNIEXPORT jint JNICALL C_NATIVE(strlen)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	C_NATIVE_ENTER(env, that, strlen_FUNC);
diff -ur x86/cde.c x86_64/cde.c
--- x86/cde.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/cde.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,7 +29,7 @@
 
 #ifndef NO__1DtActionInvoke
 JNIEXPORT jlong JNICALL CDE_NATIVE(_1DtActionInvoke)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jobject arg2, jint arg3, jbyteArray arg4, jbyteArray arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jobject arg2, jint arg3, jbyteArray arg4, jbyteArray arg5, jbyteArray arg6, jint arg7, jlong arg8, jlong arg9)
 {
 	jbyte *lparg1=NULL;
 	DtActionArg _arg2, *lparg2=NULL;
@@ -57,7 +57,7 @@
 
 #ifndef NO__1DtAppInitialize
 JNIEXPORT jboolean JNICALL CDE_NATIVE(_1DtAppInitialize)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jbyteArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jbyteArray arg3, jbyteArray arg4)
 {
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
@@ -101,30 +101,30 @@
 #endif
 
 #ifndef NO__1DtDtsDataTypeNames
-JNIEXPORT jint JNICALL CDE_NATIVE(_1DtDtsDataTypeNames)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1DtDtsDataTypeNames)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1DtDtsDataTypeNames_FUNC);
-	rc = (jint)DtDtsDataTypeNames();
+	rc = (jlong)DtDtsDataTypeNames();
 	CDE_NATIVE_EXIT(env, that, _1DtDtsDataTypeNames_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1DtDtsDataTypeToAttributeValue
-JNIEXPORT jint JNICALL CDE_NATIVE(_1DtDtsDataTypeToAttributeValue)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1DtDtsDataTypeToAttributeValue)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg0=NULL;
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1DtDtsDataTypeToAttributeValue_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)DtDtsDataTypeToAttributeValue((char *)lparg0, (char *)lparg1, (char *)lparg2);
+	rc = (jlong)DtDtsDataTypeToAttributeValue((char *)lparg0, (char *)lparg1, (char *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
@@ -135,14 +135,14 @@
 #endif
 
 #ifndef NO__1DtDtsFileToDataType
-JNIEXPORT jint JNICALL CDE_NATIVE(_1DtDtsFileToDataType)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1DtDtsFileToDataType)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1DtDtsFileToDataType_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)DtDtsFileToDataType((char *)lparg0);
+	rc = (jlong)DtDtsFileToDataType((char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	CDE_NATIVE_EXIT(env, that, _1DtDtsFileToDataType_FUNC);
@@ -152,7 +152,7 @@
 
 #ifndef NO__1DtDtsFreeAttributeValue
 JNIEXPORT void JNICALL CDE_NATIVE(_1DtDtsFreeAttributeValue)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	CDE_NATIVE_ENTER(env, that, _1DtDtsFreeAttributeValue_FUNC);
 	DtDtsFreeAttributeValue((char *)arg0);
@@ -162,7 +162,7 @@
 
 #ifndef NO__1DtDtsFreeDataType
 JNIEXPORT void JNICALL CDE_NATIVE(_1DtDtsFreeDataType)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	CDE_NATIVE_ENTER(env, that, _1DtDtsFreeDataType_FUNC);
 	DtDtsFreeDataType((char *)arg0);
@@ -172,7 +172,7 @@
 
 #ifndef NO__1DtDtsFreeDataTypeNames
 JNIEXPORT void JNICALL CDE_NATIVE(_1DtDtsFreeDataTypeNames)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	CDE_NATIVE_ENTER(env, that, _1DtDtsFreeDataTypeNames_FUNC);
 	DtDtsFreeDataTypeNames((char **)arg0);
@@ -181,20 +181,20 @@
 #endif
 
 #ifndef NO__1XtAppCreateShell
-JNIEXPORT jint JNICALL CDE_NATIVE(_1XtAppCreateShell)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1, jint arg2, jint arg3, jintArray arg4, jint arg5)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1XtAppCreateShell)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1, jlong arg2, jlong arg3, jlongArray arg4, jint arg5)
 {
 	jbyte *lparg0=NULL;
 	jbyte *lparg1=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1XtAppCreateShell_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)XtAppCreateShell((String)lparg0, (String)lparg1, (WidgetClass)arg2, (Display *)arg3, (ArgList)lparg4, arg5);
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	rc = (jlong)XtAppCreateShell((String)lparg0, (String)lparg1, (WidgetClass)arg2, (Display *)arg3, (ArgList)lparg4, arg5);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	CDE_NATIVE_EXIT(env, that, _1XtAppCreateShell_FUNC);
@@ -203,12 +203,12 @@
 #endif
 
 #ifndef NO__1XtCreateApplicationContext
-JNIEXPORT jint JNICALL CDE_NATIVE(_1XtCreateApplicationContext)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1XtCreateApplicationContext)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1XtCreateApplicationContext_FUNC);
-	rc = (jint)XtCreateApplicationContext();
+	rc = (jlong)XtCreateApplicationContext();
 	CDE_NATIVE_EXIT(env, that, _1XtCreateApplicationContext_FUNC);
 	return rc;
 }
@@ -216,18 +216,18 @@
 
 #ifndef NO__1XtDisplayInitialize
 JNIEXPORT void JNICALL CDE_NATIVE(_1XtDisplayInitialize)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jint arg4, jint arg5, jintArray arg6, jint arg7)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jlong arg4, jint arg5, jlongArray arg6, jint arg7)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
-	jint *lparg6=NULL;
+	jlong *lparg6=NULL;
 	CDE_NATIVE_ENTER(env, that, _1XtDisplayInitialize_FUNC);
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetByteArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg6) if ((lparg6 = (*env)->GetIntArrayElements(env, arg6, NULL)) == NULL) goto fail;
+	if (arg6) if ((lparg6 = (*env)->GetLongArrayElements(env, arg6, NULL)) == NULL) goto fail;
 	XtDisplayInitialize((XtAppContext)arg0, (Display *)arg1, (String)lparg2, (String)lparg3, (XrmOptionDescRec *)arg4, (Cardinal)arg5, (int *)lparg6, (String *)arg7);
 fail:
-	if (arg6 && lparg6) (*env)->ReleaseIntArrayElements(env, arg6, lparg6, 0);
+	if (arg6 && lparg6) (*env)->ReleaseLongArrayElements(env, arg6, lparg6, 0);
 	if (arg3 && lparg3) (*env)->ReleaseByteArrayElements(env, arg3, lparg3, 0);
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
 	CDE_NATIVE_EXIT(env, that, _1XtDisplayInitialize_FUNC);
@@ -236,7 +236,7 @@
 
 #ifndef NO__1XtRealizeWidget
 JNIEXPORT void JNICALL CDE_NATIVE(_1XtRealizeWidget)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	CDE_NATIVE_ENTER(env, that, _1XtRealizeWidget_FUNC);
 	XtRealizeWidget((Widget)arg0);
@@ -246,7 +246,7 @@
 
 #ifndef NO__1XtResizeWidget
 JNIEXPORT void JNICALL CDE_NATIVE(_1XtResizeWidget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3)
 {
 	CDE_NATIVE_ENTER(env, that, _1XtResizeWidget_FUNC);
 	XtResizeWidget((Widget)arg0, arg1, arg2, arg3);
@@ -256,7 +256,7 @@
 
 #ifndef NO__1XtSetMappedWhenManaged
 JNIEXPORT void JNICALL CDE_NATIVE(_1XtSetMappedWhenManaged)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	CDE_NATIVE_ENTER(env, that, _1XtSetMappedWhenManaged_FUNC);
 	XtSetMappedWhenManaged((Widget)arg0, arg1);
@@ -275,12 +275,12 @@
 #endif
 
 #ifndef NO__1topLevelShellWidgetClass
-JNIEXPORT jint JNICALL CDE_NATIVE(_1topLevelShellWidgetClass)
+JNIEXPORT jlong JNICALL CDE_NATIVE(_1topLevelShellWidgetClass)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	CDE_NATIVE_ENTER(env, that, _1topLevelShellWidgetClass_FUNC);
-	rc = (jint)topLevelShellWidgetClass;
+	rc = (jlong)topLevelShellWidgetClass;
 	CDE_NATIVE_EXIT(env, that, _1topLevelShellWidgetClass_FUNC);
 	return rc;
 }
diff -ur x86/cde_stats.c x86_64/cde_stats.c
--- x86/cde_stats.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/cde_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/cde_stats.h x86_64/cde_stats.h
--- x86/cde_stats.h	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/cde_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/cde_structs.c x86_64/cde_structs.c
--- x86/cde_structs.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/cde_structs.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -26,7 +26,7 @@
 	if (DtActionArgFc.cached) return;
 	DtActionArgFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	DtActionArgFc.argClass = (*env)->GetFieldID(env, DtActionArgFc.clazz, "argClass", "I");
-	DtActionArgFc.name = (*env)->GetFieldID(env, DtActionArgFc.clazz, "name", "I");
+	DtActionArgFc.name = (*env)->GetFieldID(env, DtActionArgFc.clazz, "name", "J");
 	DtActionArgFc.cached = 1;
 }
 
@@ -34,7 +34,7 @@
 {
 	if (!DtActionArgFc.cached) cacheDtActionArgFields(env, lpObject);
 	lpStruct->argClass = (*env)->GetIntField(env, lpObject, DtActionArgFc.argClass);
-	lpStruct->u.file.name = (char *)(*env)->GetIntField(env, lpObject, DtActionArgFc.name);
+	lpStruct->u.file.name = (char *)(*env)->GetLongField(env, lpObject, DtActionArgFc.name);
 	return lpStruct;
 }
 
@@ -42,7 +42,7 @@
 {
 	if (!DtActionArgFc.cached) cacheDtActionArgFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, DtActionArgFc.argClass, (jint)lpStruct->argClass);
-	(*env)->SetIntField(env, lpObject, DtActionArgFc.name, (jint)lpStruct->u.file.name);
+	(*env)->SetLongField(env, lpObject, DtActionArgFc.name, (jlong)lpStruct->u.file.name);
 }
 #endif
 
diff -ur x86/cde_structs.h x86_64/cde_structs.h
--- x86/cde_structs.h	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/cde_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/c_stats.c x86_64/c_stats.c
--- x86/c_stats.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/c_stats.c	2009-02-11 17:53:46.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -21,23 +21,23 @@
 	"free",
 	"getenv",
 	"malloc",
-	"memmove__III",
-	"memmove__I_3BI",
-	"memmove__I_3CI",
-	"memmove__I_3DI",
-	"memmove__I_3FI",
-	"memmove__I_3II",
-	"memmove__I_3JI",
-	"memmove__I_3SI",
-	"memmove___3BII",
-	"memmove___3B_3CI",
-	"memmove___3CII",
-	"memmove___3DII",
-	"memmove___3FII",
-	"memmove___3III",
-	"memmove___3I_3BI",
-	"memmove___3JII",
-	"memmove___3SII",
+	"memmove__JJJ",
+	"memmove__J_3BJ",
+	"memmove__J_3CJ",
+	"memmove__J_3DJ",
+	"memmove__J_3FJ",
+	"memmove__J_3IJ",
+	"memmove__J_3JJ",
+	"memmove__J_3SJ",
+	"memmove___3BJJ",
+	"memmove___3B_3CJ",
+	"memmove___3CJJ",
+	"memmove___3DJJ",
+	"memmove___3FJJ",
+	"memmove___3IJJ",
+	"memmove___3I_3BJ",
+	"memmove___3JJJ",
+	"memmove___3SJJ",
 	"memset",
 	"strlen",
 };
diff -ur x86/c_stats.h x86_64/c_stats.h
--- x86/c_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/c_stats.h	2009-02-11 17:53:46.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,23 +29,23 @@
 	free_FUNC,
 	getenv_FUNC,
 	malloc_FUNC,
-	memmove__III_FUNC,
-	memmove__I_3BI_FUNC,
-	memmove__I_3CI_FUNC,
-	memmove__I_3DI_FUNC,
-	memmove__I_3FI_FUNC,
-	memmove__I_3II_FUNC,
-	memmove__I_3JI_FUNC,
-	memmove__I_3SI_FUNC,
-	memmove___3BII_FUNC,
-	memmove___3B_3CI_FUNC,
-	memmove___3CII_FUNC,
-	memmove___3DII_FUNC,
-	memmove___3FII_FUNC,
-	memmove___3III_FUNC,
-	memmove___3I_3BI_FUNC,
-	memmove___3JII_FUNC,
-	memmove___3SII_FUNC,
+	memmove__JJJ_FUNC,
+	memmove__J_3BJ_FUNC,
+	memmove__J_3CJ_FUNC,
+	memmove__J_3DJ_FUNC,
+	memmove__J_3FJ_FUNC,
+	memmove__J_3IJ_FUNC,
+	memmove__J_3JJ_FUNC,
+	memmove__J_3SJ_FUNC,
+	memmove___3BJJ_FUNC,
+	memmove___3B_3CJ_FUNC,
+	memmove___3CJJ_FUNC,
+	memmove___3DJJ_FUNC,
+	memmove___3FJJ_FUNC,
+	memmove___3IJJ_FUNC,
+	memmove___3I_3BJ_FUNC,
+	memmove___3JJJ_FUNC,
+	memmove___3SJJ_FUNC,
 	memset_FUNC,
 	strlen_FUNC,
 } C_FUNCS;
diff -ur x86/c_structs.c x86_64/c_structs.c
--- x86/c_structs.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/c_structs.c	2009-02-11 17:53:46.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/c_structs.h x86_64/c_structs.h
--- x86/c_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/c_structs.h	2009-02-11 17:53:46.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/glx.c x86_64/glx.c
--- x86/glx.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/glx.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -52,14 +52,14 @@
 #endif
 
 #ifndef NO__1glXChooseVisual
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXChooseVisual)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXChooseVisual)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jintArray arg2)
 {
 	jint *lparg2=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXChooseVisual_FUNC);
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)glXChooseVisual((Display *)arg0, arg1, lparg2);
+	rc = (jlong)glXChooseVisual((Display *)arg0, arg1, lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
 	GLX_NATIVE_EXIT(env, that, _1glXChooseVisual_FUNC);
@@ -69,7 +69,7 @@
 
 #ifndef NO__1glXCopyContext
 JNIEXPORT void JNICALL GLX_NATIVE(_1glXCopyContext)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	GLX_NATIVE_ENTER(env, that, _1glXCopyContext_FUNC);
 	glXCopyContext((Display *)arg0, (GLXContext)arg1, (GLXContext)arg2, arg3);
@@ -78,14 +78,14 @@
 #endif
 
 #ifndef NO__1glXCreateContext
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXCreateContext)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2, jboolean arg3)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXCreateContext)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2, jboolean arg3)
 {
 	XVisualInfo _arg1, *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXCreateContext_FUNC);
 	if (arg1) if ((lparg1 = getXVisualInfoFields(env, arg1, &_arg1)) == NULL) goto fail;
-	rc = (jint)glXCreateContext((Display *)arg0, lparg1, (GLXContext)arg2, arg3);
+	rc = (jlong)glXCreateContext((Display *)arg0, lparg1, (GLXContext)arg2, arg3);
 fail:
 	if (arg1 && lparg1) setXVisualInfoFields(env, arg1, lparg1);
 	GLX_NATIVE_EXIT(env, that, _1glXCreateContext_FUNC);
@@ -94,14 +94,14 @@
 #endif
 
 #ifndef NO__1glXCreateGLXPixmap
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXCreateGLXPixmap)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXCreateGLXPixmap)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XVisualInfo _arg1, *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXCreateGLXPixmap_FUNC);
 	if (arg1) if ((lparg1 = getXVisualInfoFields(env, arg1, &_arg1)) == NULL) goto fail;
-	rc = (jint)glXCreateGLXPixmap((Display *)arg0, lparg1, (Pixmap)arg2);
+	rc = (jlong)glXCreateGLXPixmap((Display *)arg0, lparg1, (Pixmap)arg2);
 fail:
 	if (arg1 && lparg1) setXVisualInfoFields(env, arg1, lparg1);
 	GLX_NATIVE_EXIT(env, that, _1glXCreateGLXPixmap_FUNC);
@@ -111,7 +111,7 @@
 
 #ifndef NO__1glXDestroyContext
 JNIEXPORT void JNICALL GLX_NATIVE(_1glXDestroyContext)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	GLX_NATIVE_ENTER(env, that, _1glXDestroyContext_FUNC);
 	glXDestroyContext((Display *)arg0, (GLXContext)arg1);
@@ -121,7 +121,7 @@
 
 #ifndef NO__1glXDestroyGLXPixmap
 JNIEXPORT void JNICALL GLX_NATIVE(_1glXDestroyGLXPixmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	GLX_NATIVE_ENTER(env, that, _1glXDestroyGLXPixmap_FUNC);
 	glXDestroyGLXPixmap((Display *)arg0, (GLXPixmap)arg1);
@@ -130,12 +130,12 @@
 #endif
 
 #ifndef NO__1glXGetClientString
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXGetClientString)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXGetClientString)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXGetClientString_FUNC);
-	rc = (jint)glXGetClientString((Display *)arg0, arg1);
+	rc = (jlong)glXGetClientString((Display *)arg0, arg1);
 	GLX_NATIVE_EXIT(env, that, _1glXGetClientString_FUNC);
 	return rc;
 }
@@ -143,7 +143,7 @@
 
 #ifndef NO__1glXGetConfig
 JNIEXPORT jint JNICALL GLX_NATIVE(_1glXGetConfig)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2, jintArray arg3)
 {
 	XVisualInfo _arg1, *lparg1=NULL;
 	jint *lparg3=NULL;
@@ -161,24 +161,24 @@
 #endif
 
 #ifndef NO__1glXGetCurrentContext
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXGetCurrentContext)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXGetCurrentContext)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXGetCurrentContext_FUNC);
-	rc = (jint)glXGetCurrentContext();
+	rc = (jlong)glXGetCurrentContext();
 	GLX_NATIVE_EXIT(env, that, _1glXGetCurrentContext_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1glXGetCurrentDrawable
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXGetCurrentDrawable)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXGetCurrentDrawable)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXGetCurrentDrawable_FUNC);
-	rc = (jint)glXGetCurrentDrawable();
+	rc = (jlong)glXGetCurrentDrawable();
 	GLX_NATIVE_EXIT(env, that, _1glXGetCurrentDrawable_FUNC);
 	return rc;
 }
@@ -186,7 +186,7 @@
 
 #ifndef NO__1glXIsDirect
 JNIEXPORT jboolean JNICALL GLX_NATIVE(_1glXIsDirect)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXIsDirect_FUNC);
@@ -198,7 +198,7 @@
 
 #ifndef NO__1glXMakeCurrent
 JNIEXPORT jboolean JNICALL GLX_NATIVE(_1glXMakeCurrent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jboolean rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXMakeCurrent_FUNC);
@@ -210,7 +210,7 @@
 
 #ifndef NO__1glXQueryExtension
 JNIEXPORT jboolean JNICALL GLX_NATIVE(_1glXQueryExtension)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -228,24 +228,24 @@
 #endif
 
 #ifndef NO__1glXQueryExtensionsString
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXQueryExtensionsString)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXQueryExtensionsString)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXQueryExtensionsString_FUNC);
-	rc = (jint)glXQueryExtensionsString((Display *)arg0, arg1);
+	rc = (jlong)glXQueryExtensionsString((Display *)arg0, arg1);
 	GLX_NATIVE_EXIT(env, that, _1glXQueryExtensionsString_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1glXQueryServerString
-JNIEXPORT jint JNICALL GLX_NATIVE(_1glXQueryServerString)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL GLX_NATIVE(_1glXQueryServerString)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GLX_NATIVE_ENTER(env, that, _1glXQueryServerString_FUNC);
-	rc = (jint)glXQueryServerString((Display *)arg0, arg1, arg2);
+	rc = (jlong)glXQueryServerString((Display *)arg0, arg1, arg2);
 	GLX_NATIVE_EXIT(env, that, _1glXQueryServerString_FUNC);
 	return rc;
 }
@@ -253,7 +253,7 @@
 
 #ifndef NO__1glXQueryVersion
 JNIEXPORT jboolean JNICALL GLX_NATIVE(_1glXQueryVersion)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -272,7 +272,7 @@
 
 #ifndef NO__1glXSwapBuffers
 JNIEXPORT void JNICALL GLX_NATIVE(_1glXSwapBuffers)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	GLX_NATIVE_ENTER(env, that, _1glXSwapBuffers_FUNC);
 	glXSwapBuffers((Display *)arg0, (GLXDrawable)arg1);
@@ -302,7 +302,7 @@
 
 #ifndef NO_memmove
 JNIEXPORT void JNICALL GLX_NATIVE(memmove)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jint arg2)
 {
 	XVisualInfo _arg0, *lparg0=NULL;
 	GLX_NATIVE_ENTER(env, that, memmove_FUNC);
diff -ur x86/glx_stats.c x86_64/glx_stats.c
--- x86/glx_stats.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/glx_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/glx_stats.h x86_64/glx_stats.h
--- x86/glx_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/glx_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/glx_structs.c x86_64/glx_structs.c
--- x86/glx_structs.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/glx_structs.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,7 +25,7 @@
 {
 	if (XVisualInfoFc.cached) return;
 	XVisualInfoFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	XVisualInfoFc.visual = (*env)->GetFieldID(env, XVisualInfoFc.clazz, "visual", "I");
+	XVisualInfoFc.visual = (*env)->GetFieldID(env, XVisualInfoFc.clazz, "visual", "J");
 	XVisualInfoFc.visualid = (*env)->GetFieldID(env, XVisualInfoFc.clazz, "visualid", "I");
 	XVisualInfoFc.screen = (*env)->GetFieldID(env, XVisualInfoFc.clazz, "screen", "I");
 	XVisualInfoFc.depth = (*env)->GetFieldID(env, XVisualInfoFc.clazz, "depth", "I");
@@ -41,7 +41,7 @@
 XVisualInfo *getXVisualInfoFields(JNIEnv *env, jobject lpObject, XVisualInfo *lpStruct)
 {
 	if (!XVisualInfoFc.cached) cacheXVisualInfoFields(env, lpObject);
-	lpStruct->visual = (Visual *)(*env)->GetIntField(env, lpObject, XVisualInfoFc.visual);
+	lpStruct->visual = (Visual *)(*env)->GetLongField(env, lpObject, XVisualInfoFc.visual);
 	lpStruct->visualid = (*env)->GetIntField(env, lpObject, XVisualInfoFc.visualid);
 	lpStruct->screen = (*env)->GetIntField(env, lpObject, XVisualInfoFc.screen);
 	lpStruct->depth = (*env)->GetIntField(env, lpObject, XVisualInfoFc.depth);
@@ -57,7 +57,7 @@
 void setXVisualInfoFields(JNIEnv *env, jobject lpObject, XVisualInfo *lpStruct)
 {
 	if (!XVisualInfoFc.cached) cacheXVisualInfoFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, XVisualInfoFc.visual, (jint)lpStruct->visual);
+	(*env)->SetLongField(env, lpObject, XVisualInfoFc.visual, (jlong)lpStruct->visual);
 	(*env)->SetIntField(env, lpObject, XVisualInfoFc.visualid, (jint)lpStruct->visualid);
 	(*env)->SetIntField(env, lpObject, XVisualInfoFc.screen, (jint)lpStruct->screen);
 	(*env)->SetIntField(env, lpObject, XVisualInfoFc.depth, (jint)lpStruct->depth);
diff -ur x86/glx_structs.h x86_64/glx_structs.h
--- x86/glx_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/glx_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/gnome.c x86_64/gnome.c
--- x86/gnome.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/gnome.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -33,7 +33,7 @@
 
 #ifndef NO__1g_1free
 JNIEXPORT void JNICALL GNOME_NATIVE(_1g_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1g_1free_FUNC);
 	g_free((gpointer)arg0);
@@ -42,12 +42,12 @@
 #endif
 
 #ifndef NO__1g_1list_1append
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1g_1list_1append)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1g_1list_1append)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1g_1list_1append_FUNC);
-	rc = (jint)g_list_append((GList *)arg0, (gpointer)arg1);
+	rc = (jlong)g_list_append((GList *)arg0, (gpointer)arg1);
 	GNOME_NATIVE_EXIT(env, that, _1g_1list_1append_FUNC);
 	return rc;
 }
@@ -55,7 +55,7 @@
 
 #ifndef NO__1g_1list_1free
 JNIEXPORT void JNICALL GNOME_NATIVE(_1g_1list_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1g_1list_1free_FUNC);
 	g_list_free((GList *)arg0);
@@ -64,12 +64,12 @@
 #endif
 
 #ifndef NO__1g_1list_1next
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1g_1list_1next)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1g_1list_1next)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1g_1list_1next_FUNC);
-	rc = (jint)g_list_next(arg0);
+	rc = (jlong)g_list_next(arg0);
 	GNOME_NATIVE_EXIT(env, that, _1g_1list_1next_FUNC);
 	return rc;
 }
@@ -77,7 +77,7 @@
 
 #ifndef NO__1g_1object_1unref
 JNIEXPORT void JNICALL GNOME_NATIVE(_1g_1object_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1g_1object_1unref_FUNC);
 	g_object_unref((gpointer)arg0);
@@ -86,20 +86,20 @@
 #endif
 
 #ifndef NO__1gnome_1icon_1lookup
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1icon_1lookup)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jint arg4, jbyteArray arg5, jint arg6, jintArray arg7)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1icon_1lookup)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jlong arg4, jbyteArray arg5, jint arg6, jintArray arg7)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jbyte *lparg5=NULL;
 	jint *lparg7=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1icon_1lookup_FUNC);
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetByteArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = (*env)->GetByteArrayElements(env, arg5, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = (*env)->GetIntArrayElements(env, arg7, NULL)) == NULL) goto fail;
-	rc = (jint)gnome_icon_lookup((GnomeIconTheme *)arg0, (GnomeThumbnailFactory *)arg1, (const char *)lparg2, (const char *)lparg3, (GnomeVFSFileInfo *)arg4, (const char *)lparg5, (GnomeIconLookupFlags)arg6, (GnomeIconLookupResultFlags *)lparg7);
+	rc = (jlong)gnome_icon_lookup((GnomeIconTheme *)arg0, (GnomeThumbnailFactory *)arg1, (const char *)lparg2, (const char *)lparg3, (GnomeVFSFileInfo *)arg4, (const char *)lparg5, (GnomeIconLookupFlags)arg6, (GnomeIconLookupResultFlags *)lparg7);
 fail:
 	if (arg7 && lparg7) (*env)->ReleaseIntArrayElements(env, arg7, lparg7, 0);
 	if (arg5 && lparg5) (*env)->ReleaseByteArrayElements(env, arg5, lparg5, 0);
@@ -111,43 +111,43 @@
 #endif
 
 #ifndef NO__1gnome_1icon_1theme_1lookup_1icon
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1icon_1theme_1lookup_1icon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1icon_1theme_1lookup_1icon)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlongArray arg3, jintArray arg4)
 {
-	jint *lparg3=NULL;
+	jlong *lparg3=NULL;
 	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1icon_1theme_1lookup_1icon_FUNC);
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)gnome_icon_theme_lookup_icon((GnomeIconTheme *)arg0, (const char *)arg1, arg2, (const GnomeIconData **)lparg3, lparg4);
+	rc = (jlong)gnome_icon_theme_lookup_icon((GnomeIconTheme *)arg0, (const char *)arg1, arg2, (const GnomeIconData **)lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1icon_1theme_1lookup_1icon_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gnome_1icon_1theme_1new
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1icon_1theme_1new)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1icon_1theme_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1icon_1theme_1new_FUNC);
-	rc = (jint)gnome_icon_theme_new();
+	rc = (jlong)gnome_icon_theme_new();
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1icon_1theme_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gnome_1vfs_1get_1registered_1mime_1types
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1get_1registered_1mime_1types)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1get_1registered_1mime_1types)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1get_1registered_1mime_1types_FUNC);
-	rc = (jint)gnome_vfs_get_registered_mime_types();
+	rc = (jlong)gnome_vfs_get_registered_mime_types();
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1vfs_1get_1registered_1mime_1types_FUNC);
 	return rc;
 }
@@ -166,14 +166,14 @@
 #endif
 
 #ifndef NO__1gnome_1vfs_1make_1uri_1from_1input
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1make_1uri_1from_1input)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1make_1uri_1from_1input)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1make_1uri_1from_1input_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gnome_vfs_make_uri_from_input((const char *)lparg0);
+	rc = (jlong)gnome_vfs_make_uri_from_input((const char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1vfs_1make_1uri_1from_1input_FUNC);
@@ -182,20 +182,20 @@
 #endif
 
 #ifndef NO__1gnome_1vfs_1make_1uri_1from_1input_1with_1dirs
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1make_1uri_1from_1input_1with_1dirs)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1make_1uri_1from_1input_1with_1dirs)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1make_1uri_1from_1input_1with_1dirs_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gnome_vfs_make_uri_from_input_with_dirs((const char *)lparg0, arg1);
+	rc = (jlong)gnome_vfs_make_uri_from_input_with_dirs((const char *)lparg0, arg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(const char *, jint);
+		typedef jlong (*FPTR)(const char *, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -204,7 +204,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((const char *)lparg0, arg1);
+			rc = (jlong)(*fptr)((const char *)lparg0, arg1);
 		}
 	}
 fail:
@@ -216,7 +216,7 @@
 
 #ifndef NO__1gnome_1vfs_1mime_1application_1free
 JNIEXPORT void JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1application_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1application_1free_FUNC);
 	gnome_vfs_mime_application_free((GnomeVFSMimeApplication *)arg0);
@@ -226,7 +226,7 @@
 
 #ifndef NO__1gnome_1vfs_1mime_1application_1launch
 JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1application_1launch)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1application_1launch_FUNC);
@@ -255,7 +255,7 @@
 
 #ifndef NO__1gnome_1vfs_1mime_1extensions_1list_1free
 JNIEXPORT void JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1extensions_1list_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1extensions_1list_1free_FUNC);
 	gnome_vfs_mime_extensions_list_free((GList *)arg0);
@@ -264,14 +264,14 @@
 #endif
 
 #ifndef NO__1gnome_1vfs_1mime_1get_1default_1application
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1get_1default_1application)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1get_1default_1application)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1get_1default_1application_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gnome_vfs_mime_get_default_application((const char *)lparg0);
+	rc = (jlong)gnome_vfs_mime_get_default_application((const char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1vfs_1mime_1get_1default_1application_FUNC);
@@ -280,12 +280,12 @@
 #endif
 
 #ifndef NO__1gnome_1vfs_1mime_1get_1extensions_1list
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1get_1extensions_1list)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1get_1extensions_1list)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1get_1extensions_1list_FUNC);
-	rc = (jint)gnome_vfs_mime_get_extensions_list((const char *)arg0);
+	rc = (jlong)gnome_vfs_mime_get_extensions_list((const char *)arg0);
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1vfs_1mime_1get_1extensions_1list_FUNC);
 	return rc;
 }
@@ -293,7 +293,7 @@
 
 #ifndef NO__1gnome_1vfs_1mime_1registered_1mime_1type_1list_1free
 JNIEXPORT void JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1registered_1mime_1type_1list_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1registered_1mime_1type_1list_1free_FUNC);
 	gnome_vfs_mime_registered_mime_type_list_free((GList *)arg0);
@@ -302,14 +302,14 @@
 #endif
 
 #ifndef NO__1gnome_1vfs_1mime_1type_1from_1name
-JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1type_1from_1name)
+JNIEXPORT jlong JNICALL GNOME_NATIVE(_1gnome_1vfs_1mime_1type_1from_1name)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1mime_1type_1from_1name_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gnome_vfs_mime_type_from_name((const char *)lparg0);
+	rc = (jlong)gnome_vfs_mime_type_from_name((const char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	GNOME_NATIVE_EXIT(env, that, _1gnome_1vfs_1mime_1type_1from_1name_FUNC);
@@ -319,7 +319,7 @@
 
 #ifndef NO__1gnome_1vfs_1url_1show
 JNIEXPORT jint JNICALL GNOME_NATIVE(_1gnome_1vfs_1url_1show)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	GNOME_NATIVE_ENTER(env, that, _1gnome_1vfs_1url_1show_FUNC);
@@ -348,7 +348,7 @@
 
 #ifndef NO_memmove
 JNIEXPORT void JNICALL GNOME_NATIVE(memmove)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GnomeVFSMimeApplication _arg0, *lparg0=NULL;
 	GNOME_NATIVE_ENTER(env, that, memmove_FUNC);
diff -ur x86/gnome_stats.c x86_64/gnome_stats.c
--- x86/gnome_stats.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/gnome_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
diff -ur x86/gnome_stats.h x86_64/gnome_stats.h
--- x86/gnome_stats.h	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/gnome_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
diff -ur x86/gnome_structs.c x86_64/gnome_structs.c
--- x86/gnome_structs.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/gnome_structs.c	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
@@ -29,12 +29,12 @@
 {
 	if (GnomeVFSMimeApplicationFc.cached) return;
 	GnomeVFSMimeApplicationFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GnomeVFSMimeApplicationFc.id = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "id", "I");
-	GnomeVFSMimeApplicationFc.name = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "name", "I");
-	GnomeVFSMimeApplicationFc.command = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "command", "I");
+	GnomeVFSMimeApplicationFc.id = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "id", "J");
+	GnomeVFSMimeApplicationFc.name = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "name", "J");
+	GnomeVFSMimeApplicationFc.command = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "command", "J");
 	GnomeVFSMimeApplicationFc.can_open_multiple_files = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "can_open_multiple_files", "Z");
 	GnomeVFSMimeApplicationFc.expects_uris = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "expects_uris", "I");
-	GnomeVFSMimeApplicationFc.supported_uri_schemes = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "supported_uri_schemes", "I");
+	GnomeVFSMimeApplicationFc.supported_uri_schemes = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "supported_uri_schemes", "J");
 	GnomeVFSMimeApplicationFc.requires_terminal = (*env)->GetFieldID(env, GnomeVFSMimeApplicationFc.clazz, "requires_terminal", "Z");
 	GnomeVFSMimeApplicationFc.cached = 1;
 }
@@ -42,12 +42,12 @@
 GnomeVFSMimeApplication *getGnomeVFSMimeApplicationFields(JNIEnv *env, jobject lpObject, GnomeVFSMimeApplication *lpStruct)
 {
 	if (!GnomeVFSMimeApplicationFc.cached) cacheGnomeVFSMimeApplicationFields(env, lpObject);
-	lpStruct->id = (char *)(*env)->GetIntField(env, lpObject, GnomeVFSMimeApplicationFc.id);
-	lpStruct->name = (char *)(*env)->GetIntField(env, lpObject, GnomeVFSMimeApplicationFc.name);
-	lpStruct->command = (char *)(*env)->GetIntField(env, lpObject, GnomeVFSMimeApplicationFc.command);
+	lpStruct->id = (char *)(*env)->GetLongField(env, lpObject, GnomeVFSMimeApplicationFc.id);
+	lpStruct->name = (char *)(*env)->GetLongField(env, lpObject, GnomeVFSMimeApplicationFc.name);
+	lpStruct->command = (char *)(*env)->GetLongField(env, lpObject, GnomeVFSMimeApplicationFc.command);
 	lpStruct->can_open_multiple_files = (gboolean)(*env)->GetBooleanField(env, lpObject, GnomeVFSMimeApplicationFc.can_open_multiple_files);
 	lpStruct->expects_uris = (GnomeVFSMimeApplicationArgumentType)(*env)->GetIntField(env, lpObject, GnomeVFSMimeApplicationFc.expects_uris);
-	lpStruct->supported_uri_schemes = (GList *)(*env)->GetIntField(env, lpObject, GnomeVFSMimeApplicationFc.supported_uri_schemes);
+	lpStruct->supported_uri_schemes = (GList *)(*env)->GetLongField(env, lpObject, GnomeVFSMimeApplicationFc.supported_uri_schemes);
 	lpStruct->requires_terminal = (gboolean)(*env)->GetBooleanField(env, lpObject, GnomeVFSMimeApplicationFc.requires_terminal);
 	return lpStruct;
 }
@@ -55,12 +55,12 @@
 void setGnomeVFSMimeApplicationFields(JNIEnv *env, jobject lpObject, GnomeVFSMimeApplication *lpStruct)
 {
 	if (!GnomeVFSMimeApplicationFc.cached) cacheGnomeVFSMimeApplicationFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GnomeVFSMimeApplicationFc.id, (jint)lpStruct->id);
-	(*env)->SetIntField(env, lpObject, GnomeVFSMimeApplicationFc.name, (jint)lpStruct->name);
-	(*env)->SetIntField(env, lpObject, GnomeVFSMimeApplicationFc.command, (jint)lpStruct->command);
+	(*env)->SetLongField(env, lpObject, GnomeVFSMimeApplicationFc.id, (jlong)lpStruct->id);
+	(*env)->SetLongField(env, lpObject, GnomeVFSMimeApplicationFc.name, (jlong)lpStruct->name);
+	(*env)->SetLongField(env, lpObject, GnomeVFSMimeApplicationFc.command, (jlong)lpStruct->command);
 	(*env)->SetBooleanField(env, lpObject, GnomeVFSMimeApplicationFc.can_open_multiple_files, (jboolean)lpStruct->can_open_multiple_files);
 	(*env)->SetIntField(env, lpObject, GnomeVFSMimeApplicationFc.expects_uris, (jint)lpStruct->expects_uris);
-	(*env)->SetIntField(env, lpObject, GnomeVFSMimeApplicationFc.supported_uri_schemes, (jint)lpStruct->supported_uri_schemes);
+	(*env)->SetLongField(env, lpObject, GnomeVFSMimeApplicationFc.supported_uri_schemes, (jlong)lpStruct->supported_uri_schemes);
 	(*env)->SetBooleanField(env, lpObject, GnomeVFSMimeApplicationFc.requires_terminal, (jboolean)lpStruct->requires_terminal);
 }
 #endif
diff -ur x86/gnome_structs.h x86_64/gnome_structs.h
--- x86/gnome_structs.h	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/gnome_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others. All rights reserved.
+ * Copyright (c) 2000, 2008 IBM Corporation and others. All rights reserved.
  * The contents of this file are made available under the terms
  * of the GNU Lesser General Public License (LGPL) Version 2.1 that
  * accompanies this distribution (lgpl-v21.txt).  The LGPL is also
diff -ur x86/org/eclipse/swt/accessibility/AccessibleFactory.java x86_64/org/eclipse/swt/accessibility/AccessibleFactory.java
--- x86/org/eclipse/swt/accessibility/AccessibleFactory.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/accessibility/AccessibleFactory.java	2009-02-11 17:43:46.000000000 -0500
@@ -18,16 +18,16 @@
 import org.eclipse.swt.*;
 
 class AccessibleFactory {
-	int /*long*/ handle;
-	int /*long*/ objectParentType;
-	int /*long*/ widgetTypeName;
+	long /*int*/ handle;
+	long /*int*/ objectParentType;
+	long /*int*/ widgetTypeName;
 	Callback atkObjectFactoryCB_create_accessible;
 	Callback gTypeInfo_base_init_factory;
 	Hashtable accessibles = new Hashtable (9);
 	
 	static final Hashtable Types = new Hashtable (9);
 	static final Hashtable Factories = new Hashtable (9);	
-	static final int /*long*/ DefaultParentType = OS.g_type_from_name (Converter.wcsToMbcs (null, "GtkAccessible", true)); //$NON-NLS-1$
+	static final long /*int*/ DefaultParentType = OS.g_type_from_name (Converter.wcsToMbcs (null, "GtkAccessible", true)); //$NON-NLS-1$
 	static final byte[] FACTORY_PARENTTYPENAME = Converter.wcsToMbcs (null, "AtkObjectFactory", true); //$NON-NLS-1$
 	static final byte[] SWT_TYPE_PREFIX = Converter.wcsToMbcs (null, "SWT", false); //$NON-NLS-1$
 	static final byte[] CHILD_TYPENAME = Converter.wcsToMbcs (null, "Child", false); //$NON-NLS-1$
@@ -82,12 +82,12 @@
 	static final Callback InitSelectionIfaceCB;
 	static final Callback InitTextIfaceCB;
 	/* interface definitions */
-	static int /*long*/ ObjectIfaceDefinition;
-	static final int /*long*/ ActionIfaceDefinition;
-	static final int /*long*/ ComponentIfaceDefinition;
-	static final int /*long*/ HypertextIfaceDefinition;
-	static final int /*long*/ SelectionIfaceDefinition;
-	static final int /*long*/ TextIfaceDefinition;
+	static long /*int*/ ObjectIfaceDefinition;
+	static final long /*int*/ ActionIfaceDefinition;
+	static final long /*int*/ ComponentIfaceDefinition;
+	static final long /*int*/ HypertextIfaceDefinition;
+	static final long /*int*/ SelectionIfaceDefinition;
+	static final long /*int*/ TextIfaceDefinition;
 	static {
 		AtkActionCB_get_keybinding = newCallback (AccessibleObject.class, "atkAction_get_keybinding", 2); //$NON-NLS-1$
 		AtkActionCB_get_name = newCallback (AccessibleObject.class, "atkAction_get_name", 2); //$NON-NLS-1$
@@ -157,7 +157,7 @@
 		return callback;
 	}
 
-	private AccessibleFactory (int /*long*/ widgetType) {
+	private AccessibleFactory (long /*int*/ widgetType) {
 		super ();
 		widgetTypeName = OS.g_type_name (widgetType);
 		int widgetTypeNameLength = OS.strlen (widgetTypeName) + 1;
@@ -168,40 +168,40 @@
 		System.arraycopy (buffer, 0, factoryName, FACTORY_TYPENAME.length - 1, widgetTypeNameLength);
 		if (OS.g_type_from_name (factoryName) == 0) {
 			/* register the factory */
-			int /*long*/ registry = ATK.atk_get_default_registry ();
-			int /*long*/ previousFactory = ATK.atk_registry_get_factory (registry, widgetType);
+			long /*int*/ registry = ATK.atk_get_default_registry ();
+			long /*int*/ previousFactory = ATK.atk_registry_get_factory (registry, widgetType);
 			objectParentType = ATK.atk_object_factory_get_accessible_type (previousFactory);
 			if (objectParentType == 0) objectParentType = DefaultParentType;
-			int /*long*/ factoryParentType = OS.g_type_from_name (FACTORY_PARENTTYPENAME);
+			long /*int*/ factoryParentType = OS.g_type_from_name (FACTORY_PARENTTYPENAME);
 			gTypeInfo_base_init_factory  = new Callback (this, "gTypeInfo_base_init_factory", 1); //$NON-NLS-1$
-			int /*long*/ address = gTypeInfo_base_init_factory.getAddress ();
+			long /*int*/ address = gTypeInfo_base_init_factory.getAddress ();
 			if (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 			GTypeInfo typeInfo = new GTypeInfo ();
 			typeInfo.base_init = address;
 			typeInfo.class_size = (short)ATK.AtkObjectFactoryClass_sizeof ();
 			typeInfo.instance_size = (short)ATK.AtkObjectFactory_sizeof ();
-			int /*long*/ info = OS.g_malloc (GTypeInfo.sizeof); 
+			long /*int*/ info = OS.g_malloc (GTypeInfo.sizeof); 
 			OS.memmove (info, typeInfo, GTypeInfo.sizeof); 
-			int /*long*/ swtFactoryType = OS.g_type_register_static (factoryParentType, factoryName, info, 0);
+			long /*int*/ swtFactoryType = OS.g_type_register_static (factoryParentType, factoryName, info, 0);
 			ATK.atk_registry_set_factory_type (registry, widgetType, swtFactoryType);
 			handle = ATK.atk_registry_get_factory (registry, widgetType);
 		}
 	}
 
 	void addAccessible (Accessible accessible) {
-		int /*long*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ controlHandle = accessible.getControlHandle ();
 		accessibles.put (new LONG (controlHandle), accessible);
 		ATK.atk_object_factory_create_accessible (handle, controlHandle);
 	}
 
-	int /*long*/ atkObjectFactory_create_accessible (int /*long*/ widget) {
+	long /*int*/ atkObjectFactory_create_accessible (long /*int*/ widget) {
 		Accessible accessible = (Accessible) accessibles.get (new LONG (widget));
 		if (accessible == null) {
 			/*
 			* we don't care about this control, so create it with the parent's
 			* type so that its accessibility callbacks will not pass though here 
 			*/  
-			int /*long*/ result = OS.g_object_new (objectParentType, 0);
+			long /*int*/ result = OS.g_object_new (objectParentType, 0);
 			ATK.atk_object_initialize (result, widget);
 			return result;
 		}
@@ -212,21 +212,21 @@
 		int typeNameLength = OS.strlen (widgetTypeName);
 		byte[] buffer = new byte [typeNameLength];
 		OS.memmove (buffer, widgetTypeName, typeNameLength);
-		int /*long*/ type = getType (buffer, accessible, objectParentType, ACC.CHILDID_SELF);
+		long /*int*/ type = getType (buffer, accessible, objectParentType, ACC.CHILDID_SELF);
 		AccessibleObject object = new AccessibleObject (type, widget, accessible, objectParentType, false);
 		accessible.accessibleObject = object;
 		return object.handle;
 	}
 	
-	static int /*long*/ getChildType (Accessible accessible, int childIndex) {
+	static long /*int*/ getChildType (Accessible accessible, int childIndex) {
 		return getType (CHILD_TYPENAME, accessible, DefaultParentType, childIndex);
 	}
 
-	static int /*long*/ getDefaultParentType () {
+	static long /*int*/ getDefaultParentType () {
 		return DefaultParentType;
 	}
 
-	static int /*long*/ getType (byte[] widgetTypeName, Accessible accessible, int /*long*/ parentType, int childId) {
+	static long /*int*/ getType (byte[] widgetTypeName, Accessible accessible, long /*int*/ parentType, int childId) {
 		AccessibleControlEvent event = new AccessibleControlEvent (accessible);
 		event.childID = childId;
 		AccessibleControlListener[] listeners = accessible.getControlListeners ();
@@ -269,13 +269,13 @@
 		if (selection) swtTypeName += "Selection"; //$NON-NLS-1$
 		if (text) swtTypeName += "Text"; //$NON-NLS-1$
 
-		int /*long*/ type = 0;
+		long /*int*/ type = 0;
 		LONG typeInt = (LONG)Types.get (swtTypeName);
 		if (typeInt != null) {
 			type = typeInt.value;
 		} else {
 			/* define the type */
-			int /*long*/ queryPtr = OS.g_malloc (GTypeQuery.sizeof);
+			long /*int*/ queryPtr = OS.g_malloc (GTypeQuery.sizeof);
 			OS.g_type_query (parentType, queryPtr);
 			GTypeQuery query = new GTypeQuery ();
 			OS.memmove (query, queryPtr, GTypeQuery.sizeof);
@@ -298,19 +298,19 @@
 		return type;
 	}
 
-	int /*long*/ gTypeInfo_base_init_factory (int /*long*/ klass) {
-		int /*long*/ atkObjectFactoryClass = ATK.ATK_OBJECT_FACTORY_CLASS (klass);
+	long /*int*/ gTypeInfo_base_init_factory (long /*int*/ klass) {
+		long /*int*/ atkObjectFactoryClass = ATK.ATK_OBJECT_FACTORY_CLASS (klass);
 		AtkObjectFactoryClass objectFactoryClassStruct = new AtkObjectFactoryClass ();
 		ATK.memmove (objectFactoryClassStruct, atkObjectFactoryClass);
 		atkObjectFactoryCB_create_accessible = new Callback (this, "atkObjectFactory_create_accessible", 1); //$NON-NLS-1$
-		int /*long*/ address = atkObjectFactoryCB_create_accessible.getAddress ();
+		long /*int*/ address = atkObjectFactoryCB_create_accessible.getAddress ();
 		if (address == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 		objectFactoryClassStruct.create_accessible = address;
 		ATK.memmove (atkObjectFactoryClass, objectFactoryClassStruct); 
 		return 0;
 	}
 	
-	static int /*long*/ gTypeInfo_base_init_type (int /*long*/ klass) {
+	static long /*int*/ gTypeInfo_base_init_type (long /*int*/ klass) {
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, klass);
 		objectClass.get_name = AtkObjectCB_get_name.getAddress ();
@@ -321,7 +321,7 @@
 		objectClass.ref_state_set = AtkObjectCB_ref_state_set.getAddress ();
 		objectClass.get_index_in_parent = AtkObjectCB_get_index_in_parent.getAddress ();
 		objectClass.ref_child = AtkObjectCB_ref_child.getAddress ();
-		int /*long*/ gObjectClass = OS.G_OBJECT_CLASS (klass);
+		long /*int*/ gObjectClass = OS.G_OBJECT_CLASS (klass);
 		GObjectClass objectClassStruct = new GObjectClass ();
 		OS.memmove (objectClassStruct, gObjectClass);
 		objectClassStruct.finalize = GObjectClass_finalize.getAddress ();
@@ -330,7 +330,7 @@
 		return 0;
 	}
 	
-	static int /*long*/ initActionIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initActionIfaceCB (long /*int*/ iface) {
 		AtkActionIface actionIface = new AtkActionIface ();
 		ATK.memmove (actionIface, iface);
 		actionIface.get_keybinding = AtkActionCB_get_keybinding.getAddress (); 
@@ -339,7 +339,7 @@
 		return 0;
 	}
 	
-	static int /*long*/ initComponentIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initComponentIfaceCB (long /*int*/ iface) {
 		AtkComponentIface componentIface = new AtkComponentIface ();
 		ATK.memmove (componentIface, iface);
 		componentIface.get_extents = AtkComponentCB_get_extents.getAddress ();
@@ -350,7 +350,7 @@
 		return 0;
 	}
 
-	static int /*long*/ initHypertextIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initHypertextIfaceCB (long /*int*/ iface) {
 		AtkHypertextIface hypertextIface = new AtkHypertextIface ();
 		ATK.memmove (hypertextIface, iface);
 		hypertextIface.get_link = AtkHypertextCB_get_link.getAddress (); 
@@ -360,7 +360,7 @@
 		return 0;
 	}
 
-	static int /*long*/ initSelectionIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initSelectionIfaceCB (long /*int*/ iface) {
 		AtkSelectionIface selectionIface = new AtkSelectionIface ();
 		ATK.memmove (selectionIface, iface);
 		selectionIface.is_child_selected = AtkSelectionCB_is_child_selected.getAddress ();
@@ -369,7 +369,7 @@
 		return 0;
 	}
 
-	static int /*long*/ initTextIfaceCB (int /*long*/ iface) {
+	static long /*int*/ initTextIfaceCB (long /*int*/ iface) {
 		AtkTextIface textInterface = new AtkTextIface ();
 		ATK.memmove (textInterface, iface);
 		textInterface.get_caret_offset = AtkTextCB_get_caret_offset.getAddress ();
@@ -388,8 +388,8 @@
 	static void registerAccessible (Accessible accessible) {
 		/* If DefaultParentType is 0 then OS accessibility is not active */
 		if (DefaultParentType == 0) return;
-		int /*long*/ controlHandle = accessible.getControlHandle ();
-		int /*long*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
+		long /*int*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
 		AccessibleFactory factory = (AccessibleFactory) Factories.get (new LONG (widgetType));
 		if (factory == null) {
 			factory = new AccessibleFactory (widgetType);
@@ -403,8 +403,8 @@
 	}
 	
 	static void unregisterAccessible (Accessible accessible) {
-		int /*long*/ controlHandle = accessible.getControlHandle ();
-		int /*long*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
+		long /*int*/ controlHandle = accessible.getControlHandle ();
+		long /*int*/ widgetType = OS.G_OBJECT_TYPE (controlHandle);
 		AccessibleFactory factory = (AccessibleFactory) Factories.get (new LONG (widgetType));
 		if (factory != null) {
 			factory.removeAccessible (accessible);
diff -ur x86/org/eclipse/swt/accessibility/Accessible.java x86_64/org/eclipse/swt/accessibility/Accessible.java
--- x86/org/eclipse/swt/accessibility/Accessible.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/accessibility/Accessible.java	2009-02-11 17:43:46.000000000 -0500
@@ -163,7 +163,7 @@
 		return result;
 	}
 
-	int /*long*/ getControlHandle () {
+	long /*int*/ getControlHandle () {
 		return control.handle;
 	}
 
diff -ur x86/org/eclipse/swt/accessibility/AccessibleObject.java x86_64/org/eclipse/swt/accessibility/AccessibleObject.java
--- x86/org/eclipse/swt/accessibility/AccessibleObject.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/accessibility/AccessibleObject.java	2009-02-11 17:43:46.000000000 -0500
@@ -18,8 +18,8 @@
 import org.eclipse.swt.widgets.*;
 
 class AccessibleObject {
-	int /*long*/ handle;
-	int /*long*/ parentType;
+	long /*int*/ handle;
+	long /*int*/ parentType;
 	int index = -1, id = ACC.CHILDID_SELF;
 	Accessible accessible;
 	AccessibleObject parent;
@@ -30,19 +30,19 @@
 	*/ 
 	boolean isLightweight = false;
 
-	static int /*long*/ actionNamePtr = -1;
-	static int /*long*/ descriptionPtr = -1;
-	static int /*long*/ keybindingPtr = -1;
-	static int /*long*/ namePtr = -1;
+	static long /*int*/ actionNamePtr = -1;
+	static long /*int*/ descriptionPtr = -1;
+	static long /*int*/ keybindingPtr = -1;
+	static long /*int*/ namePtr = -1;
 	static final Hashtable AccessibleObjects = new Hashtable (9);
-	static final int /*long*/ ATK_ACTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkAction", true));
-	static final int /*long*/ ATK_COMPONENT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkComponent", true));
-	static final int /*long*/ ATK_HYPERTEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkHypertext", true));
-	static final int /*long*/ ATK_SELECTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkSelection", true));		
-	static final int /*long*/ ATK_TEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkText", true));
+	static final long /*int*/ ATK_ACTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkAction", true));
+	static final long /*int*/ ATK_COMPONENT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkComponent", true));
+	static final long /*int*/ ATK_HYPERTEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkHypertext", true));
+	static final long /*int*/ ATK_SELECTION_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkSelection", true));		
+	static final long /*int*/ ATK_TEXT_TYPE = ATK.g_type_from_name (Converter.wcsToMbcs (null, "AtkText", true));
 	static final boolean DEBUG = Display.DEBUG;
 
-	AccessibleObject (int /*long*/ type, int /*long*/ widget, Accessible accessible, int /*long*/ parentType, boolean isLightweight) {
+	AccessibleObject (long /*int*/ type, long /*int*/ widget, Accessible accessible, long /*int*/ parentType, boolean isLightweight) {
 		super ();
 		handle = ATK.g_object_new (type, 0);
 		this.parentType = parentType;
@@ -58,13 +58,13 @@
 		child.setParent (this);
 	}
 	
-	static int /*long*/ atkAction_get_keybinding (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkAction_get_keybinding (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkAction_get_keybinding");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
 			AtkActionIface actionIface = new AtkActionIface ();
 			ATK.memmove (actionIface, superType);
 			if (actionIface.get_keybinding != 0) {
@@ -93,13 +93,13 @@
 		return keybindingPtr; 	
 	}
 
-	static int /*long*/ atkAction_get_name (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkAction_get_name (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkAction_get_name");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_ACTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_ACTION_GET_IFACE (object.handle));
 			AtkActionIface actionIface = new AtkActionIface ();
 			ATK.memmove (actionIface, superType);
 			if (actionIface.get_name != 0) {
@@ -128,7 +128,7 @@
 		return actionNamePtr;
 	}	
 
-	static int /*long*/ atkComponent_get_extents (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ width, int /*long*/ height, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_extents (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ width, long /*int*/ height, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_extents");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -137,7 +137,7 @@
 		OS.memmove (width, new int[] {0}, 4);
 		OS.memmove (height, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -159,11 +159,11 @@
 		event.width = parentWidth [0]; event.height = parentHeight [0];
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -174,11 +174,11 @@
 		}
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate display -> control, for answering to the OS */ 
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x -= topWindowX [0];
@@ -191,14 +191,14 @@
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_get_position (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_position (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_position, object: " + atkObject + " x: " + x + " y: " + y + " coord: " + coord_type);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (x, new int[] {0}, 4);
 		OS.memmove (y, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -216,11 +216,11 @@
 		event.x = parentX [0]; event.y = parentY [0];
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -231,11 +231,11 @@
 		}
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate display -> control, for answering to the OS */ 
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x -= topWindowX [0];
@@ -246,14 +246,14 @@
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_get_size (int /*long*/ atkObject, int /*long*/ width, int /*long*/ height, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_get_size (long /*int*/ atkObject, long /*int*/ width, long /*int*/ height, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_get_size");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (width, new int[] {0}, 4);
 		OS.memmove (height, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.get_extents != 0) {
@@ -277,13 +277,13 @@
 		return 0;
 	}
 
-	static int /*long*/ atkComponent_ref_accessible_at_point (int /*long*/ atkObject, int /*long*/ x, int /*long*/ y, int /*long*/ coord_type) {
+	static long /*int*/ atkComponent_ref_accessible_at_point (long /*int*/ atkObject, long /*int*/ x, long /*int*/ y, long /*int*/ coord_type) {
 		if (DEBUG) System.out.println ("-->atkComponent_ref_accessible_at_point");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_COMPONENT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_COMPONENT_GET_IFACE (object.handle));
 			AtkComponentIface componentIface = new AtkComponentIface ();
 			ATK.memmove (componentIface, superType);
 			if (componentIface.ref_accessible_at_point != 0) {
@@ -298,11 +298,11 @@
 		event.x = (int)/*64*/x; event.y = (int)/*64*/y;
 		if (coord_type == ATK.ATK_XY_WINDOW) {
 			/* translate control -> display, for filling in the event to be dispatched */
-			int /*long*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
+			long /*int*/ gtkAccessibleHandle = ATK.GTK_ACCESSIBLE (object.handle);
 			GtkAccessible gtkAccessible = new GtkAccessible ();
 			ATK.memmove (gtkAccessible, gtkAccessibleHandle);
-			int /*long*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
+			long /*int*/ topLevel = ATK.gtk_widget_get_toplevel (gtkAccessible.widget);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (topLevel);				
 			int[] topWindowX = new int [1], topWindowY = new int [1];
 			OS.gdk_window_get_origin (window, topWindowX, topWindowY);
 			event.x += topWindowX [0];
@@ -321,27 +321,27 @@
 		return parentResult;
 	}	
 
-	static int /*long*/ atkHypertext_get_link (int /*long*/ atkObject, int /*long*/ link_index) {
+	static long /*int*/ atkHypertext_get_link (long /*int*/ atkObject, long /*int*/ link_index) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_link");
 		return 0;
 	}
 
-	static int /*long*/ atkHypertext_get_n_links (int /*long*/ atkObject) {
+	static long /*int*/ atkHypertext_get_n_links (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_n_links");
 		return 0;	/* read hyperlink's name */
 	}
 
-	static int /*long*/ atkHypertext_get_link_index (int /*long*/ atkObject, int /*long*/ char_index) {
+	static long /*int*/ atkHypertext_get_link_index (long /*int*/ atkObject, long /*int*/ char_index) {
 		if (DEBUG) System.out.println ("-->atkHypertext_get_link_index");
 		return 0;
 	}
 
-	static int /*long*/ atkObject_get_description (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_description (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_description");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_description != 0) {
@@ -369,12 +369,12 @@
 		return descriptionPtr; 
 	}
 
-	static int /*long*/ atkObject_get_name (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_name (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_name: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_name != 0) {
@@ -402,12 +402,12 @@
 		return namePtr; 
 	}	
 
-	static int /*long*/ atkObject_get_n_children (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_n_children (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_n_children: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_n_children != 0) { 
@@ -425,31 +425,31 @@
 		return event.detail;
 	}
 
-	static int /*long*/ atkObject_get_index_in_parent (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_index_in_parent (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObjectCB_get_index_in_parent.  ");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		if (object.index != -1) return object.index;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_index_in_parent == 0) return 0;
 		return ATK.call (objectClass.get_index_in_parent,object. handle);
 	}
 
-	static int /*long*/ atkObject_get_parent (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_parent (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_parent: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		if (object.parent != null) return object.parent.handle;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_parent == 0) return 0;
 		return ATK.call (objectClass.get_parent, object.handle);
 	}
 
-	static int /*long*/ atkObject_get_role (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_get_role (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_get_role: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -496,14 +496,14 @@
 				}
 			}
 		} 
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.get_role == 0) return 0;
 		return ATK.call (objectClass.get_role, object.handle);
 	}
 
-	static int /*long*/ atkObject_ref_child (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkObject_ref_child (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkObject_ref_child: " + index + " of: " + atkObject);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -513,19 +513,19 @@
 			OS.g_object_ref (accObject.handle);	
 			return accObject.handle;
 		}
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.ref_child == 0) return 0;
 		return ATK.call (objectClass.ref_child, object.handle, index);
 	}
 
-	static int /*long*/ atkObject_ref_state_set (int /*long*/ atkObject) {
+	static long /*int*/ atkObject_ref_state_set (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkObject_ref_state_set");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
-		int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+		long /*int*/ parentResult = 0;
+		long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 		AtkObjectClass objectClass = new AtkObjectClass ();
 		ATK.memmove (objectClass, superType);
 		if (objectClass.ref_state_set != 0) { 
@@ -534,7 +534,7 @@
 		AccessibleControlListener[] listeners = object.getControlListeners ();
 		if (listeners.length == 0) return parentResult;
 
-		int /*long*/ set = parentResult;
+		long /*int*/ set = parentResult;
 		AccessibleControlEvent event = new AccessibleControlEvent (object);
 		event.childID = object.id;
 		event.detail = -1;
@@ -563,13 +563,13 @@
 		return set;
 	}
 
-	static int /*long*/ atkSelection_is_child_selected (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkSelection_is_child_selected (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkSelection_is_child_selected");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
 			AtkSelectionIface selectionIface = new AtkSelectionIface ();
 			ATK.memmove (selectionIface, superType);
 			if (selectionIface.is_child_selected != 0) {
@@ -591,13 +591,13 @@
 		return parentResult;
 	}
 
-	static int /*long*/ atkSelection_ref_selection (int /*long*/ atkObject, int /*long*/ index) {
+	static long /*int*/ atkSelection_ref_selection (long /*int*/ atkObject, long /*int*/ index) {
 		if (DEBUG) System.out.println ("-->atkSelection_ref_selection");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_SELECTION_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_SELECTION_GET_IFACE (object.handle));
 			AtkSelectionIface selectionIface = new AtkSelectionIface ();
 			ATK.memmove (selectionIface, superType);
 			if (selectionIface.ref_selection != 0) {
@@ -621,13 +621,13 @@
 		return parentResult;
 	}
 
-	static int /*long*/ atkText_get_caret_offset (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_caret_offset (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_caret_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_caret_offset != 0) {
@@ -646,14 +646,14 @@
 		return event.offset; 	
 	}
 	
-	static int /*long*/ atkText_get_character_at_offset (int /*long*/ atkObject, int /*long*/ offset) {
+	static long /*int*/ atkText_get_character_at_offset (long /*int*/ atkObject, long /*int*/ offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_character_at_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		String text = object.getText ();
 		if (text != null) return text.charAt ((int)/*64*/offset); // TODO
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+			long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_character_at_offset != 0) {
@@ -663,14 +663,14 @@
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_character_count (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_character_count (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_character_count");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		String text = object.getText ();
 		if (text != null) return text.length ();
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_class_peek (object.parentType);
+			long /*int*/ superType = ATK.g_type_class_peek (object.parentType);
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_character_count != 0) {
@@ -680,13 +680,13 @@
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_n_selections (int /*long*/ atkObject) {
+	static long /*int*/ atkText_get_n_selections (long /*int*/ atkObject) {
 		if (DEBUG) System.out.println ("-->atkText_get_n_selections");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_n_selections != 0) {
@@ -704,14 +704,14 @@
 		return event.length == 0 ? parentResult : 1;
 	}
 
-	static int /*long*/ atkText_get_selection (int /*long*/ atkObject, int /*long*/ selection_num, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_selection (long /*int*/ atkObject, long /*int*/ selection_num, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_selection");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
 		OS.memmove (start_offset, new int[] {0}, 4);
 		OS.memmove (end_offset, new int[] {0}, 4);
 		if (ATK.g_type_is_a (object.parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (object.handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
 			if (textIface.get_selection != 0) {
@@ -737,7 +737,7 @@
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text (int /*long*/ atkObject, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text (long /*int*/ atkObject, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text: " + start_offset + "," + end_offset);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -751,14 +751,14 @@
 			start_offset = Math.min (start_offset, end_offset);
 			text = text.substring ((int)/*64*/start_offset, (int)/*64*/end_offset);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		}
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_after_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_after_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_after_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -924,14 +924,14 @@
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_at_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_at_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_at_offset: " + offset_value + " start: " + start_offset + " end: " + end_offset);
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -1040,14 +1040,14 @@
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
 		return 0;
 	}
 
-	static int /*long*/ atkText_get_text_before_offset (int /*long*/ atkObject, int /*long*/ offset_value, int /*long*/ boundary_type, int /*long*/ start_offset, int /*long*/ end_offset) {
+	static long /*int*/ atkText_get_text_before_offset (long /*int*/ atkObject, long /*int*/ offset_value, long /*int*/ boundary_type, long /*int*/ start_offset, long /*int*/ end_offset) {
 		if (DEBUG) System.out.println ("-->atkText_get_text_before_offset");
 		AccessibleObject object = getAccessibleObject (atkObject);
 		if (object == null) return 0;
@@ -1161,7 +1161,7 @@
 			OS.memmove (end_offset, new int[] {endBounds}, 4);
 			text = text.substring (startBounds, endBounds);
 			byte[] bytes = Converter.wcsToMbcs (null, text, true);
-			int /*long*/ result = OS.g_malloc (bytes.length);
+			long /*int*/ result = OS.g_malloc (bytes.length);
 			OS.memmove (result, bytes, bytes.length);
 			return result;
 		} 
@@ -1174,11 +1174,11 @@
 		return result != null ? result : new AccessibleListener [0];
 	}
 
-	static AccessibleObject getAccessibleObject (int /*long*/ atkObject) {
+	static AccessibleObject getAccessibleObject (long /*int*/ atkObject) {
 		return (AccessibleObject)AccessibleObjects.get (new LONG (atkObject));
 	}
 	
-	AccessibleObject getChildByHandle (int /*long*/ handle) {
+	AccessibleObject getChildByHandle (long /*int*/ handle) {
 		return (AccessibleObject) children.get (new LONG (handle));	
 	}	
 
@@ -1208,13 +1208,13 @@
 	}
 
 	String getText () {
-		int /*long*/ parentResult = 0;
+		long /*int*/ parentResult = 0;
 		String parentText = "";	//$NON-NLS-1$
 		if (ATK.g_type_is_a (parentType, ATK_TEXT_TYPE)) {
-			int /*long*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));
+			long /*int*/ superType = ATK.g_type_interface_peek_parent (ATK.ATK_TEXT_GET_IFACE (handle));
 			AtkTextIface textIface = new AtkTextIface ();
 			ATK.memmove (textIface, superType);
-			int /*long*/ characterCount = 0;
+			long /*int*/ characterCount = 0;
 			if (textIface.get_character_count != 0) {
 				characterCount = ATK.call (textIface.get_character_count, handle);
 			}
@@ -1245,9 +1245,9 @@
 		return result != null ? result : new AccessibleTextListener [0];
 	}
 
-	static int /*long*/ gObjectClass_finalize (int /*long*/ atkObject) {
-		int /*long*/ superType = ATK.g_type_class_peek_parent (ATK.G_OBJECT_GET_CLASS (atkObject));
-		int /*long*/ gObjectClass = ATK.G_OBJECT_CLASS (superType);
+	static long /*int*/ gObjectClass_finalize (long /*int*/ atkObject) {
+		long /*int*/ superType = ATK.g_type_class_peek_parent (ATK.G_OBJECT_GET_CLASS (atkObject));
+		long /*int*/ gObjectClass = ATK.G_OBJECT_CLASS (superType);
 		GObjectClass objectClassStruct = new GObjectClass ();
 		ATK.memmove (objectClassStruct, gObjectClass);
 		ATK.call (objectClassStruct.finalize, atkObject);
@@ -1364,11 +1364,11 @@
 			Vector idsToKeep = new Vector (children.size ());
 			if (event.children [0] instanceof Integer) {
 				/*	an array of child id's (Integers) was answered */
-				int /*long*/ parentType = AccessibleFactory.getDefaultParentType ();
+				long /*int*/ parentType = AccessibleFactory.getDefaultParentType ();
 				for (int i = 0; i < event.children.length; i++) {
 					AccessibleObject object = getChildByIndex (i);
 					if (object == null) {
-						int /*long*/ childType = AccessibleFactory.getChildType (accessible, i);
+						long /*int*/ childType = AccessibleFactory.getChildType (accessible, i);
 						object = new AccessibleObject (childType, 0, accessible, parentType, true);
 						AccessibleObjects.put (new LONG (object.handle), object);
 						addChild (object);
diff -ur x86/org/eclipse/swt/awt/SWT_AWT.java x86_64/org/eclipse/swt/awt/SWT_AWT.java
--- x86/org/eclipse/swt/awt/SWT_AWT.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/awt/SWT_AWT.java	2009-02-11 17:43:46.000000000 -0500
@@ -63,7 +63,7 @@
 
 static boolean loaded, swingInitialized;
 
-static native final int /*long*/ getAWTHandle (Object canvas);
+static native final long /*int*/ getAWTHandle (Object canvas);
 static native final void setDebug (Frame canvas, boolean debug);
 
 static synchronized void loadLibrary () {
@@ -151,7 +151,7 @@
 	if ((parent.getStyle () & SWT.EMBEDDED) == 0) {
 		SWT.error (SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ handle = parent.embeddedHandle;
+	long /*int*/ handle = parent.embeddedHandle;
 	/*
 	 * Some JREs have implemented the embedded frame constructor to take an integer
 	 * and other JREs take a long.  To handle this binary incompatibility, use
@@ -199,9 +199,9 @@
 							if (parent.isDisposed()) return;
 							Shell shell = parent.getShell();
 							loadLibrary();
-							int /*long*/ awtHandle = getAWTHandle(window);
+							long /*int*/ awtHandle = getAWTHandle(window);
 							if (awtHandle == 0) return;
-							int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid(OS.GTK_WIDGET_WINDOW(OS.gtk_widget_get_toplevel(shell.handle)));
+							long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid(OS.GTK_WIDGET_WINDOW(OS.gtk_widget_get_toplevel(shell.handle)));
 							OS.XSetTransientForHint(OS.GDK_DISPLAY(), awtHandle, xWindow);
 						}
 					});
@@ -299,7 +299,7 @@
 public static Shell new_Shell (final Display display, final Canvas parent) {
 	if (display == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
 	if (parent == null) SWT.error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ handle = 0;
+	long /*int*/ handle = 0;
 	try {
 		loadLibrary ();
 		handle = getAWTHandle (parent);
diff -ur x86/org/eclipse/swt/browser/AppFileLocProvider.java x86_64/org/eclipse/swt/browser/AppFileLocProvider.java
--- x86/org/eclipse/swt/browser/AppFileLocProvider.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/AppFileLocProvider.java	2009-02-11 17:43:48.000000000 -0500
@@ -47,24 +47,24 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	directoryServiceProvider = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return getFile (args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return getFile (args[0], args[1], args[2]);}
 	};
 		
 	directoryServiceProvider2 = new XPCOMObject (new int[] {2, 0, 0, 3, 2}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return getFile (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return getFiles (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return getFile (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return getFiles (args[0], args[1]);}
 	};
 }
 
@@ -83,32 +83,32 @@
 	}	
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return directoryServiceProvider.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDirectoryServiceProvider.NS_IDIRECTORYSERVICEPROVIDER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {directoryServiceProvider.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {directoryServiceProvider.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDirectoryServiceProvider2.NS_IDIRECTORYSERVICEPROVIDER2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {directoryServiceProvider2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {directoryServiceProvider2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -121,7 +121,7 @@
 void setProfilePath (String path) {
 	profilePath = path;
 	if (!Compatibility.fileExists (path, "")) { //$NON-NLS-1$
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsEmbedString pathString = new nsEmbedString (path);
 		int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -137,7 +137,7 @@
 
 /* nsIDirectoryServiceProvider2 */
 
-int getFiles (int /*long*/ prop, int /*long*/ _retval) {
+int getFiles (long /*int*/ prop, long /*int*/ _retval) {
 	int size = XPCOM.strlen (prop);
 	byte[] bytes = new byte[size];
 	XPCOM.memmove (bytes, prop, size);
@@ -148,7 +148,7 @@
 		if (pluginDirs == null) {
 			int index = 0;
 			/* set the first value(s) to the MOZ_PLUGIN_PATH environment variable value if it's defined */
-			int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_PLUGIN_PATH, true));
+			long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_PLUGIN_PATH, true));
 			if (ptr != 0) {
 				int length = C.strlen (ptr);
 				byte[] buffer = new byte[length];
@@ -189,9 +189,9 @@
 		propertyValues = pluginDirs;
 	}
 
-	XPCOM.memmove(_retval, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove(_retval, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	if (propertyValues != null) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsISupports[] files = new nsISupports [propertyValues.length];
 		int index = 0;
 		for (int i = 0; i < propertyValues.length; i++) {
@@ -225,7 +225,7 @@
 
 		SimpleEnumerator enumerator = new SimpleEnumerator (files);
 		enumerator.AddRef ();
-		XPCOM.memmove (_retval, new int /*long*/[] {enumerator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {enumerator.getAddress ()}, C.PTR_SIZEOF);
 		return XPCOM.NS_OK;
 	}
 
@@ -234,7 +234,7 @@
 	
 /* nsIDirectoryServiceProvider implementation */
 
-int getFile(int /*long*/ prop, int /*long*/ persistent, int /*long*/ _retval) {
+int getFile(long /*int*/ prop, long /*int*/ persistent, long /*int*/ _retval) {
 	int size = XPCOM.strlen (prop);
 	byte[] bytes = new byte[size];
 	XPCOM.memmove (bytes, prop, size);
@@ -288,9 +288,9 @@
 	}
 
 	XPCOM.memmove (persistent, new int[] {1}, 4); /* PRBool */
-	XPCOM.memmove (_retval, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (_retval, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	if (propertyValue != null && propertyValue.length () > 0) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsEmbedString pathString = new nsEmbedString (propertyValue);
 		int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -303,7 +303,7 @@
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
 
-		XPCOM.memmove (_retval, new int /*long*/[] {result[0]}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {result[0]}, C.PTR_SIZEOF);
 		localFile.Release ();
 		return XPCOM.NS_OK;
 	}
diff -ur x86/org/eclipse/swt/browser/Download_1_8.java x86_64/org/eclipse/swt/browser/Download_1_8.java
--- x86/org/eclipse/swt/browser/Download_1_8.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/Download_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -42,97 +42,97 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	download = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3, is32 ? 10 : 6, is32 ? 8 : 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method8 (int /*long*/[] args) {
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method8 (long /*int*/[] args) {
 			if (args.length == 10) {
 				return OnProgressChange64_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
 			} else {
 				return OnProgressChange64 (args[0], args[1], args[2], args[3], args[4], args[5]);
 			}
 		}
-		public int /*long*/ method9 (int /*long*/[] args) {
+		public long /*int*/ method9 (long /*int*/[] args) {
 			if (args.length == 8) {
 				return Init_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
 			} else {
 				return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
 			}
 		}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetTargetFile (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetAmountTransferred (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return GetSize (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetCancelable (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetTargetFile (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetAmountTransferred (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return GetSize (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetCancelable (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
 	};
 
 	progressDialog = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3, is32 ? 10 : 6, is32 ? 8 : 7, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method8 (int /*long*/[] args) {
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method8 (long /*int*/[] args) {
 			if (args.length == 10) {
 				return OnProgressChange64_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7], args[8], args[9]);
 			} else {
 				return OnProgressChange64 (args[0], args[1], args[2], args[3], args[4], args[5]);
 			}
 		}
-		public int /*long*/ method9 (int /*long*/[] args) {
+		public long /*int*/ method9 (long /*int*/[] args) {
 			if (args.length == 8) {
 				return Init_32 (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);
 			} else {
 				return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
 			}
 		}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetTargetFile (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetAmountTransferred (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return GetSize (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetCancelable (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method20 (int /*long*/[] args) {return Open (args[0]);}
-		public int /*long*/ method21 (int /*long*/[] args) {return GetCancelDownloadOnClose (args[0]);}
-		public int /*long*/ method22 (int /*long*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
-		public int /*long*/ method23 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method24 (int /*long*/[] args) {return SetObserver (args[0]);}
-		public int /*long*/ method25 (int /*long*/[] args) {return GetDialog (args[0]);}
-		public int /*long*/ method26 (int /*long*/[] args) {return SetDialog (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetTargetFile (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetAmountTransferred (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return GetSize (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetCancelable (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method20 (long /*int*/[] args) {return Open (args[0]);}
+		public long /*int*/ method21 (long /*int*/[] args) {return GetCancelDownloadOnClose (args[0]);}
+		public long /*int*/ method22 (long /*int*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
+		public long /*int*/ method23 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method24 (long /*int*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method25 (long /*int*/[] args) {return GetDialog (args[0]);}
+		public long /*int*/ method26 (long /*int*/[] args) {return SetDialog (args[0]);}
 	};
 
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 }
 
@@ -155,36 +155,36 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return progressDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDownload_1_8.NS_IDOWNLOAD_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIProgressDialog_1_8.NS_IPROGRESSDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -197,26 +197,26 @@
 /* nsIDownload */
 
 /* Note. The argument startTime is defined as a PRInt64. This translates into two java ints. */
-int Init_32 (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, int /*long*/ startTime1, int /*long*/ startTime2, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+int Init_32 (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long /*int*/ startTime1, long /*int*/ startTime2, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 	long startTime = (startTime2 << 32) + startTime1;
 	return Init (aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aTempFile, aCancelable);
 }
 
-int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+int Init (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 	cancelable = new nsICancelable (aCancelable);
 	nsIURI source = new nsIURI (aSource);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	int rc = source.GetHost (aSpec);
 	if (rc != XPCOM.NS_OK) Mozilla.error(rc);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
 	String url = new String (dest);
 
 	nsIURI target = new nsIURI (aTarget);
-	int /*long*/ aPath = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aPath = XPCOM.nsEmbedCString_new ();
 	rc = target.GetPath (aPath);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	length = XPCOM.nsEmbedCString_Length (aPath);
@@ -271,60 +271,60 @@
 	return XPCOM.NS_OK;
 }
 
-int GetAmountTransferred (int /*long*/ arg0) {
+int GetAmountTransferred (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetCancelable (int /*long*/ arg0) {
+int GetCancelable (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDisplayName (int /*long*/ aDisplayName) {
+int GetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetMIMEInfo (int /*long*/ aMIMEInfo) {
+int GetMIMEInfo (long /*int*/ aMIMEInfo) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPercentComplete (int /*long*/ aPercentComplete) {
+int GetPercentComplete (long /*int*/ aPercentComplete) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetSize (int /*long*/ arg0) {
+int GetSize (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetSource (int /*long*/ aSource) {
+int GetSource (long /*int*/ aSource) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetStartTime (int /*long*/ aStartTime) {
+int GetStartTime (long /*int*/ aStartTime) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTarget (int /*long*/ aTarget) {
+int GetTarget (long /*int*/ aTarget) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTargetFile (int /*long*/ arg0) {
+int GetTargetFile (long /*int*/ arg0) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIProgressDialog */
-int GetCancelDownloadOnClose (int /*long*/ aCancelDownloadOnClose) {
+int GetCancelDownloadOnClose (long /*int*/ aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDialog (int /*long*/ aDialog) {
+int GetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetObserver (int /*long*/ aObserver) {
+int GetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Open (int /*long*/ aParent) {
+int Open (long /*int*/ aParent) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
@@ -332,26 +332,26 @@
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDialog (int /*long*/ aDialog) {
+int SetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetObserver (int /*long*/ aObserver) {
+int SetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIWebProgressListener */
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	return OnProgressChange64 (aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 }
 
 /* Note. The last 4 args in the original interface are defined as PRInt64. These each translate into two java ints. */
-int OnProgressChange64_32 (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aCurSelfProgress1, int /*long*/ aCurSelfProgress2, int /*long*/ aMaxSelfProgress1, int /*long*/ aMaxSelfProgress2, int /*long*/ aCurTotalProgress1, int /*long*/ aCurTotalProgress2, int /*long*/ aMaxTotalProgress1, int /*long*/ aMaxTotalProgress2) {
+int OnProgressChange64_32 (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aCurSelfProgress1, long /*int*/ aCurSelfProgress2, long /*int*/ aMaxSelfProgress1, long /*int*/ aMaxSelfProgress2, long /*int*/ aCurTotalProgress1, long /*int*/ aCurTotalProgress2, long /*int*/ aMaxTotalProgress1, long /*int*/ aMaxTotalProgress2) {
 	long aCurSelfProgress = (aCurSelfProgress2 << 32) + aCurSelfProgress1;
 	long aMaxSelfProgress = (aMaxSelfProgress2 << 32) + aMaxSelfProgress1;
 	long aCurTotalProgress = (aCurTotalProgress2 << 32) + aCurTotalProgress1;
@@ -359,7 +359,7 @@
 	return OnProgressChange64 (aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 }
 
-int OnProgressChange64 (int /*long*/ aWebProgress, int /*long*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
+int OnProgressChange64 (long /*int*/ aWebProgress, long /*int*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
 	long currentKBytes = aCurTotalProgress / 1024;
 	long totalKBytes = aMaxTotalProgress / 1024;
 	if (shell != null && !shell.isDisposed ()) {
@@ -372,11 +372,11 @@
 	return XPCOM.NS_OK;
 }
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_STOP) != 0) {
 		cancelable = null;
 		if (shell != null && !shell.isDisposed ()) shell.dispose ();
@@ -385,7 +385,7 @@
 	return XPCOM.NS_OK;
 }	
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	return XPCOM.NS_OK;
 }		
 }
diff -ur x86/org/eclipse/swt/browser/DownloadFactory_1_8.java x86_64/org/eclipse/swt/browser/DownloadFactory_1_8.java
--- x86/org/eclipse/swt/browser/DownloadFactory_1_8.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/DownloadFactory_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -30,17 +30,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@
 
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	Download_1_8 download = new Download_1_8 ();
 	download.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff -ur x86/org/eclipse/swt/browser/DownloadFactory.java x86_64/org/eclipse/swt/browser/DownloadFactory.java
--- x86/org/eclipse/swt/browser/DownloadFactory.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/DownloadFactory.java	2009-02-11 17:43:48.000000000 -0500
@@ -30,17 +30,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	Download download = new Download ();
 	download.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff -ur x86/org/eclipse/swt/browser/Download.java x86_64/org/eclipse/swt/browser/Download.java
--- x86/org/eclipse/swt/browser/Download.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/Download.java	2009-02-11 17:43:48.000000000 -0500
@@ -40,63 +40,63 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	download = new XPCOMObject (new int[] {2, 0, 0, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetPersist (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDisplayName (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetListener (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetListener (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetPersist (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDisplayName (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetListener (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetListener (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return SetObserver (args[0]);}
 	};
 	
 	progressDialog = new XPCOMObject (new int[] {2, 0, 0, 7, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetSource (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return GetTarget (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetPersist (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetPercentComplete (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDisplayName (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDisplayName (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetStartTime (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return GetMIMEInfo (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetListener (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetListener (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetObserver (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return SetObserver (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return Open (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return GetCancelDownloadOnClose (args[0]);}
-		public int /*long*/ method18 (int /*long*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
-		public int /*long*/ method19 (int /*long*/[] args) {return GetDialog (args[0]);}
-		public int /*long*/ method20 (int /*long*/[] args) {return SetDialog (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetSource (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return GetTarget (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetPersist (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetPercentComplete (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDisplayName (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDisplayName (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetStartTime (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return GetMIMEInfo (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetListener (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetListener (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetObserver (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return SetObserver (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return Open (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return GetCancelDownloadOnClose (args[0]);}
+		public long /*int*/ method18 (long /*int*/[] args) {return SetCancelDownloadOnClose ((int)/*64*/args[0]);}
+		public long /*int*/ method19 (long /*int*/[] args) {return GetDialog (args[0]);}
+		public long /*int*/ method20 (long /*int*/[] args) {return SetDialog (args[0]);}
 	};
 	
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 }
 
@@ -119,36 +119,36 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return progressDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIDownload.NS_IDOWNLOAD_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {download.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {download.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIProgressDialog.NS_IPROGRESSDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {progressDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -161,13 +161,13 @@
 /* nsIDownload */
 
 /* Note. The argument startTime is defined as a PRInt64. This translates into two java ints. */
-int Init (int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, int /*long*/ startTime1, int /*long*/ startTime2, int /*long*/ aPersist) {
+int Init (long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long /*int*/ startTime1, long /*int*/ startTime2, long /*int*/ aPersist) {
 	nsIURI source = new nsIURI (aSource);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	int rc = source.GetHost (aSpec);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
@@ -180,12 +180,12 @@
 	*/
 	String filename = null;
 	nsISupports supports = new nsISupports (aTarget);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = supports.QueryInterface (nsIURI.NS_IURI_IID, result);
 	if (rc == 0) {	/* >= 1.7 */
 		nsIURI target = new nsIURI (result[0]);
 		result[0] = 0;
-		int /*long*/ aPath = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aPath = XPCOM.nsEmbedCString_new ();
 		rc = target.GetPath (aPath);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		length = XPCOM.nsEmbedCString_Length (aPath);
@@ -199,7 +199,7 @@
 		target.Release ();
 	} else {	/* < 1.7 */
 		nsILocalFile target = new nsILocalFile (aTarget);
-		int /*long*/ aNativeTarget = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aNativeTarget = XPCOM.nsEmbedCString_new ();
 		rc = target.GetNativeLeafName (aNativeTarget);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		length = XPCOM.nsEmbedCString_Length (aNativeTarget);
@@ -253,54 +253,54 @@
 	return XPCOM.NS_OK;
 }
 
-int GetSource (int /*long*/ aSource) {
+int GetSource (long /*int*/ aSource) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetTarget (int /*long*/ aTarget) {
+int GetTarget (long /*int*/ aTarget) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPersist (int /*long*/ aPersist) {
+int GetPersist (long /*int*/ aPersist) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetPercentComplete (int /*long*/ aPercentComplete) {
+int GetPercentComplete (long /*int*/ aPercentComplete) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDisplayName (int /*long*/ aDisplayName) {
+int GetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDisplayName (int /*long*/ aDisplayName) {
+int SetDisplayName (long /*int*/ aDisplayName) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetStartTime (int /*long*/ aStartTime) {
+int GetStartTime (long /*int*/ aStartTime) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetMIMEInfo (int /*long*/ aMIMEInfo) {
+int GetMIMEInfo (long /*int*/ aMIMEInfo) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetListener (int /*long*/ aListener) {
+int GetListener (long /*int*/ aListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetListener (int /*long*/ aListener) {
+int SetListener (long /*int*/ aListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetObserver (int /*long*/ aObserver) {
+int GetObserver (long /*int*/ aObserver) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetObserver (int /*long*/ aObserver) {
+int SetObserver (long /*int*/ aObserver) {
 	if (aObserver != 0) {
 		nsISupports supports = new nsISupports (aObserver);
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		int rc = supports.QueryInterface (nsIHelperAppLauncher.NS_IHELPERAPPLAUNCHER_IID, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -310,11 +310,11 @@
 }
 
 /* nsIProgressDialog */
-int Open (int /*long*/ aParent) {
+int Open (long /*int*/ aParent) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetCancelDownloadOnClose (int /*long*/ aCancelDownloadOnClose) {
+int GetCancelDownloadOnClose (long /*int*/ aCancelDownloadOnClose) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
@@ -322,17 +322,17 @@
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDialog (int /*long*/ aDialog) {
+int GetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDialog (int /*long*/ aDialog) {
+int SetDialog (long /*int*/ aDialog) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsIWebProgressListener */
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_STOP) != 0) {
 		if (helperAppLauncher != null) helperAppLauncher.Release ();
 		helperAppLauncher = null;
@@ -342,7 +342,7 @@
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	int currentKBytes = aCurTotalProgress / 1024;
 	int totalKBytes = aMaxTotalProgress / 1024;
 	if (shell != null && !shell.isDisposed ()) {
@@ -355,15 +355,15 @@
 	return XPCOM.NS_OK;
 }
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	return XPCOM.NS_OK;
 }
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	return XPCOM.NS_OK;
 }
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 }
diff -ur x86/org/eclipse/swt/browser/FilePicker_1_8.java x86_64/org/eclipse/swt/browser/FilePicker_1_8.java
--- x86/org/eclipse/swt/browser/FilePicker_1_8.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/FilePicker_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,30 +17,30 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	filePicker = new XPCOMObject (new int[] {2, 0, 0, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], (short)args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return AppendFilter (args[0], args[1]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetDefaultString (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetDefaultString (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDefaultExtension (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDefaultExtension (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetFilterIndex (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetDisplayDirectory (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetDisplayDirectory (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetFile (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetFileURL (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetFiles (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return Show (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], (short)args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return AppendFilter (args[0], args[1]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetDefaultString (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetDefaultString (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDefaultExtension (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDefaultExtension (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetFilterIndex (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetDisplayDirectory (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetDisplayDirectory (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetFile (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetFileURL (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetFiles (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return Show (args[0]);}
 	};
 }
 
@@ -49,10 +49,10 @@
  * answers a java string based on the type of string that is appropriate for the Mozilla
  * version being used.
  */
-String parseAString (int /*long*/ string) {
+String parseAString (long /*int*/ string) {
 	if (string == 0) return null;
 	int length = XPCOM.nsEmbedString_Length (string);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (string);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (string);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	return new String (chars);
diff -ur x86/org/eclipse/swt/browser/FilePickerFactory_1_8.java x86_64/org/eclipse/swt/browser/FilePickerFactory_1_8.java
--- x86/org/eclipse/swt/browser/FilePickerFactory_1_8.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/FilePickerFactory_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,26 +18,26 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	FilePicker_1_8 picker = new FilePicker_1_8 ();
 	picker.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff -ur x86/org/eclipse/swt/browser/FilePickerFactory.java x86_64/org/eclipse/swt/browser/FilePickerFactory.java
--- x86/org/eclipse/swt/browser/FilePickerFactory.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/FilePickerFactory.java	2009-02-11 17:43:48.000000000 -0500
@@ -30,17 +30,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -87,10 +87,10 @@
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	FilePicker picker = new FilePicker ();
 	picker.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {picker.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff -ur x86/org/eclipse/swt/browser/FilePicker.java x86_64/org/eclipse/swt/browser/FilePicker.java
--- x86/org/eclipse/swt/browser/FilePicker.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/FilePicker.java	2009-02-11 17:43:48.000000000 -0500
@@ -21,7 +21,7 @@
 
 	int refCount = 0;
 	short mode;
-	int /*long*/ parentHandle;
+	long /*int*/ parentHandle;
 	String[] files, masks;
 	String defaultFilename, directory, title;
 
@@ -39,30 +39,30 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	filePicker = new XPCOMObject (new int[] {2, 0, 0, 3, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Init (args[0], args[1], (short)args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return AppendFilter (args[0], args[1]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetDefaultString (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetDefaultString (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetDefaultExtension (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetDefaultExtension (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetFilterIndex (args[0]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return GetDisplayDirectory (args[0]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return SetDisplayDirectory (args[0]);}
-		public int /*long*/ method14 (int /*long*/[] args) {return GetFile (args[0]);}
-		public int /*long*/ method15 (int /*long*/[] args) {return GetFileURL (args[0]);}
-		public int /*long*/ method16 (int /*long*/[] args) {return GetFiles (args[0]);}
-		public int /*long*/ method17 (int /*long*/[] args) {return Show (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Init (args[0], args[1], (short)args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AppendFilters ((int)/*64*/args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return AppendFilter (args[0], args[1]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetDefaultString (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetDefaultString (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetDefaultExtension (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetDefaultExtension (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetFilterIndex (args[0]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return SetFilterIndex ((int)/*64*/args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return GetDisplayDirectory (args[0]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return SetDisplayDirectory (args[0]);}
+		public long /*int*/ method14 (long /*int*/[] args) {return GetFile (args[0]);}
+		public long /*int*/ method15 (long /*int*/[] args) {return GetFileURL (args[0]);}
+		public long /*int*/ method16 (long /*int*/[] args) {return GetFiles (args[0]);}
+		public long /*int*/ method17 (long /*int*/[] args) {return Show (args[0]);}
 	};
 }
 
@@ -77,32 +77,32 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return filePicker.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFilePicker.NS_IFILEPICKER_IID)) {
-		XPCOM.memmove(ppvObject, new int /*long*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove(ppvObject, new long /*int*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFilePicker_1_8.NS_IFILEPICKER_IID)) {
-		XPCOM.memmove(ppvObject, new int /*long*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove(ppvObject, new long /*int*/[] {filePicker.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -117,20 +117,20 @@
  * answers a java string based on the type of string that is appropriate for the Mozilla
  * version being used.
  */
-String parseAString (int /*long*/ string) {
+String parseAString (long /*int*/ string) {
 	return null;
 }
 
 /* nsIFilePicker */
 
-int Init (int /*long*/ parent, int /*long*/ title, short mode) {
+int Init (long /*int*/ parent, long /*int*/ title, short mode) {
 	parentHandle = parent;
 	this.mode = mode;
 	this.title = parseAString (title);
 	return XPCOM.NS_OK;
 }
 
-int Show (int /*long*/ _retval) {
+int Show (long /*int*/ _retval) {
 	if (mode == nsIFilePicker.modeGetFolder) {
 		/* picking a directory */
 		int result = showDirectoryPicker ();
@@ -176,20 +176,20 @@
 	return directory == null ? nsIFilePicker.returnCancel : nsIFilePicker.returnOK;
 }
 
-int GetFiles (int /*long*/ aFiles) {
+int GetFiles (long /*int*/ aFiles) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFileURL (int /*long*/ aFileURL) {
+int GetFileURL (long /*int*/ aFileURL) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFile (int /*long*/ aFile) {
+int GetFile (long /*int*/ aFile) {
 	String filename = "";	//$NON-NLS-1$
 	if (directory != null) filename += directory + SEPARATOR;
 	if (files != null && files.length > 0) filename += files[0];
 	nsEmbedString path = new nsEmbedString (filename);
-	int /*long*/[] file = new int /*long*/[1];
+	long /*int*/[] file = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, file);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -198,13 +198,13 @@
 	return XPCOM.NS_OK;
 }
 
-int SetDisplayDirectory (int /*long*/ aDisplayDirectory) {
+int SetDisplayDirectory (long /*int*/ aDisplayDirectory) {
 	if (aDisplayDirectory == 0) return XPCOM.NS_OK;
 	nsILocalFile file = new nsILocalFile (aDisplayDirectory);
-	int /*long*/ pathname = XPCOM.nsEmbedCString_new ();
+	long /*int*/ pathname = XPCOM.nsEmbedCString_new ();
 	file.GetNativePath (pathname);
 	int length = XPCOM.nsEmbedCString_Length (pathname);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (pathname);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (pathname);
 	byte[] bytes = new byte[length];
 	XPCOM.memmove (bytes, buffer, length);
 	XPCOM.nsEmbedCString_delete (pathname);
@@ -213,10 +213,10 @@
 	return XPCOM.NS_OK;
 }
 
-int GetDisplayDirectory (int /*long*/ aDisplayDirectory) {
+int GetDisplayDirectory (long /*int*/ aDisplayDirectory) {
 	String directoryName = directory != null ? directory : "";	//$NON-NLS-1$
 	nsEmbedString path = new nsEmbedString (directoryName);
-	int /*long*/[] file = new int /*long*/[1];
+	long /*int*/[] file = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, file);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
@@ -229,31 +229,31 @@
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetFilterIndex (int /*long*/ aFilterIndex) {
+int GetFilterIndex (long /*int*/ aFilterIndex) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDefaultExtension (int /*long*/ aDefaultExtension) {
+int SetDefaultExtension (long /*int*/ aDefaultExtension) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetDefaultExtension (int /*long*/ aDefaultExtension) {
+int GetDefaultExtension (long /*int*/ aDefaultExtension) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetDefaultString (int /*long*/ aDefaultString) {
+int SetDefaultString (long /*int*/ aDefaultString) {
 	defaultFilename = parseAString (aDefaultString);
 	return XPCOM.NS_OK;
 }
 
-int GetDefaultString (int /*long*/ aDefaultString) {
+int GetDefaultString (long /*int*/ aDefaultString) {
 	/* note that the type of argument 1 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int AppendFilter (int /*long*/ title, int /*long*/ filter) {
+int AppendFilter (long /*int*/ title, long /*int*/ filter) {
 	/* note that the type of arguments 1 and 2 changed as of Mozilla 1.8 */
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
diff -ur x86/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java x86_64/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java
--- x86/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/HelperAppLauncherDialog_1_9.java	2009-02-11 17:43:48.000000000 -0500
@@ -32,17 +32,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	helperAppLauncherDialog = new XPCOMObject (new int[] {2, 0, 0, 3, 6}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5]);}
 	};		
 }
 
@@ -57,27 +57,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return helperAppLauncherDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIHelperAppLauncherDialog_1_9.NS_IHELPERAPPLAUNCHERDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -96,12 +96,12 @@
 
 /* nsIHelperAppLauncherDialog */
 
-int Show (int /*long*/ aLauncher, int /*long*/ aContext, int aReason) {
+int Show (long /*int*/ aLauncher, long /*int*/ aContext, int aReason) {
 	nsIHelperAppLauncher_1_9 helperAppLauncher = new nsIHelperAppLauncher_1_9 (aLauncher);
 	return helperAppLauncher.SaveToDisk (0, 0);
 }
 
-int PromptForSaveToFile (int /*long*/ aLauncher, int /*long*/ aWindowContext, int /*long*/ aDefaultFileName, int /*long*/ aSuggestedFileExtension, int aForcePrompt, int /*long*/ _retval) {
+int PromptForSaveToFile (long /*int*/ aLauncher, long /*int*/ aWindowContext, long /*int*/ aDefaultFileName, long /*int*/ aSuggestedFileExtension, int aForcePrompt, long /*int*/ _retval) {
 	int length = XPCOM.strlen_PRUnichar (aDefaultFileName);
 	char[] dest = new char[length];
 	XPCOM.memmove (dest, aDefaultFileName, length * 2);
@@ -125,7 +125,7 @@
 		return XPCOM.NS_ERROR_FAILURE;
 	}
 	nsEmbedString path = new nsEmbedString (name);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_NewLocalFile (path.getAddress (), 1, result);
 	path.dispose ();
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
diff -ur x86/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java x86_64/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java
--- x86/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/HelperAppLauncherDialogFactory.java	2009-02-11 17:43:48.000000000 -0500
@@ -31,17 +31,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -56,27 +56,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -88,15 +88,15 @@
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	if (isPre_1_9) {
 		HelperAppLauncherDialog helperAppLauncherDialog = new HelperAppLauncherDialog ();
 		helperAppLauncherDialog.AddRef ();
-		XPCOM.memmove (result, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (result, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 	} else {
 		HelperAppLauncherDialog_1_9 helperAppLauncherDialog = new HelperAppLauncherDialog_1_9 ();
 		helperAppLauncherDialog.AddRef ();
-		XPCOM.memmove (result, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (result, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 	}
 	return XPCOM.NS_OK;
 }
diff -ur x86/org/eclipse/swt/browser/HelperAppLauncherDialog.java x86_64/org/eclipse/swt/browser/HelperAppLauncherDialog.java
--- x86/org/eclipse/swt/browser/HelperAppLauncherDialog.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/HelperAppLauncherDialog.java	2009-02-11 17:43:48.000000000 -0500
@@ -38,17 +38,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	helperAppLauncherDialog = new XPCOMObject (new int[] {2, 0, 0, 3, 5}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Show (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return PromptForSaveToFile (args[0], args[1], args[2], args[3], args[4]);}
 	};		
 }
 
@@ -63,27 +63,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return helperAppLauncherDialog.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIHelperAppLauncherDialog.NS_IHELPERAPPLAUNCHERDIALOG_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {helperAppLauncherDialog.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -102,14 +102,14 @@
 
 /* nsIHelperAppLauncherDialog */
 
-int Show (int /*long*/ aLauncher, int /*long*/ aContext, int aReason) {
+int Show (long /*int*/ aLauncher, long /*int*/ aContext, int aReason) {
 	/*
 	 * The interface for nsIHelperAppLauncher changed as of mozilla 1.8.  Query the received
 	 * nsIHelperAppLauncher for the new interface, and if it is not found then fall back to
 	 * the old interface. 
 	 */
 	nsISupports supports = new nsISupports (aLauncher);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = supports.QueryInterface (nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);
 	if (rc == XPCOM.NS_OK) {	/* >= 1.8 */
 		nsIHelperAppLauncher_1_8 helperAppLauncher = new nsIHelperAppLauncher_1_8 (aLauncher);
@@ -121,8 +121,8 @@
 	return helperAppLauncher.SaveToDisk (0, 0);
 }
 
-int PromptForSaveToFile (int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {
-	int /*long*/ aDefaultFile, aSuggestedFileExtension, _retval;
+int PromptForSaveToFile (long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4) {
+	long /*int*/ aDefaultFile, aSuggestedFileExtension, _retval;
 	boolean hasLauncher = false;
 
 	/*
@@ -140,7 +140,7 @@
 	 */
  	boolean using_1_8 = false;
 	nsISupports support = new nsISupports (arg0);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = support.QueryInterface (nsIHelperAppLauncher_1_8.NS_IHELPERAPPLAUNCHER_IID, result);
 	if (rc == XPCOM.NS_OK) {
 		using_1_8 = true;
diff -ur x86/org/eclipse/swt/browser/InputStream.java x86_64/org/eclipse/swt/browser/InputStream.java
--- x86/org/eclipse/swt/browser/InputStream.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/InputStream.java	2009-02-11 17:43:48.000000000 -0500
@@ -34,14 +34,14 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	inputStream = new XPCOMObject (new int[] {2, 0, 0, 0, 1, 3, 4, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Close ();}
-		public int /*long*/ method4 (int /*long*/[] args) {return Available (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Read (args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ReadSegments (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return IsNonBlocking (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Close ();}
+		public long /*int*/ method4 (long /*int*/[] args) {return Available (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Read (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ReadSegments (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return IsNonBlocking (args[0]);}
 	};
 }
 
@@ -52,26 +52,26 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return inputStream.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIInputStream.NS_IINPUTSTREAM_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {inputStream.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -89,13 +89,13 @@
 	return XPCOM.NS_OK;
 }
 
-int Available (int /*long*/ _retval) {
+int Available (long /*int*/ _retval) {
 	int available = buffer == null ? 0 : buffer.length - index;
 	XPCOM.memmove (_retval, new int[] {available}, 4);
 	return XPCOM.NS_OK;
 }
 
-int Read(int /*long*/ aBuf, int aCount, int /*long*/ _retval) {
+int Read(long /*int*/ aBuf, int aCount, long /*int*/ _retval) {
 	int max = Math.min (aCount, buffer == null ? 0 : buffer.length - index);
 	if (max > 0) {
 		byte[] src = new byte[max];
@@ -107,12 +107,12 @@
 	return XPCOM.NS_OK;
 }
 
-int ReadSegments (int /*long*/ aWriter, int /*long*/ aClosure, int aCount, int /*long*/ _retval) {
+int ReadSegments (long /*int*/ aWriter, long /*int*/ aClosure, int aCount, long /*int*/ _retval) {
 	int max = Math.min (aCount, buffer == null ? 0 : buffer.length - index);
 	int cnt = max;
 	while (cnt > 0) {
 		int[] aWriteCount = new int[1];
-		int /*long*/ rc = XPCOM.Call (aWriter, getAddress (), aClosure, buffer, index, cnt, aWriteCount);
+		long /*int*/ rc = XPCOM.Call (aWriter, getAddress (), aClosure, buffer, index, cnt, aWriteCount);
 		if (rc != XPCOM.NS_OK) break;
 		index += aWriteCount[0];
 		cnt -= aWriteCount[0];
@@ -121,7 +121,7 @@
 	return XPCOM.NS_OK;
 }
 
-int IsNonBlocking (int /*long*/ _retval) {
+int IsNonBlocking (long /*int*/ _retval) {
 	/* blocking */
 	XPCOM.memmove (_retval, new int[] {0}, 4);
 	return XPCOM.NS_OK;
diff -ur x86/org/eclipse/swt/browser/MozillaDelegate.java x86_64/org/eclipse/swt/browser/MozillaDelegate.java
--- x86/org/eclipse/swt/browser/MozillaDelegate.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/MozillaDelegate.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,11 +18,11 @@
 
 class MozillaDelegate {
 	Browser browser;
-	int /*long*/ mozillaHandle, embedHandle;
+	long /*int*/ mozillaHandle, embedHandle;
 	boolean hasFocus;
 	Listener listener;
 	static Callback eventCallback;
-	static int /*long*/ eventProc;
+	static long /*int*/ eventProc;
 	static final int STOP_PROPOGATE = 1;
 
 	static boolean IsLinux;
@@ -40,8 +40,8 @@
 	this.browser = browser;
 }
 
-static int /*long*/ eventProc (int /*long*/ handle, int /*long*/ gdkEvent, int /*long*/ pointer) {
-	int /*long*/ parent = OS.gtk_widget_get_parent (handle);
+static long /*int*/ eventProc (long /*int*/ handle, long /*int*/ gdkEvent, long /*int*/ pointer) {
+	long /*int*/ parent = OS.gtk_widget_get_parent (handle);
 	parent = OS.gtk_widget_get_parent (parent);
 	if (parent == 0) return 0;
 	Widget widget = Display.getCurrent ().findWidget (parent);
@@ -51,12 +51,12 @@
 	return 0;
 }
 
-static Browser findBrowser (int /*long*/ handle) {
+static Browser findBrowser (long /*int*/ handle) {
 	/*
 	* Note.  On GTK, Mozilla is embedded into a GtkHBox handle
 	* and not directly into the parent Composite handle.
 	*/
-	int /*long*/ parent = OS.gtk_widget_get_parent (handle);
+	long /*int*/ parent = OS.gtk_widget_get_parent (handle);
 	Display display = Display.getCurrent ();
 	return (Browser)display.findWidget (parent); 
 }
@@ -69,7 +69,7 @@
 	return Converter.wcsToMbcs (codePage, string, terminate);
 }
 
-int /*long*/ getHandle () {
+long /*int*/ getHandle () {
 	/*
 	* Bug in Mozilla Linux GTK.  Embedding Mozilla into a GtkFixed
 	* handle causes problems with some Mozilla plug-ins.  For some
@@ -94,7 +94,7 @@
 	return "swt-xpcominit"; //$NON-NLS-1$
 }
 
-int /*long*/ gtk_event (int /*long*/ handle, int /*long*/ gdkEvent, int /*long*/ pointer) {
+long /*int*/ gtk_event (long /*int*/ handle, long /*int*/ gdkEvent, long /*int*/ pointer) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	if (event.type == OS.GDK_BUTTON_PRESS) {
@@ -160,7 +160,7 @@
 	* forward the event to the parent embedder before Mozilla received and consumed
 	* them.
 	*/
-	int /*long*/ list = OS.gtk_container_get_children (embedHandle);
+	long /*int*/ list = OS.gtk_container_get_children (embedHandle);
 	if (list != 0) {
 		mozillaHandle = OS.g_list_data (list);
 		OS.g_list_free (list);
@@ -186,7 +186,7 @@
 	return true;
 }
 
-void onDispose (int /*long*/ embedHandle) {
+void onDispose (long /*int*/ embedHandle) {
 	if (listener != null) {
 		browser.getDisplay ().removeFilter (SWT.FocusIn, listener);
 		browser.getShell ().removeListener (SWT.Deactivate, listener);
@@ -195,7 +195,7 @@
 	browser = null;
 }
 
-void setSize (int /*long*/ embedHandle, int width, int height) {
+void setSize (long /*int*/ embedHandle, int width, int height) {
 	OS.gtk_widget_set_size_request (embedHandle, width, height);
 }
 
diff -ur x86/org/eclipse/swt/browser/Mozilla.java x86_64/org/eclipse/swt/browser/Mozilla.java
--- x86/org/eclipse/swt/browser/Mozilla.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/Mozilla.java	2009-02-11 17:43:48.000000000 -0500
@@ -21,7 +21,7 @@
 import org.eclipse.swt.layout.*;
 
 class Mozilla extends WebBrowser {
-	int /*long*/ embedHandle;
+	long /*int*/ embedHandle;
 	nsIWebBrowser webBrowser;
 	Object webBrowserObject;
 	MozillaDelegate delegate;
@@ -41,7 +41,7 @@
 	XPCOMObject domEventListener;
 	int chromeFlags = nsIWebBrowserChrome.CHROME_DEFAULT;
 	int refCount, lastKeyCode, lastCharCode;
-	int /*long*/ request;
+	long /*int*/ request;
 	Point location, size;
 	boolean visible, isChild, ignoreDispose, awaitingNavigate;
 	Shell tip = null;
@@ -97,7 +97,7 @@
 		MozillaClearSessions = new Runnable () {
 			public void run () {
 				if (!Initialized) return;
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -128,9 +128,9 @@
 					rc = cookie.GetExpires (expires);
 					if (expires[0] == 0) {
 						/* indicates a session cookie */
-						int /*long*/ domain = XPCOM.nsEmbedCString_new ();
-						int /*long*/ name = XPCOM.nsEmbedCString_new ();
-						int /*long*/ path = XPCOM.nsEmbedCString_new ();
+						long /*int*/ domain = XPCOM.nsEmbedCString_new ();
+						long /*int*/ name = XPCOM.nsEmbedCString_new ();
+						long /*int*/ path = XPCOM.nsEmbedCString_new ();
 						cookie.GetHost (domain);
 						cookie.GetName (name);
 						cookie.GetPath (path);
@@ -153,7 +153,7 @@
 	delegate = new MozillaDelegate (browser);
 	final Display display = parent.getDisplay ();
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	if (!Initialized) {
 		boolean initLoaded = false;
 		boolean IsXULRunner = false;
@@ -208,20 +208,20 @@
 			/* attempt to discover a XULRunner to use as the GRE */
 			GREVersionRange range = new GREVersionRange ();
 			byte[] bytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_LOWER, true);
-			int /*long*/ lower = C.malloc (bytes.length);
+			long /*int*/ lower = C.malloc (bytes.length);
 			C.memmove (lower, bytes, bytes.length);
 			range.lower = lower;
 			range.lowerInclusive = LowerRangeInclusive;
 
 			bytes = MozillaDelegate.wcsToMbcs (null, GRERANGE_UPPER, true);
-			int /*long*/ upper = C.malloc (bytes.length);
+			long /*int*/ upper = C.malloc (bytes.length);
 			C.memmove (upper, bytes, bytes.length);
 			range.upper = upper;
 			range.upperInclusive = UpperRangeInclusive;
 
 			int length = XPCOMInit.PATH_MAX;
-			int /*long*/ greBuffer = C.malloc (length);
-			int /*long*/ propertiesPtr = C.malloc (2 * C.PTR_SIZEOF);
+			long /*int*/ greBuffer = C.malloc (length);
+			long /*int*/ propertiesPtr = C.malloc (2 * C.PTR_SIZEOF);
 			int rc = XPCOMInit.GRE_GetGREPathWithProperties (range, 1, propertiesPtr, 0, greBuffer, length);
 
 			/*
@@ -264,7 +264,7 @@
 						if (Device.DEBUG) System.out.println ("cannot use detected XULRunner: " + mozillaPath); //$NON-NLS-1$
 
 						/* attempt to XPCOMGlueStartup the GRE pointed at by MOZILLA_FIVE_HOME */
-						int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
+						long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
 						if (ptr == 0) {
 							IsXULRunner = false;
 						} else {
@@ -328,7 +328,7 @@
 			}
 
 			/* attempt to use the GRE pointed at by MOZILLA_FIVE_HOME */
-			int /*long*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
+			long /*int*/ ptr = C.getenv (MozillaDelegate.wcsToMbcs (null, XPCOM.MOZILLA_FIVE_HOME, true));
 			if (ptr != 0) {
 				int length = C.strlen (ptr);
 				byte[] buffer = new byte[length];
@@ -373,7 +373,7 @@
 		}
 
 		if (!Initialized) {
-			int /*long*/[] retVal = new int /*long*/[1];
+			long /*int*/[] retVal = new long /*int*/[1];
 			nsEmbedString pathString = new nsEmbedString (mozillaPath);
 			int rc = XPCOM.NS_NewLocalFile (pathString.getAddress (), 1, retVal);
 			pathString.dispose ();
@@ -547,14 +547,14 @@
 
 			nsIFile profileDir = new nsIFile (result[0]);
 			result[0] = 0;
-			int /*long*/ path = XPCOM.nsEmbedCString_new ();
+			long /*int*/ path = XPCOM.nsEmbedCString_new ();
 			rc = profileDir.GetNativePath (path);
 			if (rc != XPCOM.NS_OK) {
 				browser.dispose ();
 				error (rc);
 			}
 			int length = XPCOM.nsEmbedCString_Length (path);
-			int /*long*/ ptr = XPCOM.nsEmbedCString_get (path);
+			long /*int*/ ptr = XPCOM.nsEmbedCString_get (path);
 			buffer = new byte [length];
 			XPCOM.memmove (buffer, ptr, length);
 			String profilePath = new String (MozillaDelegate.mbcsToWcs (null, buffer)) + PROFILE_DIR;
@@ -936,7 +936,7 @@
 			public void handleEvent (Event event) {
 				if (BrowserCount > 0) return; /* another display is still active */
 
-				int /*long*/[] result = new int /*long*/[1];
+				long /*int*/[] result = new long /*int*/[1];
 				int rc = XPCOM.NS_GetServiceManager (result);
 				if (rc != XPCOM.NS_OK) error (rc);
 				if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1266,7 +1266,7 @@
 public boolean back () {
 	if (awaitingNavigate) return false;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1280,115 +1280,115 @@
 void createCOMInterfaces () {
 	// Create each of the interfaces that this object implements
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	weakReference = new XPCOMObject (new int[] {2, 0, 0, 2}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return QueryReferent (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return QueryReferent (args[0], args[1]);}
 	};
 
 	webProgressListener = new XPCOMObject (new int[] {2, 0, 0, 4, 6, 3, 4, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStateChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnProgressChange (args[0], args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4], (int)/*64*/args[5]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return OnLocationChange (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return OnStatusChange (args[0], args[1], (int)/*64*/args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return OnSecurityChange (args[0], args[1], (int)/*64*/args[2]);}
 	};
 	
 	webBrowserChrome = new XPCOMObject (new int[] {2, 0, 0, 2, 1, 1, 1, 1, 0, 2, 0, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return SetStatus ((int)/*64*/args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetWebBrowser (args[0]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return SetWebBrowser (args[0]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetChromeFlags (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetChromeFlags ((int)/*64*/args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return DestroyBrowserWindow ();}
-		public int /*long*/ method9 (int /*long*/[] args) {return SizeBrowserTo ((int)/*64*/args[0], (int)/*64*/args[1]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return ShowAsModal ();}
-		public int /*long*/ method11 (int /*long*/[] args) {return IsWindowModal (args[0]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return ExitModalEventLoop ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return SetStatus ((int)/*64*/args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetWebBrowser (args[0]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return SetWebBrowser (args[0]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetChromeFlags (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetChromeFlags ((int)/*64*/args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return DestroyBrowserWindow ();}
+		public long /*int*/ method9 (long /*int*/[] args) {return SizeBrowserTo ((int)/*64*/args[0], (int)/*64*/args[1]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return ShowAsModal ();}
+		public long /*int*/ method11 (long /*int*/[] args) {return IsWindowModal (args[0]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return ExitModalEventLoop ((int)/*64*/args[0]);}
 	};
 	
 	webBrowserChromeFocus = new XPCOMObject (new int[] {2, 0, 0, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return FocusNextElement ();}
-		public int /*long*/ method4 (int /*long*/[] args) {return FocusPrevElement ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return FocusNextElement ();}
+		public long /*int*/ method4 (long /*int*/[] args) {return FocusPrevElement ();}
 	};
 		
 	embeddingSiteWindow = new XPCOMObject (new int[] {2, 0, 0, 5, 5, 0, 1, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return SetDimensions ((int)/*64*/args[0], (int)/*64*/args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetDimensions ((int)/*64*/args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return SetFocus ();}
-		public int /*long*/ method6 (int /*long*/[] args) {return GetVisibility (args[0]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return SetVisibility ((int)/*64*/args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return GetTitle (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return SetTitle (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return GetSiteWindow (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return SetDimensions ((int)/*64*/args[0], (int)/*64*/args[1], (int)/*64*/args[2], (int)/*64*/args[3], (int)/*64*/args[4]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetDimensions ((int)/*64*/args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return SetFocus ();}
+		public long /*int*/ method6 (long /*int*/[] args) {return GetVisibility (args[0]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return SetVisibility ((int)/*64*/args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return GetTitle (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return SetTitle (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return GetSiteWindow (args[0]);}
 	};
 	
 	interfaceRequestor = new XPCOMObject (new int[] {2, 0, 0, 2} ){
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return GetInterface (args[0], args[1]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return GetInterface (args[0], args[1]);}
 	};
 		
 	supportsWeakReference = new XPCOMObject (new int[] {2, 0, 0, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return GetWeakReference (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return GetWeakReference (args[0]);}
 	};
 	
 	contextMenuListener = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnShowContextMenu ((int)/*64*/args[0], args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnShowContextMenu ((int)/*64*/args[0], args[1], args[2]);}
 	};
 	
 	uriContentListener = new XPCOMObject (new int[] {2, 0, 0, 2, 5, 3, 4, 1, 1, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnStartURIOpen (args[0], args[1]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return DoContent (args[0], (int)/*64*/args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return IsPreferred (args[0], args[1], args[2]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return CanHandleContent (args[0], (int)/*64*/args[1], args[2], args[3]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return GetLoadCookie (args[0]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return SetLoadCookie (args[0]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return GetParentContentListener (args[0]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return SetParentContentListener (args[0]);}		
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnStartURIOpen (args[0], args[1]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return DoContent (args[0], (int)/*64*/args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return IsPreferred (args[0], args[1], args[2]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return CanHandleContent (args[0], (int)/*64*/args[1], args[2], args[3]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return GetLoadCookie (args[0]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return SetLoadCookie (args[0]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return GetParentContentListener (args[0]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return SetParentContentListener (args[0]);}		
 	};
 	
 	tooltipListener = new XPCOMObject (new int[] {2, 0, 0, 3, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return OnShowTooltip ((int)/*64*/args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return OnHideTooltip ();}		
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return OnShowTooltip ((int)/*64*/args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return OnHideTooltip ();}		
 	};
 
 	domEventListener = new XPCOMObject (new int[] {2, 0, 0, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return HandleEvent (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return HandleEvent (args[0]);}
 	};
 }
 
@@ -1447,7 +1447,7 @@
 	if (awaitingNavigate) return false;
 
 	String url = PREFIX_JAVASCRIPT + script + ";void(0);";	//$NON-NLS-1$
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1461,14 +1461,14 @@
 	return rc == XPCOM.NS_OK;
 }
 
-static Browser findBrowser (int /*long*/ handle) {
+static Browser findBrowser (long /*int*/ handle) {
 	return MozillaDelegate.findBrowser (handle);
 }
 
 public boolean forward () {
 	if (awaitingNavigate) return false;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1483,7 +1483,7 @@
 public String getText () {
 	if (awaitingNavigate) return ""; //$NON-NLS-1$
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.GetContentDOMWindow (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1495,7 +1495,7 @@
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
 	window.Release ();
 
-	int /*long*/ document = result[0];
+	long /*int*/ document = result[0];
 	result[0] = 0;
 	rc = XPCOM.NS_GetComponentManager (result);
 	if (rc != XPCOM.NS_OK) error (rc);
@@ -1512,12 +1512,12 @@
 
 		nsIDOMSerializer_1_7 serializer = new nsIDOMSerializer_1_7 (result[0]);
 		result[0] = 0;
-		int /*long*/ string = XPCOM.nsEmbedString_new ();
+		long /*int*/ string = XPCOM.nsEmbedString_new ();
 		rc = serializer.SerializeToString (document, string);
 		serializer.Release ();
 
 		int length = XPCOM.nsEmbedString_Length (string);
-		int /*long*/ buffer = XPCOM.nsEmbedString_get (string);
+		long /*int*/ buffer = XPCOM.nsEmbedString_get (string);
 		chars = new char[length];
 		XPCOM.memmove (chars, buffer, length * 2);
 		XPCOM.nsEmbedString_delete (string);
@@ -1544,13 +1544,13 @@
 public String getUrl () {
 	if (awaitingNavigate) return ""; //$NON-NLS-1$
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
 
 	nsIWebNavigation webNavigation = new nsIWebNavigation (result[0]);
-	int /*long*/[] aCurrentURI = new int /*long*/[1];
+	long /*int*/[] aCurrentURI = new long /*int*/[1];
 	rc = webNavigation.GetCurrentURI (aCurrentURI);
 	if (rc != XPCOM.NS_OK) error (rc);
 	webNavigation.Release ();
@@ -1558,11 +1558,11 @@
 	byte[] dest = null;
 	if (aCurrentURI[0] != 0) {
 		nsIURI uri = new nsIURI (aCurrentURI[0]);
-		int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+		long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 		rc = uri.GetSpec (aSpec);
 		if (rc != XPCOM.NS_OK) error (rc);
 		int length = XPCOM.nsEmbedCString_Length (aSpec);
-		int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+		long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 		dest = new byte[length];
 		XPCOM.memmove (dest, buffer, length);
 		XPCOM.nsEmbedCString_delete (aSpec);
@@ -1607,7 +1607,7 @@
 public boolean isBackEnabled () {
 	if (awaitingNavigate) return false;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1622,7 +1622,7 @@
 public boolean isForwardEnabled () {
 	if (awaitingNavigate) return false;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1662,7 +1662,7 @@
 		listener = null;
 	}
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1696,7 +1696,7 @@
 }
 
 void Activate () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebBrowserFocus.NS_IWEBBROWSERFOCUS_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1708,7 +1708,7 @@
 }
 	
 void Deactivate () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebBrowserFocus.NS_IWEBBROWSERFOCUS_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1724,7 +1724,7 @@
 	int width = Math.max (1, rect.width);
 	int height = Math.max (1, rect.height);
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1739,7 +1739,7 @@
 public void refresh () {
 	if (awaitingNavigate) return;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error(rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1792,11 +1792,11 @@
 	awaitingNavigate = false;
 
 	byte[] contentTypeBuffer = MozillaDelegate.wcsToMbcs (null, "text/html", true); // $NON-NLS-1$
-	int /*long*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
+	long /*int*/ aContentType = XPCOM.nsEmbedCString_new (contentTypeBuffer, contentTypeBuffer.length);
 	byte[] contentCharsetBuffer = MozillaDelegate.wcsToMbcs (null, "UTF-8", true);	//$NON-NLS-1$
-	int /*long*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);
+	long /*int*/ aContentCharset = XPCOM.nsEmbedCString_new (contentCharsetBuffer, contentCharsetBuffer.length);
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1816,7 +1816,7 @@
 	* is about:blank.  The fix is to specify the file protocol.
 	*/
 	byte[] aString = MozillaDelegate.wcsToMbcs (null, URI_FROMMEMORY, false);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new (aString, aString.length);
 	rc = ioService.NewURI (aSpec, null, 0, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -1879,7 +1879,7 @@
 public boolean setUrl (String url) {
 	awaitingNavigate = false;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1895,7 +1895,7 @@
 public void stop () {
 	if (awaitingNavigate) return;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIWebNavigation.NS_IWEBNAVIGATION_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -1954,7 +1954,7 @@
 }
 
 void unhookDOMListeners () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.GetContentDOMWindow (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2045,68 +2045,68 @@
 
 /* nsISupports */
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWeakReference.NS_IWEAKREFERENCE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebProgressListener.NS_IWEBPROGRESSLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webProgressListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebBrowserChrome.NS_IWEBBROWSERCHROME_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChrome.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWebBrowserChromeFocus.NS_IWEBBROWSERCHROMEFOCUS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {webBrowserChromeFocus.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIEmbeddingSiteWindow.NS_IEMBEDDINGSITEWINDOW_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {embeddingSiteWindow.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIInterfaceRequestor.NS_IINTERFACEREQUESTOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {interfaceRequestor.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsISupportsWeakReference.NS_ISUPPORTSWEAKREFERENCE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supportsWeakReference.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIContextMenuListener.NS_ICONTEXTMENULISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {contextMenuListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIURIContentListener.NS_IURICONTENTLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {uriContentListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsITooltipListener.NS_ITOOLTIPLISTENER_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {tooltipListener.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -2123,18 +2123,18 @@
 
 /* nsIWeakReference */	
 	
-int QueryReferent (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryReferent (long /*int*/ riid, long /*int*/ ppvObject) {
 	return QueryInterface (riid, ppvObject);
 }
 
 /* nsIInterfaceRequestor */
 
-int GetInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int GetInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	if (guid.Equals (nsIDOMWindow.NS_IDOMWINDOW_IID)) {
-		int /*long*/[] aContentDOMWindow = new int /*long*/[1];
+		long /*int*/[] aContentDOMWindow = new long /*int*/[1];
 		int rc = webBrowser.GetContentDOMWindow (aContentDOMWindow);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (aContentDOMWindow[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2144,15 +2144,15 @@
 	return QueryInterface (riid, ppvObject);
 }
 
-int GetWeakReference (int /*long*/ ppvObject) {
-	XPCOM.memmove (ppvObject, new int /*long*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
+int GetWeakReference (long /*int*/ ppvObject) {
+	XPCOM.memmove (ppvObject, new long /*int*/[] {weakReference.getAddress ()}, C.PTR_SIZEOF);
 	AddRef ();
 	return XPCOM.NS_OK;
 }
 
 /* nsIWebProgressListener */
 
-int OnStateChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+int OnStateChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 	if ((aStateFlags & nsIWebProgressListener.STATE_IS_DOCUMENT) == 0) return XPCOM.NS_OK;
 	if ((aStateFlags & nsIWebProgressListener.STATE_START) != 0) {
 		if (request == 0) request = aRequest;
@@ -2164,7 +2164,7 @@
 			 * process.  These listeners cannot be added yet because the
 			 * nsIDOMWindow is not ready to take them at this stage.
 			 */
-			int /*long*/[] result = new int /*long*/[1];
+			long /*int*/[] result = new long /*int*/[1];
 			nsIWebProgress progress = new nsIWebProgress (aWebProgress);
 			int rc = progress.GetDOMWindow (result);
 			if (rc != XPCOM.NS_OK) error (rc);
@@ -2181,7 +2181,7 @@
 		* received for every window in a page, which is when these listeners
 		* are typically added.
 		*/
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsIWebProgress progress = new nsIWebProgress (aWebProgress);
 		int rc = progress.GetDOMWindow (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -2249,7 +2249,7 @@
 		* Hook DOM listeners to the page's nsIDOMWindow here because this is
 		* the earliest opportunity to do so.    
 		*/
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		nsIWebProgress progress = new nsIWebProgress (aWebProgress);
 		int rc = progress.GetDOMWindow (result);
 		if (rc != XPCOM.NS_OK) error (rc);
@@ -2288,7 +2288,7 @@
 	return XPCOM.NS_OK;
 }
 
-int OnProgressChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+int OnProgressChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 	if (awaitingNavigate || progressListeners.length == 0) return XPCOM.NS_OK;
 	ProgressEvent event = new ProgressEvent (browser);
 	event.display = browser.getDisplay ();
@@ -2301,7 +2301,7 @@
 	return XPCOM.NS_OK;
 }
 
-int OnLocationChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ aLocation) {
+int OnLocationChange (long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ aLocation) {
 	/*
 	* Feature in Mozilla.  When a page is loaded via setText before a previous
 	* setText page load has completed, the expected OnStateChange STATE_STOP for the
@@ -2316,13 +2316,13 @@
 	if (awaitingNavigate || locationListeners.length == 0) return XPCOM.NS_OK;
 
 	nsIWebProgress webProgress = new nsIWebProgress (aWebProgress);
-	int /*long*/[] aDOMWindow = new int /*long*/[1];
+	long /*int*/[] aDOMWindow = new long /*int*/[1];
 	int rc = webProgress.GetDOMWindow (aDOMWindow);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (aDOMWindow[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
 	
 	nsIDOMWindow domWindow = new nsIDOMWindow (aDOMWindow[0]);
-	int /*long*/[] aTop = new int /*long*/[1];
+	long /*int*/[] aTop = new long /*int*/[1];
 	rc = domWindow.GetTop (aTop);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (aTop[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2332,10 +2332,10 @@
 	topWindow.Release ();
 	
 	nsIURI location = new nsIURI (aLocation);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	location.GetSpec (aSpec);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
 	XPCOM.nsEmbedCString_delete (aSpec);
@@ -2365,7 +2365,7 @@
 	return XPCOM.NS_OK;
 }
 
-int OnStatusChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, int /*long*/ aMessage) {
+int OnStatusChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, long /*int*/ aMessage) {
 	if (awaitingNavigate || statusTextListeners.length == 0) return XPCOM.NS_OK;
 	StatusTextEvent event = new StatusTextEvent (browser);
 	event.display = browser.getDisplay ();
@@ -2380,13 +2380,13 @@
 	return XPCOM.NS_OK;
 }		
 
-int OnSecurityChange (int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+int OnSecurityChange (long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 	return XPCOM.NS_OK;
 }
 
 /* nsIWebBrowserChrome */
 
-int SetStatus (int statusType, int /*long*/ status) {
+int SetStatus (int statusType, long /*int*/ status) {
 	if (awaitingNavigate || statusTextListeners.length == 0) return XPCOM.NS_OK;
 	StatusTextEvent event = new StatusTextEvent (browser);
 	event.display = browser.getDisplay ();
@@ -2402,8 +2402,8 @@
 	return XPCOM.NS_OK;
 }
 
-int GetWebBrowser (int /*long*/ aWebBrowser) {
-	int /*long*/[] ret = new int /*long*/[1];	
+int GetWebBrowser (long /*int*/ aWebBrowser) {
+	long /*int*/[] ret = new long /*int*/[1];	
 	if (webBrowser != null) {
 		webBrowser.AddRef ();
 		ret[0] = webBrowser.getAddress ();	
@@ -2412,13 +2412,13 @@
 	return XPCOM.NS_OK;
 }
 
-int SetWebBrowser (int /*long*/ aWebBrowser) {
+int SetWebBrowser (long /*int*/ aWebBrowser) {
 	if (webBrowser != null) webBrowser.Release ();
 	webBrowser = aWebBrowser != 0 ? new nsIWebBrowser (aWebBrowser) : null;  				
 	return XPCOM.NS_OK;
 }
    
-int GetChromeFlags (int /*long*/ aChromeFlags) {
+int GetChromeFlags (long /*int*/ aChromeFlags) {
 	int[] ret = new int[1];
 	ret[0] = chromeFlags;
 	XPCOM.memmove (aChromeFlags, ret, 4); /* PRUint32 */
@@ -2458,7 +2458,7 @@
 }
 
 int ShowAsModal () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2488,7 +2488,7 @@
 	return XPCOM.NS_OK;
 }
 
-int IsWindowModal (int /*long*/ retval) {
+int IsWindowModal (long /*int*/ retval) {
 	int result = (chromeFlags & nsIWebBrowserChrome.CHROME_MODAL) != 0 ? 1 : 0;
 	XPCOM.memmove (retval, new int[] {result}, 4); /* PRBool */
 	return XPCOM.NS_OK;
@@ -2514,7 +2514,7 @@
 	return XPCOM.NS_OK;
 }
 
-int GetDimensions (int flags, int /*long*/ x, int /*long*/ y, int /*long*/ cx, int /*long*/ cy) {
+int GetDimensions (int flags, long /*int*/ x, long /*int*/ y, long /*int*/ cx, long /*int*/ cy) {
 	if ((flags & nsIEmbeddingSiteWindow.DIM_FLAGS_POSITION) != 0) {
 		Point location = browser.getShell ().getLocation ();
 		if (x != 0) C.memmove (x, new int[] {location.x}, 4); /* PRInt32 */
@@ -2534,7 +2534,7 @@
 }
 
 int SetFocus () {
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -2552,7 +2552,7 @@
 	return XPCOM.NS_OK;     	
 }	
 
-int GetVisibility (int /*long*/ aVisibility) {
+int GetVisibility (long /*int*/ aVisibility) {
 	boolean visible = browser.isVisible () && !browser.getShell ().getMinimized ();
 	XPCOM.memmove (aVisibility, new int[] {visible ? 1 : 0}, 4); /* PRBool */
 	return XPCOM.NS_OK;
@@ -2595,11 +2595,11 @@
 	return XPCOM.NS_OK;     	
 }
 
-int GetTitle (int /*long*/ aTitle) {
+int GetTitle (long /*int*/ aTitle) {
 	return XPCOM.NS_OK;     	
 }
  
-int SetTitle (int /*long*/ aTitle) {
+int SetTitle (long /*int*/ aTitle) {
 	if (awaitingNavigate || titleListeners.length == 0) return XPCOM.NS_OK;
 	TitleEvent event = new TitleEvent (browser);
 	event.display = browser.getDisplay ();
@@ -2623,7 +2623,7 @@
 	return XPCOM.NS_OK;     	
 }
 
-int GetSiteWindow (int /*long*/ aSiteWindow) {
+int GetSiteWindow (long /*int*/ aSiteWindow) {
 	/*
 	* Note.  The handle is expected to be an HWND on Windows and
 	* a GtkWidget* on GTK.  This callback is invoked on Windows
@@ -2631,7 +2631,7 @@
 	* dialog comes up. If no handle is returned, the print dialog
 	* does not come up on this platform.  
 	*/
-	XPCOM.memmove (aSiteWindow, new int /*long*/[] {embedHandle}, C.PTR_SIZEOF);
+	XPCOM.memmove (aSiteWindow, new long /*int*/[] {embedHandle}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;     	
 }  
  
@@ -2671,11 +2671,11 @@
 
 /* nsIContextMenuListener */
 
-int OnShowContextMenu (int aContextFlags, int /*long*/ aEvent, int /*long*/ aNode) {
+int OnShowContextMenu (int aContextFlags, long /*int*/ aEvent, long /*int*/ aNode) {
 	if (awaitingNavigate) return XPCOM.NS_OK;
 
 	nsIDOMEvent domEvent = new nsIDOMEvent (aEvent);
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = domEvent.QueryInterface (nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2705,16 +2705,16 @@
 
 /* nsIURIContentListener */
 
-int OnStartURIOpen (int /*long*/ aURI, int /*long*/ retval) {
+int OnStartURIOpen (long /*int*/ aURI, long /*int*/ retval) {
 	if (awaitingNavigate || locationListeners.length == 0) {
 		XPCOM.memmove (retval, new int[] {0}, 4); /* PRBool */
 		return XPCOM.NS_OK;
 	}
 	nsIURI location = new nsIURI (aURI);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	location.GetSpec (aSpec);
 	int length = XPCOM.nsEmbedCString_Length (aSpec);
-	int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+	long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 	buffer = XPCOM.nsEmbedCString_get (aSpec);
 	byte[] dest = new byte[length];
 	XPCOM.memmove (dest, buffer, length);
@@ -2747,11 +2747,11 @@
 	return XPCOM.NS_OK;
 }
 
-int DoContent (int /*long*/ aContentType, int aIsContentPreferred, int /*long*/ aRequest, int /*long*/ aContentHandler, int /*long*/ retval) {
+int DoContent (long /*int*/ aContentType, int aIsContentPreferred, long /*int*/ aRequest, long /*int*/ aContentHandler, long /*int*/ retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int IsPreferred (int /*long*/ aContentType, int /*long*/ aDesiredContentType, int /*long*/ retval) {
+int IsPreferred (long /*int*/ aContentType, long /*int*/ aDesiredContentType, long /*int*/ retval) {
 	boolean preferred = false;
 	int size = XPCOM.strlen (aContentType);
 	if (size > 0) {
@@ -2762,7 +2762,7 @@
 		/* do not attempt to handle known problematic content types */
 		if (!contentType.equals (XPCOM.CONTENT_MAYBETEXT) && !contentType.equals (XPCOM.CONTENT_MULTIPART)) {
 			/* determine whether browser can handle the content type */
-			int /*long*/[] result = new int /*long*/[1];
+			long /*int*/[] result = new long /*int*/[1];
 			int rc = XPCOM.NS_GetServiceManager (result);
 			if (rc != XPCOM.NS_OK) error (rc);
 			if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2774,7 +2774,7 @@
 			rc = serviceManager.GetServiceByContractID (aContractID, nsIWebNavigationInfo.NS_IWEBNAVIGATIONINFO_IID, result);
 			if (rc == XPCOM.NS_OK) {
 				byte[] bytes = MozillaDelegate.wcsToMbcs (null, contentType, true);
-				int /*long*/ typePtr = XPCOM.nsEmbedCString_new (bytes, bytes.length);
+				long /*int*/ typePtr = XPCOM.nsEmbedCString_new (bytes, bytes.length);
 				nsIWebNavigationInfo info = new nsIWebNavigationInfo (result[0]);
 				result[0] = 0;
 				int[] isSupportedResult = new int[1]; /* PRUint32 */
@@ -2804,34 +2804,34 @@
 
 	XPCOM.memmove(retval, new int[] {preferred ? 1 : 0}, 4); /* PRBool */
 	if (preferred) {
-		XPCOM.memmove (aDesiredContentType, new int /*long*/[] {0}, C.PTR_SIZEOF);
+		XPCOM.memmove (aDesiredContentType, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	}
 	return XPCOM.NS_OK;
 }
 
-int CanHandleContent (int /*long*/ aContentType, int aIsContentPreferred, int /*long*/ aDesiredContentType, int /*long*/ retval) {
+int CanHandleContent (long /*int*/ aContentType, int aIsContentPreferred, long /*int*/ aDesiredContentType, long /*int*/ retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetLoadCookie (int /*long*/ aLoadCookie) {
+int GetLoadCookie (long /*int*/ aLoadCookie) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int SetLoadCookie (int /*long*/ aLoadCookie) {
+int SetLoadCookie (long /*int*/ aLoadCookie) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int GetParentContentListener (int /*long*/ aParentContentListener) {
+int GetParentContentListener (long /*int*/ aParentContentListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 	
-int SetParentContentListener (int /*long*/ aParentContentListener) {
+int SetParentContentListener (long /*int*/ aParentContentListener) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
 /* nsITooltipListener */
 
-int OnShowTooltip (int aXCoords, int aYCoords, int /*long*/ aTipText) {
+int OnShowTooltip (int aXCoords, int aYCoords, long /*int*/ aTipText) {
 	if (awaitingNavigate) return XPCOM.NS_OK;
 
 	int length = XPCOM.strlen_PRUnichar (aTipText);
@@ -2871,21 +2871,21 @@
 
 /* nsIDOMEventListener */
 
-int HandleEvent (int /*long*/ event) {
+int HandleEvent (long /*int*/ event) {
 	nsIDOMEvent domEvent = new nsIDOMEvent (event);
 
-	int /*long*/ type = XPCOM.nsEmbedString_new ();
+	long /*int*/ type = XPCOM.nsEmbedString_new ();
 	int rc = domEvent.GetType (type);
 	if (rc != XPCOM.NS_OK) error (rc);
 	int length = XPCOM.nsEmbedString_Length (type);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (type);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (type);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	String typeString = new String (chars);
 	XPCOM.nsEmbedString_delete (type);
 
 	if (XPCOM.DOMEVENT_UNLOAD.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.GetCurrentTarget (result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -2902,7 +2902,7 @@
 	}
 
 	if (XPCOM.DOMEVENT_KEYDOWN.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3010,7 +3010,7 @@
 			case SWT.SCROLL_LOCK: return XPCOM.NS_OK;
 		}
 
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3060,7 +3060,7 @@
 	}
 
 	if (XPCOM.DOMEVENT_KEYUP.equals (typeString)) {
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = domEvent.QueryInterface (nsIDOMKeyEvent.NS_IDOMKEYEVENT_IID, result);
 		if (rc != XPCOM.NS_OK) error (rc);
 		if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
@@ -3117,7 +3117,7 @@
 
 	/* mouse event */
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	rc = domEvent.QueryInterface (nsIDOMMouseEvent.NS_IDOMMOUSEEVENT_IID, result);
 	if (rc != XPCOM.NS_OK) error (rc);
 	if (result[0] == 0) error (XPCOM.NS_NOINTERFACE);
diff -ur x86/org/eclipse/swt/browser/PromptService2Factory.java x86_64/org/eclipse/swt/browser/PromptService2Factory.java
--- x86/org/eclipse/swt/browser/PromptService2Factory.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/PromptService2Factory.java	2009-02-11 17:43:48.000000000 -0500
@@ -30,17 +30,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	factory = new XPCOMObject (new int[] {2, 0, 0, 3, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return LockFactory ((int)/*64*/args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateInstance (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return LockFactory ((int)/*64*/args[0]);}
 	};
 }
 
@@ -55,27 +55,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return factory.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIFactory.NS_IFACTORY_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {factory.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -87,10 +87,10 @@
 	
 /* nsIFactory */
 
-int CreateInstance (int /*long*/ aOuter, int /*long*/ iid, int /*long*/ result) {
+int CreateInstance (long /*int*/ aOuter, long /*int*/ iid, long /*int*/ result) {
 	PromptService2 promptService = new PromptService2 ();
 	promptService.AddRef ();
-	XPCOM.memmove (result, new int /*long*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
+	XPCOM.memmove (result, new long /*int*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
 	return XPCOM.NS_OK;
 }
 
diff -ur x86/org/eclipse/swt/browser/PromptService2.java x86_64/org/eclipse/swt/browser/PromptService2.java
--- x86/org/eclipse/swt/browser/PromptService2.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/PromptService2.java	2009-02-11 17:43:48.000000000 -0500
@@ -33,41 +33,41 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 	
 	promptService = new XPCOMObject (new int[] {2, 0, 0, 3, 5, 4, 6, 10, 7, 8, 7, 7}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Alert (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Alert (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
 	};
 	
 	promptService2 = new XPCOMObject (new int[] {2, 0, 0, 3, 5, 4, 6, 10, 7, 8, 7, 7, 7, 9}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return Alert (args[0], args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
-		public int /*long*/ method5 (int /*long*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
-		public int /*long*/ method6 (int /*long*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
-		public int /*long*/ method7 (int /*long*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
-		public int /*long*/ method8 (int /*long*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method9 (int /*long*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
-		public int /*long*/ method10 (int /*long*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method11 (int /*long*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method12 (int /*long*/[] args) {return PromptAuth (args[0], args[1], (int)/*64*/args[2], args[3], args[4], args[5], args[6]);}
-		public int /*long*/ method13 (int /*long*/[] args) {return AsyncPromptAuth (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5], args[6], args[7], args[8]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return Alert (args[0], args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return AlertCheck (args[0], args[1], args[2], args[3], args[4]);}
+		public long /*int*/ method5 (long /*int*/[] args) {return Confirm (args[0], args[1], args[2], args[3]);}
+		public long /*int*/ method6 (long /*int*/[] args) {return ConfirmCheck (args[0], args[1], args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method7 (long /*int*/[] args) {return ConfirmEx (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6], args[7], args[8], args[9]);}
+		public long /*int*/ method8 (long /*int*/[] args) {return Prompt (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method9 (long /*int*/[] args) {return PromptUsernameAndPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6], args[7]);}
+		public long /*int*/ method10 (long /*int*/[] args) {return PromptPassword (args[0], args[1], args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method11 (long /*int*/[] args) {return Select (args[0], args[1], args[2], (int)/*64*/args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method12 (long /*int*/[] args) {return PromptAuth (args[0], args[1], (int)/*64*/args[2], args[3], args[4], args[5], args[6]);}
+		public long /*int*/ method13 (long /*int*/[] args) {return AsyncPromptAuth (args[0], args[1], args[2], args[3], (int)/*64*/args[4], args[5], args[6], args[7], args[8]);}
 	};
 }
 
@@ -86,32 +86,32 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return promptService2.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIPromptService.NS_IPROMPTSERVICE_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {promptService.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIPromptService2.NS_IPROMPTSERVICE2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {promptService2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {promptService2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -121,10 +121,10 @@
 	return refCount;
 }
 
-Browser getBrowser (int /*long*/ aDOMWindow) {
+Browser getBrowser (long /*int*/ aDOMWindow) {
 	if (aDOMWindow == 0) return null;
 
-	int /*long*/[] result = new int /*long*/[1];
+	long /*int*/[] result = new long /*int*/[1];
 	int rc = XPCOM.NS_GetServiceManager (result);
 	if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 	if (result[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
@@ -168,7 +168,7 @@
 	return Mozilla.findBrowser (result[0]); 
 }
 
-String getLabel (int buttonFlag, int index, int /*long*/ buttonTitle) {
+String getLabel (int buttonFlag, int index, long /*int*/ buttonTitle) {
 	String label = null;
 	int flag = (buttonFlag & (0xff * index)) / index;
 	switch (flag) {
@@ -189,7 +189,7 @@
 
 /* nsIPromptService */
 
-int Alert (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText) {
+int Alert (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -210,7 +210,7 @@
 	return XPCOM.NS_OK;
 }
 
-int AlertCheck (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aCheckMsg, int /*long*/ aCheckState) {
+int AlertCheck (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aCheckMsg, long /*int*/ aCheckState) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -237,11 +237,11 @@
 	return XPCOM.NS_OK;
 }
 
-int AsyncPromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int /*long*/ aCallback, int /*long*/ aContext, int level, int /*long*/ authInfo, int /*long*/ checkboxLabel, int /*long*/ checkValue, int /*long*/ _retval) {
+int AsyncPromptAuth(long /*int*/ aParent, long /*int*/ aChannel, long /*int*/ aCallback, long /*int*/ aContext, int level, long /*int*/ authInfo, long /*int*/ checkboxLabel, long /*int*/ checkValue, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Confirm (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ _retval) {
+int Confirm (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -264,11 +264,11 @@
 	return XPCOM.NS_OK;
 }
 
-int ConfirmCheck (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int ConfirmCheck (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int ConfirmEx (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int aButtonFlags, int /*long*/ aButton0Title, int /*long*/ aButton1Title, int /*long*/ aButton2Title, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int ConfirmEx (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, int aButtonFlags, long /*int*/ aButton0Title, long /*int*/ aButton1Title, long /*int*/ aButton2Title, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	
 	int length = XPCOM.strlen_PRUnichar (aDialogTitle);
@@ -310,7 +310,7 @@
 	return XPCOM.NS_OK;
 }
 
-int Prompt (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aValue, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int Prompt (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aValue, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	String titleLabel = null, textLabel, checkLabel = null;
 	String[] valueLabel = new String[1];
@@ -328,7 +328,7 @@
 	XPCOM.memmove (dest, aText, length * 2);
 	textLabel = new String (dest);
 	
-	int /*long*/[] valueAddr = new int /*long*/[1];
+	long /*int*/[] valueAddr = new long /*int*/[1];
 	XPCOM.memmove (valueAddr, aValue, C.PTR_SIZEOF);
 	if (valueAddr[0] != 0) {
 		length = XPCOM.strlen_PRUnichar (valueAddr[0]);
@@ -359,9 +359,9 @@
 		* value that we override must be freed using the nsIMemory service.
 		*/
 		int cnt, size;
-		int /*long*/ ptr;
+		long /*int*/ ptr;
 		char[] buffer;
-		int /*long*/[] result2 = new int /*long*/[1];
+		long /*int*/[] result2 = new long /*int*/[1];
 		if (valueLabel[0] != null) {
 			cnt = valueLabel[0].length ();
 			buffer = new char[cnt + 1];
@@ -369,7 +369,7 @@
 			size = buffer.length * 2;
 			ptr = C.malloc (size);
 			XPCOM.memmove (ptr, buffer, size);
-			XPCOM.memmove (aValue, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+			XPCOM.memmove (aValue, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 
 			if (valueAddr[0] != 0) {
 				int rc = XPCOM.NS_GetServiceManager (result2);
@@ -395,7 +395,7 @@
 	return XPCOM.NS_OK;
 }
 
-int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*long*/ authInfo, int /*long*/ checkboxLabel, int /*long*/ checkboxValue, int /*long*/ _retval) {
+int PromptAuth(long /*int*/ aParent, long /*int*/ aChannel, int level, long /*int*/ authInfo, long /*int*/ checkboxLabel, long /*int*/ checkboxValue, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	String checkLabel = null;
 	int[] checkValue = new int[1];
@@ -415,11 +415,11 @@
 
 	nsIAuthInformation auth = new nsIAuthInformation (authInfo);
 
-	int /*long*/ ptr = XPCOM.nsEmbedString_new ();
+	long /*int*/ ptr = XPCOM.nsEmbedString_new ();
 	int rc = auth.GetUsername (ptr);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	int length = XPCOM.nsEmbedString_Length (ptr);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get (ptr);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get (ptr);
 	char[] chars = new char[length];
 	XPCOM.memmove (chars, buffer, length * 2);
 	userLabel[0] = new String (chars);
@@ -448,13 +448,13 @@
 	XPCOM.nsEmbedString_delete (ptr);
 
 	nsIChannel channel = new nsIChannel (aChannel);
-	int /*long*/[] uri = new int /*long*/[1];
+	long /*int*/[] uri = new long /*int*/[1];
 	rc = channel.GetURI (uri);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	if (uri[0] == 0) Mozilla.error (XPCOM.NS_NOINTERFACE);
 
 	nsIURI nsURI = new nsIURI (uri[0]);
-	int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+	long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 	rc = nsURI.GetHost (aSpec);
 	if (rc != XPCOM.NS_OK) SWT.error (rc);
 	length = XPCOM.nsEmbedCString_Length (aSpec);
@@ -495,7 +495,7 @@
 	return XPCOM.NS_OK;
 }
 
-int PromptUsernameAndPassword (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aUsername, int /*long*/ aPassword, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int PromptUsernameAndPassword (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aUsername, long /*int*/ aPassword, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	Browser browser = getBrowser (aParent);
 	String titleLabel, textLabel, checkLabel = null;
 	String[] userLabel = new String[1], passLabel = new String[1];
@@ -515,7 +515,7 @@
 	XPCOM.memmove (dest, aText, length * 2);
 	textLabel = new String (dest);
 	
-	int /*long*/[] userAddr = new int /*long*/[1];
+	long /*int*/[] userAddr = new long /*int*/[1];
 	XPCOM.memmove (userAddr, aUsername, C.PTR_SIZEOF);
 	if (userAddr[0] != 0) {
 		length = XPCOM.strlen_PRUnichar (userAddr[0]);
@@ -524,7 +524,7 @@
 		userLabel[0] = new String (dest);		
 	}
 	
-	int /*long*/[] passAddr = new int /*long*/[1];
+	long /*int*/[] passAddr = new long /*int*/[1];
 	XPCOM.memmove (passAddr, aPassword, C.PTR_SIZEOF);
 	if (passAddr[0] != 0) {
 		length = XPCOM.strlen_PRUnichar (passAddr[0]);
@@ -555,9 +555,9 @@
 		* value that we override must be freed using the nsIMemory service.
 		*/
 		int cnt, size;
-		int /*long*/ ptr;
+		long /*int*/ ptr;
 		char[] buffer;
-		int /*long*/[] result2 = new int /*long*/[1];
+		long /*int*/[] result2 = new long /*int*/[1];
 		if (userLabel[0] != null) {
 			cnt = userLabel[0].length ();
 			buffer = new char[cnt + 1];
@@ -565,7 +565,7 @@
 			size = buffer.length * 2;
 			ptr = C.malloc (size);
 			XPCOM.memmove (ptr, buffer, size);
-			XPCOM.memmove (aUsername, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+			XPCOM.memmove (aUsername, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 
 			if (userAddr[0] != 0) {
 				int rc = XPCOM.NS_GetServiceManager (result2);
@@ -593,7 +593,7 @@
 			size = buffer.length * 2;
 			ptr = C.malloc (size);
 			XPCOM.memmove (ptr, buffer, size);
-			XPCOM.memmove (aPassword, new int /*long*/[] {ptr}, C.PTR_SIZEOF);
+			XPCOM.memmove (aPassword, new long /*int*/[] {ptr}, C.PTR_SIZEOF);
 			
 			if (passAddr[0] != 0) {
 				int rc = XPCOM.NS_GetServiceManager (result2);
@@ -619,11 +619,11 @@
 	return XPCOM.NS_OK;
 }
 
-int PromptPassword (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int /*long*/ aPassword, int /*long*/ aCheckMsg, int /*long*/ aCheckState, int /*long*/ _retval) {
+int PromptPassword (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, long /*int*/ aPassword, long /*int*/ aCheckMsg, long /*int*/ aCheckState, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
-int Select (int /*long*/ aParent, int /*long*/ aDialogTitle, int /*long*/ aText, int aCount, int /*long*/ aSelectList, int /*long*/ aOutSelection, int /*long*/ _retval) {
+int Select (long /*int*/ aParent, long /*int*/ aDialogTitle, long /*int*/ aText, int aCount, long /*int*/ aSelectList, long /*int*/ aOutSelection, long /*int*/ _retval) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 
diff -ur x86/org/eclipse/swt/browser/SimpleEnumerator.java x86_64/org/eclipse/swt/browser/SimpleEnumerator.java
--- x86/org/eclipse/swt/browser/SimpleEnumerator.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/SimpleEnumerator.java	2009-02-11 17:43:48.000000000 -0500
@@ -36,17 +36,17 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	simpleEnumerator = new XPCOMObject (new int[] {2, 0, 0, 1, 1}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return HasMoreElements (args[0]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return GetNext (args[0]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return HasMoreElements (args[0]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return GetNext (args[0]);}
 	};
 }
 
@@ -67,27 +67,27 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return simpleEnumerator.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsISimpleEnumerator.NS_ISIMPLEENUMERATOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {simpleEnumerator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {simpleEnumerator.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
 
@@ -97,17 +97,17 @@
 	return refCount;
 }
 
-int HasMoreElements (int /*long*/ _retval) {
+int HasMoreElements (long /*int*/ _retval) {
 	boolean more = values != null && index < values.length;
 	XPCOM.memmove (_retval, new int[] {more ? 1 : 0}, 4); /*PRBool */
 	return XPCOM.NS_OK;
 }	
 	
-int GetNext (int /*long*/ _retval) {
+int GetNext (long /*int*/ _retval) {
 	if (values == null || index == values.length) return XPCOM.NS_ERROR_UNEXPECTED;
 	nsISupports value = values[index++];
     value.AddRef ();
-    XPCOM.memmove (_retval, new int /*long*/[] {value.getAddress ()}, C.PTR_SIZEOF);
+    XPCOM.memmove (_retval, new long /*int*/[] {value.getAddress ()}, C.PTR_SIZEOF);
     return XPCOM.NS_OK;
 }		
 }
diff -ur x86/org/eclipse/swt/browser/WindowCreator2.java x86_64/org/eclipse/swt/browser/WindowCreator2.java
--- x86/org/eclipse/swt/browser/WindowCreator2.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/browser/WindowCreator2.java	2009-02-11 17:43:48.000000000 -0500
@@ -35,24 +35,24 @@
 void createCOMInterfaces () {
 	/* Create each of the interfaces that this object implements */
 	supports = new XPCOMObject (new int[] {2, 0, 0}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
 	};
 
 	windowCreator = new XPCOMObject (new int[] {2, 0, 0, 3}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
 	};
 
 	windowCreator2 = new XPCOMObject (new int[] {2, 0, 0, 3, 6}) {
-		public int /*long*/ method0 (int /*long*/[] args) {return QueryInterface (args[0], args[1]);}
-		public int /*long*/ method1 (int /*long*/[] args) {return AddRef ();}
-		public int /*long*/ method2 (int /*long*/[] args) {return Release ();}
-		public int /*long*/ method3 (int /*long*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
-		public int /*long*/ method4 (int /*long*/[] args) {return CreateChromeWindow2 (args[0], (int)/*64*/args[1], (int)/*64*/args[2], args[3], args[4], args[5]);}
+		public long /*int*/ method0 (long /*int*/[] args) {return QueryInterface (args[0], args[1]);}
+		public long /*int*/ method1 (long /*int*/[] args) {return AddRef ();}
+		public long /*int*/ method2 (long /*int*/[] args) {return Release ();}
+		public long /*int*/ method3 (long /*int*/[] args) {return CreateChromeWindow (args[0], (int)/*64*/args[1], args[2]);}
+		public long /*int*/ method4 (long /*int*/[] args) {return CreateChromeWindow2 (args[0], (int)/*64*/args[1], (int)/*64*/args[2], args[3], args[4], args[5]);}
 	};
 }
 
@@ -72,32 +72,32 @@
 	}
 }
 
-int /*long*/ getAddress () {
+long /*int*/ getAddress () {
 	return windowCreator.getAddress ();
 }
 
-int QueryInterface (int /*long*/ riid, int /*long*/ ppvObject) {
+int QueryInterface (long /*int*/ riid, long /*int*/ ppvObject) {
 	if (riid == 0 || ppvObject == 0) return XPCOM.NS_ERROR_NO_INTERFACE;
 	nsID guid = new nsID ();
 	XPCOM.memmove (guid, riid, nsID.sizeof);
 	
 	if (guid.Equals (nsISupports.NS_ISUPPORTS_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {supports.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWindowCreator.NS_IWINDOWCREATOR_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {windowCreator.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {windowCreator.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 	if (guid.Equals (nsIWindowCreator2.NS_IWINDOWCREATOR2_IID)) {
-		XPCOM.memmove (ppvObject, new int /*long*/[] {windowCreator2.getAddress ()}, C.PTR_SIZEOF);
+		XPCOM.memmove (ppvObject, new long /*int*/[] {windowCreator2.getAddress ()}, C.PTR_SIZEOF);
 		AddRef ();
 		return XPCOM.NS_OK;
 	}
 
-	XPCOM.memmove (ppvObject, new int /*long*/[] {0}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppvObject, new long /*int*/[] {0}, C.PTR_SIZEOF);
 	return XPCOM.NS_ERROR_NO_INTERFACE;
 }
         	
@@ -109,26 +109,26 @@
 	
 /* nsIWindowCreator */
 
-int CreateChromeWindow (int /*long*/ parent, int chromeFlags, int /*long*/ _retval) {
+int CreateChromeWindow (long /*int*/ parent, int chromeFlags, long /*int*/ _retval) {
 	return CreateChromeWindow2 (parent, chromeFlags, 0, 0, 0, _retval);
 }
 
 /* nsIWindowCreator2 */
 
-int CreateChromeWindow2 (int /*long*/ parent, int chromeFlags, int contextFlags, int /*long*/ uri, int /*long*/ cancel, int /*long*/ _retval) {
+int CreateChromeWindow2 (long /*int*/ parent, int chromeFlags, int contextFlags, long /*int*/ uri, long /*int*/ cancel, long /*int*/ _retval) {
 	if (parent == 0 && (chromeFlags & nsIWebBrowserChrome.CHROME_OPENAS_CHROME) == 0) {
 		return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 	}
 	Browser src = null; 
 	if (parent != 0) {
 		nsIWebBrowserChrome browserChromeParent = new nsIWebBrowserChrome (parent);
-		int /*long*/[] aWebBrowser = new int /*long*/[1];
+		long /*int*/[] aWebBrowser = new long /*int*/[1];
 		int rc = browserChromeParent.GetWebBrowser (aWebBrowser);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (aWebBrowser[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
 
 		nsIWebBrowser webBrowser = new nsIWebBrowser (aWebBrowser[0]);
-		int /*long*/[] result = new int /*long*/[1];
+		long /*int*/[] result = new long /*int*/[1];
 		rc = webBrowser.QueryInterface (nsIBaseWindow.NS_IBASEWINDOW_IID, result);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (result[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -136,7 +136,7 @@
 
 		nsIBaseWindow baseWindow = new nsIBaseWindow (result[0]);
 		result[0] = 0;
-		int /*long*/[] aParentNativeWindow = new int /*long*/[1];
+		long /*int*/[] aParentNativeWindow = new long /*int*/[1];
 		rc = baseWindow.GetParentNativeWindow (aParentNativeWindow);
 		if (rc != XPCOM.NS_OK) Mozilla.error (rc);
 		if (aParentNativeWindow[0] == 0) Mozilla.error (XPCOM.NS_ERROR_NO_INTERFACE);
@@ -178,11 +178,11 @@
 		});
 		if (uri != 0) {
 			nsIURI location = new nsIURI (uri);
-			int /*long*/ aSpec = XPCOM.nsEmbedCString_new ();
+			long /*int*/ aSpec = XPCOM.nsEmbedCString_new ();
 			if (location.GetSpec (aSpec) == XPCOM.NS_OK) {
 				int length = XPCOM.nsEmbedCString_Length (aSpec);
 				if (length > 0) {
-					int /*long*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
+					long /*int*/ buffer = XPCOM.nsEmbedCString_get (aSpec);
 					byte[] dest = new byte[length];
 					XPCOM.memmove (dest, buffer, length);
 					browser.setUrl (new String (dest));
@@ -211,11 +211,11 @@
 	if (doit) {
 		Mozilla mozilla = (Mozilla)browser.webBrowser;
 		mozilla.isChild = true;
-		int /*long*/ chromePtr = mozilla.webBrowserChrome.getAddress ();
+		long /*int*/ chromePtr = mozilla.webBrowserChrome.getAddress ();
 		nsIWebBrowserChrome webBrowserChrome = new nsIWebBrowserChrome (chromePtr);
 		webBrowserChrome.SetChromeFlags (chromeFlags);
 		webBrowserChrome.AddRef ();
-		XPCOM.memmove (_retval, new int /*long*/[] {chromePtr}, C.PTR_SIZEOF);
+		XPCOM.memmove (_retval, new long /*int*/[] {chromePtr}, C.PTR_SIZEOF);
 	} else {
 		if (cancel != 0) {
 			C.memmove (cancel, new int[] {1}, 4);	/* PRBool */
diff -ur x86/org/eclipse/swt/dnd/ByteArrayTransfer.java x86_64/org/eclipse/swt/dnd/ByteArrayTransfer.java
--- x86/org/eclipse/swt/dnd/ByteArrayTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/ByteArrayTransfer.java	2009-02-11 17:43:46.000000000 -0500
@@ -155,7 +155,7 @@
 	}
 	byte[] buffer = (byte[])object;
 	if (buffer.length == 0) return;
-	int /*long*/ pValue = OS.g_malloc(buffer.length);
+	long /*int*/ pValue = OS.g_malloc(buffer.length);
 	if (pValue == 0) return;
 	OS.memmove(pValue, buffer, buffer.length);
 	transferData.length = buffer.length;
diff -ur x86/org/eclipse/swt/dnd/Clipboard.java x86_64/org/eclipse/swt/dnd/Clipboard.java
--- x86/org/eclipse/swt/dnd/Clipboard.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/Clipboard.java	2009-02-11 17:43:46.000000000 -0500
@@ -31,14 +31,14 @@
 
 	private Display display;
 	
-	static int /*long*/ GTKCLIPBOARD;
-	static int /*long*/ GTKPRIMARYCLIPBOARD;
-	private static int /*long*/ TARGET;
+	static long /*int*/ GTKCLIPBOARD;
+	static long /*int*/ GTKPRIMARYCLIPBOARD;
+	private static long /*int*/ TARGET;
 	
 	static {
 		GTKCLIPBOARD = OS.gtk_clipboard_get(OS.GDK_NONE);
 		byte[] buffer = Converter.wcsToMbcs(null, "PRIMARY", true);
-		int /*long*/ primary = OS.gdk_atom_intern(buffer, false);
+		long /*int*/ primary = OS.gdk_atom_intern(buffer, false);
 		GTKPRIMARYCLIPBOARD = OS.gtk_clipboard_get(primary);
 		buffer = Converter.wcsToMbcs(null, "TARGETS", true);
 		TARGET = OS.gdk_atom_intern(buffer, false);
@@ -286,7 +286,7 @@
 public Object getContents(Transfer transfer, int clipboards) {
 	checkWidget();
 	if (transfer == null) DND.error(SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ selection_data = 0;
+	long /*int*/ selection_data = 0;
 	int[] typeIds = transfer.getTypeIds();
 	for (int i = 0; i < typeIds.length; i++) {
 		if ((clipboards & DND.CLIPBOARD) != 0) {
@@ -548,7 +548,7 @@
 	String[] result = new String[types1.length + types2.length];
 	int count = 0;
 	for (int i = 0; i < types1.length; i++) {
-		int /*long*/ pName = OS.gdk_atom_name(types1[i]);
+		long /*int*/ pName = OS.gdk_atom_name(types1[i]);
 		if (pName == 0) {
 			continue;
 		}
@@ -558,7 +558,7 @@
 		result[count++] = "GTKCLIPBOARD "+new String (Converter.mbcsToWcs (null, buffer));
 	}
 	for (int i = 0; i < types2.length; i++) {
-		int /*long*/ pName = OS.gdk_atom_name(types2[i]);
+		long /*int*/ pName = OS.gdk_atom_name(types2[i]);
 		if (pName == 0) {
 			continue;
 		}
@@ -577,7 +577,7 @@
 
 private  int[] getAvailablePrimaryTypes() {
 	int[] types = new int[0];
-	int /*long*/ selection_data = gtk_clipboard_wait_for_contents(GTKPRIMARYCLIPBOARD, TARGET);
+	long /*int*/ selection_data = gtk_clipboard_wait_for_contents(GTKPRIMARYCLIPBOARD, TARGET);
 	if (selection_data != 0) {
 		try {
 			GtkSelectionData gtkSelectionData = new GtkSelectionData();
@@ -594,7 +594,7 @@
 }
 private int[] getAvailableClipboardTypes () {
 	int[] types = new int[0];
-	int /*long*/ selection_data  = gtk_clipboard_wait_for_contents(GTKCLIPBOARD, TARGET);
+	long /*int*/ selection_data  = gtk_clipboard_wait_for_contents(GTKCLIPBOARD, TARGET);
 	if (selection_data != 0) {
 		try {
 			GtkSelectionData gtkSelectionData = new GtkSelectionData();
@@ -610,11 +610,11 @@
 	return types;
 }
 
-int /*long*/ gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target) {
+long /*int*/ gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target) {
 	String key = "org.eclipse.swt.internal.gtk.dispatchEvent";
 	Display display = this.display;
 	display.setData(key, new int[]{OS.GDK_PROPERTY_NOTIFY, OS.GDK_SELECTION_CLEAR, OS.GDK_SELECTION_REQUEST, OS.GDK_SELECTION_NOTIFY});
-	int /*long*/ selection_data = OS.gtk_clipboard_wait_for_contents(clipboard, target);
+	long /*int*/ selection_data = OS.gtk_clipboard_wait_for_contents(clipboard, target);
 	display.setData(key, null);
 	return selection_data;
 }
diff -ur x86/org/eclipse/swt/dnd/ClipboardProxy.java x86_64/org/eclipse/swt/dnd/ClipboardProxy.java
--- x86/org/eclipse/swt/dnd/ClipboardProxy.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/ClipboardProxy.java	2009-02-11 17:43:48.000000000 -0500
@@ -71,7 +71,7 @@
 	}
 }
 
-int /*long*/ clearFunc(int /*long*/ clipboard,int /*long*/ user_data_or_owner){
+long /*int*/ clearFunc(long /*int*/ clipboard,long /*int*/ user_data_or_owner){
 	if (clipboard == Clipboard.GTKCLIPBOARD) {
 		activeClipboard = null;
 		clipboardData = null;
@@ -104,7 +104,7 @@
  * This function provides the data to the clipboard on request.
  * When this clipboard is disposed, the data will no longer be available.
  */
-int /*long*/ getFunc(int /*long*/ clipboard, int /*long*/ selection_data, int /*long*/ info, int /*long*/ user_data_or_owner){
+long /*int*/ getFunc(long /*int*/ clipboard, long /*int*/ selection_data, long /*int*/ info, long /*int*/ user_data_or_owner){
 	if (selection_data == 0) return 0;
 	GtkSelectionData selectionData = new GtkSelectionData();
 	OS.memmove(selectionData, selection_data, GtkSelectionData.sizeof);
@@ -131,7 +131,7 @@
 
 boolean setData(Clipboard owner, Object[] data, Transfer[] dataTypes, int clipboards) {	
 	GtkTargetEntry[] entries = new  GtkTargetEntry [0];
-	int /*long*/ pTargetsList = 0;
+	long /*int*/ pTargetsList = 0;
 	try {
 		for (int i = 0; i < dataTypes.length; i++) {
 			Transfer transfer = dataTypes[i];
@@ -141,7 +141,7 @@
 				GtkTargetEntry	entry = new GtkTargetEntry();						
 				entry.info = typeIds[j];
 				byte[] buffer = Converter.wcsToMbcs(null, typeNames[j], true);
-				int /*long*/ pName = OS.g_malloc(buffer.length);
+				long /*int*/ pName = OS.g_malloc(buffer.length);
 				OS.memmove(pName, buffer, buffer.length);
 				entry.target = pName;
 				GtkTargetEntry[] tmp = new GtkTargetEntry [entries.length + 1];
@@ -161,8 +161,8 @@
 			if (activeClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKCLIPBOARD);
 			clipboardData = data;
 			clipboardDataTypes = dataTypes;
-			int /*long*/ getFuncProc = getFunc.getAddress();
-			int /*long*/ clearFuncProc = clearFunc.getAddress();
+			long /*int*/ getFuncProc = getFunc.getAddress();
+			long /*int*/ clearFuncProc = clearFunc.getAddress();
 			if (!OS.gtk_clipboard_set_with_data(Clipboard.GTKCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {
 				return false;
 			}
@@ -172,8 +172,8 @@
 			if (activePrimaryClipboard != null) OS.gtk_clipboard_clear(Clipboard.GTKPRIMARYCLIPBOARD);
 			primaryClipboardData = data;
 			primaryClipboardDataTypes = dataTypes;
-			int /*long*/ getFuncProc = getFunc.getAddress();
-			int /*long*/ clearFuncProc = clearFunc.getAddress();
+			long /*int*/ getFuncProc = getFunc.getAddress();
+			long /*int*/ clearFuncProc = clearFunc.getAddress();
 			if (!OS.gtk_clipboard_set_with_data(Clipboard.GTKPRIMARYCLIPBOARD, pTargetsList, entries.length, getFuncProc, clearFuncProc, 0)) {
 				return false;
 			}
diff -ur x86/org/eclipse/swt/dnd/DragSource.java x86_64/org/eclipse/swt/dnd/DragSource.java
--- x86/org/eclipse/swt/dnd/DragSource.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/DragSource.java	2009-02-11 17:43:48.000000000 -0500
@@ -105,7 +105,7 @@
 	Transfer[] transferAgents = new Transfer[0];
 	DragSourceEffect dragEffect;
 
-	int /*long*/ targetList;
+	long /*int*/ targetList;
 	
 	//workaround - remember action performed for DragEnd
 	boolean moveData = false;
@@ -206,28 +206,28 @@
 	return style;
 }
 
-static int /*long*/ DragDataDelete(int /*long*/ widget, int /*long*/ context){
+static long /*int*/ DragDataDelete(long /*int*/ widget, long /*int*/ context){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragDataDelete(widget, context);
 	return 0;
 }
 
-static int /*long*/ DragEnd(int /*long*/ widget, int /*long*/ context){
+static long /*int*/ DragEnd(long /*int*/ widget, long /*int*/ context){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragEnd(widget, context);
 	return 0;
 }
 	
-static int /*long*/ DragGetData(int /*long*/ widget, int /*long*/ context, int /*long*/ selection_data,  int /*long*/ info, int /*long*/ time){
+static long /*int*/ DragGetData(long /*int*/ widget, long /*int*/ context, long /*int*/ selection_data,  long /*int*/ info, long /*int*/ time){
 	DragSource source = FindDragSource(widget);
 	if (source == null) return 0;
 	source.dragGetData(widget, context, selection_data, (int)/*64*/info, (int)/*64*/time);
 	return 0;
 }
 
-static DragSource FindDragSource(int /*long*/ handle) {
+static DragSource FindDragSource(long /*int*/ handle) {
 	Display display = Display.findDisplay(Thread.currentThread());
 	if (display == null || display.isDisposed()) return null;
 	Widget widget = display.findWidget(handle);
@@ -296,15 +296,15 @@
 	
 	int actions = opToOsOp(getStyle());
 	Image image = event.image; 
-	int /*long*/ context = OS.gtk_drag_begin(control.handle, targetList, actions, 1, 0);
+	long /*int*/ context = OS.gtk_drag_begin(control.handle, targetList, actions, 1, 0);
 	if (context != 0 && image != null) {
-		int /*long*/ pixbuf = createPixbuf(image);
+		long /*int*/ pixbuf = createPixbuf(image);
 		OS.gtk_drag_set_icon_pixbuf(context, pixbuf, 0, 0);
 		OS.g_object_unref(pixbuf);
 	}
 }
 
-void dragEnd(int /*long*/ widget, int /*long*/ context){
+void dragEnd(long /*int*/ widget, long /*int*/ context){
 	/*
 	 * Bug in GTK.  If a drag is initiated using gtk_drag_begin and the 
 	 * mouse is released immediately, the mouse and keyboard remain
@@ -340,7 +340,7 @@
 	moveData = false;	
 }	
 
-void dragGetData(int /*long*/ widget, int /*long*/ context, int /*long*/ selection_data,  int info, int time){
+void dragGetData(long /*int*/ widget, long /*int*/ context, long /*int*/ selection_data,  int info, int time){
 	if (selection_data == 0) return;	
 	GtkSelectionData gtkSelectionData = new GtkSelectionData();
 	OS.memmove(gtkSelectionData, selection_data, GtkSelectionData.sizeof);
@@ -374,7 +374,7 @@
 	return;	
 }
 
-void dragDataDelete(int /*long*/ widget, int /*long*/ context){
+void dragDataDelete(long /*int*/ widget, long /*int*/ context){
 	moveData = true;
 }
 
@@ -562,7 +562,7 @@
 		}
 	}
 	
-	int /*long*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
+	long /*int*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
 	for (int i = 0; i < targets.length; i++) {
 		OS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);		
 	}			
@@ -573,29 +573,29 @@
 	}
 }
 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -614,10 +614,10 @@
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
diff -ur x86/org/eclipse/swt/dnd/DropTarget.java x86_64/org/eclipse/swt/dnd/DropTarget.java
--- x86/org/eclipse/swt/dnd/DropTarget.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/DropTarget.java	2009-02-11 17:43:48.000000000 -0500
@@ -243,33 +243,33 @@
 	return style;
 }
 
-static int /*long*/ Drag_Data_Received ( int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ data, int /*long*/ info, int /*long*/ time){
+static long /*int*/ Drag_Data_Received ( long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ data, long /*int*/ info, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	target.drag_data_received (widget, context, (int)/*64*/x, (int)/*64*/y, data, (int)/*64*/info, (int)/*64*/time);
 	return 0;
 }
 
-static int /*long*/ Drag_Drop(int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ time) {
+static long /*int*/ Drag_Drop(long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ time) {
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	return target.drag_drop (widget, context, (int)/*64*/x, (int)/*64*/y, (int)/*64*/time) ? 1 : 0;
 }
 
-static int /*long*/ Drag_Leave ( int /*long*/ widget, int /*long*/ context, int /*long*/ time){
+static long /*int*/ Drag_Leave ( long /*int*/ widget, long /*int*/ context, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	target.drag_leave (widget, context, (int)/*64*/time);
 	return 0;
 }
 
-static int /*long*/ Drag_Motion ( int /*long*/ widget, int /*long*/ context, int /*long*/ x, int /*long*/ y, int /*long*/ time){
+static long /*int*/ Drag_Motion ( long /*int*/ widget, long /*int*/ context, long /*int*/ x, long /*int*/ y, long /*int*/ time){
 	DropTarget target = FindDropTarget(widget);
 	if (target == null) return 0;
 	return target.drag_motion (widget, context, (int)/*64*/x, (int)/*64*/y, (int)/*64*/time) ? 1 : 0;
 }
 	
-static DropTarget FindDropTarget(int /*long*/ handle) {
+static DropTarget FindDropTarget(long /*int*/ handle) {
 	Display display = Display.findDisplay(Thread.currentThread());
 	if (display == null || display.isDisposed()) return null;
 	Widget widget = display.findWidget(handle);
@@ -330,7 +330,7 @@
 	}
 }
 
-void drag_data_received ( int /*long*/ widget, int /*long*/ context, int x, int y, int /*long*/ data, int info, int time){
+void drag_data_received ( long /*int*/ widget, long /*int*/ context, int x, int y, long /*int*/ data, int info, int time){
 	DNDEvent event = new DNDEvent();
 	if (data == 0 || !setEventData(context, x, y, time, event)) {
 		keyOperation = -1;
@@ -378,7 +378,7 @@
 	return;	
 }
 
-boolean drag_drop(int /*long*/ widget, int /*long*/ context, int x, int y, int time) {
+boolean drag_drop(long /*int*/ widget, long /*int*/ context, int x, int y, int time) {
 	DNDEvent event = new DNDEvent();
 	if (!setEventData(context, x, y, time, event)) {
 		keyOperation = -1;
@@ -415,7 +415,7 @@
 	return true;
 }
 
-void drag_leave ( int /*long*/ widget, int /*long*/ context, int time){
+void drag_leave ( long /*int*/ widget, long /*int*/ context, int time){
 	updateDragOverHover(0, null);
 	
 	if (keyOperation == -1) return;
@@ -428,7 +428,7 @@
 	notifyListeners(DND.DragLeave, event);
 }
 
-boolean drag_motion ( int /*long*/ widget, int /*long*/ context, int x, int y, int time){
+boolean drag_motion ( long /*int*/ widget, long /*int*/ context, int x, int y, int time){
 	int oldKeyOperation = keyOperation;
 	
 	if (oldKeyOperation == -1) { //drag enter
@@ -687,7 +687,7 @@
 		}
 	}
 	
-	int /*long*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
+	long /*int*/ pTargets = OS.g_malloc(targets.length * GtkTargetEntry.sizeof);
 	for (int i = 0; i < targets.length; i++) {
 		OS.memmove(pTargets + i*GtkTargetEntry.sizeof, targets[i], GtkTargetEntry.sizeof);		
 	}			
@@ -695,7 +695,7 @@
 	int actions = opToOsOp(getStyle());
 	if (control instanceof Combo) {
 		if ((control.getStyle() & SWT.READ_ONLY) == 0) {
-			int /*long*/ entryHandle = OS.gtk_bin_get_child (control.handle);
+			long /*int*/ entryHandle = OS.gtk_bin_get_child (control.handle);
 			if (entryHandle != 0) {
 				OS.gtk_drag_dest_unset(entryHandle);
 			}
@@ -721,7 +721,7 @@
 	dropEffect = effect;
 }
 
-boolean setEventData(int /*long*/ context, int x, int y, int time, DNDEvent event) {
+boolean setEventData(long /*int*/ context, int x, int y, int time, DNDEvent event) {
 	if (context == 0) return false;
 	GdkDragContext dragContext = new GdkDragContext();
 	OS.memmove(dragContext, context, GdkDragContext.sizeof);
@@ -747,7 +747,7 @@
 	int length = OS.g_list_length(dragContext.targets);
 	TransferData[] dataTypes = new TransferData[0];
 	for (int i = 0; i < length; i++) {
-		int /*long*/ pData = OS.g_list_nth(dragContext.targets, i);
+		long /*int*/ pData = OS.g_list_nth(dragContext.targets, i);
 		GtkTargetPair gtkTargetPair = new GtkTargetPair();
 		OS.memmove(gtkTargetPair, pData, GtkTargetPair.sizeof);
 		TransferData data = new TransferData();
@@ -765,7 +765,7 @@
 	}
 	if (dataTypes.length == 0) return false;
 
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW(control.handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW(control.handle);
 	int [] origin_x = new int[1], origin_y = new int[1];
 	OS.gdk_window_get_origin(window, origin_x, origin_y);
 	Point coordinates = new Point(origin_x[0] + x, origin_y[0] + y);
diff -ur x86/org/eclipse/swt/dnd/FileTransfer.java x86_64/org/eclipse/swt/dnd/FileTransfer.java
--- x86/org/eclipse/swt/dnd/FileTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/FileTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -76,13 +76,13 @@
 		if (length == 0) continue;
 		char[] chars = new char[length];
 		string.getChars(0, length, chars, 0);		
-		int /*long*/[] error = new int /*long*/[1];
-		int /*long*/ utf8Ptr = OS.g_utf16_to_utf8(chars, chars.length, null, null, error);
+		long /*int*/[] error = new long /*int*/[1];
+		long /*int*/ utf8Ptr = OS.g_utf16_to_utf8(chars, chars.length, null, null, error);
 		if (error[0] != 0 || utf8Ptr == 0) continue;
-		int /*long*/ localePtr = OS.g_filename_from_utf8(utf8Ptr, -1, null, null, error);
+		long /*int*/ localePtr = OS.g_filename_from_utf8(utf8Ptr, -1, null, null, error);
 		OS.g_free(utf8Ptr);
 		if (error[0] != 0 || localePtr == 0) continue;
-		int /*long*/ uriPtr = OS.g_filename_to_uri(localePtr, 0, error);
+		long /*int*/ uriPtr = OS.g_filename_to_uri(localePtr, 0, error);
 		OS.g_free(localePtr);
 		if (error[0] != 0 || uriPtr == 0) continue;
 		length = OS.strlen(uriPtr);
@@ -102,7 +102,7 @@
 		buffer = newBuffer;
 	}
 	if (buffer.length == 0) return;
-	int /*long*/ ptr = OS.g_malloc(buffer.length+1);
+	long /*int*/ ptr = OS.g_malloc(buffer.length+1);
 	OS.memset(ptr, '\0', buffer.length+1);
 	OS.memmove(ptr, buffer, buffer.length);
 	transferData.pValue = ptr;
@@ -126,16 +126,16 @@
 	int length = transferData.length;
 	byte[] temp = new byte[length];
 	OS.memmove(temp, transferData.pValue, length);
-	int /*long*/[] files = new int /*long*/[0];
+	long /*int*/[] files = new long /*int*/[0];
 	int offset = 0;
 	for (int i = 0; i < temp.length - 1; i++) {
 		if (temp[i] == '\r' && temp[i+1] == '\n') {
 			int size =  i - offset;
-			int /*long*/ file = OS.g_malloc(size + 1);
+			long /*int*/ file = OS.g_malloc(size + 1);
 			byte[] fileBuffer = new byte[size + 1];
 			System.arraycopy(temp, offset, fileBuffer, 0, size);
 			OS.memmove(file, fileBuffer, size + 1);
-			int /*long*/[] newFiles = new int /*long*/[files.length + 1];
+			long /*int*/[] newFiles = new long /*int*/[files.length + 1];
 			System.arraycopy(files, 0, newFiles, 0, files.length);
 			newFiles[files.length] = file;
 			files = newFiles;
@@ -144,26 +144,26 @@
 	}
 	if (offset < temp.length - 2) {
 		int size =  temp.length - offset;
-		int /*long*/ file = OS.g_malloc(size + 1);
+		long /*int*/ file = OS.g_malloc(size + 1);
 		byte[] fileBuffer = new byte[size + 1];
 		System.arraycopy(temp, offset, fileBuffer, 0, size);
 		OS.memmove(file, fileBuffer, size + 1);
-		int /*long*/[] newFiles = new int /*long*/[files.length + 1];
+		long /*int*/[] newFiles = new long /*int*/[files.length + 1];
 		System.arraycopy(files, 0, newFiles, 0, files.length);
 		newFiles[files.length] = file;
 		files = newFiles;
 	}
 	String[] fileNames = new String[0];
 	for (int i = 0; i < files.length; i++) {
-		int /*long*/[] error = new int /*long*/[1];
-		int /*long*/ localePtr = OS.g_filename_from_uri(files[i], null, error);
+		long /*int*/[] error = new long /*int*/[1];
+		long /*int*/ localePtr = OS.g_filename_from_uri(files[i], null, error);
 		OS.g_free(files[i]);
 		if (error[0] != 0 || localePtr == 0) continue;
-		int /*long*/ utf8Ptr = OS.g_filename_to_utf8(localePtr, -1, null, null, error);
+		long /*int*/ utf8Ptr = OS.g_filename_to_utf8(localePtr, -1, null, null, error);
 		OS.g_free(localePtr);
 		if (error[0] != 0 || utf8Ptr == 0) continue;
-		int /*long*/[] items_written = new int /*long*/[1];
-		int /*long*/ utf16Ptr = OS.g_utf8_to_utf16(utf8Ptr, -1, null, items_written, null);
+		long /*int*/[] items_written = new long /*int*/[1];
+		long /*int*/ utf16Ptr = OS.g_utf8_to_utf16(utf8Ptr, -1, null, items_written, null);
 		OS.g_free(utf8Ptr);
 		length = (int)/*64*/items_written[0];
 		char[] buffer = new char[length];
diff -ur x86/org/eclipse/swt/dnd/HTMLTransfer.java x86_64/org/eclipse/swt/dnd/HTMLTransfer.java
--- x86/org/eclipse/swt/dnd/HTMLTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/HTMLTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -65,7 +65,7 @@
 	char [] chars = new char[charCount +1];
 	string.getChars(0, charCount , chars, 0);
 	int byteCount = chars.length*2;
-	int /*long*/ pValue = OS.g_malloc(byteCount);
+	long /*int*/ pValue = OS.g_malloc(byteCount);
 	if (pValue == 0) return;
 	OS.memmove(pValue, chars, byteCount);
 	transferData.length = byteCount;
diff -ur x86/org/eclipse/swt/dnd/ImageTransfer.java x86_64/org/eclipse/swt/dnd/ImageTransfer.java
--- x86/org/eclipse/swt/dnd/ImageTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/ImageTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -89,12 +89,12 @@
 	ImageData imgData = (ImageData)object;
 	if (imgData == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	Image image = new Image(Display.getCurrent(), imgData);	
-	int /*long*/ pixmap = image.pixmap; 
+	long /*int*/ pixmap = image.pixmap; 
  	int width = imgData.width;
  	int height = imgData.height;  	
- 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+ 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);	
 	
 	String typeStr = "";
@@ -110,7 +110,7 @@
 	if (transferData.type ==  XPM_ID) typeStr = "xpm";
 	if (transferData.type ==  XV_ID) typeStr = "xv";
 	byte[] type = Converter.wcsToMbcs(null, typeStr , true);
-	int /*long*/ [] buffer = new int /*long*/ [1];
+	long /*int*/ [] buffer = new long /*int*/ [1];
 	int [] len = new int [1];
 	if (type == null) return;
 	OS.gdk_pixbuf_save_to_buffer(pixbuf, buffer, len, type , null, null);		
@@ -136,15 +136,15 @@
 	ImageData imgData = null;
 	if (transferData.length > 0)
 	{
-		int /*long*/ loader = OS.gdk_pixbuf_loader_new();
+		long /*int*/ loader = OS.gdk_pixbuf_loader_new();
 		OS.gdk_pixbuf_loader_write(loader, transferData.pValue, transferData.length, null);
 		OS.gdk_pixbuf_loader_close(loader, null);
-		int /*long*/ pixbuf = OS.gdk_pixbuf_loader_get_pixbuf(loader);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_loader_get_pixbuf(loader);
 		if (pixbuf != 0) {
 			OS.g_object_ref(pixbuf);
-			int /*long*/ [] pixmap_return = new int /*long*/ [1];
+			long /*int*/ [] pixmap_return = new long /*int*/ [1];
 			OS.gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, null, 0);
-			int /*long*/ handle = pixmap_return[0];
+			long /*int*/ handle = pixmap_return[0];
 			if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			OS.g_object_unref(loader);
 			Image img = Image.gtk_new(Display.getCurrent(), SWT.BITMAP, handle, 0);		
diff -ur x86/org/eclipse/swt/dnd/RTFTransfer.java x86_64/org/eclipse/swt/dnd/RTFTransfer.java
--- x86/org/eclipse/swt/dnd/RTFTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/RTFTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -65,7 +65,7 @@
 	}
 	String string = (String)object;
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ pValue = OS.g_malloc(buffer.length);
+	long /*int*/ pValue = OS.g_malloc(buffer.length);
 	if (pValue == 0) return;
 	OS.memmove(pValue, buffer, buffer.length);
 	transferData.length = buffer.length - 1;
diff -ur x86/org/eclipse/swt/dnd/TableDragSourceEffect.java x86_64/org/eclipse/swt/dnd/TableDragSourceEffect.java
--- x86/org/eclipse/swt/dnd/TableDragSourceEffect.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TableDragSourceEffect.java	2009-02-11 17:43:48.000000000 -0500
@@ -88,26 +88,26 @@
 		* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 		* to give a valid pointer instead.
 		*/
-		int /*long*/ handle = table.handle;
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-		int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-		int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+		long /*int*/ handle = table.handle;
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+		long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 		if (list == 0) return null;
 		int count = Math.min(10, OS.g_list_length (list));
 
 		Display display = table.getDisplay();
 		if (count == 1) {
-			int /*long*/ path = OS.g_list_nth_data (list, 0);
-			int /*long*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
+			long /*int*/ path = OS.g_list_nth_data (list, 0);
+			long /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 			dragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0); 
 		} else {
 			int width = 0, height = 0;
 			int[] w = new int[1], h = new int[1];
 			int[] yy = new int[count], hh = new int[count];
-			int /*long*/ [] pixmaps = new int /*long*/ [count];
+			long /*int*/ [] pixmaps = new long /*int*/ [count];
 			GdkRectangle rect = new GdkRectangle ();
 			for (int i=0; i<count; i++) {
-				int /*long*/ path = OS.g_list_nth_data (list, i);
+				long /*int*/ path = OS.g_list_nth_data (list, i);
 				OS.gtk_tree_view_get_cell_area (handle, path, 0, rect);
 				pixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 				OS.gdk_drawable_get_size(pixmaps[i], w, h);
@@ -116,10 +116,10 @@
 				yy[i] = rect.y;
 				hh[i] = h[0];
 			}
-			int /*long*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
-			int /*long*/ gcSource = OS.gdk_gc_new(source);
-			int /*long*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
-			int /*long*/ gcMask = OS.gdk_gc_new(mask);
+			long /*int*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
+			long /*int*/ gcSource = OS.gdk_gc_new(source);
+			long /*int*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
+			long /*int*/ gcMask = OS.gdk_gc_new(mask);
 			GdkColor color = new GdkColor();
 			color.pixel = 0;
 			OS.gdk_gc_set_foreground(gcMask, color);
diff -ur x86/org/eclipse/swt/dnd/TableDropTargetEffect.java x86_64/org/eclipse/swt/dnd/TableDropTargetEffect.java
--- x86/org/eclipse/swt/dnd/TableDropTargetEffect.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TableDropTargetEffect.java	2009-02-11 17:43:48.000000000 -0500
@@ -102,7 +102,7 @@
 	 */
 	public void dragLeave(DropTargetEvent event) {
 		Table table = (Table) control;
-		int /*long*/ handle = table.handle;
+		long /*int*/ handle = table.handle;
 		OS.gtk_tree_view_set_drag_dest_row(handle, 0, OS.GTK_TREE_VIEW_DROP_BEFORE);
 
 		scrollBeginTime = 0;
@@ -128,15 +128,15 @@
 	 */
 	public void dragOver(DropTargetEvent event) {
 		Table table = (Table) control;
-		int /*long*/ handle = table.handle;
+		long /*int*/ handle = table.handle;
 		int effect = checkEffect(event.feedback);
 		Point coordinates = new Point(event.x, event.y);
 		coordinates = table.toControl(coordinates);
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		OS.gtk_tree_view_get_path_at_pos (handle, coordinates.x, coordinates.y, path, null, null, null);
 		int index = -1;
 		if (path[0] != 0) {
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 			if (indices != 0) {
 				int[] temp = new int[1];
 				OS.memmove (temp, indices, 4);
diff -ur x86/org/eclipse/swt/dnd/TextTransfer.java x86_64/org/eclipse/swt/dnd/TextTransfer.java
--- x86/org/eclipse/swt/dnd/TextTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TextTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -66,9 +66,9 @@
 	String string = (String)object;
 	byte[] utf8 = Converter.wcsToMbcs (null, string, true);
 	if  (transferData.type ==  COMPOUND_TEXT_ID) {
-		int /*long*/[] encoding = new int /*long*/[1];
+		long /*int*/[] encoding = new long /*int*/[1];
 		int[] format = new int[1];
-		int /*long*/[] ctext = new int /*long*/[1];
+		long /*int*/[] ctext = new long /*int*/[1];
 		int[] length = new int[1];
 		boolean result = OS.gdk_utf8_to_compound_text(utf8, encoding, format, ctext, length);
 		if (!result) return;
@@ -79,7 +79,7 @@
 		transferData.result = 1;
 	} 
 	if (transferData.type == UTF8_STRING_ID) {
-		int /*long*/ pValue = OS.g_malloc(utf8.length);
+		long /*int*/ pValue = OS.g_malloc(utf8.length);
 		if (pValue ==  0) return;
 		OS.memmove(pValue, utf8, utf8.length);
 		transferData.type = UTF8_STRING_ID;
@@ -89,7 +89,7 @@
 		transferData.result = 1;
 	}
 	if (transferData.type == STRING_ID) {
-		int /*long*/ string_target = OS.gdk_utf8_to_string_target(utf8);
+		long /*int*/ string_target = OS.gdk_utf8_to_string_target(utf8);
 		if (string_target ==  0) return;
 		transferData.type = STRING_ID;
 		transferData.format = 8;
@@ -110,10 +110,10 @@
  */
 public Object nativeToJava(TransferData transferData){
 	if (!isSupportedType(transferData) ||  transferData.pValue == 0) return null;
-	int /*long*/[] list = new int /*long*/[1];
+	long /*int*/[] list = new long /*int*/[1];
 	int count = OS.gdk_text_property_to_utf8_list(transferData.type, transferData.format, transferData.pValue, transferData.length, list);
 	if (count == 0) return null;
-	int /*long*/[] ptr = new int /*long*/[1];
+	long /*int*/[] ptr = new long /*int*/[1];
 	OS.memmove(ptr, list[0], OS.PTR_SIZEOF);
 	int length = OS.strlen(ptr[0]);
 	byte[] utf8 = new byte[length];
diff -ur x86/org/eclipse/swt/dnd/TransferData.java x86_64/org/eclipse/swt/dnd/TransferData.java
--- x86/org/eclipse/swt/dnd/TransferData.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TransferData.java	2009-02-11 17:43:48.000000000 -0500
@@ -38,7 +38,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ type;
+	public long /*int*/ type;
 	
 	/**
 	 * Specifies the number of units in pValue.
@@ -78,7 +78,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ pValue;
+	public long /*int*/ pValue;
 
 	/**
 	 * The result field contains the result of converting a
diff -ur x86/org/eclipse/swt/dnd/TreeDragSourceEffect.java x86_64/org/eclipse/swt/dnd/TreeDragSourceEffect.java
--- x86/org/eclipse/swt/dnd/TreeDragSourceEffect.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TreeDragSourceEffect.java	2009-02-11 17:43:48.000000000 -0500
@@ -87,26 +87,26 @@
 		* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 		* to give a valid pointer instead.
 		*/
-		int /*long*/ handle = tree.handle;
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-		int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-		int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+		long /*int*/ handle = tree.handle;
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+		long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 		if (list == 0) return null;
 		int count = Math.min(10, OS.g_list_length (list));
 
 		Display display = tree.getDisplay();
 		if (count == 1) {
-			int /*long*/ path = OS.g_list_nth_data (list, 0);
-			int /*long*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
+			long /*int*/ path = OS.g_list_nth_data (list, 0);
+			long /*int*/ pixmap = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 			dragSourceImage =  Image.gtk_new(display, SWT.ICON, pixmap, 0); 
 		} else {
 			int width = 0, height = 0;
 			int[] w = new int[1], h = new int[1];
 			int[] yy = new int[count], hh = new int[count];
-			int /*long*/ [] pixmaps = new int /*long*/ [count];
+			long /*int*/ [] pixmaps = new long /*int*/ [count];
 			GdkRectangle rect = new GdkRectangle ();
 			for (int i=0; i<count; i++) {
-				int /*long*/ path = OS.g_list_nth_data (list, i);
+				long /*int*/ path = OS.g_list_nth_data (list, i);
 				OS.gtk_tree_view_get_cell_area (handle, path, 0, rect);
 				pixmaps[i] = OS.gtk_tree_view_create_row_drag_icon(handle, path);
 				OS.gdk_drawable_get_size(pixmaps[i], w, h);
@@ -115,10 +115,10 @@
 				yy[i] = rect.y;
 				hh[i] = h[0];
 			}
-			int /*long*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
-			int /*long*/ gcSource = OS.gdk_gc_new(source);
-			int /*long*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
-			int /*long*/ gcMask = OS.gdk_gc_new(mask);
+			long /*int*/ source = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
+			long /*int*/ gcSource = OS.gdk_gc_new(source);
+			long /*int*/ mask = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, 1);
+			long /*int*/ gcMask = OS.gdk_gc_new(mask);
 			GdkColor color = new GdkColor();
 			color.pixel = 0;
 			OS.gdk_gc_set_foreground(gcMask, color);
diff -ur x86/org/eclipse/swt/dnd/TreeDropTargetEffect.java x86_64/org/eclipse/swt/dnd/TreeDropTargetEffect.java
--- x86/org/eclipse/swt/dnd/TreeDropTargetEffect.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/TreeDropTargetEffect.java	2009-02-11 17:43:48.000000000 -0500
@@ -111,7 +111,7 @@
 	 */
 	public void dragLeave(DropTargetEvent event) {
 		Tree tree = (Tree) control;
-		int /*long*/ handle = tree.handle;
+		long /*int*/ handle = tree.handle;
 		OS.gtk_tree_view_set_drag_dest_row(handle, 0, OS.GTK_TREE_VIEW_DROP_BEFORE);
 
 		scrollBeginTime = 0;
@@ -142,14 +142,14 @@
 		Tree tree = (Tree) control;
 		int effect = checkEffect(event.feedback);
 
-		int /*long*/ handle = tree.handle;
+		long /*int*/ handle = tree.handle;
 		Point coordinates = new Point(event.x, event.y);
 		coordinates = tree.toControl(coordinates);
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		OS.gtk_tree_view_get_path_at_pos (handle, coordinates.x, coordinates.y, path, null, null, null);
 		int index = -1;
 		if (path[0] != 0) {
-			int /*long*/ indices = OS.gtk_tree_path_get_indices(path[0]);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices(path[0]);
 			if (indices != 0) {	
 				int depth = OS.gtk_tree_path_get_depth(path[0]);
 				int[] temp = new int[depth];
diff -ur x86/org/eclipse/swt/dnd/URLTransfer.java x86_64/org/eclipse/swt/dnd/URLTransfer.java
--- x86/org/eclipse/swt/dnd/URLTransfer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/dnd/URLTransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -65,7 +65,7 @@
 	char [] chars = new char[charCount +1];
 	string.getChars(0, charCount , chars, 0);
 	int byteCount = chars.length*2;
-	int /*long*/ pValue = OS.g_malloc(byteCount);
+	long /*int*/ pValue = OS.g_malloc(byteCount);
 	if (pValue == 0) return;
 	OS.memmove(pValue, chars, byteCount);
 	transferData.length = byteCount;
diff -ur x86/org/eclipse/swt/graphics/Color.java x86_64/org/eclipse/swt/graphics/Color.java
--- x86/org/eclipse/swt/graphics/Color.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Color.java	2009-02-11 17:43:50.000000000 -0500
@@ -115,7 +115,7 @@
 			device.gdkColors[pixel] = null;
 		}
 	}
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_colormap_free_colors(colormap, handle, 1);
 	handle = null;
 }
@@ -242,7 +242,7 @@
 	gdkColor.red = (short)((red & 0xFF) | ((red & 0xFF) << 8));
 	gdkColor.green = (short)((green & 0xFF) | ((green & 0xFF) << 8));
 	gdkColor.blue = (short)((blue & 0xFF) | ((blue & 0xFF) << 8));
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	if (!OS.gdk_colormap_alloc_color(colormap, gdkColor, true, true)) {
 		/* Allocate black. */
 		gdkColor = new GdkColor();
diff -ur x86/org/eclipse/swt/graphics/Cursor.java x86_64/org/eclipse/swt/graphics/Cursor.java
--- x86/org/eclipse/swt/graphics/Cursor.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Cursor.java	2009-02-11 17:43:50.000000000 -0500
@@ -52,7 +52,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 
 	static final byte[] APPSTARTING_SRC = {
 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00,
@@ -284,15 +284,15 @@
 		hotspotY >= source.height || hotspotY < 0) {
 		SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ display = 0;
+	long /*int*/ display = 0;
 	if (OS.GTK_VERSION >= OS.VERSION(2, 4, 0) && OS.gdk_display_supports_cursor_color(display = OS.gdk_display_get_default ())) {
 		int width = source.width;
 		int height = source.height;
 		PaletteData palette = source.palette;	
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] buffer = source.data;
 		if (!palette.isDirect || source.depth != 24 || stride != source.bytesPerLine || palette.redMask != 0xFF000000 || palette.greenMask != 0xFF0000 || palette.blueMask != 0xFF00) {
 			buffer = new byte[source.width * source.height * 4];
@@ -426,10 +426,10 @@
 	init();
 }
 
-int /*long*/ createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse) {
-	int /*long*/ sourcePixmap = OS.gdk_bitmap_create_from_data(0, sourceData, width, height);
-	int /*long*/ maskPixmap = OS.gdk_bitmap_create_from_data(0, maskData, width, height);
-	int /*long*/ cursor = 0;
+long /*int*/ createCursor(byte[] sourceData, byte[] maskData, int width, int height, int hotspotX, int hotspotY, boolean reverse) {
+	long /*int*/ sourcePixmap = OS.gdk_bitmap_create_from_data(0, sourceData, width, height);
+	long /*int*/ maskPixmap = OS.gdk_bitmap_create_from_data(0, maskData, width, height);
+	long /*int*/ cursor = 0;
 	if (sourcePixmap != 0 && maskPixmap != 0) {
 		GdkColor foreground = new GdkColor();
 		if (!reverse) foreground.red = foreground.green = foreground.blue = (short)0xFFFF;
@@ -479,7 +479,7 @@
  * 
  * @private
  */
-public static Cursor gtk_new(Device device, int /*long*/ handle) {
+public static Cursor gtk_new(Device device, long /*int*/ handle) {
 	Cursor cursor = new Cursor(device);
 	cursor.handle = handle;
 	return cursor;
diff -ur x86/org/eclipse/swt/graphics/Device.java x86_64/org/eclipse/swt/graphics/Device.java
--- x86/org/eclipse/swt/graphics/Device.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Device.java	2009-02-11 17:43:50.000000000 -0500
@@ -34,8 +34,8 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	protected int /*long*/ xDisplay;
-	int /*long*/ shellHandle;
+	protected long /*int*/ xDisplay;
+	long /*int*/ shellHandle;
 
 	/* Debugging */
 	public static boolean DEBUG;
@@ -53,7 +53,7 @@
 	boolean disposed;
 	
 	/* Warning and Error Handlers */
-	int /*long*/ logProc;
+	long /*int*/ logProc;
 	Callback logCallback;
 	//NOT DONE - get list of valid names
 	String [] log_domains = {"GLib-GObject", "GLib", "GObject", "Pango", "ATK", "GdkPixbuf", "Gdk", "Gtk", "GnomeVFS"};
@@ -62,7 +62,7 @@
 	
 	/* X Warning and Error Handlers */
 	static Callback XErrorCallback, XIOErrorCallback;
-	static int /*long*/ XErrorProc, XIOErrorProc, XNullErrorProc, XNullIOErrorProc;
+	static long /*int*/ XErrorProc, XIOErrorProc, XNullErrorProc, XNullIOErrorProc;
 	static Device[] Devices = new Device[4];
 
 	/*
@@ -77,7 +77,7 @@
 	/* System Font */
 	Font systemFont;
 	
-	int /*long*/ emptyTab;
+	long /*int*/ emptyTab;
 
 	boolean useXRender;
 
@@ -162,7 +162,7 @@
 	try {
 		/* Check if cairo is available on the system */
 		byte[] buffer = Converter.wcsToMbcs(null, "libcairo.so.2", true);
-		int /*long*/ libcairo = OS.dlopen(buffer, OS.RTLD_LAZY);
+		long /*int*/ libcairo = OS.dlopen(buffer, OS.RTLD_LAZY);
 		if (libcairo != 0) {
 			OS.dlclose(libcairo);
 		} else {
@@ -261,7 +261,7 @@
 	}
 }
 
-static synchronized Device findDevice (int /*long*/ xDisplay) {
+static synchronized Device findDevice (long /*int*/ xDisplay) {
 	for (int i=0; i<Devices.length; i++) {
 		Device device = Devices [i];
 		if (device != null && device.xDisplay == xDisplay) {
@@ -416,13 +416,13 @@
 public FontData[] getFontList (String faceName, boolean scalable) {
 	checkDevice ();
 	if (!scalable) return new FontData[0];
-	int /*long*/[] family = new int /*long*/[1];
-	int /*long*/[] face = new int /*long*/[1];
-	int /*long*/[] families = new int /*long*/[1];
+	long /*int*/[] family = new long /*int*/[1];
+	long /*int*/[] face = new long /*int*/[1];
+	long /*int*/[] families = new long /*int*/[1];
 	int[] n_families = new int[1];
-	int /*long*/[] faces = new int /*long*/[1];
+	long /*int*/[] faces = new long /*int*/[1];
 	int[] n_faces = new int[1];
-	int /*long*/ context = OS.gdk_pango_context_get();
+	long /*int*/ context = OS.gdk_pango_context_get();
 	OS.pango_context_list_families(context, families, n_families);
 	int nFds = 0;
 	FontData[] fds = new FontData[faceName != null ? 4 : n_families[0]];
@@ -430,7 +430,7 @@
 		OS.memmove(family, families[0] + i * OS.PTR_SIZEOF, OS.PTR_SIZEOF);
 		boolean match = true;
 		if (faceName != null) {
-			int /*long*/ familyName = OS.pango_font_family_get_name(family[0]);
+			long /*int*/ familyName = OS.pango_font_family_get_name(family[0]);
 			int length = OS.strlen(familyName);
 			byte[] buffer = new byte[length];
 			OS.memmove(buffer, familyName, length);
@@ -441,7 +441,7 @@
 		    OS.pango_font_family_list_faces(family[0], faces, n_faces);
 		    for (int j=0; j<n_faces[0]; j++) {
 		        OS.memmove(face, faces[0] + j * OS.PTR_SIZEOF, OS.PTR_SIZEOF);
-		        int /*long*/ fontDesc = OS.pango_font_face_describe(face[0]);
+		        long /*int*/ fontDesc = OS.pango_font_face_describe(face[0]);
 		        Font font = Font.gtk_new(this, fontDesc);
 		        FontData data = font.getFontData()[0];
 				if (nFds == fds.length) {
@@ -652,7 +652,7 @@
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public abstract int /*long*/ internal_new_GC (GCData data);
+public abstract long /*int*/ internal_new_GC (GCData data);
 
 /**	 
  * Invokes platform specific functionality to dispose a GC handle.
@@ -667,7 +667,7 @@
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public abstract void internal_dispose_GC (int /*long*/ handle, GCData data);
+public abstract void internal_dispose_GC (long /*int*/ handle, GCData data);
 
 /**
  * Returns <code>true</code> if the device has been disposed,
@@ -708,7 +708,7 @@
 	return OS.FcConfigAppFontAddFile (0, buffer);
 }
 
-int /*long*/ logProc (int /*long*/ log_domain, int /*long*/ log_level, int /*long*/ message, int /*long*/ user_data) {
+long /*int*/ logProc (long /*int*/ log_domain, long /*int*/ log_level, long /*int*/ message, long /*int*/ user_data) {
 	if (warningLevel == 0) {
 		if (DEBUG || debug) {
 			new Error ().printStackTrace ();
@@ -779,7 +779,7 @@
 	shellHandle = 0;
 
 	if (gdkColors != null) {
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		for (int i = 0; i < gdkColors.length; i++) {
 			GdkColor color = gdkColors [i];
 			if (color != null) {
@@ -855,7 +855,7 @@
 	}
 }
 
-static int /*long*/ XErrorProc (int /*long*/ xDisplay, int /*long*/ xErrorEvent) {
+static long /*int*/ XErrorProc (long /*int*/ xDisplay, long /*int*/ xErrorEvent) {
 	Device device = findDevice (xDisplay);
 	if (device != null) {
 		if (device.warningLevel == 0) {
@@ -871,7 +871,7 @@
 	return 0;
 }
 
-static int /*long*/ XIOErrorProc (int /*long*/ xDisplay) {
+static long /*int*/ XIOErrorProc (long /*int*/ xDisplay) {
 	Device device = findDevice (xDisplay);
 	if (device != null) {
 		if (DEBUG || device.debug) {
diff -ur x86/org/eclipse/swt/graphics/Drawable.java x86_64/org/eclipse/swt/graphics/Drawable.java
--- x86/org/eclipse/swt/graphics/Drawable.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Drawable.java	2009-02-11 17:43:48.000000000 -0500
@@ -43,7 +43,7 @@
  * @return the platform specific GC handle
  */
  
-public int /*long*/ internal_new_GC (GCData data);
+public long /*int*/ internal_new_GC (GCData data);
 
 /**	 
  * Invokes platform specific functionality to dispose a GC handle.
@@ -58,6 +58,6 @@
  * @param handle the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ handle, GCData data);
+public void internal_dispose_GC (long /*int*/ handle, GCData data);
 
 }
diff -ur x86/org/eclipse/swt/graphics/Font.java x86_64/org/eclipse/swt/graphics/Font.java
--- x86/org/eclipse/swt/graphics/Font.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Font.java	2009-02-11 17:43:50.000000000 -0500
@@ -42,7 +42,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 Font(Device device) {
 	super(device);
@@ -178,7 +178,7 @@
 public FontData[] getFontData() {
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 
-	int /*long*/ family = OS.pango_font_description_get_family(handle);
+	long /*int*/ family = OS.pango_font_description_get_family(handle);
 	int length = OS.strlen(family);
 	byte[] buffer = new byte[length];
 	OS.memmove(buffer, family, length);
@@ -190,7 +190,7 @@
 	if (pangoStyle == OS.PANGO_STYLE_ITALIC) style |= SWT.ITALIC;
 	if (pangoStyle == OS.PANGO_STYLE_OBLIQUE) style |= SWT.ROMAN;
 	if (pangoWeight >= OS.PANGO_WEIGHT_BOLD) style |= SWT.BOLD;
-	int /*long*/ fontString = OS.pango_font_description_to_string (handle);
+	long /*int*/ fontString = OS.pango_font_description_to_string (handle);
 	length = OS.strlen (fontString);
 	buffer = new byte [length + 1];
 	OS.memmove (buffer, fontString, length);	
@@ -215,7 +215,7 @@
  * 
  * @private
  */
-public static Font gtk_new(Device device, int /*long*/ handle) {
+public static Font gtk_new(Device device, long /*int*/ handle) {
 	Font font = new Font(device);
 	font.handle = handle;
 	return font;
diff -ur x86/org/eclipse/swt/graphics/GCData.java x86_64/org/eclipse/swt/graphics/GCData.java
--- x86/org/eclipse/swt/graphics/GCData.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/GCData.java	2009-02-11 17:43:50.000000000 -0500
@@ -33,7 +33,7 @@
 	public Font font;
 	public Pattern foregroundPattern;
 	public Pattern backgroundPattern;
-	public int /*long*/ clipRgn;
+	public long /*int*/ clipRgn;
 	public float lineWidth;
 	public int lineStyle = SWT.LINE_SOLID;
 	public float[] lineDashes;
@@ -45,12 +45,12 @@
 	public int alpha = 0xFF;
 	public int interpolation = SWT.DEFAULT;
 
-	public int /*long*/ context;
-	public int /*long*/ layout;
-	public int /*long*/ damageRgn;
+	public long /*int*/ context;
+	public long /*int*/ layout;
+	public long /*int*/ damageRgn;
 	public Image image;
-	public int /*long*/ drawable;	
-	public int /*long*/ cairo;
+	public long /*int*/ drawable;	
+	public long /*int*/ cairo;
 	public double cairoXoffset, cairoYoffset;
 	public boolean disposeCairo;
 	public double[] clippingTransform;
diff -ur x86/org/eclipse/swt/graphics/GC.java x86_64/org/eclipse/swt/graphics/GC.java
--- x86/org/eclipse/swt/graphics/GC.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/GC.java	2009-02-11 17:43:50.000000000 -0500
@@ -59,7 +59,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 	Drawable drawable;
 	GCData data;
@@ -146,7 +146,7 @@
 	if (drawable == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	GCData data = new GCData();
 	data.style = checkStyle(style);
-	int /*long*/ gdkGC = drawable.internal_new_GC(data);
+	long /*int*/ gdkGC = drawable.internal_new_GC(data);
 	Device device = data.device;
 	if (device == null) device = Device.getDevice();
 	if (device == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
@@ -155,10 +155,10 @@
 	init();
 }
 
-static void addCairoString(int /*long*/ cairo, String string, float x, float y, Font font) {
+static void addCairoString(long /*int*/ cairo, String string, float x, float y, Font font) {
 	byte[] buffer = Converter.wcsToMbcs(null, string, true);
 	if (OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
-		int /*long*/ layout = OS.pango_cairo_create_layout(cairo);
+		long /*int*/ layout = OS.pango_cairo_create_layout(cairo);
 		if (layout == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		OS.pango_layout_set_text(layout, buffer, -1);
 		OS.pango_layout_set_font_description(layout, font.handle);
@@ -184,7 +184,7 @@
 	return style & (SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT);
 }
 
-public static GC gtk_new(int /*long*/ handle, GCData data) {
+public static GC gtk_new(long /*int*/ handle, GCData data) {
 	GC gc = new GC();
 	gc.device = data.device;
 	gc.init(null, data, handle);
@@ -193,7 +193,7 @@
 
 public static GC gtk_new(Drawable drawable, GCData data) {
 	GC gc = new GC();
-	int /*long*/ gdkGC = drawable.internal_new_GC(data);
+	long /*int*/ gdkGC = drawable.internal_new_GC(data);
 	gc.device = data.device;
 	gc.init(drawable, data, gdkGC);
 	return gc;
@@ -204,7 +204,7 @@
 	if ((state & mask) == mask) return;
 	state = (state ^ mask) & mask;	
 	data.state |= mask;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if ((state & (BACKGROUND | FOREGROUND)) != 0) {
 			GdkColor color;
@@ -220,7 +220,7 @@
 			}
 			if  (pattern != null) {
 				if ((data.style & SWT.MIRRORED) != 0 && pattern.surface != 0) {
-					int /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(pattern.surface);
+					long /*int*/ newPattern = Cairo.cairo_pattern_create_for_surface(pattern.surface);
 					if (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 					Cairo.cairo_pattern_set_extend(newPattern, Cairo.CAIRO_EXTEND_REPEAT);
 					double[] matrix = {-1, 0, 0, 1, 0, 0};
@@ -380,10 +380,10 @@
 	}
 }
 
-int /*long*/ convertRgn(int /*long*/ rgn, double[] matrix) {
-	int /*long*/ newRgn = OS.gdk_region_new();
+long /*int*/ convertRgn(long /*int*/ rgn, double[] matrix) {
+	long /*int*/ newRgn = OS.gdk_region_new();
 	int[] nRects = new int[1];
-	int /*long*/[] rects = new int /*long*/[1];
+	long /*int*/[] rects = new long /*int*/[1];
 	OS.gdk_region_get_rectangles(rgn, rects, nRects);
 	GdkRectangle rect = new GdkRectangle();
 	int[] pointArray = new int[8];
@@ -410,7 +410,7 @@
 		Cairo.cairo_matrix_transform_point(matrix, x, y);
 		pointArray[6] = (int)x[0];
 		pointArray[7] = (int)Math.round(y[0]);
-		int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+		long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 		OS.gdk_region_union(newRgn, polyRgn);
 		OS.gdk_region_destroy(polyRgn);
 	}
@@ -439,7 +439,7 @@
 	if (image == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (image.type != SWT.BITMAP || image.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	Rectangle rect = image.getBounds();
-	int /*long*/ gdkGC = OS.gdk_gc_new(image.pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(image.pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	OS.gdk_gc_set_subwindow(gdkGC, OS.GDK_INCLUDE_INFERIORS);
 	OS.gdk_draw_drawable(image.pixmap, gdkGC, data.drawable, x, y, 0, 0, rect.width, rect.height);
@@ -487,7 +487,7 @@
 	if (width <= 0 || height <= 0) return;
 	int deltaX = destX - srcX, deltaY = destY - srcY;
 	if (deltaX == 0 && deltaY == 0) return;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image == null && paint) OS.gdk_gc_set_exposures(handle, true);
 	OS.gdk_draw_drawable(drawable, handle, drawable, srcX, srcY, destX, destY, width, height);
 	if (data.image == null & paint) {
@@ -527,10 +527,10 @@
 }
 
 void createLayout() {
-	int /*long*/ context = OS.gdk_pango_context_get();
+	long /*int*/ context = OS.gdk_pango_context_get();
 	if (context == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	data.context = context;
-	int /*long*/ layout = OS.pango_layout_new(context);
+	long /*int*/ layout = OS.pango_layout_new(context);
 	if (layout == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	data.layout = layout;
 	OS.pango_context_set_language(context, OS.gtk_get_default_language());
@@ -550,13 +550,13 @@
 
 void destroy() {
 	if (data.disposeCairo) {
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) Cairo.cairo_destroy(cairo);
 		data.cairo = 0;
 	}
 
 	/* Free resources */
-	int /*long*/ clipRgn = data.clipRgn;
+	long /*int*/ clipRgn = data.clipRgn;
 	if (clipRgn != 0) OS.gdk_region_destroy(clipRgn);
 	Image image = data.image;
 	if (image != null) {
@@ -619,7 +619,7 @@
 		height = -height;
 	}
 	if (width == 0 || height == 0 || arcAngle == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (width == height) {
@@ -670,8 +670,8 @@
 	* are not valid in the default style. The fix is to use a style
 	* from a widget.
 	*/
-	int /*long*/ style = OS.gtk_widget_get_style(data.device.shellHandle);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ style = OS.gtk_widget_get_style(data.device.shellHandle);
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		checkGC(FOREGROUND);
 		int[] lineWidth = new int[1];
@@ -776,7 +776,7 @@
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 		}
  	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (data.alpha != 0) {
 			srcImage.createSurface();
@@ -798,7 +798,7 @@
 				case SWT.LOW: filter = Cairo.CAIRO_FILTER_FAST; break;
 				case SWT.HIGH: filter = Cairo.CAIRO_FILTER_BEST; break;
 			}
-			int /*long*/ pattern = Cairo.cairo_pattern_create_for_surface(srcImage.surface);
+			long /*int*/ pattern = Cairo.cairo_pattern_create_for_surface(srcImage.surface);
 			if (pattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			if (srcWidth != destWidth || srcHeight != destHeight) {
 				/*
@@ -817,8 +817,8 @@
 				* the image that was created or the edges are still faded.
 				*/
 				if (Cairo.cairo_version () >= Cairo.CAIRO_VERSION_ENCODE(1, 4, 0)) {
-					int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);
-					int /*long*/ cr = Cairo.cairo_create(surface);
+					long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, imgWidth * 3, imgHeight * 3);
+					long /*int*/ cr = Cairo.cairo_create(surface);
 					Cairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, imgHeight);
 					Cairo.cairo_paint(cr);
 					Cairo.cairo_scale(cr, -1, -1);
@@ -841,7 +841,7 @@
 					Cairo.cairo_set_source_surface(cr, srcImage.surface, imgWidth, -imgHeight * 3);
 					Cairo.cairo_paint(cr);
 					Cairo.cairo_destroy(cr);
-					int /*long*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);
+					long /*int*/ newPattern = Cairo.cairo_pattern_create_for_surface(surface);
 					Cairo.cairo_surface_destroy(surface);
 					if (newPattern == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 					Cairo.cairo_pattern_destroy(pattern);
@@ -881,7 +881,7 @@
 			drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, 0, -1);
 			return;
 		}
-		int /*long*/ pixbuf = scale(srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destWidth, destHeight);
+		long /*int*/ pixbuf = scale(srcImage.pixmap, srcX, srcY, srcWidth, srcHeight, destWidth, destHeight);
 		if (pixbuf != 0) {
 			OS.gdk_pixbuf_render_to_drawable(pixbuf, data.drawable, handle, 0, 0, destX, destY, destWidth, destHeight, OS.GDK_RGB_DITHER_NORMAL, 0, 0);
 			OS.g_object_unref(pixbuf);
@@ -898,12 +898,12 @@
 		drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, srcImage.mask, OS.PictStandardA8);
 		return;
 	}
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
 	if (pixbuf == 0) return;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] line = new byte[stride];
 	byte alpha = (byte)srcImage.alpha;
 	byte[] alphaData = srcImage.alphaData;
@@ -916,7 +916,7 @@
 		OS.memmove(pixels + (y * stride), line, stride);
 	}
 	if (srcWidth != destWidth || srcHeight != destHeight) {
-		int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+		long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 		OS.g_object_unref(pixbuf);
 		if (scaledPixbuf == 0) return;
 		pixbuf = scaledPixbuf;
@@ -933,33 +933,33 @@
 	OS.g_object_unref(pixbuf);
 }
 void drawImageMask(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight) {
-	int /*long*/ drawable = data.drawable;
-	int /*long*/ colorPixmap = srcImage.pixmap;
+	long /*int*/ drawable = data.drawable;
+	long /*int*/ colorPixmap = srcImage.pixmap;
 	/* Generate the mask if necessary. */
 	if (srcImage.transparentPixel != -1) srcImage.createMask();
-	int /*long*/ maskPixmap = srcImage.mask;
+	long /*int*/ maskPixmap = srcImage.mask;
 
 	if (device.useXRender) {
 		drawImageXRender(srcImage, srcX, srcY, srcWidth, srcHeight, destX, destY, destWidth, destHeight, simple, imgWidth, imgHeight, maskPixmap, OS.PictStandardA1);
 	} else {
 		if (srcWidth != destWidth || srcHeight != destHeight) {
-			int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
+			long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, srcWidth, srcHeight);
 			if (pixbuf != 0) {
-				int /*long*/ colormap = OS.gdk_colormap_get_system();
+				long /*int*/ colormap = OS.gdk_colormap_get_system();
 				OS.gdk_pixbuf_get_from_drawable(pixbuf, colorPixmap, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
-				int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
+				long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
 				if (maskPixbuf != 0) {
 					OS.gdk_pixbuf_get_from_drawable(maskPixbuf, maskPixmap, 0, srcX, srcY, 0, 0, srcWidth, srcHeight);
 					int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-					int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+					long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 					byte[] line = new byte[stride];
 					int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-					int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+					long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 					byte[] maskLine = new byte[maskStride];
 					for (int y=0; y<srcHeight; y++) {
-						int /*long*/ offset = pixels + (y * stride);
+						long /*int*/ offset = pixels + (y * stride);
 						OS.memmove(line, offset, stride);
-						int /*long*/ maskOffset = maskPixels + (y * maskStride);
+						long /*int*/ maskOffset = maskPixels + (y * maskStride);
 						OS.memmove(maskLine, maskOffset, maskStride);
 						for (int x=0; x<srcWidth; x++) {
 							if (maskLine[x * 3] == 0) {
@@ -969,10 +969,10 @@
 						OS.memmove(offset, line, stride);
 					}
 					OS.g_object_unref(maskPixbuf);
-					int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+					long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 					if (scaledPixbuf != 0) {
-						int /*long*/[] colorBuffer = new int /*long*/[1];
-						int /*long*/[] maskBuffer = new int /*long*/[1];
+						long /*int*/[] colorBuffer = new long /*int*/[1];
+						long /*int*/[] maskBuffer = new long /*int*/[1];
 						OS.gdk_pixbuf_render_pixmap_and_mask(scaledPixbuf, colorBuffer, maskBuffer, 128);
 						colorPixmap = colorBuffer[0];
 						maskPixmap = maskBuffer[0];
@@ -993,9 +993,9 @@
 			int newHeight = srcY + srcHeight;
 			int bytesPerLine = (newWidth + 7) / 8;
 			byte[] maskData = new byte[bytesPerLine * newHeight];
-			int /*long*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);
+			long /*int*/ mask = OS.gdk_bitmap_create_from_data(0, maskData, newWidth, newHeight);
 			if (mask != 0) {
-				int /*long*/ gc = OS.gdk_gc_new(mask);
+				long /*int*/ gc = OS.gdk_gc_new(mask);
 				OS.gdk_region_offset(data.clipRgn, -destX + srcX, -destY + srcY);
 				OS.gdk_gc_set_clip_region(gc, data.clipRgn);
 				OS.gdk_region_offset(data.clipRgn, destX - srcX, destY - srcY);
@@ -1027,19 +1027,19 @@
 	/* Destroy the image mask if the there is a GC created on the image */
 	if (srcImage.transparentPixel != -1 && srcImage.memGC != null) srcImage.destroyMask();
 }
-void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, int /*long*/ maskPixmap, int maskType) {
+void drawImageXRender(Image srcImage, int srcX, int srcY, int srcWidth, int srcHeight, int destX, int destY, int destWidth, int destHeight, boolean simple, int imgWidth, int imgHeight, long /*int*/ maskPixmap, int maskType) {
 	int translateX = 0, translateY = 0;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image == null && !data.realDrawable) {
 		int[] x = new int[1], y = new int[1];
-		int /*long*/ [] real_drawable = new int /*long*/ [1];
+		long /*int*/ [] real_drawable = new long /*int*/ [1];
 		OS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y);
 		drawable = real_drawable[0];
 		translateX = -x[0];
 		translateY = -y[0];
 	}
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ maskPict = 0;
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ maskPict = 0;
 	if (maskPixmap != 0) {
 		int attribCount = 0;
 		XRenderPictureAttributes attrib = null;
@@ -1051,10 +1051,10 @@
 		maskPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(maskPixmap), OS.XRenderFindStandardFormat(xDisplay, maskType), attribCount, attrib);
 		if (maskPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	}
-	int /*long*/ format = OS.XRenderFindVisualFormat(xDisplay, OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system()));
-	int /*long*/ destPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(drawable), format, 0, null);
+	long /*int*/ format = OS.XRenderFindVisualFormat(xDisplay, OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system()));
+	long /*int*/ destPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(drawable), format, 0, null);
 	if (destPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ srcPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(srcImage.pixmap), format, 0, null);
+	long /*int*/ srcPict = OS.XRenderCreatePicture(xDisplay, OS.gdk_x11_drawable_get_xid(srcImage.pixmap), format, 0, null);
 	if (srcPict == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	if (srcWidth != destWidth || srcHeight != destHeight) {
 		int[] transform = new int[]{(int)(((float)srcWidth / destWidth) * 65536), 0, 0, 0, (int)(((float)srcHeight / destHeight) * 65536), 0, 0, 0, 65536};
@@ -1063,7 +1063,7 @@
 		srcX *= destWidth / (float)srcWidth;
 		srcY *= destHeight / (float)srcHeight;
 	}
-	int /*long*/ clipping = data.clipRgn;
+	long /*int*/ clipping = data.clipRgn;
 	if (data.damageRgn != 0) {
 		if (clipping == 0) {
 			clipping = data.damageRgn;
@@ -1075,7 +1075,7 @@
 	}
 	if (clipping != 0) {
 		int[] nRects = new int[1];
-		int /*long*/[] rects = new int /*long*/[1];
+		long /*int*/[] rects = new long /*int*/[1];
 		OS.gdk_region_get_rectangles(clipping, rects, nRects);
 		GdkRectangle rect = new GdkRectangle();
 		short[] xRects = new short[nRects[0] * 4];
@@ -1097,12 +1097,12 @@
 	OS.XRenderFreePicture(xDisplay, srcPict);
 	if (maskPict != 0) OS.XRenderFreePicture(xDisplay, maskPict);
 }
-int /*long*/ scale(int /*long*/ src, int srcX, int srcY, int srcWidth, int srcHeight, int destWidth, int destHeight) {
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
+long /*int*/ scale(long /*int*/ src, int srcX, int srcY, int srcWidth, int srcHeight, int destWidth, int destHeight) {
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, srcWidth, srcHeight);
 	if (pixbuf == 0) return 0;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, src, colormap, srcX, srcY, 0, 0, srcWidth, srcHeight);
-	int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
+	long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, destWidth, destHeight, OS.GDK_INTERP_BILINEAR);
 	OS.g_object_unref(pixbuf);
 	return scaledPixbuf;
 }
@@ -1123,7 +1123,7 @@
 public void drawLine(int x1, int y1, int x2, int y2) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		Cairo.cairo_move_to(cairo, x1 + xOffset, y1 + yOffset);
@@ -1166,7 +1166,7 @@
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (width == height) {
@@ -1213,11 +1213,11 @@
 	if (path.handle == 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	initCairo();
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	Cairo.cairo_save(cairo);
 	double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 	Cairo.cairo_translate(cairo, xOffset, yOffset);
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -1245,7 +1245,7 @@
 public void drawPoint (int x, int y) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_rectangle(cairo, x, y, 1, 1);
 		Cairo.cairo_fill(cairo);
@@ -1275,7 +1275,7 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, true);
 		Cairo.cairo_stroke(cairo);
@@ -1305,7 +1305,7 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(DRAW);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, false);
 		Cairo.cairo_stroke(cairo);
@@ -1314,7 +1314,7 @@
 	OS.gdk_draw_lines(data.drawable, handle, pointArray, pointArray.length / 2);
 }
 
-void drawPolyline(int /*long*/ cairo, int[] pointArray, boolean close) {
+void drawPolyline(long /*int*/ cairo, int[] pointArray, boolean close) {
 	int count = pointArray.length / 2;
 	if (count == 0) return;
 	double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
@@ -1351,7 +1351,7 @@
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		Cairo.cairo_rectangle(cairo, x + xOffset, y + yOffset, width, height);
@@ -1421,7 +1421,7 @@
 	}
 	if (naw < 0) naw = 0 - naw;
 	if (nah < 0) nah = 0 - nah;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		double xOffset = data.cairoXoffset, yOffset = data.cairoYoffset;
 		if (naw == 0 || nah == 0) {
@@ -1447,7 +1447,7 @@
 	}
 	int naw2 = naw / 2;
 	int nah2 = nah / 2;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (nw > naw) {
 		if (nh > nah) {
 			OS.gdk_draw_arc(drawable, handle, 0, nx, ny, naw, nah, 5760, 5760);
@@ -1607,7 +1607,7 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (string == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (string.length() == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
 			//TODO - honor flags
@@ -1653,14 +1653,14 @@
 	if (!data.xorMode) {
 		OS.gdk_draw_layout_with_colors(data.drawable, handle, x, y, data.layout, null, background);
 	} else {
-		int /*long*/ layout = data.layout;
+		long /*int*/ layout = data.layout;
 		int[] w = new int[1], h = new int[1];
 		OS.pango_layout_get_size(layout, w, h);
 		int width = OS.PANGO_PIXELS(w[0]);
 		int height = OS.PANGO_PIXELS(h[0]);
-		int /*long*/ pixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
+		long /*int*/ pixmap = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), width, height, -1);
 		if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+		long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 		if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		GdkColor black = new GdkColor();
 		OS.gdk_gc_set_foreground(gdkGC, black);
@@ -1733,7 +1733,7 @@
 		height = -height;
 	}
 	if (width == 0 || height == 0 || arcAngle == 0) return;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (width == height) {
             if (arcAngle >= 0) {
@@ -1810,9 +1810,9 @@
 		fillRectangle(x, y, width, height);
 		return;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
-		int /*long*/ pattern;
+		long /*int*/ pattern;
 		if (vertical) {
 			pattern = Cairo.cairo_pattern_create_linear (0.0, 0.0, 0.0, 1.0);
 		} else {
@@ -1862,7 +1862,7 @@
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (width == height) {
 			Cairo.cairo_arc_negative(cairo, x + width / 2f, y + height / 2f, width / 2f, 0, 2 * (float)Compatibility.PI);
@@ -1908,8 +1908,8 @@
 	if (path.handle == 0) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	initCairo();
 	checkGC(FILL);
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -1939,7 +1939,7 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (pointArray == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	checkGC(FILL);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		drawPolyline(cairo, pointArray, true);
 		Cairo.cairo_fill(cairo);
@@ -1974,7 +1974,7 @@
 		y = y + height;
 		height = -height;
 	}
-	int /*long*/ cairo = data.cairo; 
+	long /*int*/ cairo = data.cairo; 
 	if (cairo != 0) {
 		Cairo.cairo_rectangle(cairo, x, y, width, height);
 		Cairo.cairo_fill(cairo);
@@ -2040,7 +2040,7 @@
 	}
 	if (naw < 0) naw = 0 - naw;
 	if (nah < 0) nah = 0 - nah;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (naw == 0 || nah == 0) {
 			Cairo.cairo_rectangle(cairo, x, y, width, height);
@@ -2065,7 +2065,7 @@
 	}
 	int naw2 = naw / 2;
 	int nah2 = nah / 2;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (nw > naw) {
 		if (nh > nah) {
 			OS.gdk_draw_arc(drawable, handle, 1, nx, ny, naw, nah, 5760, 5760);
@@ -2284,11 +2284,11 @@
 		height = h[0];
 	}
 	/* Intersect visible bounds with clipping in device space and then convert then to user space */
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ clipRgn = data.clipRgn;
-	int /*long*/ damageRgn = data.damageRgn;
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ clipRgn = data.clipRgn;
+	long /*int*/ damageRgn = data.damageRgn;
 	if (clipRgn != 0 || damageRgn != 0 || cairo != 0) {
-		int /*long*/ rgn = OS.gdk_region_new();
+		long /*int*/ rgn = OS.gdk_region_new();
 		GdkRectangle rect = new GdkRectangle();
 		rect.width = width;
 		rect.height = height;
@@ -2344,10 +2344,10 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (region == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (region.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ clipping = region.handle;
+	long /*int*/ clipping = region.handle;
 	OS.gdk_region_subtract(clipping, clipping);
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ clipRgn = data.clipRgn;
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ clipRgn = data.clipRgn;
 	if (clipRgn == 0) {
 		GdkRectangle rect = new GdkRectangle();
 		if (data.width != -1 && data.height != -1) {
@@ -2363,7 +2363,7 @@
 	} else {
 		/* Convert clipping to device space if needed */
 		if (data.clippingTransform != null) {
-			int /*long*/ rgn = convertRgn(clipRgn, data.clippingTransform);
+			long /*int*/ rgn = convertRgn(clipRgn, data.clippingTransform);
 			OS.gdk_region_union(clipping, rgn);
 			OS.gdk_region_destroy(rgn);
 		} else {
@@ -2378,7 +2378,7 @@
 		double[] matrix = new double[6];
 		Cairo.cairo_get_matrix(cairo, matrix);
 		Cairo.cairo_matrix_invert(matrix);
-		int /*long*/ rgn = convertRgn(clipping, matrix);
+		long /*int*/ rgn = convertRgn(clipping, matrix);
 		OS.gdk_region_subtract(clipping, clipping);
 		OS.gdk_region_union(clipping, rgn);
 		OS.gdk_region_destroy(rgn);
@@ -2399,7 +2399,7 @@
  */
 public int getFillRule() {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo == 0) return SWT.FILL_EVEN_ODD;
 	return Cairo.cairo_get_fill_rule(cairo) == Cairo.CAIRO_FILL_RULE_WINDING ? SWT.FILL_WINDING : SWT.FILL_EVEN_ODD;
 }
@@ -2435,9 +2435,9 @@
 	if (data.context == 0) createLayout();
 	checkGC(FONT);
 	Font font = data.font;
-	int /*long*/ context = data.context;
-	int /*long*/ lang = OS.pango_context_get_language(context);
-	int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+	long /*int*/ context = data.context;
+	long /*int*/ lang = OS.pango_context_get_language(context);
+	long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 	FontMetrics fm = new FontMetrics();
 	fm.ascent = OS.PANGO_PIXELS(OS.pango_font_metrics_get_ascent(metrics));
 	fm.descent = OS.PANGO_PIXELS(OS.pango_font_metrics_get_descent(metrics));
@@ -2680,13 +2680,13 @@
     if (data.cairo == 0) return SWT.DEFAULT;
     int antialias = Cairo.CAIRO_ANTIALIAS_DEFAULT;
     if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
-    	int /*long*/ options = Cairo.cairo_font_options_create();
+    	long /*int*/ options = Cairo.cairo_font_options_create();
     	Cairo.cairo_get_font_options(data.cairo, options);
     	antialias = Cairo.cairo_font_options_get_antialias(options);
     	Cairo.cairo_font_options_destroy(options);
     } else {
     	if (data.context != 0) {
-    		int /*long*/ options = OS.pango_cairo_context_get_font_options(data.context);
+    		long /*int*/ options = OS.pango_cairo_context_get_font_options(data.context);
     		if (options != 0) antialias = Cairo.cairo_font_options_get_antialias(options);
     	}
     }
@@ -2721,7 +2721,7 @@
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (transform == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (transform.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_get_matrix(cairo, transform.handle);
 		double[] identity = identity();
@@ -2781,7 +2781,7 @@
 	return identity;
 }
 
-void init(Drawable drawable, GCData data, int /*long*/ gdkGC) {
+void init(Drawable drawable, GCData data, long /*int*/ gdkGC) {
 	if (data.foreground != null) data.state &= ~FOREGROUND;
 	if (data.background != null) data.state &= ~(BACKGROUND | BACKGROUND_BG);
 	if (data.font != null) data.state &= ~FONT;
@@ -2801,26 +2801,26 @@
 	handle = gdkGC;
 	if ((data.style & SWT.MIRRORED) != 0) {
 	  initCairo();
-	  int /*long*/ cairo = data.cairo;
+	  long /*int*/ cairo = data.cairo;
 	  Cairo.cairo_set_matrix(cairo, identity());
 	}
 }
 
 void initCairo() {
 	data.device.checkCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) return;
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
-	int /*long*/ xDrawable = 0;
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
+	long /*int*/ xDrawable = 0;
 	int translateX = 0, translateY = 0;
-	int /*long*/ drawable = data.drawable;
+	long /*int*/ drawable = data.drawable;
 	if (data.image != null) {
 		xDrawable = OS.GDK_PIXMAP_XID(drawable);
 	} else {
 		if (!data.realDrawable) {
 			int[] x = new int[1], y = new int[1];
-			int /*long*/ [] real_drawable = new int /*long*/ [1];
+			long /*int*/ [] real_drawable = new long /*int*/ [1];
 			OS.gdk_window_get_internal_paint_info(drawable, real_drawable, x, y);
 			xDrawable = OS.gdk_x11_drawable_get_xid(real_drawable[0]);
 			translateX = -x[0];
@@ -2830,7 +2830,7 @@
 	int[] w = new int[1], h = new int[1];
 	OS.gdk_drawable_get_size(drawable, w, h);
 	int width = w[0], height = h[0];
-	int /*long*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
+	long /*int*/ surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_surface_set_device_offset(surface, translateX, translateY);
 	data.cairo = cairo = Cairo.cairo_create(surface);
@@ -2944,7 +2944,7 @@
 		} catch (SWTException e) {}
 	} else {
 		if (!data.disposeCairo) return;
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) Cairo.cairo_destroy(cairo);
 		data.cairo = 0;
 		data.interpolation = SWT.DEFAULT;
@@ -3023,7 +3023,7 @@
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
     initCairo();
-    int /*long*/ cairo = data.cairo;
+    long /*int*/ cairo = data.cairo;
     Cairo.cairo_set_antialias(cairo, mode);
 }
 
@@ -3085,12 +3085,12 @@
 	data.state &= ~BACKGROUND;
 }
 
-static void setCairoFont(int /*long*/ cairo, Font font) {
+static void setCairoFont(long /*int*/ cairo, Font font) {
 	setCairoFont(cairo, font.handle);
 }
 
-static void setCairoFont(int /*long*/ cairo, int /*long*/ font) {
-	int /*long*/ family = OS.pango_font_description_get_family(font);
+static void setCairoFont(long /*int*/ cairo, long /*int*/ font) {
+	long /*int*/ family = OS.pango_font_description_get_family(font);
 	int length = OS.strlen(family);
 	byte[] buffer = new byte[length + 1];
 	OS.memmove(buffer, family, length);
@@ -3107,14 +3107,14 @@
 	Cairo.cairo_set_font_size(cairo, height);
 }
 
-static void setCairoClip(int /*long*/ cairo, int /*long*/ clipRgn) {
+static void setCairoClip(long /*int*/ cairo, long /*int*/ clipRgn) {
 	Cairo.cairo_reset_clip(cairo);
 	if (clipRgn == 0) return;
 	if (OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 		OS.gdk_cairo_region(cairo, clipRgn);
 	} else {
 		int[] nRects = new int[1];
-		int /*long*/[] rects = new int /*long*/[1];
+		long /*int*/[] rects = new long /*int*/[1];
 		OS.gdk_region_get_rectangles(clipRgn, rects, nRects);
 		GdkRectangle rect = new GdkRectangle();
 		for (int i=0; i<nRects[0]; i++) {
@@ -3126,7 +3126,7 @@
 	Cairo.cairo_clip(cairo);
 }
 
-static void setCairoPatternColor(int /*long*/ pattern, int offset, Color c, int alpha) {
+static void setCairoPatternColor(long /*int*/ pattern, int offset, Color c, int alpha) {
 	GdkColor color = c.handle;
 	double aa = (alpha & 0xFF) / (double)0xFF;
 	double red = ((color.red & 0xFFFF) / (double)0xFFFF);
@@ -3135,8 +3135,8 @@
 	Cairo.cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, aa);
 }
 
-void setClipping(int /*long*/ clipRgn) {
-	int /*long*/ cairo = data.cairo;
+void setClipping(long /*int*/ clipRgn) {
+	long /*int*/ cairo = data.cairo;
 	if (clipRgn == 0) {
 		if (data.clipRgn != 0) {
 			OS.gdk_region_destroy(data.clipRgn);
@@ -3146,7 +3146,7 @@
 			data.clippingTransform = null;
 			setCairoClip(cairo, clipRgn);
 		} else {
-			int /*long*/ clipping = data.damageRgn != 0 ? data.damageRgn : 0;
+			long /*int*/ clipping = data.damageRgn != 0 ? data.damageRgn : 0;
 			OS.gdk_gc_set_clip_region(handle, clipping);
 		}
 	} else {
@@ -3158,7 +3158,7 @@
 			Cairo.cairo_get_matrix(cairo, data.clippingTransform);
 			setCairoClip(cairo, clipRgn);
 		} else {
-			int /*long*/ clipping = clipRgn;
+			long /*int*/ clipping = clipRgn;
 			if (data.damageRgn != 0) {
 				clipping = OS.gdk_region_new();
 				OS.gdk_region_union(clipping, clipRgn);
@@ -3199,7 +3199,7 @@
 	rect.y = y;
 	rect.width = width;
 	rect.height = height;
-	int /*long*/ clipRgn = OS.gdk_region_new();
+	long /*int*/ clipRgn = OS.gdk_region_new();
 	OS.gdk_region_union_with_rect(clipRgn, rect);
 	setClipping(clipRgn);
 	OS.gdk_region_destroy(clipRgn);
@@ -3237,8 +3237,8 @@
 	setClipping(0);
 	if (path != null) {
 		initCairo();
-		int /*long*/ cairo = data.cairo;
-		int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+		long /*int*/ cairo = data.cairo;
+		long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 		if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		Cairo.cairo_append_path(cairo, copy);
 		Cairo.cairo_path_destroy(copy);
@@ -3341,7 +3341,7 @@
 	}
 	//TODO - need fill rule in X, GDK has no API
 	initCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		Cairo.cairo_set_fill_rule(cairo, cairo_mode);
 	}
@@ -3732,7 +3732,7 @@
 	}
 	byte[] buffer;
 	int mnemonic, length = string.length ();
-	int /*long*/ layout = data.layout;
+	long /*int*/ layout = data.layout;
 	char[] text = new char[length];
 	string.getChars(0, length, text, 0);	
 	if ((flags & SWT.DRAW_MNEMONIC) != 0 && (mnemonic = fixMnemonic(text)) != -1) {
@@ -3745,8 +3745,8 @@
 		buffer = new byte[buffer1.length + buffer2.length];
 		System.arraycopy(buffer1, 0, buffer, 0, buffer1.length);
 		System.arraycopy(buffer2, 0, buffer, buffer1.length, buffer2.length);
-		int /*long*/ attr_list = OS.pango_attr_list_new();
-		int /*long*/ attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);
+		long /*int*/ attr_list = OS.pango_attr_list_new();
+		long /*int*/ attr = OS.pango_attr_underline_new(OS.PANGO_UNDERLINE_LOW);
 		PangoAttribute attribute = new PangoAttribute();
 		OS.memmove(attribute, attr, PangoAttribute.sizeof);
 		attribute.start_index = buffer1.length;
@@ -3808,7 +3808,7 @@
 			SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
     initCairo();
-    int /*long*/ options = Cairo.cairo_font_options_create();
+    long /*int*/ options = Cairo.cairo_font_options_create();
     Cairo.cairo_font_options_set_antialias(options, mode);
     if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
     	Cairo.cairo_set_font_options(data.cairo, options);
@@ -3850,7 +3850,7 @@
 	if (transform != null && transform.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	if (data.cairo == 0 && transform == null) return;
 	initCairo();
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	double[] identity = identity();
 	if (transform != null) {
 		Cairo.cairo_matrix_multiply(identity, transform.handle, identity);
@@ -3966,7 +3966,7 @@
 public Point textExtent(String string, int flags) {
 	if (handle == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (string == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (cairo != 0) {
 		if (OS.GTK_VERSION < OS.VERSION(2, 8, 0)) {
 			//TODO - honor flags
diff -ur x86/org/eclipse/swt/graphics/Image.java x86_64/org/eclipse/swt/graphics/Image.java
--- x86/org/eclipse/swt/graphics/Image.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Image.java	2009-02-11 17:43:50.000000000 -0500
@@ -92,7 +92,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ pixmap;
+	public long /*int*/ pixmap;
 	
 	/**
 	 * The handle to the OS mask resource.
@@ -104,9 +104,9 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ mask;
+	public long /*int*/ mask;
 
-	int /*long*/ surface, surfaceData;
+	long /*int*/ surface, surfaceData;
 	
 	/**
 	 * specifies the transparent pixel
@@ -239,9 +239,9 @@
 	if ((srcImage.type == SWT.ICON && srcImage.mask != 0) || srcImage.transparentPixel != -1) {
 		/* Generate the mask if necessary. */
 		if (srcImage.transparentPixel != -1) srcImage.createMask();
-		int /*long*/ mask = OS.gdk_pixmap_new(0, width, height, 1);
+		long /*int*/ mask = OS.gdk_pixmap_new(0, width, height, 1);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gdkGC = OS.gdk_gc_new(mask);
+		long /*int*/ gdkGC = OS.gdk_gc_new(mask);
 		if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		OS.gdk_draw_drawable(mask, gdkGC, srcImage.mask, 0, 0, 0, 0, width, height);
 		OS.g_object_unref(gdkGC);
@@ -260,9 +260,9 @@
 	createAlphaMask(width, height);
 
 	/* Create the new pixmap */
-	int /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
+	long /*int*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
 	if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	this.pixmap = pixmap;
 	
@@ -272,12 +272,12 @@
 	} else {
 		
 		/* Retrieve the source pixmap data */
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		OS.gdk_pixbuf_get_from_drawable(pixbuf, srcImage.pixmap, colormap, 0, 0, 0, 0, width, height);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	
 		/* Apply transformation */
 		switch (flag) {
@@ -533,7 +533,7 @@
 		char [] chars = new char [length];
 		filename.getChars (0, length, chars, 0);
 		byte [] buffer = Converter.wcsToMbcs(null, chars, true);
-		int /*long*/ pixbuf = OS.gdk_pixbuf_new_from_file(buffer, null);
+		long /*int*/ pixbuf = OS.gdk_pixbuf_new_from_file(buffer, null);
 		if (pixbuf != 0) {
 			boolean hasAlpha = OS.gdk_pixbuf_get_has_alpha(pixbuf);
 			if (hasAlpha) {
@@ -547,7 +547,7 @@
 				int width = OS.gdk_pixbuf_get_width(pixbuf);
 				int height = OS.gdk_pixbuf_get_height(pixbuf);
 				int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-				int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+				long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 				byte[] line = new byte[stride];
 				alphaData = new byte[width * height];
 				for (int y = 0; y < height; y++) {
@@ -560,7 +560,7 @@
 				}
 				createAlphaMask(width, height);
 			}
-			int /*long*/ [] pixmap_return = new int /*long*/ [1];
+			long /*int*/ [] pixmap_return = new long /*int*/ [1];
 			OS.gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, null, 0);
 			this.type = SWT.BITMAP;
 			this.pixmap = pixmap_return[0];
@@ -577,14 +577,14 @@
 	if (device.useXRender && (alpha != -1 || alphaData != null)) {
 		mask = OS.gdk_pixmap_new(0, alpha != -1 ? 1 : width, alpha != -1 ? 1 : height, 8);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ gc = OS.gdk_gc_new(mask);
+		long /*int*/ gc = OS.gdk_gc_new(mask);
 		if (alpha != -1) {
 			GdkColor color = new GdkColor();
 			color.pixel = (alpha & 0xFF) << 8 | (alpha & 0xFF);
 			OS.gdk_gc_set_foreground(gc, color);
 			OS.gdk_draw_rectangle(mask, gc, 1, 0, 0, 1, 1);
 		} else {
-			int /*long*/ imagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
+			long /*int*/ imagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
 			if (imagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			GdkImage gdkImage = new GdkImage();
 			OS.memmove(gdkImage, imagePtr);
@@ -613,7 +613,7 @@
 	if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 }
 
-int /*long*/ createMask(ImageData image, boolean copy) {
+long /*int*/ createMask(ImageData image, boolean copy) {
 	ImageData mask = image.getTransparencyMask();
 	byte[] data = mask.data;
 	byte[] maskData = copy ? new byte[data.length] : data;
@@ -635,21 +635,21 @@
 	OS.gdk_drawable_get_size(pixmap, w, h);
 	int width = w[0], height = h[0];
 	if (mask != 0 || alpha != -1 || alphaData != null) {
-	 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
+	 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, true, 8, width, height);
 		if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-		int /*long*/ colormap = OS.gdk_colormap_get_system();
+		long /*int*/ colormap = OS.gdk_colormap_get_system();
 		OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);		
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);		
 		byte[] line = new byte[stride];
 		if (mask != 0 && OS.gdk_drawable_get_depth(mask) == 1) {
-			int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+			long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 			if (maskPixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			OS.gdk_pixbuf_get_from_drawable(maskPixbuf, mask, 0, 0, 0, 0, 0, width, height);
 			int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-			int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+			long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 			byte[] maskLine = new byte[maskStride];
-			int /*long*/ offset = pixels, maskOffset = maskPixels;
+			long /*int*/ offset = pixels, maskOffset = maskPixels;
 			for (int y=0; y<height; y++) {
 				OS.memmove(line, offset, stride);
 				OS.memmove(maskLine, maskOffset, maskStride);
@@ -667,7 +667,7 @@
 			}
 			OS.g_object_unref(maskPixbuf);
 		} else if (alpha != -1) {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y=0; y<height; y++) {
 				OS.memmove(line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -687,7 +687,7 @@
 				offset += stride;
 			}
 		} else if (alphaData != null) {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y = 0; y < h [0]; y++) {
 				OS.memmove (line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -708,7 +708,7 @@
 				offset += stride;
 			}
 		} else {
-			int /*long*/ offset = pixels;
+			long /*int*/ offset = pixels;
 			for (int y = 0; y < h [0]; y++) {
 				OS.memmove (line, offset, stride);
 				for (int x=0, offset1=0; x<width; x++, offset1 += 4) {
@@ -726,9 +726,9 @@
 		surface = Cairo.cairo_image_surface_create_for_data(surfaceData, Cairo.CAIRO_FORMAT_ARGB32, width, height, stride);
 		OS.g_object_unref(pixbuf);
 	} else {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY();
-		int /*long*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);
-		int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
+		long /*int*/ xDisplay = OS.GDK_DISPLAY();
+		long /*int*/ xDrawable = OS.GDK_PIXMAP_XID(pixmap);
+		long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual(OS.gdk_visual_get_system());
 		surface = Cairo.cairo_xlib_surface_create(xDisplay, xDrawable, xVisual, width, height);
 	}
 	/* Destroy the image mask if the there is a GC created on the image */
@@ -838,12 +838,12 @@
 	int[] w = new int[1], h = new int[1];
  	OS.gdk_drawable_get_size(pixmap, w, h);
  	int width = w[0], height = h[0]; 	
- 	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+ 	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_pixbuf_get_from_drawable(pixbuf, pixmap, colormap, 0, 0, 0, 0, width, height);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] srcData = new byte[stride * height];
 	OS.memmove(srcData, pixels, srcData.length);
 	OS.g_object_unref(pixbuf);
@@ -855,7 +855,7 @@
 
 	if (transparentPixel == -1 && type == SWT.ICON && mask != 0) {
 		/* Get the icon mask data */
-		int /*long*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
+		long /*int*/ gdkImagePtr = OS.gdk_drawable_get_image(mask, 0, 0, width, height);
 		if (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		GdkImage gdkImage = new GdkImage();
 		OS.memmove(gdkImage, gdkImagePtr);
@@ -907,7 +907,7 @@
  *
  * @private
  */
-public static Image gtk_new(Device device, int type, int /*long*/ pixmap, int /*long*/ mask) {
+public static Image gtk_new(Device device, int type, long /*int*/ pixmap, long /*int*/ mask) {
 	Image image = new Image(device);
 	image.type = type;
 	image.pixmap = pixmap;
@@ -943,9 +943,9 @@
 	white.red = (short)0xFFFF;
 	white.green = (short)0xFFFF;
 	white.blue = (short)0xFFFF;
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	OS.gdk_colormap_alloc_color(colormap, white, true, true);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	OS.gdk_gc_set_foreground(gdkGC, white);
 	OS.gdk_draw_rectangle(pixmap, gdkGC, 1, 0, 0, width, height);
 	OS.g_object_unref(gdkGC);
@@ -960,10 +960,10 @@
 	if (!(((image.depth == 1 || image.depth == 2 || image.depth == 4 || image.depth == 8) && !palette.isDirect) ||
 		((image.depth == 8) || (image.depth == 16 || image.depth == 24 || image.depth == 32) && palette.isDirect)))
 			SWT.error (SWT.ERROR_UNSUPPORTED_DEPTH);
-	int /*long*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
+	long /*int*/ pixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, width, height);
 	if (pixbuf == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-	int /*long*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
+	long /*int*/ data = OS.gdk_pixbuf_get_pixels(pixbuf);
 	byte[] buffer = image.data;
 	if (!palette.isDirect || image.depth != 24 || stride != image.bytesPerLine || palette.redMask != 0xFF0000 || palette.greenMask != 0xFF00 || palette.blueMask != 0xFF) {
 		buffer = new byte[stride * height];
@@ -994,9 +994,9 @@
 		}
 	}
 	OS.memmove(data, buffer, stride * height);
-	int /*long*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
+	long /*int*/ pixmap = OS.gdk_pixmap_new (OS.GDK_ROOT_PARENT(), width, height, -1);
 	if (pixmap == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (gdkGC == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	OS.gdk_pixbuf_render_to_drawable(pixbuf, pixmap, gdkGC, 0, 0, 0, 0, width, height, OS.GDK_RGB_DITHER_NORMAL, 0, 0);
 	OS.g_object_unref(gdkGC);
@@ -1017,7 +1017,7 @@
 				transparentPixel = rgb.red << 16 | rgb.green << 8 | rgb.blue;
 			}
 		}
-		int /*long*/ mask = createMask(image, isIcon);
+		long /*int*/ mask = createMask(image, isIcon);
 		if (mask == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 		this.mask = mask;
 		if (isIcon) {
@@ -1051,12 +1051,12 @@
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	if (pixmap == 0) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (type != SWT.BITMAP || memGC != null) {
 		SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ gdkGC = OS.gdk_gc_new(pixmap);
+	long /*int*/ gdkGC = OS.gdk_gc_new(pixmap);
 	if (data != null) {
 		int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;
 		if ((data.style & mask) == 0) {
@@ -1089,7 +1089,7 @@
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	OS.g_object_unref(gdkGC);
 }
 
diff -ur x86/org/eclipse/swt/graphics/Path.java x86_64/org/eclipse/swt/graphics/Path.java
--- x86/org/eclipse/swt/graphics/Path.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Path.java	2009-02-11 17:43:48.000000000 -0500
@@ -47,7 +47,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
 	boolean moved, closed = true;
 
@@ -76,7 +76,7 @@
 public Path (Device device) {
 	super(device);
 	this.device.checkCairo();
-	int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
+	long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	handle = Cairo.cairo_create(surface);
 	Cairo.cairo_surface_destroy(surface);
@@ -119,12 +119,12 @@
 	super(device);
 	if (path == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (path.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
+	long /*int*/ surface = Cairo.cairo_image_surface_create(Cairo.CAIRO_FORMAT_ARGB32, 1, 1);
 	if (surface == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	handle = Cairo.cairo_create(surface);
 	Cairo.cairo_surface_destroy(surface);
 	if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ copy;
+	long /*int*/ copy;
 	flatness = Math.max(0, flatness);
 	if (flatness == 0) {
 		copy = Cairo.cairo_copy_path(path.handle);		
@@ -249,7 +249,7 @@
 	if (path == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (path.isDisposed()) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	moved = false;
-	int /*long*/ copy = Cairo.cairo_copy_path(path.handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(path.handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(handle, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -348,8 +348,8 @@
 	gc.initCairo();
 	gc.checkGC(GC.LINE_CAP | GC.LINE_JOIN | GC.LINE_STYLE | GC.LINE_WIDTH);
 	boolean result = false;
-	int /*long*/ cairo = gc.data.cairo;
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ cairo = gc.data.cairo;
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	Cairo.cairo_append_path(cairo, copy);
 	Cairo.cairo_path_destroy(copy);
@@ -407,7 +407,7 @@
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
 	if (bounds == null) SWT.error(SWT.ERROR_NULL_ARGUMENT);
 	if (bounds.length < 4) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	cairo_path_t path = new cairo_path_t();
 	Cairo.memmove(path, copy, cairo_path_t.sizeof);
@@ -419,7 +419,7 @@
 		double[] points = new double[6]; 
 		cairo_path_data_t data = new cairo_path_data_t();
 		while (i < path.num_data) {
-			int /*long*/ offset = path.data + i * cairo_path_data_t.sizeof;
+			long /*int*/ offset = path.data + i * cairo_path_data_t.sizeof;
 			Cairo.memmove(data, offset, cairo_path_data_t.sizeof);
 			switch (data.type) {
 				case Cairo.CAIRO_PATH_MOVE_TO:
@@ -500,7 +500,7 @@
  */
 public PathData getPathData() {
 	if (isDisposed()) SWT.error(SWT.ERROR_GRAPHIC_DISPOSED);
-	int /*long*/ copy = Cairo.cairo_copy_path(handle);
+	long /*int*/ copy = Cairo.cairo_copy_path(handle);
 	if (copy == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	cairo_path_t path = new cairo_path_t();
 	Cairo.memmove(path, copy, cairo_path_t.sizeof);
@@ -512,7 +512,7 @@
 		double[] points = new double[6]; 
 		cairo_path_data_t data = new cairo_path_data_t();
 		while (i < path.num_data) {
-			int /*long*/ offset = path.data + i * cairo_path_data_t.sizeof;
+			long /*int*/ offset = path.data + i * cairo_path_data_t.sizeof;
 			Cairo.memmove(data, offset, cairo_path_data_t.sizeof);
 			switch (data.type) {
 				case Cairo.CAIRO_PATH_MOVE_TO:
diff -ur x86/org/eclipse/swt/graphics/Pattern.java x86_64/org/eclipse/swt/graphics/Pattern.java
--- x86/org/eclipse/swt/graphics/Pattern.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Pattern.java	2009-02-11 17:43:48.000000000 -0500
@@ -44,9 +44,9 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	
-	int /*long*/ surface;
+	long /*int*/ surface;
 
 /**
  * Constructs a new Pattern given an image. Drawing with the resulting
diff -ur x86/org/eclipse/swt/graphics/Region.java x86_64/org/eclipse/swt/graphics/Region.java
--- x86/org/eclipse/swt/graphics/Region.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/Region.java	2009-02-11 17:43:50.000000000 -0500
@@ -38,7 +38,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 
 /**
  * Constructs a new empty region.
@@ -77,7 +77,7 @@
 	init();
 }
 
-Region(Device device, int /*long*/ handle) {
+Region(Device device, long /*int*/ handle) {
 	super(device);
 	this.handle = handle;
 }
@@ -107,7 +107,7 @@
 	* with enough points for a polygon.
 	*/
 	if (pointArray.length < 6) return;
-	int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gdk_region_union(handle, polyRgn);
 	OS.gdk_region_destroy(polyRgn);
 }
@@ -263,7 +263,7 @@
 	return new Rectangle(gdkRect.x, gdkRect.y, gdkRect.width, gdkRect.height);
 }
 
-public static Region gtk_new(Device device, int /*long*/ handle) {
+public static Region gtk_new(Device device, long /*int*/ handle) {
 	return new Region(device, handle);
 }
 
@@ -329,7 +329,7 @@
 	gdkRect.y = y;
 	gdkRect.width = width;
 	gdkRect.height = height;
-	int /*long*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
+	long /*int*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
 	OS.gdk_region_intersect(handle, rectRgn);
 	OS.gdk_region_destroy(rectRgn);
 }
@@ -460,7 +460,7 @@
 	* with enough points for a polygon.
 	*/
 	if (pointArray.length < 6) return;
-	int /*long*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ polyRgn = OS.gdk_region_polygon(pointArray, pointArray.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gdk_region_subtract(handle, polyRgn);
 	OS.gdk_region_destroy(polyRgn);
 }
@@ -513,7 +513,7 @@
 	gdkRect.y = y;
 	gdkRect.width = width;
 	gdkRect.height = height;
-	int /*long*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
+	long /*int*/ rectRgn = OS.gdk_region_rectangle(gdkRect);
 	OS.gdk_region_subtract(handle, rectRgn);
 	OS.gdk_region_destroy(rectRgn);
 }
diff -ur x86/org/eclipse/swt/graphics/TextLayout.java x86_64/org/eclipse/swt/graphics/TextLayout.java
--- x86/org/eclipse/swt/graphics/TextLayout.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/graphics/TextLayout.java	2009-02-11 17:43:50.000000000 -0500
@@ -51,7 +51,7 @@
 	int[] segments;
 	int[] tabs;
 	StyleItem[] styles;
-	int /*long*/ layout, context, attrList;
+	long /*int*/ layout, context, attrList;
 	int[] invalidOffsets;
 	static final char LTR_MARK = '\u200E', RTL_MARK = '\u200F', ZWS = '\u200B', ZWNBS = '\uFEFF';
 
@@ -103,7 +103,7 @@
 	byte[] buffer = Converter.wcsToMbcs(null, segmentsText, false);
 	OS.pango_layout_set_text (layout, buffer, buffer.length);
 	if (styles.length == 2 && styles[0].style == null && ascent == -1 && descent == -1 && segments == null) return;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	attrList = OS.pango_attr_list_new();	
 	PangoAttribute attribute = new PangoAttribute();
 	char[] chars = null;
@@ -117,12 +117,12 @@
 		int oldPos = 0, lineIndex = 0;
 		PangoLayoutLine line = new PangoLayoutLine();
 		while (lineIndex < lineCount) {
-			int /*long*/ linePtr = OS.pango_layout_get_line(layout, lineIndex);
+			long /*int*/ linePtr = OS.pango_layout_get_line(layout, lineIndex);
 			OS.memmove(line, linePtr, PangoLayoutLine.sizeof);
 			int bytePos = line.start_index;
 			/* Note: The length in bytes of ZWS and ZWNBS are both equals to 3 */
 			int offset = lineIndex * 6;
-			int /*long*/ attr = OS.pango_attr_shape_new (rect, rect);
+			long /*int*/ attr = OS.pango_attr_shape_new (rect, rect);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = bytePos + offset;
 			attribute.end_index = bytePos + offset + 3;
@@ -178,7 +178,7 @@
 		byteEnd = Math.min(byteEnd, strlen);
 		Font font = style.font;
 		if (font != null && !font.isDisposed() && !defaultFont.equals(font)) {
-			int /*long*/ attr = OS.pango_attr_font_desc_new (font.handle);
+			long /*int*/ attr = OS.pango_attr_font_desc_new (font.handle);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -202,7 +202,7 @@
 					break;
 			}
 			if (underlineStyle != OS.PANGO_UNDERLINE_NONE && style.underlineColor == null) {
-				int /*long*/ attr = OS.pango_attr_underline_new(underlineStyle);
+				long /*int*/ attr = OS.pango_attr_underline_new(underlineStyle);
 				OS.memmove(attribute, attr, PangoAttribute.sizeof);
 				attribute.start_index = byteStart;
 				attribute.end_index = byteEnd;
@@ -211,7 +211,7 @@
 			}
 		}
 		if (style.strikeout && style.strikeoutColor == null) {
-			int /*long*/ attr = OS.pango_attr_strikethrough_new(true);
+			long /*int*/ attr = OS.pango_attr_strikethrough_new(true);
 			OS.memmove(attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -221,7 +221,7 @@
 		Color foreground = style.foreground;
 		if (foreground != null && !foreground.isDisposed()) {
 			GdkColor fg = foreground.handle;
-			int /*long*/ attr = OS.pango_attr_foreground_new(fg.red, fg.green, fg.blue);
+			long /*int*/ attr = OS.pango_attr_foreground_new(fg.red, fg.green, fg.blue);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -231,7 +231,7 @@
 		Color background = style.background;
 		if (background != null && !background.isDisposed()) {
 			GdkColor bg = background.handle;
-			int /*long*/ attr = OS.pango_attr_background_new(bg.red, bg.green, bg.blue);
+			long /*int*/ attr = OS.pango_attr_background_new(bg.red, bg.green, bg.blue);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -244,7 +244,7 @@
 			rect.y =  -(metrics.ascent * OS.PANGO_SCALE);
 			rect.height = (metrics.ascent + metrics.descent) * OS.PANGO_SCALE;
 			rect.width = metrics.width * OS.PANGO_SCALE;
-			int /*long*/ attr = OS.pango_attr_shape_new (rect, rect);
+			long /*int*/ attr = OS.pango_attr_shape_new (rect, rect);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -253,7 +253,7 @@
 		}
 		int rise = style.rise;
 		if (rise != 0) {
-			int /*long*/ attr = OS.pango_attr_rise_new (rise * OS.PANGO_SCALE);
+			long /*int*/ attr = OS.pango_attr_rise_new (rise * OS.PANGO_SCALE);
 			OS.memmove (attribute, attr, PangoAttribute.sizeof);
 			attribute.start_index = byteStart;
 			attribute.end_index = byteEnd;
@@ -378,15 +378,15 @@
 	int length = text.length();
 	boolean hasSelection = selectionStart <= selectionEnd && selectionStart != -1 && selectionEnd != -1;
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	if (flags != 0 && (hasSelection || (flags & SWT.LAST_LINE_SELECTION) != 0)) {
-		int /*long*/[] attrs = new int /*long*/[1];
+		long /*int*/[] attrs = new long /*int*/[1];
 		int[] nAttrs = new int[1];
 		PangoLogAttr logAttr = new PangoLogAttr();
 		PangoRectangle rect = new PangoRectangle();
 		int lineCount = OS.pango_layout_get_line_count(layout);
-		int /*long*/ ptr = OS.pango_layout_get_text(layout);
-		int /*long*/ iter = OS.pango_layout_get_iter(layout);
+		long /*int*/ ptr = OS.pango_layout_get_text(layout);
+		long /*int*/ iter = OS.pango_layout_get_iter(layout);
 		if (selectionBackground == null) selectionBackground = device.getSystemColor(SWT.COLOR_LIST_SELECTION);
 		if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 			Cairo.cairo_save(cairo);
@@ -473,7 +473,7 @@
 		boolean fullSelection = selectionStart == 0 && selectionEnd == length - 1;
 		if (fullSelection) {
 			if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
-				int /*long*/ ptr = OS.pango_layout_get_text(layout);
+				long /*int*/ ptr = OS.pango_layout_get_text(layout);
 				if ((data.style & SWT.MIRRORED) != 0) {
 					Cairo.cairo_save(cairo);
 					Cairo.cairo_scale(cairo, -1,  1);
@@ -488,7 +488,7 @@
 				drawBorder(gc, x, y, selectionForeground.handle);
 			}
 		} else {
-			int /*long*/ ptr = OS.pango_layout_get_text(layout);
+			long /*int*/ ptr = OS.pango_layout_get_text(layout);
 			int byteSelStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, selectionStart) - ptr);
 			int byteSelEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, selectionEnd + 1) - ptr);
 			int strlen = OS.strlen(ptr);
@@ -510,7 +510,7 @@
 				OS.gdk_draw_layout(data.drawable, gc.handle, x, y, layout);
 				drawBorder(gc, x, y, null);
 				int[] ranges = new int[]{byteSelStart, byteSelEnd};
-				int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+				long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 				if (rgn != 0) {
 					OS.gdk_gc_set_clip_region(gc.handle, rgn);
 					OS.gdk_region_destroy(rgn);
@@ -526,7 +526,7 @@
 
 void drawWithCairo(GC gc, int x, int y, int start, int end, boolean fullSelection, GdkColor fg, GdkColor bg) {
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
+	long /*int*/ cairo = data.cairo;
 	Cairo.cairo_save(cairo);
 	if (!fullSelection) {
 		Cairo.cairo_move_to(cairo, x, y);
@@ -534,7 +534,7 @@
 		drawBorder(gc, x, y, null);
 	}
 	int[] ranges = new int[]{start, end};
-	int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+	long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 	if (rgn != 0) {
 		OS.gdk_cairo_region(cairo, rgn);
 		Cairo.cairo_clip(cairo);
@@ -551,9 +551,9 @@
 
 void drawBorder(GC gc, int x, int y, GdkColor selectionColor) {
 	GCData data = gc.data;
-	int /*long*/ cairo = data.cairo;
-	int /*long*/ gdkGC = gc.handle;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ cairo = data.cairo;
+	long /*int*/ gdkGC = gc.handle;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	GdkGCValues gcValues = null;
 	if (cairo != 0 && OS.GTK_VERSION >= OS.VERSION(2, 8, 0)) {
 		Cairo.cairo_save(cairo);
@@ -573,10 +573,10 @@
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -651,10 +651,10 @@
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -677,8 +677,8 @@
 					Font font = style.font;
 					if (font == null) font = this.font;
 					if (font == null) font = device.systemFont;
-					int /*long*/ lang = OS.pango_context_get_language(context);
-					int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+					long /*int*/ lang = OS.pango_context_get_language(context);
+					long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 					underlinePosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_position(metrics));
 					underlineThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_underline_thickness(metrics));
 					OS.pango_font_metrics_unref(metrics);
@@ -749,10 +749,10 @@
 			int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, start) - ptr);
 			int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, end + 1) - ptr);
 			int[] ranges = new int[]{byteStart, byteEnd};
-			int /*long*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
+			long /*int*/ rgn = OS.gdk_pango_layout_get_clip_region(layout, x, y, ranges, ranges.length / 2);
 			if (rgn != 0) {
 				int[] nRects = new int[1];
-				int /*long*/[] rects = new int /*long*/[1];
+				long /*int*/[] rects = new long /*int*/[1];
 				OS.gdk_region_get_rectangles(rgn, rects, nRects);
 				GdkRectangle rect = new GdkRectangle();
 				GdkColor color = null;
@@ -775,8 +775,8 @@
 					Font font = style.font;
 					if (font == null) font = this.font;
 					if (font == null) font = device.systemFont;
-					int /*long*/ lang = OS.pango_context_get_language(context);
-					int /*long*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
+					long /*int*/ lang = OS.pango_context_get_language(context);
+					long /*int*/ metrics = OS.pango_context_get_metrics(context, font.handle, lang);
 					strikeoutPosition = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_position(metrics));
 					strikeoutThickness = OS.PANGO_PIXELS(OS.pango_font_metrics_get_strikethrough_thickness(metrics));
 					OS.pango_font_metrics_unref(metrics);
@@ -914,14 +914,14 @@
 	end = Math.min(Math.max(0, end), length - 1);
 	start = translateOffset(start);
 	end = translateOffset(end);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int byteStart = (int)/*64*/(OS.g_utf8_offset_to_pointer (ptr, start) - ptr);
 	int byteEnd = (int)/*64*/(OS.g_utf8_offset_to_pointer (ptr, end + 1) - ptr);
 	int strlen = OS.strlen(ptr);
 	byteStart = Math.min(byteStart, strlen);
 	byteEnd = Math.min(byteEnd, strlen);
 	int[] ranges = new int[]{byteStart, byteEnd};
-	int /*long*/ clipRegion = OS.gdk_pango_layout_get_clip_region(layout, 0, 0, ranges, 1);
+	long /*int*/ clipRegion = OS.gdk_pango_layout_get_clip_region(layout, 0, 0, ranges, 1);
 	if (clipRegion == 0) return new Rectangle(0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle();
 	
@@ -931,9 +931,9 @@
 	* is to subtract these areas from the clip region.
 	*/
 	PangoRectangle pangoRect = new PangoRectangle();
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
-	int /*long*/ linesRegion = OS.gdk_region_new();
+	long /*int*/ linesRegion = OS.gdk_region_new();
 	if (linesRegion == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int lineEnd = 0;
 	do {
@@ -1048,17 +1048,17 @@
 	int length = text.length();
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);
 	offset = translateOffset(offset);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	int level = 0;
 	PangoItem item = new PangoItem();
 	PangoLayoutRun run = new PangoLayoutRun();
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
-	int /*long*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr, offset) - ptr;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr, offset) - ptr;
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
 	do {
-		int /*long*/ runPtr = OS.pango_layout_iter_get_run(iter);
+		long /*int*/ runPtr = OS.pango_layout_iter_get_run(iter);
 		if (runPtr != 0) {
 			OS.memmove(run, runPtr, PangoLayoutRun.sizeof);
 			OS.memmove(item, run.item, PangoItem.sizeof);
@@ -1090,7 +1090,7 @@
 	computeRuns();
 	int lineCount = OS.pango_layout_get_line_count(layout);
 	if (!(0 <= lineIndex && lineIndex < lineCount)) SWT.error(SWT.ERROR_INVALID_RANGE);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	for (int i = 0; i < lineIndex; i++) OS.pango_layout_iter_next_line(iter);
 	PangoRectangle rect = new PangoRectangle();
@@ -1146,11 +1146,11 @@
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
 	offset = translateOffset(offset);
 	int line = 0;
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
-	int /*long*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr,offset) - ptr;
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ byteOffset = OS.g_utf8_offset_to_pointer(ptr,offset) - ptr;
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	while (OS.pango_layout_iter_next_line(iter)) {
 		if (OS.pango_layout_iter_get_index(iter) > byteOffset) break;
@@ -1182,9 +1182,9 @@
 	PangoLayoutLine line = new PangoLayoutLine();
 	OS.memmove(line, OS.pango_layout_get_line(layout, lineIndex), PangoLayoutLine.sizeof);
 	if (line.runs == 0) {
-		int /*long*/ font = this.font != null ? this.font.handle : device.systemFont.handle;
-		int /*long*/ lang = OS.pango_context_get_language(context);
-		int /*long*/ metrics = OS.pango_context_get_metrics(context, font, lang);
+		long /*int*/ font = this.font != null ? this.font.handle : device.systemFont.handle;
+		long /*int*/ lang = OS.pango_context_get_language(context);
+		long /*int*/ metrics = OS.pango_context_get_metrics(context, font, lang);
 		ascent = OS.pango_font_metrics_get_ascent(metrics);
 		descent = OS.pango_font_metrics_get_descent(metrics);
 		OS.pango_font_metrics_unref(metrics);
@@ -1215,10 +1215,10 @@
 	computeRuns();
 	int lineCount = OS.pango_layout_get_line_count(layout);
 	int[] offsets = new int [lineCount + 1];
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	PangoLayoutLine line = new PangoLayoutLine();
 	for (int i = 0; i < lineCount; i++) {
-		int /*long*/ linePtr = OS.pango_layout_get_line(layout, i);
+		long /*int*/ linePtr = OS.pango_layout_get_line(layout, i);
 		OS.memmove(line, linePtr, PangoLayoutLine.sizeof);
 		int pos = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + line.start_index);
 		offsets[i] = untranslateOffset(pos);
@@ -1249,7 +1249,7 @@
 	int length = text.length();
 	if (!(0 <= offset && offset <= length)) SWT.error(SWT.ERROR_INVALID_RANGE);
 	offset = translateOffset(offset);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int byteOffset = (int)/*64*/(OS.g_utf8_offset_to_pointer(ptr, offset) - ptr);
 	int strlen = OS.strlen(ptr);
 	byteOffset = Math.min(byteOffset, strlen);
@@ -1299,7 +1299,7 @@
 	}
 	int step = forward ? 1 : -1;
 	if ((movement & SWT.MOVEMENT_CHAR) != 0) return offset + step;
-	int /*long*/[] attrs = new int /*long*/[1];
+	long /*int*/[] attrs = new long /*int*/[1];
 	int[] nAttrs = new int[1];
 	OS.pango_layout_get_log_attrs(layout, attrs, nAttrs);
 	if (attrs[0] == 0) return offset + step;
@@ -1396,7 +1396,7 @@
 	* visual offset. The fix is to clamp the coordinates inside the  
 	* line bounds.
 	*/
-	int /*long*/ iter = OS.pango_layout_get_iter(layout);
+	long /*int*/ iter = OS.pango_layout_get_iter(layout);
 	if (iter == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	PangoRectangle rect = new PangoRectangle();
 	do {
@@ -1416,7 +1416,7 @@
 	int[] index = new int[1];
 	int[] piTrailing = new int[1];
 	OS.pango_layout_xy_to_index(layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, piTrailing);
-	int /*long*/ ptr = OS.pango_layout_get_text(layout);
+	long /*int*/ ptr = OS.pango_layout_get_text(layout);
 	int offset = (int)/*64*/OS.g_utf8_pointer_to_offset(ptr, ptr + index[0]);
 	if (trailing != null) trailing[0] = piTrailing[0];
 	return untranslateOffset(offset);
@@ -2021,7 +2021,7 @@
 	if (tabs == null) {
 		OS.pango_layout_set_tabs(layout, device.emptyTab);
 	} else {
-		int /*long*/ tabArray = OS.pango_tab_array_new(tabs.length, true);
+		long /*int*/ tabArray = OS.pango_tab_array_new(tabs.length, true);
 		if (tabArray != 0) {
 			for (int i = 0; i < tabs.length; i++) {
 				OS.pango_tab_array_set_tab(tabArray, i, OS.PANGO_TAB_LEFT, tabs[i]);
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkActionIface.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,12 +17,12 @@
 
 public class AtkActionIface {
 //	GTypeInterface parent;
-	public int /*long*/ do_action;
-	public int /*long*/ get_n_actions;
-	public int /*long*/ get_description;
-	public int /*long*/ get_name;
-	public int /*long*/ get_keybinding;
-	public int /*long*/ set_description;	
+	public long /*int*/ do_action;
+	public long /*int*/ get_n_actions;
+	public long /*int*/ get_description;
+	public long /*int*/ get_name;
+	public long /*int*/ get_keybinding;
+	public long /*int*/ set_description;	
 //   AtkFunction             pad1;
 //   AtkFunction             pad2;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkComponentIface.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,17 +16,17 @@
 
 
 public class AtkComponentIface {
-	public int /*long*/ add_focus_handler;
-	public int /*long*/ contains;
-	public int /*long*/ ref_accessible_at_point;
-	public int /*long*/ get_extents;
-	public int /*long*/ get_position;
-	public int /*long*/ get_size;
-	public int /*long*/ grab_focus;
-	public int /*long*/ remove_focus_handler;
-	public int /*long*/ set_extents;
-	public int /*long*/ set_position;
-	public int /*long*/ set_size;
-	public int /*long*/ get_layer;
-	public int /*long*/ get_mdi_zorder;
+	public long /*int*/ add_focus_handler;
+	public long /*int*/ contains;
+	public long /*int*/ ref_accessible_at_point;
+	public long /*int*/ get_extents;
+	public long /*int*/ get_position;
+	public long /*int*/ get_size;
+	public long /*int*/ grab_focus;
+	public long /*int*/ remove_focus_handler;
+	public long /*int*/ set_extents;
+	public long /*int*/ set_position;
+	public long /*int*/ set_size;
+	public long /*int*/ get_layer;
+	public long /*int*/ get_mdi_zorder;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkHypertextIface.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class AtkHypertextIface {
-	public int /*long*/ get_link;
-	public int /*long*/ get_n_links;
-	public int /*long*/ get_link_index;
+	public long /*int*/ get_link;
+	public long /*int*/ get_n_links;
+	public long /*int*/ get_link_index;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/ATK.java x86_64/org/eclipse/swt/internal/accessibility/gtk/ATK.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/ATK.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/ATK.java	2009-02-11 17:43:48.000000000 -0500
@@ -90,8 +90,8 @@
 public static final native int AtkObjectFactoryClass_sizeof ();
 	
 /** Natives */
-public static final native int /*long*/ _ATK_ACTION_GET_IFACE (int /*long*/ obj);
-public static final int /*long*/ ATK_ACTION_GET_IFACE (int /*long*/ obj) {
+public static final native long /*int*/ _ATK_ACTION_GET_IFACE (long /*int*/ obj);
+public static final long /*int*/ ATK_ACTION_GET_IFACE (long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _ATK_ACTION_GET_IFACE(obj);
@@ -99,8 +99,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_COMPONENT_GET_IFACE(int /*long*/ atkHandle);
-public static final int /*long*/ ATK_COMPONENT_GET_IFACE(int /*long*/ atkHandle) {
+public static final native long /*int*/ _ATK_COMPONENT_GET_IFACE(long /*int*/ atkHandle);
+public static final long /*int*/ ATK_COMPONENT_GET_IFACE(long /*int*/ atkHandle) {
 	lock.lock();
 	try {
 		return _ATK_COMPONENT_GET_IFACE(atkHandle);
@@ -108,8 +108,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_OBJECT_FACTORY_CLASS (int /*long*/ klass);
-public static final int /*long*/ ATK_OBJECT_FACTORY_CLASS (int /*long*/ klass) {
+public static final native long /*int*/ _ATK_OBJECT_FACTORY_CLASS (long /*int*/ klass);
+public static final long /*int*/ ATK_OBJECT_FACTORY_CLASS (long /*int*/ klass) {
 	lock.lock();
 	try {
 		return _ATK_OBJECT_FACTORY_CLASS(klass);
@@ -117,8 +117,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_SELECTION_GET_IFACE (int /*long*/ obj);
-public static final int /*long*/ ATK_SELECTION_GET_IFACE (int /*long*/ obj) {
+public static final native long /*int*/ _ATK_SELECTION_GET_IFACE (long /*int*/ obj);
+public static final long /*int*/ ATK_SELECTION_GET_IFACE (long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _ATK_SELECTION_GET_IFACE(obj);
@@ -126,8 +126,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _ATK_TEXT_GET_IFACE (int /*long*/ handle);
-public static final int /*long*/ ATK_TEXT_GET_IFACE (int /*long*/ handle) {
+public static final native long /*int*/ _ATK_TEXT_GET_IFACE (long /*int*/ handle);
+public static final long /*int*/ ATK_TEXT_GET_IFACE (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _ATK_TEXT_GET_IFACE(handle);
@@ -135,8 +135,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_ACCESSIBLE (int /*long*/ handle);
-public static final int /*long*/ GTK_ACCESSIBLE (int /*long*/ handle) {
+public static final native long /*int*/ _GTK_ACCESSIBLE (long /*int*/ handle);
+public static final long /*int*/ GTK_ACCESSIBLE (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _GTK_ACCESSIBLE(handle);
@@ -144,8 +144,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _atk_focus_tracker_notify (int /*long*/ object);
-public static final void atk_focus_tracker_notify (int /*long*/ object) {
+public static final native void _atk_focus_tracker_notify (long /*int*/ object);
+public static final void atk_focus_tracker_notify (long /*int*/ object) {
 	lock.lock();
 	try {
 		_atk_focus_tracker_notify(object);
@@ -153,8 +153,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_get_default_registry ();
-public static final int /*long*/ atk_get_default_registry () {
+public static final native long /*int*/ _atk_get_default_registry ();
+public static final long /*int*/ atk_get_default_registry () {
 	lock.lock();
 	try {
 		return _atk_get_default_registry();
@@ -162,8 +162,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_object_factory_create_accessible (int /*long*/ factory, int /*long*/ obj);
-public static final int /*long*/ atk_object_factory_create_accessible (int /*long*/ factory, int /*long*/ obj) {
+public static final native long /*int*/ _atk_object_factory_create_accessible (long /*int*/ factory, long /*int*/ obj);
+public static final long /*int*/ atk_object_factory_create_accessible (long /*int*/ factory, long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _atk_object_factory_create_accessible(factory, obj);
@@ -171,8 +171,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_object_factory_get_accessible_type (int /*long*/ factory);
-public static final int /*long*/ atk_object_factory_get_accessible_type (int /*long*/ factory) {
+public static final native long /*int*/ _atk_object_factory_get_accessible_type (long /*int*/ factory);
+public static final long /*int*/ atk_object_factory_get_accessible_type (long /*int*/ factory) {
 	lock.lock();
 	try {
 		return _atk_object_factory_get_accessible_type(factory);
@@ -180,8 +180,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _atk_object_initialize (int /*long*/ accessible, int /*long*/ data);
-public static final void atk_object_initialize (int /*long*/ accessible, int /*long*/ data) {
+public static final native void _atk_object_initialize (long /*int*/ accessible, long /*int*/ data);
+public static final void atk_object_initialize (long /*int*/ accessible, long /*int*/ data) {
 	lock.lock();
 	try {
 		_atk_object_initialize(accessible, data);
@@ -189,8 +189,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_object_ref_relation_set (int /*long*/ accessible);
-public static final int /*long*/ atk_object_ref_relation_set (int /*long*/ accessible) {
+public static final native long /*int*/ _atk_object_ref_relation_set (long /*int*/ accessible);
+public static final long /*int*/ atk_object_ref_relation_set (long /*int*/ accessible) {
 	lock.lock();
 	try {
 		return _atk_object_ref_relation_set(accessible);
@@ -198,8 +198,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_registry_get_factory (int /*long*/ registry, int /*long*/ type);
-public static final int /*long*/ atk_registry_get_factory (int /*long*/ registry, int /*long*/ type) {
+public static final native long /*int*/ _atk_registry_get_factory (long /*int*/ registry, long /*int*/ type);
+public static final long /*int*/ atk_registry_get_factory (long /*int*/ registry, long /*int*/ type) {
 	lock.lock();
 	try {
 		return _atk_registry_get_factory(registry, type);
@@ -207,8 +207,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _atk_registry_set_factory_type (int /*long*/ registry, int /*long*/ type, int /*long*/ factory_type);
-public static final void atk_registry_set_factory_type (int /*long*/ registry, int /*long*/ type, int /*long*/ factory_type) {
+public static final native void _atk_registry_set_factory_type (long /*int*/ registry, long /*int*/ type, long /*int*/ factory_type);
+public static final void atk_registry_set_factory_type (long /*int*/ registry, long /*int*/ type, long /*int*/ factory_type) {
 	lock.lock();
 	try {
 		_atk_registry_set_factory_type(registry, type, factory_type);
@@ -216,8 +216,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _atk_relation_set_get_n_relations (int /*long*/ set);
-public static final int atk_relation_set_get_n_relations (int /*long*/ set) {
+public static final native int _atk_relation_set_get_n_relations (long /*int*/ set);
+public static final int atk_relation_set_get_n_relations (long /*int*/ set) {
 	lock.lock();
 	try {
 		return _atk_relation_set_get_n_relations(set);
@@ -225,8 +225,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_relation_set_get_relation (int /*long*/ set, int i);
-public static final int /*long*/ atk_relation_set_get_relation (int /*long*/ set, int i) {
+public static final native long /*int*/ _atk_relation_set_get_relation (long /*int*/ set, int i);
+public static final long /*int*/ atk_relation_set_get_relation (long /*int*/ set, int i) {
 	lock.lock();
 	try {
 		return _atk_relation_set_get_relation (set, i);
@@ -234,8 +234,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _atk_relation_set_remove (int /*long*/ set, int /*long*/ relation);
-public static final void atk_relation_set_remove (int /*long*/ set, int /*long*/ relation) {
+public static final native void _atk_relation_set_remove (long /*int*/ set, long /*int*/ relation);
+public static final void atk_relation_set_remove (long /*int*/ set, long /*int*/ relation) {
 	lock.lock();
 	try {
 		_atk_relation_set_remove (set, relation);
@@ -243,8 +243,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _atk_state_set_add_state (int /*long*/ set, int type);
-public static final boolean atk_state_set_add_state (int /*long*/ set, int type) {
+public static final native boolean _atk_state_set_add_state (long /*int*/ set, int type);
+public static final boolean atk_state_set_add_state (long /*int*/ set, int type) {
 	lock.lock();
 	try {
 		return _atk_state_set_add_state(set, type);
@@ -252,8 +252,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _atk_state_set_new ();
-public static final int /*long*/ atk_state_set_new () {
+public static final native long /*int*/ _atk_state_set_new ();
+public static final long /*int*/ atk_state_set_new () {
 	lock.lock();
 	try {
 		return _atk_state_set_new();
@@ -261,8 +261,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0) {
 	lock.lock();
 	try {
 		return _call(function, arg0);
@@ -270,8 +270,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1);
@@ -279,8 +279,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2);
@@ -288,8 +288,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3);
@@ -297,8 +297,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4);
@@ -306,8 +306,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4, arg5);
@@ -315,19 +315,19 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove (AtkActionIface dest, int /*long*/ src);
-public static final native void memmove (AtkComponentIface dest, int /*long*/ src);
-public static final native void memmove (AtkHypertextIface dest, int /*long*/ src);
-public static final native void memmove (AtkObjectClass dest, int /*long*/ src);
-public static final native void memmove (AtkObjectFactoryClass  dest, int /*long*/ src);
-public static final native void memmove (AtkSelectionIface dest, int /*long*/ src);	
-public static final native void memmove (AtkTextIface dest, int /*long*/ src);
-public static final native void memmove (GtkAccessible  dest, int /*long*/ src);
-public static final native void memmove (int /*long*/ dest, AtkActionIface src);
-public static final native void memmove (int /*long*/ dest, AtkComponentIface src);
-public static final native void memmove (int /*long*/ dest, AtkHypertextIface src);
-public static final native void memmove (int /*long*/ dest, AtkObjectClass src);
-public static final native void memmove (int /*long*/ dest, AtkObjectFactoryClass src);
-public static final native void memmove (int /*long*/ dest, AtkSelectionIface src);
-public static final native void memmove (int /*long*/ dest, AtkTextIface src);
+public static final native void memmove (AtkActionIface dest, long /*int*/ src);
+public static final native void memmove (AtkComponentIface dest, long /*int*/ src);
+public static final native void memmove (AtkHypertextIface dest, long /*int*/ src);
+public static final native void memmove (AtkObjectClass dest, long /*int*/ src);
+public static final native void memmove (AtkObjectFactoryClass  dest, long /*int*/ src);
+public static final native void memmove (AtkSelectionIface dest, long /*int*/ src);	
+public static final native void memmove (AtkTextIface dest, long /*int*/ src);
+public static final native void memmove (GtkAccessible  dest, long /*int*/ src);
+public static final native void memmove (long /*int*/ dest, AtkActionIface src);
+public static final native void memmove (long /*int*/ dest, AtkComponentIface src);
+public static final native void memmove (long /*int*/ dest, AtkHypertextIface src);
+public static final native void memmove (long /*int*/ dest, AtkObjectClass src);
+public static final native void memmove (long /*int*/ dest, AtkObjectFactoryClass src);
+public static final native void memmove (long /*int*/ dest, AtkSelectionIface src);
+public static final native void memmove (long /*int*/ dest, AtkTextIface src);
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkObjectClass.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,27 +16,27 @@
 
 
 public class AtkObjectClass {
-	public int /*long*/ get_name;
-	public int /*long*/ get_description;
-	public int /*long*/ get_parent;
-	public int /*long*/ get_n_children;
-	public int /*long*/ ref_child;
-	public int /*long*/ get_index_in_parent;
-	public int /*long*/ ref_relation_set;
-	public int /*long*/ get_role;
-	public int /*long*/ get_layer;
-	public int /*long*/ get_mdi_zorder;
-	public int /*long*/ ref_state_set;
-	public int /*long*/ set_name;
-	public int /*long*/ set_description;
-	public int /*long*/ set_parent;
-	public int /*long*/ set_role;
-	public int /*long*/ connect_property_change_handler;
-	public int /*long*/ remove_property_change_handler;
-	public int /*long*/ initialize;
-	public int /*long*/ children_changed;
-	public int /*long*/ focus_event;
-	public int /*long*/ property_change;
-	public int /*long*/ state_change;
-	public int /*long*/ visible_data_changed;
+	public long /*int*/ get_name;
+	public long /*int*/ get_description;
+	public long /*int*/ get_parent;
+	public long /*int*/ get_n_children;
+	public long /*int*/ ref_child;
+	public long /*int*/ get_index_in_parent;
+	public long /*int*/ ref_relation_set;
+	public long /*int*/ get_role;
+	public long /*int*/ get_layer;
+	public long /*int*/ get_mdi_zorder;
+	public long /*int*/ ref_state_set;
+	public long /*int*/ set_name;
+	public long /*int*/ set_description;
+	public long /*int*/ set_parent;
+	public long /*int*/ set_role;
+	public long /*int*/ connect_property_change_handler;
+	public long /*int*/ remove_property_change_handler;
+	public long /*int*/ initialize;
+	public long /*int*/ children_changed;
+	public long /*int*/ focus_event;
+	public long /*int*/ property_change;
+	public long /*int*/ state_change;
+	public long /*int*/ visible_data_changed;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkObjectFactoryClass.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class AtkObjectFactoryClass {
-	public int /*long*/ create_accessible;
-	public int /*long*/ invalidate;
-	public int /*long*/ get_accessible_type;
+	public long /*int*/ create_accessible;
+	public long /*int*/ invalidate;
+	public long /*int*/ get_accessible_type;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkSelectionIface.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,12 +16,12 @@
 
 
 public class AtkSelectionIface {
-	public int /*long*/ add_selection;
-	public int /*long*/ clear_selection;
-	public int /*long*/ ref_selection;
-	public int /*long*/ get_selection_count;
-	public int /*long*/ is_child_selected;
-	public int /*long*/ remove_selection;
-	public int /*long*/ select_all_selection;
-	public int /*long*/ selection_changed;
+	public long /*int*/ add_selection;
+	public long /*int*/ clear_selection;
+	public long /*int*/ ref_selection;
+	public long /*int*/ get_selection_count;
+	public long /*int*/ is_child_selected;
+	public long /*int*/ remove_selection;
+	public long /*int*/ select_all_selection;
+	public long /*int*/ selection_changed;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/AtkTextIface.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,24 +16,24 @@
 
 
 public class AtkTextIface {
-	public int /*long*/ get_text;
-	public int /*long*/ get_text_after_offset;
-	public int /*long*/ get_text_at_offset;
-	public int /*long*/ get_character_at_offset;
-	public int /*long*/ get_text_before_offset;
-	public int /*long*/ get_caret_offset;
-	public int /*long*/ get_run_attributes;
-	public int /*long*/ get_default_attributes;
-	public int /*long*/ get_character_extents;
-	public int /*long*/ get_character_count;
-	public int /*long*/ get_offset_at_point;
-	public int /*long*/ get_n_selections;
-	public int /*long*/ get_selection;
-	public int /*long*/ add_selection;
-	public int /*long*/ remove_selection;
-	public int /*long*/ set_selection;
-	public int /*long*/ set_caret_offset;
-	public int /*long*/ text_changed;
-	public int /*long*/ text_caret_moved;
-	public int /*long*/ text_selection_changed;
+	public long /*int*/ get_text;
+	public long /*int*/ get_text_after_offset;
+	public long /*int*/ get_text_at_offset;
+	public long /*int*/ get_character_at_offset;
+	public long /*int*/ get_text_before_offset;
+	public long /*int*/ get_caret_offset;
+	public long /*int*/ get_run_attributes;
+	public long /*int*/ get_default_attributes;
+	public long /*int*/ get_character_extents;
+	public long /*int*/ get_character_count;
+	public long /*int*/ get_offset_at_point;
+	public long /*int*/ get_n_selections;
+	public long /*int*/ get_selection;
+	public long /*int*/ add_selection;
+	public long /*int*/ remove_selection;
+	public long /*int*/ set_selection;
+	public long /*int*/ set_caret_offset;
+	public long /*int*/ text_changed;
+	public long /*int*/ text_caret_moved;
+	public long /*int*/ text_selection_changed;
 }
diff -ur x86/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java x86_64/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java
--- x86/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/accessibility/gtk/GtkAccessible.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,5 +16,5 @@
 
 
 public class GtkAccessible {
-	public int /*long*/ widget;
+	public long /*int*/ widget;
 }
diff -ur x86/org/eclipse/swt/internal/BidiUtil.java x86_64/org/eclipse/swt/internal/BidiUtil.java
--- x86/org/eclipse/swt/internal/BidiUtil.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/BidiUtil.java	2009-02-11 17:43:50.000000000 -0500
@@ -42,7 +42,7 @@
 /*
  * Not implemented.
  */
-public static void addLanguageListener(int /*long*/ hwnd, Runnable runnable) {
+public static void addLanguageListener(long /*int*/ hwnd, Runnable runnable) {
 }
 public static void addLanguageListener (Control control, Runnable runnable) {
 }
@@ -93,7 +93,7 @@
 /*
  * Not implemented.
  */
-public static void removeLanguageListener(int /*long*/ hwnd) {
+public static void removeLanguageListener(long /*int*/ hwnd) {
 }	
 public static void removeLanguageListener (Control control) {
 }
@@ -105,7 +105,7 @@
 /*
  * Not implemented.
  */
-public static boolean setOrientation(int /*long*/ hwnd, int orientation) {
+public static boolean setOrientation(long /*int*/ hwnd, int orientation) {
 	return false;
 }
 public static boolean setOrientation (Control control, int orientation) {
diff -ur x86/org/eclipse/swt/internal/cairo/Cairo.java x86_64/org/eclipse/swt/internal/cairo/Cairo.java
--- x86/org/eclipse/swt/internal/cairo/Cairo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/cairo/Cairo.java	2009-02-11 17:43:48.000000000 -0500
@@ -105,8 +105,8 @@
 	
 /** Natives */
 public static final native int CAIRO_VERSION_ENCODE(int major, int minor, int micro);
-public static final native void _cairo_append_path(int /*long*/ cr, int /*long*/ path);
-public static final void cairo_append_path(int /*long*/ cr, int /*long*/ path) {
+public static final native void _cairo_append_path(long /*int*/ cr, long /*int*/ path);
+public static final void cairo_append_path(long /*int*/ cr, long /*int*/ path) {
 	lock.lock();
 	try {
 		_cairo_append_path(cr, path);
@@ -114,8 +114,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_arc(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2);
-public static final void cairo_arc(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
+public static final native void _cairo_arc(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2);
+public static final void cairo_arc(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
 	lock.lock();
 	try {
 		_cairo_arc(cr, xc, yc, radius, angle1, angle2);
@@ -123,8 +123,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_arc_negative(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2);
-public static final void cairo_arc_negative(int /*long*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
+public static final native void _cairo_arc_negative(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2);
+public static final void cairo_arc_negative(long /*int*/ cr, double xc, double yc, double radius, double angle1, double angle2) {
 	lock.lock();
 	try {
 		_cairo_arc_negative(cr, xc, yc, radius, angle1, angle2);
@@ -132,8 +132,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_clip(int /*long*/ cr);
-public static final void cairo_clip(int /*long*/ cr) {
+public static final native void _cairo_clip(long /*int*/ cr);
+public static final void cairo_clip(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_clip(cr);
@@ -141,8 +141,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_clip_preserve(int /*long*/ cr);
-public static final void cairo_clip_preserve(int /*long*/ cr) {
+public static final native void _cairo_clip_preserve(long /*int*/ cr);
+public static final void cairo_clip_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_clip_preserve(cr);
@@ -150,8 +150,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_close_path(int /*long*/ cr);
-public static final void cairo_close_path(int /*long*/ cr) {
+public static final native void _cairo_close_path(long /*int*/ cr);
+public static final void cairo_close_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_close_path(cr);
@@ -159,8 +159,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_copy_page(int /*long*/ cr);
-public static final void cairo_copy_page(int /*long*/ cr) {
+public static final native void _cairo_copy_page(long /*int*/ cr);
+public static final void cairo_copy_page(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_copy_page(cr);
@@ -168,8 +168,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_copy_path(int /*long*/ cr);
-public static final int /*long*/ cairo_copy_path(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_copy_path(long /*int*/ cr);
+public static final long /*int*/ cairo_copy_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_copy_path(cr);
@@ -177,8 +177,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_copy_path_flat(int /*long*/ cr);
-public static final int /*long*/ cairo_copy_path_flat(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_copy_path_flat(long /*int*/ cr);
+public static final long /*int*/ cairo_copy_path_flat(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_copy_path_flat(cr);
@@ -186,8 +186,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_create(int /*long*/ target);
-public static final int /*long*/ cairo_create(int /*long*/ target) {
+public static final native long /*int*/ _cairo_create(long /*int*/ target);
+public static final long /*int*/ cairo_create(long /*int*/ target) {
 	lock.lock();
 	try {
 		return _cairo_create(target);
@@ -195,8 +195,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_curve_to(int /*long*/ cr, double x1, double y1, double x2, double y2, double x3, double y3);
-public static final void cairo_curve_to(int /*long*/ cr, double x1, double y1, double x2, double y2, double x3, double y3) {
+public static final native void _cairo_curve_to(long /*int*/ cr, double x1, double y1, double x2, double y2, double x3, double y3);
+public static final void cairo_curve_to(long /*int*/ cr, double x1, double y1, double x2, double y2, double x3, double y3) {
 	lock.lock();
 	try {
 		_cairo_curve_to(cr, x1, y1, x2, y2, x3, y3);
@@ -204,8 +204,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_destroy(int /*long*/ cr);
-public static final void cairo_destroy(int /*long*/ cr) {
+public static final native void _cairo_destroy(long /*int*/ cr);
+public static final void cairo_destroy(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_destroy(cr);
@@ -213,8 +213,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_device_to_user(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_device_to_user(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_device_to_user(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_device_to_user(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_device_to_user(cr, x, y);
@@ -222,8 +222,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_device_to_user_distance(int /*long*/ cr, double[] dx, double[] dy);
-public static final void cairo_device_to_user_distance(int /*long*/ cr, double[] dx, double[] dy) {
+public static final native void _cairo_device_to_user_distance(long /*int*/ cr, double[] dx, double[] dy);
+public static final void cairo_device_to_user_distance(long /*int*/ cr, double[] dx, double[] dy) {
 	lock.lock();
 	try {
 		_cairo_device_to_user_distance(cr, dx, dy);
@@ -231,8 +231,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_fill(int /*long*/ cr);
-public static final void cairo_fill(int /*long*/ cr) {
+public static final native void _cairo_fill(long /*int*/ cr);
+public static final void cairo_fill(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_fill(cr);
@@ -240,8 +240,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_fill_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
-public static final void cairo_fill_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
+public static final native void _cairo_fill_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
+public static final void cairo_fill_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
 	lock.lock();
 	try {
 		_cairo_fill_extents(cr, x1, y1, x2, y2);
@@ -249,8 +249,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_fill_preserve(int /*long*/ cr);
-public static final void cairo_fill_preserve(int /*long*/ cr) {
+public static final native void _cairo_fill_preserve(long /*int*/ cr);
+public static final void cairo_fill_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_fill_preserve(cr);
@@ -258,8 +258,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_font_extents(int /*long*/ cr, cairo_font_extents_t extents);
-public static final void cairo_font_extents(int /*long*/ cr, cairo_font_extents_t extents) {
+public static final native void _cairo_font_extents(long /*int*/ cr, cairo_font_extents_t extents);
+public static final void cairo_font_extents(long /*int*/ cr, cairo_font_extents_t extents) {
 	lock.lock();
 	try {
 		_cairo_font_extents(cr, extents);
@@ -267,8 +267,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_font_options_create();
-public static final int /*long*/ cairo_font_options_create() {
+public static final native long /*int*/ _cairo_font_options_create();
+public static final long /*int*/ cairo_font_options_create() {
 	lock.lock();
 	try {
 		return _cairo_font_options_create();
@@ -276,8 +276,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_font_options_destroy(int /*long*/ options);
-public static final void cairo_font_options_destroy(int /*long*/ options) {
+public static final native void _cairo_font_options_destroy(long /*int*/ options);
+public static final void cairo_font_options_destroy(long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_font_options_destroy(options);
@@ -285,8 +285,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_font_options_get_antialias(int /*long*/ options);
-public static final int cairo_font_options_get_antialias(int /*long*/ options) {
+public static final native int _cairo_font_options_get_antialias(long /*int*/ options);
+public static final int cairo_font_options_get_antialias(long /*int*/ options) {
 	lock.lock();
 	try {
 		return _cairo_font_options_get_antialias(options);
@@ -294,8 +294,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_font_options_set_antialias(int /*long*/ options, int antialias);
-public static final void cairo_font_options_set_antialias(int /*long*/ options, int antialias) {
+public static final native void _cairo_font_options_set_antialias(long /*int*/ options, int antialias);
+public static final void cairo_font_options_set_antialias(long /*int*/ options, int antialias) {
 	lock.lock();
 	try {
 		_cairo_font_options_set_antialias(options, antialias);
@@ -303,8 +303,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_get_antialias(int /*long*/ cr);
-public static final int cairo_get_antialias(int /*long*/ cr) {
+public static final native int _cairo_get_antialias(long /*int*/ cr);
+public static final int cairo_get_antialias(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_antialias(cr);
@@ -312,8 +312,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_get_current_point(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_get_current_point(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_get_current_point(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_get_current_point(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_get_current_point(cr, x, y);
@@ -321,8 +321,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_get_fill_rule(int /*long*/ cr);
-public static final int cairo_get_fill_rule(int /*long*/ cr) {
+public static final native int _cairo_get_fill_rule(long /*int*/ cr);
+public static final int cairo_get_fill_rule(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_fill_rule(cr);
@@ -330,8 +330,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_get_font_face(int /*long*/ cr);
-public static final int /*long*/ cairo_get_font_face(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_font_face(long /*int*/ cr);
+public static final long /*int*/ cairo_get_font_face(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_font_face(cr);
@@ -339,8 +339,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_get_font_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_get_font_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_get_font_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_get_font_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_get_font_matrix(cr, matrix);
@@ -348,8 +348,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_get_font_options(int /*long*/ cr, int /*long*/ options);
-public static final void cairo_get_font_options(int /*long*/ cr, int /*long*/ options) {
+public static final native void _cairo_get_font_options(long /*int*/ cr, long /*int*/ options);
+public static final void cairo_get_font_options(long /*int*/ cr, long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_get_font_options(cr, options);
@@ -357,8 +357,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_get_line_cap(int /*long*/ cr);
-public static final int cairo_get_line_cap(int /*long*/ cr) {
+public static final native int _cairo_get_line_cap(long /*int*/ cr);
+public static final int cairo_get_line_cap(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_cap(cr);
@@ -366,8 +366,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_get_line_join(int /*long*/ cr);
-public static final int cairo_get_line_join(int /*long*/ cr) {
+public static final native int _cairo_get_line_join(long /*int*/ cr);
+public static final int cairo_get_line_join(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_join(cr);
@@ -375,8 +375,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _cairo_get_line_width(int /*long*/ cr);
-public static final double cairo_get_line_width(int /*long*/ cr) {
+public static final native double _cairo_get_line_width(long /*int*/ cr);
+public static final double cairo_get_line_width(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_line_width(cr);
@@ -384,8 +384,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_get_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_get_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_get_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_get_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_get_matrix(cr, matrix);
@@ -393,8 +393,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _cairo_get_miter_limit(int /*long*/ cr);
-public static final double cairo_get_miter_limit(int /*long*/ cr) {
+public static final native double _cairo_get_miter_limit(long /*int*/ cr);
+public static final double cairo_get_miter_limit(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_miter_limit(cr);
@@ -402,8 +402,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_get_operator(int /*long*/ cr);
-public static final int cairo_get_operator(int /*long*/ cr) {
+public static final native int _cairo_get_operator(long /*int*/ cr);
+public static final int cairo_get_operator(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_operator(cr);
@@ -411,8 +411,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_get_source(int /*long*/ cr);
-public static final int /*long*/ cairo_get_source(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_source(long /*int*/ cr);
+public static final long /*int*/ cairo_get_source(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_source(cr);
@@ -420,8 +420,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_get_target(int /*long*/ cr);
-public static final int /*long*/ cairo_get_target(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_get_target(long /*int*/ cr);
+public static final long /*int*/ cairo_get_target(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_target(cr);
@@ -429,8 +429,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _cairo_get_tolerance(int /*long*/ cr);
-public static final double cairo_get_tolerance(int /*long*/ cr) {
+public static final native double _cairo_get_tolerance(long /*int*/ cr);
+public static final double cairo_get_tolerance(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_get_tolerance(cr);
@@ -438,8 +438,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_glyph_extents(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs, int /*long*/ extents);
-public static final void cairo_glyph_extents(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs, int /*long*/ extents) {
+public static final native void _cairo_glyph_extents(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs, long /*int*/ extents);
+public static final void cairo_glyph_extents(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs, long /*int*/ extents) {
 	lock.lock();
 	try {
 		_cairo_glyph_extents(cr, glyphs, num_glyphs, extents);
@@ -447,8 +447,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_glyph_path(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs);
-public static final void cairo_glyph_path(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs) {
+public static final native void _cairo_glyph_path(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs);
+public static final void cairo_glyph_path(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs) {
 	lock.lock();
 	try {
 		_cairo_glyph_path(cr, glyphs, num_glyphs);
@@ -456,8 +456,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_identity_matrix(int /*long*/ cr);
-public static final void cairo_identity_matrix(int /*long*/ cr) {
+public static final native void _cairo_identity_matrix(long /*int*/ cr);
+public static final void cairo_identity_matrix(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_identity_matrix(cr);
@@ -465,8 +465,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_image_surface_create(int format, int width, int height);
-public static final int /*long*/ cairo_image_surface_create(int format, int width, int height) {
+public static final native long /*int*/ _cairo_image_surface_create(int format, int width, int height);
+public static final long /*int*/ cairo_image_surface_create(int format, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_create(format, width, height);
@@ -474,8 +474,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_image_surface_create_for_data(int /*long*/ data, int format, int width, int height, int stride);
-public static final int /*long*/ cairo_image_surface_create_for_data(int /*long*/ data, int format, int width, int height, int stride) {
+public static final native long /*int*/ _cairo_image_surface_create_for_data(long /*int*/ data, int format, int width, int height, int stride);
+public static final long /*int*/ cairo_image_surface_create_for_data(long /*int*/ data, int format, int width, int height, int stride) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_create_for_data(data, format, width, height, stride);
@@ -483,8 +483,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_image_surface_get_height(int /*long*/ surface);
-public static final int cairo_image_surface_get_height(int /*long*/ surface) {
+public static final native int _cairo_image_surface_get_height(long /*int*/ surface);
+public static final int cairo_image_surface_get_height(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_get_height(surface);
@@ -492,8 +492,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_image_surface_get_width(int /*long*/ surface);
-public static final int cairo_image_surface_get_width(int /*long*/ surface) {
+public static final native int _cairo_image_surface_get_width(long /*int*/ surface);
+public static final int cairo_image_surface_get_width(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_image_surface_get_width(surface);
@@ -501,8 +501,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_in_fill(int /*long*/ cr, double x, double y);
-public static final int cairo_in_fill(int /*long*/ cr, double x, double y) {
+public static final native int _cairo_in_fill(long /*int*/ cr, double x, double y);
+public static final int cairo_in_fill(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		return _cairo_in_fill(cr, x, y);
@@ -510,8 +510,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_in_stroke(int /*long*/ cr, double x, double y);
-public static final int cairo_in_stroke(int /*long*/ cr, double x, double y) {
+public static final native int _cairo_in_stroke(long /*int*/ cr, double x, double y);
+public static final int cairo_in_stroke(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		return _cairo_in_stroke(cr, x, y);
@@ -519,8 +519,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_line_to(int /*long*/ cr, double x, double y);
-public static final void cairo_line_to(int /*long*/ cr, double x, double y) {
+public static final native void _cairo_line_to(long /*int*/ cr, double x, double y);
+public static final void cairo_line_to(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_line_to(cr, x, y);
@@ -528,8 +528,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_mask(int /*long*/ cr, int /*long*/ pattern);
-public static final void cairo_mask(int /*long*/ cr, int /*long*/ pattern) {
+public static final native void _cairo_mask(long /*int*/ cr, long /*int*/ pattern);
+public static final void cairo_mask(long /*int*/ cr, long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_mask(cr, pattern);
@@ -537,8 +537,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_mask_surface(int /*long*/ cr, int /*long*/ surface, double surface_x, double surface_y);
-public static final void cairo_mask_surface(int /*long*/ cr, int /*long*/ surface, double surface_x, double surface_y) {
+public static final native void _cairo_mask_surface(long /*int*/ cr, long /*int*/ surface, double surface_x, double surface_y);
+public static final void cairo_mask_surface(long /*int*/ cr, long /*int*/ surface, double surface_x, double surface_y) {
 	lock.lock();
 	try {
 		_cairo_mask_surface(cr, surface, surface_x, surface_y);
@@ -654,8 +654,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_move_to(int /*long*/ cr, double x, double y);
-public static final void cairo_move_to(int /*long*/ cr, double x, double y) {
+public static final native void _cairo_move_to(long /*int*/ cr, double x, double y);
+public static final void cairo_move_to(long /*int*/ cr, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_move_to(cr, x, y);
@@ -663,8 +663,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_new_path(int /*long*/ cr);
-public static final void cairo_new_path(int /*long*/ cr) {
+public static final native void _cairo_new_path(long /*int*/ cr);
+public static final void cairo_new_path(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_new_path(cr);
@@ -672,8 +672,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_paint(int /*long*/ cr);
-public static final void cairo_paint(int /*long*/ cr) {
+public static final native void _cairo_paint(long /*int*/ cr);
+public static final void cairo_paint(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_paint(cr);
@@ -681,8 +681,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_paint_with_alpha(int /*long*/ cr, double alpha);
-public static final void cairo_paint_with_alpha(int /*long*/ cr, double alpha) {
+public static final native void _cairo_paint_with_alpha(long /*int*/ cr, double alpha);
+public static final void cairo_paint_with_alpha(long /*int*/ cr, double alpha) {
 	lock.lock();
 	try {
 		_cairo_paint_with_alpha(cr, alpha);
@@ -690,8 +690,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_path_destroy(int /*long*/ path);
-public static final void cairo_path_destroy(int /*long*/ path) {
+public static final native void _cairo_path_destroy(long /*int*/ path);
+public static final void cairo_path_destroy(long /*int*/ path) {
 	lock.lock();
 	try {
 		_cairo_path_destroy(path);
@@ -699,8 +699,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_add_color_stop_rgb(int /*long*/ pattern, double offset, double red, double green, double blue);
-public static final void cairo_pattern_add_color_stop_rgb(int /*long*/ pattern, double offset, double red, double green, double blue) {
+public static final native void _cairo_pattern_add_color_stop_rgb(long /*int*/ pattern, double offset, double red, double green, double blue);
+public static final void cairo_pattern_add_color_stop_rgb(long /*int*/ pattern, double offset, double red, double green, double blue) {
 	lock.lock();
 	try {
 		_cairo_pattern_add_color_stop_rgb(pattern, offset, red, green, blue);
@@ -708,8 +708,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_add_color_stop_rgba(int /*long*/ pattern, double offset, double red, double green, double blue, double alpha);
-public static final void cairo_pattern_add_color_stop_rgba(int /*long*/ pattern, double offset, double red, double green, double blue, double alpha) {
+public static final native void _cairo_pattern_add_color_stop_rgba(long /*int*/ pattern, double offset, double red, double green, double blue, double alpha);
+public static final void cairo_pattern_add_color_stop_rgba(long /*int*/ pattern, double offset, double red, double green, double blue, double alpha) {
 	lock.lock();
 	try {
 		_cairo_pattern_add_color_stop_rgba(pattern, offset, red, green, blue, alpha);
@@ -717,8 +717,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_pattern_create_for_surface(int /*long*/ surface);
-public static final int /*long*/ cairo_pattern_create_for_surface(int /*long*/ surface) {
+public static final native long /*int*/ _cairo_pattern_create_for_surface(long /*int*/ surface);
+public static final long /*int*/ cairo_pattern_create_for_surface(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_for_surface(surface);
@@ -726,8 +726,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_pattern_create_linear(double x0, double y0, double x1, double y1);
-public static final int /*long*/ cairo_pattern_create_linear(double x0, double y0, double x1, double y1) {
+public static final native long /*int*/ _cairo_pattern_create_linear(double x0, double y0, double x1, double y1);
+public static final long /*int*/ cairo_pattern_create_linear(double x0, double y0, double x1, double y1) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_linear(x0, y0, x1, y1);
@@ -735,8 +735,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);
-public static final int /*long*/ cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1) {
+public static final native long /*int*/ _cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1);
+public static final long /*int*/ cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1) {
 	lock.lock();
 	try {
 		return _cairo_pattern_create_radial(cx0, cy0, radius0, cx1, cy1, radius1);
@@ -744,8 +744,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_destroy(int /*long*/ pattern);
-public static final void cairo_pattern_destroy(int /*long*/ pattern) {
+public static final native void _cairo_pattern_destroy(long /*int*/ pattern);
+public static final void cairo_pattern_destroy(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_pattern_destroy(pattern);
@@ -753,8 +753,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_pattern_get_extend(int /*long*/ pattern);
-public static final int cairo_pattern_get_extend(int /*long*/ pattern) {
+public static final native int _cairo_pattern_get_extend(long /*int*/ pattern);
+public static final int cairo_pattern_get_extend(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		return _cairo_pattern_get_extend(pattern);
@@ -762,8 +762,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_pattern_get_filter(int /*long*/ pattern);
-public static final int cairo_pattern_get_filter(int /*long*/ pattern) {
+public static final native int _cairo_pattern_get_filter(long /*int*/ pattern);
+public static final int cairo_pattern_get_filter(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		return _cairo_pattern_get_filter(pattern);
@@ -771,8 +771,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_get_matrix(int /*long*/ pattern, double[] matrix);
-public static final void cairo_pattern_get_matrix(int /*long*/ pattern, double[] matrix) {
+public static final native void _cairo_pattern_get_matrix(long /*int*/ pattern, double[] matrix);
+public static final void cairo_pattern_get_matrix(long /*int*/ pattern, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_pattern_get_matrix(pattern, matrix);
@@ -780,8 +780,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_reference(int /*long*/ pattern);
-public static final void cairo_pattern_reference(int /*long*/ pattern) {
+public static final native void _cairo_pattern_reference(long /*int*/ pattern);
+public static final void cairo_pattern_reference(long /*int*/ pattern) {
 	lock.lock();
 	try {
 		_cairo_pattern_reference(pattern);
@@ -789,8 +789,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_set_extend(int /*long*/ pattern, int extend);
-public static final void cairo_pattern_set_extend(int /*long*/ pattern, int extend) {
+public static final native void _cairo_pattern_set_extend(long /*int*/ pattern, int extend);
+public static final void cairo_pattern_set_extend(long /*int*/ pattern, int extend) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_extend(pattern, extend);
@@ -798,8 +798,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_set_filter(int /*long*/ pattern, int filter);
-public static final void cairo_pattern_set_filter(int /*long*/ pattern, int filter) {
+public static final native void _cairo_pattern_set_filter(long /*int*/ pattern, int filter);
+public static final void cairo_pattern_set_filter(long /*int*/ pattern, int filter) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_filter(pattern, filter);
@@ -807,8 +807,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pattern_set_matrix(int /*long*/ pattern, double[] matrix);
-public static final void cairo_pattern_set_matrix(int /*long*/ pattern, double[] matrix) {
+public static final native void _cairo_pattern_set_matrix(long /*int*/ pattern, double[] matrix);
+public static final void cairo_pattern_set_matrix(long /*int*/ pattern, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_pattern_set_matrix(pattern, matrix);
@@ -816,8 +816,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_pdf_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points);
-public static final void cairo_pdf_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points) {
+public static final native void _cairo_pdf_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points);
+public static final void cairo_pdf_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points) {
 	lock.lock();
 	try {
 		_cairo_pdf_surface_set_size(surface, width_in_points, height_in_points);
@@ -825,8 +825,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_ps_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points);
-public static final void cairo_ps_surface_set_size(int /*long*/ surface, double width_in_points, double height_in_points) {
+public static final native void _cairo_ps_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points);
+public static final void cairo_ps_surface_set_size(long /*int*/ surface, double width_in_points, double height_in_points) {
 	lock.lock();
 	try {
 		_cairo_ps_surface_set_size(surface, width_in_points, height_in_points);
@@ -834,8 +834,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_rectangle(int /*long*/ cr, double x, double y, double width, double height);
-public static final void cairo_rectangle(int /*long*/ cr, double x, double y, double width, double height) {
+public static final native void _cairo_rectangle(long /*int*/ cr, double x, double y, double width, double height);
+public static final void cairo_rectangle(long /*int*/ cr, double x, double y, double width, double height) {
 	lock.lock();
 	try {
 		_cairo_rectangle(cr, x, y, width, height);
@@ -843,8 +843,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_reference(int /*long*/ cr);
-public static final int /*long*/ cairo_reference(int /*long*/ cr) {
+public static final native long /*int*/ _cairo_reference(long /*int*/ cr);
+public static final long /*int*/ cairo_reference(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_reference(cr);
@@ -852,8 +852,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_rel_curve_to(int /*long*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
-public static final void cairo_rel_curve_to(int /*long*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3) {
+public static final native void _cairo_rel_curve_to(long /*int*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3);
+public static final void cairo_rel_curve_to(long /*int*/ cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3) {
 	lock.lock();
 	try {
 		_cairo_rel_curve_to(cr, dx1, dy1, dx2, dy2, dx3, dy3);
@@ -861,8 +861,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_rel_line_to(int /*long*/ cr, double dx, double dy);
-public static final void cairo_rel_line_to(int /*long*/ cr, double dx, double dy) {
+public static final native void _cairo_rel_line_to(long /*int*/ cr, double dx, double dy);
+public static final void cairo_rel_line_to(long /*int*/ cr, double dx, double dy) {
 	lock.lock();
 	try {
 		_cairo_rel_line_to(cr, dx, dy);
@@ -870,8 +870,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_rel_move_to(int /*long*/ cr, double dx, double dy);
-public static final void cairo_rel_move_to(int /*long*/ cr, double dx, double dy) {
+public static final native void _cairo_rel_move_to(long /*int*/ cr, double dx, double dy);
+public static final void cairo_rel_move_to(long /*int*/ cr, double dx, double dy) {
 	lock.lock();
 	try {
 		_cairo_rel_move_to(cr, dx, dy);
@@ -879,8 +879,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_reset_clip(int /*long*/ cr);
-public static final void cairo_reset_clip(int /*long*/ cr) {
+public static final native void _cairo_reset_clip(long /*int*/ cr);
+public static final void cairo_reset_clip(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_reset_clip(cr);
@@ -888,8 +888,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_restore(int /*long*/ cr);
-public static final void cairo_restore(int /*long*/ cr) {
+public static final native void _cairo_restore(long /*int*/ cr);
+public static final void cairo_restore(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_restore(cr);
@@ -897,8 +897,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_rotate(int /*long*/ cr, double angle);
-public static final void cairo_rotate(int /*long*/ cr, double angle) {
+public static final native void _cairo_rotate(long /*int*/ cr, double angle);
+public static final void cairo_rotate(long /*int*/ cr, double angle) {
 	lock.lock();
 	try {
 		_cairo_rotate(cr, angle);
@@ -906,8 +906,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_save(int /*long*/ cr);
-public static final void cairo_save(int /*long*/ cr) {
+public static final native void _cairo_save(long /*int*/ cr);
+public static final void cairo_save(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_save(cr);
@@ -915,8 +915,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_scale(int /*long*/ cr, double sx, double sy);
-public static final void cairo_scale(int /*long*/ cr, double sx, double sy) {
+public static final native void _cairo_scale(long /*int*/ cr, double sx, double sy);
+public static final void cairo_scale(long /*int*/ cr, double sx, double sy) {
 	lock.lock();
 	try {
 		_cairo_scale(cr, sx, sy);
@@ -924,8 +924,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_select_font_face(int /*long*/ cr, byte[] family, int slant, int weight);
-public static final void cairo_select_font_face(int /*long*/ cr, byte[] family, int slant, int weight) {
+public static final native void _cairo_select_font_face(long /*int*/ cr, byte[] family, int slant, int weight);
+public static final void cairo_select_font_face(long /*int*/ cr, byte[] family, int slant, int weight) {
 	lock.lock();
 	try {
 		_cairo_select_font_face(cr, family, slant, weight);
@@ -933,8 +933,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_antialias(int /*long*/ cr, int antialias);
-public static final void cairo_set_antialias(int /*long*/ cr, int antialias) {
+public static final native void _cairo_set_antialias(long /*int*/ cr, int antialias);
+public static final void cairo_set_antialias(long /*int*/ cr, int antialias) {
 	lock.lock();
 	try {
 		_cairo_set_antialias(cr, antialias);
@@ -942,8 +942,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_dash(int /*long*/ cr, double[] dashes, int ndash, double offset);
-public static final void cairo_set_dash(int /*long*/ cr, double[] dashes, int ndash, double offset) {
+public static final native void _cairo_set_dash(long /*int*/ cr, double[] dashes, int ndash, double offset);
+public static final void cairo_set_dash(long /*int*/ cr, double[] dashes, int ndash, double offset) {
 	lock.lock();
 	try {
 		_cairo_set_dash(cr, dashes, ndash, offset);
@@ -951,8 +951,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_fill_rule(int /*long*/ cr, int fill_rule);
-public static final void cairo_set_fill_rule(int /*long*/ cr, int fill_rule) {
+public static final native void _cairo_set_fill_rule(long /*int*/ cr, int fill_rule);
+public static final void cairo_set_fill_rule(long /*int*/ cr, int fill_rule) {
 	lock.lock();
 	try {
 		_cairo_set_fill_rule(cr, fill_rule);
@@ -960,8 +960,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_font_face(int /*long*/ cr, int /*long*/ font_face);
-public static final void cairo_set_font_face(int /*long*/ cr, int /*long*/ font_face) {
+public static final native void _cairo_set_font_face(long /*int*/ cr, long /*int*/ font_face);
+public static final void cairo_set_font_face(long /*int*/ cr, long /*int*/ font_face) {
 	lock.lock();
 	try {
 		_cairo_set_font_face(cr, font_face);
@@ -969,8 +969,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_font_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_set_font_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_set_font_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_set_font_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_set_font_matrix(cr, matrix);
@@ -978,8 +978,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_font_options(int /*long*/ cr, int /*long*/ options);
-public static final void cairo_set_font_options(int /*long*/ cr, int /*long*/ options) {
+public static final native void _cairo_set_font_options(long /*int*/ cr, long /*int*/ options);
+public static final void cairo_set_font_options(long /*int*/ cr, long /*int*/ options) {
 	lock.lock();
 	try {
 		_cairo_set_font_options(cr, options);
@@ -987,8 +987,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_font_size(int /*long*/ cr, double size);
-public static final void cairo_set_font_size(int /*long*/ cr, double size) {
+public static final native void _cairo_set_font_size(long /*int*/ cr, double size);
+public static final void cairo_set_font_size(long /*int*/ cr, double size) {
 	lock.lock();
 	try {
 		_cairo_set_font_size(cr, size);
@@ -996,8 +996,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_line_cap(int /*long*/ cr, int line_cap);
-public static final void cairo_set_line_cap(int /*long*/ cr, int line_cap) {
+public static final native void _cairo_set_line_cap(long /*int*/ cr, int line_cap);
+public static final void cairo_set_line_cap(long /*int*/ cr, int line_cap) {
 	lock.lock();
 	try {
 		_cairo_set_line_cap(cr, line_cap);
@@ -1005,8 +1005,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_line_join(int /*long*/ cr, int line_join);
-public static final void cairo_set_line_join(int /*long*/ cr, int line_join) {
+public static final native void _cairo_set_line_join(long /*int*/ cr, int line_join);
+public static final void cairo_set_line_join(long /*int*/ cr, int line_join) {
 	lock.lock();
 	try {
 		_cairo_set_line_join(cr, line_join);
@@ -1014,8 +1014,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_line_width(int /*long*/ cr, double width);
-public static final void cairo_set_line_width(int /*long*/ cr, double width) {
+public static final native void _cairo_set_line_width(long /*int*/ cr, double width);
+public static final void cairo_set_line_width(long /*int*/ cr, double width) {
 	lock.lock();
 	try {
 		_cairo_set_line_width(cr, width);
@@ -1023,8 +1023,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_matrix(int /*long*/ cr, double[] matrix);
-public static final void cairo_set_matrix(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_set_matrix(long /*int*/ cr, double[] matrix);
+public static final void cairo_set_matrix(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_set_matrix(cr, matrix);
@@ -1032,8 +1032,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_miter_limit(int /*long*/ cr, double limit);
-public static final void cairo_set_miter_limit(int /*long*/ cr, double limit) {
+public static final native void _cairo_set_miter_limit(long /*int*/ cr, double limit);
+public static final void cairo_set_miter_limit(long /*int*/ cr, double limit) {
 	lock.lock();
 	try {
 		_cairo_set_miter_limit(cr, limit);
@@ -1041,8 +1041,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_operator(int /*long*/ cr, int op);
-public static final void cairo_set_operator(int /*long*/ cr, int op) {
+public static final native void _cairo_set_operator(long /*int*/ cr, int op);
+public static final void cairo_set_operator(long /*int*/ cr, int op) {
 	lock.lock();
 	try {
 		_cairo_set_operator(cr, op);
@@ -1050,8 +1050,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_source(int /*long*/ cr, int /*long*/ source);
-public static final void cairo_set_source(int /*long*/ cr, int /*long*/ source) {
+public static final native void _cairo_set_source(long /*int*/ cr, long /*int*/ source);
+public static final void cairo_set_source(long /*int*/ cr, long /*int*/ source) {
 	lock.lock();
 	try {
 		_cairo_set_source(cr, source);
@@ -1059,8 +1059,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_source_rgb(int /*long*/ cr, double red, double green, double blue);
-public static final void cairo_set_source_rgb(int /*long*/ cr, double red, double green, double blue) {
+public static final native void _cairo_set_source_rgb(long /*int*/ cr, double red, double green, double blue);
+public static final void cairo_set_source_rgb(long /*int*/ cr, double red, double green, double blue) {
 	lock.lock();
 	try {
 		_cairo_set_source_rgb(cr, red, green, blue);
@@ -1068,8 +1068,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_source_rgba(int /*long*/ cr, double red, double green, double blue, double alpha);
-public static final void cairo_set_source_rgba(int /*long*/ cr, double red, double green, double blue, double alpha) {
+public static final native void _cairo_set_source_rgba(long /*int*/ cr, double red, double green, double blue, double alpha);
+public static final void cairo_set_source_rgba(long /*int*/ cr, double red, double green, double blue, double alpha) {
 	lock.lock();
 	try {
 		_cairo_set_source_rgba(cr, red, green, blue, alpha);
@@ -1077,8 +1077,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_source_surface(int /*long*/ cr, int /*long*/ surface, double x, double y);
-public static final void cairo_set_source_surface(int /*long*/ cr, int /*long*/ surface, double x, double y) {
+public static final native void _cairo_set_source_surface(long /*int*/ cr, long /*int*/ surface, double x, double y);
+public static final void cairo_set_source_surface(long /*int*/ cr, long /*int*/ surface, double x, double y) {
 	lock.lock();
 	try {
 		_cairo_set_source_surface(cr, surface, x, y);
@@ -1086,8 +1086,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_set_tolerance(int /*long*/ cr, double tolerance);
-public static final void cairo_set_tolerance(int /*long*/ cr, double tolerance) {
+public static final native void _cairo_set_tolerance(long /*int*/ cr, double tolerance);
+public static final void cairo_set_tolerance(long /*int*/ cr, double tolerance) {
 	lock.lock();
 	try {
 		_cairo_set_tolerance(cr, tolerance);
@@ -1095,8 +1095,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_show_glyphs(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs);
-public static final void cairo_show_glyphs(int /*long*/ cr, int /*long*/ glyphs, int num_glyphs) {
+public static final native void _cairo_show_glyphs(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs);
+public static final void cairo_show_glyphs(long /*int*/ cr, long /*int*/ glyphs, int num_glyphs) {
 	lock.lock();
 	try {
 		_cairo_show_glyphs(cr, glyphs, num_glyphs);
@@ -1104,8 +1104,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_show_page(int /*long*/ cr);
-public static final void cairo_show_page(int /*long*/ cr) {
+public static final native void _cairo_show_page(long /*int*/ cr);
+public static final void cairo_show_page(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_show_page(cr);
@@ -1113,8 +1113,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_show_text(int /*long*/ cr, byte[] utf8);
-public static final void cairo_show_text(int /*long*/ cr, byte[] utf8) {
+public static final native void _cairo_show_text(long /*int*/ cr, byte[] utf8);
+public static final void cairo_show_text(long /*int*/ cr, byte[] utf8) {
 	lock.lock();
 	try {
 		_cairo_show_text(cr, utf8);
@@ -1122,8 +1122,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_status(int /*long*/ cr);
-public static final int cairo_status(int /*long*/ cr) {
+public static final native int _cairo_status(long /*int*/ cr);
+public static final int cairo_status(long /*int*/ cr) {
 	lock.lock();
 	try {
 		return _cairo_status(cr);
@@ -1131,8 +1131,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_status_to_string(int status);
-public static final int /*long*/ cairo_status_to_string(int status) {
+public static final native long /*int*/ _cairo_status_to_string(int status);
+public static final long /*int*/ cairo_status_to_string(int status) {
 	lock.lock();
 	try {
 		return _cairo_status_to_string(status);
@@ -1140,8 +1140,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_stroke(int /*long*/ cr);
-public static final void cairo_stroke(int /*long*/ cr) {
+public static final native void _cairo_stroke(long /*int*/ cr);
+public static final void cairo_stroke(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_stroke(cr);
@@ -1149,8 +1149,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_stroke_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
-public static final void cairo_stroke_extents(int /*long*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
+public static final native void _cairo_stroke_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2);
+public static final void cairo_stroke_extents(long /*int*/ cr, double[] x1, double[] y1, double[] x2, double[] y2) {
 	lock.lock();
 	try {
 		_cairo_stroke_extents(cr, x1, y1, x2, y2);
@@ -1158,8 +1158,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_stroke_preserve(int /*long*/ cr);
-public static final void cairo_stroke_preserve(int /*long*/ cr) {
+public static final native void _cairo_stroke_preserve(long /*int*/ cr);
+public static final void cairo_stroke_preserve(long /*int*/ cr) {
 	lock.lock();
 	try {
 		_cairo_stroke_preserve(cr);
@@ -1167,8 +1167,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_surface_create_similar(int /*long*/ other, int format, int width, int height);
-public static final int /*long*/ cairo_surface_create_similar(int /*long*/ other, int format, int width, int height) {
+public static final native long /*int*/ _cairo_surface_create_similar(long /*int*/ other, int format, int width, int height);
+public static final long /*int*/ cairo_surface_create_similar(long /*int*/ other, int format, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_surface_create_similar(other, format, width, height);
@@ -1176,8 +1176,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_surface_destroy(int /*long*/ surface);
-public static final void cairo_surface_destroy(int /*long*/ surface) {
+public static final native void _cairo_surface_destroy(long /*int*/ surface);
+public static final void cairo_surface_destroy(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_destroy(surface);
@@ -1185,8 +1185,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_surface_finish(int /*long*/ surface);
-public static final void cairo_surface_finish(int /*long*/ surface) {
+public static final native void _cairo_surface_finish(long /*int*/ surface);
+public static final void cairo_surface_finish(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_finish(surface);
@@ -1194,8 +1194,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_surface_get_type(int /*long*/ surface);
-public static final int cairo_surface_get_type(int /*long*/ surface) {
+public static final native int _cairo_surface_get_type(long /*int*/ surface);
+public static final int cairo_surface_get_type(long /*int*/ surface) {
 	lock.lock();
 	try {
 		return _cairo_surface_get_type(surface);
@@ -1203,8 +1203,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_surface_get_user_data(int /*long*/ surface, int /*long*/ key);
-public static final int /*long*/ cairo_surface_get_user_data(int /*long*/ surface, int /*long*/ key) {
+public static final native long /*int*/ _cairo_surface_get_user_data(long /*int*/ surface, long /*int*/ key);
+public static final long /*int*/ cairo_surface_get_user_data(long /*int*/ surface, long /*int*/ key) {
 	lock.lock();
 	try {
 		return _cairo_surface_get_user_data(surface, key);
@@ -1212,8 +1212,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_surface_reference(int /*long*/ surface);
-public static final void cairo_surface_reference(int /*long*/ surface) {
+public static final native void _cairo_surface_reference(long /*int*/ surface);
+public static final void cairo_surface_reference(long /*int*/ surface) {
 	lock.lock();
 	try {
 		_cairo_surface_reference(surface);
@@ -1221,8 +1221,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_surface_set_device_offset(int /*long*/ surface, double x_offset, double y_offset);
-public static final void cairo_surface_set_device_offset(int /*long*/ surface, double x_offset, double y_offset) {
+public static final native void _cairo_surface_set_device_offset(long /*int*/ surface, double x_offset, double y_offset);
+public static final void cairo_surface_set_device_offset(long /*int*/ surface, double x_offset, double y_offset) {
 	lock.lock();
 	try {
 		_cairo_surface_set_device_offset(surface, x_offset, y_offset);
@@ -1230,8 +1230,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_surface_set_fallback_resolution(int /*long*/ surface, double x_pixels_per_inch, double y_pixels_per_inch);
-public static final void cairo_surface_set_fallback_resolution(int /*long*/ surface, double x_pixels_per_inch, double y_pixels_per_inch) {
+public static final native void _cairo_surface_set_fallback_resolution(long /*int*/ surface, double x_pixels_per_inch, double y_pixels_per_inch);
+public static final void cairo_surface_set_fallback_resolution(long /*int*/ surface, double x_pixels_per_inch, double y_pixels_per_inch) {
 	lock.lock();
 	try {
 		_cairo_surface_set_fallback_resolution(surface, x_pixels_per_inch, y_pixels_per_inch);
@@ -1239,8 +1239,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _cairo_surface_set_user_data(int /*long*/ surface, int /*long*/ key, int /*long*/ user_data, int /*long*/ destroy);
-public static final int cairo_surface_set_user_data(int /*long*/ surface, int /*long*/ key, int /*long*/ user_data, int /*long*/ destroy) {
+public static final native int _cairo_surface_set_user_data(long /*int*/ surface, long /*int*/ key, long /*int*/ user_data, long /*int*/ destroy);
+public static final int cairo_surface_set_user_data(long /*int*/ surface, long /*int*/ key, long /*int*/ user_data, long /*int*/ destroy) {
 	lock.lock();
 	try {
 		return _cairo_surface_set_user_data(surface, key, user_data, destroy);
@@ -1248,8 +1248,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_text_extents(int /*long*/ cr, byte[] utf8, cairo_text_extents_t extents);
-public static final void cairo_text_extents(int /*long*/ cr, byte[] utf8, cairo_text_extents_t extents) {
+public static final native void _cairo_text_extents(long /*int*/ cr, byte[] utf8, cairo_text_extents_t extents);
+public static final void cairo_text_extents(long /*int*/ cr, byte[] utf8, cairo_text_extents_t extents) {
 	lock.lock();
 	try {
 		_cairo_text_extents(cr, utf8, extents);
@@ -1257,8 +1257,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_text_path(int /*long*/ cr, byte[] utf8);
-public static final void cairo_text_path(int /*long*/ cr, byte[] utf8) {
+public static final native void _cairo_text_path(long /*int*/ cr, byte[] utf8);
+public static final void cairo_text_path(long /*int*/ cr, byte[] utf8) {
 	lock.lock();
 	try {
 		_cairo_text_path(cr, utf8);
@@ -1266,8 +1266,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_transform(int /*long*/ cr, double[] matrix);
-public static final void cairo_transform(int /*long*/ cr, double[] matrix) {
+public static final native void _cairo_transform(long /*int*/ cr, double[] matrix);
+public static final void cairo_transform(long /*int*/ cr, double[] matrix) {
 	lock.lock();
 	try {
 		_cairo_transform(cr, matrix);
@@ -1275,8 +1275,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_translate(int /*long*/ cr, double tx, double ty);
-public static final void cairo_translate(int /*long*/ cr, double tx, double ty) {
+public static final native void _cairo_translate(long /*int*/ cr, double tx, double ty);
+public static final void cairo_translate(long /*int*/ cr, double tx, double ty) {
 	lock.lock();
 	try {
 		_cairo_translate(cr, tx, ty);
@@ -1284,8 +1284,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_user_to_device(int /*long*/ cr, double[] x, double[] y);
-public static final void cairo_user_to_device(int /*long*/ cr, double[] x, double[] y) {
+public static final native void _cairo_user_to_device(long /*int*/ cr, double[] x, double[] y);
+public static final void cairo_user_to_device(long /*int*/ cr, double[] x, double[] y) {
 	lock.lock();
 	try {
 		_cairo_user_to_device(cr, x, y);
@@ -1293,8 +1293,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_user_to_device_distance(int /*long*/ cr, double[] dx, double[] dy);
-public static final void cairo_user_to_device_distance(int /*long*/ cr, double[] dx, double[] dy) {
+public static final native void _cairo_user_to_device_distance(long /*int*/ cr, double[] dx, double[] dy);
+public static final void cairo_user_to_device_distance(long /*int*/ cr, double[] dx, double[] dy) {
 	lock.lock();
 	try {
 		_cairo_user_to_device_distance(cr, dx, dy);
@@ -1303,8 +1303,8 @@
 	}
 }
 public static final native int cairo_version();
-public static final native int /*long*/ _cairo_xlib_surface_create(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ visual, int width, int height);
-public static final int /*long*/ cairo_xlib_surface_create(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ visual, int width, int height) {
+public static final native long /*int*/ _cairo_xlib_surface_create(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ visual, int width, int height);
+public static final long /*int*/ cairo_xlib_surface_create(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ visual, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_xlib_surface_create(dpy, drawable, visual, width, height);
@@ -1312,8 +1312,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _cairo_xlib_surface_create_for_bitmap(int /*long*/ dpy, int /*long*/ pixmap, int /*long*/ screen, int width, int height);
-public static final int /*long*/ cairo_xlib_surface_create_for_bitmap(int /*long*/ dpy, int /*long*/ pixmap, int /*long*/ screen, int width, int height) {
+public static final native long /*int*/ _cairo_xlib_surface_create_for_bitmap(long /*int*/ dpy, long /*int*/ pixmap, long /*int*/ screen, int width, int height);
+public static final long /*int*/ cairo_xlib_surface_create_for_bitmap(long /*int*/ dpy, long /*int*/ pixmap, long /*int*/ screen, int width, int height) {
 	lock.lock();
 	try {
 		return _cairo_xlib_surface_create_for_bitmap(dpy, pixmap, screen, width, height);
@@ -1321,8 +1321,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _cairo_xlib_surface_set_size(int /*long*/ surface, int width, int height);
-public static final void cairo_xlib_surface_set_size(int /*long*/ surface, int width, int height) {
+public static final native void _cairo_xlib_surface_set_size(long /*int*/ surface, int width, int height);
+public static final void cairo_xlib_surface_set_size(long /*int*/ surface, int width, int height) {
 	lock.lock();
 	try {
 		_cairo_xlib_surface_set_size(surface, width, height);
@@ -1330,8 +1330,8 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove(cairo_path_t dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(cairo_path_data_t dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(double[] dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(cairo_path_t dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(cairo_path_data_t dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(double[] dest, long /*int*/ src, long /*int*/ size);
 
 }
diff -ur x86/org/eclipse/swt/internal/cairo/cairo_path_t.java x86_64/org/eclipse/swt/internal/cairo/cairo_path_t.java
--- x86/org/eclipse/swt/internal/cairo/cairo_path_t.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/cairo/cairo_path_t.java	2009-02-11 17:43:48.000000000 -0500
@@ -23,7 +23,7 @@
 
 public class cairo_path_t {
 	public int status;
-	public int /*long*/ data;
+	public long /*int*/ data;
 	public int num_data;
 	public static final int sizeof = Cairo.cairo_path_t_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/Callback.java x86_64/org/eclipse/swt/internal/Callback.java
--- x86/org/eclipse/swt/internal/Callback.java	2009-06-24 21:13:52.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/Callback.java	2009-02-11 17:43:48.000000000 -0500
@@ -28,7 +28,7 @@
 	Object object;
 	String method, signature;
 	int argCount;
-	int /*long*/ address, errorResult;
+	long /*int*/ address, errorResult;
 	boolean isStatic, isArrayBased;
 
 	static final String PTR_SIGNATURE = C.PTR_SIZEOF == 4 ? "I" : "J"; //$NON-NLS-1$  //$NON-NLS-2$
@@ -88,7 +88,7 @@
  * @param isArrayBased <code>true</code> if the arguments should be passed in an array and false otherwise
  * @param errorResult the return value if the java code throws an exception
  */
-public Callback (Object object, String method, int argCount, boolean isArrayBased, int /*long*/ errorResult) {
+public Callback (Object object, String method, int argCount, boolean isArrayBased, long /*int*/ errorResult) {
 
 	/* Set the callback fields */
 	this.object = object;
@@ -131,7 +131,7 @@
  * @param isArrayBased whether the callback's method is array based
  * @param errorResult the callback's error result
  */
-static native synchronized int /*long*/ bind (Callback callback, Object object, String method, String signature, int argCount, boolean isStatic, boolean isArrayBased, int /*long*/ errorResult);
+static native synchronized long /*int*/ bind (Callback callback, Object object, String method, String signature, int argCount, boolean isStatic, boolean isArrayBased, long /*int*/ errorResult);
 
 /**
  * Releases the native level resources associated with the callback,
@@ -152,7 +152,7 @@
  *
  * @return the callback address
  */
-public int /*long*/ getAddress () {
+public long /*int*/ getAddress () {
 	return address;
 }
 
diff -ur x86/org/eclipse/swt/internal/cde/CDE.java x86_64/org/eclipse/swt/internal/cde/CDE.java
--- x86/org/eclipse/swt/internal/cde/CDE.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/cde/CDE.java	2009-02-11 17:43:48.000000000 -0500
@@ -25,8 +25,8 @@
 	public static final native int DtActionArg_sizeof();
 
 /** Natives */
-public static final native boolean _DtAppInitialize(int /*long*/ appContext, int /*long*/ display, int /*long*/ topWiget, byte[] appName, byte[] appClass);
-public static final boolean DtAppInitialize(int /*long*/ appContext, int /*long*/ display, int /*long*/ topWiget, byte[] appName, byte[] appClass) {
+public static final native boolean _DtAppInitialize(long /*int*/ appContext, long /*int*/ display, long /*int*/ topWiget, byte[] appName, byte[] appClass);
+public static final boolean DtAppInitialize(long /*int*/ appContext, long /*int*/ display, long /*int*/ topWiget, byte[] appName, byte[] appClass) {
 	lock.lock();
 	try {
 		return _DtAppInitialize(appContext, display, topWiget, appName, appClass);
@@ -43,8 +43,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _DtDtsDataTypeNames();
-public static final int /*long*/ DtDtsDataTypeNames() {
+public static final native long /*int*/ _DtDtsDataTypeNames();
+public static final long /*int*/ DtDtsDataTypeNames() {
 	lock.lock();
 	try {
 		return _DtDtsDataTypeNames();
@@ -52,8 +52,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _DtDtsFileToDataType(byte[] fileName);
-public static final int /*long*/ DtDtsFileToDataType(byte[] fileName) {
+public static final native long /*int*/ _DtDtsFileToDataType(byte[] fileName);
+public static final long /*int*/ DtDtsFileToDataType(byte[] fileName) {
 	lock.lock();
 	try {
 		return _DtDtsFileToDataType(fileName);
@@ -70,8 +70,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName);
-public static final int /*long*/ DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName) {
+public static final native long /*int*/ _DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName);
+public static final long /*int*/ DtDtsDataTypeToAttributeValue(byte[] dataType, byte[] attrName, byte[] optName) {
 	lock.lock();
 	try {
 		return _DtDtsDataTypeToAttributeValue(dataType, attrName, optName);
@@ -79,8 +79,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _DtDtsFreeDataType(int /*long*/ dataType);
-public static final void DtDtsFreeDataType(int /*long*/ dataType) {
+public static final native void _DtDtsFreeDataType(long /*int*/ dataType);
+public static final void DtDtsFreeDataType(long /*int*/ dataType) {
 	lock.lock();
 	try {
 		_DtDtsFreeDataType(dataType);
@@ -88,8 +88,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _DtDtsFreeDataTypeNames(int /*long*/ dataTypeList);
-public static final void DtDtsFreeDataTypeNames(int /*long*/ dataTypeList) {
+public static final native void _DtDtsFreeDataTypeNames(long /*int*/ dataTypeList);
+public static final void DtDtsFreeDataTypeNames(long /*int*/ dataTypeList) {
 	lock.lock();
 	try {
 		_DtDtsFreeDataTypeNames(dataTypeList);
@@ -97,8 +97,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _DtDtsFreeAttributeValue(int /*long*/ attrValue);
-public static final void DtDtsFreeAttributeValue(int /*long*/ attrValue) {
+public static final native void _DtDtsFreeAttributeValue(long /*int*/ attrValue);
+public static final void DtDtsFreeAttributeValue(long /*int*/ attrValue) {
 	lock.lock();
 	try {
 		_DtDtsFreeAttributeValue(attrValue);
@@ -106,8 +106,8 @@
 		lock.unlock();
 	}
 }
-public static final native long _DtActionInvoke(int /*long*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, int /*long*/ callback, int /*long*/ clientData);
-public static final long DtActionInvoke(int /*long*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, int /*long*/ callback, int /*long*/ clientData) {
+public static final native long _DtActionInvoke(long /*int*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, long /*int*/ callback, long /*int*/ clientData);
+public static final long DtActionInvoke(long /*int*/ topWidget, byte[] action, DtActionArg args, int argCount, byte[] termOpts, byte[] execHost, byte[] contextDir, int useIndicator, long /*int*/ callback, long /*int*/ clientData) {
 	lock.lock();
 	try {
 		return _DtActionInvoke(topWidget, action, args, argCount, termOpts, execHost, contextDir, useIndicator, callback, clientData);
@@ -115,8 +115,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _topLevelShellWidgetClass();
-public static final int /*long*/ topLevelShellWidgetClass() {
+public static final native long /*int*/ _topLevelShellWidgetClass();
+public static final long /*int*/ topLevelShellWidgetClass() {
 	lock.lock();
 	try {
 		return _topLevelShellWidgetClass();
@@ -124,8 +124,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XtAppCreateShell(byte[] appName, byte[] appClass, int /*long*/ widgetClass, int /*long*/ display, int /*long*/ [] argList, int argCount);
-public static final int /*long*/ XtAppCreateShell(byte[] appName, byte[] appClass, int /*long*/ widgetClass, int /*long*/ display, int /*long*/ [] argList, int argCount) {
+public static final native long /*int*/ _XtAppCreateShell(byte[] appName, byte[] appClass, long /*int*/ widgetClass, long /*int*/ display, long /*int*/ [] argList, int argCount);
+public static final long /*int*/ XtAppCreateShell(byte[] appName, byte[] appClass, long /*int*/ widgetClass, long /*int*/ display, long /*int*/ [] argList, int argCount) {
 	lock.lock();
 	try {
 		return _XtAppCreateShell(appName, appClass, widgetClass, display, argList, argCount);
@@ -133,8 +133,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XtCreateApplicationContext();
-public static final int /*long*/ XtCreateApplicationContext() {
+public static final native long /*int*/ _XtCreateApplicationContext();
+public static final long /*int*/ XtCreateApplicationContext() {
 	lock.lock();
 	try {
 		return _XtCreateApplicationContext();
@@ -142,8 +142,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XtDisplayInitialize(int /*long*/ app_context, int /*long*/ display, byte[] appName, byte[] appClass, int /*long*/ options, int num_options, int /*long*/ [] argc, int argv);
-public static final void XtDisplayInitialize(int /*long*/ appContext, int /*long*/ display, byte[] appName, byte[] appClass, int /*long*/ options, int num_options, int /*long*/ [] argc, int argv) {
+public static final native void _XtDisplayInitialize(long /*int*/ app_context, long /*int*/ display, byte[] appName, byte[] appClass, long /*int*/ options, int num_options, long /*int*/ [] argc, int argv);
+public static final void XtDisplayInitialize(long /*int*/ appContext, long /*int*/ display, byte[] appName, byte[] appClass, long /*int*/ options, int num_options, long /*int*/ [] argc, int argv) {
 	lock.lock();
 	try {
 		_XtDisplayInitialize(appContext, display, appName, appClass, options, num_options, argc, argv);
@@ -151,8 +151,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XtRealizeWidget(int /*long*/ widget);
-public static final void XtRealizeWidget(int /*long*/ widget) {
+public static final native void _XtRealizeWidget(long /*int*/ widget);
+public static final void XtRealizeWidget(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_XtRealizeWidget(widget);
@@ -160,8 +160,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XtResizeWidget(int /*long*/ widget, int width, int height, int borderWidth);
-public static final void XtResizeWidget(int /*long*/ widget, int width, int height, int borderWidth) {
+public static final native void _XtResizeWidget(long /*int*/ widget, int width, int height, int borderWidth);
+public static final void XtResizeWidget(long /*int*/ widget, int width, int height, int borderWidth) {
 	lock.lock();
 	try {
 		_XtResizeWidget(widget, width, height, borderWidth);
@@ -169,8 +169,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XtSetMappedWhenManaged(int /*long*/ widget, boolean flag);
-public static final void XtSetMappedWhenManaged(int /*long*/ widget, boolean flag) {
+public static final native void _XtSetMappedWhenManaged(long /*int*/ widget, boolean flag);
+public static final void XtSetMappedWhenManaged(long /*int*/ widget, boolean flag) {
 	lock.lock();
 	try {
 		_XtSetMappedWhenManaged(widget, flag);
diff -ur x86/org/eclipse/swt/internal/cde/DtActionArg.java x86_64/org/eclipse/swt/internal/cde/DtActionArg.java
--- x86/org/eclipse/swt/internal/cde/DtActionArg.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/cde/DtActionArg.java	2009-02-11 17:43:48.000000000 -0500
@@ -13,6 +13,6 @@
 
 public class DtActionArg {
 	public int argClass;
-	public int /*long*/ name;
+	public long /*int*/ name;
 	public static final int sizeof = CDE.DtActionArg_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/C.java x86_64/org/eclipse/swt/internal/C.java
--- x86/org/eclipse/swt/internal/C.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/C.java	2009-02-11 17:43:48.000000000 -0500
@@ -23,27 +23,27 @@
 
 	public static final int PTR_SIZEOF = PTR_sizeof ();
 
-public static final native void free (int /*long*/ ptr);
-public static final native int /*long*/ getenv (byte[] wcsToMbcs);
-public static final native int /*long*/ malloc (int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, byte[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, char[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, double[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, float[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, int[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, long[] src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, short[] src, int /*long*/ size);
-public static final native void memmove (byte[] dest, char[] src, int /*long*/ size);
-public static final native void memmove (byte[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (int /*long*/ dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (char[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (double[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (float[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (int[] dest, byte[] src, int /*long*/ size);
-public static final native void memmove (short[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (int[] dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove (long[] dest, int /*long*/ src, int /*long*/ size);
-public static final native int /*long*/ memset (int /*long*/ buffer, int c, int /*long*/ num);
+public static final native void free (long /*int*/ ptr);
+public static final native long /*int*/ getenv (byte[] wcsToMbcs);
+public static final native long /*int*/ malloc (long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, byte[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, char[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, double[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, float[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, int[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, long[] src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, short[] src, long /*int*/ size);
+public static final native void memmove (byte[] dest, char[] src, long /*int*/ size);
+public static final native void memmove (byte[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (long /*int*/ dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (char[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (double[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (float[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (int[] dest, byte[] src, long /*int*/ size);
+public static final native void memmove (short[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (int[] dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove (long[] dest, long /*int*/ src, long /*int*/ size);
+public static final native long /*int*/ memset (long /*int*/ buffer, int c, long /*int*/ num);
 public static final native int PTR_sizeof ();
-public static final native int strlen (int /*long*/ s);
+public static final native int strlen (long /*int*/ s);
 }
diff -ur x86/org/eclipse/swt/internal/Converter.java x86_64/org/eclipse/swt/internal/Converter.java
--- x86/org/eclipse/swt/internal/Converter.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/Converter.java	2009-02-11 17:43:50.000000000 -0500
@@ -37,8 +37,8 @@
 }
 
 public static char [] mbcsToWcs (String codePage, byte [] buffer) {
-	int /*long*/ [] items_written = new int /*long*/ [1];
-	int /*long*/ ptr = OS.g_utf8_to_utf16 (buffer, buffer.length, null, items_written, null);
+	long /*int*/ [] items_written = new long /*int*/ [1];
+	long /*int*/ ptr = OS.g_utf8_to_utf16 (buffer, buffer.length, null, items_written, null);
 	if (ptr == 0) return EmptyCharArray;
 	int length = (int)/*64*/items_written [0];
 	char [] chars = new char [length];
@@ -55,12 +55,12 @@
 }
 
 public static byte [] wcsToMbcs (String codePage, char [] buffer, boolean terminate) {
-	int /*long*/ [] items_read = new int /*long*/ [1], items_written = new int /*long*/ [1];
+	long /*int*/ [] items_read = new long /*int*/ [1], items_written = new long /*int*/ [1];
 	/*
 	* Note that g_utf16_to_utf8()  stops converting 
 	* when it finds the first NULL.
 	*/
-	int /*long*/ ptr = OS.g_utf16_to_utf8 (buffer, buffer.length, items_read, items_written, null);
+	long /*int*/ ptr = OS.g_utf16_to_utf8 (buffer, buffer.length, items_read, items_written, null);
 	if (ptr == 0) return terminate ? NullByteArray : EmptyByteArray;
 	int written = (int)/*64*/items_written [0];
 	byte [] bytes = new byte [written + (terminate ? 1 : 0)];
diff -ur x86/org/eclipse/swt/internal/gnome/GNOME.java x86_64/org/eclipse/swt/internal/gnome/GNOME.java
--- x86/org/eclipse/swt/internal/gnome/GNOME.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gnome/GNOME.java	2009-02-11 17:43:48.000000000 -0500
@@ -34,8 +34,8 @@
 public static final native int GnomeVFSMimeApplication_sizeof();
 
 /** Natives */
-public static final native void _g_free(int /*long*/ mem);
-public static final void g_free(int /*long*/ mem) {
+public static final native void _g_free(long /*int*/ mem);
+public static final void g_free(long /*int*/ mem) {
 	lock.lock();
 	try {
 		_g_free(mem);
@@ -43,8 +43,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_append(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_append(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_append(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_append(list, data);
@@ -52,8 +52,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_list_free(int /*long*/ list);
-public static final void g_list_free(int /*long*/ list) {
+public static final native void _g_list_free(long /*int*/ list);
+public static final void g_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free(list);
@@ -61,8 +61,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_next(int /*long*/ list);
-public static final int /*long*/ g_list_next(int /*long*/ list) {
+public static final native long /*int*/ _g_list_next(long /*int*/ list);
+public static final long /*int*/ g_list_next(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_next(list);
@@ -70,8 +70,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_unref(int /*long*/ object);
-public static final void g_object_unref(int /*long*/ object) {
+public static final native void _g_object_unref(long /*int*/ object);
+public static final void g_object_unref(long /*int*/ object) {
 	lock.lock();
 	try {
 		_g_object_unref(object);
@@ -79,8 +79,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_icon_lookup(int /*long*/ icon_theme, int /*long*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, int /*long*/ file_info, byte[] mime_type, int flags, int[] result);
-public static final int /*long*/ gnome_icon_lookup(int /*long*/ icon_theme, int /*long*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, int /*long*/ file_info, byte[] mime_type, int flags, int[] result) {
+public static final native long /*int*/ _gnome_icon_lookup(long /*int*/ icon_theme, long /*int*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, long /*int*/ file_info, byte[] mime_type, int flags, int[] result);
+public static final long /*int*/ gnome_icon_lookup(long /*int*/ icon_theme, long /*int*/ thumbnail_factory, byte[] file_uri, byte[] custom_icon, long /*int*/ file_info, byte[] mime_type, int flags, int[] result) {
 	lock.lock();
 	try {
 		return _gnome_icon_lookup(icon_theme, thumbnail_factory, file_uri, custom_icon, file_info, mime_type, flags, result);
@@ -88,8 +88,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_icon_theme_lookup_icon(int /*long*/ theme, int /*long*/ icon_name, int size, int /*long*/[] icon_data, int[] base_size);
-public static final int /*long*/ gnome_icon_theme_lookup_icon(int /*long*/ theme, int /*long*/ icon_name, int size, int /*long*/[] icon_data, int[] base_size) {
+public static final native long /*int*/ _gnome_icon_theme_lookup_icon(long /*int*/ theme, long /*int*/ icon_name, int size, long /*int*/[] icon_data, int[] base_size);
+public static final long /*int*/ gnome_icon_theme_lookup_icon(long /*int*/ theme, long /*int*/ icon_name, int size, long /*int*/[] icon_data, int[] base_size) {
 	lock.lock();
 	try {
 		return _gnome_icon_theme_lookup_icon(theme, icon_name, size, icon_data, base_size);
@@ -97,8 +97,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_icon_theme_new();
-public static final int /*long*/ gnome_icon_theme_new() {
+public static final native long /*int*/ _gnome_icon_theme_new();
+public static final long /*int*/ gnome_icon_theme_new() {
 	lock.lock();
 	try {
 		return _gnome_icon_theme_new();
@@ -106,8 +106,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_get_registered_mime_types();
-public static final int /*long*/ gnome_vfs_get_registered_mime_types() {
+public static final native long /*int*/ _gnome_vfs_get_registered_mime_types();
+public static final long /*int*/ gnome_vfs_get_registered_mime_types() {
 	lock.lock();
 	try {
 		return _gnome_vfs_get_registered_mime_types();
@@ -124,8 +124,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_make_uri_from_input(byte[] uri);
-public static final int /*long*/ gnome_vfs_make_uri_from_input(byte[] uri) {
+public static final native long /*int*/ _gnome_vfs_make_uri_from_input(byte[] uri);
+public static final long /*int*/ gnome_vfs_make_uri_from_input(byte[] uri) {
 	lock.lock();
 	try {
 		return _gnome_vfs_make_uri_from_input(uri);
@@ -133,8 +133,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs);
-public static final int /*long*/ gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs) {
+public static final native long /*int*/ _gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs);
+public static final long /*int*/ gnome_vfs_make_uri_from_input_with_dirs(byte[] uri, int dirs) {
 	lock.lock();
 	try {
 		return _gnome_vfs_make_uri_from_input_with_dirs(uri, dirs);
@@ -142,8 +142,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gnome_vfs_mime_application_free(int /*long*/ application);
-public static final void gnome_vfs_mime_application_free(int /*long*/ application) {
+public static final native void _gnome_vfs_mime_application_free(long /*int*/ application);
+public static final void gnome_vfs_mime_application_free(long /*int*/ application) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_application_free(application);
@@ -151,8 +151,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gnome_vfs_mime_application_launch(int /*long*/ application, int /*long*/ uris);
-public static final int gnome_vfs_mime_application_launch(int /*long*/ application, int /*long*/ uris) {	
+public static final native int _gnome_vfs_mime_application_launch(long /*int*/ application, long /*int*/ uris);
+public static final int gnome_vfs_mime_application_launch(long /*int*/ application, long /*int*/ uris) {	
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_application_launch(application, uris);
@@ -160,8 +160,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gnome_vfs_mime_extensions_list_free(int /*long*/ list);
-public static final void gnome_vfs_mime_extensions_list_free(int /*long*/ list) {
+public static final native void _gnome_vfs_mime_extensions_list_free(long /*int*/ list);
+public static final void gnome_vfs_mime_extensions_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_extensions_list_free(list);
@@ -169,8 +169,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_mime_get_default_application(byte[] mimeType);
-public static final int /*long*/ gnome_vfs_mime_get_default_application(byte[] mimeType) {
+public static final native long /*int*/ _gnome_vfs_mime_get_default_application(byte[] mimeType);
+public static final long /*int*/ gnome_vfs_mime_get_default_application(byte[] mimeType) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_get_default_application(mimeType);
@@ -178,8 +178,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_mime_get_extensions_list(int /*long*/ mime_type);
-public static final int /*long*/ gnome_vfs_mime_get_extensions_list(int /*long*/ mime_type) {
+public static final native long /*int*/ _gnome_vfs_mime_get_extensions_list(long /*int*/ mime_type);
+public static final long /*int*/ gnome_vfs_mime_get_extensions_list(long /*int*/ mime_type) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_get_extensions_list(mime_type);
@@ -187,8 +187,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gnome_vfs_mime_registered_mime_type_list_free(int /*long*/ list);
-public static final void gnome_vfs_mime_registered_mime_type_list_free(int /*long*/ list) {
+public static final native void _gnome_vfs_mime_registered_mime_type_list_free(long /*int*/ list);
+public static final void gnome_vfs_mime_registered_mime_type_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gnome_vfs_mime_registered_mime_type_list_free(list);
@@ -196,8 +196,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gnome_vfs_mime_type_from_name(byte[] file);
-public static final int /*long*/ gnome_vfs_mime_type_from_name(byte[] file) {
+public static final native long /*int*/ _gnome_vfs_mime_type_from_name(byte[] file);
+public static final long /*int*/ gnome_vfs_mime_type_from_name(byte[] file) {
 	lock.lock();
 	try {
 		return _gnome_vfs_mime_type_from_name(file);
@@ -205,8 +205,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gnome_vfs_url_show(int /*long*/ url);
-public static final int gnome_vfs_url_show(int /*long*/ url) {
+public static final native int _gnome_vfs_url_show(long /*int*/ url);
+public static final int gnome_vfs_url_show(long /*int*/ url) {
 	lock.lock();
 	try {
 		return _gnome_vfs_url_show(url);
@@ -214,5 +214,5 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove (GnomeVFSMimeApplication dest, int /*long*/ src, int /*long*/ count);
+public static final native void memmove (GnomeVFSMimeApplication dest, long /*int*/ src, long /*int*/ count);
 }
diff -ur x86/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java x86_64/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java
--- x86/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gnome/GnomeVFSMimeApplication.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,12 +16,12 @@
 
  
 public class GnomeVFSMimeApplication {
-	public int /*long*/ id;
-	public int /*long*/ name;
-	public int /*long*/ command;
+	public long /*int*/ id;
+	public long /*int*/ name;
+	public long /*int*/ command;
 	public boolean can_open_multiple_files;
 	public int expects_uris;
-	public int /*long*/ supported_uri_schemes;
+	public long /*int*/ supported_uri_schemes;
 	public boolean requires_terminal;
 	public static final int sizeof = GNOME.GnomeVFSMimeApplication_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GdkDragContext.java x86_64/org/eclipse/swt/internal/gtk/GdkDragContext.java
--- x86/org/eclipse/swt/internal/gtk/GdkDragContext.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkDragContext.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,9 +18,9 @@
 public class GdkDragContext {     
    public int protocol;
    public boolean is_source;
-   public int /*long*/ source_window;
-   public int /*long*/ dest_window;
-   public int /*long*/ targets;
+   public long /*int*/ source_window;
+   public long /*int*/ dest_window;
+   public long /*int*/ targets;
    public int actions;
    public int suggested_action;
    public int action; 
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventAny.java x86_64/org/eclipse/swt/internal/gtk/GdkEventAny.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventAny.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventAny.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GdkEventAny extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public static final int sizeof = OS.GdkEventAny_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventButton.java x86_64/org/eclipse/swt/internal/gtk/GdkEventButton.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventButton.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventButton.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,15 +16,15 @@
 
 
 public class GdkEventButton extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public int time;
 	public double x;
 	public double y;
-	public int /*long*/ axes;
+	public long /*int*/ axes;
 	public int state;
 	public int button;
-	public int /*long*/ device;
+	public long /*int*/ device;
 	public double x_root;
 	public double y_root;
 	public static final int sizeof = OS.GdkEventButton_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventCrossing.java x86_64/org/eclipse/swt/internal/gtk/GdkEventCrossing.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventCrossing.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventCrossing.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,9 +16,9 @@
 
 
 public class GdkEventCrossing extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
-	public int /*long*/ subwindow;
+	public long /*int*/ subwindow;
 	public int time;
 	public double x;
 	public double y;
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventExpose.java x86_64/org/eclipse/swt/internal/gtk/GdkEventExpose.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventExpose.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventExpose.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,13 +16,13 @@
 
 
 public class GdkEventExpose extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public int area_x;
 	public int area_y;
 	public int area_width;
 	public int area_height;
-	public int /*long*/ region;
+	public long /*int*/ region;
 	public int count;
 	public static final int sizeof = OS.GdkEventExpose_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventFocus.java x86_64/org/eclipse/swt/internal/gtk/GdkEventFocus.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventFocus.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventFocus.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GdkEventFocus extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public short in;
 	public static final int sizeof = OS.GdkEventFocus_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventKey.java x86_64/org/eclipse/swt/internal/gtk/GdkEventKey.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventKey.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventKey.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,13 +16,13 @@
 
 
 public class GdkEventKey extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public int time;
 	public int state;
 	public int keyval;
 	public int length;
-	public int /*long*/ string;
+	public long /*int*/ string;
 	public short hardware_keycode;
     public byte group;
    	public static final int sizeof = OS.GdkEventKey_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventMotion.java x86_64/org/eclipse/swt/internal/gtk/GdkEventMotion.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventMotion.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventMotion.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,15 +16,15 @@
 
 
 public class GdkEventMotion extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public int time;
 	public double x;
 	public double y;
-	public int /*long*/ axes;
+	public long /*int*/ axes;
 	public int state;
 	public short is_hint;
-	public int /*long*/ device;
+	public long /*int*/ device;
 	public double x_root;
 	public double y_root;
 	public static final int sizeof = OS.GdkEventMotion_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventScroll.java x86_64/org/eclipse/swt/internal/gtk/GdkEventScroll.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventScroll.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventScroll.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,14 +16,14 @@
 
 
 public class GdkEventScroll extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event;
 	public int time;
 	public double x;
 	public double y;
 	public int state;
 	public int direction;
-	public int /*long*/ device;
+	public long /*int*/ device;
 	public double x_root;
 	public double y_root;
 	public static final int sizeof = OS.GdkEventScroll_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventVisibility.java x86_64/org/eclipse/swt/internal/gtk/GdkEventVisibility.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventVisibility.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventVisibility.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GdkEventVisibility extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event; 
 	public int state;
 	public static final int sizeof = OS.GdkEventVisibility_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GdkEventWindowState.java x86_64/org/eclipse/swt/internal/gtk/GdkEventWindowState.java
--- x86/org/eclipse/swt/internal/gtk/GdkEventWindowState.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkEventWindowState.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GdkEventWindowState extends GdkEvent {
-	public int /*long*/ window;
+	public long /*int*/ window;
 	public byte send_event; 
 	public int changed_mask;
 	public int new_window_state;
diff -ur x86/org/eclipse/swt/internal/gtk/GdkGCValues.java x86_64/org/eclipse/swt/internal/gtk/GdkGCValues.java
--- x86/org/eclipse/swt/internal/gtk/GdkGCValues.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkGCValues.java	2009-02-11 17:43:48.000000000 -0500
@@ -24,12 +24,12 @@
 	public short background_red;
 	public short background_green;
 	public short background_blue;
-	public int /*long*/ font;
-	public int /*long*/ function;
+	public long /*int*/ font;
+	public long /*int*/ function;
 	public int fill;
-	public int /*long*/ tile;
-	public int /*long*/ stipple;
-	public int /*long*/ clip_mask;
+	public long /*int*/ tile;
+	public long /*int*/ stipple;
+	public long /*int*/ clip_mask;
 	public int subwindow_mode;
 	public int ts_x_origin;
 	public int ts_y_origin;
diff -ur x86/org/eclipse/swt/internal/gtk/GdkImage.java x86_64/org/eclipse/swt/internal/gtk/GdkImage.java
--- x86/org/eclipse/swt/internal/gtk/GdkImage.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkImage.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,7 +17,7 @@
 
 public class GdkImage {
 	public int type;
-	public int /*long*/ visual;
+	public long /*int*/ visual;
 	public int byte_order;
 	public int width;
 	public int height;
@@ -25,7 +25,7 @@
 	public short bpp;
 	public short bpl;
 	public short bits_per_pixel;
-	public int /*long*/ mem;
-	public int /*long*/ colormap;
-	public int /*long*/ windowing_data;
+	public long /*int*/ mem;
+	public long /*int*/ colormap;
+	public long /*int*/ windowing_data;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GdkWindowAttr.java x86_64/org/eclipse/swt/internal/gtk/GdkWindowAttr.java
--- x86/org/eclipse/swt/internal/gtk/GdkWindowAttr.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GdkWindowAttr.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,18 +16,18 @@
 
 
 public class GdkWindowAttr {
-	public int /*long*/ title;
+	public long /*int*/ title;
 	public int event_mask;
 	public int x, y;
 	public int width;
 	public int height;
 	public int wclass;
-	public int /*long*/ visual;
-	public int /*long*/ colormap;
+	public long /*int*/ visual;
+	public long /*int*/ colormap;
 	public int window_type;
-	public int /*long*/ cursor;
-	public int /*long*/ wmclass_name;
-	public int /*long*/ wmclass_class;
+	public long /*int*/ cursor;
+	public long /*int*/ wmclass_name;
+	public long /*int*/ wmclass_class;
 	public boolean override_redirect;
 	public static final int sizeof = OS.GdkWindowAttr_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GInterfaceInfo.java x86_64/org/eclipse/swt/internal/gtk/GInterfaceInfo.java
--- x86/org/eclipse/swt/internal/gtk/GInterfaceInfo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GInterfaceInfo.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,8 +16,8 @@
 
 
 public class GInterfaceInfo {
-	public int /*long*/ interface_init;
-	public int /*long*/ interface_finalize;
-	public int /*long*/ interface_data;
+	public long /*int*/ interface_init;
+	public long /*int*/ interface_finalize;
+	public long /*int*/ interface_data;
 	public static final int sizeof = OS.GInterfaceInfo_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GObjectClass.java x86_64/org/eclipse/swt/internal/gtk/GObjectClass.java
--- x86/org/eclipse/swt/internal/gtk/GObjectClass.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GObjectClass.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,11 +16,11 @@
 
 
 public class GObjectClass {
-	public int /*long*/ constructor;
-	public int /*long*/ set_property;
-	public int /*long*/ get_property;
-	public int /*long*/ dispose;
-	public int /*long*/ finalize;
-	public int /*long*/ dispatch_properties_changed;
-	public int /*long*/ notify;
+	public long /*int*/ constructor;
+	public long /*int*/ set_property;
+	public long /*int*/ get_property;
+	public long /*int*/ dispose;
+	public long /*int*/ finalize;
+	public long /*int*/ dispatch_properties_changed;
+	public long /*int*/ notify;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java x86_64/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java
--- x86/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkCellRendererClass.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,6 +16,6 @@
 
 
 public class GtkCellRendererClass {
-	public int /*long*/ render;
-	public int /*long*/ get_size;
+	public long /*int*/ render;
+	public long /*int*/ get_size;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java x86_64/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java
--- x86/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkColorSelectionDialog.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,8 +16,8 @@
 
 
 public class GtkColorSelectionDialog {
-	public int /*long*/ colorsel;
-	public int /*long*/ ok_button;
-	public int /*long*/ cancel_button;
-	public int /*long*/ help_button;
+	public long /*int*/ colorsel;
+	public long /*int*/ ok_button;
+	public long /*int*/ cancel_button;
+	public long /*int*/ help_button;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkCombo.java x86_64/org/eclipse/swt/internal/gtk/GtkCombo.java
--- x86/org/eclipse/swt/internal/gtk/GtkCombo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkCombo.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,6 +16,6 @@
 
 
 public class GtkCombo {
-	public int /*long*/ entry;
-	public int /*long*/ list;
+	public long /*int*/ entry;
+	public long /*int*/ list;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkFileSelection.java x86_64/org/eclipse/swt/internal/gtk/GtkFileSelection.java
--- x86/org/eclipse/swt/internal/gtk/GtkFileSelection.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkFileSelection.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,24 +16,24 @@
 
 
 public class GtkFileSelection {
-	public int /*long*/ dir_list;
-	public int /*long*/ file_list;
-	public int /*long*/ selection_entry;
-	public int /*long*/ selection_text;
-	public int /*long*/ main_vbox;
-	public int /*long*/ ok_button;
-	public int /*long*/ cancel_button;
-	public int /*long*/ help_button;
-	public int /*long*/ history_pulldown;
-	public int /*long*/ history_menu;
-	public int /*long*/ history_list;
-	public int /*long*/ fileop_dialog;
-	public int /*long*/ fileop_entry;
-	public int /*long*/ fileop_file;
-	public int /*long*/ cmpl_state;			// gpointer
-	public int /*long*/ fileop_c_dir;
-	public int /*long*/ fileop_del_file;
-	public int /*long*/ fileop_ren_file;
-	public int /*long*/ button_area;
-	public int /*long*/ action_area;
+	public long /*int*/ dir_list;
+	public long /*int*/ file_list;
+	public long /*int*/ selection_entry;
+	public long /*int*/ selection_text;
+	public long /*int*/ main_vbox;
+	public long /*int*/ ok_button;
+	public long /*int*/ cancel_button;
+	public long /*int*/ help_button;
+	public long /*int*/ history_pulldown;
+	public long /*int*/ history_menu;
+	public long /*int*/ history_list;
+	public long /*int*/ fileop_dialog;
+	public long /*int*/ fileop_entry;
+	public long /*int*/ fileop_file;
+	public long /*int*/ cmpl_state;			// gpointer
+	public long /*int*/ fileop_c_dir;
+	public long /*int*/ fileop_del_file;
+	public long /*int*/ fileop_ren_file;
+	public long /*int*/ button_area;
+	public long /*int*/ action_area;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkFixed.java x86_64/org/eclipse/swt/internal/gtk/GtkFixed.java
--- x86/org/eclipse/swt/internal/gtk/GtkFixed.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkFixed.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,5 +16,5 @@
 
 
 public class GtkFixed {
-	public int /*long*/ children;
+	public long /*int*/ children;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkSelectionData.java x86_64/org/eclipse/swt/internal/gtk/GtkSelectionData.java
--- x86/org/eclipse/swt/internal/gtk/GtkSelectionData.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkSelectionData.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,11 +16,11 @@
 
 
 public class GtkSelectionData {
-	public int /*long*/  selection;
-	public int /*long*/  target;
-	public int /*long*/  type;
+	public long /*int*/  selection;
+	public long /*int*/  target;
+	public long /*int*/  type;
 	public int  format;
-	public int /*long*/  data;  
+	public long /*int*/  data;  
 	public int  length;
 	public static final int sizeof = OS.GtkSelectionData_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GtkTargetEntry.java x86_64/org/eclipse/swt/internal/gtk/GtkTargetEntry.java
--- x86/org/eclipse/swt/internal/gtk/GtkTargetEntry.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkTargetEntry.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GtkTargetEntry {
-	public int /*long*/ target;
+	public long /*int*/ target;
 	public int flags;
 	public int info;
 	public static final int sizeof = OS.GtkTargetEntry_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GtkTargetPair.java x86_64/org/eclipse/swt/internal/gtk/GtkTargetPair.java
--- x86/org/eclipse/swt/internal/gtk/GtkTargetPair.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkTargetPair.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class GtkTargetPair {
-	public int /*long*/ target;
+	public long /*int*/ target;
 	public int flags;
 	public int info;
 	public static final int sizeof = OS.GtkTargetPair_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/GtkWidgetClass.java x86_64/org/eclipse/swt/internal/gtk/GtkWidgetClass.java
--- x86/org/eclipse/swt/internal/gtk/GtkWidgetClass.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GtkWidgetClass.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,66 +18,66 @@
 public class GtkWidgetClass extends GObjectClass {
 	public int activate_signal;
 	public int set_scroll_adjustments_signal;	
-	public int /*long*/ dispatch_child_properties_changed;
-	public int /*long*/ show;
-	public int /*long*/ show_all;
-	public int /*long*/ hide;
-	public int /*long*/ hide_all;
-	public int /*long*/ map;
-	public int /*long*/ unmap;
-	public int /*long*/ realize;
-	public int /*long*/ unrealize;
-	public int /*long*/ size_request;
-	public int /*long*/ size_allocate;
-	public int /*long*/ state_changed; 
-	public int /*long*/ parent_set;
-	public int /*long*/ hierarchy_changed;
-	public int /*long*/ style_set;
-	public int /*long*/ direction_changed;
-	public int /*long*/ grab_notify;
-	public int /*long*/ child_notify;	
-	public int /*long*/ mnemonic_activate;
-	public int /*long*/ grab_focus;
-	public int /*long*/ focus;
-	public int /*long*/ event;
-	public int /*long*/ button_press_event;
-	public int /*long*/ button_release_event;
-	public int /*long*/ scroll_event;
-	public int /*long*/ motion_notify_event;
-	public int /*long*/ delete_event;
-	public int /*long*/ destroy_event;
-	public int /*long*/ expose_event;
-	public int /*long*/ key_press_event;
-	public int /*long*/ key_release_event;
-	public int /*long*/ enter_notify_event;
-	public int /*long*/ leave_notify_event;
-	public int /*long*/ configure_event;
-	public int /*long*/ focus_in_event;
-	public int /*long*/ focus_out_event;
-	public int /*long*/ map_event;
-	public int /*long*/ unmap_event;
-	public int /*long*/ property_notify_event;
-	public int /*long*/ selection_clear_event;
-	public int /*long*/ selection_request_event;
-	public int /*long*/ selection_notify_event;
-	public int /*long*/ proximity_in_event;
-	public int /*long*/ proximity_out_event;
-	public int /*long*/ visibility_notify_event;
-	public int /*long*/ client_event;
-	public int /*long*/ no_expose_event;
-	public int /*long*/ window_state_event;
-	public int /*long*/ selection_get;
-	public int /*long*/ selection_received;
-	public int /*long*/ drag_begin;
-	public int /*long*/ drag_end;
-	public int /*long*/ drag_data_get;
-	public int /*long*/ drag_data_delete;
-	public int /*long*/ drag_leave;
-	public int /*long*/ drag_motion;
-	public int /*long*/ drag_drop;
-	public int /*long*/ drag_data_received;
-	public int /*long*/ popup_menu;
-	public int /*long*/ show_help;
-	public int /*long*/ get_accessible;
-	public int /*long*/ screen_changed;
+	public long /*int*/ dispatch_child_properties_changed;
+	public long /*int*/ show;
+	public long /*int*/ show_all;
+	public long /*int*/ hide;
+	public long /*int*/ hide_all;
+	public long /*int*/ map;
+	public long /*int*/ unmap;
+	public long /*int*/ realize;
+	public long /*int*/ unrealize;
+	public long /*int*/ size_request;
+	public long /*int*/ size_allocate;
+	public long /*int*/ state_changed; 
+	public long /*int*/ parent_set;
+	public long /*int*/ hierarchy_changed;
+	public long /*int*/ style_set;
+	public long /*int*/ direction_changed;
+	public long /*int*/ grab_notify;
+	public long /*int*/ child_notify;	
+	public long /*int*/ mnemonic_activate;
+	public long /*int*/ grab_focus;
+	public long /*int*/ focus;
+	public long /*int*/ event;
+	public long /*int*/ button_press_event;
+	public long /*int*/ button_release_event;
+	public long /*int*/ scroll_event;
+	public long /*int*/ motion_notify_event;
+	public long /*int*/ delete_event;
+	public long /*int*/ destroy_event;
+	public long /*int*/ expose_event;
+	public long /*int*/ key_press_event;
+	public long /*int*/ key_release_event;
+	public long /*int*/ enter_notify_event;
+	public long /*int*/ leave_notify_event;
+	public long /*int*/ configure_event;
+	public long /*int*/ focus_in_event;
+	public long /*int*/ focus_out_event;
+	public long /*int*/ map_event;
+	public long /*int*/ unmap_event;
+	public long /*int*/ property_notify_event;
+	public long /*int*/ selection_clear_event;
+	public long /*int*/ selection_request_event;
+	public long /*int*/ selection_notify_event;
+	public long /*int*/ proximity_in_event;
+	public long /*int*/ proximity_out_event;
+	public long /*int*/ visibility_notify_event;
+	public long /*int*/ client_event;
+	public long /*int*/ no_expose_event;
+	public long /*int*/ window_state_event;
+	public long /*int*/ selection_get;
+	public long /*int*/ selection_received;
+	public long /*int*/ drag_begin;
+	public long /*int*/ drag_end;
+	public long /*int*/ drag_data_get;
+	public long /*int*/ drag_data_delete;
+	public long /*int*/ drag_leave;
+	public long /*int*/ drag_motion;
+	public long /*int*/ drag_drop;
+	public long /*int*/ drag_data_received;
+	public long /*int*/ popup_menu;
+	public long /*int*/ show_help;
+	public long /*int*/ get_accessible;
+	public long /*int*/ screen_changed;
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GTypeInfo.java x86_64/org/eclipse/swt/internal/gtk/GTypeInfo.java
--- x86/org/eclipse/swt/internal/gtk/GTypeInfo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GTypeInfo.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,14 +17,14 @@
 
 public class GTypeInfo {
 	public short class_size;
-	public int /*long*/ base_init;
-	public int /*long*/ base_finalize;
-	public int /*long*/ class_init;
-	public int /*long*/ class_finalize;
-	public int /*long*/ class_data;
+	public long /*int*/ base_init;
+	public long /*int*/ base_finalize;
+	public long /*int*/ class_init;
+	public long /*int*/ class_finalize;
+	public long /*int*/ class_data;
 	public short instance_size;
 	public short n_preallocs;
-	public int /*long*/ instance_init;
-	public int /*long*/ value_table;
+	public long /*int*/ instance_init;
+	public long /*int*/ value_table;
 	public static final int sizeof = OS.GTypeInfo_sizeof();	
 }
diff -ur x86/org/eclipse/swt/internal/gtk/GTypeQuery.java x86_64/org/eclipse/swt/internal/gtk/GTypeQuery.java
--- x86/org/eclipse/swt/internal/gtk/GTypeQuery.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/GTypeQuery.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,7 +17,7 @@
 
 public class GTypeQuery {
 	public int type;
-	public int /*long*/ type_name;
+	public long /*int*/ type_name;
 	public int class_size;
 	public int instance_size;
 	public static final int sizeof = OS.GTypeQuery_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/OS.java x86_64/org/eclipse/swt/internal/gtk/OS.java
--- x86/org/eclipse/swt/internal/gtk/OS.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/OS.java	2009-02-11 17:43:48.000000000 -0500
@@ -575,34 +575,34 @@
 public static final native int XFocusChangeEvent_sizeof();
 public static final native int XVisibilityEvent_sizeof();
 public static final native int XWindowChanges_sizeof();
-public static final native int /*long*/ localeconv_decimal_point();
-public static final native int /*long*/ realpath(byte[] path, byte[] realPath);
+public static final native long /*int*/ localeconv_decimal_point();
+public static final native long /*int*/ realpath(byte[] path, byte[] realPath);
 
 /** Object private fields accessors */
-public static final native int GTK_WIDGET_HEIGHT(int /*long*/ widget);
-public static final native int GTK_WIDGET_WIDTH(int /*long*/ widget);
-public static final native int /*long*/ GTK_WIDGET_WINDOW(int /*long*/ widget);
-public static final native int GTK_WIDGET_X(int /*long*/ widget);
-public static final native int GTK_WIDGET_Y(int /*long*/ widget);
-public static final native int /*long*/ GTK_SCROLLED_WINDOW_HSCROLLBAR(int /*long*/ widget);
-public static final native int /*long*/ GTK_SCROLLED_WINDOW_VSCROLLBAR(int /*long*/ widget);
-public static final native int GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(int /*long*/ widget);
-public static final native void GTK_ACCEL_LABEL_SET_ACCEL_STRING(int /*long*/ acce_label, int /*long*/ string);
-public static final native int /*long*/ GTK_ACCEL_LABEL_GET_ACCEL_STRING(int /*long*/ acce_label);
-public static final native int /*long*/ GTK_ENTRY_IM_CONTEXT(int /*long*/ widget);
-public static final native int /*long*/ GTK_TEXTVIEW_IM_CONTEXT(int /*long*/ widget);
-public static final native int /*long*/ GTK_TOOLTIPS_TIP_WINDOW(int /*long*/ widget);
-public static final native void GTK_TOOLTIPS_SET_ACTIVE(int /*long*/ widget, int /*long*/ data);
-public static final native void GTK_WIDGET_SET_HEIGHT(int /*long*/ widget, int height);
-public static final native void GTK_WIDGET_SET_WIDTH(int /*long*/ widget, int width);
-public static final native void GTK_WIDGET_SET_X(int /*long*/ widget, int x);
-public static final native void GTK_WIDGET_SET_Y(int /*long*/ widget, int y);
-public static final native int GTK_WIDGET_REQUISITION_WIDTH(int /*long*/ widget);
-public static final native int GTK_WIDGET_REQUISITION_HEIGHT(int /*long*/ widget);
-public static final native int GDK_EVENT_TYPE(int /*long*/ event);
-public static final native int /*long*/ GDK_EVENT_WINDOW(int /*long*/ event);
-public static final native int X_EVENT_TYPE(int /*long*/ xevent);
-public static final native int /*long*/ X_EVENT_WINDOW(int /*long*/ xevent);
+public static final native int GTK_WIDGET_HEIGHT(long /*int*/ widget);
+public static final native int GTK_WIDGET_WIDTH(long /*int*/ widget);
+public static final native long /*int*/ GTK_WIDGET_WINDOW(long /*int*/ widget);
+public static final native int GTK_WIDGET_X(long /*int*/ widget);
+public static final native int GTK_WIDGET_Y(long /*int*/ widget);
+public static final native long /*int*/ GTK_SCROLLED_WINDOW_HSCROLLBAR(long /*int*/ widget);
+public static final native long /*int*/ GTK_SCROLLED_WINDOW_VSCROLLBAR(long /*int*/ widget);
+public static final native int GTK_SCROLLED_WINDOW_SCROLLBAR_SPACING(long /*int*/ widget);
+public static final native void GTK_ACCEL_LABEL_SET_ACCEL_STRING(long /*int*/ acce_label, long /*int*/ string);
+public static final native long /*int*/ GTK_ACCEL_LABEL_GET_ACCEL_STRING(long /*int*/ acce_label);
+public static final native long /*int*/ GTK_ENTRY_IM_CONTEXT(long /*int*/ widget);
+public static final native long /*int*/ GTK_TEXTVIEW_IM_CONTEXT(long /*int*/ widget);
+public static final native long /*int*/ GTK_TOOLTIPS_TIP_WINDOW(long /*int*/ widget);
+public static final native void GTK_TOOLTIPS_SET_ACTIVE(long /*int*/ widget, long /*int*/ data);
+public static final native void GTK_WIDGET_SET_HEIGHT(long /*int*/ widget, int height);
+public static final native void GTK_WIDGET_SET_WIDTH(long /*int*/ widget, int width);
+public static final native void GTK_WIDGET_SET_X(long /*int*/ widget, int x);
+public static final native void GTK_WIDGET_SET_Y(long /*int*/ widget, int y);
+public static final native int GTK_WIDGET_REQUISITION_WIDTH(long /*int*/ widget);
+public static final native int GTK_WIDGET_REQUISITION_HEIGHT(long /*int*/ widget);
+public static final native int GDK_EVENT_TYPE(long /*int*/ event);
+public static final native long /*int*/ GDK_EVENT_WINDOW(long /*int*/ event);
+public static final native int X_EVENT_TYPE(long /*int*/ xevent);
+public static final native long /*int*/ X_EVENT_WINDOW(long /*int*/ xevent);
 
 /** X11 Native methods and constants */
 public static final int Above = 0;
@@ -620,7 +620,7 @@
 public static final int GraphicsExpose = 13;
 public static final int NoExpose = 14;
 public static final int ExposureMask = 1 << 15;
-public static final int /*long*/ NoEventMask = 0;
+public static final long /*int*/ NoEventMask = 0;
 public static final int NotifyNormal = 0;
 public static final int NotifyGrab = 1;
 public static final int NotifyHint = 1;
@@ -636,8 +636,8 @@
 public static final int VisibilityFullyObscured = 2;
 public static final int VisibilityNotify = 15;
 public static final int SYSTEM_TRAY_REQUEST_DOCK = 0;
-public static final native int _Call(int /*long*/ proc, int /*long*/ arg1, int /*long*/ arg2);
-public static final int Call(int /*long*/ proc, int /*long*/ arg1, int /*long*/ arg2) {
+public static final native int _Call(long /*int*/ proc, long /*int*/ arg1, long /*int*/ arg2);
+public static final int Call(long /*int*/ proc, long /*int*/ arg1, long /*int*/ arg2) {
 	lock.lock();
 	try {
 		return _Call(proc, arg1, arg2);
@@ -645,8 +645,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5, int /*long*/ arg6);
-public static final int /*long*/ call (int /*long*/ function, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ arg3, int /*long*/ arg4, int /*long*/ arg5, int /*long*/ arg6) {
+public static final native long /*int*/ _call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5, long /*int*/ arg6);
+public static final long /*int*/ call (long /*int*/ function, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ arg3, long /*int*/ arg4, long /*int*/ arg5, long /*int*/ arg6) {
 	lock.lock();
 	try {
 		return _call(function, arg0, arg1, arg2, arg3, arg4, arg5, arg6);
@@ -655,8 +655,8 @@
 	}
 }
 public static final native boolean GDK_WINDOWING_X11();
-public static final native int /*long*/ _GDK_PIXMAP_XID(int /*long*/ pixmap);
-public static final int /*long*/ GDK_PIXMAP_XID(int /*long*/ pixmap) {
+public static final native long /*int*/ _GDK_PIXMAP_XID(long /*int*/ pixmap);
+public static final long /*int*/ GDK_PIXMAP_XID(long /*int*/ pixmap) {
 	lock.lock();
 	try {
 		return _GDK_PIXMAP_XID(pixmap);
@@ -664,8 +664,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _XCheckMaskEvent(int /*long*/ display, int /*long*/ event_mask, int /*long*/ event_return);
-public static final boolean XCheckMaskEvent(int /*long*/ display, int /*long*/ event_mask, int /*long*/ event_return) {
+public static final native boolean _XCheckMaskEvent(long /*int*/ display, long /*int*/ event_mask, long /*int*/ event_return);
+public static final boolean XCheckMaskEvent(long /*int*/ display, long /*int*/ event_mask, long /*int*/ event_return) {
 	lock.lock();
 	try {
 		return _XCheckMaskEvent(display, event_mask, event_return);
@@ -673,8 +673,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _XCheckWindowEvent(int /*long*/ display, int /*long*/ window, int /*long*/ event_mask, int /*long*/ event_return);
-public static final boolean XCheckWindowEvent(int /*long*/ display, int /*long*/ window, int /*long*/ event_mask, int /*long*/ event_return) {
+public static final native boolean _XCheckWindowEvent(long /*int*/ display, long /*int*/ window, long /*int*/ event_mask, long /*int*/ event_return);
+public static final boolean XCheckWindowEvent(long /*int*/ display, long /*int*/ window, long /*int*/ event_mask, long /*int*/ event_return) {
 	lock.lock();
 	try {
 		return _XCheckWindowEvent(display, window, event_mask, event_return);
@@ -682,8 +682,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _XCheckIfEvent(int /*long*/ display, int /*long*/ event_return, int /*long*/ predicate, int /*long*/ arg);
-public static final boolean XCheckIfEvent(int /*long*/ display, int /*long*/ event_return, int /*long*/ predicate, int /*long*/ arg) {
+public static final native boolean _XCheckIfEvent(long /*int*/ display, long /*int*/ event_return, long /*int*/ predicate, long /*int*/ arg);
+public static final boolean XCheckIfEvent(long /*int*/ display, long /*int*/ event_return, long /*int*/ predicate, long /*int*/ arg) {
 	lock.lock();
 	try {
 		return _XCheckIfEvent(display, event_return, predicate, arg);
@@ -691,8 +691,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XDefaultScreen(int /*long*/ display);
-public static final int XDefaultScreen(int /*long*/ display) {
+public static final native int _XDefaultScreen(long /*int*/ display);
+public static final int XDefaultScreen(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _XDefaultScreen(display);
@@ -700,8 +700,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XDefaultRootWindow(int /*long*/ display);
-public static final int /*long*/ XDefaultRootWindow(int /*long*/ display) {
+public static final native long /*int*/ _XDefaultRootWindow(long /*int*/ display);
+public static final long /*int*/ XDefaultRootWindow(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _XDefaultRootWindow(display);
@@ -709,8 +709,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XFlush(int /*long*/ display);
-public static final void XFlush(int /*long*/ display) {
+public static final native void _XFlush(long /*int*/ display);
+public static final void XFlush(long /*int*/ display) {
 	lock.lock();
 	try {
 		_XFlush(display);
@@ -718,8 +718,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XFree(int /*long*/ address);
-public static final void XFree(int /*long*/ address) {
+public static final native void _XFree(long /*int*/ address);
+public static final void XFree(long /*int*/ address) {
 	lock.lock();
 	try {
 		_XFree(address);
@@ -727,8 +727,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XGetSelectionOwner(int /*long*/ display, int /*long*/ selection);
-public static final int /*long*/ XGetSelectionOwner(int /*long*/ display, int /*long*/ selection) {
+public static final native long /*int*/ _XGetSelectionOwner(long /*int*/ display, long /*int*/ selection);
+public static final long /*int*/ XGetSelectionOwner(long /*int*/ display, long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _XGetSelectionOwner(display, selection);
@@ -736,8 +736,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XInternAtom(int /*long*/ display, byte[] name, boolean ifExists);
-public static final int /*long*/ XInternAtom(int /*long*/ display, byte[] name, boolean ifExists) {
+public static final native long /*int*/ _XInternAtom(long /*int*/ display, byte[] name, boolean ifExists);
+public static final long /*int*/ XInternAtom(long /*int*/ display, byte[] name, boolean ifExists) {
 	lock.lock();
 	try {
 		return _XInternAtom(display, name, ifExists);
@@ -745,8 +745,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XQueryPointer(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return);
-public static final int XQueryPointer(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return) {
+public static final native int _XQueryPointer(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return);
+public static final int XQueryPointer(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] child_return, int[] root_x_return, int[] root_y_return, int[] win_x_return, int[] win_y_return, int[] mask_return) {
 	lock.lock();
 	try {
 		return _XQueryPointer(display, w, root_return, child_return, root_x_return, root_y_return, win_x_return, win_y_return, mask_return);
@@ -754,8 +754,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XQueryTree(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] parent_return, int /*long*/[] children_return, int[] nchildren_return);
-public static final int XQueryTree(int /*long*/ display, int /*long*/ w, int /*long*/[] root_return, int /*long*/[] parent_return, int /*long*/[] children_return, int[] nchildren_return) {
+public static final native int _XQueryTree(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] parent_return, long /*int*/[] children_return, int[] nchildren_return);
+public static final int XQueryTree(long /*int*/ display, long /*int*/ w, long /*int*/[] root_return, long /*int*/[] parent_return, long /*int*/[] children_return, int[] nchildren_return) {
 	lock.lock();
 	try {
 		return _XQueryTree(display, w, root_return, parent_return, children_return, nchildren_return);
@@ -763,8 +763,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XKeysymToKeycode(int /*long*/ display, int /*long*/ keysym);
-public static final int XKeysymToKeycode(int /*long*/ display, int /*long*/ keysym) {
+public static final native int _XKeysymToKeycode(long /*int*/ display, long /*int*/ keysym);
+public static final int XKeysymToKeycode(long /*int*/ display, long /*int*/ keysym) {
 	lock.lock();
 	try {
 		return _XKeysymToKeycode(display, keysym);
@@ -772,8 +772,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XListProperties(int /*long*/ display, int /*long*/ window, int[] num_prop_return);
-public static final int /*long*/ XListProperties(int /*long*/ display, int /*long*/ window, int[] num_prop_return) {
+public static final native long /*int*/ _XListProperties(long /*int*/ display, long /*int*/ window, int[] num_prop_return);
+public static final long /*int*/ XListProperties(long /*int*/ display, long /*int*/ window, int[] num_prop_return) {
 	lock.lock();
 	try {
 		return _XListProperties(display, window, num_prop_return);
@@ -781,8 +781,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XReconfigureWMWindow(int /*long*/ display, int /*long*/ window, int screen, int valueMask, XWindowChanges values);
-public static final int XReconfigureWMWindow(int /*long*/ display, int /*long*/ window, int screen, int valueMask, XWindowChanges values) {
+public static final native int _XReconfigureWMWindow(long /*int*/ display, long /*int*/ window, int screen, int valueMask, XWindowChanges values);
+public static final int XReconfigureWMWindow(long /*int*/ display, long /*int*/ window, int screen, int valueMask, XWindowChanges values) {
 	lock.lock();
 	try {
 		return _XReconfigureWMWindow(display, window, screen, valueMask, values);
@@ -790,8 +790,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XSendEvent(int /*long*/ display, int /*long*/ w, boolean propogate, int /*long*/ event_mask, int /*long*/ event_send);
-public static final int XSendEvent(int /*long*/ display, int /*long*/ w, boolean propogate, int /*long*/ event_mask, int /*long*/ event_send) {
+public static final native int _XSendEvent(long /*int*/ display, long /*int*/ w, boolean propogate, long /*int*/ event_mask, long /*int*/ event_send);
+public static final int XSendEvent(long /*int*/ display, long /*int*/ w, boolean propogate, long /*int*/ event_mask, long /*int*/ event_send) {
 	lock.lock();
 	try {
 		return _XSendEvent(display, w, propogate, event_mask, event_send);
@@ -799,8 +799,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XSetIOErrorHandler(int /*long*/ handler);
-public static final int /*long*/ XSetIOErrorHandler(int /*long*/ handler) {
+public static final native long /*int*/ _XSetIOErrorHandler(long /*int*/ handler);
+public static final long /*int*/ XSetIOErrorHandler(long /*int*/ handler) {
 	lock.lock();
 	try {
 		return _XSetIOErrorHandler(handler);
@@ -808,8 +808,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XSetErrorHandler(int /*long*/ handler);
-public static final int /*long*/ XSetErrorHandler(int /*long*/ handler) {
+public static final native long /*int*/ _XSetErrorHandler(long /*int*/ handler);
+public static final long /*int*/ XSetErrorHandler(long /*int*/ handler) {
 	lock.lock();
 	try {
 		return _XSetErrorHandler(handler);
@@ -817,8 +817,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XSetInputFocus(int /*long*/ display, int /*long*/ window, int revert, int time);
-public static final int XSetInputFocus(int /*long*/ display, int /*long*/ window, int revert, int time) {
+public static final native int _XSetInputFocus(long /*int*/ display, long /*int*/ window, int revert, int time);
+public static final int XSetInputFocus(long /*int*/ display, long /*int*/ window, int revert, int time) {
 	lock.lock();
 	try {
 		return _XSetInputFocus(display, window, revert, time);
@@ -826,8 +826,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XSetTransientForHint(int /*long*/ display, int /*long*/ w, int /*long*/ prop_window);
-public static final int XSetTransientForHint(int /*long*/ display, int /*long*/ w, int /*long*/ prop_window) {
+public static final native int _XSetTransientForHint(long /*int*/ display, long /*int*/ w, long /*int*/ prop_window);
+public static final int XSetTransientForHint(long /*int*/ display, long /*int*/ w, long /*int*/ prop_window) {
 	lock.lock();
 	try {
 		return _XSetTransientForHint(display, w, prop_window);
@@ -835,8 +835,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XSynchronize(int /*long*/ display, boolean onoff);
-public static final int /*long*/ XSynchronize(int /*long*/ display, boolean onoff) {
+public static final native long /*int*/ _XSynchronize(long /*int*/ display, boolean onoff);
+public static final long /*int*/ XSynchronize(long /*int*/ display, boolean onoff) {
 	lock.lock();
 	try {
 		return _XSynchronize(display, onoff);
@@ -844,8 +844,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XTestFakeButtonEvent(int /*long*/ display, int button, boolean is_press, int /*long*/ delay);
-public static final void XTestFakeButtonEvent(int /*long*/ display, int button, boolean is_press, int /*long*/ delay) {
+public static final native void _XTestFakeButtonEvent(long /*int*/ display, int button, boolean is_press, long /*int*/ delay);
+public static final void XTestFakeButtonEvent(long /*int*/ display, int button, boolean is_press, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeButtonEvent(display, button, is_press, delay);
@@ -853,8 +853,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XTestFakeKeyEvent(int /*long*/ display, int keycode, boolean is_press, int /*long*/ delay);
-public static final void XTestFakeKeyEvent(int /*long*/ display, int keycode, boolean is_press, int /*long*/ delay) {
+public static final native void _XTestFakeKeyEvent(long /*int*/ display, int keycode, boolean is_press, long /*int*/ delay);
+public static final void XTestFakeKeyEvent(long /*int*/ display, int keycode, boolean is_press, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeKeyEvent(display, keycode, is_press, delay);
@@ -862,8 +862,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XTestFakeMotionEvent(int /*long*/ display, int screen_number, int x, int y, int /*long*/ delay);
-public static final void XTestFakeMotionEvent(int /*long*/ display, int screen_number, int x, int y, int /*long*/ delay) {
+public static final native void _XTestFakeMotionEvent(long /*int*/ display, int screen_number, int x, int y, long /*int*/ delay);
+public static final void XTestFakeMotionEvent(long /*int*/ display, int screen_number, int x, int y, long /*int*/ delay) {
 	lock.lock();
 	try {
 		_XTestFakeMotionEvent(display, screen_number, x, y, delay);
@@ -871,8 +871,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XWarpPointer(int /*long*/ display, int /*long*/ sourceWindow, int /*long*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY);
-public static final int XWarpPointer(int /*long*/ display, int /*long*/ sourceWindow, int /*long*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY) {
+public static final native int _XWarpPointer(long /*int*/ display, long /*int*/ sourceWindow, long /*int*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY);
+public static final int XWarpPointer(long /*int*/ display, long /*int*/ sourceWindow, long /*int*/ destWindow, int sourceX, int sourceY, int sourceWidth, int sourceHeight, int destX, int destY) {
 	lock.lock();
 	try {
 		return _XWarpPointer(display, sourceWindow, destWindow, sourceX, sourceY, sourceWidth, sourceHeight, destX, destY);
@@ -880,8 +880,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_atom_to_xatom(int /*long*/ atom);
-public static final int /*long*/ gdk_x11_atom_to_xatom(int /*long*/ atom) {
+public static final native long /*int*/ _gdk_x11_atom_to_xatom(long /*int*/ atom);
+public static final long /*int*/ gdk_x11_atom_to_xatom(long /*int*/ atom) {
 	lock.lock();
 	try {
 		return _gdk_x11_atom_to_xatom(atom);
@@ -889,8 +889,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_colormap_get_xcolormap(int /*long*/ colormap);
-public static final int /*long*/ gdk_x11_colormap_get_xcolormap(int /*long*/ colormap) {
+public static final native long /*int*/ _gdk_x11_colormap_get_xcolormap(long /*int*/ colormap);
+public static final long /*int*/ gdk_x11_colormap_get_xcolormap(long /*int*/ colormap) {
 	lock.lock();
 	try {
 		return _gdk_x11_colormap_get_xcolormap(colormap);
@@ -898,8 +898,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_drawable_get_xdisplay(int /*long*/ drawable);
-public static final int /*long*/ gdk_x11_drawable_get_xdisplay(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_x11_drawable_get_xdisplay(long /*int*/ drawable);
+public static final long /*int*/ gdk_x11_drawable_get_xdisplay(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_x11_drawable_get_xdisplay(drawable);
@@ -907,8 +907,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_drawable_get_xid(int /*long*/ drawable);
-public static final int /*long*/ gdk_x11_drawable_get_xid(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_x11_drawable_get_xid(long /*int*/ drawable);
+public static final long /*int*/ gdk_x11_drawable_get_xid(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_x11_drawable_get_xid(drawable);
@@ -916,8 +916,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_screen_lookup_visual(int /*long*/ screen, int xvisualid);
-public static final int /*long*/ gdk_x11_screen_lookup_visual(int /*long*/ screen, int xvisualid) {
+public static final native long /*int*/ _gdk_x11_screen_lookup_visual(long /*int*/ screen, int xvisualid);
+public static final long /*int*/ gdk_x11_screen_lookup_visual(long /*int*/ screen, int xvisualid) {
 	lock.lock();
 	try {
 		return _gdk_x11_screen_lookup_visual(screen, xvisualid);
@@ -925,8 +925,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_screen_get_window_manager_name(int /*long*/ screen);
-public static final int /*long*/ gdk_x11_screen_get_window_manager_name(int /*long*/ screen) {	
+public static final native long /*int*/ _gdk_x11_screen_get_window_manager_name(long /*int*/ screen);
+public static final long /*int*/ gdk_x11_screen_get_window_manager_name(long /*int*/ screen) {	
 	lock.lock();
 	try {
 		return _gdk_x11_screen_get_window_manager_name(screen);
@@ -934,8 +934,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_x11_visual_get_xvisual(int /*long*/ visual);
-public static final int /*long*/ gdk_x11_visual_get_xvisual(int /*long*/ visual) {
+public static final native long /*int*/ _gdk_x11_visual_get_xvisual(long /*int*/ visual);
+public static final long /*int*/ gdk_x11_visual_get_xvisual(long /*int*/ visual) {
 	lock.lock();
 	try {
 		return _gdk_x11_visual_get_xvisual(visual);
@@ -943,8 +943,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixmap_foreign_new(int /*long*/ anid);
-public static final int /*long*/ gdk_pixmap_foreign_new(int /*long*/ anid) {
+public static final native long /*int*/ _gdk_pixmap_foreign_new(long /*int*/ anid);
+public static final long /*int*/ gdk_pixmap_foreign_new(long /*int*/ anid) {
 	lock.lock();
 	try {
 		return _gdk_pixmap_foreign_new(anid);
@@ -952,8 +952,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_lookup(int /*long*/ xid);
-public static final int /*long*/ gdk_window_lookup(int /*long*/ xid) {
+public static final native long /*int*/ _gdk_window_lookup(long /*int*/ xid);
+public static final long /*int*/ gdk_window_lookup(long /*int*/ xid) {
 	lock.lock();
 	try {
 		return _gdk_window_lookup(xid);
@@ -961,8 +961,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_add_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data);
-public static final void gdk_window_add_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data) {
+public static final native void _gdk_window_add_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data);
+public static final void gdk_window_add_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gdk_window_add_filter(window, function, data);
@@ -970,8 +970,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_remove_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data);
-public static final void gdk_window_remove_filter(int /*long*/ window, int /*long*/ function, int /*long*/ data) {
+public static final native void _gdk_window_remove_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data);
+public static final void gdk_window_remove_filter(long /*int*/ window, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gdk_window_remove_filter(window, function, data);
@@ -979,16 +979,16 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove(int /*long*/ dest, XButtonEvent src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, XClientMessageEvent src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, XCrossingEvent src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, XExposeEvent src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, XFocusChangeEvent src, int /*long*/ size);
-public static final native void memmove(XButtonEvent dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(XCrossingEvent dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(XExposeEvent dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(XFocusChangeEvent dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(XVisibilityEvent dest, int /*long*/ src, int /*long*/ size);
+public static final native void memmove(long /*int*/ dest, XButtonEvent src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, XClientMessageEvent src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, XCrossingEvent src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, XExposeEvent src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, XFocusChangeEvent src, long /*int*/ size);
+public static final native void memmove(XButtonEvent dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(XCrossingEvent dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(XExposeEvent dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(XFocusChangeEvent dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(XVisibilityEvent dest, long /*int*/ src, long /*int*/ size);
 
 /** X render natives and constants */
 public static final int PictStandardARGB32 = 0;
@@ -1000,8 +1000,8 @@
 public static final int PictOpOver = 3;
 
 public static final native int XRenderPictureAttributes_sizeof();
-public static final native boolean _XRenderQueryExtension(int /*long*/ display, int[] event_basep, int[] error_basep);
-public static final boolean XRenderQueryExtension(int /*long*/ display, int[] event_basep, int[] error_basep) {
+public static final native boolean _XRenderQueryExtension(long /*int*/ display, int[] event_basep, int[] error_basep);
+public static final boolean XRenderQueryExtension(long /*int*/ display, int[] event_basep, int[] error_basep) {
 	lock.lock();
 	try {
 		return _XRenderQueryExtension(display, event_basep, error_basep);
@@ -1009,8 +1009,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _XRenderQueryVersion(int /*long*/ display, int[] major_versionp, int[] minor_versionp);
-public static final int XRenderQueryVersion(int /*long*/ display, int[] major_versionp, int[] minor_versionp) {
+public static final native int _XRenderQueryVersion(long /*int*/ display, int[] major_versionp, int[] minor_versionp);
+public static final int XRenderQueryVersion(long /*int*/ display, int[] major_versionp, int[] minor_versionp) {
 	lock.lock();
 	try {
 		return _XRenderQueryVersion(display, major_versionp, minor_versionp);
@@ -1018,8 +1018,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XRenderCreatePicture(int /*long*/ display, int /*long*/ drawable, int /*long*/ format, int /*long*/ valuemask, XRenderPictureAttributes attributes);
-public static final int /*long*/ XRenderCreatePicture(int /*long*/ display, int /*long*/ drawable, int /*long*/ format, int /*long*/ valuemask, XRenderPictureAttributes attributes) {
+public static final native long /*int*/ _XRenderCreatePicture(long /*int*/ display, long /*int*/ drawable, long /*int*/ format, long /*int*/ valuemask, XRenderPictureAttributes attributes);
+public static final long /*int*/ XRenderCreatePicture(long /*int*/ display, long /*int*/ drawable, long /*int*/ format, long /*int*/ valuemask, XRenderPictureAttributes attributes) {
 	lock.lock();
 	try {
 		return _XRenderCreatePicture(display, drawable, format, valuemask, attributes);
@@ -1027,8 +1027,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XRenderSetPictureClipRectangles(int /*long*/ display, int /*long*/ picture, int xOrigin, int yOrigin, short[] rects, int count);
-public static final void XRenderSetPictureClipRectangles(int /*long*/ display, int /*long*/ picture, int xOrigin, int yOrigin, short[] rects, int count) {
+public static final native void _XRenderSetPictureClipRectangles(long /*int*/ display, long /*int*/ picture, int xOrigin, int yOrigin, short[] rects, int count);
+public static final void XRenderSetPictureClipRectangles(long /*int*/ display, long /*int*/ picture, int xOrigin, int yOrigin, short[] rects, int count) {
 	lock.lock();
 	try {
 		_XRenderSetPictureClipRectangles(display, picture, xOrigin, yOrigin, rects, count);
@@ -1036,8 +1036,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XRenderSetPictureTransform(int /*long*/ display, int /*long*/ picture, int[] transform);
-public static final void XRenderSetPictureTransform(int /*long*/ display, int /*long*/ picture, int[] transform) {
+public static final native void _XRenderSetPictureTransform(long /*int*/ display, long /*int*/ picture, int[] transform);
+public static final void XRenderSetPictureTransform(long /*int*/ display, long /*int*/ picture, int[] transform) {
 	lock.lock();
 	try {
 		_XRenderSetPictureTransform(display, picture, transform);
@@ -1045,8 +1045,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XRenderFreePicture(int /*long*/ display, int /*long*/ picture);
-public static final void XRenderFreePicture(int /*long*/ display, int /*long*/ picture) {
+public static final native void _XRenderFreePicture(long /*int*/ display, long /*int*/ picture);
+public static final void XRenderFreePicture(long /*int*/ display, long /*int*/ picture) {
 	lock.lock();
 	try {
 		_XRenderFreePicture(display, picture);
@@ -1054,8 +1054,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _XRenderComposite(int /*long*/ display, int op, int /*long*/ src, int /*long*/ mask, int /*long*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height);
-public static final void XRenderComposite(int /*long*/ display, int op, int /*long*/ src, int /*long*/ mask, int /*long*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height) {
+public static final native void _XRenderComposite(long /*int*/ display, int op, long /*int*/ src, long /*int*/ mask, long /*int*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height);
+public static final void XRenderComposite(long /*int*/ display, int op, long /*int*/ src, long /*int*/ mask, long /*int*/ dst, int src_x, int src_y, int mask_x, int mask_y, int dst_x, int dst_y, int width, int height) {
 	lock.lock();
 	try {
 		_XRenderComposite(display, op, src, mask, dst, src_x, src_y, mask_x, mask_y, dst_x, dst_y, width, height);
@@ -1063,8 +1063,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XRenderFindStandardFormat(int /*long*/ display, int format);
-public static final int /*long*/ XRenderFindStandardFormat(int /*long*/ display, int format) {
+public static final native long /*int*/ _XRenderFindStandardFormat(long /*int*/ display, int format);
+public static final long /*int*/ XRenderFindStandardFormat(long /*int*/ display, int format) {
 	lock.lock();
 	try {
 		return _XRenderFindStandardFormat(display, format);
@@ -1072,8 +1072,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _XRenderFindVisualFormat(int /*long*/ display, int /*long*/ visual);
-public static final int /*long*/ XRenderFindVisualFormat(int /*long*/ display, int /*long*/ visual) {
+public static final native long /*int*/ _XRenderFindVisualFormat(long /*int*/ display, long /*int*/ visual);
+public static final long /*int*/ XRenderFindVisualFormat(long /*int*/ display, long /*int*/ visual) {
 	lock.lock();
 	try {
 		return _XRenderFindVisualFormat(display, visual);
@@ -1083,9 +1083,9 @@
 }
 
 /** Natives */
-public static final native int Call (int /*long*/ func, int /*long*/ arg0, int arg1, int arg2);
-public static final native int /*long*/ _GDK_DISPLAY();
-public static final int /*long*/ GDK_DISPLAY() {
+public static final native int Call (long /*int*/ func, long /*int*/ arg0, int arg1, int arg2);
+public static final native long /*int*/ _GDK_DISPLAY();
+public static final long /*int*/ GDK_DISPLAY() {
 	lock.lock();
 	try {
 		return _GDK_DISPLAY();
@@ -1093,8 +1093,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GDK_ROOT_PARENT();
-public static final int /*long*/ GDK_ROOT_PARENT() {
+public static final native long /*int*/ _GDK_ROOT_PARENT();
+public static final long /*int*/ GDK_ROOT_PARENT() {
 	lock.lock();
 	try {
 		return _GDK_ROOT_PARENT();
@@ -1102,8 +1102,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GDK_TYPE_COLOR();
-public static final int /*long*/ GDK_TYPE_COLOR() {
+public static final native long /*int*/ _GDK_TYPE_COLOR();
+public static final long /*int*/ GDK_TYPE_COLOR() {
 	lock.lock();
 	try {
 		return _GDK_TYPE_COLOR();
@@ -1111,8 +1111,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GDK_TYPE_PIXBUF();
-public static final int /*long*/ GDK_TYPE_PIXBUF() {
+public static final native long /*int*/ _GDK_TYPE_PIXBUF();
+public static final long /*int*/ GDK_TYPE_PIXBUF() {
 	lock.lock();
 	try {
 		return _GDK_TYPE_PIXBUF();
@@ -1120,8 +1120,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_BUTTON(int /*long*/ obj);
-public static final boolean GTK_IS_BUTTON(int /*long*/ obj) {
+public static final native boolean _GTK_IS_BUTTON(long /*int*/ obj);
+public static final boolean GTK_IS_BUTTON(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_BUTTON(obj);
@@ -1129,8 +1129,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_WINDOW(int /*long*/ obj);
-public static final boolean GTK_IS_WINDOW(int /*long*/ obj) {
+public static final native boolean _GTK_IS_WINDOW(long /*int*/ obj);
+public static final boolean GTK_IS_WINDOW(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_WINDOW(obj);
@@ -1138,8 +1138,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_PIXBUF(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_PIXBUF(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_PIXBUF(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_PIXBUF(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_PIXBUF(obj);
@@ -1147,8 +1147,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_TEXT(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_TEXT(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_TEXT(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_TEXT(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_TEXT(obj);
@@ -1156,8 +1156,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CELL_RENDERER_TOGGLE(int /*long*/ obj);
-public static final boolean GTK_IS_CELL_RENDERER_TOGGLE(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CELL_RENDERER_TOGGLE(long /*int*/ obj);
+public static final boolean GTK_IS_CELL_RENDERER_TOGGLE(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CELL_RENDERER_TOGGLE(obj);
@@ -1165,8 +1165,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_CONTAINER(int /*long*/ obj);
-public static final boolean GTK_IS_CONTAINER(int /*long*/ obj) {
+public static final native boolean _GTK_IS_CONTAINER(long /*int*/ obj);
+public static final boolean GTK_IS_CONTAINER(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_CONTAINER(obj);
@@ -1174,8 +1174,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_IMAGE_MENU_ITEM(int /*long*/ obj);
-public static final boolean GTK_IS_IMAGE_MENU_ITEM(int /*long*/ obj) {
+public static final native boolean _GTK_IS_IMAGE_MENU_ITEM(long /*int*/ obj);
+public static final boolean GTK_IS_IMAGE_MENU_ITEM(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_IMAGE_MENU_ITEM(obj);
@@ -1183,8 +1183,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_MENU_ITEM(int /*long*/ obj);
-public static final boolean GTK_IS_MENU_ITEM(int /*long*/ obj) {
+public static final native boolean _GTK_IS_MENU_ITEM(long /*int*/ obj);
+public static final boolean GTK_IS_MENU_ITEM(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_MENU_ITEM(obj);
@@ -1192,8 +1192,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_IS_PLUG(int /*long*/ obj);
-public static final boolean GTK_IS_PLUG(int /*long*/ obj) {
+public static final native boolean _GTK_IS_PLUG(long /*int*/ obj);
+public static final boolean GTK_IS_PLUG(long /*int*/ obj) {
 	lock.lock();
 	try {
 		return _GTK_IS_PLUG(obj);
@@ -1201,8 +1201,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_STOCK_CANCEL();
-public static final int /*long*/ GTK_STOCK_CANCEL() {
+public static final native long /*int*/ _GTK_STOCK_CANCEL();
+public static final long /*int*/ GTK_STOCK_CANCEL() {
 	lock.lock();
 	try {
 		return _GTK_STOCK_CANCEL();
@@ -1210,8 +1210,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_STOCK_OK();
-public static final int /*long*/ GTK_STOCK_OK() {
+public static final native long /*int*/ _GTK_STOCK_OK();
+public static final long /*int*/ GTK_STOCK_OK() {
 	lock.lock();
 	try {
 		return _GTK_STOCK_OK();
@@ -1219,8 +1219,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_TEXT();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TEXT() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_TEXT();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_TEXT() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_TEXT();
@@ -1228,8 +1228,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_PIXBUF();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_PIXBUF() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_PIXBUF();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_PIXBUF() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_PIXBUF();
@@ -1237,8 +1237,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_CELL_RENDERER_TOGGLE();
-public static final int /*long*/ GTK_TYPE_CELL_RENDERER_TOGGLE() {
+public static final native long /*int*/ _GTK_TYPE_CELL_RENDERER_TOGGLE();
+public static final long /*int*/ GTK_TYPE_CELL_RENDERER_TOGGLE() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_CELL_RENDERER_TOGGLE();
@@ -1246,8 +1246,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_FIXED();
-public static final int /*long*/ GTK_TYPE_FIXED() {
+public static final native long /*int*/ _GTK_TYPE_FIXED();
+public static final long /*int*/ GTK_TYPE_FIXED() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_FIXED();
@@ -1255,8 +1255,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_MENU();
-public static final int /*long*/ GTK_TYPE_MENU() {
+public static final native long /*int*/ _GTK_TYPE_MENU();
+public static final long /*int*/ GTK_TYPE_MENU() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_MENU();
@@ -1264,8 +1264,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _GTK_TYPE_WIDGET();
-public static final int /*long*/ GTK_TYPE_WIDGET() {
+public static final native long /*int*/ _GTK_TYPE_WIDGET();
+public static final long /*int*/ GTK_TYPE_WIDGET() {
 	lock.lock();
 	try {
 		return _GTK_TYPE_WIDGET();
@@ -1273,8 +1273,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _GTK_WIDGET_FLAGS(int /*long*/ wid);
-public static final int GTK_WIDGET_FLAGS(int /*long*/ wid) {
+public static final native int _GTK_WIDGET_FLAGS(long /*int*/ wid);
+public static final int GTK_WIDGET_FLAGS(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_FLAGS(wid);
@@ -1282,8 +1282,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _GTK_WIDGET_STATE(int /*long*/ wid);
-public static final int GTK_WIDGET_STATE(int /*long*/ wid) {
+public static final native int _GTK_WIDGET_STATE(long /*int*/ wid);
+public static final int GTK_WIDGET_STATE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_STATE(wid);
@@ -1291,8 +1291,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_HAS_DEFAULT(int /*long*/ wid);
-public static final boolean GTK_WIDGET_HAS_DEFAULT(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_HAS_DEFAULT(long /*int*/ wid);
+public static final boolean GTK_WIDGET_HAS_DEFAULT(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_HAS_DEFAULT(wid);
@@ -1300,8 +1300,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_HAS_FOCUS(int /*long*/ wid);
-public static final boolean GTK_WIDGET_HAS_FOCUS(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_HAS_FOCUS(long /*int*/ wid);
+public static final boolean GTK_WIDGET_HAS_FOCUS(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_HAS_FOCUS(wid);
@@ -1309,8 +1309,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_IS_SENSITIVE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_IS_SENSITIVE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_IS_SENSITIVE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_IS_SENSITIVE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_IS_SENSITIVE(wid);
@@ -1318,8 +1318,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_MAPPED(int /*long*/ wid);
-public static final boolean GTK_WIDGET_MAPPED(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_MAPPED(long /*int*/ wid);
+public static final boolean GTK_WIDGET_MAPPED(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_MAPPED(wid);
@@ -1327,8 +1327,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_SENSITIVE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_SENSITIVE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_SENSITIVE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_SENSITIVE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_SENSITIVE(wid);
@@ -1336,8 +1336,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _GTK_WIDGET_SET_FLAGS(int /*long*/ wid, int flag);
-public static final void GTK_WIDGET_SET_FLAGS(int /*long*/ wid, int flag) {
+public static final native void _GTK_WIDGET_SET_FLAGS(long /*int*/ wid, int flag);
+public static final void GTK_WIDGET_SET_FLAGS(long /*int*/ wid, int flag) {
 	lock.lock();
 	try {
 		_GTK_WIDGET_SET_FLAGS(wid, flag);
@@ -1345,8 +1345,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _GTK_WIDGET_UNSET_FLAGS(int /*long*/ wid, int flag);
-public static final void GTK_WIDGET_UNSET_FLAGS(int /*long*/ wid, int flag) {
+public static final native void _GTK_WIDGET_UNSET_FLAGS(long /*int*/ wid, int flag);
+public static final void GTK_WIDGET_UNSET_FLAGS(long /*int*/ wid, int flag) {
 	lock.lock();
 	try {
 		_GTK_WIDGET_UNSET_FLAGS(wid, flag);
@@ -1354,8 +1354,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _GTK_WIDGET_VISIBLE(int /*long*/ wid);
-public static final boolean GTK_WIDGET_VISIBLE(int /*long*/ wid) {
+public static final native boolean _GTK_WIDGET_VISIBLE(long /*int*/ wid);
+public static final boolean GTK_WIDGET_VISIBLE(long /*int*/ wid) {
 	lock.lock();
 	try {
 		return _GTK_WIDGET_VISIBLE(wid);
@@ -1363,8 +1363,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_CLASS (int /*long*/ klass);
-public static final int /*long*/ G_OBJECT_CLASS (int /*long*/ klass) {
+public static final native long /*int*/ _G_OBJECT_CLASS (long /*int*/ klass);
+public static final long /*int*/ G_OBJECT_CLASS (long /*int*/ klass) {
 	lock.lock();
 	try {
 		return _G_OBJECT_CLASS(klass);
@@ -1372,8 +1372,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_GET_CLASS (int /*long*/ object);
-public static final int /*long*/ G_OBJECT_GET_CLASS (int /*long*/ object) {
+public static final native long /*int*/ _G_OBJECT_GET_CLASS (long /*int*/ object);
+public static final long /*int*/ G_OBJECT_GET_CLASS (long /*int*/ object) {
 	lock.lock();
 	try {
 		return _G_OBJECT_GET_CLASS(object);
@@ -1381,8 +1381,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_TYPE_NAME (int /*long*/ object);
-public static final int /*long*/ G_OBJECT_TYPE_NAME (int /*long*/ object) {
+public static final native long /*int*/ _G_OBJECT_TYPE_NAME (long /*int*/ object);
+public static final long /*int*/ G_OBJECT_TYPE_NAME (long /*int*/ object) {
 	lock.lock();
 	try {
 		return _G_OBJECT_TYPE_NAME(object);
@@ -1390,8 +1390,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_TYPE_BOOLEAN();
-public static final int /*long*/ G_TYPE_BOOLEAN() {
+public static final native long /*int*/ _G_TYPE_BOOLEAN();
+public static final long /*int*/ G_TYPE_BOOLEAN() {
 	lock.lock();
 	try {
 		return _G_TYPE_BOOLEAN();
@@ -1399,8 +1399,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_TYPE_INT();
-public static final int /*long*/ G_TYPE_INT() {
+public static final native long /*int*/ _G_TYPE_INT();
+public static final long /*int*/ G_TYPE_INT() {
 	lock.lock();
 	try {
 		return _G_TYPE_INT();
@@ -1408,8 +1408,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_OBJECT_TYPE (int /*long*/ instance);
-public static final int /*long*/ G_OBJECT_TYPE (int /*long*/ instance) {
+public static final native long /*int*/ _G_OBJECT_TYPE (long /*int*/ instance);
+public static final long /*int*/ G_OBJECT_TYPE (long /*int*/ instance) {
 	lock.lock();
 	try {
 		return _G_OBJECT_TYPE(instance);
@@ -1417,8 +1417,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _G_TYPE_STRING();
-public static final int /*long*/ G_TYPE_STRING() {
+public static final native long /*int*/ _G_TYPE_STRING();
+public static final long /*int*/ G_TYPE_STRING() {
 	lock.lock();
 	try {
 		return _G_TYPE_STRING();
@@ -1435,8 +1435,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _PANGO_TYPE_FONT_DESCRIPTION();
-public static final int /*long*/ PANGO_TYPE_FONT_DESCRIPTION() {
+public static final native long /*int*/ _PANGO_TYPE_FONT_DESCRIPTION();
+public static final long /*int*/ PANGO_TYPE_FONT_DESCRIPTION() {
 	lock.lock();
 	try {
 		return _PANGO_TYPE_FONT_DESCRIPTION();
@@ -1444,8 +1444,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _dlclose(int /*long*/ handle);
-public static final int dlclose(int /*long*/ handle) {
+public static final native int _dlclose(long /*int*/ handle);
+public static final int dlclose(long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _dlclose(handle);
@@ -1453,8 +1453,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _dlopen(byte[] filename, int flag);
-public static final int /*long*/ dlopen(byte[] filename, int flag) {
+public static final native long /*int*/ _dlopen(byte[] filename, int flag);
+public static final long /*int*/ dlopen(byte[] filename, int flag) {
 	lock.lock();
 	try {
 		return _dlopen(filename, flag);
@@ -1462,8 +1462,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _dlsym(int /*long*/ handle, byte[] symbol);
-public static final int /*long*/ dlsym(int /*long*/ handle, byte[] symbol) {
+public static final native long /*int*/ _dlsym(long /*int*/ handle, byte[] symbol);
+public static final long /*int*/ dlsym(long /*int*/ handle, byte[] symbol) {
 	lock.lock();
 	try {
 		return _dlsym(handle, symbol);
@@ -1471,8 +1471,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_signal_add_emission_hook(int signal_id, int detail, int /*long*/ hook_func, int /*long*/ hook_data, int /*long*/ data_destroy);
-public static final int /*long*/ g_signal_add_emission_hook(int signal_id, int detail, int /*long*/ hook_func, int /*long*/ hook_data, int /*long*/ data_destroy) {
+public static final native long /*int*/ _g_signal_add_emission_hook(int signal_id, int detail, long /*int*/ hook_func, long /*int*/ hook_data, long /*int*/ data_destroy);
+public static final long /*int*/ g_signal_add_emission_hook(int signal_id, int detail, long /*int*/ hook_func, long /*int*/ hook_data, long /*int*/ data_destroy) {
 	lock.lock();
 	try {
 		return _g_signal_add_emission_hook(signal_id, detail, hook_func, hook_data, data_destroy);
@@ -1480,8 +1480,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_remove_emission_hook(int signal_id, int /*long*/ hook_id);
-public static final void g_signal_remove_emission_hook(int signal_id, int /*long*/ hook_id) {
+public static final native void _g_signal_remove_emission_hook(int signal_id, long /*int*/ hook_id);
+public static final void g_signal_remove_emission_hook(int signal_id, long /*int*/ hook_id) {
 	lock.lock();
 	try {
 		 _g_signal_remove_emission_hook (signal_id, hook_id);
@@ -1489,8 +1489,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_cclosure_new(int /*long*/ callback_func, int /*long*/ user_data, int /*long*/ destroy_data);
-public static final int /*long*/ g_cclosure_new(int /*long*/ callback_func, int /*long*/ user_data, int /*long*/ destroy_data) {
+public static final native long /*int*/ _g_cclosure_new(long /*int*/ callback_func, long /*int*/ user_data, long /*int*/ destroy_data);
+public static final long /*int*/ g_cclosure_new(long /*int*/ callback_func, long /*int*/ user_data, long /*int*/ destroy_data) {
 	lock.lock();
 	try {
 		return _g_cclosure_new(callback_func, user_data, destroy_data);
@@ -1498,8 +1498,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_closure_ref(int /*long*/ closure);
-public static final int /*long*/ g_closure_ref(int /*long*/ closure) {
+public static final native long /*int*/ _g_closure_ref(long /*int*/ closure);
+public static final long /*int*/ g_closure_ref(long /*int*/ closure) {
 	lock.lock();
 	try {
 		return _g_closure_ref(closure);
@@ -1507,8 +1507,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_closure_unref(int /*long*/ closure);
-public static final void g_closure_unref(int /*long*/ closure) {
+public static final native void _g_closure_unref(long /*int*/ closure);
+public static final void g_closure_unref(long /*int*/ closure) {
 	lock.lock();
 	try {
 		_g_closure_unref(closure);
@@ -1516,8 +1516,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _g_main_context_acquire(int /*long*/ context);
-public static final boolean g_main_context_acquire(int /*long*/ context) {
+public static final native boolean _g_main_context_acquire(long /*int*/ context);
+public static final boolean g_main_context_acquire(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_acquire(context);
@@ -1525,8 +1525,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_main_context_check(int /*long*/ context, int max_priority, int /*long*/ fds, int n_fds);
-public static final int g_main_context_check(int /*long*/ context, int max_priority, int /*long*/ fds, int n_fds) {
+public static final native int _g_main_context_check(long /*int*/ context, int max_priority, long /*int*/ fds, int n_fds);
+public static final int g_main_context_check(long /*int*/ context, int max_priority, long /*int*/ fds, int n_fds) {
 	lock.lock();
 	try {
 		return _g_main_context_check(context, max_priority, fds, n_fds);
@@ -1534,8 +1534,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_main_context_default();
-public static final int /*long*/ g_main_context_default() {
+public static final native long /*int*/ _g_main_context_default();
+public static final long /*int*/ g_main_context_default() {
 	lock.lock();
 	try {
 		return _g_main_context_default();
@@ -1543,8 +1543,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _g_main_context_iteration(int /*long*/ context, boolean may_block);
-public static final boolean g_main_context_iteration(int /*long*/ context, boolean may_block) {
+public static final native boolean _g_main_context_iteration(long /*int*/ context, boolean may_block);
+public static final boolean g_main_context_iteration(long /*int*/ context, boolean may_block) {
 	lock.lock();
 	try {
 		return _g_main_context_iteration(context, may_block);
@@ -1552,8 +1552,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _g_main_context_pending(int /*long*/ context);
-public static final boolean g_main_context_pending(int /*long*/ context) {
+public static final native boolean _g_main_context_pending(long /*int*/ context);
+public static final boolean g_main_context_pending(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_pending(context);
@@ -1561,8 +1561,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_main_context_get_poll_func(int /*long*/ context);
-public static final int /*long*/ g_main_context_get_poll_func(int /*long*/ context) {
+public static final native long /*int*/ _g_main_context_get_poll_func(long /*int*/ context);
+public static final long /*int*/ g_main_context_get_poll_func(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _g_main_context_get_poll_func(context);
@@ -1570,8 +1570,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _g_main_context_prepare(int /*long*/ context, int[] priority);
-public static final boolean g_main_context_prepare(int /*long*/ context, int[] priority) {
+public static final native boolean _g_main_context_prepare(long /*int*/ context, int[] priority);
+public static final boolean g_main_context_prepare(long /*int*/ context, int[] priority) {
 	lock.lock();
 	try {
 		return _g_main_context_prepare(context, priority);
@@ -1579,8 +1579,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_main_context_query(int /*long*/ context, int max_priority, int[] timeout_, int /*long*/ fds, int n_fds);
-public static final int g_main_context_query(int /*long*/ context, int max_priority, int[] timeout_, int /*long*/ fds, int n_fds) {
+public static final native int _g_main_context_query(long /*int*/ context, int max_priority, int[] timeout_, long /*int*/ fds, int n_fds);
+public static final int g_main_context_query(long /*int*/ context, int max_priority, int[] timeout_, long /*int*/ fds, int n_fds) {
 	lock.lock();
 	try {
 		return _g_main_context_query(context, max_priority, timeout_, fds, n_fds);
@@ -1588,8 +1588,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_main_context_release(int /*long*/ context);
-public static final void g_main_context_release(int /*long*/ context) {
+public static final native void _g_main_context_release(long /*int*/ context);
+public static final void g_main_context_release(long /*int*/ context) {
 	lock.lock();
 	try {
 		_g_main_context_release(context);
@@ -1597,9 +1597,9 @@
 		lock.unlock();
 	}
 }
-public static final native void g_main_context_wakeup(int /*long*/ context);
-public static final native int /*long*/ _g_filename_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_filename_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native void g_main_context_wakeup(long /*int*/ context);
+public static final native long /*int*/ _g_filename_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_filename_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_to_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -1607,8 +1607,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_filename_to_uri(int /*long*/ filename, int /*long*/ hostname, int /*long*/[] error);
-public static final int /*long*/ g_filename_to_uri(int /*long*/ filename, int /*long*/ hostname, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_to_uri(long /*int*/ filename, long /*int*/ hostname, long /*int*/[] error);
+public static final long /*int*/ g_filename_to_uri(long /*int*/ filename, long /*int*/ hostname, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_to_uri(filename, hostname, error);
@@ -1616,8 +1616,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_filename_from_utf8(int /*long*/ opsysstring, int /*long*/ len,  int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_filename_from_utf8(int /*long*/ opsysstring, int /*long*/ len,  int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_from_utf8(long /*int*/ opsysstring, long /*int*/ len,  long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_filename_from_utf8(long /*int*/ opsysstring, long /*int*/ len,  long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_from_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -1625,8 +1625,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_filename_from_uri(int /*long*/ uri, int /*long*/[] hostname, int /*long*/[] error);
-public static final int /*long*/ g_filename_from_uri(int /*long*/ uri, int /*long*/[] hostname, int /*long*/[] error) {
+public static final native long /*int*/ _g_filename_from_uri(long /*int*/ uri, long /*int*/[] hostname, long /*int*/[] error);
+public static final long /*int*/ g_filename_from_uri(long /*int*/ uri, long /*int*/[] hostname, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_filename_from_uri(uri, hostname, error);
@@ -1634,8 +1634,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_free(int /*long*/ mem);
-public static final void g_free(int /*long*/ mem) {
+public static final native void _g_free(long /*int*/ mem);
+public static final void g_free(long /*int*/ mem) {
 	lock.lock();
 	try {
 		_g_free(mem);
@@ -1643,8 +1643,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_idle_add(int /*long*/ function, int /*long*/ data);
-public static final int g_idle_add(int /*long*/ function, int /*long*/ data) {
+public static final native int _g_idle_add(long /*int*/ function, long /*int*/ data);
+public static final int g_idle_add(long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_idle_add(function, data);
@@ -1652,8 +1652,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_append(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_append(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_append(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_append(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_append(list, data);
@@ -1661,8 +1661,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_data(int /*long*/ list);
-public static final int /*long*/ g_list_data(int /*long*/ list) {
+public static final native long /*int*/ _g_list_data(long /*int*/ list);
+public static final long /*int*/ g_list_data(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_data(list);
@@ -1670,8 +1670,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_list_free(int /*long*/ list);
-public static final void g_list_free(int /*long*/ list) {
+public static final native void _g_list_free(long /*int*/ list);
+public static final void g_list_free(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free(list);
@@ -1679,8 +1679,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_list_free_1(int /*long*/ list);
-public static final void g_list_free_1(int /*long*/ list) {
+public static final native void _g_list_free_1(long /*int*/ list);
+public static final void g_list_free_1(long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_list_free_1(list);
@@ -1688,8 +1688,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_list_length(int /*long*/ list);
-public static final int g_list_length(int /*long*/ list) {
+public static final native int _g_list_length(long /*int*/ list);
+public static final int g_list_length(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_length(list);
@@ -1697,8 +1697,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_list_set_next(int /*long*/ list, int /*long*/ llist);
-public static final void g_list_set_next(int /*long*/ list, int /*long*/ llist) {
+public static final native void _g_list_set_next(long /*int*/ list, long /*int*/ llist);
+public static final void g_list_set_next(long /*int*/ list, long /*int*/ llist) {
 	lock.lock();
 	try {
 		_g_list_set_next(list, llist);
@@ -1706,8 +1706,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_next(int /*long*/ list);
-public static final int /*long*/ g_list_next(int /*long*/ list) {
+public static final native long /*int*/ _g_list_next(long /*int*/ list);
+public static final long /*int*/ g_list_next(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_next(list);
@@ -1715,8 +1715,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_nth(int /*long*/ list, int n);
-public static final int /*long*/ g_list_nth(int /*long*/ list, int n) {
+public static final native long /*int*/ _g_list_nth(long /*int*/ list, int n);
+public static final long /*int*/ g_list_nth(long /*int*/ list, int n) {
 	lock.lock();
 	try {
 		return _g_list_nth(list, n);
@@ -1724,8 +1724,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_nth_data(int /*long*/ list, int n);
-public static final int /*long*/ g_list_nth_data(int /*long*/ list, int n) {
+public static final native long /*int*/ _g_list_nth_data(long /*int*/ list, int n);
+public static final long /*int*/ g_list_nth_data(long /*int*/ list, int n) {
 	lock.lock();
 	try {
 		return _g_list_nth_data(list, n);
@@ -1733,8 +1733,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_prepend(int /*long*/ list, int /*long*/ data);
-public static final int /*long*/ g_list_prepend(int /*long*/ list, int /*long*/ data) {
+public static final native long /*int*/ _g_list_prepend(long /*int*/ list, long /*int*/ data);
+public static final long /*int*/ g_list_prepend(long /*int*/ list, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_list_prepend(list, data);
@@ -1742,8 +1742,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_list_set_previous(int /*long*/ list, int /*long*/ llist);
-public static final void g_list_set_previous(int /*long*/ list, int /*long*/ llist) {
+public static final native void _g_list_set_previous(long /*int*/ list, long /*int*/ llist);
+public static final void g_list_set_previous(long /*int*/ list, long /*int*/ llist) {
 	lock.lock();
 	try {
 		_g_list_set_previous(list, llist);
@@ -1751,8 +1751,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_previous(int /*long*/ list);
-public static final int /*long*/ g_list_previous(int /*long*/ list) {
+public static final native long /*int*/ _g_list_previous(long /*int*/ list);
+public static final long /*int*/ g_list_previous(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_previous(list);
@@ -1760,8 +1760,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_remove_link(int /*long*/ list, int /*long*/ link);
-public static final int /*long*/ g_list_remove_link(int /*long*/ list, int /*long*/ link) {
+public static final native long /*int*/ _g_list_remove_link(long /*int*/ list, long /*int*/ link);
+public static final long /*int*/ g_list_remove_link(long /*int*/ list, long /*int*/ link) {
 	lock.lock();
 	try {
 		return _g_list_remove_link(list, link);
@@ -1769,8 +1769,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_list_reverse(int /*long*/ list);
-public static final int /*long*/ g_list_reverse(int /*long*/ list) {
+public static final native long /*int*/ _g_list_reverse(long /*int*/ list);
+public static final long /*int*/ g_list_reverse(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_list_reverse(list);
@@ -1778,8 +1778,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_locale_from_utf8(int /*long*/ utf8string, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_locale_from_utf8(int /*long*/ utf8string, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_locale_from_utf8(long /*int*/ utf8string, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_locale_from_utf8(long /*int*/ utf8string, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_locale_from_utf8(utf8string, len, bytes_read, bytes_written, error);
@@ -1787,8 +1787,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_locale_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error);
-public static final int /*long*/ g_locale_to_utf8(int /*long*/ opsysstring, int /*long*/ len, int /*long*/[] bytes_read, int /*long*/[] bytes_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_locale_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error);
+public static final long /*int*/ g_locale_to_utf8(long /*int*/ opsysstring, long /*int*/ len, long /*int*/[] bytes_read, long /*int*/[] bytes_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_locale_to_utf8(opsysstring, len, bytes_read, bytes_written, error);
@@ -1796,8 +1796,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_log_default_handler(int /*long*/ log_domain, int log_levels, int /*long*/ message, int /*long*/ unused_data);
-public static final void g_log_default_handler(int /*long*/ log_domain, int log_levels, int /*long*/ message, int /*long*/ unused_data) {
+public static final native void _g_log_default_handler(long /*int*/ log_domain, int log_levels, long /*int*/ message, long /*int*/ unused_data);
+public static final void g_log_default_handler(long /*int*/ log_domain, int log_levels, long /*int*/ message, long /*int*/ unused_data) {
 	lock.lock();
 	try {
 		_g_log_default_handler(log_domain, log_levels, message, unused_data);
@@ -1814,8 +1814,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_log_set_handler(byte[] log_domain, int log_levels, int /*long*/ log_func, int /*long*/ user_data);
-public static final int g_log_set_handler(byte[] log_domain, int log_levels, int /*long*/ log_func, int /*long*/ user_data) {
+public static final native int _g_log_set_handler(byte[] log_domain, int log_levels, long /*int*/ log_func, long /*int*/ user_data);
+public static final int g_log_set_handler(byte[] log_domain, int log_levels, long /*int*/ log_func, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		return _g_log_set_handler(log_domain, log_levels, log_func, user_data);
@@ -1823,8 +1823,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_malloc(int /*long*/ size);
-public static final int /*long*/ g_malloc(int /*long*/ size) {
+public static final native long /*int*/ _g_malloc(long /*int*/ size);
+public static final long /*int*/ g_malloc(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _g_malloc(size);
@@ -1832,8 +1832,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_get(int /*long*/ object, byte[] first_property_name, int[] value, int /*long*/ terminator);
-public static final void g_object_get(int /*long*/ object, byte[] first_property_name, int[] value, int /*long*/ terminator) {
+public static final native void _g_object_get(long /*int*/ object, byte[] first_property_name, int[] value, long /*int*/ terminator);
+public static final void g_object_get(long /*int*/ object, byte[] first_property_name, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_get(object, first_property_name, value, terminator);
@@ -1841,8 +1841,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_object_get_qdata(int /*long*/ object, int quark);
-public static final int /*long*/ g_object_get_qdata(int /*long*/ object, int quark) {
+public static final native long /*int*/ _g_object_get_qdata(long /*int*/ object, int quark);
+public static final long /*int*/ g_object_get_qdata(long /*int*/ object, int quark) {
 	lock.lock();
 	try {
 		return _g_object_get_qdata(object, quark);
@@ -1850,8 +1850,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_object_new (int /*long*/ type, int /*long*/ first_property_name);
-public static final int /*long*/ g_object_new (int /*long*/ type, int /*long*/ first_property_name) {
+public static final native long /*int*/ _g_object_new (long /*int*/ type, long /*int*/ first_property_name);
+public static final long /*int*/ g_object_new (long /*int*/ type, long /*int*/ first_property_name) {
 	lock.lock();
 	try {
 		return _g_object_new(type, first_property_name);
@@ -1859,8 +1859,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_object_ref(int /*long*/ object);
-public static final int /*long*/ g_object_ref(int /*long*/ object) {
+public static final native long /*int*/ _g_object_ref(long /*int*/ object);
+public static final long /*int*/ g_object_ref(long /*int*/ object) {
 	lock.lock();
 	try {
 		return _g_object_ref(object);
@@ -1868,8 +1868,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, boolean data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, boolean data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, boolean data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, boolean data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -1877,8 +1877,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, GdkColor data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, GdkColor data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, GdkColor data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, GdkColor data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -1886,8 +1886,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, int data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, int data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, int data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, int data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -1895,8 +1895,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, float data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, float data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, float data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, float data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -1904,8 +1904,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set(int /*long*/ object, byte[] first_property_name, long data, int /*long*/ terminator);
-public static final void g_object_set(int /*long*/ object, byte[] first_property_name, long data, int /*long*/ terminator) {
+public static final native void _g_object_set(long /*int*/ object, byte[] first_property_name, long data, long /*int*/ terminator);
+public static final void g_object_set(long /*int*/ object, byte[] first_property_name, long data, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_g_object_set(object, first_property_name, data, terminator);
@@ -1913,8 +1913,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_set_qdata(int /*long*/ object, int quark, int /*long*/ data);
-public static final void g_object_set_qdata(int /*long*/ object, int quark, int /*long*/ data) {
+public static final native void _g_object_set_qdata(long /*int*/ object, int quark, long /*int*/ data);
+public static final void g_object_set_qdata(long /*int*/ object, int quark, long /*int*/ data) {
 	lock.lock();
 	try {
 		_g_object_set_qdata(object, quark, data);
@@ -1922,8 +1922,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_object_unref(int /*long*/ object);
-public static final void g_object_unref(int /*long*/ object) {
+public static final native void _g_object_unref(long /*int*/ object);
+public static final void g_object_unref(long /*int*/ object) {
 	lock.lock();
 	try {
 		_g_object_unref(object);
@@ -1949,8 +1949,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_connect(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data);
-public static final int g_signal_connect(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data) {
+public static final native int _g_signal_connect(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data);
+public static final int g_signal_connect(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_connect(instance, detailed_signal, proc, data);
@@ -1958,8 +1958,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_connect_closure(int /*long*/ instance, byte[] detailed_signal, int /*long*/ closure, boolean after);
-public static final int g_signal_connect_closure(int /*long*/ instance, byte[] detailed_signal, int /*long*/ closure, boolean after) {
+public static final native int _g_signal_connect_closure(long /*int*/ instance, byte[] detailed_signal, long /*int*/ closure, boolean after);
+public static final int g_signal_connect_closure(long /*int*/ instance, byte[] detailed_signal, long /*int*/ closure, boolean after) {
 	lock.lock();
 	try {
 		return _g_signal_connect_closure(instance, detailed_signal, closure, after);
@@ -1967,8 +1967,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_connect_closure_by_id(int /*long*/ instance, int signal_id, int detail, int /*long*/ closure, boolean after);
-public static final int g_signal_connect_closure_by_id(int /*long*/ instance, int signal_id, int detail, int /*long*/ closure, boolean after) {
+public static final native int _g_signal_connect_closure_by_id(long /*int*/ instance, int signal_id, int detail, long /*int*/ closure, boolean after);
+public static final int g_signal_connect_closure_by_id(long /*int*/ instance, int signal_id, int detail, long /*int*/ closure, boolean after) {
 	lock.lock();
 	try {
 		return _g_signal_connect_closure_by_id(instance, signal_id, detail, closure, after);
@@ -1976,8 +1976,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_connect_after(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data);
-public static final int g_signal_connect_after(int /*long*/ instance, byte[] detailed_signal, int /*long*/ proc, int /*long*/ data) {
+public static final native int _g_signal_connect_after(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data);
+public static final int g_signal_connect_after(long /*int*/ instance, byte[] detailed_signal, long /*int*/ proc, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_connect_after(instance, detailed_signal, proc, data);
@@ -1985,8 +1985,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal);
@@ -1994,8 +1994,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data);
@@ -2003,8 +2003,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data1, int /*long*/ data2);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, int /*long*/ data1, int /*long*/ data2) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data1, long /*int*/ data2);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, long /*int*/ data1, long /*int*/ data2) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data1, data2);
@@ -2012,8 +2012,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, byte [] data);
-public static final void g_signal_emit_by_name(int /*long*/ instance, byte[] detailed_signal, byte [] data) {
+public static final native void _g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, byte [] data);
+public static final void g_signal_emit_by_name(long /*int*/ instance, byte[] detailed_signal, byte [] data) {
 	lock.lock();
 	try {
 		_g_signal_emit_by_name(instance, detailed_signal, data);
@@ -2021,8 +2021,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_handler_disconnect(int /*long*/ instance, int handler_id);
-public static final void g_signal_handler_disconnect(int /*long*/ instance, int handler_id) {
+public static final native void _g_signal_handler_disconnect(long /*int*/ instance, int handler_id);
+public static final void g_signal_handler_disconnect(long /*int*/ instance, int handler_id) {
 	lock.lock();
 	try {
 		_g_signal_handler_disconnect(instance, handler_id);
@@ -2030,8 +2030,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_handlers_block_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_block_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_block_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_block_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_block_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2039,8 +2039,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_handlers_disconnect_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_disconnect_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_disconnect_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_disconnect_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_disconnect_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2048,8 +2048,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_handlers_unblock_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data);
-public static final int g_signal_handlers_unblock_matched(int /*long*/ instance, int mask, int signal_id, int detail, int /*long*/ closure, int /*long*/ func, int /*long*/ data) {
+public static final native int _g_signal_handlers_unblock_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data);
+public static final int g_signal_handlers_unblock_matched(long /*int*/ instance, int mask, int signal_id, int detail, long /*int*/ closure, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _g_signal_handlers_unblock_matched(instance, mask, signal_id, detail, closure, func, data);
@@ -2057,8 +2057,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_signal_lookup (byte[] name, int /*long*/ itype);
-public static final int g_signal_lookup (byte[] name, int /*long*/ itype) {
+public static final native int _g_signal_lookup (byte[] name, long /*int*/ itype);
+public static final int g_signal_lookup (byte[] name, long /*int*/ itype) {
 	lock.lock();
 	try {
 		return _g_signal_lookup(name, itype);
@@ -2066,8 +2066,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_signal_stop_emission_by_name(int /*long*/ instance, byte[] detailed_signal);
-public static final void g_signal_stop_emission_by_name(int /*long*/ instance, byte[] detailed_signal) {
+public static final native void _g_signal_stop_emission_by_name(long /*int*/ instance, byte[] detailed_signal);
+public static final void g_signal_stop_emission_by_name(long /*int*/ instance, byte[] detailed_signal) {
 	lock.lock();
 	try {
 		_g_signal_stop_emission_by_name(instance, detailed_signal);
@@ -2075,8 +2075,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean /*long*/ _g_source_remove (int /*long*/ tag);
-public static final boolean /*long*/ g_source_remove (int /*long*/ tag) {
+public static final native boolean /*long*/ _g_source_remove (long /*int*/ tag);
+public static final boolean /*long*/ g_source_remove (long /*int*/ tag) {
 	lock.lock();
 	try {
 		return _g_source_remove(tag);
@@ -2084,8 +2084,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_slist_data (int /*long*/ list);
-public static final int /*long*/ g_slist_data (int /*long*/ list) {
+public static final native long /*int*/ _g_slist_data (long /*int*/ list);
+public static final long /*int*/ g_slist_data (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_data(list);
@@ -2093,8 +2093,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_slist_free (int /*long*/ list);
-public static final void g_slist_free (int /*long*/ list) {
+public static final native void _g_slist_free (long /*int*/ list);
+public static final void g_slist_free (long /*int*/ list) {
 	lock.lock();
 	try {
 		_g_slist_free(list);
@@ -2102,8 +2102,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_slist_next (int /*long*/ list);
-public static final int /*long*/ g_slist_next (int /*long*/ list) {
+public static final native long /*int*/ _g_slist_next (long /*int*/ list);
+public static final long /*int*/ g_slist_next (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_next(list);
@@ -2111,8 +2111,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _g_slist_length (int /*long*/ list);
-public static final int g_slist_length (int /*long*/ list) {
+public static final native int _g_slist_length (long /*int*/ list);
+public static final int g_slist_length (long /*int*/ list) {
 	lock.lock();
 	try {
 		return _g_slist_length(list);
@@ -2120,8 +2120,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_strfreev(int /*long*/ string_array);
-public static final void g_strfreev(int /*long*/ string_array) {
+public static final native void _g_strfreev(long /*int*/ string_array);
+public static final void g_strfreev(long /*int*/ string_array) {
 	lock.lock();
 	try {
 		_g_strfreev(string_array);
@@ -2129,8 +2129,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _g_strtod(int /*long*/ str, int /*long*/[] endptr);
-public static final double g_strtod(int /*long*/ str, int /*long*/[] endptr) {
+public static final native double _g_strtod(long /*int*/ str, long /*int*/[] endptr);
+public static final double g_strtod(long /*int*/ str, long /*int*/[] endptr) {
 	lock.lock();
 	try {
 		return _g_strtod(str, endptr);
@@ -2138,8 +2138,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_type_add_interface_static (int /*long*/ instance_type, int /*long*/ interface_type, int /*long*/ info);
-public static final void g_type_add_interface_static (int /*long*/ instance_type, int /*long*/ interface_type, int /*long*/ info) {
+public static final native void _g_type_add_interface_static (long /*int*/ instance_type, long /*int*/ interface_type, long /*int*/ info);
+public static final void g_type_add_interface_static (long /*int*/ instance_type, long /*int*/ interface_type, long /*int*/ info) {
 	lock.lock();
 	try {
 		_g_type_add_interface_static(instance_type, interface_type, info);
@@ -2147,8 +2147,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_class_peek (int /*long*/ g_class);
-public static final int /*long*/ g_type_class_peek (int /*long*/ g_class) {
+public static final native long /*int*/ _g_type_class_peek (long /*int*/ g_class);
+public static final long /*int*/ g_type_class_peek (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		return _g_type_class_peek(g_class);
@@ -2156,8 +2156,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_class_peek_parent (int /*long*/ g_class);
-public static final int /*long*/ g_type_class_peek_parent (int /*long*/ g_class) {
+public static final native long /*int*/ _g_type_class_peek_parent (long /*int*/ g_class);
+public static final long /*int*/ g_type_class_peek_parent (long /*int*/ g_class) {
 	lock.lock();
 	try {
 		return _g_type_class_peek_parent(g_class);
@@ -2165,8 +2165,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_from_name (byte[] name);
-public static final int /*long*/ g_type_from_name (byte[] name) {
+public static final native long /*int*/ _g_type_from_name (byte[] name);
+public static final long /*int*/ g_type_from_name (byte[] name) {
 	lock.lock();
 	try {
 		return _g_type_from_name(name);
@@ -2174,8 +2174,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_interface_peek_parent (int /*long*/ iface);
-public static final int /*long*/ g_type_interface_peek_parent (int /*long*/ iface) {
+public static final native long /*int*/ _g_type_interface_peek_parent (long /*int*/ iface);
+public static final long /*int*/ g_type_interface_peek_parent (long /*int*/ iface) {
 	lock.lock();
 	try {
 		return _g_type_interface_peek_parent(iface);
@@ -2183,8 +2183,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _g_type_is_a (int /*long*/ type, int /*long*/ is_a_type);
-public static final boolean g_type_is_a (int /*long*/ type, int /*long*/ is_a_type) {
+public static final native boolean _g_type_is_a (long /*int*/ type, long /*int*/ is_a_type);
+public static final boolean g_type_is_a (long /*int*/ type, long /*int*/ is_a_type) {
 	lock.lock();
 	try {
 		return _g_type_is_a(type, is_a_type);
@@ -2192,8 +2192,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_name (int /*long*/ handle);
-public static final int /*long*/ g_type_name (int /*long*/ handle) {
+public static final native long /*int*/ _g_type_name (long /*int*/ handle);
+public static final long /*int*/ g_type_name (long /*int*/ handle) {
 	lock.lock();
 	try {
 		return _g_type_name(handle);
@@ -2201,8 +2201,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_parent (int /*long*/ type);
-public static final int /*long*/ g_type_parent (int /*long*/ type) {
+public static final native long /*int*/ _g_type_parent (long /*int*/ type);
+public static final long /*int*/ g_type_parent (long /*int*/ type) {
 	lock.lock();
 	try {
 		return _g_type_parent(type);
@@ -2210,8 +2210,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_type_query (int /*long*/ type, int /*long*/ query);
-public static final void g_type_query (int /*long*/ type, int /*long*/ query) {
+public static final native void _g_type_query (long /*int*/ type, long /*int*/ query);
+public static final void g_type_query (long /*int*/ type, long /*int*/ query) {
 	lock.lock();
 	try {
 		_g_type_query(type, query);
@@ -2219,8 +2219,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_type_register_static (int /*long*/ parent_type, byte[] type_name, int /*long*/ info, int flags);
-public static final int /*long*/ g_type_register_static (int /*long*/ parent_type, byte[] type_name, int /*long*/ info, int flags) {
+public static final native long /*int*/ _g_type_register_static (long /*int*/ parent_type, byte[] type_name, long /*int*/ info, int flags);
+public static final long /*int*/ g_type_register_static (long /*int*/ parent_type, byte[] type_name, long /*int*/ info, int flags) {
 	lock.lock();
 	try {
 		return _g_type_register_static(parent_type, type_name, info, flags);
@@ -2228,8 +2228,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _g_thread_init(int /*long*/ vtable);
-public static final void g_thread_init(int /*long*/ vtable) {
+public static final native void _g_thread_init(long /*int*/ vtable);
+public static final void g_thread_init(long /*int*/ vtable) {
 	lock.lock();
 	try {
 		_g_thread_init(vtable);
@@ -2246,8 +2246,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf16_to_utf8(char[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf16_to_utf8(char[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf16_to_utf8(char[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf16_to_utf8(char[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf16_to_utf8(str, len, items_read, items_written, error);
@@ -2255,8 +2255,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf8_offset_to_pointer(int /*long*/ str, int /*long*/ offset);
-public static final int /*long*/ g_utf8_offset_to_pointer(int /*long*/ str, int /*long*/ offset) {
+public static final native long /*int*/ _g_utf8_offset_to_pointer(long /*int*/ str, long /*int*/ offset);
+public static final long /*int*/ g_utf8_offset_to_pointer(long /*int*/ str, long /*int*/ offset) {
 	lock.lock();
 	try {
 		return _g_utf8_offset_to_pointer(str, offset);
@@ -2264,8 +2264,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf8_pointer_to_offset(int /*long*/ str, int /*long*/ pos);
-public static final int /*long*/ g_utf8_pointer_to_offset(int /*long*/ str, int /*long*/ pos) {
+public static final native long /*int*/ _g_utf8_pointer_to_offset(long /*int*/ str, long /*int*/ pos);
+public static final long /*int*/ g_utf8_pointer_to_offset(long /*int*/ str, long /*int*/ pos) {
 	lock.lock();
 	try {
 		return _g_utf8_pointer_to_offset(str, pos);
@@ -2273,8 +2273,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf8_strlen(int /*long*/ str, int /*long*/ max);
-public static final int /*long*/ g_utf8_strlen(int /*long*/ str, int /*long*/ max) {
+public static final native long /*int*/ _g_utf8_strlen(long /*int*/ str, long /*int*/ max);
+public static final long /*int*/ g_utf8_strlen(long /*int*/ str, long /*int*/ max) {
 	lock.lock();
 	try {
 		return _g_utf8_strlen(str, max);
@@ -2282,8 +2282,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf8_to_utf16(byte[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf8_to_utf16(byte[] str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf8_to_utf16(byte[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf8_to_utf16(byte[] str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf8_to_utf16(str, len, items_read, items_written, error);
@@ -2291,8 +2291,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_utf8_to_utf16(int /*long*/ str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error);
-public static final int /*long*/ g_utf8_to_utf16(int /*long*/ str, int /*long*/ len, int /*long*/[] items_read, int /*long*/[] items_written, int /*long*/[] error) {
+public static final native long /*int*/ _g_utf8_to_utf16(long /*int*/ str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error);
+public static final long /*int*/ g_utf8_to_utf16(long /*int*/ str, long /*int*/ len, long /*int*/[] items_read, long /*int*/[] items_written, long /*int*/[] error) {
 	lock.lock();
 	try {
 		return _g_utf8_to_utf16(str, len, items_read, items_written, error);
@@ -2300,8 +2300,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _g_value_peek_pointer (int /*long*/ value);
-public static final  int /*long*/ g_value_peek_pointer (int /*long*/ value) {
+public static final native long /*int*/ _g_value_peek_pointer (long /*int*/ value);
+public static final  long /*int*/ g_value_peek_pointer (long /*int*/ value) {
 	lock.lock();
 	try {
 		return _g_value_peek_pointer(value);
@@ -2309,8 +2309,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_atom_intern(byte[] atom_name, boolean only_if_exists);
-public static final int /*long*/ gdk_atom_intern(byte[] atom_name, boolean only_if_exists) {
+public static final native long /*int*/ _gdk_atom_intern(byte[] atom_name, boolean only_if_exists);
+public static final long /*int*/ gdk_atom_intern(byte[] atom_name, boolean only_if_exists) {
 	lock.lock();
 	try {
 		return _gdk_atom_intern(atom_name, only_if_exists);
@@ -2318,8 +2318,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_atom_name(int /*long*/ atom);
-public static final int /*long*/ gdk_atom_name(int /*long*/ atom) {
+public static final native long /*int*/ _gdk_atom_name(long /*int*/ atom);
+public static final long /*int*/ gdk_atom_name(long /*int*/ atom) {
 	lock.lock();
 	try {
 		return _gdk_atom_name(atom);
@@ -2336,8 +2336,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_bitmap_create_from_data(int /*long*/ window, byte[] data, int width, int height);
-public static final int /*long*/ gdk_bitmap_create_from_data(int /*long*/ window, byte[] data, int width, int height) {
+public static final native long /*int*/ _gdk_bitmap_create_from_data(long /*int*/ window, byte[] data, int width, int height);
+public static final long /*int*/ gdk_bitmap_create_from_data(long /*int*/ window, byte[] data, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_bitmap_create_from_data(window, data, width, height);
@@ -2345,8 +2345,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_cairo_region(int /*long*/ cairo, int /*long*/ region);
-public static final void gdk_cairo_region(int /*long*/ cairo, int /*long*/ region) {
+public static final native void _gdk_cairo_region(long /*int*/ cairo, long /*int*/ region);
+public static final void gdk_cairo_region(long /*int*/ cairo, long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_cairo_region(cairo, region);
@@ -2354,8 +2354,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_cairo_set_source_color(int /*long*/ cairo, GdkColor color);
-public static final void gdk_cairo_set_source_color(int /*long*/ cairo, GdkColor color) {
+public static final native void _gdk_cairo_set_source_color(long /*int*/ cairo, GdkColor color);
+public static final void gdk_cairo_set_source_color(long /*int*/ cairo, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_cairo_set_source_color(cairo, color);
@@ -2363,8 +2363,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_color_white(int /*long*/ colormap, GdkColor color);
-public static final boolean gdk_color_white(int /*long*/ colormap, GdkColor color) {
+public static final native boolean _gdk_color_white(long /*int*/ colormap, GdkColor color);
+public static final boolean gdk_color_white(long /*int*/ colormap, GdkColor color) {
 	lock.lock();
 	try {
 		return _gdk_color_white(colormap, color);
@@ -2372,8 +2372,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_colormap_alloc_color(int /*long*/ colormap, GdkColor color, boolean writeable, boolean best_match);
-public static final boolean gdk_colormap_alloc_color(int /*long*/ colormap, GdkColor color, boolean writeable, boolean best_match) {
+public static final native boolean _gdk_colormap_alloc_color(long /*int*/ colormap, GdkColor color, boolean writeable, boolean best_match);
+public static final boolean gdk_colormap_alloc_color(long /*int*/ colormap, GdkColor color, boolean writeable, boolean best_match) {
 	lock.lock();
 	try {
 		return _gdk_colormap_alloc_color(colormap, color, writeable, best_match);
@@ -2381,8 +2381,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_colormap_free_colors(int /*long*/ colormap, GdkColor colors, int ncolors);
-public static final void gdk_colormap_free_colors(int /*long*/ colormap, GdkColor colors, int ncolors) {
+public static final native void _gdk_colormap_free_colors(long /*int*/ colormap, GdkColor colors, int ncolors);
+public static final void gdk_colormap_free_colors(long /*int*/ colormap, GdkColor colors, int ncolors) {
 	lock.lock();
 	try {
 		_gdk_colormap_free_colors(colormap, colors, ncolors);
@@ -2390,8 +2390,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_colormap_get_system();
-public static final int /*long*/ gdk_colormap_get_system() {
+public static final native long /*int*/ _gdk_colormap_get_system();
+public static final long /*int*/ gdk_colormap_get_system() {
 	lock.lock();
 	try {
 		return _gdk_colormap_get_system();
@@ -2399,8 +2399,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_colormap_query_color(int /*long*/ colormap, int /*long*/ pixel, GdkColor result);
-public static final void gdk_colormap_query_color(int /*long*/ colormap, int /*long*/ pixel, GdkColor result) {
+public static final native void _gdk_colormap_query_color(long /*int*/ colormap, long /*int*/ pixel, GdkColor result);
+public static final void gdk_colormap_query_color(long /*int*/ colormap, long /*int*/ pixel, GdkColor result) {
 	lock.lock();
 	try {
 		_gdk_colormap_query_color(colormap, pixel, result);
@@ -2408,8 +2408,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_cursor_destroy(int /*long*/ cursor);
-public static final void gdk_cursor_destroy(int /*long*/ cursor) {
+public static final native void _gdk_cursor_destroy(long /*int*/ cursor);
+public static final void gdk_cursor_destroy(long /*int*/ cursor) {
 	lock.lock();
 	try {
 		_gdk_cursor_destroy(cursor);
@@ -2417,8 +2417,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_cursor_new(int /*long*/ cursor_type);
-public static final int /*long*/ gdk_cursor_new(int /*long*/ cursor_type) {
+public static final native long /*int*/ _gdk_cursor_new(long /*int*/ cursor_type);
+public static final long /*int*/ gdk_cursor_new(long /*int*/ cursor_type) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new(cursor_type);
@@ -2426,8 +2426,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_cursor_new_from_pixmap(int /*long*/ source, int /*long*/ mask, GdkColor fg, GdkColor bg, int x, int y);
-public static final int /*long*/ gdk_cursor_new_from_pixmap(int /*long*/ source, int /*long*/ mask, GdkColor fg, GdkColor bg, int x, int y) {
+public static final native long /*int*/ _gdk_cursor_new_from_pixmap(long /*int*/ source, long /*int*/ mask, GdkColor fg, GdkColor bg, int x, int y);
+public static final long /*int*/ gdk_cursor_new_from_pixmap(long /*int*/ source, long /*int*/ mask, GdkColor fg, GdkColor bg, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new_from_pixmap(source, mask, fg, bg, x, y);
@@ -2435,8 +2435,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_cursor_new_from_pixbuf(int /*long*/ display, int /*long*/ pixbuf, int x, int y);
-public static final int /*long*/ gdk_cursor_new_from_pixbuf(int /*long*/ display, int /*long*/ pixbuf, int x, int y) {
+public static final native long /*int*/ _gdk_cursor_new_from_pixbuf(long /*int*/ display, long /*int*/ pixbuf, int x, int y);
+public static final long /*int*/ gdk_cursor_new_from_pixbuf(long /*int*/ display, long /*int*/ pixbuf, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_cursor_new_from_pixbuf(display, pixbuf, x, y);
@@ -2444,8 +2444,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_display_get_default();
-public static final int /*long*/ gdk_display_get_default() {
+public static final native long /*int*/ _gdk_display_get_default();
+public static final long /*int*/ gdk_display_get_default() {
 	lock.lock();
 	try {
 		return _gdk_display_get_default();
@@ -2453,8 +2453,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_display_supports_cursor_color(int /*long*/ display);
-public static final boolean gdk_display_supports_cursor_color(int /*long*/ display) {
+public static final native boolean _gdk_display_supports_cursor_color(long /*int*/ display);
+public static final boolean gdk_display_supports_cursor_color(long /*int*/ display) {
 	lock.lock();
 	try {
 		return _gdk_display_supports_cursor_color(display);
@@ -2462,8 +2462,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_drag_status(int /*long*/ context, int action, int time);
-public static final void gdk_drag_status(int /*long*/ context, int action, int time) {
+public static final native void _gdk_drag_status(long /*int*/ context, int action, int time);
+public static final void gdk_drag_status(long /*int*/ context, int action, int time) {
 	lock.lock();
 	try {
 		_gdk_drag_status(context, action, time);
@@ -2471,8 +2471,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_arc(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2);
-public static final void gdk_draw_arc(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2) {
+public static final native void _gdk_draw_arc(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2);
+public static final void gdk_draw_arc(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height, int angle1, int angle2) {
 	lock.lock();
 	try {
 		_gdk_draw_arc(drawable, gc, filled, x, y, width, height, angle1, angle2);
@@ -2480,8 +2480,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_drawable(int /*long*/ drawable, int /*long*/ gc, int /*long*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
-public static final void gdk_draw_drawable(int /*long*/ drawable, int /*long*/ gc, int /*long*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
+public static final native void _gdk_draw_drawable(long /*int*/ drawable, long /*int*/ gc, long /*int*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
+public static final void gdk_draw_drawable(long /*int*/ drawable, long /*int*/ gc, long /*int*/ src, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_drawable(drawable, gc, src, xsrc, ysrc, xdest, ydest, width, height);
@@ -2489,8 +2489,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_image(int /*long*/ drawable, int /*long*/ gc, int /*long*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
-public static final void gdk_draw_image(int /*long*/ drawable, int /*long*/ gc, int /*long*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
+public static final native void _gdk_draw_image(long /*int*/ drawable, long /*int*/ gc, long /*int*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height);
+public static final void gdk_draw_image(long /*int*/ drawable, long /*int*/ gc, long /*int*/ image, int xsrc, int ysrc, int xdest, int ydest, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_image(drawable, gc, image, xsrc, ysrc, xdest, ydest, width, height);
@@ -2498,8 +2498,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_layout(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout);
-public static final void gdk_draw_layout(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout) {
+public static final native void _gdk_draw_layout(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout);
+public static final void gdk_draw_layout(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_gdk_draw_layout(drawable, gc, x, y, layout);
@@ -2507,8 +2507,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_layout_with_colors(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout, GdkColor foreground, GdkColor background);
-public static final void gdk_draw_layout_with_colors(int /*long*/ drawable, int /*long*/ gc, int x, int y, int /*long*/ layout, GdkColor foreground, GdkColor background) {
+public static final native void _gdk_draw_layout_with_colors(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout, GdkColor foreground, GdkColor background);
+public static final void gdk_draw_layout_with_colors(long /*int*/ drawable, long /*int*/ gc, int x, int y, long /*int*/ layout, GdkColor foreground, GdkColor background) {
 	lock.lock();
 	try {
 		_gdk_draw_layout_with_colors(drawable, gc, x, y, layout, foreground, background);
@@ -2516,8 +2516,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_line(int /*long*/ drawable, int /*long*/ gc, int x1, int y1, int x2, int y2);
-public static final void gdk_draw_line(int /*long*/ drawable, int /*long*/ gc, int x1, int y1, int x2, int y2) {
+public static final native void _gdk_draw_line(long /*int*/ drawable, long /*int*/ gc, int x1, int y1, int x2, int y2);
+public static final void gdk_draw_line(long /*int*/ drawable, long /*int*/ gc, int x1, int y1, int x2, int y2) {
 	lock.lock();
 	try {
 		_gdk_draw_line(drawable, gc, x1, y1, x2, y2);
@@ -2525,8 +2525,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_lines(int /*long*/ drawable, int /*long*/ gc, int[] points, int npoints);
-public static final void gdk_draw_lines(int /*long*/ drawable, int /*long*/ gc, int[] points, int npoints) {
+public static final native void _gdk_draw_lines(long /*int*/ drawable, long /*int*/ gc, int[] points, int npoints);
+public static final void gdk_draw_lines(long /*int*/ drawable, long /*int*/ gc, int[] points, int npoints) {
 	lock.lock();
 	try {
 		_gdk_draw_lines(drawable, gc, points, npoints);
@@ -2534,8 +2534,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_pixbuf(int /*long*/ drawable, int /*long*/ gc, int /*long*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither);
-public static final void gdk_draw_pixbuf(int /*long*/ drawable, int /*long*/ gc, int /*long*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_draw_pixbuf(long /*int*/ drawable, long /*int*/ gc, long /*int*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither);
+public static final void gdk_draw_pixbuf(long /*int*/ drawable, long /*int*/ gc, long /*int*/ pixbuf, int xsrc, int ysrc, int xdest, int ydest, int width, int height, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_draw_pixbuf(drawable, gc, pixbuf, xsrc, ysrc, xdest, ydest, width, height, dither, x_dither, y_dither);
@@ -2543,8 +2543,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_point(int /*long*/ drawable, int /*long*/ gc, int x, int y);
-public static final void gdk_draw_point(int /*long*/ drawable, int /*long*/ gc, int x, int y) {
+public static final native void _gdk_draw_point(long /*int*/ drawable, long /*int*/ gc, int x, int y);
+public static final void gdk_draw_point(long /*int*/ drawable, long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_draw_point(drawable, gc, x, y);
@@ -2552,8 +2552,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_polygon(int /*long*/ drawable, int /*long*/ gc, int filled, int[] points, int npoints);
-public static final void gdk_draw_polygon(int /*long*/ drawable, int /*long*/ gc, int filled, int[] points, int npoints) {
+public static final native void _gdk_draw_polygon(long /*int*/ drawable, long /*int*/ gc, int filled, int[] points, int npoints);
+public static final void gdk_draw_polygon(long /*int*/ drawable, long /*int*/ gc, int filled, int[] points, int npoints) {
 	lock.lock();
 	try {
 		_gdk_draw_polygon(drawable, gc, filled, points, npoints);
@@ -2561,8 +2561,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_draw_rectangle(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height);
-public static final void gdk_draw_rectangle(int /*long*/ drawable, int /*long*/ gc, int filled, int x, int y, int width, int height) {
+public static final native void _gdk_draw_rectangle(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height);
+public static final void gdk_draw_rectangle(long /*int*/ drawable, long /*int*/ gc, int filled, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_draw_rectangle(drawable, gc, filled, x, y, width, height);
@@ -2570,8 +2570,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_drawable_get_depth(int /*long*/ drawable);
-public static final int gdk_drawable_get_depth(int /*long*/ drawable) {
+public static final native int _gdk_drawable_get_depth(long /*int*/ drawable);
+public static final int gdk_drawable_get_depth(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_depth(drawable);
@@ -2580,8 +2580,8 @@
 	}
 }
 
-public static final native int /*long*/ _gdk_drawable_get_image(int /*long*/ drawable, int x, int y, int width, int height);
-public static final int /*long*/ gdk_drawable_get_image(int /*long*/ drawable, int x, int y, int width, int height) {
+public static final native long /*int*/ _gdk_drawable_get_image(long /*int*/ drawable, int x, int y, int width, int height);
+public static final long /*int*/ gdk_drawable_get_image(long /*int*/ drawable, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_image(drawable, x, y, width, height);
@@ -2589,8 +2589,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_drawable_get_size(int /*long*/ drawable, int[] width, int[] height);
-public static final void gdk_drawable_get_size(int /*long*/ drawable, int[] width, int[] height) {
+public static final native void _gdk_drawable_get_size(long /*int*/ drawable, int[] width, int[] height);
+public static final void gdk_drawable_get_size(long /*int*/ drawable, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gdk_drawable_get_size(drawable, width, height);
@@ -2598,8 +2598,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_drawable_get_visible_region(int /*long*/ drawable);
-public static final int /*long*/ gdk_drawable_get_visible_region(int /*long*/ drawable) {
+public static final native long /*int*/ _gdk_drawable_get_visible_region(long /*int*/ drawable);
+public static final long /*int*/ gdk_drawable_get_visible_region(long /*int*/ drawable) {
 	lock.lock();
 	try {
 		return _gdk_drawable_get_visible_region(drawable);
@@ -2607,8 +2607,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_copy(int /*long*/ event);
-public static final int /*long*/ gdk_event_copy(int /*long*/ event) {
+public static final native long /*int*/ _gdk_event_copy(long /*int*/ event);
+public static final long /*int*/ gdk_event_copy(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gdk_event_copy(event);
@@ -2616,8 +2616,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_event_free(int /*long*/ event);
-public static final void gdk_event_free(int /*long*/ event) {
+public static final native void _gdk_event_free(long /*int*/ event);
+public static final void gdk_event_free(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gdk_event_free(event);
@@ -2625,8 +2625,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_get();
-public static final int /*long*/ gdk_event_get() {
+public static final native long /*int*/ _gdk_event_get();
+public static final long /*int*/ gdk_event_get() {
 	lock.lock();
 	try {
 		return _gdk_event_get();
@@ -2634,8 +2634,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_event_get_root_coords(int /*long*/ event, double[] px, double[] py);
-public static final boolean gdk_event_get_root_coords(int /*long*/ event, double[] px, double[] py) {
+public static final native boolean _gdk_event_get_root_coords(long /*int*/ event, double[] px, double[] py);
+public static final boolean gdk_event_get_root_coords(long /*int*/ event, double[] px, double[] py) {
 	lock.lock();
 	try {
 		return _gdk_event_get_root_coords(event, px, py);
@@ -2643,8 +2643,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_event_get_coords(int /*long*/ event, double[] px, double[] py);
-public static final boolean gdk_event_get_coords(int /*long*/ event, double[] px, double[] py) {
+public static final native boolean _gdk_event_get_coords(long /*int*/ event, double[] px, double[] py);
+public static final boolean gdk_event_get_coords(long /*int*/ event, double[] px, double[] py) {
 	lock.lock();
 	try {
 		return _gdk_event_get_coords(event, px, py);
@@ -2652,8 +2652,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_get_graphics_expose(int /*long*/ window);
-public static final int /*long*/ gdk_event_get_graphics_expose(int /*long*/ window) {
+public static final native long /*int*/ _gdk_event_get_graphics_expose(long /*int*/ window);
+public static final long /*int*/ gdk_event_get_graphics_expose(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_event_get_graphics_expose(window);
@@ -2661,8 +2661,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_event_get_state(int /*long*/ event, int[] pmod);
-public static final boolean gdk_event_get_state(int /*long*/ event, int[] pmod) {
+public static final native boolean _gdk_event_get_state(long /*int*/ event, int[] pmod);
+public static final boolean gdk_event_get_state(long /*int*/ event, int[] pmod) {
 	lock.lock();
 	try {
 		return _gdk_event_get_state(event, pmod);
@@ -2670,8 +2670,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_event_get_time(int /*long*/ event);
-public static final int gdk_event_get_time(int /*long*/ event) {
+public static final native int _gdk_event_get_time(long /*int*/ event);
+public static final int gdk_event_get_time(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gdk_event_get_time(event);
@@ -2679,8 +2679,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_event_handler_set(int /*long*/ func, int /*long*/ data, int /*long*/ notify);
-public static final void gdk_event_handler_set(int /*long*/ func, int /*long*/ data, int /*long*/ notify) {
+public static final native void _gdk_event_handler_set(long /*int*/ func, long /*int*/ data, long /*int*/ notify);
+public static final void gdk_event_handler_set(long /*int*/ func, long /*int*/ data, long /*int*/ notify) {
 	lock.lock();
 	try {
 		_gdk_event_handler_set(func, data, notify);
@@ -2688,8 +2688,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_new(int type);
-public static final int /*long*/ gdk_event_new(int type) {
+public static final native long /*int*/ _gdk_event_new(int type);
+public static final long /*int*/ gdk_event_new(int type) {
 	lock.lock();
 	try {
 		return _gdk_event_new(type);
@@ -2697,8 +2697,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_event_peek();
-public static final int /*long*/ gdk_event_peek() {
+public static final native long /*int*/ _gdk_event_peek();
+public static final long /*int*/ gdk_event_peek() {
 	lock.lock();
 	try {
 		return _gdk_event_peek();
@@ -2706,8 +2706,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_event_put(int /*long*/ event);
-public static final void gdk_event_put(int /*long*/ event) {
+public static final native void _gdk_event_put(long /*int*/ event);
+public static final void gdk_event_put(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gdk_event_put(event);
@@ -2742,8 +2742,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_free_text_list(int /*long*/ list);
-public static final void gdk_free_text_list(int /*long*/ list) {
+public static final native void _gdk_free_text_list(long /*int*/ list);
+public static final void gdk_free_text_list(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gdk_free_text_list(list);
@@ -2751,8 +2751,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_get_values(int /*long*/ gc, GdkGCValues values);
-public static final void gdk_gc_get_values(int /*long*/ gc, GdkGCValues values) {
+public static final native void _gdk_gc_get_values(long /*int*/ gc, GdkGCValues values);
+public static final void gdk_gc_get_values(long /*int*/ gc, GdkGCValues values) {
 	lock.lock();
 	try {
 		_gdk_gc_get_values(gc, values);
@@ -2760,8 +2760,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_gc_new(int /*long*/ window);
-public static final int /*long*/ gdk_gc_new(int /*long*/ window) {
+public static final native long /*int*/ _gdk_gc_new(long /*int*/ window);
+public static final long /*int*/ gdk_gc_new(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_gc_new(window);
@@ -2769,8 +2769,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_background(int /*long*/ gc, GdkColor color);
-public static final void gdk_gc_set_background(int /*long*/ gc, GdkColor color) {
+public static final native void _gdk_gc_set_background(long /*int*/ gc, GdkColor color);
+public static final void gdk_gc_set_background(long /*int*/ gc, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_gc_set_background(gc, color);
@@ -2778,8 +2778,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_clip_mask(int /*long*/ gc, int /*long*/ mask);
-public static final void gdk_gc_set_clip_mask(int /*long*/ gc, int /*long*/ mask) {
+public static final native void _gdk_gc_set_clip_mask(long /*int*/ gc, long /*int*/ mask);
+public static final void gdk_gc_set_clip_mask(long /*int*/ gc, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_mask(gc, mask);
@@ -2787,8 +2787,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_clip_origin(int /*long*/ gc, int x, int y);
-public static final void gdk_gc_set_clip_origin(int /*long*/ gc, int x, int y) {
+public static final native void _gdk_gc_set_clip_origin(long /*int*/ gc, int x, int y);
+public static final void gdk_gc_set_clip_origin(long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_origin(gc, x, y);
@@ -2796,8 +2796,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_clip_rectangle(int /*long*/ gc, GdkRectangle rectangle);
-public static final void gdk_gc_set_clip_rectangle(int /*long*/ gc, GdkRectangle rectangle) {
+public static final native void _gdk_gc_set_clip_rectangle(long /*int*/ gc, GdkRectangle rectangle);
+public static final void gdk_gc_set_clip_rectangle(long /*int*/ gc, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_rectangle(gc, rectangle);
@@ -2805,8 +2805,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_clip_region(int /*long*/ gc, int /*long*/ region);
-public static final void gdk_gc_set_clip_region(int /*long*/ gc, int /*long*/ region) {
+public static final native void _gdk_gc_set_clip_region(long /*int*/ gc, long /*int*/ region);
+public static final void gdk_gc_set_clip_region(long /*int*/ gc, long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_gc_set_clip_region(gc, region);
@@ -2814,8 +2814,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_dashes(int /*long*/ gc, int dash_offset, byte[] dash_list, int n);
-public static final void gdk_gc_set_dashes(int /*long*/ gc, int dash_offset, byte[] dash_list, int n) {
+public static final native void _gdk_gc_set_dashes(long /*int*/ gc, int dash_offset, byte[] dash_list, int n);
+public static final void gdk_gc_set_dashes(long /*int*/ gc, int dash_offset, byte[] dash_list, int n) {
 	lock.lock();
 	try {
 		_gdk_gc_set_dashes(gc, dash_offset, dash_list, n);
@@ -2823,8 +2823,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_exposures(int /*long*/ gc, boolean exposures);
-public static final void gdk_gc_set_exposures(int /*long*/ gc, boolean exposures) {
+public static final native void _gdk_gc_set_exposures(long /*int*/ gc, boolean exposures);
+public static final void gdk_gc_set_exposures(long /*int*/ gc, boolean exposures) {
 	lock.lock();
 	try {
 		_gdk_gc_set_exposures(gc, exposures);
@@ -2832,8 +2832,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_fill(int /*long*/ gc, int fill);
-public static final void gdk_gc_set_fill(int /*long*/ gc, int fill) {
+public static final native void _gdk_gc_set_fill(long /*int*/ gc, int fill);
+public static final void gdk_gc_set_fill(long /*int*/ gc, int fill) {
 	lock.lock();
 	try {
 		_gdk_gc_set_fill(gc, fill);
@@ -2841,8 +2841,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_foreground(int /*long*/ gc, GdkColor color);
-public static final void gdk_gc_set_foreground(int /*long*/ gc, GdkColor color) {
+public static final native void _gdk_gc_set_foreground(long /*int*/ gc, GdkColor color);
+public static final void gdk_gc_set_foreground(long /*int*/ gc, GdkColor color) {
 	lock.lock();
 	try {
 		_gdk_gc_set_foreground(gc, color);
@@ -2850,8 +2850,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_function(int /*long*/ gc, int /*long*/ function);
-public static final void gdk_gc_set_function(int /*long*/ gc, int /*long*/ function) {
+public static final native void _gdk_gc_set_function(long /*int*/ gc, long /*int*/ function);
+public static final void gdk_gc_set_function(long /*int*/ gc, long /*int*/ function) {
 	lock.lock();
 	try {
 		_gdk_gc_set_function(gc, function);
@@ -2859,8 +2859,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_line_attributes(int /*long*/ gc, int line_width, int line_style, int cap_style, int join_style);
-public static final void gdk_gc_set_line_attributes(int /*long*/ gc, int line_width, int line_style, int cap_style, int join_style) {
+public static final native void _gdk_gc_set_line_attributes(long /*int*/ gc, int line_width, int line_style, int cap_style, int join_style);
+public static final void gdk_gc_set_line_attributes(long /*int*/ gc, int line_width, int line_style, int cap_style, int join_style) {
 	lock.lock();
 	try {
 		_gdk_gc_set_line_attributes(gc, line_width, line_style, cap_style, join_style);
@@ -2868,8 +2868,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_stipple(int /*long*/ gc, int /*long*/ stipple);
-public static final void gdk_gc_set_stipple(int /*long*/ gc, int /*long*/ stipple) {
+public static final native void _gdk_gc_set_stipple(long /*int*/ gc, long /*int*/ stipple);
+public static final void gdk_gc_set_stipple(long /*int*/ gc, long /*int*/ stipple) {
 	lock.lock();
 	try {
 		_gdk_gc_set_stipple(gc, stipple);
@@ -2877,8 +2877,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_subwindow(int /*long*/ gc, int /*long*/ mode);
-public static final void gdk_gc_set_subwindow(int /*long*/ gc, int /*long*/ mode) {
+public static final native void _gdk_gc_set_subwindow(long /*int*/ gc, long /*int*/ mode);
+public static final void gdk_gc_set_subwindow(long /*int*/ gc, long /*int*/ mode) {
 	lock.lock();
 	try {
 		_gdk_gc_set_subwindow(gc, mode);
@@ -2886,8 +2886,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_tile(int /*long*/ gc, int /*long*/ tile);
-public static final void gdk_gc_set_tile(int /*long*/ gc, int /*long*/ tile) {
+public static final native void _gdk_gc_set_tile(long /*int*/ gc, long /*int*/ tile);
+public static final void gdk_gc_set_tile(long /*int*/ gc, long /*int*/ tile) {
 	lock.lock();
 	try {
 		_gdk_gc_set_tile(gc, tile);
@@ -2895,8 +2895,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_ts_origin(int /*long*/ gc, int x, int y);
-public static final void gdk_gc_set_ts_origin(int /*long*/ gc, int x, int y) {
+public static final native void _gdk_gc_set_ts_origin(long /*int*/ gc, int x, int y);
+public static final void gdk_gc_set_ts_origin(long /*int*/ gc, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_gc_set_ts_origin(gc, x, y);
@@ -2904,8 +2904,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_gc_set_values(int /*long*/ gc, GdkGCValues values, int values_mask);
-public static final void gdk_gc_set_values(int /*long*/ gc, GdkGCValues values, int values_mask) {
+public static final native void _gdk_gc_set_values(long /*int*/ gc, GdkGCValues values, int values_mask);
+public static final void gdk_gc_set_values(long /*int*/ gc, GdkGCValues values, int values_mask) {
 	lock.lock();
 	try {
 		_gdk_gc_set_values(gc, values, values_mask);
@@ -2922,8 +2922,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_keymap_get_default();
-public static final int /*long*/ gdk_keymap_get_default() {
+public static final native long /*int*/ _gdk_keymap_get_default();
+public static final long /*int*/ gdk_keymap_get_default() {
 	lock.lock();
 	try {
 		return _gdk_keymap_get_default();
@@ -2931,8 +2931,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_keymap_translate_keyboard_state (int /*long*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers);
-public static final boolean gdk_keymap_translate_keyboard_state (int /*long*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers) {
+public static final native boolean _gdk_keymap_translate_keyboard_state (long /*int*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers);
+public static final boolean gdk_keymap_translate_keyboard_state (long /*int*/ keymap, int hardware_keycode, int state, int group, int[] keyval, int[] effective_group, int[] level,  int[] consumed_modifiers) {
 	lock.lock();
 	try {
 		return _gdk_keymap_translate_keyboard_state(keymap, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
@@ -2958,8 +2958,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pango_context_get();
-public static final int /*long*/ gdk_pango_context_get() {
+public static final native long /*int*/ _gdk_pango_context_get();
+public static final long /*int*/ gdk_pango_context_get() {
 	lock.lock();
 	try {
 		return _gdk_pango_context_get();
@@ -2967,8 +2967,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pango_context_set_colormap(int /*long*/ context, int /*long*/ colormap);
-public static final void gdk_pango_context_set_colormap(int /*long*/ context, int /*long*/ colormap) {
+public static final native void _gdk_pango_context_set_colormap(long /*int*/ context, long /*int*/ colormap);
+public static final void gdk_pango_context_set_colormap(long /*int*/ context, long /*int*/ colormap) {
 	lock.lock();
 	try {
 		_gdk_pango_context_set_colormap(context, colormap);
@@ -2976,8 +2976,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pango_layout_get_clip_region(int /*long*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges);
-public static final int /*long*/ gdk_pango_layout_get_clip_region(int /*long*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges) {
+public static final native long /*int*/ _gdk_pango_layout_get_clip_region(long /*int*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges);
+public static final long /*int*/ gdk_pango_layout_get_clip_region(long /*int*/ layout, int x_origin, int y_origin, int[] index_ranges, int n_ranges) {
 	lock.lock();
 	try {
 		return _gdk_pango_layout_get_clip_region(layout, x_origin, y_origin, index_ranges, n_ranges);
@@ -2985,8 +2985,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pixbuf_copy_area(int /*long*/ src_pixbuf, int src_x, int src_y, int width, int height, int /*long*/ dest_pixbuf, int dest_x, int dest_y);
-public static final void gdk_pixbuf_copy_area(int /*long*/ src_pixbuf, int src_x, int src_y, int width, int height, int /*long*/ dest_pixbuf, int dest_x, int dest_y) {
+public static final native void _gdk_pixbuf_copy_area(long /*int*/ src_pixbuf, int src_x, int src_y, int width, int height, long /*int*/ dest_pixbuf, int dest_x, int dest_y);
+public static final void gdk_pixbuf_copy_area(long /*int*/ src_pixbuf, int src_x, int src_y, int width, int height, long /*int*/ dest_pixbuf, int dest_x, int dest_y) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_copy_area(src_pixbuf, src_x, src_y, width, height, dest_pixbuf, dest_x, dest_y);
@@ -2994,8 +2994,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_get_from_drawable(int /*long*/ dest, int /*long*/ src, int /*long*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
-public static final int /*long*/ gdk_pixbuf_get_from_drawable(int /*long*/ dest, int /*long*/ src, int /*long*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height) {
+public static final native long /*int*/ _gdk_pixbuf_get_from_drawable(long /*int*/ dest, long /*int*/ src, long /*int*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height);
+public static final long /*int*/ gdk_pixbuf_get_from_drawable(long /*int*/ dest, long /*int*/ src, long /*int*/ cmap, int src_x, int src_y, int dest_x, int dest_y, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_from_drawable(dest, src, cmap, src_x, src_y, dest_x, dest_y, width, height);
@@ -3003,8 +3003,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_pixbuf_get_has_alpha(int /*long*/ pixbuf);
-public static final boolean gdk_pixbuf_get_has_alpha(int /*long*/ pixbuf) {
+public static final native boolean _gdk_pixbuf_get_has_alpha(long /*int*/ pixbuf);
+public static final boolean gdk_pixbuf_get_has_alpha(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_has_alpha(pixbuf);
@@ -3012,8 +3012,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_pixbuf_get_height(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_height(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_height(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_height(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_height(pixbuf);
@@ -3021,8 +3021,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_get_pixels(int /*long*/ pixbuf);
-public static final int /*long*/ gdk_pixbuf_get_pixels(int /*long*/ pixbuf) {
+public static final native long /*int*/ _gdk_pixbuf_get_pixels(long /*int*/ pixbuf);
+public static final long /*int*/ gdk_pixbuf_get_pixels(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_pixels(pixbuf);
@@ -3030,8 +3030,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_pixbuf_get_rowstride(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_rowstride(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_rowstride(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_rowstride(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_rowstride(pixbuf);
@@ -3039,8 +3039,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_pixbuf_get_width(int /*long*/ pixbuf);
-public static final int gdk_pixbuf_get_width(int /*long*/ pixbuf) {
+public static final native int _gdk_pixbuf_get_width(long /*int*/ pixbuf);
+public static final int gdk_pixbuf_get_width(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_get_width(pixbuf);
@@ -3048,8 +3048,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_loader_new();
-public static final int /*long*/ gdk_pixbuf_loader_new() {
+public static final native long /*int*/ _gdk_pixbuf_loader_new();
+public static final long /*int*/ gdk_pixbuf_loader_new() {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_new();
@@ -3057,8 +3057,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_pixbuf_loader_close(int /*long*/ loader, int /*long*/ [] error);
-public static final boolean gdk_pixbuf_loader_close(int /*long*/ loader, int /*long*/ [] error) {
+public static final native boolean _gdk_pixbuf_loader_close(long /*int*/ loader, long /*int*/ [] error);
+public static final boolean gdk_pixbuf_loader_close(long /*int*/ loader, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_close(loader, error);
@@ -3066,8 +3066,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_loader_get_pixbuf(int /*long*/ loader);
-public static final int /*long*/ gdk_pixbuf_loader_get_pixbuf(int /*long*/ loader) {
+public static final native long /*int*/ _gdk_pixbuf_loader_get_pixbuf(long /*int*/ loader);
+public static final long /*int*/ gdk_pixbuf_loader_get_pixbuf(long /*int*/ loader) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_get_pixbuf(loader);
@@ -3075,8 +3075,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_pixbuf_loader_write(int /*long*/ loader, int /*long*/ buffer, int count, int /*long*/ [] error);
-public static final boolean gdk_pixbuf_loader_write(int /*long*/ loader, int /*long*/ buffer, int count, int /*long*/ [] error) {
+public static final native boolean _gdk_pixbuf_loader_write(long /*int*/ loader, long /*int*/ buffer, int count, long /*int*/ [] error);
+public static final boolean gdk_pixbuf_loader_write(long /*int*/ loader, long /*int*/ buffer, int count, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_loader_write(loader, buffer, count, error);
@@ -3084,8 +3084,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height);
-public static final int /*long*/ gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height) {
+public static final native long /*int*/ _gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height);
+public static final long /*int*/ gdk_pixbuf_new(int colorspace, boolean has_alpha, int bits_per_sample, int width, int height) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_new(colorspace, has_alpha, bits_per_sample, width, height);
@@ -3093,8 +3093,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_new_from_file(byte[] filename, int /*long*/ [] error); 
-public static final int /*long*/ gdk_pixbuf_new_from_file(byte[] filename, int /*long*/ [] error) {
+public static final native long /*int*/ _gdk_pixbuf_new_from_file(byte[] filename, long /*int*/ [] error); 
+public static final long /*int*/ gdk_pixbuf_new_from_file(byte[] filename, long /*int*/ [] error) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_new_from_file(filename, error);
@@ -3102,8 +3102,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pixbuf_render_to_drawable(int /*long*/ pixbuf, int /*long*/ drawable, int /*long*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);
-public static final void gdk_pixbuf_render_to_drawable(int /*long*/ pixbuf, int /*long*/ drawable, int /*long*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_pixbuf_render_to_drawable(long /*int*/ pixbuf, long /*int*/ drawable, long /*int*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither);
+public static final void gdk_pixbuf_render_to_drawable(long /*int*/ pixbuf, long /*int*/ drawable, long /*int*/ gc, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_to_drawable(pixbuf, drawable, gc, src_x, src_y, dest_x, dest_y, width, height, dither, x_dither, y_dither);
@@ -3111,8 +3111,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pixbuf_render_to_drawable_alpha(int /*long*/ pixbuf, int /*long*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither);
-public static final void gdk_pixbuf_render_to_drawable_alpha(int /*long*/ pixbuf, int /*long*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither) {
+public static final native void _gdk_pixbuf_render_to_drawable_alpha(long /*int*/ pixbuf, long /*int*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither);
+public static final void gdk_pixbuf_render_to_drawable_alpha(long /*int*/ pixbuf, long /*int*/ drawable, int src_x, int src_y, int dest_x, int dest_y, int width, int height, int alpha_mode, int alpha_threshold, int dither, int x_dither, int y_dither) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_to_drawable_alpha(pixbuf, drawable, src_x, src_y, dest_x, dest_y, width, height, alpha_mode, alpha_threshold, dither, x_dither, y_dither);
@@ -3120,8 +3120,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pixbuf_render_pixmap_and_mask(int /*long*/ pixbuf, int /*long*/[] pixmap_return, int /*long*/[] mask_return, int alpha_threshold);
-public static final void gdk_pixbuf_render_pixmap_and_mask(int /*long*/ pixbuf, int /*long*/[] pixmap_return, int /*long*/[] mask_return, int alpha_threshold) {
+public static final native void _gdk_pixbuf_render_pixmap_and_mask(long /*int*/ pixbuf, long /*int*/[] pixmap_return, long /*int*/[] mask_return, int alpha_threshold);
+public static final void gdk_pixbuf_render_pixmap_and_mask(long /*int*/ pixbuf, long /*int*/[] pixmap_return, long /*int*/[] mask_return, int alpha_threshold) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_render_pixmap_and_mask(pixbuf, pixmap_return, mask_return, alpha_threshold);
@@ -3129,8 +3129,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_pixbuf_save_to_buffer(int /*long*/ pixbuf, int /*long*/ [] buffer, int [] buffer_size, byte [] type, int /*long*/ [] error, byte [] terminate);
-public static final boolean gdk_pixbuf_save_to_buffer(int /*long*/ pixbuf, int /*long*/ [] buffer, int [] buffer_size, byte [] type, int /*long*/ [] error, byte [] terminate) {
+public static final native boolean _gdk_pixbuf_save_to_buffer(long /*int*/ pixbuf, long /*int*/ [] buffer, int [] buffer_size, byte [] type, long /*int*/ [] error, byte [] terminate);
+public static final boolean gdk_pixbuf_save_to_buffer(long /*int*/ pixbuf, long /*int*/ [] buffer, int [] buffer_size, byte [] type, long /*int*/ [] error, byte [] terminate) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_save_to_buffer(pixbuf, buffer, buffer_size, type, error, terminate);
@@ -3138,8 +3138,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_pixbuf_scale(int /*long*/ src, int /*long*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);
-public static final void gdk_pixbuf_scale(int /*long*/ src, int /*long*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type) {
+public static final native void _gdk_pixbuf_scale(long /*int*/ src, long /*int*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type);
+public static final void gdk_pixbuf_scale(long /*int*/ src, long /*int*/ dest, int dest_x, int dest_y, int dest_width, int dest_height, double offset_x, double offset_y, double scale_x, double scale_y, int interp_type) {
 	lock.lock();
 	try {
 		_gdk_pixbuf_scale(src, dest, dest_x, dest_y, dest_width, dest_height, offset_x, offset_y, scale_x, scale_y, interp_type);
@@ -3147,8 +3147,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixbuf_scale_simple(int /*long*/ src, int dest_width, int dest_height, int interp_type);
-public static final int /*long*/ gdk_pixbuf_scale_simple(int /*long*/ src, int dest_width, int dest_height, int interp_type) {
+public static final native long /*int*/ _gdk_pixbuf_scale_simple(long /*int*/ src, int dest_width, int dest_height, int interp_type);
+public static final long /*int*/ gdk_pixbuf_scale_simple(long /*int*/ src, int dest_width, int dest_height, int interp_type) {
 	lock.lock();
 	try {
 		return _gdk_pixbuf_scale_simple(src, dest_width, dest_height, interp_type);
@@ -3156,8 +3156,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_pixmap_new(int /*long*/ window, int width, int height, int depth);
-public static final int /*long*/ gdk_pixmap_new(int /*long*/ window, int width, int height, int depth) {
+public static final native long /*int*/ _gdk_pixmap_new(long /*int*/ window, int width, int height, int depth);
+public static final long /*int*/ gdk_pixmap_new(long /*int*/ window, int width, int height, int depth) {
 	lock.lock();
 	try {
 		return _gdk_pixmap_new(window, width, height, depth);
@@ -3165,8 +3165,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_pointer_grab(int /*long*/ window, boolean owner_events, int event_mask, int /*long*/ confine_to, int /*long*/ cursor, int time);
-public static final int gdk_pointer_grab(int /*long*/ window, boolean owner_events, int event_mask, int /*long*/ confine_to, int /*long*/ cursor, int time) {
+public static final native int _gdk_pointer_grab(long /*int*/ window, boolean owner_events, int event_mask, long /*int*/ confine_to, long /*int*/ cursor, int time);
+public static final int gdk_pointer_grab(long /*int*/ window, boolean owner_events, int event_mask, long /*int*/ confine_to, long /*int*/ cursor, int time) {
 	lock.lock();
 	try {
 		return _gdk_pointer_grab(window, owner_events, event_mask, confine_to, cursor, time);
@@ -3192,8 +3192,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_property_get(int /*long*/ window, int /*long*/ property, int /*long*/ type, int /*long*/ offset, int /*long*/ length, int pdelete, int /*long*/[] actual_property_type, int[] actual_format, int[] actual_length, int /*long*/[] data);
-public static final boolean gdk_property_get(int /*long*/ window, int /*long*/ property, int /*long*/ type, int /*long*/ offset, int /*long*/ length, int pdelete, int /*long*/[] actual_property_type, int[] actual_format, int[] actual_length, int /*long*/[] data) {
+public static final native boolean _gdk_property_get(long /*int*/ window, long /*int*/ property, long /*int*/ type, long /*int*/ offset, long /*int*/ length, int pdelete, long /*int*/[] actual_property_type, int[] actual_format, int[] actual_length, long /*int*/[] data);
+public static final boolean gdk_property_get(long /*int*/ window, long /*int*/ property, long /*int*/ type, long /*int*/ offset, long /*int*/ length, int pdelete, long /*int*/[] actual_property_type, int[] actual_format, int[] actual_length, long /*int*/[] data) {
 	lock.lock();
 	try {
 		return _gdk_property_get(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data);
@@ -3201,8 +3201,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_destroy(int /*long*/ region);
-public static final void gdk_region_destroy(int /*long*/ region) {
+public static final native void _gdk_region_destroy(long /*int*/ region);
+public static final void gdk_region_destroy(long /*int*/ region) {
 	lock.lock();
 	try {
 		_gdk_region_destroy(region);
@@ -3210,8 +3210,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_region_empty(int /*long*/ region);
-public static final boolean gdk_region_empty(int /*long*/ region) {
+public static final native boolean _gdk_region_empty(long /*int*/ region);
+public static final boolean gdk_region_empty(long /*int*/ region) {
 	lock.lock();
 	try {
 		return _gdk_region_empty(region);
@@ -3219,8 +3219,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_get_clipbox(int /*long*/ region, GdkRectangle rectangle);
-public static final void gdk_region_get_clipbox(int /*long*/ region, GdkRectangle rectangle) {
+public static final native void _gdk_region_get_clipbox(long /*int*/ region, GdkRectangle rectangle);
+public static final void gdk_region_get_clipbox(long /*int*/ region, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_region_get_clipbox(region, rectangle);
@@ -3228,8 +3228,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_get_rectangles(int /*long*/ region, int /*long*/[] rectangles, int[] n_rectangles);
-public static final void gdk_region_get_rectangles(int /*long*/ region, int /*long*/[] rectangles, int[] n_rectangles) {
+public static final native void _gdk_region_get_rectangles(long /*int*/ region, long /*int*/[] rectangles, int[] n_rectangles);
+public static final void gdk_region_get_rectangles(long /*int*/ region, long /*int*/[] rectangles, int[] n_rectangles) {
 	lock.lock();
 	try {
 		_gdk_region_get_rectangles(region, rectangles, n_rectangles);
@@ -3237,8 +3237,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_intersect(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_intersect(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_intersect(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_intersect(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_intersect(source1, source2);
@@ -3246,8 +3246,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_region_new();
-public static final int /*long*/ gdk_region_new() {
+public static final native long /*int*/ _gdk_region_new();
+public static final long /*int*/ gdk_region_new() {
 	lock.lock();
 	try {
 		return _gdk_region_new();
@@ -3255,8 +3255,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_offset(int /*long*/ region, int dx, int dy);
-public static final void gdk_region_offset(int /*long*/ region, int dx, int dy) {
+public static final native void _gdk_region_offset(long /*int*/ region, int dx, int dy);
+public static final void gdk_region_offset(long /*int*/ region, int dx, int dy) {
 	lock.lock();
 	try {
 		_gdk_region_offset(region, dx, dy);
@@ -3264,8 +3264,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_region_point_in(int /*long*/ region, int x, int y);
-public static final boolean gdk_region_point_in(int /*long*/ region, int x, int y) {
+public static final native boolean _gdk_region_point_in(long /*int*/ region, int x, int y);
+public static final boolean gdk_region_point_in(long /*int*/ region, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_region_point_in(region, x, y);
@@ -3273,8 +3273,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_region_polygon(int[] points, int npoints, int fill_rule);
-public static final int /*long*/ gdk_region_polygon(int[] points, int npoints, int fill_rule) {
+public static final native long /*int*/ _gdk_region_polygon(int[] points, int npoints, int fill_rule);
+public static final long /*int*/ gdk_region_polygon(int[] points, int npoints, int fill_rule) {
 	lock.lock();
 	try {
 		return _gdk_region_polygon(points, npoints, fill_rule);
@@ -3282,8 +3282,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_region_rectangle(GdkRectangle rectangle);
-public static final int /*long*/ gdk_region_rectangle(GdkRectangle rectangle) {
+public static final native long /*int*/ _gdk_region_rectangle(GdkRectangle rectangle);
+public static final long /*int*/ gdk_region_rectangle(GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		return _gdk_region_rectangle(rectangle);
@@ -3291,8 +3291,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_region_rect_in(int /*long*/ region, GdkRectangle rect);
-public static final int /*long*/ gdk_region_rect_in(int /*long*/ region, GdkRectangle rect) {
+public static final native long /*int*/ _gdk_region_rect_in(long /*int*/ region, GdkRectangle rect);
+public static final long /*int*/ gdk_region_rect_in(long /*int*/ region, GdkRectangle rect) {
 	lock.lock();
 	try {
 		return _gdk_region_rect_in(region, rect);
@@ -3300,8 +3300,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_subtract(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_subtract(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_subtract(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_subtract(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_subtract(source1, source2);
@@ -3309,8 +3309,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_union(int /*long*/ source1, int /*long*/ source2);
-public static final void gdk_region_union(int /*long*/ source1, int /*long*/ source2) {
+public static final native void _gdk_region_union(long /*int*/ source1, long /*int*/ source2);
+public static final void gdk_region_union(long /*int*/ source1, long /*int*/ source2) {
 	lock.lock();
 	try {
 		_gdk_region_union(source1, source2);
@@ -3318,8 +3318,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_region_union_with_rect(int /*long*/ region, GdkRectangle rect);
-public static final void gdk_region_union_with_rect(int /*long*/ region, GdkRectangle rect) {
+public static final native void _gdk_region_union_with_rect(long /*int*/ region, GdkRectangle rect);
+public static final void gdk_region_union_with_rect(long /*int*/ region, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gdk_region_union_with_rect(region, rect);
@@ -3336,8 +3336,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_screen_get_default();
-public static final int /*long*/ gdk_screen_get_default() {
+public static final native long /*int*/ _gdk_screen_get_default();
+public static final long /*int*/ gdk_screen_get_default() {
 	lock.lock();
 	try {
 		return _gdk_screen_get_default();
@@ -3345,8 +3345,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_screen_get_monitor_at_point (int /*long*/ screen, int x, int y);
-public static final int gdk_screen_get_monitor_at_point (int /*long*/ screen, int x, int y) {
+public static final native int _gdk_screen_get_monitor_at_point (long /*int*/ screen, int x, int y);
+public static final int gdk_screen_get_monitor_at_point (long /*int*/ screen, int x, int y) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_monitor_at_point (screen, x, y);
@@ -3354,8 +3354,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_screen_get_monitor_at_window(int /*long*/ screen, int /*long*/ window);
-public static final int gdk_screen_get_monitor_at_window(int /*long*/ screen, int /*long*/ window) {
+public static final native int _gdk_screen_get_monitor_at_window(long /*int*/ screen, long /*int*/ window);
+public static final int gdk_screen_get_monitor_at_window(long /*int*/ screen, long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_monitor_at_window(screen, window);
@@ -3363,8 +3363,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_screen_get_monitor_geometry (int /*long*/ screen, int monitor_num, GdkRectangle dest);
-public static final void gdk_screen_get_monitor_geometry (int /*long*/ screen, int monitor_num, GdkRectangle dest) {
+public static final native void _gdk_screen_get_monitor_geometry (long /*int*/ screen, int monitor_num, GdkRectangle dest);
+public static final void gdk_screen_get_monitor_geometry (long /*int*/ screen, int monitor_num, GdkRectangle dest) {
 	lock.lock();
 	try {
 		_gdk_screen_get_monitor_geometry(screen, monitor_num, dest);
@@ -3372,8 +3372,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_screen_get_n_monitors(int /*long*/ screen);
-public static final int gdk_screen_get_n_monitors(int /*long*/ screen) {
+public static final native int _gdk_screen_get_n_monitors(long /*int*/ screen);
+public static final int gdk_screen_get_n_monitors(long /*int*/ screen) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_n_monitors(screen);
@@ -3381,8 +3381,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_screen_get_number(int /*long*/ screen);
-public static final int gdk_screen_get_number(int /*long*/ screen) {
+public static final native int _gdk_screen_get_number(long /*int*/ screen);
+public static final int gdk_screen_get_number(long /*int*/ screen) {
 	lock.lock();
 	try {
 		return _gdk_screen_get_number(screen);
@@ -3426,8 +3426,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_utf8_to_compound_text(byte[] str, int /*long*/[] encoding, int[] format, int /*long*/[] ctext, int[] length);
-public static final boolean gdk_utf8_to_compound_text(byte[] str, int /*long*/[] encoding, int[] format, int /*long*/[] ctext, int[] length) {
+public static final native boolean _gdk_utf8_to_compound_text(byte[] str, long /*int*/[] encoding, int[] format, long /*int*/[] ctext, int[] length);
+public static final boolean gdk_utf8_to_compound_text(byte[] str, long /*int*/[] encoding, int[] format, long /*int*/[] ctext, int[] length) {
 	lock.lock();
 	try {
 		return _gdk_utf8_to_compound_text(str, encoding, format, ctext, length);
@@ -3435,8 +3435,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_utf8_to_string_target(byte[] str);
-public static final int /*long*/ gdk_utf8_to_string_target(byte[] str) {
+public static final native long /*int*/ _gdk_utf8_to_string_target(byte[] str);
+public static final long /*int*/ gdk_utf8_to_string_target(byte[] str) {
 	lock.lock();
 	try {
 		return _gdk_utf8_to_string_target(str);
@@ -3444,8 +3444,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_text_property_to_utf8_list  (int /*long*/ encoding, int format, int /*long*/ text, int length,  int /*long*/[] list);
-public static final int gdk_text_property_to_utf8_list  (int /*long*/ encoding, int format, int /*long*/ text, int length,  int /*long*/[] list) {
+public static final native int _gdk_text_property_to_utf8_list  (long /*int*/ encoding, int format, long /*int*/ text, int length,  long /*int*/[] list);
+public static final int gdk_text_property_to_utf8_list  (long /*int*/ encoding, int format, long /*int*/ text, int length,  long /*int*/[] list) {
 	lock.lock();
 	try {
 		return _gdk_text_property_to_utf8_list(encoding, format, text, length, list);
@@ -3453,8 +3453,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tooltip_trigger_tooltip_query (int /*long*/ display);
-public static final void gtk_tooltip_trigger_tooltip_query (int /*long*/ display){
+public static final native void _gtk_tooltip_trigger_tooltip_query (long /*int*/ display);
+public static final void gtk_tooltip_trigger_tooltip_query (long /*int*/ display){
 	lock.lock();
 	try {
 		 _gtk_tooltip_trigger_tooltip_query (display);
@@ -3472,8 +3472,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_visual_get_system();
-public static final int /*long*/ gdk_visual_get_system() {
+public static final native long /*int*/ _gdk_visual_get_system();
+public static final long /*int*/ gdk_visual_get_system() {
 	lock.lock();
 	try {
 		return _gdk_visual_get_system();
@@ -3481,8 +3481,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_at_pointer(int[] win_x, int[] win_y);
-public static final int /*long*/ gdk_window_at_pointer(int[] win_x, int[] win_y) {
+public static final native long /*int*/ _gdk_window_at_pointer(int[] win_x, int[] win_y);
+public static final long /*int*/ gdk_window_at_pointer(int[] win_x, int[] win_y) {
 	lock.lock();
 	try {
 		return _gdk_window_at_pointer(win_x, win_y);
@@ -3490,8 +3490,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_begin_paint_rect(int /*long*/ window, GdkRectangle rectangle);
-public static final void gdk_window_begin_paint_rect(int /*long*/ window, GdkRectangle rectangle) {
+public static final native void _gdk_window_begin_paint_rect(long /*int*/ window, GdkRectangle rectangle);
+public static final void gdk_window_begin_paint_rect(long /*int*/ window, GdkRectangle rectangle) {
 	lock.lock();
 	try {
 		_gdk_window_begin_paint_rect(window, rectangle);
@@ -3499,8 +3499,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_clear_area(int /*long*/ window, int x, int y, int width, int height);
-public static final void gdk_window_clear_area(int /*long*/ window, int x, int y, int width, int height) {
+public static final native void _gdk_window_clear_area(long /*int*/ window, int x, int y, int width, int height);
+public static final void gdk_window_clear_area(long /*int*/ window, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_window_clear_area(window, x, y, width, height);
@@ -3508,8 +3508,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_destroy(int /*long*/ window);
-public static final void gdk_window_destroy(int /*long*/ window) {
+public static final native void _gdk_window_destroy(long /*int*/ window);
+public static final void gdk_window_destroy(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_destroy(window);
@@ -3517,8 +3517,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_end_paint(int /*long*/ window);
-public static final void gdk_window_end_paint(int /*long*/ window) {
+public static final native void _gdk_window_end_paint(long /*int*/ window);
+public static final void gdk_window_end_paint(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_end_paint(window);
@@ -3526,8 +3526,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_get_children(int /*long*/ window);
-public static final int /*long*/ gdk_window_get_children(int /*long*/ window) {
+public static final native long /*int*/ _gdk_window_get_children(long /*int*/ window);
+public static final long /*int*/ gdk_window_get_children(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_children(window);
@@ -3535,8 +3535,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_window_get_events(int /*long*/ window);
-public static final int gdk_window_get_events(int /*long*/ window) {
+public static final native int _gdk_window_get_events(long /*int*/ window);
+public static final int gdk_window_get_events(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_events(window);
@@ -3544,8 +3544,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_focus(int /*long*/ window, int timestamp);
-public static final void gdk_window_focus(int /*long*/ window, int timestamp) {
+public static final native void _gdk_window_focus(long /*int*/ window, int timestamp);
+public static final void gdk_window_focus(long /*int*/ window, int timestamp) {
 	lock.lock();
 	try {
 		_gdk_window_focus(window, timestamp);
@@ -3553,8 +3553,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_freeze_updates(int /*long*/ window);
-public static final void gdk_window_freeze_updates(int /*long*/ window) {
+public static final native void _gdk_window_freeze_updates(long /*int*/ window);
+public static final void gdk_window_freeze_updates(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_freeze_updates(window);
@@ -3562,8 +3562,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_get_frame_extents(int /*long*/ window, GdkRectangle rect);
-public static final void gdk_window_get_frame_extents(int /*long*/ window, GdkRectangle rect) {
+public static final native void _gdk_window_get_frame_extents(long /*int*/ window, GdkRectangle rect);
+public static final void gdk_window_get_frame_extents(long /*int*/ window, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gdk_window_get_frame_extents(window, rect);
@@ -3571,8 +3571,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_get_internal_paint_info(int /*long*/ window, int /*long*/ [] real_drawable, int[] x_offset, int[] y_offset);
-public static final void gdk_window_get_internal_paint_info(int /*long*/ window, int /*long*/ [] real_drawable, int[] x_offset, int[] y_offset) {
+public static final native void _gdk_window_get_internal_paint_info(long /*int*/ window, long /*int*/ [] real_drawable, int[] x_offset, int[] y_offset);
+public static final void gdk_window_get_internal_paint_info(long /*int*/ window, long /*int*/ [] real_drawable, int[] x_offset, int[] y_offset) {
 	lock.lock();
 	try {
 		_gdk_window_get_internal_paint_info(window, real_drawable, x_offset, y_offset);
@@ -3580,8 +3580,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gdk_window_get_origin(int /*long*/ window, int[] x, int[] y);
-public static final int gdk_window_get_origin(int /*long*/ window, int[] x, int[] y) {
+public static final native int _gdk_window_get_origin(long /*int*/ window, int[] x, int[] y);
+public static final int gdk_window_get_origin(long /*int*/ window, int[] x, int[] y) {
 	lock.lock();
 	try {
 		return _gdk_window_get_origin(window, x, y);
@@ -3589,8 +3589,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_get_parent(int /*long*/ window);
-public static final int /*long*/ gdk_window_get_parent(int /*long*/ window) {
+public static final native long /*int*/ _gdk_window_get_parent(long /*int*/ window);
+public static final long /*int*/ gdk_window_get_parent(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_get_parent(window);
@@ -3598,8 +3598,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_get_pointer(int /*long*/ window, int[] x, int[] y, int[] mask);
-public static final int /*long*/ gdk_window_get_pointer(int /*long*/ window, int[] x, int[] y, int[] mask) {
+public static final native long /*int*/ _gdk_window_get_pointer(long /*int*/ window, int[] x, int[] y, int[] mask);
+public static final long /*int*/ gdk_window_get_pointer(long /*int*/ window, int[] x, int[] y, int[] mask) {
 	lock.lock();
 	try {
 		return _gdk_window_get_pointer(window, x, y, mask);
@@ -3607,8 +3607,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_get_position(int /*long*/ window, int[] x, int[] y);
-public static final void gdk_window_get_position(int /*long*/ window, int[] x, int[] y) {
+public static final native void _gdk_window_get_position(long /*int*/ window, int[] x, int[] y);
+public static final void gdk_window_get_position(long /*int*/ window, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gdk_window_get_position(window, x, y);
@@ -3616,8 +3616,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_get_user_data(int /*long*/ window, int /*long*/[] data);
-public static final void gdk_window_get_user_data(int /*long*/ window, int /*long*/[] data) {
+public static final native void _gdk_window_get_user_data(long /*int*/ window, long /*int*/[] data);
+public static final void gdk_window_get_user_data(long /*int*/ window, long /*int*/[] data) {
 	lock.lock();
 	try {
 		_gdk_window_get_user_data(window, data);
@@ -3625,8 +3625,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_hide(int /*long*/ window);
-public static final void gdk_window_hide(int /*long*/ window) {
+public static final native void _gdk_window_hide(long /*int*/ window);
+public static final void gdk_window_hide(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_hide(window);
@@ -3634,8 +3634,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_invalidate_rect(int /*long*/ window, GdkRectangle rectangle, boolean invalidate_children);
-public static final void gdk_window_invalidate_rect(int /*long*/ window, GdkRectangle rectangle, boolean invalidate_children) {
+public static final native void _gdk_window_invalidate_rect(long /*int*/ window, GdkRectangle rectangle, boolean invalidate_children);
+public static final void gdk_window_invalidate_rect(long /*int*/ window, GdkRectangle rectangle, boolean invalidate_children) {
 	lock.lock();
 	try {
 		_gdk_window_invalidate_rect(window, rectangle, invalidate_children);
@@ -3643,8 +3643,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_invalidate_region(int /*long*/ window, int /*long*/ region, boolean invalidate_children);
-public static final void gdk_window_invalidate_region(int /*long*/ window, int /*long*/ region, boolean invalidate_children) {
+public static final native void _gdk_window_invalidate_region(long /*int*/ window, long /*int*/ region, boolean invalidate_children);
+public static final void gdk_window_invalidate_region(long /*int*/ window, long /*int*/ region, boolean invalidate_children) {
 	lock.lock();
 	try {
 		_gdk_window_invalidate_region(window, region, invalidate_children);
@@ -3652,8 +3652,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gdk_window_is_visible(int /*long*/ window);
-public static final boolean gdk_window_is_visible(int /*long*/ window) {
+public static final native boolean _gdk_window_is_visible(long /*int*/ window);
+public static final boolean gdk_window_is_visible(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gdk_window_is_visible(window);
@@ -3661,8 +3661,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_move(int /*long*/ window, int x, int y);
-public static final void gdk_window_move(int /*long*/ window, int x, int y) {
+public static final native void _gdk_window_move(long /*int*/ window, int x, int y);
+public static final void gdk_window_move(long /*int*/ window, int x, int y) {
 	lock.lock();
 	try {
 		_gdk_window_move(window, x, y);
@@ -3670,8 +3670,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gdk_window_new(int /*long*/ parent, GdkWindowAttr attributes, int attributes_mask);
-public static final int /*long*/ gdk_window_new(int /*long*/ parent, GdkWindowAttr attributes, int attributes_mask) {
+public static final native long /*int*/ _gdk_window_new(long /*int*/ parent, GdkWindowAttr attributes, int attributes_mask);
+public static final long /*int*/ gdk_window_new(long /*int*/ parent, GdkWindowAttr attributes, int attributes_mask) {
 	lock.lock();
 	try {
 		return _gdk_window_new(parent, attributes, attributes_mask);
@@ -3679,8 +3679,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_lower(int /*long*/ window);
-public static final void gdk_window_lower(int /*long*/ window) {
+public static final native void _gdk_window_lower(long /*int*/ window);
+public static final void gdk_window_lower(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_lower(window);
@@ -3697,8 +3697,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_process_updates(int /*long*/ window, boolean update_children);
-public static final void gdk_window_process_updates(int /*long*/ window, boolean update_children) {
+public static final native void _gdk_window_process_updates(long /*int*/ window, boolean update_children);
+public static final void gdk_window_process_updates(long /*int*/ window, boolean update_children) {
 	lock.lock();
 	try {
 		_gdk_window_process_updates(window, update_children);
@@ -3706,8 +3706,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_raise(int /*long*/ window);
-public static final void gdk_window_raise(int /*long*/ window) {
+public static final native void _gdk_window_raise(long /*int*/ window);
+public static final void gdk_window_raise(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_raise(window);
@@ -3715,8 +3715,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_resize(int /*long*/ window, int width, int height);
-public static final void gdk_window_resize(int /*long*/ window, int width, int height) {
+public static final native void _gdk_window_resize(long /*int*/ window, int width, int height);
+public static final void gdk_window_resize(long /*int*/ window, int width, int height) {
 	lock.lock();
 	try {
 		_gdk_window_resize(window, width, height);
@@ -3724,8 +3724,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_scroll(int /*long*/ window, int dx, int dy);
-public static final void gdk_window_scroll(int /*long*/ window, int dx, int dy) {
+public static final native void _gdk_window_scroll(long /*int*/ window, int dx, int dy);
+public static final void gdk_window_scroll(long /*int*/ window, int dx, int dy) {
 	lock.lock();
 	try {
 		_gdk_window_scroll(window, dx, dy);
@@ -3733,8 +3733,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_accept_focus(int /*long*/ window, boolean accept_focus);
-public static final void gdk_window_set_accept_focus(int /*long*/ window, boolean accept_focus) {
+public static final native void _gdk_window_set_accept_focus(long /*int*/ window, boolean accept_focus);
+public static final void gdk_window_set_accept_focus(long /*int*/ window, boolean accept_focus) {
 	lock.lock();
 	try {
 		_gdk_window_set_accept_focus(window, accept_focus);
@@ -3742,8 +3742,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_back_pixmap(int /*long*/ window, int /*long*/ pixmap, boolean parent_relative);
-public static final void gdk_window_set_back_pixmap(int /*long*/ window, int /*long*/ pixmap, boolean parent_relative) {
+public static final native void _gdk_window_set_back_pixmap(long /*int*/ window, long /*int*/ pixmap, boolean parent_relative);
+public static final void gdk_window_set_back_pixmap(long /*int*/ window, long /*int*/ pixmap, boolean parent_relative) {
 	lock.lock();
 	try {
 		_gdk_window_set_back_pixmap(window, pixmap, parent_relative);
@@ -3751,8 +3751,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_cursor(int /*long*/ window, int /*long*/ cursor);
-public static final void gdk_window_set_cursor(int /*long*/ window, int /*long*/ cursor) {
+public static final native void _gdk_window_set_cursor(long /*int*/ window, long /*int*/ cursor);
+public static final void gdk_window_set_cursor(long /*int*/ window, long /*int*/ cursor) {
 	lock.lock();
 	try {
 		_gdk_window_set_cursor(window, cursor);
@@ -3769,8 +3769,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_decorations(int /*long*/ window, int decorations);
-public static final void gdk_window_set_decorations(int /*long*/ window, int decorations) {
+public static final native void _gdk_window_set_decorations(long /*int*/ window, int decorations);
+public static final void gdk_window_set_decorations(long /*int*/ window, int decorations) {
 	lock.lock();
 	try {
 		_gdk_window_set_decorations(window, decorations);
@@ -3778,8 +3778,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_events(int /*long*/ window, int event_mask);
-public static final void gdk_window_set_events(int /*long*/ window, int event_mask) {
+public static final native void _gdk_window_set_events(long /*int*/ window, int event_mask);
+public static final void gdk_window_set_events(long /*int*/ window, int event_mask) {
 	lock.lock();
 	try {
 		_gdk_window_set_events(window, event_mask);
@@ -3787,8 +3787,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_icon(int /*long*/ window, int /*long*/ icon_window, int /*long*/ pixmap, int /*long*/ mask);
-public static final void gdk_window_set_icon(int /*long*/ window, int /*long*/ icon_window, int /*long*/ pixmap, int /*long*/ mask) {
+public static final native void _gdk_window_set_icon(long /*int*/ window, long /*int*/ icon_window, long /*int*/ pixmap, long /*int*/ mask);
+public static final void gdk_window_set_icon(long /*int*/ window, long /*int*/ icon_window, long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gdk_window_set_icon(window, icon_window, pixmap, mask);
@@ -3796,8 +3796,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_icon_list(int /*long*/ window, int /*long*/ pixbufs);
-public static final void gdk_window_set_icon_list(int /*long*/ window, int /*long*/ pixbufs) {
+public static final native void _gdk_window_set_icon_list(long /*int*/ window, long /*int*/ pixbufs);
+public static final void gdk_window_set_icon_list(long /*int*/ window, long /*int*/ pixbufs) {
 	lock.lock();
 	try {
 		_gdk_window_set_icon_list(window, pixbufs);
@@ -3805,8 +3805,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_keep_above(int /*long*/ window, boolean setting);
-public static final void gdk_window_set_keep_above(int /*long*/ window, boolean setting) {
+public static final native void _gdk_window_set_keep_above(long /*int*/ window, boolean setting);
+public static final void gdk_window_set_keep_above(long /*int*/ window, boolean setting) {
 	lock.lock();
 	try {
 		_gdk_window_set_keep_above(window, setting);
@@ -3814,8 +3814,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_override_redirect(int /*long*/ window, boolean override_redirect);
-public static final void gdk_window_set_override_redirect(int /*long*/ window, boolean override_redirect) {
+public static final native void _gdk_window_set_override_redirect(long /*int*/ window, boolean override_redirect);
+public static final void gdk_window_set_override_redirect(long /*int*/ window, boolean override_redirect) {
 	lock.lock();
 	try {
 		_gdk_window_set_override_redirect(window, override_redirect);
@@ -3823,8 +3823,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_set_user_data(int /*long*/ window, int /*long*/ user_data);
-public static final void gdk_window_set_user_data(int /*long*/ window, int /*long*/ user_data) {
+public static final native void _gdk_window_set_user_data(long /*int*/ window, long /*int*/ user_data);
+public static final void gdk_window_set_user_data(long /*int*/ window, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		_gdk_window_set_user_data(window, user_data);
@@ -3832,8 +3832,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_shape_combine_region (int /*long*/ window, int /*long*/  shape_region, int offset_x,  int offset_y);
-public static final void gdk_window_shape_combine_region (int /*long*/ window, int /*long*/  shape_region, int offset_x,  int offset_y) {
+public static final native void _gdk_window_shape_combine_region (long /*int*/ window, long /*int*/  shape_region, int offset_x,  int offset_y);
+public static final void gdk_window_shape_combine_region (long /*int*/ window, long /*int*/  shape_region, int offset_x,  int offset_y) {
 	lock.lock();
 	try {
 		_gdk_window_shape_combine_region(window, shape_region, offset_x, offset_y);
@@ -3841,8 +3841,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_show(int /*long*/ window);
-public static final void gdk_window_show(int /*long*/ window) {
+public static final native void _gdk_window_show(long /*int*/ window);
+public static final void gdk_window_show(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_show(window);
@@ -3850,8 +3850,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_show_unraised(int /*long*/ window);
-public static final void gdk_window_show_unraised(int /*long*/ window) {
+public static final native void _gdk_window_show_unraised(long /*int*/ window);
+public static final void gdk_window_show_unraised(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_show_unraised(window);
@@ -3859,8 +3859,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gdk_window_thaw_updates(int /*long*/ window);
-public static final void gdk_window_thaw_updates(int /*long*/ window) {
+public static final native void _gdk_window_thaw_updates(long /*int*/ window);
+public static final void gdk_window_thaw_updates(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gdk_window_thaw_updates(window);
@@ -3868,8 +3868,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_accel_group_new();
-public static final int /*long*/ gtk_accel_group_new() {
+public static final native long /*int*/ _gtk_accel_group_new();
+public static final long /*int*/ gtk_accel_group_new() {
 	lock.lock();
 	try {
 		return _gtk_accel_group_new();
@@ -3877,8 +3877,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_accel_groups_activate(int /*long*/ accelGroup, int accelKey, int accelMods);
-public static final boolean gtk_accel_groups_activate(int /*long*/ accelGroup, int accelKey, int accelMods) {
+public static final native boolean _gtk_accel_groups_activate(long /*int*/ accelGroup, int accelKey, int accelMods);
+public static final boolean gtk_accel_groups_activate(long /*int*/ accelGroup, int accelKey, int accelMods) {
 	lock.lock();
 	try {
 		return _gtk_accel_groups_activate(accelGroup, accelKey, accelMods);
@@ -3886,8 +3886,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_accel_label_set_accel_widget(int /*long*/ accel_label, int /*long*/ accel_widget);
-public static final void gtk_accel_label_set_accel_widget(int /*long*/ accel_label, int /*long*/ accel_widget) {
+public static final native void _gtk_accel_label_set_accel_widget(long /*int*/ accel_label, long /*int*/ accel_widget);
+public static final void gtk_accel_label_set_accel_widget(long /*int*/ accel_label, long /*int*/ accel_widget) {
 	lock.lock();
 	try {
 		_gtk_accel_label_set_accel_widget(accel_label, accel_widget);
@@ -3895,8 +3895,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_adjustment_changed(int /*long*/ adjustment);
-public static final void gtk_adjustment_changed(int /*long*/ adjustment) {
+public static final native void _gtk_adjustment_changed(long /*int*/ adjustment);
+public static final void gtk_adjustment_changed(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		_gtk_adjustment_changed(adjustment);
@@ -3904,8 +3904,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
-public static final int /*long*/ gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
+public static final native long /*int*/ _gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size);
+public static final long /*int*/ gtk_adjustment_new(double value, double lower, double upper, double step_increment, double page_increment, double page_size) {
 	lock.lock();
 	try {
 		return _gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size);
@@ -3913,8 +3913,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_adjustment_set_value(int /*long*/ adjustment, double value);
-public static final void gtk_adjustment_set_value(int /*long*/ adjustment, double value) {
+public static final native void _gtk_adjustment_set_value(long /*int*/ adjustment, double value);
+public static final void gtk_adjustment_set_value(long /*int*/ adjustment, double value) {
 	lock.lock();
 	try {
 		_gtk_adjustment_set_value(adjustment, value);
@@ -3922,8 +3922,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_adjustment_value_changed(int /*long*/ adjustment);
-public static final void gtk_adjustment_value_changed(int /*long*/ adjustment) {
+public static final native void _gtk_adjustment_value_changed(long /*int*/ adjustment);
+public static final void gtk_adjustment_value_changed(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		_gtk_adjustment_value_changed(adjustment);
@@ -3931,8 +3931,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_arrow_new(int arrow_type, int shadow_type);
-public static final int /*long*/ gtk_arrow_new(int arrow_type, int shadow_type) {
+public static final native long /*int*/ _gtk_arrow_new(int arrow_type, int shadow_type);
+public static final long /*int*/ gtk_arrow_new(int arrow_type, int shadow_type) {
 	lock.lock();
 	try {
 		return _gtk_arrow_new(arrow_type, shadow_type);
@@ -3940,8 +3940,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_arrow_set(int /*long*/ arrow, int arrow_type, int shadow_type);
-public static final void gtk_arrow_set(int /*long*/ arrow, int arrow_type, int shadow_type) {
+public static final native void _gtk_arrow_set(long /*int*/ arrow, int arrow_type, int shadow_type);
+public static final void gtk_arrow_set(long /*int*/ arrow, int arrow_type, int shadow_type) {
 	lock.lock();
 	try {
 		_gtk_arrow_set(arrow, arrow_type, shadow_type);
@@ -3949,8 +3949,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_bin_get_child(int /*long*/ bin);
-public static final int /*long*/ gtk_bin_get_child(int /*long*/ bin) {
+public static final native long /*int*/ _gtk_bin_get_child(long /*int*/ bin);
+public static final long /*int*/ gtk_bin_get_child(long /*int*/ bin) {
 	lock.lock();
 	try {
 		return _gtk_bin_get_child(bin);
@@ -3958,8 +3958,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_box_set_spacing(int /*long*/ box, int spacing);
-public static final void gtk_box_set_spacing(int /*long*/ box, int spacing) {
+public static final native void _gtk_box_set_spacing(long /*int*/ box, int spacing);
+public static final void gtk_box_set_spacing(long /*int*/ box, int spacing) {
 	lock.lock();
 	try {
 		_gtk_box_set_spacing(box, spacing);
@@ -3967,8 +3967,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_box_set_child_packing(int /*long*/ box, int /*long*/ child, boolean expand, boolean fill, int padding, int pack_type);
-public static final void gtk_box_set_child_packing(int /*long*/ box, int /*long*/ child, boolean expand, boolean fill, int padding, int pack_type) {
+public static final native void _gtk_box_set_child_packing(long /*int*/ box, long /*int*/ child, boolean expand, boolean fill, int padding, int pack_type);
+public static final void gtk_box_set_child_packing(long /*int*/ box, long /*int*/ child, boolean expand, boolean fill, int padding, int pack_type) {
 	lock.lock();
 	try {
 		_gtk_box_set_child_packing(box, child, expand, fill, padding, pack_type);
@@ -3976,8 +3976,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_button_clicked(int /*long*/ button);
-public static final void gtk_button_clicked(int /*long*/ button) {
+public static final native void _gtk_button_clicked(long /*int*/ button);
+public static final void gtk_button_clicked(long /*int*/ button) {
 	lock.lock();
 	try {
 		_gtk_button_clicked(button);
@@ -3985,8 +3985,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_button_get_relief(int /*long*/ button);
-public static final int gtk_button_get_relief(int /*long*/ button) {
+public static final native int _gtk_button_get_relief(long /*int*/ button);
+public static final int gtk_button_get_relief(long /*int*/ button) {
 	lock.lock();
 	try {
 		return _gtk_button_get_relief(button);
@@ -3994,8 +3994,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_button_new();
-public static final int /*long*/ gtk_button_new() {
+public static final native long /*int*/ _gtk_button_new();
+public static final long /*int*/ gtk_button_new() {
 	lock.lock();
 	try {
 		return _gtk_button_new();
@@ -4003,8 +4003,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_button_set_relief(int /*long*/ button, int newstyle);
-public static final void gtk_button_set_relief(int /*long*/ button, int newstyle) {
+public static final native void _gtk_button_set_relief(long /*int*/ button, int newstyle);
+public static final void gtk_button_set_relief(long /*int*/ button, int newstyle) {
 	lock.lock();
 	try {
 		_gtk_button_set_relief(button, newstyle);
@@ -4012,8 +4012,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_calendar_new();
-public static final int /*long*/ gtk_calendar_new() {
+public static final native long /*int*/ _gtk_calendar_new();
+public static final long /*int*/ gtk_calendar_new() {
 	lock.lock();
 	try {
 		return _gtk_calendar_new();
@@ -4021,8 +4021,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean /*long*/ _gtk_calendar_select_month(int /*long*/ calendar, int month, int year);
-public static final boolean /*long*/ gtk_calendar_select_month(int /*long*/ calendar, int month, int year) {
+public static final native boolean /*long*/ _gtk_calendar_select_month(long /*int*/ calendar, int month, int year);
+public static final boolean /*long*/ gtk_calendar_select_month(long /*int*/ calendar, int month, int year) {
 	lock.lock();
 	try {
 		return _gtk_calendar_select_month(calendar, month, year);
@@ -4030,8 +4030,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_calendar_select_day(int /*long*/ calendar, int day);
-public static final void gtk_calendar_select_day(int /*long*/ calendar, int day) {
+public static final native void _gtk_calendar_select_day(long /*int*/ calendar, int day);
+public static final void gtk_calendar_select_day(long /*int*/ calendar, int day) {
 	lock.lock();
 	try {
 		_gtk_calendar_select_day(calendar, day);
@@ -4039,8 +4039,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_calendar_set_display_options(int /*long*/ calendar, int flags);
-public static final void gtk_calendar_set_display_options(int /*long*/ calendar, int flags) {
+public static final native void _gtk_calendar_set_display_options(long /*int*/ calendar, int flags);
+public static final void gtk_calendar_set_display_options(long /*int*/ calendar, int flags) {
 	lock.lock();
 	try {
 		_gtk_calendar_set_display_options(calendar, flags);
@@ -4048,8 +4048,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_calendar_display_options(int /*long*/ calendar, int flags);
-public static final void gtk_calendar_display_options(int /*long*/ calendar, int flags) {
+public static final native void _gtk_calendar_display_options(long /*int*/ calendar, int flags);
+public static final void gtk_calendar_display_options(long /*int*/ calendar, int flags) {
 	lock.lock();
 	try {
 		_gtk_calendar_display_options(calendar, flags);
@@ -4057,8 +4057,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_calendar_get_date(int /*long*/ calendar, int[] year, int[] month, int[] day);
-public static final void gtk_calendar_get_date(int /*long*/ calendar, int[] year, int[] month, int[] day) {
+public static final native void _gtk_calendar_get_date(long /*int*/ calendar, int[] year, int[] month, int[] day);
+public static final void gtk_calendar_get_date(long /*int*/ calendar, int[] year, int[] month, int[] day) {
 	lock.lock();
 	try {
 		_gtk_calendar_get_date(calendar, year, month, day);
@@ -4066,8 +4066,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_cell_layout_clear(int /*long*/ cell_layout);
-public static final void gtk_cell_layout_clear(int /*long*/ cell_layout) {
+public static final native void _gtk_cell_layout_clear(long /*int*/ cell_layout);
+public static final void gtk_cell_layout_clear(long /*int*/ cell_layout) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_clear(cell_layout);
@@ -4075,8 +4075,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_cell_layout_set_attributes(int /*long*/ cell_layout, int /*long*/ cell, byte[] attribute, int column, int /*long*/ sentinel);
-public static final void gtk_cell_layout_set_attributes(int /*long*/ cell_layout, int /*long*/ cell, byte[] attribute, int column, int /*long*/ sentinel) {
+public static final native void _gtk_cell_layout_set_attributes(long /*int*/ cell_layout, long /*int*/ cell, byte[] attribute, int column, long /*int*/ sentinel);
+public static final void gtk_cell_layout_set_attributes(long /*int*/ cell_layout, long /*int*/ cell, byte[] attribute, int column, long /*int*/ sentinel) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_set_attributes(cell_layout, cell, attribute, column, sentinel);
@@ -4084,8 +4084,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_cell_layout_pack_start(int /*long*/ cell_layout, int /*long*/ cell, boolean expand);
-public static final void gtk_cell_layout_pack_start(int /*long*/ cell_layout, int /*long*/ cell, boolean expand) {
+public static final native void _gtk_cell_layout_pack_start(long /*int*/ cell_layout, long /*int*/ cell, boolean expand);
+public static final void gtk_cell_layout_pack_start(long /*int*/ cell_layout, long /*int*/ cell, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_cell_layout_pack_start(cell_layout, cell, expand);
@@ -4093,8 +4093,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_cell_renderer_get_size(int /*long*/ cell, int /*long*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height);
-public static final void gtk_cell_renderer_get_size(int /*long*/ cell, int /*long*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
+public static final native void _gtk_cell_renderer_get_size(long /*int*/ cell, long /*int*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height);
+public static final void gtk_cell_renderer_get_size(long /*int*/ cell, long /*int*/ widget, GdkRectangle area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gtk_cell_renderer_get_size(cell, widget, area, x_offset, y_offset, width, height);
@@ -4102,8 +4102,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_pixbuf_new();
-public static final int /*long*/ gtk_cell_renderer_pixbuf_new() {
+public static final native long /*int*/ _gtk_cell_renderer_pixbuf_new();
+public static final long /*int*/ gtk_cell_renderer_pixbuf_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_pixbuf_new();
@@ -4111,8 +4111,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_text_new();
-public static final int /*long*/ gtk_cell_renderer_text_new() {
+public static final native long /*int*/ _gtk_cell_renderer_text_new();
+public static final long /*int*/ gtk_cell_renderer_text_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_text_new();
@@ -4120,8 +4120,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_cell_renderer_toggle_new();
-public static final int /*long*/ gtk_cell_renderer_toggle_new() {
+public static final native long /*int*/ _gtk_cell_renderer_toggle_new();
+public static final long /*int*/ gtk_cell_renderer_toggle_new() {
 	lock.lock();
 	try {
 		return _gtk_cell_renderer_toggle_new();
@@ -4129,8 +4129,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_check_button_new();
-public static final int /*long*/ gtk_check_button_new() {
+public static final native long /*int*/ _gtk_check_button_new();
+public static final long /*int*/ gtk_check_button_new() {
 	lock.lock();
 	try {
 		return _gtk_check_button_new();
@@ -4138,8 +4138,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_check_menu_item_get_active(int /*long*/ check_menu_item);
-public static final boolean gtk_check_menu_item_get_active(int /*long*/ check_menu_item) {
+public static final native boolean _gtk_check_menu_item_get_active(long /*int*/ check_menu_item);
+public static final boolean gtk_check_menu_item_get_active(long /*int*/ check_menu_item) {
 	lock.lock();
 	try {
 		return _gtk_check_menu_item_get_active(check_menu_item);
@@ -4147,8 +4147,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_check_menu_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_check_menu_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_check_menu_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_check_menu_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_check_menu_item_new_with_label(label);
@@ -4156,8 +4156,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_check_menu_item_set_active(int /*long*/ wid, boolean active);
-public static final void gtk_check_menu_item_set_active(int /*long*/ wid, boolean active) {
+public static final native void _gtk_check_menu_item_set_active(long /*int*/ wid, boolean active);
+public static final void gtk_check_menu_item_set_active(long /*int*/ wid, boolean active) {
 	lock.lock();
 	try {
 		_gtk_check_menu_item_set_active(wid, active);
@@ -4165,8 +4165,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_check_version(int required_major, int required_minor, int required_micro);
-public static final int /*long*/ gtk_check_version(int required_major, int required_minor, int required_micro) {
+public static final native long /*int*/ _gtk_check_version(int required_major, int required_minor, int required_micro);
+public static final long /*int*/ gtk_check_version(int required_major, int required_minor, int required_micro) {
 	lock.lock();
 	try {
 		return _gtk_check_version(required_major, required_minor, required_micro);
@@ -4174,8 +4174,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_clipboard_clear(int /*long*/ clipboard);
-public static final void gtk_clipboard_clear(int /*long*/ clipboard) {
+public static final native void _gtk_clipboard_clear(long /*int*/ clipboard);
+public static final void gtk_clipboard_clear(long /*int*/ clipboard) {
 	lock.lock();
 	try {
 		_gtk_clipboard_clear(clipboard);
@@ -4183,8 +4183,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_clipboard_get(int /*long*/ selection);
-public static final int /*long*/ gtk_clipboard_get(int /*long*/ selection) {
+public static final native long /*int*/ _gtk_clipboard_get(long /*int*/ selection);
+public static final long /*int*/ gtk_clipboard_get(long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_get(selection);
@@ -4192,8 +4192,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_clipboard_set_with_data(int /*long*/ clipboard, int /*long*/ target, int n_targets, int /*long*/ get_func, int /*long*/ clear_func, int /*long*/ user_data);
-public static final boolean gtk_clipboard_set_with_data(int /*long*/ clipboard, int /*long*/ target, int n_targets, int /*long*/ get_func, int /*long*/ clear_func, int /*long*/ user_data) {
+public static final native boolean _gtk_clipboard_set_with_data(long /*int*/ clipboard, long /*int*/ target, int n_targets, long /*int*/ get_func, long /*int*/ clear_func, long /*int*/ user_data);
+public static final boolean gtk_clipboard_set_with_data(long /*int*/ clipboard, long /*int*/ target, int n_targets, long /*int*/ get_func, long /*int*/ clear_func, long /*int*/ user_data) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_set_with_data(clipboard, target, n_targets, get_func, clear_func, user_data);
@@ -4201,8 +4201,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target);
-public static final int /*long*/ gtk_clipboard_wait_for_contents(int /*long*/ clipboard, int /*long*/ target) {
+public static final native long /*int*/ _gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target);
+public static final long /*int*/ gtk_clipboard_wait_for_contents(long /*int*/ clipboard, long /*int*/ target) {
 	lock.lock();
 	try {
 		return _gtk_clipboard_wait_for_contents(clipboard, target);
@@ -4210,8 +4210,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_color_selection_dialog_new(byte[] title);
-public static final int /*long*/ gtk_color_selection_dialog_new(byte[] title) {
+public static final native long /*int*/ _gtk_color_selection_dialog_new(byte[] title);
+public static final long /*int*/ gtk_color_selection_dialog_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_color_selection_dialog_new(title);
@@ -4219,8 +4219,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_color_selection_get_current_color(int /*long*/ colorsel, GdkColor color);
-public static final void gtk_color_selection_get_current_color(int /*long*/ colorsel, GdkColor color) {
+public static final native void _gtk_color_selection_get_current_color(long /*int*/ colorsel, GdkColor color);
+public static final void gtk_color_selection_get_current_color(long /*int*/ colorsel, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_color_selection_get_current_color(colorsel, color);
@@ -4228,8 +4228,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_color_selection_set_current_color(int /*long*/ colorsel, GdkColor color);
-public static final void gtk_color_selection_set_current_color(int /*long*/ colorsel, GdkColor color) {
+public static final native void _gtk_color_selection_set_current_color(long /*int*/ colorsel, GdkColor color);
+public static final void gtk_color_selection_set_current_color(long /*int*/ colorsel, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_color_selection_set_current_color(colorsel, color);
@@ -4237,8 +4237,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_color_selection_set_has_palette(int /*long*/ colorsel, boolean has_palette);
-public static final void gtk_color_selection_set_has_palette(int /*long*/ colorsel, boolean has_palette) {
+public static final native void _gtk_color_selection_set_has_palette(long /*int*/ colorsel, boolean has_palette);
+public static final void gtk_color_selection_set_has_palette(long /*int*/ colorsel, boolean has_palette) {
 	lock.lock();
 	try {
 		_gtk_color_selection_set_has_palette(colorsel, has_palette);
@@ -4246,8 +4246,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_disable_activate(int /*long*/ combo);
-public static final void gtk_combo_disable_activate(int /*long*/ combo) {
+public static final native void _gtk_combo_disable_activate(long /*int*/ combo);
+public static final void gtk_combo_disable_activate(long /*int*/ combo) {
 	lock.lock();
 	try {
 		_gtk_combo_disable_activate(combo);
@@ -4255,8 +4255,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_combo_new();
-public static final int /*long*/ gtk_combo_new() {
+public static final native long /*int*/ _gtk_combo_new();
+public static final long /*int*/ gtk_combo_new() {
 	lock.lock();
 	try {
 		return _gtk_combo_new();
@@ -4264,8 +4264,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_set_case_sensitive(int /*long*/ combo, boolean val);
-public static final void gtk_combo_set_case_sensitive(int /*long*/ combo, boolean val) {
+public static final native void _gtk_combo_set_case_sensitive(long /*int*/ combo, boolean val);
+public static final void gtk_combo_set_case_sensitive(long /*int*/ combo, boolean val) {
 	lock.lock();
 	try {
 		_gtk_combo_set_case_sensitive(combo, val);
@@ -4273,8 +4273,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_set_focus_on_click(int /*long*/ combo, boolean val);
-public static final void gtk_combo_box_set_focus_on_click(int /*long*/ combo, boolean val) {
+public static final native void _gtk_combo_box_set_focus_on_click(long /*int*/ combo, boolean val);
+public static final void gtk_combo_box_set_focus_on_click(long /*int*/ combo, boolean val) {
 	lock.lock();
 	try {
 		_gtk_combo_box_set_focus_on_click(combo, val);
@@ -4282,8 +4282,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_set_popdown_strings(int /*long*/ combo, int /*long*/ strings);
-public static final void gtk_combo_set_popdown_strings(int /*long*/ combo, int /*long*/ strings) {
+public static final native void _gtk_combo_set_popdown_strings(long /*int*/ combo, long /*int*/ strings);
+public static final void gtk_combo_set_popdown_strings(long /*int*/ combo, long /*int*/ strings) {
 	lock.lock();
 	try {
 		_gtk_combo_set_popdown_strings(combo, strings);
@@ -4291,8 +4291,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_combo_box_entry_new_text();
-public static final int /*long*/ gtk_combo_box_entry_new_text() {
+public static final native long /*int*/ _gtk_combo_box_entry_new_text();
+public static final long /*int*/ gtk_combo_box_entry_new_text() {
 	lock.lock();
 	try {
 		return _gtk_combo_box_entry_new_text();
@@ -4300,8 +4300,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_combo_box_new_text();
-public static final int /*long*/ gtk_combo_box_new_text() {
+public static final native long /*int*/ _gtk_combo_box_new_text();
+public static final long /*int*/ gtk_combo_box_new_text() {
 	lock.lock();
 	try {
 		return _gtk_combo_box_new_text();
@@ -4309,8 +4309,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_insert_text(int /*long*/ combo_box, int position, byte[] text);
-public static final void gtk_combo_box_insert_text(int /*long*/ combo_box, int position, byte[] text) {
+public static final native void _gtk_combo_box_insert_text(long /*int*/ combo_box, int position, byte[] text);
+public static final void gtk_combo_box_insert_text(long /*int*/ combo_box, int position, byte[] text) {
 	lock.lock();
 	try {
 		_gtk_combo_box_insert_text(combo_box, position, text);
@@ -4318,8 +4318,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_remove_text(int /*long*/ combo_box, int position);
-public static final void gtk_combo_box_remove_text(int /*long*/ combo_box, int position) {
+public static final native void _gtk_combo_box_remove_text(long /*int*/ combo_box, int position);
+public static final void gtk_combo_box_remove_text(long /*int*/ combo_box, int position) {
 	lock.lock();
 	try {
 		_gtk_combo_box_remove_text(combo_box, position);
@@ -4327,8 +4327,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_combo_box_get_active(int /*long*/ combo_box);
-public static final int gtk_combo_box_get_active(int /*long*/ combo_box) {
+public static final native int _gtk_combo_box_get_active(long /*int*/ combo_box);
+public static final int gtk_combo_box_get_active(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		return _gtk_combo_box_get_active(combo_box);
@@ -4336,8 +4336,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_combo_box_get_model(int /*long*/ combo_box);
-public static final int /*long*/ gtk_combo_box_get_model(int /*long*/ combo_box) {
+public static final native long /*int*/ _gtk_combo_box_get_model(long /*int*/ combo_box);
+public static final long /*int*/ gtk_combo_box_get_model(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		return _gtk_combo_box_get_model(combo_box);
@@ -4345,8 +4345,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_set_active(int /*long*/ combo_box, int index);
-public static final void gtk_combo_box_set_active(int /*long*/ combo_box, int index) {
+public static final native void _gtk_combo_box_set_active(long /*int*/ combo_box, int index);
+public static final void gtk_combo_box_set_active(long /*int*/ combo_box, int index) {
 	lock.lock();
 	try {
 		_gtk_combo_box_set_active(combo_box, index);
@@ -4354,8 +4354,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_popup(int /*long*/ combo_box);
-public static final void gtk_combo_box_popup(int /*long*/ combo_box) {
+public static final native void _gtk_combo_box_popup(long /*int*/ combo_box);
+public static final void gtk_combo_box_popup(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		_gtk_combo_box_popup(combo_box);
@@ -4363,8 +4363,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_combo_box_popdown(int /*long*/ combo_box);
-public static final void gtk_combo_box_popdown(int /*long*/ combo_box) {
+public static final native void _gtk_combo_box_popdown(long /*int*/ combo_box);
+public static final void gtk_combo_box_popdown(long /*int*/ combo_box) {
 	lock.lock();
 	try {
 		_gtk_combo_box_popdown(combo_box);
@@ -4372,8 +4372,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_container_add(int /*long*/ container, int /*long*/ widget);
-public static final void gtk_container_add(int /*long*/ container, int /*long*/ widget) {
+public static final native void _gtk_container_add(long /*int*/ container, long /*int*/ widget);
+public static final void gtk_container_add(long /*int*/ container, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_container_add(container, widget);
@@ -4381,8 +4381,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_container_forall(int /*long*/ container, int /*long*/ callback, int /*long*/ callback_data);
-public static final void gtk_container_forall(int /*long*/ container, int /*long*/ callback, int /*long*/ callback_data) {
+public static final native void _gtk_container_forall(long /*int*/ container, long /*int*/ callback, long /*int*/ callback_data);
+public static final void gtk_container_forall(long /*int*/ container, long /*int*/ callback, long /*int*/ callback_data) {
 	lock.lock();
 	try {
 		_gtk_container_forall(container, callback, callback_data);
@@ -4390,8 +4390,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_container_get_border_width(int /*long*/ container);
-public static final int gtk_container_get_border_width(int /*long*/ container) {
+public static final native int _gtk_container_get_border_width(long /*int*/ container);
+public static final int gtk_container_get_border_width(long /*int*/ container) {
 	lock.lock();
 	try {
 		return _gtk_container_get_border_width(container);
@@ -4399,8 +4399,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_container_get_children(int /*long*/ container);
-public static final int /*long*/ gtk_container_get_children(int /*long*/ container) {
+public static final native long /*int*/ _gtk_container_get_children(long /*int*/ container);
+public static final long /*int*/ gtk_container_get_children(long /*int*/ container) {
 	lock.lock();
 	try {
 		return _gtk_container_get_children(container);
@@ -4408,8 +4408,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_container_remove(int /*long*/ container, int /*long*/ widget);
-public static final void gtk_container_remove(int /*long*/ container, int /*long*/ widget) {
+public static final native void _gtk_container_remove(long /*int*/ container, long /*int*/ widget);
+public static final void gtk_container_remove(long /*int*/ container, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_container_remove(container, widget);
@@ -4417,8 +4417,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_container_resize_children(int /*long*/ container);
-public static final void gtk_container_resize_children(int /*long*/ container) {
+public static final native void _gtk_container_resize_children(long /*int*/ container);
+public static final void gtk_container_resize_children(long /*int*/ container) {
 	lock.lock();
 	try {
 		_gtk_container_resize_children(container);
@@ -4426,8 +4426,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_container_set_border_width(int /*long*/ container, int border_width);
-public static final void gtk_container_set_border_width(int /*long*/ container, int border_width) {
+public static final native void _gtk_container_set_border_width(long /*int*/ container, int border_width);
+public static final void gtk_container_set_border_width(long /*int*/ container, int border_width) {
 	lock.lock();
 	try {
 		_gtk_container_set_border_width(container, border_width);
@@ -4435,8 +4435,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_dialog_add_button(int /*long*/ dialog, byte[]  button_text, int response_id);
-public static final int /*long*/ gtk_dialog_add_button(int /*long*/ dialog, byte[]  button_text, int response_id) {
+public static final native long /*int*/ _gtk_dialog_add_button(long /*int*/ dialog, byte[]  button_text, int response_id);
+public static final long /*int*/ gtk_dialog_add_button(long /*int*/ dialog, byte[]  button_text, int response_id) {
 	lock.lock();
 	try {
 		return _gtk_dialog_add_button(dialog, button_text, response_id);
@@ -4444,8 +4444,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_dialog_run(int /*long*/ dialog);
-public static final int gtk_dialog_run(int /*long*/ dialog) {
+public static final native int _gtk_dialog_run(long /*int*/ dialog);
+public static final int gtk_dialog_run(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_dialog_run(dialog);
@@ -4453,8 +4453,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_drag_begin(int /*long*/ widget, int /*long*/ targets, int actions, int button, int /*long*/ event);
-public static final int /*long*/ gtk_drag_begin(int /*long*/ widget, int /*long*/ targets, int actions, int button, int /*long*/ event) {
+public static final native long /*int*/ _gtk_drag_begin(long /*int*/ widget, long /*int*/ targets, int actions, int button, long /*int*/ event);
+public static final long /*int*/ gtk_drag_begin(long /*int*/ widget, long /*int*/ targets, int actions, int button, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_drag_begin(widget, targets, actions, button, event);
@@ -4462,8 +4462,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_drag_check_threshold(int /*long*/ widget, int start_x, int start_y, int current_x, int current_y);
-public static final boolean gtk_drag_check_threshold(int /*long*/ widget, int start_x, int start_y, int current_x, int current_y) {
+public static final native boolean _gtk_drag_check_threshold(long /*int*/ widget, int start_x, int start_y, int current_x, int current_y);
+public static final boolean gtk_drag_check_threshold(long /*int*/ widget, int start_x, int start_y, int current_x, int current_y) {
 	lock.lock();
 	try {
 		return _gtk_drag_check_threshold(widget, start_x, start_y, current_x, current_y);
@@ -4471,8 +4471,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_drag_dest_find_target(int /*long*/ widget, int /*long*/ context, int /*long*/ target_list);
-public static final int /*long*/ gtk_drag_dest_find_target(int /*long*/ widget, int /*long*/ context, int /*long*/ target_list) {
+public static final native long /*int*/ _gtk_drag_dest_find_target(long /*int*/ widget, long /*int*/ context, long /*int*/ target_list);
+public static final long /*int*/ gtk_drag_dest_find_target(long /*int*/ widget, long /*int*/ context, long /*int*/ target_list) {
 	lock.lock();
 	try {
 		return _gtk_drag_dest_find_target(widget, context, target_list);
@@ -4480,8 +4480,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_drag_dest_set(int /*long*/ widget, int flags, int /*long*/ targets, int n_targets, int actions);
-public static final void gtk_drag_dest_set(int /*long*/ widget, int flags, int /*long*/ targets, int n_targets, int actions) {
+public static final native void _gtk_drag_dest_set(long /*int*/ widget, int flags, long /*int*/ targets, int n_targets, int actions);
+public static final void gtk_drag_dest_set(long /*int*/ widget, int flags, long /*int*/ targets, int n_targets, int actions) {
 	lock.lock();
 	try {
 		_gtk_drag_dest_set(widget, flags, targets, n_targets, actions);
@@ -4489,8 +4489,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_drag_dest_unset(int /*long*/ widget);
-public static final void gtk_drag_dest_unset(int /*long*/ widget) {
+public static final native void _gtk_drag_dest_unset(long /*int*/ widget);
+public static final void gtk_drag_dest_unset(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_drag_dest_unset(widget);
@@ -4498,8 +4498,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_drag_finish(int /*long*/ context, boolean success, boolean delete, int time);
-public static final void gtk_drag_finish(int /*long*/ context, boolean success, boolean delete, int time) {
+public static final native void _gtk_drag_finish(long /*int*/ context, boolean success, boolean delete, int time);
+public static final void gtk_drag_finish(long /*int*/ context, boolean success, boolean delete, int time) {
 	lock.lock();
 	try {
 		_gtk_drag_finish(context, success, delete, time);
@@ -4507,8 +4507,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_drag_get_data(int /*long*/ widget, int /*long*/ context, int /*long*/ target, int time);
-public static final void gtk_drag_get_data(int /*long*/ widget, int /*long*/ context, int /*long*/ target, int time) {
+public static final native void _gtk_drag_get_data(long /*int*/ widget, long /*int*/ context, long /*int*/ target, int time);
+public static final void gtk_drag_get_data(long /*int*/ widget, long /*int*/ context, long /*int*/ target, int time) {
 	lock.lock();
 	try {
 		_gtk_drag_get_data(widget, context, target, time);
@@ -4516,8 +4516,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_drag_set_icon_pixbuf(int /*long*/ context, int /*long*/ pixbuf, int hot_x, int hot_y);
-public static final void gtk_drag_set_icon_pixbuf(int /*long*/ context, int /*long*/ pixbuf, int hot_x, int hot_y) {
+public static final native void _gtk_drag_set_icon_pixbuf(long /*int*/ context, long /*int*/ pixbuf, int hot_x, int hot_y);
+public static final void gtk_drag_set_icon_pixbuf(long /*int*/ context, long /*int*/ pixbuf, int hot_x, int hot_y) {
 	lock.lock();
 	try {
 		_gtk_drag_set_icon_pixbuf(context, pixbuf, hot_x, hot_y);
@@ -4525,8 +4525,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_drawing_area_new();
-public static final int /*long*/ gtk_drawing_area_new() {
+public static final native long /*int*/ _gtk_drawing_area_new();
+public static final long /*int*/ gtk_drawing_area_new() {
 	lock.lock();
 	try {
 		return _gtk_drawing_area_new();
@@ -4534,8 +4534,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_copy_clipboard(int /*long*/ editable);
-public static final void gtk_editable_copy_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_copy_clipboard(long /*int*/ editable);
+public static final void gtk_editable_copy_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_copy_clipboard(editable);
@@ -4543,8 +4543,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_cut_clipboard(int /*long*/ editable);
-public static final void gtk_editable_cut_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_cut_clipboard(long /*int*/ editable);
+public static final void gtk_editable_cut_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_cut_clipboard(editable);
@@ -4552,8 +4552,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_delete_selection(int /*long*/ editable);
-public static final void gtk_editable_delete_selection(int /*long*/ editable) {
+public static final native void _gtk_editable_delete_selection(long /*int*/ editable);
+public static final void gtk_editable_delete_selection(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_delete_selection(editable);
@@ -4561,8 +4561,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_delete_text(int /*long*/ editable, int start_pos, int end_pos);
-public static final void gtk_editable_delete_text(int /*long*/ editable, int start_pos, int end_pos) {
+public static final native void _gtk_editable_delete_text(long /*int*/ editable, int start_pos, int end_pos);
+public static final void gtk_editable_delete_text(long /*int*/ editable, int start_pos, int end_pos) {
 	lock.lock();
 	try {
 		_gtk_editable_delete_text(editable, start_pos, end_pos);
@@ -4570,8 +4570,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_editable_get_chars(int /*long*/ editable, int start_pos, int end_pos);
-public static final int /*long*/ gtk_editable_get_chars(int /*long*/ editable, int start_pos, int end_pos) {
+public static final native long /*int*/ _gtk_editable_get_chars(long /*int*/ editable, int start_pos, int end_pos);
+public static final long /*int*/ gtk_editable_get_chars(long /*int*/ editable, int start_pos, int end_pos) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_chars(editable, start_pos, end_pos);
@@ -4579,8 +4579,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_editable_get_editable(int /*long*/ editable);
-public static final boolean gtk_editable_get_editable(int /*long*/ editable) {
+public static final native boolean _gtk_editable_get_editable(long /*int*/ editable);
+public static final boolean gtk_editable_get_editable(long /*int*/ editable) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_editable(editable);
@@ -4588,8 +4588,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_editable_get_position(int /*long*/ editable);
-public static final int gtk_editable_get_position(int /*long*/ editable) {
+public static final native int _gtk_editable_get_position(long /*int*/ editable);
+public static final int gtk_editable_get_position(long /*int*/ editable) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_position(editable);
@@ -4597,8 +4597,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_editable_get_selection_bounds(int /*long*/ editable, int[] start, int[] end);
-public static final boolean gtk_editable_get_selection_bounds(int /*long*/ editable, int[] start, int[] end) {
+public static final native boolean _gtk_editable_get_selection_bounds(long /*int*/ editable, int[] start, int[] end);
+public static final boolean gtk_editable_get_selection_bounds(long /*int*/ editable, int[] start, int[] end) {
 	lock.lock();
 	try {
 		return _gtk_editable_get_selection_bounds(editable, start, end);
@@ -4606,8 +4606,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_insert_text(int /*long*/ editable, byte[] new_text, int new_text_length, int[] position);
-public static final void gtk_editable_insert_text(int /*long*/ editable, byte[] new_text, int new_text_length, int[] position) {
+public static final native void _gtk_editable_insert_text(long /*int*/ editable, byte[] new_text, int new_text_length, int[] position);
+public static final void gtk_editable_insert_text(long /*int*/ editable, byte[] new_text, int new_text_length, int[] position) {
 	lock.lock();
 	try {
 		_gtk_editable_insert_text(editable, new_text, new_text_length, position);
@@ -4615,8 +4615,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_paste_clipboard(int /*long*/ editable);
-public static final void gtk_editable_paste_clipboard(int /*long*/ editable) {
+public static final native void _gtk_editable_paste_clipboard(long /*int*/ editable);
+public static final void gtk_editable_paste_clipboard(long /*int*/ editable) {
 	lock.lock();
 	try {
 		_gtk_editable_paste_clipboard(editable);
@@ -4624,8 +4624,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_select_region(int /*long*/ editable, int start, int end);
-public static final void gtk_editable_select_region(int /*long*/ editable, int start, int end) {
+public static final native void _gtk_editable_select_region(long /*int*/ editable, int start, int end);
+public static final void gtk_editable_select_region(long /*int*/ editable, int start, int end) {
 	lock.lock();
 	try {
 		_gtk_editable_select_region(editable, start, end);
@@ -4633,8 +4633,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_set_editable(int /*long*/ entry, boolean editable);
-public static final void gtk_editable_set_editable(int /*long*/ entry, boolean editable) {
+public static final native void _gtk_editable_set_editable(long /*int*/ entry, boolean editable);
+public static final void gtk_editable_set_editable(long /*int*/ entry, boolean editable) {
 	lock.lock();
 	try {
 		_gtk_editable_set_editable(entry, editable);
@@ -4642,8 +4642,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_editable_set_position(int /*long*/ editable, int position);
-public static final void gtk_editable_set_position(int /*long*/ editable, int position) {
+public static final native void _gtk_editable_set_position(long /*int*/ editable, int position);
+public static final void gtk_editable_set_position(long /*int*/ editable, int position) {
 	lock.lock();
 	try {
 		_gtk_editable_set_position(editable, position);
@@ -4651,8 +4651,8 @@
 		lock.unlock();
 	}
 }
-public static final native char _gtk_entry_get_invisible_char(int /*long*/ entry);
-public static final char gtk_entry_get_invisible_char(int /*long*/ entry) {
+public static final native char _gtk_entry_get_invisible_char(long /*int*/ entry);
+public static final char gtk_entry_get_invisible_char(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_invisible_char(entry);
@@ -4660,8 +4660,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_entry_get_layout (int /*long*/ entry);
-public static final int /*long*/ gtk_entry_get_layout (int /*long*/ entry) {
+public static final native long /*int*/ _gtk_entry_get_layout (long /*int*/ entry);
+public static final long /*int*/ gtk_entry_get_layout (long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_layout(entry);
@@ -4669,8 +4669,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_get_layout_offsets (int /*long*/ layout, int[] x, int[] y);
-public static final void gtk_entry_get_layout_offsets (int /*long*/ layout, int[] x, int[] y) {
+public static final native void _gtk_entry_get_layout_offsets (long /*int*/ layout, int[] x, int[] y);
+public static final void gtk_entry_get_layout_offsets (long /*int*/ layout, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_entry_get_layout_offsets(layout, x, y);
@@ -4678,8 +4678,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_entry_text_index_to_layout_index (int /*long*/ entry, int index);
-public static final int gtk_entry_text_index_to_layout_index (int /*long*/ entry, int index) {
+public static final native int _gtk_entry_text_index_to_layout_index (long /*int*/ entry, int index);
+public static final int gtk_entry_text_index_to_layout_index (long /*int*/ entry, int index) {
 	lock.lock();
 	try {
 		return _gtk_entry_text_index_to_layout_index(entry, index);
@@ -4687,8 +4687,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_entry_get_max_length(int /*long*/ entry);
-public static final int gtk_entry_get_max_length(int /*long*/ entry) {
+public static final native int _gtk_entry_get_max_length(long /*int*/ entry);
+public static final int gtk_entry_get_max_length(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_max_length(entry);
@@ -4696,8 +4696,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_entry_get_text(int /*long*/ entry);
-public static final int /*long*/ gtk_entry_get_text(int /*long*/ entry) {
+public static final native long /*int*/ _gtk_entry_get_text(long /*int*/ entry);
+public static final long /*int*/ gtk_entry_get_text(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_text(entry);
@@ -4705,8 +4705,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _FcConfigAppFontAddFile(int /*long*/ config, byte[] file);
-public static final boolean FcConfigAppFontAddFile(int /*long*/ config, byte[] file) {
+public static final native boolean _FcConfigAppFontAddFile(long /*int*/ config, byte[] file);
+public static final boolean FcConfigAppFontAddFile(long /*int*/ config, byte[] file) {
 	lock.lock();
 	try {
 		return _FcConfigAppFontAddFile(config, file);
@@ -4714,8 +4714,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_entry_get_visibility(int /*long*/ entry);
-public static final boolean gtk_entry_get_visibility(int /*long*/ entry) {
+public static final native boolean _gtk_entry_get_visibility(long /*int*/ entry);
+public static final boolean gtk_entry_get_visibility(long /*int*/ entry) {
 	lock.lock();
 	try {
 		return _gtk_entry_get_visibility(entry);
@@ -4723,8 +4723,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_entry_new();
-public static final int /*long*/ gtk_entry_new() {
+public static final native long /*int*/ _gtk_entry_new();
+public static final long /*int*/ gtk_entry_new() {
 	lock.lock();
 	try {
 		return _gtk_entry_new();
@@ -4732,8 +4732,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_activates_default(int /*long*/ entry, boolean setting);
-public static final void gtk_entry_set_activates_default(int /*long*/ entry, boolean setting) {
+public static final native void _gtk_entry_set_activates_default(long /*int*/ entry, boolean setting);
+public static final void gtk_entry_set_activates_default(long /*int*/ entry, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_entry_set_activates_default(entry, setting);
@@ -4741,8 +4741,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_alignment(int /*long*/ entry, float xalign);
-public static final void gtk_entry_set_alignment(int /*long*/ entry, float xalign) {
+public static final native void _gtk_entry_set_alignment(long /*int*/ entry, float xalign);
+public static final void gtk_entry_set_alignment(long /*int*/ entry, float xalign) {
 	lock.lock();
 	try {
 		_gtk_entry_set_alignment(entry, xalign);
@@ -4750,8 +4750,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_has_frame(int /*long*/ entry, boolean setting);
-public static final void gtk_entry_set_has_frame(int /*long*/ entry, boolean setting) {
+public static final native void _gtk_entry_set_has_frame(long /*int*/ entry, boolean setting);
+public static final void gtk_entry_set_has_frame(long /*int*/ entry, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_entry_set_has_frame(entry, setting);
@@ -4759,8 +4759,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_invisible_char(int /*long*/ entry, char ch);
-public static final void gtk_entry_set_invisible_char(int /*long*/ entry, char ch) {
+public static final native void _gtk_entry_set_invisible_char(long /*int*/ entry, char ch);
+public static final void gtk_entry_set_invisible_char(long /*int*/ entry, char ch) {
 	lock.lock();
 	try {
 		_gtk_entry_set_invisible_char(entry, ch);
@@ -4768,8 +4768,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_max_length(int /*long*/ entry, int max);
-public static final void gtk_entry_set_max_length(int /*long*/ entry, int max) {
+public static final native void _gtk_entry_set_max_length(long /*int*/ entry, int max);
+public static final void gtk_entry_set_max_length(long /*int*/ entry, int max) {
 	lock.lock();
 	try {
 		_gtk_entry_set_max_length(entry, max);
@@ -4777,8 +4777,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_text(int /*long*/ entry, byte[] text);
-public static final void gtk_entry_set_text(int /*long*/ entry, byte[] text) {
+public static final native void _gtk_entry_set_text(long /*int*/ entry, byte[] text);
+public static final void gtk_entry_set_text(long /*int*/ entry, byte[] text) {
 	lock.lock();
 	try {
 		_gtk_entry_set_text(entry, text);
@@ -4786,8 +4786,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_entry_set_visibility(int /*long*/ entry, boolean visible);
-public static final void gtk_entry_set_visibility(int /*long*/ entry, boolean visible) {
+public static final native void _gtk_entry_set_visibility(long /*int*/ entry, boolean visible);
+public static final void gtk_entry_set_visibility(long /*int*/ entry, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_entry_set_visibility(entry, visible);
@@ -4804,8 +4804,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_expander_get_expanded(int /*long*/ expander);
-public static final boolean gtk_expander_get_expanded(int /*long*/ expander) {
+public static final native boolean _gtk_expander_get_expanded(long /*int*/ expander);
+public static final boolean gtk_expander_get_expanded(long /*int*/ expander) {
 	lock.lock();
 	try {
 		return _gtk_expander_get_expanded(expander);
@@ -4813,8 +4813,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_expander_get_label_widget(int /*long*/ expander);
-public static final int /*long*/ gtk_expander_get_label_widget(int /*long*/ expander) {
+public static final native long /*int*/ _gtk_expander_get_label_widget(long /*int*/ expander);
+public static final long /*int*/ gtk_expander_get_label_widget(long /*int*/ expander) {
 	lock.lock();
 	try {
 		return _gtk_expander_get_label_widget(expander);
@@ -4822,8 +4822,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_expander_new(byte[] label);
-public static final int /*long*/ gtk_expander_new(byte[] label) {
+public static final native long /*int*/ _gtk_expander_new(byte[] label);
+public static final long /*int*/ gtk_expander_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_expander_new(label);
@@ -4831,8 +4831,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_expander_set_expanded(int /*long*/ expander, boolean expanded);
-public static final void gtk_expander_set_expanded(int /*long*/ expander, boolean expanded) {
+public static final native void _gtk_expander_set_expanded(long /*int*/ expander, boolean expanded);
+public static final void gtk_expander_set_expanded(long /*int*/ expander, boolean expanded) {
 	lock.lock();
 	try {
 		_gtk_expander_set_expanded(expander, expanded);
@@ -4840,8 +4840,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_expander_set_label(int /*long*/ expander, byte[] label);
-public static final void gtk_expander_set_label(int /*long*/ expander, byte[] label) {
+public static final native void _gtk_expander_set_label(long /*int*/ expander, byte[] label);
+public static final void gtk_expander_set_label(long /*int*/ expander, byte[] label) {
 	lock.lock();
 	try {
 		_gtk_expander_set_label(expander, label);
@@ -4849,8 +4849,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_expander_set_label_widget(int /*long*/ expander, int /*long*/ label_widget);
-public static final void  gtk_expander_set_label_widget(int /*long*/ expander, int /*long*/ label_widget) {
+public static final native void _gtk_expander_set_label_widget(long /*int*/ expander, long /*int*/ label_widget);
+public static final void  gtk_expander_set_label_widget(long /*int*/ expander, long /*int*/ label_widget) {
 	lock.lock();
 	try {
 		_gtk_expander_set_label_widget(expander, label_widget);
@@ -4858,8 +4858,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_add_filter(int /*long*/ chooser, int /*long*/ filter);
-public static final void gtk_file_chooser_add_filter(int /*long*/ chooser, int /*long*/ filter) {
+public static final native void _gtk_file_chooser_add_filter(long /*int*/ chooser, long /*int*/ filter);
+public static final void gtk_file_chooser_add_filter(long /*int*/ chooser, long /*int*/ filter) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_add_filter(chooser, filter);
@@ -4867,8 +4867,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_chooser_dialog_new(byte[] title, int /*long*/ parent, int action, int /*long*/ first_button_text, int first_button_id, int /*long*/ second_button_text, int second_button_id, int /*long*/ terminator);
-public static final int /*long*/ gtk_file_chooser_dialog_new(byte[] title, int /*long*/ parent, int action, int /*long*/ first_button_text, int first_button_id, int /*long*/ second_button_text, int second_button_id, int /*long*/ terminator) {
+public static final native long /*int*/ _gtk_file_chooser_dialog_new(byte[] title, long /*int*/ parent, int action, long /*int*/ first_button_text, int first_button_id, long /*int*/ second_button_text, int second_button_id, long /*int*/ terminator);
+public static final long /*int*/ gtk_file_chooser_dialog_new(byte[] title, long /*int*/ parent, int action, long /*int*/ first_button_text, int first_button_id, long /*int*/ second_button_text, int second_button_id, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_dialog_new(title, parent, action, first_button_text, first_button_id, second_button_text, second_button_id, terminator);
@@ -4876,8 +4876,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_chooser_get_current_folder(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_current_folder(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_current_folder(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_current_folder(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_current_folder(chooser);
@@ -4885,8 +4885,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_chooser_get_filename(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filename(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filename(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filename(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filename(chooser);
@@ -4894,8 +4894,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_chooser_get_filenames(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filenames(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filenames(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filenames(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filenames(chooser);
@@ -4903,8 +4903,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_chooser_get_filter(int /*long*/ chooser);
-public static final int /*long*/ gtk_file_chooser_get_filter(int /*long*/ chooser) {
+public static final native long /*int*/ _gtk_file_chooser_get_filter(long /*int*/ chooser);
+public static final long /*int*/ gtk_file_chooser_get_filter(long /*int*/ chooser) {
 	lock.lock();
 	try {
 		return _gtk_file_chooser_get_filter(chooser);
@@ -4912,8 +4912,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_current_folder(int /*long*/ chooser, int /*long*/ filename);
-public static final void gtk_file_chooser_set_current_folder(int /*long*/ chooser, int /*long*/ filename) {
+public static final native void _gtk_file_chooser_set_current_folder(long /*int*/ chooser, long /*int*/ filename);
+public static final void gtk_file_chooser_set_current_folder(long /*int*/ chooser, long /*int*/ filename) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_current_folder(chooser, filename);
@@ -4921,8 +4921,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_current_name(int /*long*/ chooser, byte[] name);
-public static final void gtk_file_chooser_set_current_name(int /*long*/ chooser, byte[] name) {
+public static final native void _gtk_file_chooser_set_current_name(long /*int*/ chooser, byte[] name);
+public static final void gtk_file_chooser_set_current_name(long /*int*/ chooser, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_current_name(chooser, name);
@@ -4930,8 +4930,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_do_overwrite_confirmation(int /*long*/ chooser, boolean do_overwrite_confirmation);
-public static final void gtk_file_chooser_set_do_overwrite_confirmation(int /*long*/ chooser, boolean do_overwrite_confirmation) {
+public static final native void _gtk_file_chooser_set_do_overwrite_confirmation(long /*int*/ chooser, boolean do_overwrite_confirmation);
+public static final void gtk_file_chooser_set_do_overwrite_confirmation(long /*int*/ chooser, boolean do_overwrite_confirmation) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_do_overwrite_confirmation(chooser, do_overwrite_confirmation);
@@ -4939,8 +4939,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_extra_widget(int /*long*/ chooser, int /*long*/ extra_widget);
-public static final void gtk_file_chooser_set_extra_widget(int /*long*/ chooser, int /*long*/ extra_widget) {
+public static final native void _gtk_file_chooser_set_extra_widget(long /*int*/ chooser, long /*int*/ extra_widget);
+public static final void gtk_file_chooser_set_extra_widget(long /*int*/ chooser, long /*int*/ extra_widget) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_extra_widget(chooser, extra_widget);
@@ -4948,8 +4948,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_filename(int /*long*/ chooser, int /*long*/ name);
-public static final void gtk_file_chooser_set_filename(int /*long*/ chooser, int /*long*/ name) {
+public static final native void _gtk_file_chooser_set_filename(long /*int*/ chooser, long /*int*/ name);
+public static final void gtk_file_chooser_set_filename(long /*int*/ chooser, long /*int*/ name) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_filename(chooser, name);
@@ -4957,8 +4957,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_filter(int /*long*/ chooser, int /*long*/ filter);
-public static final void gtk_file_chooser_set_filter(int /*long*/ chooser, int /*long*/ filter) {
+public static final native void _gtk_file_chooser_set_filter(long /*int*/ chooser, long /*int*/ filter);
+public static final void gtk_file_chooser_set_filter(long /*int*/ chooser, long /*int*/ filter) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_filter(chooser, filter);
@@ -4966,8 +4966,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_chooser_set_select_multiple(int /*long*/ chooser, boolean select_multiple);
-public static final void gtk_file_chooser_set_select_multiple(int /*long*/ chooser, boolean select_multiple) {
+public static final native void _gtk_file_chooser_set_select_multiple(long /*int*/ chooser, boolean select_multiple);
+public static final void gtk_file_chooser_set_select_multiple(long /*int*/ chooser, boolean select_multiple) {
 	lock.lock();
 	try {
 		_gtk_file_chooser_set_select_multiple(chooser, select_multiple);
@@ -4975,8 +4975,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_filter_add_pattern(int /*long*/ filter, byte[] pattern);
-public static final void gtk_file_filter_add_pattern(int /*long*/ filter, byte[] pattern) {
+public static final native void _gtk_file_filter_add_pattern(long /*int*/ filter, byte[] pattern);
+public static final void gtk_file_filter_add_pattern(long /*int*/ filter, byte[] pattern) {
 	lock.lock();
 	try {
 		_gtk_file_filter_add_pattern(filter, pattern);
@@ -4984,8 +4984,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_filter_new();
-public static final int /*long*/ gtk_file_filter_new() {
+public static final native long /*int*/ _gtk_file_filter_new();
+public static final long /*int*/ gtk_file_filter_new() {
 	lock.lock();
 	try {
 		return _gtk_file_filter_new();
@@ -4993,8 +4993,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_filter_get_name(int /*long*/ filter);
-public static final int /*long*/ gtk_file_filter_get_name(int /*long*/ filter) {
+public static final native long /*int*/ _gtk_file_filter_get_name(long /*int*/ filter);
+public static final long /*int*/ gtk_file_filter_get_name(long /*int*/ filter) {
 	lock.lock();
 	try {
 		return _gtk_file_filter_get_name(filter);
@@ -5002,8 +5002,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_filter_set_name(int /*long*/ filter, byte[] name);
-public static final void gtk_file_filter_set_name(int /*long*/ filter, byte[] name) {
+public static final native void _gtk_file_filter_set_name(long /*int*/ filter, byte[] name);
+public static final void gtk_file_filter_set_name(long /*int*/ filter, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_file_filter_set_name(filter, name);
@@ -5011,8 +5011,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_selection_get_filename(int /*long*/ filesel);
-public static final int /*long*/ gtk_file_selection_get_filename(int /*long*/ filesel) {
+public static final native long /*int*/ _gtk_file_selection_get_filename(long /*int*/ filesel);
+public static final long /*int*/ gtk_file_selection_get_filename(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_get_filename(filesel);
@@ -5020,8 +5020,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_selection_get_selections(int /*long*/ filesel);
-public static final int /*long*/ gtk_file_selection_get_selections(int /*long*/ filesel) {
+public static final native long /*int*/ _gtk_file_selection_get_selections(long /*int*/ filesel);
+public static final long /*int*/ gtk_file_selection_get_selections(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_get_selections(filesel);
@@ -5029,8 +5029,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_selection_hide_fileop_buttons(int /*long*/ filesel);
-public static final void gtk_file_selection_hide_fileop_buttons(int /*long*/ filesel) {
+public static final native void _gtk_file_selection_hide_fileop_buttons(long /*int*/ filesel);
+public static final void gtk_file_selection_hide_fileop_buttons(long /*int*/ filesel) {
 	lock.lock();
 	try {
 		_gtk_file_selection_hide_fileop_buttons(filesel);
@@ -5038,8 +5038,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_file_selection_new(byte[] title);
-public static final int /*long*/ gtk_file_selection_new(byte[] title) {
+public static final native long /*int*/ _gtk_file_selection_new(byte[] title);
+public static final long /*int*/ gtk_file_selection_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_file_selection_new(title);
@@ -5047,8 +5047,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_selection_set_filename(int /*long*/ filesel, int /*long*/ filename);
-public static final void gtk_file_selection_set_filename(int /*long*/ filesel, int /*long*/ filename) {
+public static final native void _gtk_file_selection_set_filename(long /*int*/ filesel, long /*int*/ filename);
+public static final void gtk_file_selection_set_filename(long /*int*/ filesel, long /*int*/ filename) {
 	lock.lock();
 	try {
 		_gtk_file_selection_set_filename(filesel, filename);
@@ -5056,8 +5056,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_file_selection_set_select_multiple(int /*long*/ filesel, boolean select_multiple);
-public static final void gtk_file_selection_set_select_multiple(int /*long*/ filesel, boolean select_multiple) {
+public static final native void _gtk_file_selection_set_select_multiple(long /*int*/ filesel, boolean select_multiple);
+public static final void gtk_file_selection_set_select_multiple(long /*int*/ filesel, boolean select_multiple) {
 	lock.lock();
 	try {
 		_gtk_file_selection_set_select_multiple(filesel, select_multiple);
@@ -5065,8 +5065,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_fixed_move(int /*long*/ fixed, int /*long*/ widget, int x, int y);
-public static final void gtk_fixed_move(int /*long*/ fixed, int /*long*/ widget, int x, int y) {
+public static final native void _gtk_fixed_move(long /*int*/ fixed, long /*int*/ widget, int x, int y);
+public static final void gtk_fixed_move(long /*int*/ fixed, long /*int*/ widget, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_fixed_move(fixed, widget, x, y);
@@ -5074,8 +5074,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_fixed_new();
-public static final int /*long*/ gtk_fixed_new() {
+public static final native long /*int*/ _gtk_fixed_new();
+public static final long /*int*/ gtk_fixed_new() {
 	lock.lock();
 	try {
 		return _gtk_fixed_new();
@@ -5083,8 +5083,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_fixed_set_has_window(int /*long*/ fixed, boolean has_window);
-public static final void gtk_fixed_set_has_window(int /*long*/ fixed, boolean has_window) {
+public static final native void _gtk_fixed_set_has_window(long /*int*/ fixed, boolean has_window);
+public static final void gtk_fixed_set_has_window(long /*int*/ fixed, boolean has_window) {
 	lock.lock();
 	try {
 		_gtk_fixed_set_has_window(fixed, has_window);
@@ -5092,8 +5092,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_font_selection_dialog_get_font_name(int /*long*/ fsd);
-public static final int /*long*/ gtk_font_selection_dialog_get_font_name(int /*long*/ fsd) {
+public static final native long /*int*/ _gtk_font_selection_dialog_get_font_name(long /*int*/ fsd);
+public static final long /*int*/ gtk_font_selection_dialog_get_font_name(long /*int*/ fsd) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_get_font_name(fsd);
@@ -5101,8 +5101,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_font_selection_dialog_new(byte[] title);
-public static final int /*long*/ gtk_font_selection_dialog_new(byte[] title) {
+public static final native long /*int*/ _gtk_font_selection_dialog_new(byte[] title);
+public static final long /*int*/ gtk_font_selection_dialog_new(byte[] title) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_new(title);
@@ -5110,8 +5110,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_font_selection_dialog_set_font_name(int /*long*/ fsd, byte[] fontname);
-public static final boolean gtk_font_selection_dialog_set_font_name(int /*long*/ fsd, byte[] fontname) {
+public static final native boolean _gtk_font_selection_dialog_set_font_name(long /*int*/ fsd, byte[] fontname);
+public static final boolean gtk_font_selection_dialog_set_font_name(long /*int*/ fsd, byte[] fontname) {
 	lock.lock();
 	try {
 		return _gtk_font_selection_dialog_set_font_name(fsd, fontname);
@@ -5119,8 +5119,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_frame_new(byte[] label);
-public static final int /*long*/ gtk_frame_new(byte[] label) {
+public static final native long /*int*/ _gtk_frame_new(byte[] label);
+public static final long /*int*/ gtk_frame_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_frame_new(label);
@@ -5128,8 +5128,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_frame_get_label_widget(int /*long*/ frame);
-public static final int /*long*/ gtk_frame_get_label_widget(int /*long*/ frame) {
+public static final native long /*int*/ _gtk_frame_get_label_widget(long /*int*/ frame);
+public static final long /*int*/ gtk_frame_get_label_widget(long /*int*/ frame) {
 	lock.lock();
 	try {
 		return _gtk_frame_get_label_widget(frame);
@@ -5137,8 +5137,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_frame_set_label(int /*long*/ frame, byte[] label);
-public static final void gtk_frame_set_label(int /*long*/ frame, byte[] label) {
+public static final native void _gtk_frame_set_label(long /*int*/ frame, byte[] label);
+public static final void gtk_frame_set_label(long /*int*/ frame, byte[] label) {
 	lock.lock();
 	try {
 		_gtk_frame_set_label(frame, label);
@@ -5146,8 +5146,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_frame_set_label_widget(int /*long*/ frame, int /*long*/ label_widget);
-public static final void gtk_frame_set_label_widget(int /*long*/ frame, int /*long*/ label_widget) {
+public static final native void _gtk_frame_set_label_widget(long /*int*/ frame, long /*int*/ label_widget);
+public static final void gtk_frame_set_label_widget(long /*int*/ frame, long /*int*/ label_widget) {
 	lock.lock();
 	try {
 		_gtk_frame_set_label_widget(frame, label_widget);
@@ -5155,8 +5155,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_frame_set_shadow_type(int /*long*/ frame, int type);
-public static final void gtk_frame_set_shadow_type(int /*long*/ frame, int type) {
+public static final native void _gtk_frame_set_shadow_type(long /*int*/ frame, int type);
+public static final void gtk_frame_set_shadow_type(long /*int*/ frame, int type) {
 	lock.lock();
 	try {
 		_gtk_frame_set_shadow_type(frame, type);
@@ -5164,8 +5164,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_get_current_event();
-public static final int /*long*/ gtk_get_current_event() {
+public static final native long /*int*/ _gtk_get_current_event();
+public static final long /*int*/ gtk_get_current_event() {
 	lock.lock();
 	try {
 		return _gtk_get_current_event();
@@ -5191,8 +5191,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_get_default_language();
-public static final int /*long*/ gtk_get_default_language() {
+public static final native long /*int*/ _gtk_get_default_language();
+public static final long /*int*/ gtk_get_default_language() {
 	lock.lock();
 	try {
 		return _gtk_get_default_language();
@@ -5200,8 +5200,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_get_event_widget(int /*long*/ event);
-public static final int /*long*/ gtk_get_event_widget(int /*long*/ event) {
+public static final native long /*int*/ _gtk_get_event_widget(long /*int*/ event);
+public static final long /*int*/ gtk_get_event_widget(long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_get_event_widget(event);
@@ -5209,8 +5209,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_grab_add(int /*long*/ widget);
-public static final void gtk_grab_add(int /*long*/ widget) {
+public static final native void _gtk_grab_add(long /*int*/ widget);
+public static final void gtk_grab_add(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_grab_add(widget);
@@ -5218,8 +5218,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_grab_get_current();
-public static final int /*long*/ gtk_grab_get_current() {
+public static final native long /*int*/ _gtk_grab_get_current();
+public static final long /*int*/ gtk_grab_get_current() {
 	lock.lock();
 	try {
 		return _gtk_grab_get_current();
@@ -5227,8 +5227,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_grab_remove(int /*long*/ widget);
-public static final void gtk_grab_remove(int /*long*/ widget) {
+public static final native void _gtk_grab_remove(long /*int*/ widget);
+public static final void gtk_grab_remove(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_grab_remove(widget);
@@ -5236,8 +5236,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_hbox_new(boolean homogeneous, int spacing);
-public static final int /*long*/ gtk_hbox_new(boolean homogeneous, int spacing) {
+public static final native long /*int*/ _gtk_hbox_new(boolean homogeneous, int spacing);
+public static final long /*int*/ gtk_hbox_new(boolean homogeneous, int spacing) {
 	lock.lock();
 	try {
 		return _gtk_hbox_new(homogeneous, spacing);
@@ -5245,8 +5245,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_hscale_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_hscale_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_hscale_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_hscale_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_hscale_new(adjustment);
@@ -5254,8 +5254,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_hscrollbar_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_hscrollbar_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_hscrollbar_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_hscrollbar_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_hscrollbar_new(adjustment);
@@ -5263,8 +5263,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_hseparator_new();
-public static final int /*long*/ gtk_hseparator_new() {
+public static final native long /*int*/ _gtk_hseparator_new();
+public static final long /*int*/ gtk_hseparator_new() {
 	lock.lock();
 	try {
 		return _gtk_hseparator_new();
@@ -5272,8 +5272,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_icon_factory_lookup_default(byte[] stock_id);
-public static final int /*long*/ gtk_icon_factory_lookup_default(byte[] stock_id) {
+public static final native long /*int*/ _gtk_icon_factory_lookup_default(byte[] stock_id);
+public static final long /*int*/ gtk_icon_factory_lookup_default(byte[] stock_id) {
 	lock.lock();
 	try {
 		return _gtk_icon_factory_lookup_default(stock_id);
@@ -5281,8 +5281,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_icon_source_free(int /*long*/ source);
-public static final void gtk_icon_source_free(int /*long*/ source) {
+public static final native void _gtk_icon_source_free(long /*int*/ source);
+public static final void gtk_icon_source_free(long /*int*/ source) {
 	lock.lock();
 	try {
 		_gtk_icon_source_free(source);
@@ -5290,8 +5290,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_icon_source_new();
-public static final int /*long*/ gtk_icon_source_new() {
+public static final native long /*int*/ _gtk_icon_source_new();
+public static final long /*int*/ gtk_icon_source_new() {
 	lock.lock();
 	try {
 		return _gtk_icon_source_new();
@@ -5299,8 +5299,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_icon_source_set_pixbuf(int /*long*/ source, int /*long*/ pixbuf);
-public static final void gtk_icon_source_set_pixbuf(int /*long*/ source, int /*long*/ pixbuf) {
+public static final native void _gtk_icon_source_set_pixbuf(long /*int*/ source, long /*int*/ pixbuf);
+public static final void gtk_icon_source_set_pixbuf(long /*int*/ source, long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		_gtk_icon_source_set_pixbuf(source, pixbuf);
@@ -5308,8 +5308,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_icon_set_render_icon(int /*long*/ icon_set, int /*long*/ style, int direction, int state, int size, int /*long*/ widget, int /*long*/ detail);
-public static final int /*long*/ gtk_icon_set_render_icon(int /*long*/ icon_set, int /*long*/ style, int direction, int state, int size, int /*long*/ widget, int /*long*/ detail) {
+public static final native long /*int*/ _gtk_icon_set_render_icon(long /*int*/ icon_set, long /*int*/ style, int direction, int state, int size, long /*int*/ widget, long /*int*/ detail);
+public static final long /*int*/ gtk_icon_set_render_icon(long /*int*/ icon_set, long /*int*/ style, int direction, int state, int size, long /*int*/ widget, long /*int*/ detail) {
 	lock.lock();
 	try {
 		return _gtk_icon_set_render_icon(icon_set, style, direction, state, size, widget, detail);
@@ -5317,8 +5317,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_im_context_filter_keypress(int /*long*/ context, int /*long*/ event);
-public static final boolean gtk_im_context_filter_keypress(int /*long*/ context, int /*long*/ event) {
+public static final native boolean _gtk_im_context_filter_keypress(long /*int*/ context, long /*int*/ event);
+public static final boolean gtk_im_context_filter_keypress(long /*int*/ context, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_im_context_filter_keypress(context, event);
@@ -5326,8 +5326,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_focus_in(int /*long*/ context);
-public static final void gtk_im_context_focus_in(int /*long*/ context) {
+public static final native void _gtk_im_context_focus_in(long /*int*/ context);
+public static final void gtk_im_context_focus_in(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_focus_in(context);
@@ -5335,8 +5335,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_focus_out(int /*long*/ context);
-public static final void gtk_im_context_focus_out(int /*long*/ context) {
+public static final native void _gtk_im_context_focus_out(long /*int*/ context);
+public static final void gtk_im_context_focus_out(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_focus_out(context);
@@ -5344,8 +5344,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_get_preedit_string(int /*long*/ context, int /*long*/[] str, int /*long*/[] attrs, int[] cursor_pos);
-public static final void gtk_im_context_get_preedit_string(int /*long*/ context, int /*long*/[] str, int /*long*/[] attrs, int[] cursor_pos) {
+public static final native void _gtk_im_context_get_preedit_string(long /*int*/ context, long /*int*/[] str, long /*int*/[] attrs, int[] cursor_pos);
+public static final void gtk_im_context_get_preedit_string(long /*int*/ context, long /*int*/[] str, long /*int*/[] attrs, int[] cursor_pos) {
 	lock.lock();
 	try {
 		_gtk_im_context_get_preedit_string(context, str, attrs, cursor_pos);
@@ -5353,8 +5353,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_im_context_get_type();
-public static final int /*long*/ gtk_im_context_get_type() {
+public static final native long /*int*/ _gtk_im_context_get_type();
+public static final long /*int*/ gtk_im_context_get_type() {
 	lock.lock();
 	try {
 		return _gtk_im_context_get_type();
@@ -5362,8 +5362,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_reset(int /*long*/ context);
-public static final void gtk_im_context_reset(int /*long*/ context) {
+public static final native void _gtk_im_context_reset(long /*int*/ context);
+public static final void gtk_im_context_reset(long /*int*/ context) {
 	lock.lock();
 	try {
 		_gtk_im_context_reset(context);
@@ -5371,8 +5371,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_set_client_window(int /*long*/ context, int /*long*/ window);
-public static final void gtk_im_context_set_client_window(int /*long*/ context, int /*long*/ window) {
+public static final native void _gtk_im_context_set_client_window(long /*int*/ context, long /*int*/ window);
+public static final void gtk_im_context_set_client_window(long /*int*/ context, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_im_context_set_client_window(context, window);
@@ -5380,8 +5380,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_context_set_cursor_location(int /*long*/ context, GdkRectangle area);
-public static final void gtk_im_context_set_cursor_location(int /*long*/ context, GdkRectangle area) {
+public static final native void _gtk_im_context_set_cursor_location(long /*int*/ context, GdkRectangle area);
+public static final void gtk_im_context_set_cursor_location(long /*int*/ context, GdkRectangle area) {
 	lock.lock();
 	try {
 		_gtk_im_context_set_cursor_location(context, area);
@@ -5389,8 +5389,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_im_multicontext_append_menuitems (int /*long*/ context, int /*long*/ menushell);
-public static final void gtk_im_multicontext_append_menuitems (int /*long*/ context, int /*long*/ menushell) {
+public static final native void _gtk_im_multicontext_append_menuitems (long /*int*/ context, long /*int*/ menushell);
+public static final void gtk_im_multicontext_append_menuitems (long /*int*/ context, long /*int*/ menushell) {
 	lock.lock();
 	try {
 		_gtk_im_multicontext_append_menuitems(context, menushell);
@@ -5398,8 +5398,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_im_multicontext_new();
-public static final int /*long*/ gtk_im_multicontext_new() {
+public static final native long /*int*/ _gtk_im_multicontext_new();
+public static final long /*int*/ gtk_im_multicontext_new() {
 	lock.lock();
 	try {
 		return _gtk_im_multicontext_new();
@@ -5407,8 +5407,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_image_menu_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_image_menu_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_image_menu_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_image_menu_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_image_menu_item_new_with_label(label);
@@ -5416,8 +5416,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_image_menu_item_set_image(int /*long*/ menu_item, int /*long*/ image);
-public static final void gtk_image_menu_item_set_image(int /*long*/ menu_item, int /*long*/ image) {
+public static final native void _gtk_image_menu_item_set_image(long /*int*/ menu_item, long /*int*/ image);
+public static final void gtk_image_menu_item_set_image(long /*int*/ menu_item, long /*int*/ image) {
 	lock.lock();
 	try {
 		_gtk_image_menu_item_set_image(menu_item, image);
@@ -5425,8 +5425,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_image_new();
-public static final int /*long*/ gtk_image_new() {
+public static final native long /*int*/ _gtk_image_new();
+public static final long /*int*/ gtk_image_new() {
 	lock.lock();
 	try {
 		return _gtk_image_new();
@@ -5434,8 +5434,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_image_new_from_pixbuf(int /*long*/ pixbuf); 
-public static final int /*long*/ gtk_image_new_from_pixbuf(int /*long*/ pixbuf) {
+public static final native long /*int*/ _gtk_image_new_from_pixbuf(long /*int*/ pixbuf); 
+public static final long /*int*/ gtk_image_new_from_pixbuf(long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		return _gtk_image_new_from_pixbuf(pixbuf);
@@ -5443,8 +5443,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_image_new_from_pixmap(int /*long*/ pixmap, int /*long*/ mask);
-public static final int /*long*/ gtk_image_new_from_pixmap(int /*long*/ pixmap, int /*long*/ mask) {
+public static final native long /*int*/ _gtk_image_new_from_pixmap(long /*int*/ pixmap, long /*int*/ mask);
+public static final long /*int*/ gtk_image_new_from_pixmap(long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		return _gtk_image_new_from_pixmap(pixmap, mask);
@@ -5452,8 +5452,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_image_set_from_pixbuf(int /*long*/ image, int /*long*/ pixbuf);
-public static final void gtk_image_set_from_pixbuf(int /*long*/ image, int /*long*/ pixbuf) {
+public static final native void _gtk_image_set_from_pixbuf(long /*int*/ image, long /*int*/ pixbuf);
+public static final void gtk_image_set_from_pixbuf(long /*int*/ image, long /*int*/ pixbuf) {
 	lock.lock();
 	try {
 		_gtk_image_set_from_pixbuf(image, pixbuf);
@@ -5461,8 +5461,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_image_set_from_pixmap(int /*long*/ image, int /*long*/ pixmap, int /*long*/ mask);
-public static final void gtk_image_set_from_pixmap(int /*long*/ image, int /*long*/ pixmap, int /*long*/ mask) {
+public static final native void _gtk_image_set_from_pixmap(long /*int*/ image, long /*int*/ pixmap, long /*int*/ mask);
+public static final void gtk_image_set_from_pixmap(long /*int*/ image, long /*int*/ pixmap, long /*int*/ mask) {
 	lock.lock();
 	try {
 		_gtk_image_set_from_pixmap(image, pixmap, mask);
@@ -5470,8 +5470,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_init_check(int /*long*/[] argc, int /*long*/[] argv);
-public static final boolean gtk_init_check(int /*long*/[] argc, int /*long*/[] argv) {
+public static final native boolean _gtk_init_check(long /*int*/[] argc, long /*int*/[] argv);
+public static final boolean gtk_init_check(long /*int*/[] argc, long /*int*/[] argv) {
 	lock.lock();
 	try {
 		return _gtk_init_check(argc, argv);
@@ -5479,8 +5479,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_label_get_layout(int /*long*/ label);
-public static final int /*long*/ gtk_label_get_layout(int /*long*/ label) {
+public static final native long /*int*/ _gtk_label_get_layout(long /*int*/ label);
+public static final long /*int*/ gtk_label_get_layout(long /*int*/ label) {
 	lock.lock();
 	try {
 		return _gtk_label_get_layout(label);
@@ -5488,8 +5488,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_label_get_mnemonic_keyval(int /*long*/ label);
-public static final int gtk_label_get_mnemonic_keyval(int /*long*/ label) {
+public static final native int _gtk_label_get_mnemonic_keyval(long /*int*/ label);
+public static final int gtk_label_get_mnemonic_keyval(long /*int*/ label) {
 	lock.lock();
 	try {
 		return _gtk_label_get_mnemonic_keyval(label);
@@ -5497,8 +5497,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_label_new(byte[] label);
-public static final int /*long*/ gtk_label_new(byte[] label) {
+public static final native long /*int*/ _gtk_label_new(byte[] label);
+public static final long /*int*/ gtk_label_new(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_label_new(label);
@@ -5506,8 +5506,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_label_new_with_mnemonic(byte[] str);
-public static final int /*long*/ gtk_label_new_with_mnemonic(byte[] str) {
+public static final native long /*int*/ _gtk_label_new_with_mnemonic(byte[] str);
+public static final long /*int*/ gtk_label_new_with_mnemonic(byte[] str) {
 	lock.lock();
 	try {
 		return _gtk_label_new_with_mnemonic(str);
@@ -5515,8 +5515,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_attributes(int /*long*/ label, int /*long*/ attrs);
-public static final void gtk_label_set_attributes(int /*long*/ label, int /*long*/ attrs) {
+public static final native void _gtk_label_set_attributes(long /*int*/ label, long /*int*/ attrs);
+public static final void gtk_label_set_attributes(long /*int*/ label, long /*int*/ attrs) {
 	lock.lock();
 	try {
 		_gtk_label_set_attributes(label, attrs);
@@ -5524,8 +5524,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_justify(int /*long*/ label, int jtype);
-public static final void gtk_label_set_justify(int /*long*/ label, int jtype) {
+public static final native void _gtk_label_set_justify(long /*int*/ label, int jtype);
+public static final void gtk_label_set_justify(long /*int*/ label, int jtype) {
 	lock.lock();
 	try {
 		_gtk_label_set_justify(label, jtype);
@@ -5533,8 +5533,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_line_wrap(int /*long*/ label, boolean wrap);
-public static final void gtk_label_set_line_wrap(int /*long*/ label, boolean wrap) {
+public static final native void _gtk_label_set_line_wrap(long /*int*/ label, boolean wrap);
+public static final void gtk_label_set_line_wrap(long /*int*/ label, boolean wrap) {
 	lock.lock();
 	try {
 		_gtk_label_set_line_wrap(label, wrap);
@@ -5542,8 +5542,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_line_wrap_mode(int /*long*/ label, int wrap_mode);
-public static final void gtk_label_set_line_wrap_mode(int /*long*/ label, int wrap_mode) {
+public static final native void _gtk_label_set_line_wrap_mode(long /*int*/ label, int wrap_mode);
+public static final void gtk_label_set_line_wrap_mode(long /*int*/ label, int wrap_mode) {
 	lock.lock();
 	try {
 		_gtk_label_set_line_wrap_mode(label, wrap_mode);
@@ -5551,8 +5551,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_text(int /*long*/ label, int /*long*/ str);
-public static final void gtk_label_set_text(int /*long*/ label, int /*long*/ str) {
+public static final native void _gtk_label_set_text(long /*int*/ label, long /*int*/ str);
+public static final void gtk_label_set_text(long /*int*/ label, long /*int*/ str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text(label, str);
@@ -5560,8 +5560,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_text(int /*long*/ label, byte[] str);
-public static final void gtk_label_set_text(int /*long*/ label, byte[] str) {
+public static final native void _gtk_label_set_text(long /*int*/ label, byte[] str);
+public static final void gtk_label_set_text(long /*int*/ label, byte[] str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text(label, str);
@@ -5569,8 +5569,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_label_set_text_with_mnemonic(int /*long*/ label, byte[] str);
-public static final void gtk_label_set_text_with_mnemonic(int /*long*/ label, byte[] str) {
+public static final native void _gtk_label_set_text_with_mnemonic(long /*int*/ label, byte[] str);
+public static final void gtk_label_set_text_with_mnemonic(long /*int*/ label, byte[] str) {
 	lock.lock();
 	try {
 		_gtk_label_set_text_with_mnemonic(label, str);
@@ -5578,8 +5578,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_append_items(int /*long*/ list, int /*long*/ items);
-public static final void gtk_list_append_items(int /*long*/ list, int /*long*/ items) {
+public static final native void _gtk_list_append_items(long /*int*/ list, long /*int*/ items);
+public static final void gtk_list_append_items(long /*int*/ list, long /*int*/ items) {
 	lock.lock();
 	try {
 		_gtk_list_append_items(list, items);
@@ -5587,8 +5587,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_clear_items(int /*long*/ list, int start, int end);
-public static final void gtk_list_clear_items(int /*long*/ list, int start, int end) {
+public static final native void _gtk_list_clear_items(long /*int*/ list, int start, int end);
+public static final void gtk_list_clear_items(long /*int*/ list, int start, int end) {
 	lock.lock();
 	try {
 		_gtk_list_clear_items(list, start, end);
@@ -5596,8 +5596,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_insert_items(int /*long*/ list, int /*long*/ items, int position);
-public static final void gtk_list_insert_items(int /*long*/ list, int /*long*/ items, int position) {
+public static final native void _gtk_list_insert_items(long /*int*/ list, long /*int*/ items, int position);
+public static final void gtk_list_insert_items(long /*int*/ list, long /*int*/ items, int position) {
 	lock.lock();
 	try {
 		_gtk_list_insert_items(list, items, position);
@@ -5605,8 +5605,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_list_item_new_with_label(byte[] label);
-public static final int /*long*/ gtk_list_item_new_with_label(byte[] label) {
+public static final native long /*int*/ _gtk_list_item_new_with_label(byte[] label);
+public static final long /*int*/ gtk_list_item_new_with_label(byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_list_item_new_with_label(label);
@@ -5614,8 +5614,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_remove_items(int /*long*/ list, int /*long*/ items);
-public static final void gtk_list_remove_items(int /*long*/ list, int /*long*/ items) {
+public static final native void _gtk_list_remove_items(long /*int*/ list, long /*int*/ items);
+public static final void gtk_list_remove_items(long /*int*/ list, long /*int*/ items) {
 	lock.lock();
 	try {
 		_gtk_list_remove_items(list, items);
@@ -5623,8 +5623,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_select_item(int /*long*/ list, int item);
-public static final void gtk_list_select_item(int /*long*/ list, int item) {
+public static final native void _gtk_list_select_item(long /*int*/ list, int item);
+public static final void gtk_list_select_item(long /*int*/ list, int item) {
 	lock.lock();
 	try {
 		_gtk_list_select_item(list, item);
@@ -5632,8 +5632,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_unselect_all(int /*long*/ list);
-public static final void gtk_list_unselect_all(int /*long*/ list) {
+public static final native void _gtk_list_unselect_all(long /*int*/ list);
+public static final void gtk_list_unselect_all(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gtk_list_unselect_all(list);
@@ -5641,8 +5641,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_unselect_item(int /*long*/ list, int item);
-public static final void gtk_list_unselect_item(int /*long*/ list, int item) {
+public static final native void _gtk_list_unselect_item(long /*int*/ list, int item);
+public static final void gtk_list_unselect_item(long /*int*/ list, int item) {
 	lock.lock();
 	try {
 		_gtk_list_unselect_item(list, item);
@@ -5650,8 +5650,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_append(int /*long*/ list_store, int /*long*/ iter);
-public static final void gtk_list_store_append(int /*long*/ list_store, int /*long*/ iter) {
+public static final native void _gtk_list_store_append(long /*int*/ list_store, long /*int*/ iter);
+public static final void gtk_list_store_append(long /*int*/ list_store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_list_store_append(list_store, iter);
@@ -5659,8 +5659,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_clear(int /*long*/ store);
-public static final void gtk_list_store_clear(int /*long*/ store) {
+public static final native void _gtk_list_store_clear(long /*int*/ store);
+public static final void gtk_list_store_clear(long /*int*/ store) {
 	lock.lock();
 	try {
 		_gtk_list_store_clear(store);
@@ -5668,8 +5668,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_insert(int /*long*/ list_store, int /*long*/ iter, int position);
-public static final void gtk_list_store_insert(int /*long*/ list_store, int /*long*/ iter, int position) {
+public static final native void _gtk_list_store_insert(long /*int*/ list_store, long /*int*/ iter, int position);
+public static final void gtk_list_store_insert(long /*int*/ list_store, long /*int*/ iter, int position) {
 	lock.lock();
 	try {
 		_gtk_list_store_insert(list_store, iter, position);
@@ -5677,8 +5677,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_list_store_newv(int numColumns, int /*long*/[] types);
-public static final int /*long*/ gtk_list_store_newv(int numColumns, int /*long*/[] types) {
+public static final native long /*int*/ _gtk_list_store_newv(int numColumns, long /*int*/[] types);
+public static final long /*int*/ gtk_list_store_newv(int numColumns, long /*int*/[] types) {
 	lock.lock();
 	try {
 		return _gtk_list_store_newv(numColumns, types);
@@ -5686,8 +5686,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_remove(int /*long*/ list_store, int /*long*/ iter);
-public static final void gtk_list_store_remove(int /*long*/ list_store, int /*long*/ iter) {
+public static final native void _gtk_list_store_remove(long /*int*/ list_store, long /*int*/ iter);
+public static final void gtk_list_store_remove(long /*int*/ list_store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_list_store_remove(list_store, iter);
@@ -5695,8 +5695,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -5704,8 +5704,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -5713,8 +5713,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -5722,8 +5722,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -5731,8 +5731,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator);
-public static final void gtk_list_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator) {
+public static final native void _gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator);
+public static final void gtk_list_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_list_store_set(store, iter, column, value, terminator);
@@ -5785,8 +5785,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_main_do_event(int /*long*/ event);
-public static final void gtk_main_do_event(int /*long*/ event) {
+public static final native void _gtk_main_do_event(long /*int*/ event);
+public static final void gtk_main_do_event(long /*int*/ event) {
 	lock.lock();
 	try {
 		_gtk_main_do_event(event);
@@ -5794,8 +5794,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_menu_bar_new();
-public static final int /*long*/ gtk_menu_bar_new() {
+public static final native long /*int*/ _gtk_menu_bar_new();
+public static final long /*int*/ gtk_menu_bar_new() {
 	lock.lock();
 	try {
 		return _gtk_menu_bar_new();
@@ -5803,8 +5803,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_item_remove_submenu(int /*long*/ menu_item);
-public static final void gtk_menu_item_remove_submenu(int /*long*/ menu_item) {
+public static final native void _gtk_menu_item_remove_submenu(long /*int*/ menu_item);
+public static final void gtk_menu_item_remove_submenu(long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		_gtk_menu_item_remove_submenu(menu_item);
@@ -5812,8 +5812,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_menu_item_get_submenu(int /*long*/ menu_item);
-public static final int /*long*/ gtk_menu_item_get_submenu(int /*long*/ menu_item) {
+public static final native long /*int*/ _gtk_menu_item_get_submenu(long /*int*/ menu_item);
+public static final long /*int*/ gtk_menu_item_get_submenu(long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		return _gtk_menu_item_get_submenu(menu_item);
@@ -5821,8 +5821,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_item_set_submenu(int /*long*/ menu_item, int /*long*/ submenu);
-public static final void gtk_menu_item_set_submenu(int /*long*/ menu_item, int /*long*/ submenu) {
+public static final native void _gtk_menu_item_set_submenu(long /*int*/ menu_item, long /*int*/ submenu);
+public static final void gtk_menu_item_set_submenu(long /*int*/ menu_item, long /*int*/ submenu) {
 	lock.lock();
 	try {
 		_gtk_menu_item_set_submenu(menu_item, submenu);
@@ -5830,8 +5830,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_menu_new();
-public static final int /*long*/ gtk_menu_new() {
+public static final native long /*int*/ _gtk_menu_new();
+public static final long /*int*/ gtk_menu_new() {
 	lock.lock();
 	try {
 		return _gtk_menu_new();
@@ -5839,8 +5839,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_popdown(int /*long*/ menu);
-public static final void gtk_menu_popdown(int /*long*/ menu) {
+public static final native void _gtk_menu_popdown(long /*int*/ menu);
+public static final void gtk_menu_popdown(long /*int*/ menu) {
 	lock.lock();
 	try {
 		_gtk_menu_popdown(menu);
@@ -5848,8 +5848,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_popup(int /*long*/ menu, int /*long*/ parent_menu_shell, int /*long*/ parent_menu_item, int /*long*/ func, int /*long*/ data, int button, int activate_time);
-public static final void gtk_menu_popup(int /*long*/ menu, int /*long*/ parent_menu_shell, int /*long*/ parent_menu_item, int /*long*/ func, int /*long*/ data, int button, int activate_time) {
+public static final native void _gtk_menu_popup(long /*int*/ menu, long /*int*/ parent_menu_shell, long /*int*/ parent_menu_item, long /*int*/ func, long /*int*/ data, int button, int activate_time);
+public static final void gtk_menu_popup(long /*int*/ menu, long /*int*/ parent_menu_shell, long /*int*/ parent_menu_item, long /*int*/ func, long /*int*/ data, int button, int activate_time) {
 	lock.lock();
 	try {
 		_gtk_menu_popup(menu, parent_menu_shell, parent_menu_item, func, data, button, activate_time);
@@ -5857,8 +5857,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_shell_deactivate(int /*long*/ menu_shell);
-public static final void gtk_menu_shell_deactivate(int /*long*/ menu_shell) {
+public static final native void _gtk_menu_shell_deactivate(long /*int*/ menu_shell);
+public static final void gtk_menu_shell_deactivate(long /*int*/ menu_shell) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_deactivate(menu_shell);
@@ -5866,8 +5866,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_shell_insert(int /*long*/ menu_shell, int /*long*/ child, int position);
-public static final void gtk_menu_shell_insert(int /*long*/ menu_shell, int /*long*/ child, int position) {
+public static final native void _gtk_menu_shell_insert(long /*int*/ menu_shell, long /*int*/ child, int position);
+public static final void gtk_menu_shell_insert(long /*int*/ menu_shell, long /*int*/ child, int position) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_insert(menu_shell, child, position);
@@ -5875,8 +5875,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_shell_select_item(int /*long*/ menu_shell, int /*long*/ menu_item);
-public static final void gtk_menu_shell_select_item(int /*long*/ menu_shell, int /*long*/ menu_item) {
+public static final native void _gtk_menu_shell_select_item(long /*int*/ menu_shell, long /*int*/ menu_item);
+public static final void gtk_menu_shell_select_item(long /*int*/ menu_shell, long /*int*/ menu_item) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_select_item(menu_shell, menu_item);
@@ -5884,8 +5884,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_menu_shell_set_take_focus(int /*long*/ menu_shell, boolean take_focus);
-public static final void gtk_menu_shell_set_take_focus(int /*long*/ menu_shell, boolean take_focus) {
+public static final native void _gtk_menu_shell_set_take_focus(long /*int*/ menu_shell, boolean take_focus);
+public static final void gtk_menu_shell_set_take_focus(long /*int*/ menu_shell, boolean take_focus) {
 	lock.lock();
 	try {
 		_gtk_menu_shell_set_take_focus(menu_shell, take_focus);
@@ -5893,8 +5893,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_message_dialog_new(int /*long*/ parent, int flags, int type, int buttons, byte[] message_format);
-public static final int /*long*/ gtk_message_dialog_new(int /*long*/ parent, int flags, int type, int buttons, byte[] message_format) {
+public static final native long /*int*/ _gtk_message_dialog_new(long /*int*/ parent, int flags, int type, int buttons, byte[] message_format);
+public static final long /*int*/ gtk_message_dialog_new(long /*int*/ parent, int flags, int type, int buttons, byte[] message_format) {
 	lock.lock();
 	try {
 		return _gtk_message_dialog_new(parent, flags, type, buttons, message_format);
@@ -5902,8 +5902,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_misc_set_alignment(int /*long*/ misc, float xalign, float yalign);
-public static final void gtk_misc_set_alignment(int /*long*/ misc, float xalign, float yalign) {
+public static final native void _gtk_misc_set_alignment(long /*int*/ misc, float xalign, float yalign);
+public static final void gtk_misc_set_alignment(long /*int*/ misc, float xalign, float yalign) {
 	lock.lock();
 	try {
 		_gtk_misc_set_alignment(misc, xalign, yalign);
@@ -5911,8 +5911,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_notebook_get_current_page(int /*long*/ notebook);
-public static final int gtk_notebook_get_current_page(int /*long*/ notebook) {
+public static final native int _gtk_notebook_get_current_page(long /*int*/ notebook);
+public static final int gtk_notebook_get_current_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		return _gtk_notebook_get_current_page(notebook);
@@ -5920,8 +5920,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_notebook_get_scrollable(int /*long*/ notebook);
-public static final boolean gtk_notebook_get_scrollable(int /*long*/ notebook) {
+public static final native boolean _gtk_notebook_get_scrollable(long /*int*/ notebook);
+public static final boolean gtk_notebook_get_scrollable(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		return _gtk_notebook_get_scrollable(notebook);
@@ -5929,8 +5929,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_insert_page(int /*long*/ notebook, int /*long*/ child, int /*long*/ tab_label, int position);
-public static final void gtk_notebook_insert_page(int /*long*/ notebook, int /*long*/ child, int /*long*/ tab_label, int position) {
+public static final native void _gtk_notebook_insert_page(long /*int*/ notebook, long /*int*/ child, long /*int*/ tab_label, int position);
+public static final void gtk_notebook_insert_page(long /*int*/ notebook, long /*int*/ child, long /*int*/ tab_label, int position) {
 	lock.lock();
 	try {
 		_gtk_notebook_insert_page(notebook, child, tab_label, position);
@@ -5938,8 +5938,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_notebook_new();
-public static final int /*long*/ gtk_notebook_new() {
+public static final native long /*int*/ _gtk_notebook_new();
+public static final long /*int*/ gtk_notebook_new() {
 	lock.lock();
 	try {
 		return _gtk_notebook_new();
@@ -5947,8 +5947,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_next_page(int /*long*/ notebook);
-public static final void gtk_notebook_next_page(int /*long*/ notebook) {
+public static final native void _gtk_notebook_next_page(long /*int*/ notebook);
+public static final void gtk_notebook_next_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		_gtk_notebook_next_page(notebook);
@@ -5956,8 +5956,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_prev_page(int /*long*/ notebook);
-public static final void gtk_notebook_prev_page(int /*long*/ notebook) {
+public static final native void _gtk_notebook_prev_page(long /*int*/ notebook);
+public static final void gtk_notebook_prev_page(long /*int*/ notebook) {
 	lock.lock();
 	try {
 		_gtk_notebook_prev_page(notebook);
@@ -5965,8 +5965,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_remove_page(int /*long*/ notebook, int page_num);
-public static final void gtk_notebook_remove_page(int /*long*/ notebook, int page_num) {
+public static final native void _gtk_notebook_remove_page(long /*int*/ notebook, int page_num);
+public static final void gtk_notebook_remove_page(long /*int*/ notebook, int page_num) {
 	lock.lock();
 	try {
 		_gtk_notebook_remove_page(notebook, page_num);
@@ -5974,8 +5974,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_set_current_page(int /*long*/ notebook, int page_num);
-public static final void gtk_notebook_set_current_page(int /*long*/ notebook, int page_num) {
+public static final native void _gtk_notebook_set_current_page(long /*int*/ notebook, int page_num);
+public static final void gtk_notebook_set_current_page(long /*int*/ notebook, int page_num) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_current_page(notebook, page_num);
@@ -5983,8 +5983,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_set_scrollable(int /*long*/ notebook, boolean scrollable);
-public static final void gtk_notebook_set_scrollable(int /*long*/ notebook, boolean scrollable) {
+public static final native void _gtk_notebook_set_scrollable(long /*int*/ notebook, boolean scrollable);
+public static final void gtk_notebook_set_scrollable(long /*int*/ notebook, boolean scrollable) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_scrollable(notebook, scrollable);
@@ -5992,8 +5992,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_set_show_tabs(int /*long*/ notebook, boolean show_tabs);
-public static final void gtk_notebook_set_show_tabs(int /*long*/ notebook, boolean show_tabs) {
+public static final native void _gtk_notebook_set_show_tabs(long /*int*/ notebook, boolean show_tabs);
+public static final void gtk_notebook_set_show_tabs(long /*int*/ notebook, boolean show_tabs) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_show_tabs(notebook, show_tabs);
@@ -6001,8 +6001,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_notebook_set_tab_pos(int /*long*/ notebook, int pos);
-public static final void gtk_notebook_set_tab_pos(int /*long*/ notebook, int pos) {
+public static final native void _gtk_notebook_set_tab_pos(long /*int*/ notebook, int pos);
+public static final void gtk_notebook_set_tab_pos(long /*int*/ notebook, int pos) {
 	lock.lock();
 	try {
 		_gtk_notebook_set_tab_pos(notebook, pos);
@@ -6010,8 +6010,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_object_sink(int /*long*/ object);
-public static final void gtk_object_sink(int /*long*/ object) {
+public static final native void _gtk_object_sink(long /*int*/ object);
+public static final void gtk_object_sink(long /*int*/ object) {
 	lock.lock();
 	try {
 		_gtk_object_sink(object);
@@ -6019,8 +6019,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_page_setup_new ();
-public static final int /*long*/ gtk_page_setup_new () {
+public static final native long /*int*/ _gtk_page_setup_new ();
+public static final long /*int*/ gtk_page_setup_new () {
 	lock.lock();
 	try {
 		return _gtk_page_setup_new ();
@@ -6028,8 +6028,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_page_setup_get_orientation(int /*long*/ setup);
-public static final int gtk_page_setup_get_orientation(int /*long*/ setup) {
+public static final native int _gtk_page_setup_get_orientation(long /*int*/ setup);
+public static final int gtk_page_setup_get_orientation(long /*int*/ setup) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_orientation(setup);
@@ -6037,8 +6037,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_orientation(int /*long*/ setup, int orientation);
-public static final void gtk_page_setup_set_orientation(int /*long*/ setup, int orientation) {
+public static final native void _gtk_page_setup_set_orientation(long /*int*/ setup, int orientation);
+public static final void gtk_page_setup_set_orientation(long /*int*/ setup, int orientation) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_orientation(setup, orientation);
@@ -6046,8 +6046,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_page_setup_get_paper_size(int /*long*/ setup);
-public static final int /*long*/ gtk_page_setup_get_paper_size(int /*long*/ setup) {
+public static final native long /*int*/ _gtk_page_setup_get_paper_size(long /*int*/ setup);
+public static final long /*int*/ gtk_page_setup_get_paper_size(long /*int*/ setup) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_size(setup);
@@ -6055,8 +6055,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_paper_size(int /*long*/ setup, int /*long*/ size);
-public static final void gtk_page_setup_set_paper_size(int /*long*/ setup, int /*long*/ size) {
+public static final native void _gtk_page_setup_set_paper_size(long /*int*/ setup, long /*int*/ size);
+public static final void gtk_page_setup_set_paper_size(long /*int*/ setup, long /*int*/ size) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_paper_size(setup, size);
@@ -6064,8 +6064,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_top_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_top_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_top_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_top_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_top_margin(setup, unit);
@@ -6073,8 +6073,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_top_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_top_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_top_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_top_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_top_margin(setup, margin, unit);
@@ -6082,8 +6082,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_bottom_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_bottom_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_bottom_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_bottom_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_bottom_margin(setup, unit);
@@ -6091,8 +6091,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_bottom_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_bottom_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_bottom_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_bottom_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_bottom_margin(setup, margin, unit);
@@ -6100,8 +6100,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_left_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_left_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_left_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_left_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_left_margin(setup, unit);
@@ -6109,8 +6109,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_left_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_left_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_left_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_left_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_left_margin(setup, margin, unit);
@@ -6118,8 +6118,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_right_margin(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_right_margin(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_right_margin(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_right_margin(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_right_margin(setup, unit);
@@ -6127,8 +6127,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_page_setup_set_right_margin(int /*long*/ setup, double margin, int unit);
-public static final void gtk_page_setup_set_right_margin(int /*long*/ setup, double margin, int unit) {
+public static final native void _gtk_page_setup_set_right_margin(long /*int*/ setup, double margin, int unit);
+public static final void gtk_page_setup_set_right_margin(long /*int*/ setup, double margin, int unit) {
 	lock.lock();
 	try {
 		_gtk_page_setup_set_right_margin(setup, margin, unit);
@@ -6136,8 +6136,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_paper_width(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_paper_width(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_paper_width(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_paper_width(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_width(setup, unit);
@@ -6145,8 +6145,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_paper_height(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_paper_height(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_paper_height(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_paper_height(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_paper_height(setup, unit);
@@ -6154,8 +6154,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_page_width(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_page_width(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_page_width(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_page_width(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_page_width(setup, unit);
@@ -6163,8 +6163,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_page_setup_get_page_height(int /*long*/ setup, int unit);
-public static final double gtk_page_setup_get_page_height(int /*long*/ setup, int unit) {
+public static final native double _gtk_page_setup_get_page_height(long /*int*/ setup, int unit);
+public static final double gtk_page_setup_get_page_height(long /*int*/ setup, int unit) {
 	lock.lock();
 	try {
 		return _gtk_page_setup_get_page_height(setup, unit);
@@ -6172,8 +6172,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_handle(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
-public static final void gtk_paint_handle(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
+public static final native void _gtk_paint_handle(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
+public static final void gtk_paint_handle(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
 	lock.lock();
 	try {
 		_gtk_paint_handle(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation);
@@ -6181,8 +6181,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_flat_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_flat_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_flat_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_flat_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_flat_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6190,8 +6190,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_focus(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_focus(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_focus(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_focus(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_focus(style, window, state_type, area, widget, detail, x, y, width, height);
@@ -6199,8 +6199,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_option(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_option(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_option(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_option(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_option(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6208,8 +6208,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_slider(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
-public static final void gtk_paint_slider(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
+public static final native void _gtk_paint_slider(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation);
+public static final void gtk_paint_slider(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int orientation) {
 	lock.lock();
 	try {
 		_gtk_paint_slider(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, orientation);
@@ -6217,8 +6217,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_tab(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_tab(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_tab(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_tab(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_tab(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6226,8 +6226,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_arrow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height);
-public static final void gtk_paint_arrow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height) {
+public static final native void _gtk_paint_arrow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height);
+public static final void gtk_paint_arrow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int arrow_type, boolean fill, int x, int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_arrow(style, window, state_type, shadow_type, area, widget, detail, arrow_type, fill, x, y, width, height);
@@ -6236,8 +6236,8 @@
 	}
 }
 
-public static final native void _gtk_paint_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_box(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_box(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_box(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6245,8 +6245,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_box_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
-public static final void gtk_paint_box_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
+public static final native void _gtk_paint_box_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
+public static final void gtk_paint_box_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
 	lock.lock();
 	try {
 		_gtk_paint_box_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
@@ -6254,8 +6254,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_check(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_check(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_check(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_check(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_check(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6263,8 +6263,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_expander(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int expander_style);
-public static final void gtk_paint_expander(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int expander_style) {
+public static final native void _gtk_paint_expander(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int expander_style);
+public static final void gtk_paint_expander(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int expander_style) {
 	lock.lock();
 	try {
 		_gtk_paint_expander(style, window, state_type, area, widget, detail, x, y, expander_style);
@@ -6272,8 +6272,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_extension(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side);
-public static final void gtk_paint_extension(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side) {
+public static final native void _gtk_paint_extension(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side);
+public static final void gtk_paint_extension(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side) {
 	lock.lock();
 	try {
 		_gtk_paint_extension(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side);
@@ -6281,8 +6281,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_hline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x1 , int x2, int y);
-public static final void gtk_paint_hline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x1 , int x2, int y) {
+public static final native void _gtk_paint_hline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x1 , int x2, int y);
+public static final void gtk_paint_hline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x1 , int x2, int y) {
 	lock.lock();
 	try {
 		_gtk_paint_hline(style, window, state_type, area, widget, detail, x1, x2, y);
@@ -6290,8 +6290,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_layout(int /*long*/ style, int /*long*/ window, int state_type, boolean use_text, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int /*long*/ layout);
-public static final void gtk_paint_layout(int /*long*/ style, int /*long*/ window, int state_type, boolean use_text, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int /*long*/ layout) {
+public static final native void _gtk_paint_layout(long /*int*/ style, long /*int*/ window, int state_type, boolean use_text, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, long /*int*/ layout);
+public static final void gtk_paint_layout(long /*int*/ style, long /*int*/ window, int state_type, boolean use_text, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_gtk_paint_layout(style, window, state_type, use_text, area, widget, detail, x, y, layout);
@@ -6299,8 +6299,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_shadow_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
-public static final void gtk_paint_shadow_gap(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
+public static final native void _gtk_paint_shadow_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width);
+public static final void gtk_paint_shadow_gap(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height, int gap_side, int gap_x, int gap_width) {
 	lock.lock();
 	try {
 		_gtk_paint_shadow_gap(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
@@ -6308,8 +6308,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_shadow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height);
-public static final void gtk_paint_shadow(int /*long*/ style, int /*long*/ window, int state_type, int shadow_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int x , int y, int width, int height) {
+public static final native void _gtk_paint_shadow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height);
+public static final void gtk_paint_shadow(long /*int*/ style, long /*int*/ window, int state_type, int shadow_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int x , int y, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_paint_shadow(style, window, state_type, shadow_type, area, widget, detail, x, y, width, height);
@@ -6317,8 +6317,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paint_vline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int y1 , int y2, int x);
-public static final void gtk_paint_vline(int /*long*/ style, int /*long*/ window, int state_type, GdkRectangle area, int /*long*/ widget, byte[] detail, int y1 , int y2, int x) {
+public static final native void _gtk_paint_vline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int y1 , int y2, int x);
+public static final void gtk_paint_vline(long /*int*/ style, long /*int*/ window, int state_type, GdkRectangle area, long /*int*/ widget, byte[] detail, int y1 , int y2, int x) {
 	lock.lock();
 	try {
 		_gtk_paint_vline(style, window, state_type, area, widget, detail, y1, y2, x);
@@ -6326,8 +6326,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_paper_size_free(int /*long*/ size);
-public static final void gtk_paper_size_free(int /*long*/ size) {
+public static final native void _gtk_paper_size_free(long /*int*/ size);
+public static final void gtk_paper_size_free(long /*int*/ size) {
 	lock.lock();
 	try {
 		_gtk_paper_size_free(size);
@@ -6335,8 +6335,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_new(byte [] name);
-public static final int /*long*/ gtk_paper_size_new(byte [] name) {
+public static final native long /*int*/ _gtk_paper_size_new(byte [] name);
+public static final long /*int*/ gtk_paper_size_new(byte [] name) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new(name);
@@ -6344,8 +6344,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height);
-public static final int /*long*/ gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height) {
+public static final native long /*int*/ _gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height);
+public static final long /*int*/ gtk_paper_size_new_from_ppd(byte [] ppd_name, byte [] ppd_display_name, double width, double height) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height);
@@ -6353,8 +6353,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit);
-public static final int /*long*/ gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit) {
+public static final native long /*int*/ _gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit);
+public static final long /*int*/ gtk_paper_size_new_custom(byte [] name, byte [] display_name, double width, double height, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_new_custom(name, display_name, width, height, unit);
@@ -6362,8 +6362,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_get_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_name(size);
@@ -6371,8 +6371,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_get_display_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_display_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_display_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_display_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_display_name(size);
@@ -6380,8 +6380,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_paper_size_get_ppd_name(int /*long*/ size);
-public static final int /*long*/ gtk_paper_size_get_ppd_name(int /*long*/ size) {
+public static final native long /*int*/ _gtk_paper_size_get_ppd_name(long /*int*/ size);
+public static final long /*int*/ gtk_paper_size_get_ppd_name(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_ppd_name(size);
@@ -6389,8 +6389,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_paper_size_get_width(int /*long*/ size, int unit);
-public static final double gtk_paper_size_get_width(int /*long*/ size, int unit) {
+public static final native double _gtk_paper_size_get_width(long /*int*/ size, int unit);
+public static final double gtk_paper_size_get_width(long /*int*/ size, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_width(size, unit);
@@ -6398,8 +6398,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_paper_size_get_height(int /*long*/ size, int unit);
-public static final double gtk_paper_size_get_height(int /*long*/ size, int unit) {
+public static final native double _gtk_paper_size_get_height(long /*int*/ size, int unit);
+public static final double gtk_paper_size_get_height(long /*int*/ size, int unit) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_get_height(size, unit);
@@ -6407,8 +6407,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_paper_size_is_custom(int /*long*/ size);
-public static final boolean gtk_paper_size_is_custom(int /*long*/ size) {
+public static final native boolean _gtk_paper_size_is_custom(long /*int*/ size);
+public static final boolean gtk_paper_size_is_custom(long /*int*/ size) {
 	lock.lock();
 	try {
 		return _gtk_paper_size_is_custom(size);
@@ -6416,8 +6416,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_plug_get_id(int /*long*/ plug);
-public static final int /*long*/ gtk_plug_get_id(int /*long*/ plug) {
+public static final native long /*int*/ _gtk_plug_get_id(long /*int*/ plug);
+public static final long /*int*/ gtk_plug_get_id(long /*int*/ plug) {
 	lock.lock();
 	try {
 		return _gtk_plug_get_id(plug);
@@ -6425,8 +6425,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_plug_new(int /*long*/ socket_id);
-public static final int /*long*/ gtk_plug_new(int /*long*/ socket_id) {
+public static final native long /*int*/ _gtk_plug_new(long /*int*/ socket_id);
+public static final long /*int*/ gtk_plug_new(long /*int*/ socket_id) {
 	lock.lock();
 	try {
 		return _gtk_plug_new(socket_id);
@@ -6434,8 +6434,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_printer_get_backend(int /*long*/ printer);
-public static final int /*long*/ gtk_printer_get_backend(int /*long*/ printer) {
+public static final native long /*int*/ _gtk_printer_get_backend(long /*int*/ printer);
+public static final long /*int*/ gtk_printer_get_backend(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_get_backend(printer);
@@ -6443,8 +6443,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_printer_get_name(int /*long*/ printer);
-public static final int /*long*/ gtk_printer_get_name(int /*long*/ printer) {
+public static final native long /*int*/ _gtk_printer_get_name(long /*int*/ printer);
+public static final long /*int*/ gtk_printer_get_name(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_get_name(printer);
@@ -6452,8 +6452,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_printer_is_default(int /*long*/ printer);
-public static final boolean gtk_printer_is_default(int /*long*/ printer) {
+public static final native boolean _gtk_printer_is_default(long /*int*/ printer);
+public static final boolean gtk_printer_is_default(long /*int*/ printer) {
 	lock.lock();
 	try {
 		return _gtk_printer_is_default(printer);
@@ -6461,8 +6461,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_enumerate_printers(int /*long*/ func, int /*long*/data, int /*long*/ destroy, boolean wait);
-public static final void gtk_enumerate_printers(int /*long*/ func, int /*long*/data, int /*long*/ destroy, boolean wait) {
+public static final native void _gtk_enumerate_printers(long /*int*/ func, long /*int*/data, long /*int*/ destroy, boolean wait);
+public static final void gtk_enumerate_printers(long /*int*/ func, long /*int*/data, long /*int*/ destroy, boolean wait) {
 	lock.lock();
 	try {
 		_gtk_enumerate_printers(func, data, destroy, wait);
@@ -6470,8 +6470,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_job_new(byte[] title, int /*long*/ printer, int /*long*/ settings, int /*long*/ page_setup);
-public static final int /*long*/ gtk_print_job_new(byte[] title, int /*long*/ printer, int /*long*/ settings, int /*long*/ page_setup) {
+public static final native long /*int*/ _gtk_print_job_new(byte[] title, long /*int*/ printer, long /*int*/ settings, long /*int*/ page_setup);
+public static final long /*int*/ gtk_print_job_new(byte[] title, long /*int*/ printer, long /*int*/ settings, long /*int*/ page_setup) {
 	lock.lock();
 	try {
 		return _gtk_print_job_new(title, printer, settings, page_setup);
@@ -6479,8 +6479,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_job_get_settings(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_settings(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_settings(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_settings(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_settings(job);
@@ -6488,8 +6488,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_job_get_printer(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_printer(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_printer(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_printer(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_printer(job);
@@ -6497,8 +6497,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_job_get_title(int /*long*/ job);
-public static final int /*long*/ gtk_print_job_get_title(int /*long*/ job) {
+public static final native long /*int*/ _gtk_print_job_get_title(long /*int*/ job);
+public static final long /*int*/ gtk_print_job_get_title(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_title(job);
@@ -6506,8 +6506,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_job_get_status(int /*long*/ job);
-public static final int gtk_print_job_get_status(int /*long*/ job) {
+public static final native int _gtk_print_job_get_status(long /*int*/ job);
+public static final int gtk_print_job_get_status(long /*int*/ job) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_status(job);
@@ -6515,8 +6515,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_print_job_set_source_file(int /*long*/ job, byte[] filename, int /*long*/ error[]);
-public static final boolean gtk_print_job_set_source_file(int /*long*/ job, byte[] filename, int /*long*/ error[]) {
+public static final native boolean _gtk_print_job_set_source_file(long /*int*/ job, byte[] filename, long /*int*/ error[]);
+public static final boolean gtk_print_job_set_source_file(long /*int*/ job, byte[] filename, long /*int*/ error[]) {
 	lock.lock();
 	try {
 		return _gtk_print_job_set_source_file(job, filename, error);
@@ -6524,8 +6524,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_job_get_surface(int /*long*/ job, int /*long*/ error[]);
-public static final int /*long*/ gtk_print_job_get_surface(int /*long*/ job, int /*long*/ error[]) {
+public static final native long /*int*/ _gtk_print_job_get_surface(long /*int*/ job, long /*int*/ error[]);
+public static final long /*int*/ gtk_print_job_get_surface(long /*int*/ job, long /*int*/ error[]) {
 	lock.lock();
 	try {
 		return _gtk_print_job_get_surface(job, error);
@@ -6533,8 +6533,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_job_send(int /*long*/ job, int /*long*/ callback, int /*long*/ user_data, int /*long*/ dnotify);
-public static final void gtk_print_job_send(int /*long*/ job, int /*long*/ callback, int /*long*/ user_data, int /*long*/ dnotify) {
+public static final native void _gtk_print_job_send(long /*int*/ job, long /*int*/ callback, long /*int*/ user_data, long /*int*/ dnotify);
+public static final void gtk_print_job_send(long /*int*/ job, long /*int*/ callback, long /*int*/ user_data, long /*int*/ dnotify) {
 	lock.lock();
 	try {
 		_gtk_print_job_send(job, callback, user_data, dnotify);
@@ -6542,8 +6542,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_settings_new();
-public static final int /*long*/ gtk_print_settings_new() {
+public static final native long /*int*/ _gtk_print_settings_new();
+public static final long /*int*/ gtk_print_settings_new() {
 	lock.lock();
 	try {
 		return _gtk_print_settings_new();
@@ -6551,8 +6551,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_foreach(int /*long*/ settings, int /*long*/ func, int /*long*/ data);
-public static final void gtk_print_settings_foreach(int /*long*/ settings, int /*long*/ func, int /*long*/ data) {
+public static final native void _gtk_print_settings_foreach(long /*int*/ settings, long /*int*/ func, long /*int*/ data);
+public static final void gtk_print_settings_foreach(long /*int*/ settings, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gtk_print_settings_foreach(settings, func, data);
@@ -6560,8 +6560,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_settings_get(int /*long*/ settings, byte [] key);
-public static final int /*long*/ gtk_print_settings_get(int /*long*/ settings, byte [] key) {
+public static final native long /*int*/ _gtk_print_settings_get(long /*int*/ settings, byte [] key);
+public static final long /*int*/ gtk_print_settings_get(long /*int*/ settings, byte [] key) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get(settings, key);
@@ -6569,8 +6569,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set(int /*long*/ settings, byte [] key, byte [] value);
-public static final void gtk_print_settings_set(int /*long*/ settings, byte [] key, byte [] value) {
+public static final native void _gtk_print_settings_set(long /*int*/ settings, byte [] key, byte [] value);
+public static final void gtk_print_settings_set(long /*int*/ settings, byte [] key, byte [] value) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set(settings, key, value);
@@ -6578,8 +6578,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_settings_get_printer(int /*long*/ settings);
-public static final int /*long*/ gtk_print_settings_get_printer(int /*long*/ settings) {
+public static final native long /*int*/ _gtk_print_settings_get_printer(long /*int*/ settings);
+public static final long /*int*/ gtk_print_settings_get_printer(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_printer(settings);
@@ -6587,8 +6587,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_printer(int /*long*/ settings, byte[] printer);
-public static final void gtk_print_settings_set_printer(int /*long*/ settings, byte[] printer) {
+public static final native void _gtk_print_settings_set_printer(long /*int*/ settings, byte[] printer);
+public static final void gtk_print_settings_set_printer(long /*int*/ settings, byte[] printer) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_printer(settings, printer);
@@ -6596,8 +6596,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_settings_get_orientation(int /*long*/ settings);
-public static final int gtk_print_settings_get_orientation(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_orientation(long /*int*/ settings);
+public static final int gtk_print_settings_get_orientation(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_orientation(settings);
@@ -6605,8 +6605,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_orientation(int /*long*/ settings, int orientation);
-public static final void gtk_print_settings_set_orientation(int /*long*/ settings, int orientation) {
+public static final native void _gtk_print_settings_set_orientation(long /*int*/ settings, int orientation);
+public static final void gtk_print_settings_set_orientation(long /*int*/ settings, int orientation) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_orientation(settings, orientation);
@@ -6614,8 +6614,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_print_settings_get_collate(int /*long*/ settings);
-public static final boolean gtk_print_settings_get_collate(int /*long*/ settings) {
+public static final native boolean _gtk_print_settings_get_collate(long /*int*/ settings);
+public static final boolean gtk_print_settings_get_collate(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_collate(settings);
@@ -6623,8 +6623,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_collate(int /*long*/ settings, boolean collate);
-public static final void gtk_print_settings_set_collate(int /*long*/ settings, boolean collate) {
+public static final native void _gtk_print_settings_set_collate(long /*int*/ settings, boolean collate);
+public static final void gtk_print_settings_set_collate(long /*int*/ settings, boolean collate) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_collate(settings, collate);
@@ -6632,8 +6632,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_settings_get_n_copies(int /*long*/ settings);
-public static final int gtk_print_settings_get_n_copies(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_n_copies(long /*int*/ settings);
+public static final int gtk_print_settings_get_n_copies(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_n_copies(settings);
@@ -6641,8 +6641,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_n_copies(int /*long*/ settings, int num_copies);
-public static final void gtk_print_settings_set_n_copies(int /*long*/ settings, int num_copies) {
+public static final native void _gtk_print_settings_set_n_copies(long /*int*/ settings, int num_copies);
+public static final void gtk_print_settings_set_n_copies(long /*int*/ settings, int num_copies) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_n_copies(settings, num_copies);
@@ -6650,8 +6650,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_settings_get_print_pages(int /*long*/ settings);
-public static final int gtk_print_settings_get_print_pages(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_print_pages(long /*int*/ settings);
+public static final int gtk_print_settings_get_print_pages(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_print_pages(settings);
@@ -6659,8 +6659,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_print_pages(int /*long*/ settings, int pages);
-public static final void gtk_print_settings_set_print_pages(int /*long*/ settings, int pages) {
+public static final native void _gtk_print_settings_set_print_pages(long /*int*/ settings, int pages);
+public static final void gtk_print_settings_set_print_pages(long /*int*/ settings, int pages) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_print_pages(settings, pages);
@@ -6668,8 +6668,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_settings_get_page_ranges(int /*long*/ settings, int[] num_ranges);
-public static final int /*long*/ gtk_print_settings_get_page_ranges(int /*long*/ settings, int[] num_ranges) {
+public static final native long /*int*/ _gtk_print_settings_get_page_ranges(long /*int*/ settings, int[] num_ranges);
+public static final long /*int*/ gtk_print_settings_get_page_ranges(long /*int*/ settings, int[] num_ranges) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_page_ranges(settings, num_ranges);
@@ -6677,8 +6677,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_settings_set_page_ranges(int /*long*/ settings, int[] page_ranges, int num_ranges);
-public static final void gtk_print_settings_set_page_ranges(int /*long*/ settings, int[] page_ranges, int num_ranges) {
+public static final native void _gtk_print_settings_set_page_ranges(long /*int*/ settings, int[] page_ranges, int num_ranges);
+public static final void gtk_print_settings_set_page_ranges(long /*int*/ settings, int[] page_ranges, int num_ranges) {
 	lock.lock();
 	try {
 		_gtk_print_settings_set_page_ranges(settings, page_ranges, num_ranges);
@@ -6686,8 +6686,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_print_settings_get_paper_width(int /*long*/ settings, int unit);
-public static final double gtk_print_settings_get_paper_width(int /*long*/ settings, int unit) {
+public static final native double _gtk_print_settings_get_paper_width(long /*int*/ settings, int unit);
+public static final double gtk_print_settings_get_paper_width(long /*int*/ settings, int unit) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_paper_width(settings, unit);
@@ -6695,8 +6695,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_print_settings_get_paper_height(int /*long*/ settings, int unit);
-public static final double gtk_print_settings_get_paper_height(int /*long*/ settings, int unit) {
+public static final native double _gtk_print_settings_get_paper_height(long /*int*/ settings, int unit);
+public static final double gtk_print_settings_get_paper_height(long /*int*/ settings, int unit) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_paper_height(settings, unit);
@@ -6704,8 +6704,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_settings_get_resolution(int /*long*/ settings);
-public static final int gtk_print_settings_get_resolution(int /*long*/ settings) {
+public static final native int _gtk_print_settings_get_resolution(long /*int*/ settings);
+public static final int gtk_print_settings_get_resolution(long /*int*/ settings) {
 	lock.lock();
 	try {
 		return _gtk_print_settings_get_resolution(settings);
@@ -6713,8 +6713,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_unix_dialog_new(byte[] title, int /*long*/ parent);
-public static final int /*long*/ gtk_print_unix_dialog_new(byte[] title, int /*long*/ parent) {
+public static final native long /*int*/ _gtk_print_unix_dialog_new(byte[] title, long /*int*/ parent);
+public static final long /*int*/ gtk_print_unix_dialog_new(byte[] title, long /*int*/ parent) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_new(title, parent);
@@ -6722,8 +6722,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_unix_dialog_set_page_setup(int /*long*/ dialog, int /*long*/ page_setup);
-public static final void gtk_print_unix_dialog_set_page_setup(int /*long*/ dialog, int /*long*/ page_setup) {
+public static final native void _gtk_print_unix_dialog_set_page_setup(long /*int*/ dialog, long /*int*/ page_setup);
+public static final void gtk_print_unix_dialog_set_page_setup(long /*int*/ dialog, long /*int*/ page_setup) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_page_setup(dialog, page_setup);
@@ -6731,8 +6731,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_unix_dialog_get_page_setup(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_page_setup(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_page_setup(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_page_setup(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_page_setup(dialog);
@@ -6740,8 +6740,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_unix_dialog_set_current_page(int /*long*/ dialog, int current_page);
-public static final void gtk_print_unix_dialog_set_current_page(int /*long*/ dialog, int current_page) {
+public static final native void _gtk_print_unix_dialog_set_current_page(long /*int*/ dialog, int current_page);
+public static final void gtk_print_unix_dialog_set_current_page(long /*int*/ dialog, int current_page) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_current_page(dialog, current_page);
@@ -6749,8 +6749,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_print_unix_dialog_get_current_page(int /*long*/ dialog);
-public static final int gtk_print_unix_dialog_get_current_page(int /*long*/ dialog) {
+public static final native int _gtk_print_unix_dialog_get_current_page(long /*int*/ dialog);
+public static final int gtk_print_unix_dialog_get_current_page(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_current_page(dialog);
@@ -6758,8 +6758,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_unix_dialog_set_settings(int /*long*/ dialog, int /*long*/ settings);
-public static final void gtk_print_unix_dialog_set_settings(int /*long*/ dialog, int /*long*/ settings) {
+public static final native void _gtk_print_unix_dialog_set_settings(long /*int*/ dialog, long /*int*/ settings);
+public static final void gtk_print_unix_dialog_set_settings(long /*int*/ dialog, long /*int*/ settings) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_settings(dialog, settings);
@@ -6767,8 +6767,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_unix_dialog_get_settings(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_settings(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_settings(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_settings(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_settings(dialog);
@@ -6776,8 +6776,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_print_unix_dialog_get_selected_printer(int /*long*/ dialog);
-public static final int /*long*/ gtk_print_unix_dialog_get_selected_printer(int /*long*/ dialog) {
+public static final native long /*int*/ _gtk_print_unix_dialog_get_selected_printer(long /*int*/ dialog);
+public static final long /*int*/ gtk_print_unix_dialog_get_selected_printer(long /*int*/ dialog) {
 	lock.lock();
 	try {
 		return _gtk_print_unix_dialog_get_selected_printer(dialog);
@@ -6785,8 +6785,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_print_unix_dialog_set_manual_capabilities(int /*long*/ dialog, int /*long*/ capabilities);
-public static final void gtk_print_unix_dialog_set_manual_capabilities(int /*long*/ dialog, int /*long*/ capabilities) {
+public static final native void _gtk_print_unix_dialog_set_manual_capabilities(long /*int*/ dialog, long /*int*/ capabilities);
+public static final void gtk_print_unix_dialog_set_manual_capabilities(long /*int*/ dialog, long /*int*/ capabilities) {
 	lock.lock();
 	try {
 		_gtk_print_unix_dialog_set_manual_capabilities(dialog, capabilities);
@@ -6794,8 +6794,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_progress_bar_new();
-public static final int /*long*/ gtk_progress_bar_new() {
+public static final native long /*int*/ _gtk_progress_bar_new();
+public static final long /*int*/ gtk_progress_bar_new() {
 	lock.lock();
 	try {
 		return _gtk_progress_bar_new();
@@ -6803,8 +6803,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_progress_bar_pulse(int /*long*/ pbar);
-public static final void gtk_progress_bar_pulse(int /*long*/ pbar) {
+public static final native void _gtk_progress_bar_pulse(long /*int*/ pbar);
+public static final void gtk_progress_bar_pulse(long /*int*/ pbar) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_pulse(pbar);
@@ -6812,8 +6812,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_progress_bar_set_fraction(int /*long*/ pbar, double fraction);
-public static final void gtk_progress_bar_set_fraction(int /*long*/ pbar, double fraction) {
+public static final native void _gtk_progress_bar_set_fraction(long /*int*/ pbar, double fraction);
+public static final void gtk_progress_bar_set_fraction(long /*int*/ pbar, double fraction) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_set_fraction(pbar, fraction);
@@ -6821,8 +6821,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_progress_bar_set_orientation(int /*long*/ pbar, int orientation);
-public static final void gtk_progress_bar_set_orientation(int /*long*/ pbar, int orientation) {
+public static final native void _gtk_progress_bar_set_orientation(long /*int*/ pbar, int orientation);
+public static final void gtk_progress_bar_set_orientation(long /*int*/ pbar, int orientation) {
 	lock.lock();
 	try {
 		_gtk_progress_bar_set_orientation(pbar, orientation);
@@ -6830,8 +6830,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_radio_button_get_group(int /*long*/ radio_button);
-public static final int /*long*/ gtk_radio_button_get_group(int /*long*/ radio_button) {
+public static final native long /*int*/ _gtk_radio_button_get_group(long /*int*/ radio_button);
+public static final long /*int*/ gtk_radio_button_get_group(long /*int*/ radio_button) {
 	lock.lock();
 	try {
 		return _gtk_radio_button_get_group(radio_button);
@@ -6839,8 +6839,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_radio_button_new(int /*long*/ group);
-public static final int /*long*/ gtk_radio_button_new(int /*long*/ group) {
+public static final native long /*int*/ _gtk_radio_button_new(long /*int*/ group);
+public static final long /*int*/ gtk_radio_button_new(long /*int*/ group) {
 	lock.lock();
 	try {
 		return _gtk_radio_button_new(group);
@@ -6848,8 +6848,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_radio_menu_item_get_group(int /*long*/ radio_menu_item);
-public static final int /*long*/ gtk_radio_menu_item_get_group(int /*long*/ radio_menu_item) {
+public static final native long /*int*/ _gtk_radio_menu_item_get_group(long /*int*/ radio_menu_item);
+public static final long /*int*/ gtk_radio_menu_item_get_group(long /*int*/ radio_menu_item) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_get_group(radio_menu_item);
@@ -6857,8 +6857,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_radio_menu_item_new(int /*long*/ group);
-public static final int /*long*/ gtk_radio_menu_item_new(int /*long*/ group) {
+public static final native long /*int*/ _gtk_radio_menu_item_new(long /*int*/ group);
+public static final long /*int*/ gtk_radio_menu_item_new(long /*int*/ group) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_new(group);
@@ -6866,8 +6866,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_radio_menu_item_new_with_label(int /*long*/ group, byte[] label);
-public static final int /*long*/ gtk_radio_menu_item_new_with_label(int /*long*/ group, byte[] label) {
+public static final native long /*int*/ _gtk_radio_menu_item_new_with_label(long /*int*/ group, byte[] label);
+public static final long /*int*/ gtk_radio_menu_item_new_with_label(long /*int*/ group, byte[] label) {
 	lock.lock();
 	try {
 		return _gtk_radio_menu_item_new_with_label(group, label);
@@ -6875,8 +6875,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_range_get_adjustment(int /*long*/ range);
-public static final int /*long*/ gtk_range_get_adjustment(int /*long*/ range) {
+public static final native long /*int*/ _gtk_range_get_adjustment(long /*int*/ range);
+public static final long /*int*/ gtk_range_get_adjustment(long /*int*/ range) {
 	lock.lock();
 	try {
 		return _gtk_range_get_adjustment(range);
@@ -6884,8 +6884,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_range_set_increments(int /*long*/ range, double step, double page);
-public static final void gtk_range_set_increments(int /*long*/ range, double step, double page) {
+public static final native void _gtk_range_set_increments(long /*int*/ range, double step, double page);
+public static final void gtk_range_set_increments(long /*int*/ range, double step, double page) {
 	lock.lock();
 	try {
 		_gtk_range_set_increments(range, step, page);
@@ -6893,8 +6893,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_range_set_inverted(int /*long*/ range, boolean setting);
-public static final void gtk_range_set_inverted(int /*long*/ range, boolean setting) {
+public static final native void _gtk_range_set_inverted(long /*int*/ range, boolean setting);
+public static final void gtk_range_set_inverted(long /*int*/ range, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_range_set_inverted(range, setting);
@@ -6902,8 +6902,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_range_set_range(int /*long*/ range, double min, double max);
-public static final void gtk_range_set_range(int /*long*/ range, double min, double max) {
+public static final native void _gtk_range_set_range(long /*int*/ range, double min, double max);
+public static final void gtk_range_set_range(long /*int*/ range, double min, double max) {
 	lock.lock();
 	try {
 		_gtk_range_set_range(range, min, max);
@@ -6911,8 +6911,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_range_set_value(int /*long*/ range, double value);
-public static final void gtk_range_set_value(int /*long*/ range, double value) {
+public static final native void _gtk_range_set_value(long /*int*/ range, double value);
+public static final void gtk_range_set_value(long /*int*/ range, double value) {
 	lock.lock();
 	try {
 		_gtk_range_set_value(range, value);
@@ -6929,8 +6929,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_rc_style_get_bg_pixmap_name(int /*long*/ style, int index);
-public static final int /*long*/ gtk_rc_style_get_bg_pixmap_name(int /*long*/ style, int index) {
+public static final native long /*int*/ _gtk_rc_style_get_bg_pixmap_name(long /*int*/ style, int index);
+public static final long /*int*/ gtk_rc_style_get_bg_pixmap_name(long /*int*/ style, int index) {
 	lock.lock();
 	try {
 		return _gtk_rc_style_get_bg_pixmap_name(style, index);
@@ -6938,8 +6938,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_rc_style_get_color_flags(int /*long*/ style, int index);
-public static final int gtk_rc_style_get_color_flags(int /*long*/ style, int index) {
+public static final native int _gtk_rc_style_get_color_flags(long /*int*/ style, int index);
+public static final int gtk_rc_style_get_color_flags(long /*int*/ style, int index) {
 	lock.lock();
 	try {
 		return _gtk_rc_style_get_color_flags(style, index);
@@ -6947,8 +6947,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_rc_style_set_bg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_bg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_bg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_bg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_bg(style, index, color);
@@ -6956,8 +6956,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_rc_style_set_bg_pixmap_name(int /*long*/ style, int index, int /*long*/ name);
-public static final void gtk_rc_style_set_bg_pixmap_name(int /*long*/ style, int index, int /*long*/ name) {
+public static final native void _gtk_rc_style_set_bg_pixmap_name(long /*int*/ style, int index, long /*int*/ name);
+public static final void gtk_rc_style_set_bg_pixmap_name(long /*int*/ style, int index, long /*int*/ name) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_bg_pixmap_name(style, index, name);
@@ -6965,8 +6965,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_rc_style_set_color_flags(int /*long*/ style, int index, int flag);
-public static final void gtk_rc_style_set_color_flags(int /*long*/ style, int index, int flag) {
+public static final native void _gtk_rc_style_set_color_flags(long /*int*/ style, int index, int flag);
+public static final void gtk_rc_style_set_color_flags(long /*int*/ style, int index, int flag) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_color_flags(style, index, flag);
@@ -6974,8 +6974,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scale_set_digits(int /*long*/ scale, int digits);
-public static final void gtk_scale_set_digits(int /*long*/ scale, int digits) {
+public static final native void _gtk_scale_set_digits(long /*int*/ scale, int digits);
+public static final void gtk_scale_set_digits(long /*int*/ scale, int digits) {
 	lock.lock();
 	try {
 		_gtk_scale_set_digits(scale, digits);
@@ -6983,8 +6983,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scale_set_draw_value(int /*long*/ scale, boolean draw_value);
-public static final void gtk_scale_set_draw_value(int /*long*/ scale, boolean draw_value) {
+public static final native void _gtk_scale_set_draw_value(long /*int*/ scale, boolean draw_value);
+public static final void gtk_scale_set_draw_value(long /*int*/ scale, boolean draw_value) {
 	lock.lock();
 	try {
 		_gtk_scale_set_draw_value(scale, draw_value);
@@ -6992,8 +6992,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_rc_style_set_fg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_fg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_fg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_fg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_fg(style, index, color);
@@ -7001,8 +7001,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_rc_style_set_text(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_rc_style_set_text(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_rc_style_set_text(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_rc_style_set_text(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_rc_style_set_text(style, index, color);
@@ -7010,8 +7010,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scrolled_window_add_with_viewport(int /*long*/ scrolled_window, int /*long*/ child);
-public static final void gtk_scrolled_window_add_with_viewport(int /*long*/ scrolled_window, int /*long*/ child) {
+public static final native void _gtk_scrolled_window_add_with_viewport(long /*int*/ scrolled_window, long /*int*/ child);
+public static final void gtk_scrolled_window_add_with_viewport(long /*int*/ scrolled_window, long /*int*/ child) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_add_with_viewport(scrolled_window, child);
@@ -7019,8 +7019,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_scrolled_window_get_hadjustment(int /*long*/ scrolled_window);
-public static final int /*long*/ gtk_scrolled_window_get_hadjustment(int /*long*/ scrolled_window) {
+public static final native long /*int*/ _gtk_scrolled_window_get_hadjustment(long /*int*/ scrolled_window);
+public static final long /*int*/ gtk_scrolled_window_get_hadjustment(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_hadjustment(scrolled_window);
@@ -7028,8 +7028,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scrolled_window_get_policy(int /*long*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy);
-public static final void gtk_scrolled_window_get_policy(int /*long*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy) {
+public static final native void _gtk_scrolled_window_get_policy(long /*int*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy);
+public static final void gtk_scrolled_window_get_policy(long /*int*/ scrolled_window, int[] hscrollbar_policy, int[] vscrollbar_policy) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_get_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy);
@@ -7037,8 +7037,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_scrolled_window_get_shadow_type(int /*long*/ scrolled_window);
-public static final int gtk_scrolled_window_get_shadow_type(int /*long*/ scrolled_window) {
+public static final native int _gtk_scrolled_window_get_shadow_type(long /*int*/ scrolled_window);
+public static final int gtk_scrolled_window_get_shadow_type(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_shadow_type(scrolled_window);
@@ -7046,8 +7046,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_scrolled_window_get_vadjustment(int /*long*/ scrolled_window);
-public static final int /*long*/ gtk_scrolled_window_get_vadjustment(int /*long*/ scrolled_window) {
+public static final native long /*int*/ _gtk_scrolled_window_get_vadjustment(long /*int*/ scrolled_window);
+public static final long /*int*/ gtk_scrolled_window_get_vadjustment(long /*int*/ scrolled_window) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_get_vadjustment(scrolled_window);
@@ -7055,8 +7055,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_scrolled_window_new(int /*long*/ hadjustment, int /*long*/ vadjustment);
-public static final int /*long*/ gtk_scrolled_window_new(int /*long*/ hadjustment, int /*long*/ vadjustment) {
+public static final native long /*int*/ _gtk_scrolled_window_new(long /*int*/ hadjustment, long /*int*/ vadjustment);
+public static final long /*int*/ gtk_scrolled_window_new(long /*int*/ hadjustment, long /*int*/ vadjustment) {
 	lock.lock();
 	try {
 		return _gtk_scrolled_window_new(hadjustment, vadjustment);
@@ -7064,8 +7064,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scrolled_window_set_placement(int /*long*/ scrolled_window, int placement);
-public static final void gtk_scrolled_window_set_placement(int /*long*/ scrolled_window, int placement) {
+public static final native void _gtk_scrolled_window_set_placement(long /*int*/ scrolled_window, int placement);
+public static final void gtk_scrolled_window_set_placement(long /*int*/ scrolled_window, int placement) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_placement(scrolled_window, placement);
@@ -7073,8 +7073,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scrolled_window_set_policy(int /*long*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy);
-public static final void gtk_scrolled_window_set_policy(int /*long*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
+public static final native void _gtk_scrolled_window_set_policy(long /*int*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy);
+public static final void gtk_scrolled_window_set_policy(long /*int*/ scrolled_window, int hscrollbar_policy, int vscrollbar_policy) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_policy(scrolled_window, hscrollbar_policy, vscrollbar_policy);
@@ -7082,8 +7082,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_scrolled_window_set_shadow_type(int /*long*/ scrolled_window, int type);
-public static final void gtk_scrolled_window_set_shadow_type(int /*long*/ scrolled_window, int type) {
+public static final native void _gtk_scrolled_window_set_shadow_type(long /*int*/ scrolled_window, int type);
+public static final void gtk_scrolled_window_set_shadow_type(long /*int*/ scrolled_window, int type) {
 	lock.lock();
 	try {
 		_gtk_scrolled_window_set_shadow_type(scrolled_window, type);
@@ -7091,8 +7091,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_settings_get_default();
-public static final int /*long*/ gtk_settings_get_default() {
+public static final native long /*int*/ _gtk_settings_get_default();
+public static final long /*int*/ gtk_settings_get_default() {
 	lock.lock();
 	try {
 		return _gtk_settings_get_default();
@@ -7100,8 +7100,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_selection_data_free(int /*long*/ selection_data);
-public static final void gtk_selection_data_free(int /*long*/ selection_data) {
+public static final native void _gtk_selection_data_free(long /*int*/ selection_data);
+public static final void gtk_selection_data_free(long /*int*/ selection_data) {
 	lock.lock();
 	try {
 		_gtk_selection_data_free(selection_data);
@@ -7109,8 +7109,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_selection_data_set(int /*long*/ selection_data, int /*long*/ type, int format, int /*long*/ data, int length);
-public static final void gtk_selection_data_set(int /*long*/ selection_data, int /*long*/ type, int format, int /*long*/ data, int length) {
+public static final native void _gtk_selection_data_set(long /*int*/ selection_data, long /*int*/ type, int format, long /*int*/ data, int length);
+public static final void gtk_selection_data_set(long /*int*/ selection_data, long /*int*/ type, int format, long /*int*/ data, int length) {
 	lock.lock();
 	try {
 		_gtk_selection_data_set(selection_data, type, format, data, length);
@@ -7118,8 +7118,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_separator_menu_item_new();
-public static final int /*long*/ gtk_separator_menu_item_new() {
+public static final native long /*int*/ _gtk_separator_menu_item_new();
+public static final long /*int*/ gtk_separator_menu_item_new() {
 	lock.lock();
 	try {
 		return _gtk_separator_menu_item_new();
@@ -7127,8 +7127,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_set_locale();
-public static final int /*long*/ gtk_set_locale() {
+public static final native long /*int*/ _gtk_set_locale();
+public static final long /*int*/ gtk_set_locale() {
 	lock.lock();
 	try {
 		return _gtk_set_locale();
@@ -7136,8 +7136,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_socket_get_id(int /*long*/ socket);
-public static final int /*long*/ gtk_socket_get_id(int /*long*/ socket) {
+public static final native long /*int*/ _gtk_socket_get_id(long /*int*/ socket);
+public static final long /*int*/ gtk_socket_get_id(long /*int*/ socket) {
 	lock.lock();
 	try {
 		return _gtk_socket_get_id(socket);
@@ -7145,8 +7145,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_socket_new();
-public static final int /*long*/ gtk_socket_new() {
+public static final native long /*int*/ _gtk_socket_new();
+public static final long /*int*/ gtk_socket_new() {
 	lock.lock();
 	try {
 		return _gtk_socket_new();
@@ -7154,8 +7154,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_spin_button_new(int /*long*/ adjustment, double climb_rate, int digits);
-public static final int /*long*/ gtk_spin_button_new(int /*long*/ adjustment, double climb_rate, int digits) {
+public static final native long /*int*/ _gtk_spin_button_new(long /*int*/ adjustment, double climb_rate, int digits);
+public static final long /*int*/ gtk_spin_button_new(long /*int*/ adjustment, double climb_rate, int digits) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_new(adjustment, climb_rate, digits);
@@ -7163,8 +7163,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_spin_button_get_adjustment(int /*long*/ spin_button);
-public static final int /*long*/ gtk_spin_button_get_adjustment(int /*long*/ spin_button) {
+public static final native long /*int*/ _gtk_spin_button_get_adjustment(long /*int*/ spin_button);
+public static final long /*int*/ gtk_spin_button_get_adjustment(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_get_adjustment(spin_button);
@@ -7173,8 +7173,8 @@
 	}
 }
 
-public static final native int _gtk_spin_button_get_digits(int /*long*/ spin_button);
-public static final int gtk_spin_button_get_digits(int /*long*/ spin_button) {
+public static final native int _gtk_spin_button_get_digits(long /*int*/ spin_button);
+public static final int gtk_spin_button_get_digits(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		return _gtk_spin_button_get_digits(spin_button);
@@ -7182,8 +7182,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_set_digits(int /*long*/ spin_button, int digits);
-public static final void gtk_spin_button_set_digits(int /*long*/ spin_button, int digits) {
+public static final native void _gtk_spin_button_set_digits(long /*int*/ spin_button, int digits);
+public static final void gtk_spin_button_set_digits(long /*int*/ spin_button, int digits) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_digits(spin_button, digits);
@@ -7191,8 +7191,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_set_increments(int /*long*/ spin_button, double step, double page);
-public static final void gtk_spin_button_set_increments(int /*long*/ spin_button, double step, double page) {
+public static final native void _gtk_spin_button_set_increments(long /*int*/ spin_button, double step, double page);
+public static final void gtk_spin_button_set_increments(long /*int*/ spin_button, double step, double page) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_increments(spin_button, step, page);
@@ -7200,8 +7200,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_set_range(int /*long*/ spin_button, double max, double min);
-public static final void gtk_spin_button_set_range(int /*long*/ spin_button, double max, double min) {
+public static final native void _gtk_spin_button_set_range(long /*int*/ spin_button, double max, double min);
+public static final void gtk_spin_button_set_range(long /*int*/ spin_button, double max, double min) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_range(spin_button, max, min);
@@ -7209,8 +7209,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_set_value(int /*long*/ spin_button, double value);
-public static final void gtk_spin_button_set_value(int /*long*/ spin_button, double value) {
+public static final native void _gtk_spin_button_set_value(long /*int*/ spin_button, double value);
+public static final void gtk_spin_button_set_value(long /*int*/ spin_button, double value) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_value(spin_button, value);
@@ -7218,8 +7218,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_set_wrap(int /*long*/ spin_button, boolean wrap);
-public static final void gtk_spin_button_set_wrap(int /*long*/ spin_button, boolean wrap) {
+public static final native void _gtk_spin_button_set_wrap(long /*int*/ spin_button, boolean wrap);
+public static final void gtk_spin_button_set_wrap(long /*int*/ spin_button, boolean wrap) {
 	lock.lock();
 	try {
 		_gtk_spin_button_set_wrap(spin_button, wrap);
@@ -7227,8 +7227,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_spin_button_update(int /*long*/ spin_button);
-public static final void gtk_spin_button_update(int /*long*/ spin_button) {
+public static final native void _gtk_spin_button_update(long /*int*/ spin_button);
+public static final void gtk_spin_button_update(long /*int*/ spin_button) {
 	lock.lock();
 	try {
 		_gtk_spin_button_update(spin_button);
@@ -7236,8 +7236,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_base(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_base(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_base(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_base(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_base(style, index, color);
@@ -7245,8 +7245,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_black(int /*long*/ style, GdkColor color);
-public static final void gtk_style_get_black(int /*long*/ style, GdkColor color) {
+public static final native void _gtk_style_get_black(long /*int*/ style, GdkColor color);
+public static final void gtk_style_get_black(long /*int*/ style, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_black(style, color);
@@ -7254,8 +7254,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_bg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_bg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_bg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_bg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_bg(style, index, color);
@@ -7263,8 +7263,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_dark(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_dark(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_dark(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_dark(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_dark(style, index, color);
@@ -7272,8 +7272,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_fg(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_fg(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_fg(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_fg(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_fg(style, index, color);
@@ -7281,8 +7281,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_fg_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_fg_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_fg_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_fg_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_fg_gc(style, index, gc);
@@ -7290,8 +7290,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_bg_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_bg_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_bg_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_bg_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_bg_gc(style, index, gc);
@@ -7299,8 +7299,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_light_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_light_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_light_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_light_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_light_gc(style, index, gc);
@@ -7308,8 +7308,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_dark_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_dark_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_dark_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_dark_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_dark_gc(style, index, gc);
@@ -7317,8 +7317,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_mid_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_mid_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_mid_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_mid_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_mid_gc(style, index, gc);
@@ -7326,8 +7326,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_text_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_text_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_text_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_text_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_text_gc(style, index, gc);
@@ -7335,8 +7335,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_text_aa_gc(int /*long*/ style, int index, int /*long*/[] gc);
-public static final void gtk_style_get_text_aa_gc(int /*long*/ style, int index, int /*long*/[] gc) {
+public static final native void _gtk_style_get_text_aa_gc(long /*int*/ style, int index, long /*int*/[] gc);
+public static final void gtk_style_get_text_aa_gc(long /*int*/ style, int index, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_text_aa_gc(style, index, gc);
@@ -7344,8 +7344,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_black_gc(int /*long*/ style, int /*long*/[] gc);
-public static final void gtk_style_get_black_gc(int /*long*/ style, int /*long*/[] gc) {
+public static final native void _gtk_style_get_black_gc(long /*int*/ style, long /*int*/[] gc);
+public static final void gtk_style_get_black_gc(long /*int*/ style, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_black_gc(style, gc);
@@ -7353,8 +7353,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_white_gc(int /*long*/ style, int /*long*/[] gc);
-public static final void gtk_style_get_white_gc(int /*long*/ style, int /*long*/[] gc) {
+public static final native void _gtk_style_get_white_gc(long /*int*/ style, long /*int*/[] gc);
+public static final void gtk_style_get_white_gc(long /*int*/ style, long /*int*/[] gc) {
 	lock.lock();
 	try {
 		_gtk_style_get_white_gc(style, gc);
@@ -7362,8 +7362,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_style_get_font_desc(int /*long*/ style);
-public static final int /*long*/ gtk_style_get_font_desc(int /*long*/ style) {
+public static final native long /*int*/ _gtk_style_get_font_desc(long /*int*/ style);
+public static final long /*int*/ gtk_style_get_font_desc(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_font_desc(style);
@@ -7371,8 +7371,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_light(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_light(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_light(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_light(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_light(style, index, color);
@@ -7380,8 +7380,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_style_get_text(int /*long*/ style, int index, GdkColor color);
-public static final void gtk_style_get_text(int /*long*/ style, int index, GdkColor color) {
+public static final native void _gtk_style_get_text(long /*int*/ style, int index, GdkColor color);
+public static final void gtk_style_get_text(long /*int*/ style, int index, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_style_get_text(style, index, color);
@@ -7389,8 +7389,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_style_get_xthickness(int /*long*/ style);
-public static final int gtk_style_get_xthickness(int /*long*/ style) {
+public static final native int _gtk_style_get_xthickness(long /*int*/ style);
+public static final int gtk_style_get_xthickness(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_xthickness(style);
@@ -7398,8 +7398,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_style_get_ythickness(int /*long*/ style);
-public static final int gtk_style_get_ythickness(int /*long*/ style) {
+public static final native int _gtk_style_get_ythickness(long /*int*/ style);
+public static final int gtk_style_get_ythickness(long /*int*/ style) {
 	lock.lock();
 	try {
 		return _gtk_style_get_ythickness(style);
@@ -7407,8 +7407,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_style_render_icon(int /*long*/ style, int /*long*/ source, int direction, int state, int size, int /*long*/ widget, byte[] detail);
-public static final int /*long*/ gtk_style_render_icon(int /*long*/ style, int /*long*/ source, int direction, int state, int size, int /*long*/ widget, byte[] detail) {
+public static final native long /*int*/ _gtk_style_render_icon(long /*int*/ style, long /*int*/ source, int direction, int state, int size, long /*int*/ widget, byte[] detail);
+public static final long /*int*/ gtk_style_render_icon(long /*int*/ style, long /*int*/ source, int direction, int state, int size, long /*int*/ widget, byte[] detail) {
 	lock.lock();
 	try {
 		return _gtk_style_render_icon(style, source, direction, state, size, widget, detail);
@@ -7416,8 +7416,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_target_list_new(int /*long*/ targets, int ntargets);
-public static final int /*long*/ gtk_target_list_new(int /*long*/ targets, int ntargets) {
+public static final native long /*int*/ _gtk_target_list_new(long /*int*/ targets, int ntargets);
+public static final long /*int*/ gtk_target_list_new(long /*int*/ targets, int ntargets) {
 	lock.lock();
 	try {
 		return _gtk_target_list_new(targets, ntargets);
@@ -7425,8 +7425,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_target_list_unref(int /*long*/ list);
-public static final void gtk_target_list_unref(int /*long*/ list) {
+public static final native void _gtk_target_list_unref(long /*int*/ list);
+public static final void gtk_target_list_unref(long /*int*/ list) {
 	lock.lock();
 	try {
 		_gtk_target_list_unref(list);
@@ -7434,8 +7434,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_copy_clipboard(int /*long*/ buffer, int /*long*/ clipboard);
-public static final void gtk_text_buffer_copy_clipboard(int /*long*/ buffer, int /*long*/ clipboard) {
+public static final native void _gtk_text_buffer_copy_clipboard(long /*int*/ buffer, long /*int*/ clipboard);
+public static final void gtk_text_buffer_copy_clipboard(long /*int*/ buffer, long /*int*/ clipboard) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_copy_clipboard(buffer, clipboard);
@@ -7443,8 +7443,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_cut_clipboard(int /*long*/ buffer, int /*long*/ clipboard, boolean default_editable);
-public static final void gtk_text_buffer_cut_clipboard(int /*long*/ buffer, int /*long*/ clipboard, boolean default_editable) {
+public static final native void _gtk_text_buffer_cut_clipboard(long /*int*/ buffer, long /*int*/ clipboard, boolean default_editable);
+public static final void gtk_text_buffer_cut_clipboard(long /*int*/ buffer, long /*int*/ clipboard, boolean default_editable) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_cut_clipboard(buffer, clipboard, default_editable);
@@ -7452,8 +7452,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_delete(int /*long*/ buffer, byte[] start, byte[] end);
-public static final void gtk_text_buffer_delete(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native void _gtk_text_buffer_delete(long /*int*/ buffer, byte[] start, byte[] end);
+public static final void gtk_text_buffer_delete(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_delete(buffer, start, end);
@@ -7461,8 +7461,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_get_bounds(int /*long*/ buffer, byte[] start, byte[] end);
-public static final void gtk_text_buffer_get_bounds(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native void _gtk_text_buffer_get_bounds(long /*int*/ buffer, byte[] start, byte[] end);
+public static final void gtk_text_buffer_get_bounds(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_bounds(buffer, start, end);
@@ -7470,8 +7470,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_text_buffer_get_char_count(int /*long*/ buffer);
-public static final int gtk_text_buffer_get_char_count(int /*long*/ buffer) {
+public static final native int _gtk_text_buffer_get_char_count(long /*int*/ buffer);
+public static final int gtk_text_buffer_get_char_count(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_char_count(buffer);
@@ -7479,8 +7479,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_get_end_iter(int /*long*/ buffer, byte[] iter);
-public static final void gtk_text_buffer_get_end_iter(int /*long*/ buffer, byte[] iter) {
+public static final native void _gtk_text_buffer_get_end_iter(long /*int*/ buffer, byte[] iter);
+public static final void gtk_text_buffer_get_end_iter(long /*int*/ buffer, byte[] iter) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_end_iter(buffer, iter);
@@ -7488,8 +7488,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_buffer_get_insert(int /*long*/ buffer);
-public static final int /*long*/ gtk_text_buffer_get_insert(int /*long*/ buffer) {
+public static final native long /*int*/ _gtk_text_buffer_get_insert(long /*int*/ buffer);
+public static final long /*int*/ gtk_text_buffer_get_insert(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_insert(buffer);
@@ -7497,8 +7497,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_get_iter_at_line(int /*long*/ buffer, byte[] iter, int line_number);
-public static final void gtk_text_buffer_get_iter_at_line(int /*long*/ buffer, byte[] iter, int line_number) {
+public static final native void _gtk_text_buffer_get_iter_at_line(long /*int*/ buffer, byte[] iter, int line_number);
+public static final void gtk_text_buffer_get_iter_at_line(long /*int*/ buffer, byte[] iter, int line_number) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_line(buffer, iter, line_number);
@@ -7506,8 +7506,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_get_iter_at_mark(int /*long*/ buffer, byte[] iter, int /*long*/ mark);
-public static final void gtk_text_buffer_get_iter_at_mark(int /*long*/ buffer, byte[] iter, int /*long*/ mark) {
+public static final native void _gtk_text_buffer_get_iter_at_mark(long /*int*/ buffer, byte[] iter, long /*int*/ mark);
+public static final void gtk_text_buffer_get_iter_at_mark(long /*int*/ buffer, byte[] iter, long /*int*/ mark) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_mark(buffer, iter, mark);
@@ -7515,8 +7515,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_get_iter_at_offset(int /*long*/ buffer, byte[] iter, int char_offset);
-public static final void gtk_text_buffer_get_iter_at_offset(int /*long*/ buffer, byte[] iter, int char_offset) {
+public static final native void _gtk_text_buffer_get_iter_at_offset(long /*int*/ buffer, byte[] iter, int char_offset);
+public static final void gtk_text_buffer_get_iter_at_offset(long /*int*/ buffer, byte[] iter, int char_offset) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_get_iter_at_offset(buffer, iter, char_offset);
@@ -7524,8 +7524,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_text_buffer_get_line_count(int /*long*/ buffer);
-public static final int gtk_text_buffer_get_line_count(int /*long*/ buffer) {
+public static final native int _gtk_text_buffer_get_line_count(long /*int*/ buffer);
+public static final int gtk_text_buffer_get_line_count(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_line_count(buffer);
@@ -7533,8 +7533,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_buffer_get_selection_bound(int /*long*/ buffer);
-public static final int /*long*/ gtk_text_buffer_get_selection_bound(int /*long*/ buffer) {
+public static final native long /*int*/ _gtk_text_buffer_get_selection_bound(long /*int*/ buffer);
+public static final long /*int*/ gtk_text_buffer_get_selection_bound(long /*int*/ buffer) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_selection_bound(buffer);
@@ -7542,8 +7542,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_text_buffer_get_selection_bounds(int /*long*/ buffer, byte[] start, byte[] end);
-public static final boolean gtk_text_buffer_get_selection_bounds(int /*long*/ buffer, byte[] start, byte[] end) {
+public static final native boolean _gtk_text_buffer_get_selection_bounds(long /*int*/ buffer, byte[] start, byte[] end);
+public static final boolean gtk_text_buffer_get_selection_bounds(long /*int*/ buffer, byte[] start, byte[] end) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_selection_bounds(buffer, start, end);
@@ -7551,8 +7551,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_buffer_get_text(int /*long*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars);
-public static final int /*long*/ gtk_text_buffer_get_text(int /*long*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars) {
+public static final native long /*int*/ _gtk_text_buffer_get_text(long /*int*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars);
+public static final long /*int*/ gtk_text_buffer_get_text(long /*int*/ buffer, byte[] start, byte[] end, boolean include_hidden_chars) {
 	lock.lock();
 	try {
 		return _gtk_text_buffer_get_text(buffer, start, end, include_hidden_chars);
@@ -7560,8 +7560,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_insert(int /*long*/ buffer, byte[] iter, byte[] text, int len);
-public static final void gtk_text_buffer_insert(int /*long*/ buffer, byte[] iter, byte[] text, int len) {
+public static final native void _gtk_text_buffer_insert(long /*int*/ buffer, byte[] iter, byte[] text, int len);
+public static final void gtk_text_buffer_insert(long /*int*/ buffer, byte[] iter, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_insert(buffer, iter, text, len);
@@ -7569,8 +7569,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_insert(int /*long*/ buffer, int /*long*/ iter, byte[] text, int len);
-public static final void gtk_text_buffer_insert(int /*long*/ buffer, int /*long*/ iter, byte[] text, int len) {
+public static final native void _gtk_text_buffer_insert(long /*int*/ buffer, long /*int*/ iter, byte[] text, int len);
+public static final void gtk_text_buffer_insert(long /*int*/ buffer, long /*int*/ iter, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_insert(buffer, iter, text, len);
@@ -7578,8 +7578,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_move_mark(int /*long*/ buffer, int /*long*/ mark, byte[] where);
-public static final void gtk_text_buffer_move_mark(int /*long*/ buffer, int /*long*/ mark, byte[] where) {
+public static final native void _gtk_text_buffer_move_mark(long /*int*/ buffer, long /*int*/ mark, byte[] where);
+public static final void gtk_text_buffer_move_mark(long /*int*/ buffer, long /*int*/ mark, byte[] where) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_move_mark(buffer, mark, where);
@@ -7587,8 +7587,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_paste_clipboard(int /*long*/ buffer, int /*long*/ clipboard, byte[] override_location, boolean default_editable);
-public static final void gtk_text_buffer_paste_clipboard(int /*long*/ buffer, int /*long*/ clipboard, byte[] override_location, boolean default_editable) {
+public static final native void _gtk_text_buffer_paste_clipboard(long /*int*/ buffer, long /*int*/ clipboard, byte[] override_location, boolean default_editable);
+public static final void gtk_text_buffer_paste_clipboard(long /*int*/ buffer, long /*int*/ clipboard, byte[] override_location, boolean default_editable) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_paste_clipboard(buffer, clipboard, override_location, default_editable);
@@ -7596,8 +7596,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_place_cursor(int /*long*/ buffer, byte[] where);
-public static final void gtk_text_buffer_place_cursor(int /*long*/ buffer, byte[] where) {
+public static final native void _gtk_text_buffer_place_cursor(long /*int*/ buffer, byte[] where);
+public static final void gtk_text_buffer_place_cursor(long /*int*/ buffer, byte[] where) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_place_cursor(buffer, where);
@@ -7605,8 +7605,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_buffer_set_text(int /*long*/ buffer, byte[] text, int len);
-public static final void gtk_text_buffer_set_text(int /*long*/ buffer, byte[] text, int len) {
+public static final native void _gtk_text_buffer_set_text(long /*int*/ buffer, byte[] text, int len);
+public static final void gtk_text_buffer_set_text(long /*int*/ buffer, byte[] text, int len) {
 	lock.lock();
 	try {
 		_gtk_text_buffer_set_text(buffer, text, len);
@@ -7632,8 +7632,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_buffer_to_window_coords(int /*long*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y);
-public static final void gtk_text_view_buffer_to_window_coords(int /*long*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y) {
+public static final native void _gtk_text_view_buffer_to_window_coords(long /*int*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y);
+public static final void gtk_text_view_buffer_to_window_coords(long /*int*/ text_view, int win, int buffer_x, int buffer_y, int[] window_x, int[] window_y) {
 	lock.lock();
 	try {
 		_gtk_text_view_buffer_to_window_coords(text_view, win, buffer_x, buffer_y, window_x, window_y);
@@ -7641,8 +7641,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_view_get_buffer(int /*long*/ text_view);
-public static final int /*long*/ gtk_text_view_get_buffer(int /*long*/ text_view) {
+public static final native long /*int*/ _gtk_text_view_get_buffer(long /*int*/ text_view);
+public static final long /*int*/ gtk_text_view_get_buffer(long /*int*/ text_view) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_buffer(text_view);
@@ -7650,8 +7650,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_text_view_get_editable(int /*long*/ text_view);
-public static final boolean gtk_text_view_get_editable(int /*long*/ text_view) {
+public static final native boolean _gtk_text_view_get_editable(long /*int*/ text_view);
+public static final boolean gtk_text_view_get_editable(long /*int*/ text_view) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_editable(text_view);
@@ -7659,8 +7659,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_get_iter_at_location(int /*long*/ text_view, byte[] iter, int x, int y);
-public static final void gtk_text_view_get_iter_at_location(int /*long*/ text_view, byte[] iter, int x, int y) {
+public static final native void _gtk_text_view_get_iter_at_location(long /*int*/ text_view, byte[] iter, int x, int y);
+public static final void gtk_text_view_get_iter_at_location(long /*int*/ text_view, byte[] iter, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_iter_at_location(text_view, iter, x, y);
@@ -7668,8 +7668,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_get_iter_location(int /*long*/ text_view, byte[] iter, GdkRectangle location);
-public static final void gtk_text_view_get_iter_location(int /*long*/ text_view, byte[] iter, GdkRectangle location) {
+public static final native void _gtk_text_view_get_iter_location(long /*int*/ text_view, byte[] iter, GdkRectangle location);
+public static final void gtk_text_view_get_iter_location(long /*int*/ text_view, byte[] iter, GdkRectangle location) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_iter_location(text_view, iter, location);
@@ -7677,8 +7677,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_get_line_at_y(int /*long*/ text_view, byte[] target_iter, int y, int[] line_top);
-public static final void gtk_text_view_get_line_at_y(int /*long*/ text_view, byte[] target_iter, int y, int[] line_top) {
+public static final native void _gtk_text_view_get_line_at_y(long /*int*/ text_view, byte[] target_iter, int y, int[] line_top);
+public static final void gtk_text_view_get_line_at_y(long /*int*/ text_view, byte[] target_iter, int y, int[] line_top) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_line_at_y(text_view, target_iter, y, line_top);
@@ -7686,8 +7686,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_get_visible_rect(int /*long*/ text_view, GdkRectangle visible_rect);
-public static final void gtk_text_view_get_visible_rect(int /*long*/ text_view, GdkRectangle visible_rect) {
+public static final native void _gtk_text_view_get_visible_rect(long /*int*/ text_view, GdkRectangle visible_rect);
+public static final void gtk_text_view_get_visible_rect(long /*int*/ text_view, GdkRectangle visible_rect) {
 	lock.lock();
 	try {
 		_gtk_text_view_get_visible_rect(text_view, visible_rect);
@@ -7695,8 +7695,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_view_get_window(int /*long*/ text_view, int win);
-public static final int /*long*/ gtk_text_view_get_window(int /*long*/ text_view, int win) {
+public static final native long /*int*/ _gtk_text_view_get_window(long /*int*/ text_view, int win);
+public static final long /*int*/ gtk_text_view_get_window(long /*int*/ text_view, int win) {
 	lock.lock();
 	try {
 		return _gtk_text_view_get_window(text_view, win);
@@ -7704,8 +7704,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_text_view_new();
-public static final int /*long*/ gtk_text_view_new() {
+public static final native long /*int*/ _gtk_text_view_new();
+public static final long /*int*/ gtk_text_view_new() {
 	lock.lock();
 	try {
 		return _gtk_text_view_new();
@@ -7713,8 +7713,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_scroll_mark_onscreen(int /*long*/ text_view, int /*long*/ mark);
-public static final void gtk_text_view_scroll_mark_onscreen(int /*long*/ text_view, int /*long*/ mark) {
+public static final native void _gtk_text_view_scroll_mark_onscreen(long /*int*/ text_view, long /*int*/ mark);
+public static final void gtk_text_view_scroll_mark_onscreen(long /*int*/ text_view, long /*int*/ mark) {
 	lock.lock();
 	try {
 		_gtk_text_view_scroll_mark_onscreen(text_view, mark);
@@ -7722,8 +7722,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_text_view_scroll_to_iter(int /*long*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign);
-public static final boolean gtk_text_view_scroll_to_iter(int /*long*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign) {
+public static final native boolean _gtk_text_view_scroll_to_iter(long /*int*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign);
+public static final boolean gtk_text_view_scroll_to_iter(long /*int*/ text_view, byte[] iter, double within_margin, boolean use_align, double xalign, double yalign) {
 	lock.lock();
 	try {
 		return _gtk_text_view_scroll_to_iter(text_view, iter, within_margin, use_align, xalign, yalign);
@@ -7731,8 +7731,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_set_editable(int /*long*/ text_view, boolean setting);
-public static final void gtk_text_view_set_editable(int /*long*/ text_view, boolean setting) {
+public static final native void _gtk_text_view_set_editable(long /*int*/ text_view, boolean setting);
+public static final void gtk_text_view_set_editable(long /*int*/ text_view, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_editable(text_view, setting);
@@ -7740,8 +7740,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_set_justification(int /*long*/ text_view, int justification);
-public static final void gtk_text_view_set_justification(int /*long*/ text_view, int justification) {
+public static final native void _gtk_text_view_set_justification(long /*int*/ text_view, int justification);
+public static final void gtk_text_view_set_justification(long /*int*/ text_view, int justification) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_justification(text_view, justification);
@@ -7749,8 +7749,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_set_tabs(int /*long*/ text_view, int /*long*/ tabs);
-public static final void gtk_text_view_set_tabs(int /*long*/ text_view, int /*long*/ tabs) {
+public static final native void _gtk_text_view_set_tabs(long /*int*/ text_view, long /*int*/ tabs);
+public static final void gtk_text_view_set_tabs(long /*int*/ text_view, long /*int*/ tabs) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_tabs(text_view, tabs);
@@ -7758,8 +7758,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_set_wrap_mode(int /*long*/ text_view, int wrap_mode);
-public static final void gtk_text_view_set_wrap_mode(int /*long*/ text_view, int wrap_mode) {
+public static final native void _gtk_text_view_set_wrap_mode(long /*int*/ text_view, int wrap_mode);
+public static final void gtk_text_view_set_wrap_mode(long /*int*/ text_view, int wrap_mode) {
 	lock.lock();
 	try {
 		_gtk_text_view_set_wrap_mode(text_view, wrap_mode);
@@ -7767,8 +7767,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_text_view_window_to_buffer_coords(int /*long*/ text_view, int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y);
-public static final void gtk_text_view_window_to_buffer_coords(int /*long*/ text_view,  int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y) {
+public static final native void _gtk_text_view_window_to_buffer_coords(long /*int*/ text_view, int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y);
+public static final void gtk_text_view_window_to_buffer_coords(long /*int*/ text_view,  int win, int window_x, int window_y, int[] buffer_x, int[] buffer_y) {
 	lock.lock();
 	try {
 		_gtk_text_view_window_to_buffer_coords(text_view, win, window_x, window_y, buffer_x, buffer_y);
@@ -7776,8 +7776,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_timeout_add(int interval, int /*long*/ function, int /*long*/ data);
-public static final int gtk_timeout_add(int interval, int /*long*/ function, int /*long*/ data) {
+public static final native int _gtk_timeout_add(int interval, long /*int*/ function, long /*int*/ data);
+public static final int gtk_timeout_add(int interval, long /*int*/ function, long /*int*/ data) {
 	lock.lock();
 	try {
 		return _gtk_timeout_add(interval, function, data);
@@ -7794,8 +7794,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_toggle_button_get_active(int /*long*/ toggle_button);
-public static final boolean gtk_toggle_button_get_active(int /*long*/ toggle_button) {
+public static final native boolean _gtk_toggle_button_get_active(long /*int*/ toggle_button);
+public static final boolean gtk_toggle_button_get_active(long /*int*/ toggle_button) {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_get_active(toggle_button);
@@ -7803,8 +7803,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_toggle_button_new();
-public static final int /*long*/ gtk_toggle_button_new() {
+public static final native long /*int*/ _gtk_toggle_button_new();
+public static final long /*int*/ gtk_toggle_button_new() {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_new();
@@ -7812,8 +7812,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_toggle_button_get_inconsistent(int /*long*/ toggle_button);
-public static final boolean gtk_toggle_button_get_inconsistent(int /*long*/ toggle_button) {
+public static final native boolean _gtk_toggle_button_get_inconsistent(long /*int*/ toggle_button);
+public static final boolean gtk_toggle_button_get_inconsistent(long /*int*/ toggle_button) {
 	lock.lock();
 	try {
 		return _gtk_toggle_button_get_inconsistent(toggle_button);
@@ -7821,8 +7821,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_toggle_button_set_active(int /*long*/ toggle_button, boolean is_active);
-public static final void gtk_toggle_button_set_active(int /*long*/ toggle_button, boolean is_active) {
+public static final native void _gtk_toggle_button_set_active(long /*int*/ toggle_button, boolean is_active);
+public static final void gtk_toggle_button_set_active(long /*int*/ toggle_button, boolean is_active) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_active(toggle_button, is_active);
@@ -7830,8 +7830,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_toggle_button_set_inconsistent(int /*long*/ toggle_button, boolean setting);
-public static final void gtk_toggle_button_set_inconsistent(int /*long*/ toggle_button, boolean setting) {
+public static final native void _gtk_toggle_button_set_inconsistent(long /*int*/ toggle_button, boolean setting);
+public static final void gtk_toggle_button_set_inconsistent(long /*int*/ toggle_button, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_inconsistent(toggle_button, setting);
@@ -7839,8 +7839,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_toggle_button_set_mode(int /*long*/ toggle_button, boolean draw_indicator);
-public static final void gtk_toggle_button_set_mode(int /*long*/ toggle_button, boolean draw_indicator) {
+public static final native void _gtk_toggle_button_set_mode(long /*int*/ toggle_button, boolean draw_indicator);
+public static final void gtk_toggle_button_set_mode(long /*int*/ toggle_button, boolean draw_indicator) {
 	lock.lock();
 	try {
 		_gtk_toggle_button_set_mode(toggle_button, draw_indicator);
@@ -7848,8 +7848,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_toolbar_insert_widget(int /*long*/ toolbar, int /*long*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position);
-public static final void gtk_toolbar_insert_widget(int /*long*/ toolbar, int /*long*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position) {
+public static final native void _gtk_toolbar_insert_widget(long /*int*/ toolbar, long /*int*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position);
+public static final void gtk_toolbar_insert_widget(long /*int*/ toolbar, long /*int*/ widget, byte[] tooltip_text, byte[] tooltip_private_text, int position) {
 	lock.lock();
 	try {
 		_gtk_toolbar_insert_widget(toolbar, widget, tooltip_text, tooltip_private_text, position);
@@ -7857,8 +7857,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_toolbar_new();
-public static final int /*long*/ gtk_toolbar_new() {
+public static final native long /*int*/ _gtk_toolbar_new();
+public static final long /*int*/ gtk_toolbar_new() {
 	lock.lock();
 	try {
 		return _gtk_toolbar_new();
@@ -7866,8 +7866,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_toolbar_set_orientation(int /*long*/ toolbar, int orientation);
-public static final void gtk_toolbar_set_orientation(int /*long*/ toolbar, int orientation) {
+public static final native void _gtk_toolbar_set_orientation(long /*int*/ toolbar, int orientation);
+public static final void gtk_toolbar_set_orientation(long /*int*/ toolbar, int orientation) {
 	lock.lock();
 	try {
 		_gtk_toolbar_set_orientation(toolbar, orientation);
@@ -7875,8 +7875,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tooltips_data_get(int /*long*/ widget);
-public static final int /*long*/ gtk_tooltips_data_get(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_tooltips_data_get(long /*int*/ widget);
+public static final long /*int*/ gtk_tooltips_data_get(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_tooltips_data_get(widget);
@@ -7884,8 +7884,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tooltips_disable(int /*long*/ tooltips);
-public static final void gtk_tooltips_disable(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_disable(long /*int*/ tooltips);
+public static final void gtk_tooltips_disable(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_disable(tooltips);
@@ -7893,8 +7893,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tooltips_enable(int /*long*/ tooltips);
-public static final void gtk_tooltips_enable(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_enable(long /*int*/ tooltips);
+public static final void gtk_tooltips_enable(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_enable(tooltips);
@@ -7902,8 +7902,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tooltips_new();
-public static final int /*long*/ gtk_tooltips_new() {
+public static final native long /*int*/ _gtk_tooltips_new();
+public static final long /*int*/ gtk_tooltips_new() {
 	lock.lock();
 	try {
 		return _gtk_tooltips_new();
@@ -7911,8 +7911,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tooltips_force_window(int /*long*/ tooltips);
-public static final void gtk_tooltips_force_window(int /*long*/ tooltips) {
+public static final native void _gtk_tooltips_force_window(long /*int*/ tooltips);
+public static final void gtk_tooltips_force_window(long /*int*/ tooltips) {
 	lock.lock();
 	try {
 		_gtk_tooltips_force_window(tooltips);
@@ -7920,8 +7920,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tooltips_set_tip(int /*long*/ tooltips, int /*long*/ widget, byte[] tip_text, byte[] tip_private);
-public static final void gtk_tooltips_set_tip(int /*long*/ tooltips, int /*long*/ widget, byte[] tip_text, byte[] tip_private) {
+public static final native void _gtk_tooltips_set_tip(long /*int*/ tooltips, long /*int*/ widget, byte[] tip_text, byte[] tip_private);
+public static final void gtk_tooltips_set_tip(long /*int*/ tooltips, long /*int*/ widget, byte[] tip_text, byte[] tip_private) {
 	lock.lock();
 	try {
 		_gtk_tooltips_set_tip(tooltips, widget, tip_text, tip_private);
@@ -7929,8 +7929,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, int[] value, int /*long*/ terminator);
-public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, int[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, int[] value, long /*int*/ terminator);
+public static final void gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_model_get(tree_model, iter, column, value, terminator);
@@ -7938,8 +7938,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, long[] value, int /*long*/ terminator);
-public static final void gtk_tree_model_get(int /*long*/ tree_model, int /*long*/ iter, int column, long[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, long[] value, long /*int*/ terminator);
+public static final void gtk_tree_model_get(long /*int*/ tree_model, long /*int*/ iter, int column, long[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_model_get(tree_model, iter, column, value, terminator);
@@ -7947,8 +7947,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_model_get_iter(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ path);
-public static final boolean gtk_tree_model_get_iter(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ path) {
+public static final native boolean _gtk_tree_model_get_iter(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ path);
+public static final boolean gtk_tree_model_get_iter(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_iter(tree_model, iter, path);
@@ -7956,8 +7956,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_model_get_iter_first(int /*long*/ tree_model, int /*long*/ iter);
-public static final boolean gtk_tree_model_get_iter_first(int /*long*/ tree_model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_model_get_iter_first(long /*int*/ tree_model, long /*int*/ iter);
+public static final boolean gtk_tree_model_get_iter_first(long /*int*/ tree_model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_iter_first(tree_model, iter);
@@ -7965,8 +7965,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_model_get_n_columns(int /*long*/ tree_model);
-public static final int gtk_tree_model_get_n_columns(int /*long*/ tree_model) {
+public static final native int _gtk_tree_model_get_n_columns(long /*int*/ tree_model);
+public static final int gtk_tree_model_get_n_columns(long /*int*/ tree_model) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_n_columns(tree_model);
@@ -7974,8 +7974,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_model_get_path(int /*long*/ tree_model, int /*long*/ iter);
-public static final int /*long*/ gtk_tree_model_get_path(int /*long*/ tree_model, int /*long*/ iter) {
+public static final native long /*int*/ _gtk_tree_model_get_path(long /*int*/ tree_model, long /*int*/ iter);
+public static final long /*int*/ gtk_tree_model_get_path(long /*int*/ tree_model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_path(tree_model, iter);
@@ -7983,8 +7983,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_model_get_type();
-public static final int /*long*/ gtk_tree_model_get_type() {
+public static final native long /*int*/ _gtk_tree_model_get_type();
+public static final long /*int*/ gtk_tree_model_get_type() {
 	lock.lock();
 	try {
 		return _gtk_tree_model_get_type();
@@ -7992,8 +7992,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_model_iter_children(int /*long*/ model, int /*long*/ iter, int /*long*/ parent);
-public static final boolean gtk_tree_model_iter_children(int /*long*/ model, int /*long*/ iter, int /*long*/ parent) {
+public static final native boolean _gtk_tree_model_iter_children(long /*int*/ model, long /*int*/ iter, long /*int*/ parent);
+public static final boolean gtk_tree_model_iter_children(long /*int*/ model, long /*int*/ iter, long /*int*/ parent) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_children(model, iter, parent);
@@ -8001,8 +8001,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_model_iter_n_children(int /*long*/ model, int /*long*/ iter);
-public static final int gtk_tree_model_iter_n_children(int /*long*/ model, int /*long*/ iter) {
+public static final native int _gtk_tree_model_iter_n_children(long /*int*/ model, long /*int*/ iter);
+public static final int gtk_tree_model_iter_n_children(long /*int*/ model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_n_children(model, iter);
@@ -8010,8 +8010,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_model_iter_next(int /*long*/ model, int /*long*/ iter);
-public static final boolean gtk_tree_model_iter_next(int /*long*/ model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_model_iter_next(long /*int*/ model, long /*int*/ iter);
+public static final boolean gtk_tree_model_iter_next(long /*int*/ model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_next(model, iter);
@@ -8019,8 +8019,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_model_iter_nth_child(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ parent, int n);
-public static final boolean gtk_tree_model_iter_nth_child(int /*long*/ tree_model, int /*long*/ iter, int /*long*/ parent, int n) {
+public static final native boolean _gtk_tree_model_iter_nth_child(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ parent, int n);
+public static final boolean gtk_tree_model_iter_nth_child(long /*int*/ tree_model, long /*int*/ iter, long /*int*/ parent, int n) {
 	lock.lock();
 	try {
 		return _gtk_tree_model_iter_nth_child(tree_model, iter, parent, n);
@@ -8028,8 +8028,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_path_append_index(int /*long*/ path, int index);
-public static final void gtk_tree_path_append_index(int /*long*/ path, int index) {
+public static final native void _gtk_tree_path_append_index(long /*int*/ path, int index);
+public static final void gtk_tree_path_append_index(long /*int*/ path, int index) {
 	lock.lock();
 	try {
 		_gtk_tree_path_append_index(path, index);
@@ -8037,8 +8037,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_compare(int /*long*/ a, int /*long*/ b);
-public static final int /*long*/ gtk_tree_path_compare(int /*long*/ a, int /*long*/ b) {
+public static final native long /*int*/ _gtk_tree_path_compare(long /*int*/ a, long /*int*/ b);
+public static final long /*int*/ gtk_tree_path_compare(long /*int*/ a, long /*int*/ b) {
 	lock.lock();
 	try {
 		 return _gtk_tree_path_compare(a, b);
@@ -8046,8 +8046,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_path_down(int /*long*/ path);
-public static final void gtk_tree_path_down(int /*long*/ path) {
+public static final native void _gtk_tree_path_down(long /*int*/ path);
+public static final void gtk_tree_path_down(long /*int*/ path) {
 	lock.lock();
 	try {
 		 _gtk_tree_path_down(path);
@@ -8055,8 +8055,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_path_free(int /*long*/ path);
-public static final void gtk_tree_path_free(int /*long*/ path) {
+public static final native void _gtk_tree_path_free(long /*int*/ path);
+public static final void gtk_tree_path_free(long /*int*/ path) {
 	lock.lock();
 	try {
 		_gtk_tree_path_free(path);
@@ -8064,8 +8064,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_path_get_depth(int /*long*/ path);
-public static final int gtk_tree_path_get_depth(int /*long*/ path) {
+public static final native int _gtk_tree_path_get_depth(long /*int*/ path);
+public static final int gtk_tree_path_get_depth(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_get_depth(path);
@@ -8073,8 +8073,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_get_indices(int /*long*/ path);
-public static final int /*long*/ gtk_tree_path_get_indices(int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_path_get_indices(long /*int*/ path);
+public static final long /*int*/ gtk_tree_path_get_indices(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_get_indices(path);
@@ -8082,8 +8082,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new();
-public static final int /*long*/ gtk_tree_path_new() {
+public static final native long /*int*/ _gtk_tree_path_new();
+public static final long /*int*/ gtk_tree_path_new() {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new();
@@ -8091,8 +8091,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new_first();
-public static final int /*long*/ gtk_tree_path_new_first() {
+public static final native long /*int*/ _gtk_tree_path_new_first();
+public static final long /*int*/ gtk_tree_path_new_first() {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_first();
@@ -8100,8 +8100,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new_from_string(byte[] path);
-public static final int /*long*/ gtk_tree_path_new_from_string(byte[] path) {
+public static final native long /*int*/ _gtk_tree_path_new_from_string(byte[] path);
+public static final long /*int*/ gtk_tree_path_new_from_string(byte[] path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_from_string(path);
@@ -8109,8 +8109,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_path_new_from_string(int /*long*/ path);
-public static final int /*long*/ gtk_tree_path_new_from_string(int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_path_new_from_string(long /*int*/ path);
+public static final long /*int*/ gtk_tree_path_new_from_string(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_new_from_string(path);
@@ -8118,8 +8118,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_path_next(int /*long*/ path);
-public static final void gtk_tree_path_next(int /*long*/ path) {
+public static final native void _gtk_tree_path_next(long /*int*/ path);
+public static final void gtk_tree_path_next(long /*int*/ path) {
 	lock.lock();
 	try {
 		_gtk_tree_path_next(path);
@@ -8127,8 +8127,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_path_prev(int /*long*/ path);
-public static final boolean gtk_tree_path_prev(int /*long*/ path) {
+public static final native boolean _gtk_tree_path_prev(long /*int*/ path);
+public static final boolean gtk_tree_path_prev(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_prev(path);
@@ -8136,8 +8136,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_path_up(int /*long*/ path);
-public static final boolean gtk_tree_path_up(int /*long*/ path) {
+public static final native boolean _gtk_tree_path_up(long /*int*/ path);
+public static final boolean gtk_tree_path_up(long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_path_up(path);
@@ -8145,8 +8145,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_selection_count_selected_rows(int /*long*/ selection);
-public static final int gtk_tree_selection_count_selected_rows(int /*long*/ selection) {
+public static final native int _gtk_tree_selection_count_selected_rows(long /*int*/ selection);
+public static final int gtk_tree_selection_count_selected_rows(long /*int*/ selection) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_count_selected_rows(selection);
@@ -8154,8 +8154,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_selection_get_selected(int /*long*/ selection, int /*long*/[] model, int /*long*/ iter);
-public static final boolean gtk_tree_selection_get_selected(int /*long*/ selection, int /*long*/[] model, int /*long*/ iter) {
+public static final native boolean _gtk_tree_selection_get_selected(long /*int*/ selection, long /*int*/[] model, long /*int*/ iter);
+public static final boolean gtk_tree_selection_get_selected(long /*int*/ selection, long /*int*/[] model, long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_get_selected(selection, model, iter);
@@ -8163,8 +8163,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_selection_get_selected_rows(int /*long*/ selection, int /*long*/[] model);
-public static final int /*long*/ gtk_tree_selection_get_selected_rows(int /*long*/ selection, int /*long*/[] model) {
+public static final native long /*int*/ _gtk_tree_selection_get_selected_rows(long /*int*/ selection, long /*int*/[] model);
+public static final long /*int*/ gtk_tree_selection_get_selected_rows(long /*int*/ selection, long /*int*/[] model) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_get_selected_rows(selection, model);
@@ -8172,8 +8172,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_selection_path_is_selected(int /*long*/ selection, int /*long*/ path);
-public static final boolean gtk_tree_selection_path_is_selected(int /*long*/ selection, int /*long*/ path) {
+public static final native boolean _gtk_tree_selection_path_is_selected(long /*int*/ selection, long /*int*/ path);
+public static final boolean gtk_tree_selection_path_is_selected(long /*int*/ selection, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_selection_path_is_selected(selection, path);
@@ -8181,8 +8181,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_select_all(int /*long*/ selection);
-public static final void gtk_tree_selection_select_all(int /*long*/ selection) {
+public static final native void _gtk_tree_selection_select_all(long /*int*/ selection);
+public static final void gtk_tree_selection_select_all(long /*int*/ selection) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_select_all(selection);
@@ -8190,8 +8190,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_select_iter(int /*long*/ selection, int /*long*/ iter);
-public static final void gtk_tree_selection_select_iter(int /*long*/ selection, int /*long*/ iter) {
+public static final native void _gtk_tree_selection_select_iter(long /*int*/ selection, long /*int*/ iter);
+public static final void gtk_tree_selection_select_iter(long /*int*/ selection, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_select_iter(selection, iter);
@@ -8199,8 +8199,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_selected_foreach(int /*long*/ selection, int /*long*/ func, int /*long*/ data);
-public static final void gtk_tree_selection_selected_foreach(int /*long*/ selection, int /*long*/ func, int /*long*/ data) {
+public static final native void _gtk_tree_selection_selected_foreach(long /*int*/ selection, long /*int*/ func, long /*int*/ data);
+public static final void gtk_tree_selection_selected_foreach(long /*int*/ selection, long /*int*/ func, long /*int*/ data) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_selected_foreach(selection, func, data);
@@ -8208,8 +8208,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_set_mode(int /*long*/ selection, int mode);
-public static final void gtk_tree_selection_set_mode(int /*long*/ selection, int mode) {
+public static final native void _gtk_tree_selection_set_mode(long /*int*/ selection, int mode);
+public static final void gtk_tree_selection_set_mode(long /*int*/ selection, int mode) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_set_mode(selection, mode);
@@ -8217,8 +8217,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_unselect_all(int /*long*/ selection);
-public static final void gtk_tree_selection_unselect_all(int /*long*/ selection) {
+public static final native void _gtk_tree_selection_unselect_all(long /*int*/ selection);
+public static final void gtk_tree_selection_unselect_all(long /*int*/ selection) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_unselect_all(selection);
@@ -8226,8 +8226,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_selection_unselect_iter(int /*long*/ selection, int /*long*/ iter);
-public static final void gtk_tree_selection_unselect_iter(int /*long*/ selection, int /*long*/ iter) {
+public static final native void _gtk_tree_selection_unselect_iter(long /*int*/ selection, long /*int*/ iter);
+public static final void gtk_tree_selection_unselect_iter(long /*int*/ selection, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_selection_unselect_iter(selection, iter);
@@ -8235,8 +8235,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_append(int /*long*/ store, int /*long*/ iter, int /*long*/ parent);
-public static final void gtk_tree_store_append(int /*long*/ store, int /*long*/ iter, int /*long*/ parent) {
+public static final native void _gtk_tree_store_append(long /*int*/ store, long /*int*/ iter, long /*int*/ parent);
+public static final void gtk_tree_store_append(long /*int*/ store, long /*int*/ iter, long /*int*/ parent) {
 	lock.lock();
 	try {
 		_gtk_tree_store_append(store, iter, parent);
@@ -8244,8 +8244,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_clear(int /*long*/ store);
-public static final void gtk_tree_store_clear(int /*long*/ store) {
+public static final native void _gtk_tree_store_clear(long /*int*/ store);
+public static final void gtk_tree_store_clear(long /*int*/ store) {
 	lock.lock();
 	try {
 		_gtk_tree_store_clear(store);
@@ -8253,8 +8253,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_insert(int /*long*/ store, int /*long*/ iter, int /*long*/ parent, int position);
-public static final void gtk_tree_store_insert(int /*long*/ store, int /*long*/ iter, int /*long*/ parent, int position) {
+public static final native void _gtk_tree_store_insert(long /*int*/ store, long /*int*/ iter, long /*int*/ parent, int position);
+public static final void gtk_tree_store_insert(long /*int*/ store, long /*int*/ iter, long /*int*/ parent, int position) {
 	lock.lock();
 	try {
 		_gtk_tree_store_insert(store, iter, parent, position);
@@ -8262,8 +8262,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_store_newv(int numColumns, int /*long*/[] types);
-public static final int /*long*/ gtk_tree_store_newv(int numColumns, int /*long*/[] types) {
+public static final native long /*int*/ _gtk_tree_store_newv(int numColumns, long /*int*/[] types);
+public static final long /*int*/ gtk_tree_store_newv(int numColumns, long /*int*/[] types) {
 	lock.lock();
 	try {
 		return _gtk_tree_store_newv(numColumns, types);
@@ -8271,8 +8271,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_remove(int /*long*/ store, int /*long*/ iter);
-public static final void gtk_tree_store_remove(int /*long*/ store, int /*long*/ iter) {
+public static final native void _gtk_tree_store_remove(long /*int*/ store, long /*int*/ iter);
+public static final void gtk_tree_store_remove(long /*int*/ store, long /*int*/ iter) {
 	lock.lock();
 	try {
 		_gtk_tree_store_remove(store, iter);
@@ -8280,8 +8280,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, byte[] value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, byte[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -8289,8 +8289,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, int value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, int value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -8298,8 +8298,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, long value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, long value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -8307,8 +8307,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, GdkColor value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, GdkColor value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -8316,8 +8316,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator);
-public static final void gtk_tree_store_set(int /*long*/ store, int /*long*/ iter, int column, boolean value, int /*long*/ terminator) {
+public static final native void _gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator);
+public static final void gtk_tree_store_set(long /*int*/ store, long /*int*/ iter, int column, boolean value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_tree_store_set(store, iter, column, value, terminator);
@@ -8325,8 +8325,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_create_row_drag_icon(int /*long*/ view, int /*long*/ path);
-public static final int /*long*/ gtk_tree_view_create_row_drag_icon(int /*long*/ view, int /*long*/ path) {
+public static final native long /*int*/ _gtk_tree_view_create_row_drag_icon(long /*int*/ view, long /*int*/ path);
+public static final long /*int*/ gtk_tree_view_create_row_drag_icon(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_create_row_drag_icon(view, path);
@@ -8334,8 +8334,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_collapse_row(int /*long*/ view, int /*long*/ path);
-public static final boolean gtk_tree_view_collapse_row(int /*long*/ view, int /*long*/ path) {
+public static final native boolean _gtk_tree_view_collapse_row(long /*int*/ view, long /*int*/ path);
+public static final boolean gtk_tree_view_collapse_row(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_collapse_row(view, path);
@@ -8343,8 +8343,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_add_attribute(int /*long*/ treeColumn, int /*long*/ cellRenderer, byte[] attribute, int column);
-public static final void gtk_tree_view_column_add_attribute(int /*long*/ treeColumn, int /*long*/ cellRenderer, byte[] attribute, int column) {
+public static final native void _gtk_tree_view_column_add_attribute(long /*int*/ treeColumn, long /*int*/ cellRenderer, byte[] attribute, int column);
+public static final void gtk_tree_view_column_add_attribute(long /*int*/ treeColumn, long /*int*/ cellRenderer, byte[] attribute, int column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_add_attribute(treeColumn, cellRenderer, attribute, column);
@@ -8352,8 +8352,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_column_cell_get_position(int /*long*/ tree_column, int /*long*/ cell_renderer, int[] start_pos, int[] width);
-public static final boolean gtk_tree_view_column_cell_get_position(int /*long*/ tree_column, int /*long*/ cell_renderer, int[] start_pos, int[] width) {
+public static final native boolean _gtk_tree_view_column_cell_get_position(long /*int*/ tree_column, long /*int*/ cell_renderer, int[] start_pos, int[] width);
+public static final boolean gtk_tree_view_column_cell_get_position(long /*int*/ tree_column, long /*int*/ cell_renderer, int[] start_pos, int[] width) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_cell_get_position(tree_column, cell_renderer, start_pos, width);
@@ -8361,8 +8361,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_cell_get_size(int /*long*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height);
-public static final void gtk_tree_view_column_cell_get_size(int /*long*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
+public static final native void _gtk_tree_view_column_cell_get_size(long /*int*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height);
+public static final void gtk_tree_view_column_cell_get_size(long /*int*/ tree_column, GdkRectangle cell_area, int[] x_offset, int[] y_offset, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_cell_get_size(tree_column, cell_area, x_offset, y_offset, width, height);
@@ -8370,8 +8370,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_cell_set_cell_data(int /*long*/ tree_column, int /*long*/ tree_model, int /*long*/ iter, boolean is_expander, boolean is_expanded);
-public static final void gtk_tree_view_column_cell_set_cell_data(int /*long*/ tree_column, int /*long*/ tree_model, int /*long*/ iter, boolean is_expander, boolean is_expanded) {
+public static final native void _gtk_tree_view_column_cell_set_cell_data(long /*int*/ tree_column, long /*int*/ tree_model, long /*int*/ iter, boolean is_expander, boolean is_expanded);
+public static final void gtk_tree_view_column_cell_set_cell_data(long /*int*/ tree_column, long /*int*/ tree_model, long /*int*/ iter, boolean is_expander, boolean is_expanded) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_cell_set_cell_data(tree_column, tree_model, iter, is_expander, is_expanded);
@@ -8379,8 +8379,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_clear(int /*long*/ tree_column);
-public static final void gtk_tree_view_column_clear(int /*long*/ tree_column) {
+public static final native void _gtk_tree_view_column_clear(long /*int*/ tree_column);
+public static final void gtk_tree_view_column_clear(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_clear(tree_column);
@@ -8388,8 +8388,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_column_get_cell_renderers(int /*long*/ tree_column);
-public static final int /*long*/ gtk_tree_view_column_get_cell_renderers(int /*long*/ tree_column) {
+public static final native long /*int*/ _gtk_tree_view_column_get_cell_renderers(long /*int*/ tree_column);
+public static final long /*int*/ gtk_tree_view_column_get_cell_renderers(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_cell_renderers(tree_column);
@@ -8397,8 +8397,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_column_get_fixed_width(int /*long*/ column);
-public static final int gtk_tree_view_column_get_fixed_width(int /*long*/ column) {
+public static final native int _gtk_tree_view_column_get_fixed_width(long /*int*/ column);
+public static final int gtk_tree_view_column_get_fixed_width(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_fixed_width(column);
@@ -8406,8 +8406,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_column_get_reorderable(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_reorderable(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_reorderable(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_reorderable(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_reorderable(column);
@@ -8415,8 +8415,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_column_get_resizable(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_resizable(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_resizable(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_resizable(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_resizable(column);
@@ -8424,8 +8424,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_column_get_sizing(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_sizing(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_sizing(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_sizing(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sizing(tree_column);
@@ -8433,8 +8433,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_column_get_spacing(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_spacing(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_spacing(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_spacing(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_spacing(tree_column);
@@ -8442,8 +8442,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_column_get_visible(int /*long*/ column);
-public static final boolean gtk_tree_view_column_get_visible(int /*long*/ column) {
+public static final native boolean _gtk_tree_view_column_get_visible(long /*int*/ column);
+public static final boolean gtk_tree_view_column_get_visible(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_visible(column);
@@ -8451,8 +8451,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_column_get_sort_indicator(int /*long*/ tree_column);
-public static final boolean gtk_tree_view_column_get_sort_indicator(int /*long*/ tree_column) {
+public static final native boolean _gtk_tree_view_column_get_sort_indicator(long /*int*/ tree_column);
+public static final boolean gtk_tree_view_column_get_sort_indicator(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sort_indicator(tree_column);
@@ -8460,8 +8460,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_column_get_sort_order(int /*long*/ tree_column);
-public static final int gtk_tree_view_column_get_sort_order(int /*long*/ tree_column) {
+public static final native int _gtk_tree_view_column_get_sort_order(long /*int*/ tree_column);
+public static final int gtk_tree_view_column_get_sort_order(long /*int*/ tree_column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_sort_order(tree_column);
@@ -8469,8 +8469,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_column_get_width(int /*long*/ column);
-public static final int gtk_tree_view_column_get_width(int /*long*/ column) {
+public static final native int _gtk_tree_view_column_get_width(long /*int*/ column);
+public static final int gtk_tree_view_column_get_width(long /*int*/ column) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_get_width(column);
@@ -8478,8 +8478,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_column_new();
-public static final int /*long*/ gtk_tree_view_column_new() {
+public static final native long /*int*/ _gtk_tree_view_column_new();
+public static final long /*int*/ gtk_tree_view_column_new() {
 	lock.lock();
 	try {
 		return _gtk_tree_view_column_new();
@@ -8487,8 +8487,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_pack_start(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand);
-public static final void gtk_tree_view_column_pack_start(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand) {
+public static final native void _gtk_tree_view_column_pack_start(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand);
+public static final void gtk_tree_view_column_pack_start(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_pack_start(tree_column, cell_renderer, expand);
@@ -8496,8 +8496,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_pack_end(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand);
-public static final void gtk_tree_view_column_pack_end(int /*long*/ tree_column, int /*long*/ cell_renderer, boolean expand) {
+public static final native void _gtk_tree_view_column_pack_end(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand);
+public static final void gtk_tree_view_column_pack_end(long /*int*/ tree_column, long /*int*/ cell_renderer, boolean expand) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_pack_end(tree_column, cell_renderer, expand);
@@ -8505,8 +8505,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_alignment(int /*long*/ tree_column, float xalign);
-public static final void gtk_tree_view_column_set_alignment(int /*long*/ tree_column, float xalign) {
+public static final native void _gtk_tree_view_column_set_alignment(long /*int*/ tree_column, float xalign);
+public static final void gtk_tree_view_column_set_alignment(long /*int*/ tree_column, float xalign) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_alignment(tree_column, xalign);
@@ -8514,8 +8514,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_cell_data_func(int /*long*/ tree_column, int /*long*/ cell_renderer, int /*long*/ func, int /*long*/ func_data, int /*long*/ destroy);
-public static final void gtk_tree_view_column_set_cell_data_func(int /*long*/ tree_column, int /*long*/ cell_renderer, int /*long*/ func, int /*long*/ func_data, int /*long*/ destroy) {
+public static final native void _gtk_tree_view_column_set_cell_data_func(long /*int*/ tree_column, long /*int*/ cell_renderer, long /*int*/ func, long /*int*/ func_data, long /*int*/ destroy);
+public static final void gtk_tree_view_column_set_cell_data_func(long /*int*/ tree_column, long /*int*/ cell_renderer, long /*int*/ func, long /*int*/ func_data, long /*int*/ destroy) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_cell_data_func(tree_column, cell_renderer, func, func_data, destroy);
@@ -8523,8 +8523,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_clickable(int /*long*/ column, boolean clickable);
-public static final void gtk_tree_view_column_set_clickable(int /*long*/ column, boolean clickable) {
+public static final native void _gtk_tree_view_column_set_clickable(long /*int*/ column, boolean clickable);
+public static final void gtk_tree_view_column_set_clickable(long /*int*/ column, boolean clickable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_clickable(column, clickable);
@@ -8532,8 +8532,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_fixed_width(int /*long*/ column, int fixed_width);
-public static final void gtk_tree_view_column_set_fixed_width(int /*long*/ column, int fixed_width) {
+public static final native void _gtk_tree_view_column_set_fixed_width(long /*int*/ column, int fixed_width);
+public static final void gtk_tree_view_column_set_fixed_width(long /*int*/ column, int fixed_width) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_fixed_width(column, fixed_width);
@@ -8541,8 +8541,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_min_width(int /*long*/ tree_column, int min_width);
-public static final void gtk_tree_view_column_set_min_width(int /*long*/ tree_column, int min_width) {
+public static final native void _gtk_tree_view_column_set_min_width(long /*int*/ tree_column, int min_width);
+public static final void gtk_tree_view_column_set_min_width(long /*int*/ tree_column, int min_width) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_min_width(tree_column, min_width);
@@ -8550,8 +8550,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_reorderable(int /*long*/ column, boolean reorderable);
-public static final void gtk_tree_view_column_set_reorderable(int /*long*/ column, boolean reorderable) {
+public static final native void _gtk_tree_view_column_set_reorderable(long /*int*/ column, boolean reorderable);
+public static final void gtk_tree_view_column_set_reorderable(long /*int*/ column, boolean reorderable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_reorderable(column, reorderable);
@@ -8559,8 +8559,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_resizable(int /*long*/ column, boolean resizable);
-public static final void gtk_tree_view_column_set_resizable(int /*long*/ column, boolean resizable) {
+public static final native void _gtk_tree_view_column_set_resizable(long /*int*/ column, boolean resizable);
+public static final void gtk_tree_view_column_set_resizable(long /*int*/ column, boolean resizable) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_resizable(column, resizable);
@@ -8568,8 +8568,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_sizing(int /*long*/ column, int type);
-public static final void gtk_tree_view_column_set_sizing(int /*long*/ column, int type) {
+public static final native void _gtk_tree_view_column_set_sizing(long /*int*/ column, int type);
+public static final void gtk_tree_view_column_set_sizing(long /*int*/ column, int type) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sizing(column, type);
@@ -8577,8 +8577,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_sort_indicator(int /*long*/ tree_column, boolean setting);
-public static final void gtk_tree_view_column_set_sort_indicator(int /*long*/ tree_column, boolean setting) {
+public static final native void _gtk_tree_view_column_set_sort_indicator(long /*int*/ tree_column, boolean setting);
+public static final void gtk_tree_view_column_set_sort_indicator(long /*int*/ tree_column, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sort_indicator(tree_column, setting);
@@ -8586,8 +8586,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_sort_order(int /*long*/ tree_column, int order);
-public static final void gtk_tree_view_column_set_sort_order(int /*long*/ tree_column, int order) {
+public static final native void _gtk_tree_view_column_set_sort_order(long /*int*/ tree_column, int order);
+public static final void gtk_tree_view_column_set_sort_order(long /*int*/ tree_column, int order) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_sort_order(tree_column, order);
@@ -8595,8 +8595,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_title(int /*long*/ tree_column, byte[] title);
-public static final void gtk_tree_view_column_set_title(int /*long*/ tree_column, byte[] title) {
+public static final native void _gtk_tree_view_column_set_title(long /*int*/ tree_column, byte[] title);
+public static final void gtk_tree_view_column_set_title(long /*int*/ tree_column, byte[] title) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_title(tree_column, title);
@@ -8604,8 +8604,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_visible (int /*long*/ tree_column, boolean visible);
-public static final void gtk_tree_view_column_set_visible (int /*long*/ tree_column, boolean visible) {
+public static final native void _gtk_tree_view_column_set_visible (long /*int*/ tree_column, boolean visible);
+public static final void gtk_tree_view_column_set_visible (long /*int*/ tree_column, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_visible(tree_column, visible);
@@ -8613,8 +8613,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_column_set_widget(int /*long*/ tree_column, int /*long*/ widget);
-public static final void gtk_tree_view_column_set_widget(int /*long*/ tree_column, int /*long*/ widget) {
+public static final native void _gtk_tree_view_column_set_widget(long /*int*/ tree_column, long /*int*/ widget);
+public static final void gtk_tree_view_column_set_widget(long /*int*/ tree_column, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_tree_view_column_set_widget(tree_column, widget);
@@ -8622,8 +8622,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_drag_dest_row(int /*long*/ view, int /*long*/ path, int pos);
-public static final void gtk_tree_view_set_drag_dest_row(int /*long*/ view, int /*long*/ path, int pos) {
+public static final native void _gtk_tree_view_set_drag_dest_row(long /*int*/ view, long /*int*/ path, int pos);
+public static final void gtk_tree_view_set_drag_dest_row(long /*int*/ view, long /*int*/ path, int pos) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_drag_dest_row(view, path, pos);
@@ -8631,8 +8631,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_enable_search (int /*long*/ view, boolean enable_search);
-public static final void gtk_tree_view_set_enable_search (int /*long*/ view, boolean enable_search) {
+public static final native void _gtk_tree_view_set_enable_search (long /*int*/ view, boolean enable_search);
+public static final void gtk_tree_view_set_enable_search (long /*int*/ view, boolean enable_search) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_enable_search(view, enable_search);
@@ -8640,8 +8640,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_expand_row(int /*long*/ view, int /*long*/ path, boolean open_all);
-public static final boolean gtk_tree_view_expand_row(int /*long*/ view, int /*long*/ path, boolean open_all) {
+public static final native boolean _gtk_tree_view_expand_row(long /*int*/ view, long /*int*/ path, boolean open_all);
+public static final boolean gtk_tree_view_expand_row(long /*int*/ view, long /*int*/ path, boolean open_all) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_expand_row(view, path, open_all);
@@ -8649,8 +8649,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_get_background_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect);
-public static final void gtk_tree_view_get_background_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect) {
+public static final native void _gtk_tree_view_get_background_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect);
+public static final void gtk_tree_view_get_background_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_background_area(tree_view, path, column, rect);
@@ -8658,8 +8658,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_get_bin_window(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_bin_window(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_bin_window(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_bin_window(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_bin_window(tree_view);
@@ -8667,8 +8667,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_get_cell_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect);
-public static final void gtk_tree_view_get_cell_area(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, GdkRectangle rect) {
+public static final native void _gtk_tree_view_get_cell_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect);
+public static final void gtk_tree_view_get_cell_area(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, GdkRectangle rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_cell_area(tree_view, path, column, rect);
@@ -8676,8 +8676,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/_gtk_tree_view_get_expander_column(int /*long*/ tree_view);
-public static final int /*long*/gtk_tree_view_get_expander_column(int /*long*/ tree_view) {
+public static final native long /*int*/_gtk_tree_view_get_expander_column(long /*int*/ tree_view);
+public static final long /*int*/gtk_tree_view_get_expander_column(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_expander_column(tree_view);
@@ -8685,8 +8685,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_get_column(int /*long*/ tree_view, int n);
-public static final int /*long*/ gtk_tree_view_get_column(int /*long*/ tree_view, int n) {
+public static final native long /*int*/ _gtk_tree_view_get_column(long /*int*/ tree_view, int n);
+public static final long /*int*/ gtk_tree_view_get_column(long /*int*/ tree_view, int n) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_column(tree_view, n);
@@ -8694,8 +8694,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_get_columns(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_columns(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_columns(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_columns(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_columns(tree_view);
@@ -8703,8 +8703,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_get_cursor(int /*long*/ tree_view, int /*long*/[] path, int /*long*/[] focus_column);
-public static final void gtk_tree_view_get_cursor(int /*long*/ tree_view, int /*long*/[] path, int /*long*/[] focus_column) {
+public static final native void _gtk_tree_view_get_cursor(long /*int*/ tree_view, long /*int*/[] path, long /*int*/[] focus_column);
+public static final void gtk_tree_view_get_cursor(long /*int*/ tree_view, long /*int*/[] path, long /*int*/[] focus_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_cursor(tree_view, path, focus_column);
@@ -8712,8 +8712,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_get_headers_visible(int /*long*/ tree_view);
-public static final boolean gtk_tree_view_get_headers_visible(int /*long*/ tree_view) {
+public static final native boolean _gtk_tree_view_get_headers_visible(long /*int*/ tree_view);
+public static final boolean gtk_tree_view_get_headers_visible(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_headers_visible(tree_view);
@@ -8721,8 +8721,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_get_path_at_pos(int /*long*/ tree_view, int x, int y, int /*long*/[] path, int /*long*/[] column, int[] cell_x, int[] cell_y);
-public static final boolean gtk_tree_view_get_path_at_pos(int /*long*/ tree_view, int x, int y, int /*long*/[] path, int /*long*/[] column, int[] cell_x, int[] cell_y) {
+public static final native boolean _gtk_tree_view_get_path_at_pos(long /*int*/ tree_view, int x, int y, long /*int*/[] path, long /*int*/[] column, int[] cell_x, int[] cell_y);
+public static final boolean gtk_tree_view_get_path_at_pos(long /*int*/ tree_view, int x, int y, long /*int*/[] path, long /*int*/[] column, int[] cell_x, int[] cell_y) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_path_at_pos(tree_view, x, y, path, column, cell_x, cell_y);
@@ -8730,8 +8730,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_get_rules_hint(int /*long*/ tree_view);
-public static final boolean gtk_tree_view_get_rules_hint(int /*long*/ tree_view) {
+public static final native boolean _gtk_tree_view_get_rules_hint(long /*int*/ tree_view);
+public static final boolean gtk_tree_view_get_rules_hint(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_rules_hint(tree_view);
@@ -8739,8 +8739,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_get_selection(int /*long*/ tree_view);
-public static final int /*long*/ gtk_tree_view_get_selection(int /*long*/ tree_view) {
+public static final native long /*int*/ _gtk_tree_view_get_selection(long /*int*/ tree_view);
+public static final long /*int*/ gtk_tree_view_get_selection(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_get_selection(tree_view);
@@ -8748,8 +8748,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_get_visible_rect(int /*long*/ tree_view, GdkRectangle visible_rect);
-public static final void gtk_tree_view_get_visible_rect(int /*long*/ tree_view, GdkRectangle visible_rect) {
+public static final native void _gtk_tree_view_get_visible_rect(long /*int*/ tree_view, GdkRectangle visible_rect);
+public static final void gtk_tree_view_get_visible_rect(long /*int*/ tree_view, GdkRectangle visible_rect) {
 	lock.lock();
 	try {
 		_gtk_tree_view_get_visible_rect(tree_view, visible_rect);
@@ -8757,8 +8757,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_tree_view_insert_column(int /*long*/ tree_view, int /*long*/ column, int position);
-public static final int gtk_tree_view_insert_column(int /*long*/ tree_view, int /*long*/ column, int position) {
+public static final native int _gtk_tree_view_insert_column(long /*int*/ tree_view, long /*int*/ column, int position);
+public static final int gtk_tree_view_insert_column(long /*int*/ tree_view, long /*int*/ column, int position) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_insert_column(tree_view, column, position);
@@ -8766,8 +8766,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_move_column_after(int /*long*/ tree_view, int /*long*/ column, int /*long*/ base_column);
-public static final void gtk_tree_view_move_column_after(int /*long*/ tree_view, int /*long*/ column, int /*long*/base_column) {
+public static final native void _gtk_tree_view_move_column_after(long /*int*/ tree_view, long /*int*/ column, long /*int*/ base_column);
+public static final void gtk_tree_view_move_column_after(long /*int*/ tree_view, long /*int*/ column, long /*int*/base_column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_move_column_after(tree_view, column, base_column);
@@ -8775,8 +8775,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_tree_view_new_with_model(int /*long*/ model);
-public static final int /*long*/ gtk_tree_view_new_with_model(int /*long*/ model) {
+public static final native long /*int*/ _gtk_tree_view_new_with_model(long /*int*/ model);
+public static final long /*int*/ gtk_tree_view_new_with_model(long /*int*/ model) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_new_with_model(model);
@@ -8784,8 +8784,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_remove_column(int /*long*/ tree_view, int /*long*/ column);
-public static final void gtk_tree_view_remove_column(int /*long*/ tree_view, int /*long*/ column) {
+public static final native void _gtk_tree_view_remove_column(long /*int*/ tree_view, long /*int*/ column);
+public static final void gtk_tree_view_remove_column(long /*int*/ tree_view, long /*int*/ column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_remove_column(tree_view, column);
@@ -8793,8 +8793,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_tree_view_row_expanded(int /*long*/ view, int /*long*/ path);
-public static final boolean gtk_tree_view_row_expanded(int /*long*/ view, int /*long*/ path) {
+public static final native boolean _gtk_tree_view_row_expanded(long /*int*/ view, long /*int*/ path);
+public static final boolean gtk_tree_view_row_expanded(long /*int*/ view, long /*int*/ path) {
 	lock.lock();
 	try {
 		return _gtk_tree_view_row_expanded(view, path);
@@ -8802,8 +8802,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_scroll_to_cell(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, boolean use_align, float row_aligh, float column_align);
-public static final void gtk_tree_view_scroll_to_cell(int /*long*/ tree_view, int /*long*/ path, int /*long*/ column, boolean use_align, float row_aligh, float column_align) {
+public static final native void _gtk_tree_view_scroll_to_cell(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, boolean use_align, float row_aligh, float column_align);
+public static final void gtk_tree_view_scroll_to_cell(long /*int*/ tree_view, long /*int*/ path, long /*int*/ column, boolean use_align, float row_aligh, float column_align) {
 	lock.lock();
 	try {
 		_gtk_tree_view_scroll_to_cell(tree_view, path, column, use_align, row_aligh, column_align);
@@ -8811,8 +8811,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_scroll_to_point (int /*long*/ tree_view, int tree_x, int tree_y);
-public static final void gtk_tree_view_scroll_to_point (int /*long*/ tree_view, int tree_x, int tree_y) {
+public static final native void _gtk_tree_view_scroll_to_point (long /*int*/ tree_view, int tree_x, int tree_y);
+public static final void gtk_tree_view_scroll_to_point (long /*int*/ tree_view, int tree_x, int tree_y) {
 	lock.lock();
 	try {
 		_gtk_tree_view_scroll_to_point(tree_view, tree_x, tree_y);
@@ -8820,8 +8820,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_cursor(int /*long*/ tree_view, int /*long*/ path, int /*long*/ focus_column, boolean start_editing);
-public static final void gtk_tree_view_set_cursor(int /*long*/ tree_view, int /*long*/ path, int /*long*/ focus_column, boolean start_editing) {
+public static final native void _gtk_tree_view_set_cursor(long /*int*/ tree_view, long /*int*/ path, long /*int*/ focus_column, boolean start_editing);
+public static final void gtk_tree_view_set_cursor(long /*int*/ tree_view, long /*int*/ path, long /*int*/ focus_column, boolean start_editing) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_cursor(tree_view, path, focus_column, start_editing);
@@ -8829,8 +8829,8 @@
 		lock.unlock();
 	}
 } 
-public static final native void _gtk_tree_view_set_headers_visible(int /*long*/ tree_view, boolean visible);
-public static final void gtk_tree_view_set_headers_visible(int /*long*/ tree_view, boolean visible) {
+public static final native void _gtk_tree_view_set_headers_visible(long /*int*/ tree_view, boolean visible);
+public static final void gtk_tree_view_set_headers_visible(long /*int*/ tree_view, boolean visible) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_headers_visible(tree_view, visible);
@@ -8838,8 +8838,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_model(int /*long*/ tree_view, int /*long*/ model);
-public static final void gtk_tree_view_set_model(int /*long*/ tree_view, int /*long*/ model) {
+public static final native void _gtk_tree_view_set_model(long /*int*/ tree_view, long /*int*/ model);
+public static final void gtk_tree_view_set_model(long /*int*/ tree_view, long /*int*/ model) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_model(tree_view, model);
@@ -8847,8 +8847,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_rules_hint(int /*long*/ tree_view, boolean setting);
-public static final void gtk_tree_view_set_rules_hint(int /*long*/ tree_view, boolean setting) {
+public static final native void _gtk_tree_view_set_rules_hint(long /*int*/ tree_view, boolean setting);
+public static final void gtk_tree_view_set_rules_hint(long /*int*/ tree_view, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_rules_hint(tree_view, setting);
@@ -8856,8 +8856,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_set_search_column(int /*long*/ tree_view, int column);
-public static final void gtk_tree_view_set_search_column(int /*long*/ tree_view, int column) {
+public static final native void _gtk_tree_view_set_search_column(long /*int*/ tree_view, int column);
+public static final void gtk_tree_view_set_search_column(long /*int*/ tree_view, int column) {
 	lock.lock();
 	try {
 		_gtk_tree_view_set_search_column(tree_view, column);
@@ -8865,8 +8865,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_tree_to_widget_coords(int /*long*/ tree_view, int tx, int ty, int[] wx, int[] wy);
-public static final void gtk_tree_view_tree_to_widget_coords(int /*long*/ tree_view, int tx, int ty, int[] wx, int[] wy) {
+public static final native void _gtk_tree_view_tree_to_widget_coords(long /*int*/ tree_view, int tx, int ty, int[] wx, int[] wy);
+public static final void gtk_tree_view_tree_to_widget_coords(long /*int*/ tree_view, int tx, int ty, int[] wx, int[] wy) {
 	lock.lock();
 	try {
 		_gtk_tree_view_tree_to_widget_coords(tree_view, tx, ty, wx, wy);
@@ -8874,8 +8874,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_unset_rows_drag_dest(int /*long*/ tree_view);
-public static final void gtk_tree_view_unset_rows_drag_dest(int /*long*/ tree_view) {
+public static final native void _gtk_tree_view_unset_rows_drag_dest(long /*int*/ tree_view);
+public static final void gtk_tree_view_unset_rows_drag_dest(long /*int*/ tree_view) {
 	lock.lock();
 	try {
 		_gtk_tree_view_unset_rows_drag_dest(tree_view);
@@ -8883,8 +8883,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_tree_view_widget_to_tree_coords(int /*long*/ tree_view, int wx, int wy, int[] tx, int[] ty);
-public static final void gtk_tree_view_widget_to_tree_coords(int /*long*/ tree_view, int wx, int wy, int[] tx, int[] ty) {
+public static final native void _gtk_tree_view_widget_to_tree_coords(long /*int*/ tree_view, int wx, int wy, int[] tx, int[] ty);
+public static final void gtk_tree_view_widget_to_tree_coords(long /*int*/ tree_view, int wx, int wy, int[] tx, int[] ty) {
 	lock.lock();
 	try {
 		_gtk_tree_view_widget_to_tree_coords(tree_view, wx, wy, tx, ty);
@@ -8892,8 +8892,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_vbox_new(boolean homogeneous, int spacing);
-public static final int /*long*/ gtk_vbox_new(boolean homogeneous, int spacing) {
+public static final native long /*int*/ _gtk_vbox_new(boolean homogeneous, int spacing);
+public static final long /*int*/ gtk_vbox_new(boolean homogeneous, int spacing) {
 	lock.lock();
 	try {
 		return _gtk_vbox_new(homogeneous, spacing);
@@ -8901,8 +8901,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_vscale_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_vscale_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_vscale_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_vscale_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_vscale_new(adjustment);
@@ -8910,8 +8910,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_vscrollbar_new(int /*long*/ adjustment);
-public static final int /*long*/ gtk_vscrollbar_new(int /*long*/ adjustment) {
+public static final native long /*int*/ _gtk_vscrollbar_new(long /*int*/ adjustment);
+public static final long /*int*/ gtk_vscrollbar_new(long /*int*/ adjustment) {
 	lock.lock();
 	try {
 		return _gtk_vscrollbar_new(adjustment);
@@ -8919,8 +8919,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_vseparator_new();
-public static final int /*long*/ gtk_vseparator_new() {
+public static final native long /*int*/ _gtk_vseparator_new();
+public static final long /*int*/ gtk_vseparator_new() {
 	lock.lock();
 	try {
 		return _gtk_vseparator_new();
@@ -8928,8 +8928,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_add_accelerator(int /*long*/ widget, byte[] accel_signal, int /*long*/ accel_group, int accel_key, int accel_mods, int accel_flags);
-public static final void gtk_widget_add_accelerator(int /*long*/ widget, byte[] accel_signal, int /*long*/ accel_group, int accel_key, int accel_mods, int accel_flags) {
+public static final native void _gtk_widget_add_accelerator(long /*int*/ widget, byte[] accel_signal, long /*int*/ accel_group, int accel_key, int accel_mods, int accel_flags);
+public static final void gtk_widget_add_accelerator(long /*int*/ widget, byte[] accel_signal, long /*int*/ accel_group, int accel_key, int accel_mods, int accel_flags) {
 	lock.lock();
 	try {
 		_gtk_widget_add_accelerator(widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags);
@@ -8937,8 +8937,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_add_events(int /*long*/ widget, int events);
-public static final void gtk_widget_add_events(int /*long*/ widget, int events) {
+public static final native void _gtk_widget_add_events(long /*int*/ widget, int events);
+public static final void gtk_widget_add_events(long /*int*/ widget, int events) {
 	lock.lock();
 	try {
 		_gtk_widget_add_events(widget, events);
@@ -8946,8 +8946,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_child_focus(int /*long*/ widget, int direction);
-public static final boolean gtk_widget_child_focus(int /*long*/ widget, int direction) {
+public static final native boolean _gtk_widget_child_focus(long /*int*/ widget, int direction);
+public static final boolean gtk_widget_child_focus(long /*int*/ widget, int direction) {
 	lock.lock();
 	try {
 		return _gtk_widget_child_focus(widget, direction);
@@ -8955,8 +8955,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_create_pango_layout(int /*long*/ widget, byte[] text);
-public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ widget, byte[] text) {
+public static final native long /*int*/ _gtk_widget_create_pango_layout(long /*int*/ widget, byte[] text);
+public static final long /*int*/ gtk_widget_create_pango_layout(long /*int*/ widget, byte[] text) {
 	lock.lock();
 	try {
 		return _gtk_widget_create_pango_layout(widget, text);
@@ -8964,8 +8964,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_create_pango_layout(int /*long*/ widget, int /*long*/ text);
-public static final int /*long*/ gtk_widget_create_pango_layout(int /*long*/ widget, int /*long*/ text) {
+public static final native long /*int*/ _gtk_widget_create_pango_layout(long /*int*/ widget, long /*int*/ text);
+public static final long /*int*/ gtk_widget_create_pango_layout(long /*int*/ widget, long /*int*/ text) {
 	lock.lock();
 	try {
 		return _gtk_widget_create_pango_layout(widget, text);
@@ -8973,8 +8973,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_destroy(int /*long*/ widget);
-public static final void gtk_widget_destroy(int /*long*/ widget) {
+public static final native void _gtk_widget_destroy(long /*int*/ widget);
+public static final void gtk_widget_destroy(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_destroy(widget);
@@ -8982,8 +8982,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_event(int /*long*/ widget, int /*long*/ event);
-public static final boolean gtk_widget_event(int /*long*/ widget, int /*long*/ event) {
+public static final native boolean _gtk_widget_event(long /*int*/ widget, long /*int*/ event);
+public static final boolean gtk_widget_event(long /*int*/ widget, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_widget_event(widget, event);
@@ -8991,8 +8991,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_accessible (int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_accessible (int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_accessible (long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_accessible (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_accessible(widget);
@@ -9000,8 +9000,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_get_child_visible (int /*long*/ widget);
-public static final boolean gtk_widget_get_child_visible (int /*long*/ widget) {
+public static final native boolean _gtk_widget_get_child_visible (long /*int*/ widget);
+public static final boolean gtk_widget_get_child_visible (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_child_visible(widget);
@@ -9018,8 +9018,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_default_style();
-public static final int /*long*/ gtk_widget_get_default_style() {
+public static final native long /*int*/ _gtk_widget_get_default_style();
+public static final long /*int*/ gtk_widget_get_default_style() {
 	lock.lock();
 	try {
 		return _gtk_widget_get_default_style();
@@ -9027,8 +9027,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_widget_get_direction(int /*long*/ widget);
-public static final int gtk_widget_get_direction(int /*long*/ widget) {
+public static final native int _gtk_widget_get_direction(long /*int*/ widget);
+public static final int gtk_widget_get_direction(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_direction(widget);
@@ -9036,8 +9036,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_widget_get_events(int /*long*/ widget);
-public static final int gtk_widget_get_events(int /*long*/ widget) {
+public static final native int _gtk_widget_get_events(long /*int*/ widget);
+public static final int gtk_widget_get_events(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_events(widget);
@@ -9045,8 +9045,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_modifier_style(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_modifier_style(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_modifier_style(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_modifier_style(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_modifier_style(widget);
@@ -9054,8 +9054,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_pango_context(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_pango_context(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_pango_context(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_pango_context(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_pango_context(widget);
@@ -9063,8 +9063,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_parent(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_parent(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_parent(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_parent(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_parent(widget);
@@ -9072,8 +9072,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_style(int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_style(int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_style(long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_style(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_style(widget);
@@ -9081,8 +9081,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_get_size_request(int /*long*/ widget, int [] width, int [] height);
-public static final void gtk_widget_get_size_request(int /*long*/ widget, int [] width, int [] height) {
+public static final native void _gtk_widget_get_size_request(long /*int*/ widget, int [] width, int [] height);
+public static final void gtk_widget_get_size_request(long /*int*/ widget, int [] width, int [] height) {
 	lock.lock();
 	try {
 		_gtk_widget_get_size_request(widget, width, height);
@@ -9090,8 +9090,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_widget_get_toplevel (int /*long*/ widget);
-public static final int /*long*/ gtk_widget_get_toplevel (int /*long*/ widget) {
+public static final native long /*int*/ _gtk_widget_get_toplevel (long /*int*/ widget);
+public static final long /*int*/ gtk_widget_get_toplevel (long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_get_toplevel(widget);
@@ -9099,8 +9099,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_grab_focus(int /*long*/ widget);
-public static final void gtk_widget_grab_focus(int /*long*/ widget) {
+public static final native void _gtk_widget_grab_focus(long /*int*/ widget);
+public static final void gtk_widget_grab_focus(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_grab_focus(widget);
@@ -9108,8 +9108,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_hide(int /*long*/ widget);
-public static final void gtk_widget_hide(int /*long*/ widget) {
+public static final native void _gtk_widget_hide(long /*int*/ widget);
+public static final void gtk_widget_hide(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_hide(widget);
@@ -9117,8 +9117,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_is_composited(int /*long*/ widget);
-public static final boolean gtk_widget_is_composited(int /*long*/ widget) {
+public static final native boolean _gtk_widget_is_composited(long /*int*/ widget);
+public static final boolean gtk_widget_is_composited(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_is_composited(widget);
@@ -9126,8 +9126,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_is_focus(int /*long*/ widget);
-public static final boolean gtk_widget_is_focus(int /*long*/ widget) {
+public static final native boolean _gtk_widget_is_focus(long /*int*/ widget);
+public static final boolean gtk_widget_is_focus(long /*int*/ widget) {
 	lock.lock();
 	try {
 		return _gtk_widget_is_focus(widget);
@@ -9135,8 +9135,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_map(int /*long*/ widget);
-public static final void gtk_widget_map(int /*long*/ widget) {
+public static final native void _gtk_widget_map(long /*int*/ widget);
+public static final void gtk_widget_map(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_map(widget);
@@ -9144,8 +9144,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_mnemonic_activate(int /*long*/ widget, boolean group_cycling);
-public static final boolean gtk_widget_mnemonic_activate(int /*long*/ widget, boolean group_cycling) {
+public static final native boolean _gtk_widget_mnemonic_activate(long /*int*/ widget, boolean group_cycling);
+public static final boolean gtk_widget_mnemonic_activate(long /*int*/ widget, boolean group_cycling) {
 	lock.lock();
 	try {
 		return _gtk_widget_mnemonic_activate(widget, group_cycling);
@@ -9153,8 +9153,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_base(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_base(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_base(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_base(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_base(widget, state, color);
@@ -9162,8 +9162,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_bg(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_bg(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_bg(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_bg(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_bg(widget, state, color);
@@ -9171,8 +9171,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_fg(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_fg(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_fg(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_fg(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_fg(widget, state, color);
@@ -9180,8 +9180,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_font(int /*long*/ widget, int /*long*/ pango_font_descr);
-public static final void gtk_widget_modify_font(int /*long*/ widget, int /*long*/ pango_font_descr) {
+public static final native void _gtk_widget_modify_font(long /*int*/ widget, long /*int*/ pango_font_descr);
+public static final void gtk_widget_modify_font(long /*int*/ widget, long /*int*/ pango_font_descr) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_font(widget, pango_font_descr);
@@ -9189,8 +9189,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_style(int /*long*/ widget, int /*long*/ style);
-public static final void gtk_widget_modify_style(int /*long*/ widget, int /*long*/ style) {
+public static final native void _gtk_widget_modify_style(long /*int*/ widget, long /*int*/ style);
+public static final void gtk_widget_modify_style(long /*int*/ widget, long /*int*/ style) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_style(widget, style);
@@ -9198,8 +9198,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_modify_text(int /*long*/ widget, int state, GdkColor color);
-public static final void gtk_widget_modify_text(int /*long*/ widget, int state, GdkColor color) {
+public static final native void _gtk_widget_modify_text(long /*int*/ widget, int state, GdkColor color);
+public static final void gtk_widget_modify_text(long /*int*/ widget, int state, GdkColor color) {
 	lock.lock();
 	try {
 		_gtk_widget_modify_text(widget, state, color);
@@ -9207,8 +9207,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_queue_resize(int /*long*/ widget);
-public static final void gtk_widget_queue_resize(int /*long*/ widget) {
+public static final native void _gtk_widget_queue_resize(long /*int*/ widget);
+public static final void gtk_widget_queue_resize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_queue_resize(widget);
@@ -9216,8 +9216,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_realize(int /*long*/ widget);
-public static final void gtk_widget_realize(int /*long*/ widget) {
+public static final native void _gtk_widget_realize(long /*int*/ widget);
+public static final void gtk_widget_realize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_realize(widget);
@@ -9225,8 +9225,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_remove_accelerator(int /*long*/ widget, int /*long*/ accel_group, int accel_key, int accel_mods);
-public static final void gtk_widget_remove_accelerator(int /*long*/ widget, int /*long*/ accel_group, int accel_key, int accel_mods) {
+public static final native void _gtk_widget_remove_accelerator(long /*int*/ widget, long /*int*/ accel_group, int accel_key, int accel_mods);
+public static final void gtk_widget_remove_accelerator(long /*int*/ widget, long /*int*/ accel_group, int accel_key, int accel_mods) {
 	lock.lock();
 	try {
 		_gtk_widget_remove_accelerator(widget, accel_group, accel_key, accel_mods);
@@ -9234,8 +9234,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_reparent(int /*long*/ widget, int /*long*/ new_parent);
-public static final void gtk_widget_reparent(int /*long*/ widget, int /*long*/ new_parent) {
+public static final native void _gtk_widget_reparent(long /*int*/ widget, long /*int*/ new_parent);
+public static final void gtk_widget_reparent(long /*int*/ widget, long /*int*/ new_parent) {
 	lock.lock();
 	try {
 		_gtk_widget_reparent(widget, new_parent);
@@ -9243,8 +9243,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_widget_send_expose(int /*long*/ widget, int /*long*/ event);
-public static final int gtk_widget_send_expose(int /*long*/ widget, int /*long*/ event) {
+public static final native int _gtk_widget_send_expose(long /*int*/ widget, long /*int*/ event);
+public static final int gtk_widget_send_expose(long /*int*/ widget, long /*int*/ event) {
 	lock.lock();
 	try {
 		return _gtk_widget_send_expose(widget, event);
@@ -9252,8 +9252,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_app_paintable(int /*long*/ widget, boolean app_paintable);
-public static final void gtk_widget_set_app_paintable(int /*long*/ widget, boolean app_paintable) {
+public static final native void _gtk_widget_set_app_paintable(long /*int*/ widget, boolean app_paintable);
+public static final void gtk_widget_set_app_paintable(long /*int*/ widget, boolean app_paintable) {
 	lock.lock();
 	try {
 		_gtk_widget_set_app_paintable(widget, app_paintable);
@@ -9270,8 +9270,8 @@
 		lock.unlock();
 	}
 } 
-public static final native void _gtk_widget_set_direction(int /*long*/ widget, int dir);
-public static final void gtk_widget_set_direction(int /*long*/ widget, int dir) {
+public static final native void _gtk_widget_set_direction(long /*int*/ widget, int dir);
+public static final void gtk_widget_set_direction(long /*int*/ widget, int dir) {
 	lock.lock();
 	try {
 		_gtk_widget_set_direction(widget, dir);
@@ -9279,8 +9279,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_double_buffered(int /*long*/ widget, boolean double_buffered);
-public static final void gtk_widget_set_double_buffered(int /*long*/ widget, boolean double_buffered) {
+public static final native void _gtk_widget_set_double_buffered(long /*int*/ widget, boolean double_buffered);
+public static final void gtk_widget_set_double_buffered(long /*int*/ widget, boolean double_buffered) {
 	lock.lock();
 	try {
 		_gtk_widget_set_double_buffered(widget, double_buffered);
@@ -9288,8 +9288,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_name(int /*long*/ widget, byte[] name);
-public static final void gtk_widget_set_name(int /*long*/ widget, byte[] name) {
+public static final native void _gtk_widget_set_name(long /*int*/ widget, byte[] name);
+public static final void gtk_widget_set_name(long /*int*/ widget, byte[] name) {
 	lock.lock();
 	try {
 		_gtk_widget_set_name(widget, name);
@@ -9297,8 +9297,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_redraw_on_allocate(int /*long*/ widget, boolean redraw);
-public static final void gtk_widget_set_redraw_on_allocate(int /*long*/ widget, boolean redraw) {
+public static final native void _gtk_widget_set_redraw_on_allocate(long /*int*/ widget, boolean redraw);
+public static final void gtk_widget_set_redraw_on_allocate(long /*int*/ widget, boolean redraw) {
 	lock.lock();
 	try {
 		_gtk_widget_set_redraw_on_allocate(widget, redraw);
@@ -9306,8 +9306,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_sensitive(int /*long*/ widget, boolean sensitive);
-public static final void gtk_widget_set_sensitive(int /*long*/ widget, boolean sensitive) {
+public static final native void _gtk_widget_set_sensitive(long /*int*/ widget, boolean sensitive);
+public static final void gtk_widget_set_sensitive(long /*int*/ widget, boolean sensitive) {
 	lock.lock();
 	try {
 		_gtk_widget_set_sensitive(widget, sensitive);
@@ -9315,8 +9315,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_size_request(int /*long*/ widget, int width, int height);
-public static final void gtk_widget_set_size_request(int /*long*/ widget, int width, int height) {
+public static final native void _gtk_widget_set_size_request(long /*int*/ widget, int width, int height);
+public static final void gtk_widget_set_size_request(long /*int*/ widget, int width, int height) {
 	lock.lock();
 	try {
 		_gtk_widget_set_size_request(widget, width, height);
@@ -9324,8 +9324,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_state(int /*long*/ widget, int state);
-public static final void gtk_widget_set_state(int /*long*/ widget, int state) {
+public static final native void _gtk_widget_set_state(long /*int*/ widget, int state);
+public static final void gtk_widget_set_state(long /*int*/ widget, int state) {
 	lock.lock();
 	try {
 		_gtk_widget_set_state(widget, state);
@@ -9333,8 +9333,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_style(int /*long*/ widget, int /*long*/ style);
-public static final void gtk_widget_set_style(int /*long*/ widget, int /*long*/ style) {
+public static final native void _gtk_widget_set_style(long /*int*/ widget, long /*int*/ style);
+public static final void gtk_widget_set_style(long /*int*/ widget, long /*int*/ style) {
 	lock.lock();
 	try {
 		_gtk_widget_set_style(widget, style);
@@ -9342,8 +9342,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_shape_combine_mask(int /*long*/ widget, int /*long*/ shape_mask, int offset_x, int offset_y);
-public static final void gtk_widget_shape_combine_mask(int /*long*/ widget, int /*long*/ shape_mask, int offset_x, int offset_y) {
+public static final native void _gtk_widget_shape_combine_mask(long /*int*/ widget, long /*int*/ shape_mask, int offset_x, int offset_y);
+public static final void gtk_widget_shape_combine_mask(long /*int*/ widget, long /*int*/ shape_mask, int offset_x, int offset_y) {
 	lock.lock();
 	try {
 		_gtk_widget_shape_combine_mask(widget, shape_mask, offset_x, offset_y);
@@ -9351,8 +9351,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_show(int /*long*/ widget);
-public static final void gtk_widget_show(int /*long*/ widget) {
+public static final native void _gtk_widget_show(long /*int*/ widget);
+public static final void gtk_widget_show(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_show(widget);
@@ -9360,8 +9360,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_show_now(int /*long*/ widget);
-public static final void gtk_widget_show_now(int /*long*/ widget) {
+public static final native void _gtk_widget_show_now(long /*int*/ widget);
+public static final void gtk_widget_show_now(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_show_now(widget);
@@ -9369,8 +9369,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_size_allocate(int /*long*/ widget, GtkAllocation allocation);
-public static final void gtk_widget_size_allocate(int /*long*/ widget, GtkAllocation allocation) {
+public static final native void _gtk_widget_size_allocate(long /*int*/ widget, GtkAllocation allocation);
+public static final void gtk_widget_size_allocate(long /*int*/ widget, GtkAllocation allocation) {
 	lock.lock();
 	try {
 		_gtk_widget_size_allocate(widget, allocation);
@@ -9378,8 +9378,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_size_request(int /*long*/ widget, GtkRequisition requisition);
-public static final void gtk_widget_size_request(int /*long*/ widget, GtkRequisition requisition) {
+public static final native void _gtk_widget_size_request(long /*int*/ widget, GtkRequisition requisition);
+public static final void gtk_widget_size_request(long /*int*/ widget, GtkRequisition requisition) {
 	lock.lock();
 	try {
 		_gtk_widget_size_request(widget, requisition);
@@ -9387,8 +9387,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_style_get(int /*long*/ widget, byte[] property_name, int[] value, int /*long*/ terminator);
-public static final void gtk_widget_style_get(int /*long*/ widget, byte[] property_name, int[] value, int /*long*/ terminator) {
+public static final native void _gtk_widget_style_get(long /*int*/ widget, byte[] property_name, int[] value, long /*int*/ terminator);
+public static final void gtk_widget_style_get(long /*int*/ widget, byte[] property_name, int[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_widget_style_get(widget, property_name, value, terminator);
@@ -9396,8 +9396,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_style_get(int /*long*/ widget, byte[] property_name, long[] value, int /*long*/ terminator);
-public static final void gtk_widget_style_get(int /*long*/ widget, byte[] property_name, long[] value, int /*long*/ terminator) {
+public static final native void _gtk_widget_style_get(long /*int*/ widget, byte[] property_name, long[] value, long /*int*/ terminator);
+public static final void gtk_widget_style_get(long /*int*/ widget, byte[] property_name, long[] value, long /*int*/ terminator) {
 	lock.lock();
 	try {
 		_gtk_widget_style_get(widget, property_name, value, terminator);
@@ -9405,8 +9405,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_widget_translate_coordinates(int /*long*/ src_widget, int /*long*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y);
-public static final boolean gtk_widget_translate_coordinates(int /*long*/ src_widget, int /*long*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y) {
+public static final native boolean _gtk_widget_translate_coordinates(long /*int*/ src_widget, long /*int*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y);
+public static final boolean gtk_widget_translate_coordinates(long /*int*/ src_widget, long /*int*/ dest_widget, int src_x, int src_y, int[] dest_x, int[] dest_y) {
 	lock.lock();
 	try {
 		return _gtk_widget_translate_coordinates(src_widget, dest_widget, src_x, src_y, dest_x, dest_y);
@@ -9414,8 +9414,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_unrealize(int /*long*/ widget);
-public static final void gtk_widget_unrealize(int /*long*/ widget) {
+public static final native void _gtk_widget_unrealize(long /*int*/ widget);
+public static final void gtk_widget_unrealize(long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_widget_unrealize(widget);
@@ -9423,8 +9423,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_window_activate_default(int /*long*/ window);
-public static final boolean gtk_window_activate_default(int /*long*/ window) {
+public static final native boolean _gtk_window_activate_default(long /*int*/ window);
+public static final boolean gtk_window_activate_default(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_activate_default(window);
@@ -9432,8 +9432,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_add_accel_group(int /*long*/ window, int /*long*/ accel_group);
-public static final void gtk_window_add_accel_group(int /*long*/ window, int /*long*/ accel_group) {
+public static final native void _gtk_window_add_accel_group(long /*int*/ window, long /*int*/ accel_group);
+public static final void gtk_window_add_accel_group(long /*int*/ window, long /*int*/ accel_group) {
 	lock.lock();
 	try {
 		_gtk_window_add_accel_group(window, accel_group);
@@ -9441,8 +9441,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_deiconify(int /*long*/ handle);
-public static final void gtk_window_deiconify(int /*long*/ handle) {
+public static final native void _gtk_window_deiconify(long /*int*/ handle);
+public static final void gtk_window_deiconify(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_deiconify(handle);
@@ -9450,8 +9450,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_get_focus(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_focus(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_focus(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_focus(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_focus(window);
@@ -9459,8 +9459,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_get_group(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_group(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_group(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_group(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_group(window);
@@ -9468,8 +9468,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_get_icon_list(int /*long*/ window);
-public static final int /*long*/ gtk_window_get_icon_list(int /*long*/ window) {
+public static final native long /*int*/ _gtk_window_get_icon_list(long /*int*/ window);
+public static final long /*int*/ gtk_window_get_icon_list(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_icon_list(window);
@@ -9477,8 +9477,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _gtk_window_get_modal(int /*long*/ window);
-public static final boolean gtk_window_get_modal(int /*long*/ window) {
+public static final native boolean _gtk_window_get_modal(long /*int*/ window);
+public static final boolean gtk_window_get_modal(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_modal(window);
@@ -9486,8 +9486,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _gtk_window_get_mnemonic_modifier(int /*long*/ window);
-public static final int gtk_window_get_mnemonic_modifier(int /*long*/ window) {
+public static final native int _gtk_window_get_mnemonic_modifier(long /*int*/ window);
+public static final int gtk_window_get_mnemonic_modifier(long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_mnemonic_modifier(window);
@@ -9495,8 +9495,8 @@
 		lock.unlock();
 	}
 }
-public static final native double _gtk_window_get_opacity (int /*long*/ window);
-public static final double gtk_window_get_opacity (int /*long*/ window) {
+public static final native double _gtk_window_get_opacity (long /*int*/ window);
+public static final double gtk_window_get_opacity (long /*int*/ window) {
 	lock.lock();
 	try {
 		return _gtk_window_get_opacity (window);
@@ -9504,8 +9504,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_get_position(int /*long*/ handle, int[] x, int[] y);
-public static final void gtk_window_get_position(int /*long*/ handle, int[] x, int[] y) {
+public static final native void _gtk_window_get_position(long /*int*/ handle, int[] x, int[] y);
+public static final void gtk_window_get_position(long /*int*/ handle, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_window_get_position(handle, x, y);
@@ -9513,8 +9513,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_get_size(int /*long*/ handle, int[] x, int[] y);
-public static final void gtk_window_get_size(int /*long*/ handle, int[] x, int[] y) {
+public static final native void _gtk_window_get_size(long /*int*/ handle, int[] x, int[] y);
+public static final void gtk_window_get_size(long /*int*/ handle, int[] x, int[] y) {
 	lock.lock();
 	try {
 		_gtk_window_get_size(handle, x, y);
@@ -9522,8 +9522,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_group_add_window(int /*long*/ group, int /*long*/ window);
-public static final void gtk_window_group_add_window(int /*long*/ group, int /*long*/ window) {
+public static final native void _gtk_window_group_add_window(long /*int*/ group, long /*int*/ window);
+public static final void gtk_window_group_add_window(long /*int*/ group, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_group_add_window(group, window);
@@ -9531,8 +9531,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_group_remove_window(int /*long*/ group, int /*long*/ window);
-public static final void gtk_window_group_remove_window(int /*long*/ group, int /*long*/ window) {
+public static final native void _gtk_window_group_remove_window(long /*int*/ group, long /*int*/ window);
+public static final void gtk_window_group_remove_window(long /*int*/ group, long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_group_remove_window(group, window);
@@ -9540,8 +9540,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_group_new();
-public static final int /*long*/ gtk_window_group_new() {
+public static final native long /*int*/ _gtk_window_group_new();
+public static final long /*int*/ gtk_window_group_new() {
 	lock.lock();
 	try {
 		return _gtk_window_group_new();
@@ -9549,8 +9549,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_iconify(int /*long*/ handle);
-public static final void gtk_window_iconify(int /*long*/ handle) {
+public static final native void _gtk_window_iconify(long /*int*/ handle);
+public static final void gtk_window_iconify(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_iconify(handle);
@@ -9558,8 +9558,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_list_toplevels ();
-public static final int /*long*/ gtk_window_list_toplevels () {
+public static final native long /*int*/ _gtk_window_list_toplevels ();
+public static final long /*int*/ gtk_window_list_toplevels () {
 	lock.lock();
 	try {
 		return _gtk_window_list_toplevels ();
@@ -9567,8 +9567,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_maximize(int /*long*/ handle);
-public static final void gtk_window_maximize(int /*long*/ handle) {
+public static final native void _gtk_window_maximize(long /*int*/ handle);
+public static final void gtk_window_maximize(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_maximize(handle);
@@ -9576,8 +9576,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_fullscreen(int /*long*/ handle);
-public static final void gtk_window_fullscreen(int /*long*/ handle) {
+public static final native void _gtk_window_fullscreen(long /*int*/ handle);
+public static final void gtk_window_fullscreen(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_fullscreen(handle);
@@ -9585,8 +9585,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_unfullscreen(int /*long*/ handle);
-public static final void gtk_window_unfullscreen(int /*long*/ handle) {
+public static final native void _gtk_window_unfullscreen(long /*int*/ handle);
+public static final void gtk_window_unfullscreen(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_unfullscreen(handle);
@@ -9594,8 +9594,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_move(int /*long*/ handle, int x, int y);
-public static final void gtk_window_move(int /*long*/ handle, int x, int y) {
+public static final native void _gtk_window_move(long /*int*/ handle, int x, int y);
+public static final void gtk_window_move(long /*int*/ handle, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_window_move(handle, x, y);
@@ -9603,8 +9603,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _gtk_window_new(int type);
-public static final int /*long*/ gtk_window_new(int type) {
+public static final native long /*int*/ _gtk_window_new(int type);
+public static final long /*int*/ gtk_window_new(int type) {
 	lock.lock();
 	try {
 		return _gtk_window_new(type);
@@ -9612,8 +9612,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_present(int /*long*/ window);
-public static final void gtk_window_present(int /*long*/ window) {
+public static final native void _gtk_window_present(long /*int*/ window);
+public static final void gtk_window_present(long /*int*/ window) {
 	lock.lock();
 	try {
 		_gtk_window_present(window);
@@ -9621,8 +9621,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_remove_accel_group(int /*long*/ window, int /*long*/ accel_group);
-public static final void gtk_window_remove_accel_group(int /*long*/ window, int /*long*/ accel_group) {
+public static final native void _gtk_window_remove_accel_group(long /*int*/ window, long /*int*/ accel_group);
+public static final void gtk_window_remove_accel_group(long /*int*/ window, long /*int*/ accel_group) {
 	lock.lock();
 	try {
 		_gtk_window_remove_accel_group(window, accel_group);
@@ -9630,8 +9630,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_resize(int /*long*/ handle, int x, int y);
-public static final void gtk_window_resize(int /*long*/ handle, int x, int y) {
+public static final native void _gtk_window_resize(long /*int*/ handle, int x, int y);
+public static final void gtk_window_resize(long /*int*/ handle, int x, int y) {
 	lock.lock();
 	try {
 		_gtk_window_resize(handle, x, y);
@@ -9639,8 +9639,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_default(int /*long*/ window, int /*long*/ widget);
-public static final void gtk_window_set_default(int /*long*/ window, int /*long*/ widget) {
+public static final native void _gtk_window_set_default(long /*int*/ window, long /*int*/ widget);
+public static final void gtk_window_set_default(long /*int*/ window, long /*int*/ widget) {
 	lock.lock();
 	try {
 		_gtk_window_set_default(window, widget);
@@ -9648,8 +9648,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_destroy_with_parent(int /*long*/ window, boolean setting);
-public static final void gtk_window_set_destroy_with_parent(int /*long*/ window, boolean setting) {
+public static final native void _gtk_window_set_destroy_with_parent(long /*int*/ window, boolean setting);
+public static final void gtk_window_set_destroy_with_parent(long /*int*/ window, boolean setting) {
 	lock.lock();
 	try {
 		_gtk_window_set_destroy_with_parent(window, setting);
@@ -9657,8 +9657,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_keep_below(int /*long*/ window, boolean setting);
-public static final void gtk_window_set_keep_below(int /*long*/ window,  boolean setting) {
+public static final native void _gtk_window_set_keep_below(long /*int*/ window, boolean setting);
+public static final void gtk_window_set_keep_below(long /*int*/ window,  boolean setting) {
 	lock.lock();
 	try {
 		_gtk_window_set_keep_below(window, setting);
@@ -9666,8 +9666,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_geometry_hints(int /*long*/ window, int /*long*/ geometry_widget, GdkGeometry geometry, int geom_mask);
-public static final void gtk_window_set_geometry_hints(int /*long*/ window, int /*long*/ geometry_widget, GdkGeometry geometry, int geom_mask) {
+public static final native void _gtk_window_set_geometry_hints(long /*int*/ window, long /*int*/ geometry_widget, GdkGeometry geometry, int geom_mask);
+public static final void gtk_window_set_geometry_hints(long /*int*/ window, long /*int*/ geometry_widget, GdkGeometry geometry, int geom_mask) {
 	lock.lock();
 	try {
 		_gtk_window_set_geometry_hints(window, geometry_widget, geometry, geom_mask);
@@ -9675,8 +9675,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_icon_list(int /*long*/ window, int /*long*/ list);
-public static final void gtk_window_set_icon_list(int /*long*/ window, int /*long*/ list) {	
+public static final native void _gtk_window_set_icon_list(long /*int*/ window, long /*int*/ list);
+public static final void gtk_window_set_icon_list(long /*int*/ window, long /*int*/ list) {	
 	lock.lock();
 	try {
 		_gtk_window_set_icon_list(window, list);
@@ -9684,8 +9684,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_modal(int /*long*/ window, boolean modal);
-public static final void gtk_window_set_modal(int /*long*/ window, boolean modal) {
+public static final native void _gtk_window_set_modal(long /*int*/ window, boolean modal);
+public static final void gtk_window_set_modal(long /*int*/ window, boolean modal) {
 	lock.lock();
 	try {
 		_gtk_window_set_modal(window, modal);
@@ -9693,8 +9693,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_opacity(int /*long*/ window, double opacity);
-public static final void gtk_window_set_opacity(int /*long*/ window, double opacity) {
+public static final native void _gtk_window_set_opacity(long /*int*/ window, double opacity);
+public static final void gtk_window_set_opacity(long /*int*/ window, double opacity) {
 	lock.lock();
 	try {
 		 _gtk_window_set_opacity(window, opacity);
@@ -9702,8 +9702,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_tooltip_text(int /*long*/ widget, byte[] tip_text);
-public static final void gtk_widget_set_tooltip_text(int /*long*/ widget, byte[] tip_text) {
+public static final native void _gtk_widget_set_tooltip_text(long /*int*/ widget, byte[] tip_text);
+public static final void gtk_widget_set_tooltip_text(long /*int*/ widget, byte[] tip_text) {
 	lock.lock();
 	try {
 		_gtk_widget_set_tooltip_text(widget, tip_text);
@@ -9711,8 +9711,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_widget_set_parent_window(int /*long*/ widget, int /*long*/ parent_window);
-public static final void gtk_widget_set_parent_window(int /*long*/ widget, int /*long*/ parent_window) {	
+public static final native void _gtk_widget_set_parent_window(long /*int*/ widget, long /*int*/ parent_window);
+public static final void gtk_widget_set_parent_window(long /*int*/ widget, long /*int*/ parent_window) {	
 	lock.lock();
 	try {
 		_gtk_widget_set_parent_window(widget, parent_window);
@@ -9720,8 +9720,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_resizable(int /*long*/ window, boolean resizable);
-public static final void gtk_window_set_resizable(int /*long*/ window, boolean resizable) {
+public static final native void _gtk_window_set_resizable(long /*int*/ window, boolean resizable);
+public static final void gtk_window_set_resizable(long /*int*/ window, boolean resizable) {
 	lock.lock();
 	try {
 		_gtk_window_set_resizable(window, resizable);
@@ -9729,8 +9729,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_title(int /*long*/ window, byte[] title);
-public static final void gtk_window_set_title(int /*long*/ window, byte[] title) {
+public static final native void _gtk_window_set_title(long /*int*/ window, byte[] title);
+public static final void gtk_window_set_title(long /*int*/ window, byte[] title) {
 	lock.lock();
 	try {
 		_gtk_window_set_title(window, title);
@@ -9738,8 +9738,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_skip_taskbar_hint(int /*long*/ window, boolean skips_taskbar);
-public static final void gtk_window_set_skip_taskbar_hint(int /*long*/ window, boolean skips_taskbar) {
+public static final native void _gtk_window_set_skip_taskbar_hint(long /*int*/ window, boolean skips_taskbar);
+public static final void gtk_window_set_skip_taskbar_hint(long /*int*/ window, boolean skips_taskbar) {
 	lock.lock();
 	try {
 		_gtk_window_set_skip_taskbar_hint(window, skips_taskbar);
@@ -9747,8 +9747,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_type_hint(int /*long*/ window, int hint);
-public static final void gtk_window_set_type_hint(int /*long*/ window, int hint) {
+public static final native void _gtk_window_set_type_hint(long /*int*/ window, int hint);
+public static final void gtk_window_set_type_hint(long /*int*/ window, int hint) {
 	lock.lock();
 	try {
 		_gtk_window_set_type_hint(window, hint);
@@ -9756,8 +9756,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_set_transient_for(int /*long*/ window, int /*long*/ parent);
-public static final void gtk_window_set_transient_for(int /*long*/ window, int /*long*/ parent) {
+public static final native void _gtk_window_set_transient_for(long /*int*/ window, long /*int*/ parent);
+public static final void gtk_window_set_transient_for(long /*int*/ window, long /*int*/ parent) {
 	lock.lock();
 	try {
 		_gtk_window_set_transient_for(window, parent);
@@ -9765,8 +9765,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _gtk_window_unmaximize(int /*long*/ handle);
-public static final void gtk_window_unmaximize(int /*long*/ handle) {
+public static final native void _gtk_window_unmaximize(long /*int*/ handle);
+public static final void gtk_window_unmaximize(long /*int*/ handle) {
 	lock.lock();
 	try {
 		_gtk_window_unmaximize(handle);
@@ -9774,55 +9774,55 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove(int /*long*/ dest, GInterfaceInfo src, int size);
-public static final native void memmove(int /*long*/ dest, GObjectClass src);
-public static final native void memmove(int /*long*/ dest, GTypeInfo src, int size);
-public static final native void memmove(int /*long*/ dest, GtkTargetEntry src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GtkAdjustment src);
-public static final native void memmove(int /*long*/ dest, GdkEventButton src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GdkEventExpose src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GdkEventMotion src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GtkWidgetClass src);
-public static final native void memmove(int /*long*/ dest, PangoAttribute src, int /*long*/ size);
-public static final native void memmove(GObjectClass  dest, int /*long*/ src);
-public static final native void memmove(GTypeQuery dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GtkColorSelectionDialog dest, int /*long*/ src);
-public static final native void memmove(GtkFileSelection dest, int /*long*/ src);
-public static final native void memmove(GdkDragContext dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GtkSelectionData dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GtkWidgetClass dest, int /*long*/ src);
-public static final native void memmove(GtkTargetPair dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GtkCombo dest, int /*long*/ src);
-public static final native void memmove(GtkAdjustment dest, int /*long*/ src);
-public static final native void memmove(GtkBorder dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkColor dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEvent dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventAny dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventButton dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventCrossing dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventExpose dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventFocus dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventKey dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventMotion dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventScroll dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventVisibility dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(GdkEventWindowState dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(int /*long*/ dest, GtkCellRendererClass src);
-public static final native void memmove(GtkCellRendererClass dest, int /*long*/ src);
-public static final native void memmove(GtkFixed dest, int /*long*/ src);
-public static final native void memmove(int /*long*/ dest, GtkFixed src);
-public static final native void memmove(GdkVisual dest, int /*long*/ src);
-public static final native void memmove(GdkImage dest, int /*long*/ src);
-public static final native void memmove(GdkRectangle dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoAttribute dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoAttrColor dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoAttrInt dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoItem dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoLayoutLine dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoLayoutRun dest, int /*long*/ src, int /*long*/ size);
-public static final native void memmove(PangoLogAttr dest, int /*long*/ src, int /*long*/ size);
-public static final native int /*long*/ _pango_attr_background_new (short red, short green, short blue);
-public static final int /*long*/ pango_attr_background_new (short red, short green, short blue) {
+public static final native void memmove(long /*int*/ dest, GInterfaceInfo src, int size);
+public static final native void memmove(long /*int*/ dest, GObjectClass src);
+public static final native void memmove(long /*int*/ dest, GTypeInfo src, int size);
+public static final native void memmove(long /*int*/ dest, GtkTargetEntry src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GtkAdjustment src);
+public static final native void memmove(long /*int*/ dest, GdkEventButton src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GdkEventExpose src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GdkEventMotion src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GtkWidgetClass src);
+public static final native void memmove(long /*int*/ dest, PangoAttribute src, long /*int*/ size);
+public static final native void memmove(GObjectClass  dest, long /*int*/ src);
+public static final native void memmove(GTypeQuery dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GtkColorSelectionDialog dest, long /*int*/ src);
+public static final native void memmove(GtkFileSelection dest, long /*int*/ src);
+public static final native void memmove(GdkDragContext dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GtkSelectionData dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GtkWidgetClass dest, long /*int*/ src);
+public static final native void memmove(GtkTargetPair dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GtkCombo dest, long /*int*/ src);
+public static final native void memmove(GtkAdjustment dest, long /*int*/ src);
+public static final native void memmove(GtkBorder dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkColor dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEvent dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventAny dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventButton dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventCrossing dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventExpose dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventFocus dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventKey dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventMotion dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventScroll dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventVisibility dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(GdkEventWindowState dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(long /*int*/ dest, GtkCellRendererClass src);
+public static final native void memmove(GtkCellRendererClass dest, long /*int*/ src);
+public static final native void memmove(GtkFixed dest, long /*int*/ src);
+public static final native void memmove(long /*int*/ dest, GtkFixed src);
+public static final native void memmove(GdkVisual dest, long /*int*/ src);
+public static final native void memmove(GdkImage dest, long /*int*/ src);
+public static final native void memmove(GdkRectangle dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoAttribute dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoAttrColor dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoAttrInt dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoItem dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoLayoutLine dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoLayoutRun dest, long /*int*/ src, long /*int*/ size);
+public static final native void memmove(PangoLogAttr dest, long /*int*/ src, long /*int*/ size);
+public static final native long /*int*/ _pango_attr_background_new (short red, short green, short blue);
+public static final long /*int*/ pango_attr_background_new (short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_background_new(red, green, blue);
@@ -9830,8 +9830,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_font_desc_new(int /*long*/ desc);
-public static final int /*long*/ pango_attr_font_desc_new(int /*long*/ desc) {
+public static final native long /*int*/ _pango_attr_font_desc_new(long /*int*/ desc);
+public static final long /*int*/ pango_attr_font_desc_new(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_attr_font_desc_new(desc);
@@ -9839,8 +9839,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_foreground_new (short red, short green, short blue);
-public static final int /*long*/ pango_attr_foreground_new (short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_foreground_new (short red, short green, short blue);
+public static final long /*int*/ pango_attr_foreground_new (short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_foreground_new(red, green, blue);
@@ -9848,8 +9848,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_rise_new(int rise);
-public static final int /*long*/ pango_attr_rise_new(int rise) {
+public static final native long /*int*/ _pango_attr_rise_new(int rise);
+public static final long /*int*/ pango_attr_rise_new(int rise) {
 	lock.lock();
 	try {
 		return _pango_attr_rise_new(rise);
@@ -9857,8 +9857,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final int /*long*/ pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native long /*int*/ _pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final long /*int*/ pango_attr_shape_new(PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		return _pango_attr_shape_new(ink_rect, logical_rect);
@@ -9866,8 +9866,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_attr_list_insert(int /*long*/ list, int /*long*/ attr);
-public static final void pango_attr_list_insert(int /*long*/ list, int /*long*/ attr) {
+public static final native void _pango_attr_list_insert(long /*int*/ list, long /*int*/ attr);
+public static final void pango_attr_list_insert(long /*int*/ list, long /*int*/ attr) {
 	lock.lock();
 	try {
 		_pango_attr_list_insert(list, attr);
@@ -9875,8 +9875,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_attr_list_change(int /*long*/ list, int /*long*/ attr);
-public static final void pango_attr_list_change(int /*long*/ list, int /*long*/ attr) {
+public static final native void _pango_attr_list_change(long /*int*/ list, long /*int*/ attr);
+public static final void pango_attr_list_change(long /*int*/ list, long /*int*/ attr) {
 	lock.lock();
 	try {
 		_pango_attr_list_change(list, attr);
@@ -9884,8 +9884,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_list_get_iterator(int /*long*/ list);
-public static final int /*long*/ pango_attr_list_get_iterator(int /*long*/ list) {
+public static final native long /*int*/ _pango_attr_list_get_iterator(long /*int*/ list);
+public static final long /*int*/ pango_attr_list_get_iterator(long /*int*/ list) {
 	lock.lock();
 	try {
 		return _pango_attr_list_get_iterator(list);
@@ -9893,8 +9893,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_attr_iterator_next(int /*long*/ iterator);
-public static final boolean pango_attr_iterator_next(int /*long*/ iterator) {
+public static final native boolean _pango_attr_iterator_next(long /*int*/ iterator);
+public static final boolean pango_attr_iterator_next(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_next(iterator);
@@ -9902,8 +9902,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_attr_iterator_range(int /*long*/ iterator, int[] start, int[] end);
-public static final void pango_attr_iterator_range(int /*long*/ iterator, int[] start, int[] end) {
+public static final native void _pango_attr_iterator_range(long /*int*/ iterator, int[] start, int[] end);
+public static final void pango_attr_iterator_range(long /*int*/ iterator, int[] start, int[] end) {
 	lock.lock();
 	try {
 		_pango_attr_iterator_range(iterator, start, end);
@@ -9911,8 +9911,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_iterator_get(int /*long*/ iterator, int type);
-public static final int /*long*/ pango_attr_iterator_get(int /*long*/ iterator, int type) {
+public static final native long /*int*/ _pango_attr_iterator_get(long /*int*/ iterator, int type);
+public static final long /*int*/ pango_attr_iterator_get(long /*int*/ iterator, int type) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_get(iterator, type);
@@ -9920,8 +9920,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_iterator_get_attrs(int /*long*/ iterator);
-public static final int /*long*/ pango_attr_iterator_get_attrs(int /*long*/ iterator) {
+public static final native long /*int*/ _pango_attr_iterator_get_attrs(long /*int*/ iterator);
+public static final long /*int*/ pango_attr_iterator_get_attrs(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		return _pango_attr_iterator_get_attrs(iterator);
@@ -9930,8 +9930,8 @@
 	}
 }
 
-public static final native void _pango_attr_iterator_destroy(int /*long*/ iterator);
-public static final void pango_attr_iterator_destroy(int /*long*/ iterator) {
+public static final native void _pango_attr_iterator_destroy(long /*int*/ iterator);
+public static final void pango_attr_iterator_destroy(long /*int*/ iterator) {
 	lock.lock();
 	try {
 		_pango_attr_iterator_destroy(iterator);
@@ -9939,8 +9939,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_list_new();
-public static final int /*long*/ pango_attr_list_new() {
+public static final native long /*int*/ _pango_attr_list_new();
+public static final long /*int*/ pango_attr_list_new() {
 	lock.lock();
 	try {
 		return _pango_attr_list_new();
@@ -9948,8 +9948,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_attr_list_unref(int /*long*/ list);
-public static final void pango_attr_list_unref(int /*long*/ list) {
+public static final native void _pango_attr_list_unref(long /*int*/ list);
+public static final void pango_attr_list_unref(long /*int*/ list) {
 	lock.lock();
 	try {
 		_pango_attr_list_unref(list);
@@ -9957,8 +9957,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_strikethrough_color_new(short red, short green, short blue);
-public static final int /*long*/ pango_attr_strikethrough_color_new(short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_strikethrough_color_new(short red, short green, short blue);
+public static final long /*int*/ pango_attr_strikethrough_color_new(short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_strikethrough_color_new(red, green, blue);
@@ -9966,8 +9966,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_strikethrough_new(boolean strikethrough);
-public static final int /*long*/ pango_attr_strikethrough_new(boolean strikethrough) {
+public static final native long /*int*/ _pango_attr_strikethrough_new(boolean strikethrough);
+public static final long /*int*/ pango_attr_strikethrough_new(boolean strikethrough) {
 	lock.lock();
 	try {
 		return _pango_attr_strikethrough_new(strikethrough);
@@ -9975,8 +9975,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_underline_color_new(short red, short green, short blue);
-public static final int /*long*/ pango_attr_underline_color_new(short red, short green, short blue) {
+public static final native long /*int*/ _pango_attr_underline_color_new(short red, short green, short blue);
+public static final long /*int*/ pango_attr_underline_color_new(short red, short green, short blue) {
 	lock.lock();
 	try {
 		return _pango_attr_underline_color_new(red, green, blue);
@@ -9984,8 +9984,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_underline_new(int underline);
-public static final int /*long*/ pango_attr_underline_new(int underline) {
+public static final native long /*int*/ _pango_attr_underline_new(int underline);
+public static final long /*int*/ pango_attr_underline_new(int underline) {
 	lock.lock();
 	try {
 		return _pango_attr_underline_new(underline);
@@ -9993,8 +9993,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_attr_weight_new(int weight);
-public static final int /*long*/ pango_attr_weight_new(int weight) {
+public static final native long /*int*/ _pango_attr_weight_new(int weight);
+public static final long /*int*/ pango_attr_weight_new(int weight) {
 	lock.lock();
 	try {
 		return _pango_attr_weight_new(weight);
@@ -10002,8 +10002,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_cairo_font_map_get_default();
-public static final int /*long*/ pango_cairo_font_map_get_default() {
+public static final native long /*int*/ _pango_cairo_font_map_get_default();
+public static final long /*int*/ pango_cairo_font_map_get_default() {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_get_default();
@@ -10011,8 +10011,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_cairo_font_map_new();
-public static final int /*long*/ pango_cairo_font_map_new() {
+public static final native long /*int*/ _pango_cairo_font_map_new();
+public static final long /*int*/ pango_cairo_font_map_new() {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_new();
@@ -10020,8 +10020,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_cairo_font_map_create_context(int /*long*/ fontmap);
-public static final int /*long*/ pango_cairo_font_map_create_context(int /*long*/ fontmap) {
+public static final native long /*int*/ _pango_cairo_font_map_create_context(long /*int*/ fontmap);
+public static final long /*int*/ pango_cairo_font_map_create_context(long /*int*/ fontmap) {
 	lock.lock();
 	try {
 		return _pango_cairo_font_map_create_context(fontmap);
@@ -10029,8 +10029,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_cairo_create_layout(int /*long*/ cairo);
-public static final int /*long*/ pango_cairo_create_layout(int /*long*/ cairo) {
+public static final native long /*int*/ _pango_cairo_create_layout(long /*int*/ cairo);
+public static final long /*int*/ pango_cairo_create_layout(long /*int*/ cairo) {
 	lock.lock();
 	try {
 		return _pango_cairo_create_layout(cairo);
@@ -10038,8 +10038,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_cairo_context_get_font_options(int /*long*/ context);
-public static final int /*long*/ pango_cairo_context_get_font_options(int /*long*/ context) {
+public static final native long /*int*/ _pango_cairo_context_get_font_options(long /*int*/ context);
+public static final long /*int*/ pango_cairo_context_get_font_options(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_cairo_context_get_font_options(context);
@@ -10047,8 +10047,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_cairo_context_set_font_options(int /*long*/ context, int /*long*/ options);
-public static final void pango_cairo_context_set_font_options(int /*long*/ context, int /*long*/ options) {
+public static final native void _pango_cairo_context_set_font_options(long /*int*/ context, long /*int*/ options);
+public static final void pango_cairo_context_set_font_options(long /*int*/ context, long /*int*/ options) {
 	lock.lock();
 	try {
 		_pango_cairo_context_set_font_options(context, options);
@@ -10056,8 +10056,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_cairo_font_map_set_resolution(int /*long*/ fontmap, double dpi);
-public static final void pango_cairo_font_map_set_resolution(int /*long*/ fontmap, double dpi) {
+public static final native void _pango_cairo_font_map_set_resolution(long /*int*/ fontmap, double dpi);
+public static final void pango_cairo_font_map_set_resolution(long /*int*/ fontmap, double dpi) {
 	lock.lock();
 	try {
 		_pango_cairo_font_map_set_resolution(fontmap, dpi);
@@ -10065,8 +10065,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_cairo_layout_path(int /*long*/ cairo, int /*long*/ layout);
-public static final void pango_cairo_layout_path(int /*long*/ cairo, int /*long*/ layout) {
+public static final native void _pango_cairo_layout_path(long /*int*/ cairo, long /*int*/ layout);
+public static final void pango_cairo_layout_path(long /*int*/ cairo, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_cairo_layout_path(cairo, layout);
@@ -10074,8 +10074,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_cairo_show_layout(int /*long*/ cairo, int /*long*/ layout);
-public static final void pango_cairo_show_layout(int /*long*/ cairo, int /*long*/ layout) {
+public static final native void _pango_cairo_show_layout(long /*int*/ cairo, long /*int*/ layout);
+public static final void pango_cairo_show_layout(long /*int*/ cairo, long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_cairo_show_layout(cairo, layout);
@@ -10083,8 +10083,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_context_get_base_dir(int /*long*/ context);
-public static final int pango_context_get_base_dir(int /*long*/ context) {
+public static final native int _pango_context_get_base_dir(long /*int*/ context);
+public static final int pango_context_get_base_dir(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_context_get_base_dir(context);
@@ -10092,8 +10092,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_context_get_language(int /*long*/ context);
-public static final int /*long*/ pango_context_get_language(int /*long*/ context) {
+public static final native long /*int*/ _pango_context_get_language(long /*int*/ context);
+public static final long /*int*/ pango_context_get_language(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_context_get_language(context);
@@ -10101,8 +10101,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_context_get_metrics(int /*long*/ context, int /*long*/ desc, int /*long*/ language);
-public static final int /*long*/ pango_context_get_metrics(int /*long*/ context, int /*long*/ desc, int /*long*/ language) {
+public static final native long /*int*/ _pango_context_get_metrics(long /*int*/ context, long /*int*/ desc, long /*int*/ language);
+public static final long /*int*/ pango_context_get_metrics(long /*int*/ context, long /*int*/ desc, long /*int*/ language) {
 	lock.lock();
 	try {
 		return _pango_context_get_metrics(context, desc, language);
@@ -10110,8 +10110,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_context_list_families(int /*long*/ context, int /*long*/[] families, int[] n_families);
-public static final void pango_context_list_families(int /*long*/ context, int /*long*/[] families, int[] n_families) {
+public static final native void _pango_context_list_families(long /*int*/ context, long /*int*/[] families, int[] n_families);
+public static final void pango_context_list_families(long /*int*/ context, long /*int*/[] families, int[] n_families) {
 	lock.lock();
 	try {
 		_pango_context_list_families(context, families, n_families);
@@ -10119,8 +10119,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_context_set_base_dir(int /*long*/ context, int direction);
-public static final void pango_context_set_base_dir(int /*long*/ context, int direction) {
+public static final native void _pango_context_set_base_dir(long /*int*/ context, int direction);
+public static final void pango_context_set_base_dir(long /*int*/ context, int direction) {
 	lock.lock();
 	try {
 		_pango_context_set_base_dir(context, direction);
@@ -10128,8 +10128,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_context_set_language(int /*long*/ context, int /*long*/ language);
-public static final void pango_context_set_language(int /*long*/ context, int /*long*/ language) {
+public static final native void _pango_context_set_language(long /*int*/ context, long /*int*/ language);
+public static final void pango_context_set_language(long /*int*/ context, long /*int*/ language) {
 	lock.lock();
 	try {
 		_pango_context_set_language(context, language);
@@ -10137,8 +10137,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_copy(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_copy(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_copy(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_copy(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_copy(desc);
@@ -10146,8 +10146,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_free(int /*long*/ desc);
-public static final void pango_font_description_free(int /*long*/ desc) {
+public static final native void _pango_font_description_free(long /*int*/ desc);
+public static final void pango_font_description_free(long /*int*/ desc) {
 	lock.lock();
 	try {
 		_pango_font_description_free(desc);
@@ -10155,8 +10155,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_from_string(byte[] str);
-public static final int /*long*/ pango_font_description_from_string(byte[] str) {
+public static final native long /*int*/ _pango_font_description_from_string(byte[] str);
+public static final long /*int*/ pango_font_description_from_string(byte[] str) {
 	lock.lock();
 	try {
 		return _pango_font_description_from_string(str);
@@ -10164,8 +10164,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_get_family(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_get_family(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_get_family(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_get_family(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_family(desc);
@@ -10173,8 +10173,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_description_get_size(int /*long*/ desc);
-public static final int pango_font_description_get_size(int /*long*/ desc) {
+public static final native int _pango_font_description_get_size(long /*int*/ desc);
+public static final int pango_font_description_get_size(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_size(desc);
@@ -10182,8 +10182,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_description_get_style(int /*long*/ desc);
-public static final int pango_font_description_get_style(int /*long*/ desc) {
+public static final native int _pango_font_description_get_style(long /*int*/ desc);
+public static final int pango_font_description_get_style(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_style(desc);
@@ -10191,8 +10191,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_description_get_weight(int /*long*/ desc);
-public static final int pango_font_description_get_weight(int /*long*/ desc) {
+public static final native int _pango_font_description_get_weight(long /*int*/ desc);
+public static final int pango_font_description_get_weight(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_get_weight(desc);
@@ -10200,8 +10200,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_new();
-public static final int /*long*/ pango_font_description_new() {
+public static final native long /*int*/ _pango_font_description_new();
+public static final long /*int*/ pango_font_description_new() {
 	lock.lock();
 	try {
 		return _pango_font_description_new();
@@ -10209,8 +10209,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_set_family(int /*long*/ desc, byte[] family);
-public static final void pango_font_description_set_family(int /*long*/ desc, byte[] family) {
+public static final native void _pango_font_description_set_family(long /*int*/ desc, byte[] family);
+public static final void pango_font_description_set_family(long /*int*/ desc, byte[] family) {
 	lock.lock();
 	try {
 		_pango_font_description_set_family(desc, family);
@@ -10218,8 +10218,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_set_size(int /*long*/ desc, int size);
-public static final void pango_font_description_set_size(int /*long*/ desc, int size) {
+public static final native void _pango_font_description_set_size(long /*int*/ desc, int size);
+public static final void pango_font_description_set_size(long /*int*/ desc, int size) {
 	lock.lock();
 	try {
 		_pango_font_description_set_size(desc, size);
@@ -10227,8 +10227,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_set_stretch(int /*long*/ desc, int stretch);
-public static final void pango_font_description_set_stretch(int /*long*/ desc, int stretch) {
+public static final native void _pango_font_description_set_stretch(long /*int*/ desc, int stretch);
+public static final void pango_font_description_set_stretch(long /*int*/ desc, int stretch) {
 	lock.lock();
 	try {
 		_pango_font_description_set_stretch(desc, stretch);
@@ -10236,8 +10236,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_set_style(int /*long*/ desc, int weight);
-public static final void pango_font_description_set_style(int /*long*/ desc, int weight) {
+public static final native void _pango_font_description_set_style(long /*int*/ desc, int weight);
+public static final void pango_font_description_set_style(long /*int*/ desc, int weight) {
 	lock.lock();
 	try {
 		_pango_font_description_set_style(desc, weight);
@@ -10245,8 +10245,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_description_set_weight(int /*long*/ desc, int weight);
-public static final void pango_font_description_set_weight(int /*long*/ desc, int weight) {
+public static final native void _pango_font_description_set_weight(long /*int*/ desc, int weight);
+public static final void pango_font_description_set_weight(long /*int*/ desc, int weight) {
 	lock.lock();
 	try {
 		_pango_font_description_set_weight(desc, weight);
@@ -10254,8 +10254,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_description_to_string(int /*long*/ desc);
-public static final int /*long*/ pango_font_description_to_string(int /*long*/ desc) {
+public static final native long /*int*/ _pango_font_description_to_string(long /*int*/ desc);
+public static final long /*int*/ pango_font_description_to_string(long /*int*/ desc) {
 	lock.lock();
 	try {
 		return _pango_font_description_to_string(desc);
@@ -10263,8 +10263,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_face_describe(int /*long*/ face);
-public static final int /*long*/ pango_font_face_describe(int /*long*/ face) {
+public static final native long /*int*/ _pango_font_face_describe(long /*int*/ face);
+public static final long /*int*/ pango_font_face_describe(long /*int*/ face) {
 	lock.lock();
 	try {
 		return _pango_font_face_describe(face);
@@ -10272,8 +10272,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_family_get_name(int /*long*/ family);
-public static final int /*long*/ pango_font_family_get_name(int /*long*/ family) {
+public static final native long /*int*/ _pango_font_family_get_name(long /*int*/ family);
+public static final long /*int*/ pango_font_family_get_name(long /*int*/ family) {
 	lock.lock();
 	try {
 		return _pango_font_family_get_name(family);
@@ -10281,8 +10281,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_family_list_faces(int /*long*/ family, int /*long*/[] faces, int[] n_faces);
-public static final void pango_font_family_list_faces(int /*long*/ family, int /*long*/[] faces, int[] n_faces) {
+public static final native void _pango_font_family_list_faces(long /*int*/ family, long /*int*/[] faces, int[] n_faces);
+public static final void pango_font_family_list_faces(long /*int*/ family, long /*int*/[] faces, int[] n_faces) {
 	lock.lock();
 	try {
 		_pango_font_family_list_faces(family, faces, n_faces);
@@ -10290,8 +10290,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_font_get_metrics(int /*long*/ font, int /*long*/ language);
-public static final int /*long*/ pango_font_get_metrics(int /*long*/ font, int /*long*/ language) {
+public static final native long /*int*/ _pango_font_get_metrics(long /*int*/ font, long /*int*/ language);
+public static final long /*int*/ pango_font_get_metrics(long /*int*/ font, long /*int*/ language) {
 	lock.lock();
 	try {
 		return _pango_font_get_metrics(font, language);
@@ -10299,8 +10299,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_approximate_char_width(int /*long*/ metrics);
-public static final int pango_font_metrics_get_approximate_char_width(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_approximate_char_width(long /*int*/ metrics);
+public static final int pango_font_metrics_get_approximate_char_width(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_approximate_char_width(metrics);
@@ -10308,8 +10308,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_ascent(int /*long*/ metrics);
-public static final int pango_font_metrics_get_ascent(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_ascent(long /*int*/ metrics);
+public static final int pango_font_metrics_get_ascent(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_ascent(metrics);
@@ -10317,8 +10317,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_descent(int /*long*/ metrics);
-public static final int pango_font_metrics_get_descent(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_descent(long /*int*/ metrics);
+public static final int pango_font_metrics_get_descent(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_descent(metrics);
@@ -10326,8 +10326,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_underline_thickness(int /*long*/ metrics);
-public static final int pango_font_metrics_get_underline_thickness(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_underline_thickness(long /*int*/ metrics);
+public static final int pango_font_metrics_get_underline_thickness(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_underline_thickness(metrics);
@@ -10335,8 +10335,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_underline_position(int /*long*/ metrics);
-public static final int pango_font_metrics_get_underline_position(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_underline_position(long /*int*/ metrics);
+public static final int pango_font_metrics_get_underline_position(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_underline_position(metrics);
@@ -10344,8 +10344,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_strikethrough_thickness(int /*long*/ metrics);
-public static final int pango_font_metrics_get_strikethrough_thickness(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_strikethrough_thickness(long /*int*/ metrics);
+public static final int pango_font_metrics_get_strikethrough_thickness(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_strikethrough_thickness(metrics);
@@ -10353,8 +10353,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_font_metrics_get_strikethrough_position(int /*long*/ metrics);
-public static final int pango_font_metrics_get_strikethrough_position(int /*long*/ metrics) {
+public static final native int _pango_font_metrics_get_strikethrough_position(long /*int*/ metrics);
+public static final int pango_font_metrics_get_strikethrough_position(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		return _pango_font_metrics_get_strikethrough_position(metrics);
@@ -10362,8 +10362,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_font_metrics_unref(int /*long*/ metrics);
-public static final void pango_font_metrics_unref(int /*long*/ metrics) {
+public static final native void _pango_font_metrics_unref(long /*int*/ metrics);
+public static final void pango_font_metrics_unref(long /*int*/ metrics) {
 	lock.lock();
 	try {
 		_pango_font_metrics_unref(metrics);
@@ -10371,8 +10371,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_language_from_string(byte[] language);
-public static final int /*long*/ pango_language_from_string(byte[] language) {
+public static final native long /*int*/ _pango_language_from_string(byte[] language);
+public static final long /*int*/ pango_language_from_string(byte[] language) {
 	lock.lock();
 	try {
 		return _pango_language_from_string(language);
@@ -10380,8 +10380,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_context_changed(int /*long*/ layout);
-public static final void pango_layout_context_changed(int /*long*/ layout) {
+public static final native void _pango_layout_context_changed(long /*int*/ layout);
+public static final void pango_layout_context_changed(long /*int*/ layout) {
 	lock.lock();
 	try {
 		_pango_layout_context_changed(layout);
@@ -10389,8 +10389,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_get_alignment(int /*long*/ layout);
-public static final int pango_layout_get_alignment(int /*long*/ layout) {
+public static final native int _pango_layout_get_alignment(long /*int*/ layout);
+public static final int pango_layout_get_alignment(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_alignment(layout);
@@ -10398,8 +10398,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_context(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_context(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_context(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_context(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_context(layout);
@@ -10407,8 +10407,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_attributes(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_attributes(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_attributes(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_attributes(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_attributes(layout);
@@ -10416,8 +10416,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_get_indent(int /*long*/ layout);
-public static final int pango_layout_get_indent(int /*long*/ layout) {
+public static final native int _pango_layout_get_indent(long /*int*/ layout);
+public static final int pango_layout_get_indent(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_indent(layout);
@@ -10425,8 +10425,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_iter(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_iter(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_iter(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_iter(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_iter(layout);
@@ -10434,8 +10434,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_layout_get_justify(int /*long*/ layout);
-public static final boolean pango_layout_get_justify(int /*long*/ layout) {
+public static final native boolean _pango_layout_get_justify(long /*int*/ layout);
+public static final boolean pango_layout_get_justify(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_justify(layout);
@@ -10443,8 +10443,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_line(int /*long*/ layout, int line);
-public static final int /*long*/ pango_layout_get_line(int /*long*/ layout, int line) {
+public static final native long /*int*/ _pango_layout_get_line(long /*int*/ layout, int line);
+public static final long /*int*/ pango_layout_get_line(long /*int*/ layout, int line) {
 	lock.lock();
 	try {
 		return _pango_layout_get_line(layout, line);
@@ -10452,8 +10452,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_get_line_count(int /*long*/ layout);
-public static final int pango_layout_get_line_count(int /*long*/ layout) {
+public static final native int _pango_layout_get_line_count(long /*int*/ layout);
+public static final int pango_layout_get_line_count(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_line_count(layout);
@@ -10461,8 +10461,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_get_log_attrs(int /*long*/ layout, int /*long*/[] attrs, int[] n_attrs);
-public static final void pango_layout_get_log_attrs(int /*long*/ layout, int /*long*/[] attrs, int[] n_attrs) {
+public static final native void _pango_layout_get_log_attrs(long /*int*/ layout, long /*int*/[] attrs, int[] n_attrs);
+public static final void pango_layout_get_log_attrs(long /*int*/ layout, long /*int*/[] attrs, int[] n_attrs) {
 	lock.lock();
 	try {
 		_pango_layout_get_log_attrs(layout, attrs, n_attrs);
@@ -10470,8 +10470,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_get_size(int /*long*/ layout, int[] width, int[] height);
-public static final void pango_layout_get_size(int /*long*/ layout, int[] width, int[] height) {
+public static final native void _pango_layout_get_size(long /*int*/ layout, int[] width, int[] height);
+public static final void pango_layout_get_size(long /*int*/ layout, int[] width, int[] height) {
 	lock.lock();
 	try {
 		_pango_layout_get_size(layout, width, height);
@@ -10479,8 +10479,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_get_spacing(int /*long*/ layout);
-public static final int pango_layout_get_spacing(int /*long*/ layout) {
+public static final native int _pango_layout_get_spacing(long /*int*/ layout);
+public static final int pango_layout_get_spacing(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_spacing(layout);
@@ -10488,8 +10488,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_tabs(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_tabs(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_tabs(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_tabs(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_tabs(layout);
@@ -10497,8 +10497,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_get_text(int /*long*/ layout);
-public static final int /*long*/ pango_layout_get_text(int /*long*/ layout) {
+public static final native long /*int*/ _pango_layout_get_text(long /*int*/ layout);
+public static final long /*int*/ pango_layout_get_text(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_text(layout);
@@ -10506,8 +10506,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_get_width(int /*long*/ layout);
-public static final int pango_layout_get_width(int /*long*/ layout) {
+public static final native int _pango_layout_get_width(long /*int*/ layout);
+public static final int pango_layout_get_width(long /*int*/ layout) {
 	lock.lock();
 	try {
 		return _pango_layout_get_width(layout);
@@ -10515,8 +10515,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_index_to_pos(int /*long*/ layout, int index, PangoRectangle pos);
-public static final void pango_layout_index_to_pos(int /*long*/ layout, int index, PangoRectangle pos) {
+public static final native void _pango_layout_index_to_pos(long /*int*/ layout, int index, PangoRectangle pos);
+public static final void pango_layout_index_to_pos(long /*int*/ layout, int index, PangoRectangle pos) {
 	lock.lock();
 	try {
 		_pango_layout_index_to_pos(layout, index, pos);
@@ -10524,8 +10524,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_iter_free(int /*long*/ iter);
-public static final void pango_layout_iter_free(int /*long*/ iter) {
+public static final native void _pango_layout_iter_free(long /*int*/ iter);
+public static final void pango_layout_iter_free(long /*int*/ iter) {
 	lock.lock();
 	try {
 		_pango_layout_iter_free(iter);
@@ -10533,8 +10533,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_iter_get_line_extents(int /*long*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final void pango_layout_iter_get_line_extents(int /*long*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native void _pango_layout_iter_get_line_extents(long /*int*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final void pango_layout_iter_get_line_extents(long /*int*/ iter, PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		_pango_layout_iter_get_line_extents(iter, ink_rect, logical_rect);
@@ -10542,8 +10542,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_iter_get_index(int /*long*/ iter);
-public static final int pango_layout_iter_get_index(int /*long*/ iter) {
+public static final native int _pango_layout_iter_get_index(long /*int*/ iter);
+public static final int pango_layout_iter_get_index(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_get_index(iter);
@@ -10551,8 +10551,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_layout_iter_get_run(int /*long*/ iter);
-public static final int /*long*/ pango_layout_iter_get_run(int /*long*/ iter) {
+public static final native long /*int*/ _pango_layout_iter_get_run(long /*int*/ iter);
+public static final long /*int*/ pango_layout_iter_get_run(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_get_run(iter);
@@ -10560,8 +10560,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_layout_iter_next_line(int /*long*/ iter);
-public static final boolean pango_layout_iter_next_line(int /*long*/ iter) {
+public static final native boolean _pango_layout_iter_next_line(long /*int*/ iter);
+public static final boolean pango_layout_iter_next_line(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_next_line(iter);
@@ -10569,8 +10569,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_layout_iter_next_run(int /*long*/ iter);
-public static final boolean pango_layout_iter_next_run(int /*long*/ iter) {
+public static final native boolean _pango_layout_iter_next_run(long /*int*/ iter);
+public static final boolean pango_layout_iter_next_run(long /*int*/ iter) {
 	lock.lock();
 	try {
 		return _pango_layout_iter_next_run(iter);
@@ -10578,8 +10578,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_line_get_extents(int /*long*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect);
-public static final void pango_layout_line_get_extents(int /*long*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect) {
+public static final native void _pango_layout_line_get_extents(long /*int*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect);
+public static final void pango_layout_line_get_extents(long /*int*/ line, PangoRectangle ink_rect, PangoRectangle logical_rect) {
 	lock.lock();
 	try {
 		_pango_layout_line_get_extents(line, ink_rect, logical_rect);
@@ -10587,8 +10587,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_layout_line_x_to_index(int /*long*/ line, int x_pos, int[] index_, int[] trailing);
-public static final boolean pango_layout_line_x_to_index(int /*long*/ line, int x_pos, int[] index_, int[] trailing) {
+public static final native boolean _pango_layout_line_x_to_index(long /*int*/ line, int x_pos, int[] index_, int[] trailing);
+public static final boolean pango_layout_line_x_to_index(long /*int*/ line, int x_pos, int[] index_, int[] trailing) {
 	lock.lock();
 	try {
 		return _pango_layout_line_x_to_index(line, x_pos, index_, trailing);
@@ -10596,8 +10596,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_layout_line_get_resolved_dir(int /*long*/ line);
-public static final int pango_layout_line_get_resolved_dir(int /*long*/ line) {
+public static final native int _pango_layout_line_get_resolved_dir(long /*int*/ line);
+public static final int pango_layout_line_get_resolved_dir(long /*int*/ line) {
 	lock.lock();
 	try {
 		return _pango_layout_line_get_resolved_dir(line);
@@ -10606,8 +10606,8 @@
 	}
 }
 
-public static final native int /*long*/ _pango_layout_new(int /*long*/ context);
-public static final int /*long*/ pango_layout_new(int /*long*/ context) {
+public static final native long /*int*/ _pango_layout_new(long /*int*/ context);
+public static final long /*int*/ pango_layout_new(long /*int*/ context) {
 	lock.lock();
 	try {
 		return _pango_layout_new(context);
@@ -10615,8 +10615,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_alignment (int /*long*/ layout, int alignment);
-public static final void pango_layout_set_alignment (int /*long*/ layout, int alignment) {
+public static final native void _pango_layout_set_alignment (long /*int*/ layout, int alignment);
+public static final void pango_layout_set_alignment (long /*int*/ layout, int alignment) {
 	lock.lock();
 	try {
 		_pango_layout_set_alignment(layout, alignment);
@@ -10624,8 +10624,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_attributes(int /*long*/ layout, int /*long*/ attrs);
-public static final void pango_layout_set_attributes(int /*long*/ layout, int /*long*/ attrs) {
+public static final native void _pango_layout_set_attributes(long /*int*/ layout, long /*int*/ attrs);
+public static final void pango_layout_set_attributes(long /*int*/ layout, long /*int*/ attrs) {
 	lock.lock();
 	try {
 		_pango_layout_set_attributes(layout, attrs);
@@ -10633,8 +10633,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_auto_dir(int /*long*/ layout, boolean auto_dir);
-public static final void pango_layout_set_auto_dir(int /*long*/ layout, boolean auto_dir) {
+public static final native void _pango_layout_set_auto_dir(long /*int*/ layout, boolean auto_dir);
+public static final void pango_layout_set_auto_dir(long /*int*/ layout, boolean auto_dir) {
 	lock.lock();
 	try {
 		_pango_layout_set_auto_dir(layout, auto_dir);
@@ -10642,8 +10642,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_font_description(int /*long*/ context, int /*long*/ descr);
-public static final void pango_layout_set_font_description(int /*long*/ context, int /*long*/ descr) {
+public static final native void _pango_layout_set_font_description(long /*int*/ context, long /*int*/ descr);
+public static final void pango_layout_set_font_description(long /*int*/ context, long /*int*/ descr) {
 	lock.lock();
 	try {
 		_pango_layout_set_font_description(context, descr);
@@ -10651,8 +10651,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_indent(int /*long*/ layout, int indent);
-public static final void pango_layout_set_indent(int /*long*/ layout, int indent) {
+public static final native void _pango_layout_set_indent(long /*int*/ layout, int indent);
+public static final void pango_layout_set_indent(long /*int*/ layout, int indent) {
 	lock.lock();
 	try {
 		_pango_layout_set_indent(layout, indent);
@@ -10660,8 +10660,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_justify(int /*long*/ layout, boolean justify);
-public static final void pango_layout_set_justify(int /*long*/ layout, boolean justify) {
+public static final native void _pango_layout_set_justify(long /*int*/ layout, boolean justify);
+public static final void pango_layout_set_justify(long /*int*/ layout, boolean justify) {
 	lock.lock();
 	try {
 		_pango_layout_set_justify(layout, justify);
@@ -10669,8 +10669,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_single_paragraph_mode(int /*long*/ context, boolean setting);
-public static final void pango_layout_set_single_paragraph_mode(int /*long*/ context, boolean setting) {
+public static final native void _pango_layout_set_single_paragraph_mode(long /*int*/ context, boolean setting);
+public static final void pango_layout_set_single_paragraph_mode(long /*int*/ context, boolean setting) {
 	lock.lock();
 	try {
 		_pango_layout_set_single_paragraph_mode(context, setting);
@@ -10678,8 +10678,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_spacing(int /*long*/ layout, int spacing);
-public static final void pango_layout_set_spacing(int /*long*/ layout, int spacing) {
+public static final native void _pango_layout_set_spacing(long /*int*/ layout, int spacing);
+public static final void pango_layout_set_spacing(long /*int*/ layout, int spacing) {
 	lock.lock();
 	try {
 		_pango_layout_set_spacing(layout, spacing);
@@ -10687,8 +10687,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_tabs(int /*long*/ layout, int /*long*/ tabs);
-public static final void pango_layout_set_tabs(int /*long*/ layout, int /*long*/ tabs) {
+public static final native void _pango_layout_set_tabs(long /*int*/ layout, long /*int*/ tabs);
+public static final void pango_layout_set_tabs(long /*int*/ layout, long /*int*/ tabs) {
 	lock.lock();
 	try {
 		_pango_layout_set_tabs(layout, tabs);
@@ -10696,8 +10696,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_text(int /*long*/ layout, byte[] text, int length);
-public static final void pango_layout_set_text(int /*long*/ layout, byte[] text, int length) {
+public static final native void _pango_layout_set_text(long /*int*/ layout, byte[] text, int length);
+public static final void pango_layout_set_text(long /*int*/ layout, byte[] text, int length) {
 	lock.lock();
 	try {
 		_pango_layout_set_text(layout, text, length);
@@ -10705,8 +10705,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_width(int /*long*/ layout, int width);
-public static final void pango_layout_set_width(int /*long*/ layout, int width) {
+public static final native void _pango_layout_set_width(long /*int*/ layout, int width);
+public static final void pango_layout_set_width(long /*int*/ layout, int width) {
 	lock.lock();
 	try {
 		_pango_layout_set_width(layout, width);
@@ -10714,8 +10714,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_layout_set_wrap (int /*long*/ layout, int wrap);
-public static final void pango_layout_set_wrap (int /*long*/ layout, int wrap) {
+public static final native void _pango_layout_set_wrap (long /*int*/ layout, int wrap);
+public static final void pango_layout_set_wrap (long /*int*/ layout, int wrap) {
 	lock.lock();
 	try {
 		_pango_layout_set_wrap(layout, wrap);
@@ -10723,8 +10723,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _pango_layout_xy_to_index(int /*long*/ layout, int x, int y, int[] index, int[] trailing);
-public static final boolean pango_layout_xy_to_index(int /*long*/ layout, int x, int y, int[] index, int[] trailing) {
+public static final native boolean _pango_layout_xy_to_index(long /*int*/ layout, int x, int y, int[] index, int[] trailing);
+public static final boolean pango_layout_xy_to_index(long /*int*/ layout, int x, int y, int[] index, int[] trailing) {
 	lock.lock();
 	try {
 		return _pango_layout_xy_to_index(layout, x, y, index, trailing);
@@ -10732,8 +10732,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _pango_tab_array_get_size(int /*long*/ tab_array);
-public static final int pango_tab_array_get_size(int /*long*/ tab_array) {
+public static final native int _pango_tab_array_get_size(long /*int*/ tab_array);
+public static final int pango_tab_array_get_size(long /*int*/ tab_array) {
 	lock.lock();
 	try {
 		return _pango_tab_array_get_size(tab_array);
@@ -10741,8 +10741,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_tab_array_get_tabs(int /*long*/ tab_array, int /*long*/[] alignments, int /*long*/[] locations);
-public static final void pango_tab_array_get_tabs(int /*long*/ tab_array, int /*long*/[] alignments, int /*long*/[] locations) {
+public static final native void _pango_tab_array_get_tabs(long /*int*/ tab_array, long /*int*/[] alignments, long /*int*/[] locations);
+public static final void pango_tab_array_get_tabs(long /*int*/ tab_array, long /*int*/[] alignments, long /*int*/[] locations) {
 	lock.lock();
 	try {
 		_pango_tab_array_get_tabs(tab_array, alignments, locations);
@@ -10750,8 +10750,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_tab_array_free(int /*long*/ tab_array);
-public static final void pango_tab_array_free(int /*long*/ tab_array) {
+public static final native void _pango_tab_array_free(long /*int*/ tab_array);
+public static final void pango_tab_array_free(long /*int*/ tab_array) {
 	lock.lock();
 	try {
 		_pango_tab_array_free(tab_array);
@@ -10759,8 +10759,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _pango_tab_array_new(int initial_size, boolean positions_in_pixels);
-public static final int /*long*/ pango_tab_array_new(int initial_size, boolean positions_in_pixels) {
+public static final native long /*int*/ _pango_tab_array_new(int initial_size, boolean positions_in_pixels);
+public static final long /*int*/ pango_tab_array_new(int initial_size, boolean positions_in_pixels) {
 	lock.lock();
 	try {
 		return _pango_tab_array_new(initial_size, positions_in_pixels);
@@ -10768,8 +10768,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _pango_tab_array_set_tab(int /*long*/ tab_array, int tab_index, int /*long*/ alignment, int location);
-public static final void pango_tab_array_set_tab(int /*long*/ tab_array, int tab_index, int /*long*/ alignment, int location) {
+public static final native void _pango_tab_array_set_tab(long /*int*/ tab_array, int tab_index, long /*int*/ alignment, int location);
+public static final void pango_tab_array_set_tab(long /*int*/ tab_array, int tab_index, long /*int*/ alignment, int location) {
 	lock.lock();
 	try {
 		_pango_tab_array_set_tab(tab_array, tab_index, alignment, location);
@@ -10777,8 +10777,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _atk_object_add_relationship (int /*long*/ object, int relationship, int /*long*/ target);
-public static final boolean atk_object_add_relationship (int /*long*/ object, int relationship, int /*long*/ target) {
+public static final native boolean _atk_object_add_relationship (long /*int*/ object, int relationship, long /*int*/ target);
+public static final boolean atk_object_add_relationship (long /*int*/ object, int relationship, long /*int*/ target) {
 	lock.lock();
 	try {
 		return _atk_object_add_relationship(object, relationship, target);
diff -ur x86/org/eclipse/swt/internal/gtk/PangoAttribute.java x86_64/org/eclipse/swt/internal/gtk/PangoAttribute.java
--- x86/org/eclipse/swt/internal/gtk/PangoAttribute.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/PangoAttribute.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 
 public class PangoAttribute {
-	public int /*long*/ klass;
+	public long /*int*/ klass;
 	public int start_index;
 	public int end_index;
 	public static final int sizeof = OS.PangoAttribute_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/PangoItem.java x86_64/org/eclipse/swt/internal/gtk/PangoItem.java
--- x86/org/eclipse/swt/internal/gtk/PangoItem.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/PangoItem.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,11 +18,11 @@
 	public int offset;
 	public int length;
 	public int num_chars;
-	public int /*long*/ analysis_shape_engine;
-	public int /*long*/ analysis_lang_engine;
-	public int /*long*/ analysis_font;
+	public long /*int*/ analysis_shape_engine;
+	public long /*int*/ analysis_lang_engine;
+	public long /*int*/ analysis_font;
 	public byte analysis_level;
-	public int /*long*/ analysis_language;
-	public int /*long*/ analysis_extra_attrs;
+	public long /*int*/ analysis_language;
+	public long /*int*/ analysis_extra_attrs;
 	public static final int sizeof = OS.PangoItem_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/PangoLayoutLine.java x86_64/org/eclipse/swt/internal/gtk/PangoLayoutLine.java
--- x86/org/eclipse/swt/internal/gtk/PangoLayoutLine.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/PangoLayoutLine.java	2009-02-11 17:43:48.000000000 -0500
@@ -15,10 +15,10 @@
 package org.eclipse.swt.internal.gtk;
 
 public class PangoLayoutLine {
-	public int /*long*/ layout;
+	public long /*int*/ layout;
 	public int start_index;
 	public int length;
-	public int /*long*/ runs;
+	public long /*int*/ runs;
 //	public boolean is_paragraph_start;
 //	public byte resolved_dir;
 	public static final int sizeof = OS.PangoLayoutLine_sizeof();
diff -ur x86/org/eclipse/swt/internal/gtk/PangoLayoutRun.java x86_64/org/eclipse/swt/internal/gtk/PangoLayoutRun.java
--- x86/org/eclipse/swt/internal/gtk/PangoLayoutRun.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/PangoLayoutRun.java	2009-02-11 17:43:48.000000000 -0500
@@ -15,7 +15,7 @@
 package org.eclipse.swt.internal.gtk;
 
 public class PangoLayoutRun {
-	public int /*long*/ item;
-	public int /*long*/ glyphs;
+	public long /*int*/ item;
+	public long /*int*/ glyphs;
 	public static final int sizeof = OS.PangoLayoutRun_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/XAnyEvent.java x86_64/org/eclipse/swt/internal/gtk/XAnyEvent.java
--- x86/org/eclipse/swt/internal/gtk/XAnyEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/XAnyEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -12,9 +12,9 @@
 
  
 public abstract class XAnyEvent extends XEvent {
-	public int /*long*/ serial;
+	public long /*int*/ serial;
 	public int send_event;
-	public int /*long*/ display;
-	public int /*long*/ window;
+	public long /*int*/ display;
+	public long /*int*/ window;
 	public static final int sizeof = OS.XAnyEvent_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/XClientMessageEvent.java x86_64/org/eclipse/swt/internal/gtk/XClientMessageEvent.java
--- x86/org/eclipse/swt/internal/gtk/XClientMessageEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/XClientMessageEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -13,12 +13,12 @@
  
 public class XClientMessageEvent {
 	public int type;
-	public int /*long*/ serial;
+	public long /*int*/ serial;
 	public boolean send_event;
-	public int /*long*/ display;
-	public int /*long*/ window;
-	public int /*long*/ message_type;
+	public long /*int*/ display;
+	public long /*int*/ window;
+	public long /*int*/ message_type;
 	public int format;
-	public int /*long*/[] data = new int /*long*/[5];
+	public long /*int*/[] data = new long /*int*/[5];
 	public static final int sizeof = OS.XClientMessageEvent_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/XCrossingEvent.java x86_64/org/eclipse/swt/internal/gtk/XCrossingEvent.java
--- x86/org/eclipse/swt/internal/gtk/XCrossingEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/XCrossingEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -12,8 +12,8 @@
 
  
 public class XCrossingEvent extends XAnyEvent {
-	public int /*long*/ root;
-	public int /*long*/ subwindow;
+	public long /*int*/ root;
+	public long /*int*/ subwindow;
 	public int time;
 	public int x;
 	public int y;
diff -ur x86/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java x86_64/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java
--- x86/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/XRenderPictureAttributes.java	2009-02-11 17:43:48.000000000 -0500
@@ -13,17 +13,17 @@
  
 public class XRenderPictureAttributes {
 	public boolean repeat;
-	public int /*long*/ alpha_map;
+	public long /*int*/ alpha_map;
 	public int alpha_x_origin;
 	public int alpha_y_origin;
 	public int clip_x_origin;
 	public int clip_y_origin;
-	public int /*long*/ clip_mask;
+	public long /*int*/ clip_mask;
 	public boolean graphics_exposures;
 	public int subwindow_mode;
 	public int poly_edge;
 	public int poly_mode;
-	public int /*long*/ dither;
+	public long /*int*/ dither;
 	public boolean component_alpha;
 	public static final int sizeof = OS.XRenderPictureAttributes_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/gtk/XWindowChanges.java x86_64/org/eclipse/swt/internal/gtk/XWindowChanges.java
--- x86/org/eclipse/swt/internal/gtk/XWindowChanges.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/gtk/XWindowChanges.java	2009-02-11 17:43:48.000000000 -0500
@@ -17,7 +17,7 @@
 	public int width;
 	public int height;
 	public int border_width;
-	public int /*long*/ sibling;
+	public long /*int*/ sibling;
 	public int stack_mode;
 	public static final int sizeof = OS.XWindowChanges_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/Library.java x86_64/org/eclipse/swt/internal/Library.java
--- x86/org/eclipse/swt/internal/Library.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/Library.java	2009-02-11 17:43:48.000000000 -0500
@@ -168,12 +168,12 @@
 	if (prop == null) prop = System.getProperty ("com.ibm.vm.bitmode"); //$NON-NLS-1$
 	if (prop != null) {
 		if ("32".equals (prop)) { //$NON-NLS-1$
-			 if (0x1FFFFFFFFL == (int /*long*/)0x1FFFFFFFFL) {
+			 if (0x1FFFFFFFFL == (long /*int*/)0x1FFFFFFFFL) {
 				throw new UnsatisfiedLinkError ("Cannot load 64-bit SWT libraries on 32-bit JVM"); //$NON-NLS-1$
 			 }
 		}
 		if ("64".equals (prop)) { //$NON-NLS-1$
-			if (0x1FFFFFFFFL != (int /*long*/)0x1FFFFFFFFL) {
+			if (0x1FFFFFFFFL != (long /*int*/)0x1FFFFFFFFL) {
 				throw new UnsatisfiedLinkError ("Cannot load 32-bit SWT libraries on 64-bit JVM"); //$NON-NLS-1$
 			}		
 		}
diff -ur x86/org/eclipse/swt/internal/LONG.java x86_64/org/eclipse/swt/internal/LONG.java
--- x86/org/eclipse/swt/internal/LONG.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/LONG.java	2009-02-11 17:43:48.000000000 -0500
@@ -11,9 +11,9 @@
 package org.eclipse.swt.internal;
 
 public class LONG {
-	public int /*long*/ value;
+	public long /*int*/ value;
 	
-	public LONG (int /*long*/ value) {
+	public LONG (long /*int*/ value) {
 		this.value = value;
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/GREVersionRange.java x86_64/org/eclipse/swt/internal/mozilla/GREVersionRange.java
--- x86/org/eclipse/swt/internal/mozilla/GREVersionRange.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/GREVersionRange.java	2009-02-11 17:43:48.000000000 -0500
@@ -11,9 +11,9 @@
 package org.eclipse.swt.internal.mozilla;
 
 public class GREVersionRange {
-    public int /*long*/ lower;
+    public long /*int*/ lower;
     public boolean lowerInclusive;
-    public int /*long*/ upper;
+    public long /*int*/ upper;
     public boolean upperInclusive;
     public static final int sizeof = XPCOMInit.GREVersionRange_sizeof();
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsEmbedString.java x86_64/org/eclipse/swt/internal/mozilla/nsEmbedString.java
--- x86/org/eclipse/swt/internal/mozilla/nsEmbedString.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsEmbedString.java	2009-02-11 17:43:48.000000000 -0500
@@ -28,7 +28,7 @@
 package org.eclipse.swt.internal.mozilla;
 
 public class nsEmbedString {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	
 public nsEmbedString() {
 	handle = XPCOM.nsEmbedString_new();
@@ -42,14 +42,14 @@
 	}   
 }
 
-public int /*long*/ getAddress() {
+public long /*int*/ getAddress() {
 	return handle;
 }	
 	
 public String toString() {
 	if (handle == 0) return null;
 	int length = XPCOM.nsEmbedString_Length(handle);
-	int /*long*/ buffer = XPCOM.nsEmbedString_get(handle);
+	long /*int*/ buffer = XPCOM.nsEmbedString_get(handle);
 	char[] dest = new char[length];
 	XPCOM.memmove(dest, buffer, length * 2);
 	return new String(dest);
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIAppShell.java x86_64/org/eclipse/swt/internal/mozilla/nsIAppShell.java
--- x86/org/eclipse/swt/internal/mozilla/nsIAppShell.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIAppShell.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IAPPSHELL_IID =
 		new nsID(NS_IAPPSHELL_IID_STR);
 
-	public nsIAppShell(int /*long*/ address) {
+	public nsIAppShell(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Create(int /*long*/ argc, int /*long*/[] argv) {
+	public int Create(long /*int*/ argc, long /*int*/[] argv) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), argc, argv);
 	}
 
@@ -57,15 +57,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress());
 	}
 
-	public int ListenToEventQueue(int /*long*/ aQueue, int aListen) {
+	public int ListenToEventQueue(long /*int*/ aQueue, int aListen) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aQueue, aListen);
 	}
 
-	public int GetNativeEvent(int /*long*/ aRealEvent, int /*long*/[] aEvent) {
+	public int GetNativeEvent(long /*int*/ aRealEvent, long /*int*/[] aEvent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aRealEvent, aEvent);
 	}
 
-	public int DispatchNativeEvent(int aRealEvent, int /*long*/ aEvent) {
+	public int DispatchNativeEvent(int aRealEvent, long /*int*/ aEvent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aRealEvent, aEvent);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java x86_64/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java
--- x86/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIAuthInformation.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IAUTHINFORMATION_IID =
 		new nsID(NS_IAUTHINFORMATION_IID_STR);
 
-	public nsIAuthInformation(int /*long*/ address) {
+	public nsIAuthInformation(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,35 +53,35 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aFlags);
 	}
 
-	public int GetRealm(int /*long*/ aRealm) {
+	public int GetRealm(long /*int*/ aRealm) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aRealm);
 	}
 
-	public int GetAuthenticationScheme(int /*long*/ aAuthenticationScheme) {
+	public int GetAuthenticationScheme(long /*int*/ aAuthenticationScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aAuthenticationScheme);
 	}
 
-	public int GetUsername(int /*long*/ aUsername) {
+	public int GetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aUsername);
 	}
 
-	public int SetUsername(int /*long*/ aUsername) {
+	public int SetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aUsername);
 	}
 
-	public int GetPassword(int /*long*/ aPassword) {
+	public int GetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aPassword);
 	}
 
-	public int SetPassword(int /*long*/ aPassword) {
+	public int SetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aPassword);
 	}
 
-	public int GetDomain(int /*long*/ aDomain) {
+	public int GetDomain(long /*int*/ aDomain) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aDomain);
 	}
 
-	public int SetDomain(int /*long*/ aDomain) {
+	public int SetDomain(long /*int*/ aDomain) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aDomain);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java x86_64/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java
--- x86/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIBaseWindow.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IBASEWINDOW_IID =
 		new nsID(NS_IBASEWINDOW_IID_STR);
 
-	public nsIBaseWindow(int /*long*/ address) {
+	public nsIBaseWindow(long /*int*/ address) {
 		super(address);
 	}
 
-	public int InitWindow(int /*long*/ parentNativeWindow, int /*long*/ parentWidget, int x, int y, int cx, int cy) {
+	public int InitWindow(long /*int*/ parentNativeWindow, long /*int*/ parentWidget, int x, int y, int cx, int cy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parentNativeWindow, parentWidget, x, y, cx, cy);
 	}
 
@@ -81,19 +81,19 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), force);
 	}
 
-	public int GetParentWidget(int /*long*/[] aParentWidget) {
+	public int GetParentWidget(long /*int*/[] aParentWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aParentWidget);
 	}
 
-	public int SetParentWidget(int /*long*/ aParentWidget) {
+	public int SetParentWidget(long /*int*/ aParentWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aParentWidget);
 	}
 
-	public int GetParentNativeWindow(int /*long*/[] aParentNativeWindow) {
+	public int GetParentNativeWindow(long /*int*/[] aParentNativeWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aParentNativeWindow);
 	}
 
-	public int SetParentNativeWindow(int /*long*/ aParentNativeWindow) {
+	public int SetParentNativeWindow(long /*int*/ aParentNativeWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aParentNativeWindow);
 	}
 
@@ -121,7 +121,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), aBlurSuppression);
 	}
 
-	public int GetMainWidget(int /*long*/[] aMainWidget) {
+	public int GetMainWidget(long /*int*/[] aMainWidget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), aMainWidget);
 	}
 
@@ -129,7 +129,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress());
 	}
 
-	public int GetTitle(int /*long*/[] aTitle) {
+	public int GetTitle(long /*int*/[] aTitle) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), aTitle);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsICancelable.java x86_64/org/eclipse/swt/internal/mozilla/nsICancelable.java
--- x86/org/eclipse/swt/internal/mozilla/nsICancelable.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsICancelable.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_ICANCELABLE_IID =
 		new nsID(NS_ICANCELABLE_IID_STR);
 
-	public nsICancelable(int /*long*/ address) {
+	public nsICancelable(long /*int*/ address) {
 		super(address);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsICategoryManager.java x86_64/org/eclipse/swt/internal/mozilla/nsICategoryManager.java
--- x86/org/eclipse/swt/internal/mozilla/nsICategoryManager.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsICategoryManager.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_ICATEGORYMANAGER_IID =
 		new nsID(NS_ICATEGORYMANAGER_IID_STR);
 
-	public nsICategoryManager(int /*long*/ address) {
+	public nsICategoryManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetCategoryEntry(byte[] aCategory, byte[] aEntry, int /*long*/[] _retval) {
+	public int GetCategoryEntry(byte[] aCategory, byte[] aEntry, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aCategory, aEntry, _retval);
 	}
 
-	public int AddCategoryEntry(byte[] aCategory, byte[] aEntry, byte[] aValue, int aPersist, int aReplace, int /*long*/[] _retval) {
+	public int AddCategoryEntry(byte[] aCategory, byte[] aEntry, byte[] aValue, int aPersist, int aReplace, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aCategory, aEntry, aValue, aPersist, aReplace, _retval);
 	}
 
@@ -57,11 +57,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aCategory);
 	}
 
-	public int EnumerateCategory(byte[] aCategory, int /*long*/[] _retval) {
+	public int EnumerateCategory(byte[] aCategory, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aCategory, _retval);
 	}
 
-	public int EnumerateCategories(int /*long*/[] _retval) {
+	public int EnumerateCategories(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIChannel.java x86_64/org/eclipse/swt/internal/mozilla/nsIChannel.java
--- x86/org/eclipse/swt/internal/mozilla/nsIChannel.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIChannel.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,55 +37,55 @@
 	public static final nsID NS_ICHANNEL_IID =
 		new nsID(NS_ICHANNEL_IID_STR);
 
-	public nsIChannel(int /*long*/ address) {
+	public nsIChannel(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetOriginalURI(int /*long*/[] aOriginalURI) {
+	public int GetOriginalURI(long /*int*/[] aOriginalURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 1, getAddress(), aOriginalURI);
 	}
 
-	public int SetOriginalURI(int /*long*/ aOriginalURI) {
+	public int SetOriginalURI(long /*int*/ aOriginalURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 2, getAddress(), aOriginalURI);
 	}
 
-	public int GetURI(int /*long*/[] aURI) {
+	public int GetURI(long /*int*/[] aURI) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 3, getAddress(), aURI);
 	}
 
-	public int GetOwner(int /*long*/[] aOwner) {
+	public int GetOwner(long /*int*/[] aOwner) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 4, getAddress(), aOwner);
 	}
 
-	public int SetOwner(int /*long*/ aOwner) {
+	public int SetOwner(long /*int*/ aOwner) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 5, getAddress(), aOwner);
 	}
 
-	public int GetNotificationCallbacks(int /*long*/[] aNotificationCallbacks) {
+	public int GetNotificationCallbacks(long /*int*/[] aNotificationCallbacks) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 6, getAddress(), aNotificationCallbacks);
 	}
 
-	public int SetNotificationCallbacks(int /*long*/ aNotificationCallbacks) {
+	public int SetNotificationCallbacks(long /*int*/ aNotificationCallbacks) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 7, getAddress(), aNotificationCallbacks);
 	}
 
-	public int GetSecurityInfo(int /*long*/[] aSecurityInfo) {
+	public int GetSecurityInfo(long /*int*/[] aSecurityInfo) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 8, getAddress(), aSecurityInfo);
 	}
 
-	public int GetContentType(int /*long*/ aContentType) {
+	public int GetContentType(long /*int*/ aContentType) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 9, getAddress(), aContentType);
 	}
 
-	public int SetContentType(int /*long*/ aContentType) {
+	public int SetContentType(long /*int*/ aContentType) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 10, getAddress(), aContentType);
 	}
 
-	public int GetContentCharset(int /*long*/ aContentCharset) {
+	public int GetContentCharset(long /*int*/ aContentCharset) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 11, getAddress(), aContentCharset);
 	}
 
-	public int SetContentCharset(int /*long*/ aContentCharset) {
+	public int SetContentCharset(long /*int*/ aContentCharset) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 12, getAddress(), aContentCharset);
 	}
 
@@ -97,11 +97,11 @@
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 14, getAddress(), aContentLength);
 	}
 
-	public int Open(int /*long*/[] _retval) {
+	public int Open(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 
-	public int AsyncOpen(int /*long*/ aListener, int /*long*/ aContext) {
+	public int AsyncOpen(long /*int*/ aListener, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsIRequest.LAST_METHOD_ID + 16, getAddress(), aListener, aContext);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIComponentManager.java x86_64/org/eclipse/swt/internal/mozilla/nsIComponentManager.java
--- x86/org/eclipse/swt/internal/mozilla/nsIComponentManager.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIComponentManager.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,23 +37,23 @@
 	public static final nsID NS_ICOMPONENTMANAGER_IID =
 		new nsID(NS_ICOMPONENTMANAGER_IID_STR);
 
-	public nsIComponentManager(int /*long*/ address) {
+	public nsIComponentManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetClassObject(nsID aClass, nsID aIID, int /*long*/[] result) {
+	public int GetClassObject(nsID aClass, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aClass, aIID, result);
 	}
 
-	public int GetClassObjectByContractID(byte[] aContractID, nsID aIID, int /*long*/[] result) {
+	public int GetClassObjectByContractID(byte[] aContractID, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContractID, aIID, result);
 	}
 
-	public int CreateInstance(nsID aClass, int /*long*/ aDelegate, nsID aIID, int /*long*/[] result) {
+	public int CreateInstance(nsID aClass, long /*int*/ aDelegate, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aClass, aDelegate, aIID, result);
 	}
 
-	public int CreateInstanceByContractID(byte[] aContractID, int /*long*/ aDelegate, nsID aIID, int /*long*/[] result) {
+	public int CreateInstanceByContractID(byte[] aContractID, long /*int*/ aDelegate, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContractID, aDelegate, aIID, result);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java x86_64/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java
--- x86/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIComponentRegistrar.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,31 +37,31 @@
 	public static final nsID NS_ICOMPONENTREGISTRAR_IID =
 		new nsID(NS_ICOMPONENTREGISTRAR_IID_STR);
 
-	public nsIComponentRegistrar(int /*long*/ address) {
+	public nsIComponentRegistrar(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AutoRegister(int /*long*/ aSpec) {
+	public int AutoRegister(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSpec);
 	}
 
-	public int AutoUnregister(int /*long*/ aSpec) {
+	public int AutoUnregister(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSpec);
 	}
 
-	public int RegisterFactory(nsID aClass, byte[] aClassName, byte[] aContractID, int /*long*/ aFactory) {
+	public int RegisterFactory(nsID aClass, byte[] aClassName, byte[] aContractID, long /*int*/ aFactory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aClass, aClassName, aContractID, aFactory);
 	}
 
-	public int UnregisterFactory(nsID aClass, int /*long*/ aFactory) {
+	public int UnregisterFactory(nsID aClass, long /*int*/ aFactory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aClass, aFactory);
 	}
 
-	public int RegisterFactoryLocation(nsID aClass, byte[] aClassName, byte[] aContractID, int /*long*/ aFile, byte[] aLoaderStr, byte[] aType) {
+	public int RegisterFactoryLocation(nsID aClass, byte[] aClassName, byte[] aContractID, long /*int*/ aFile, byte[] aLoaderStr, byte[] aType) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aClass, aClassName, aContractID, aFile, aLoaderStr, aType);
 	}
 
-	public int UnregisterFactoryLocation(nsID aClass, int /*long*/ aFile) {
+	public int UnregisterFactoryLocation(nsID aClass, long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aClass, aFile);
 	}
 
@@ -73,19 +73,19 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aContractID, _retval);
 	}
 
-	public int EnumerateCIDs(int /*long*/[] _retval) {
+	public int EnumerateCIDs(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), _retval);
 	}
 
-	public int EnumerateContractIDs(int /*long*/[] _retval) {
+	public int EnumerateContractIDs(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), _retval);
 	}
 
-	public int CIDToContractID(nsID aClass, int /*long*/[] _retval) {
+	public int CIDToContractID(nsID aClass, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aClass, _retval);
 	}
 
-	public int ContractIDToCID(byte[] aContractID, int /*long*/ _retval) {
+	public int ContractIDToCID(byte[] aContractID, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aContractID, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java x86_64/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java
--- x86/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIContextMenuListener.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_ICONTEXTMENULISTENER_IID =
 		new nsID(NS_ICONTEXTMENULISTENER_IID_STR);
 
-	public nsIContextMenuListener(int /*long*/ address) {
+	public nsIContextMenuListener(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,7 +53,7 @@
 
 	public static final int CONTEXT_INPUT = 16;
 
-	public int OnShowContextMenu(int aContextFlags, int /*long*/ aEvent, int /*long*/ aNode) {
+	public int OnShowContextMenu(int aContextFlags, long /*int*/ aEvent, long /*int*/ aNode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aContextFlags, aEvent, aNode);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsICookie.java x86_64/org/eclipse/swt/internal/mozilla/nsICookie.java
--- x86/org/eclipse/swt/internal/mozilla/nsICookie.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsICookie.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_ICOOKIE_IID =
 		new nsID(NS_ICOOKIE_IID_STR);
 
-	public nsICookie(int /*long*/ address) {
+	public nsICookie(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aName);
 	}
 
-	public int GetValue(int /*long*/ aValue) {
+	public int GetValue(long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aValue);
 	}
 
@@ -53,11 +53,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aIsDomain);
 	}
 
-	public int GetHost(int /*long*/ aHost) {
+	public int GetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aHost);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPath);
 	}
 
@@ -79,7 +79,7 @@
 
 	public static final int STATUS_REJECTED = 4;
 
-	public int GetStatus(int /*long*/ aStatus) {
+	public int GetStatus(long /*int*/ aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aStatus);
 	}
 
@@ -95,7 +95,7 @@
 
 	public static final int POLICY_NO_II = 5;
 
-	public int GetPolicy(int /*long*/ aPolicy) {
+	public int GetPolicy(long /*int*/ aPolicy) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPolicy);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsICookieManager.java x86_64/org/eclipse/swt/internal/mozilla/nsICookieManager.java
--- x86/org/eclipse/swt/internal/mozilla/nsICookieManager.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsICookieManager.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_ICOOKIEMANAGER_IID =
 		new nsID(NS_ICOOKIEMANAGER_IID_STR);
 
-	public nsICookieManager(int /*long*/ address) {
+	public nsICookieManager(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress());
 	}
 
-	public int GetEnumerator(int /*long*/[] aEnumerator) {
+	public int GetEnumerator(long /*int*/[] aEnumerator) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aEnumerator);
 	}
 
-	public int Remove(int /*long*/ aDomain, int /*long*/ aName, int /*long*/ aPath, int aBlocked) {
+	public int Remove(long /*int*/ aDomain, long /*int*/ aName, long /*int*/ aPath, int aBlocked) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aDomain, aName, aPath, aBlocked);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryService.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IDIRECTORYSERVICE_IID =
 		new nsID(NS_IDIRECTORYSERVICE_IID_STR);
 
-	public nsIDirectoryService(int /*long*/ address) {
+	public nsIDirectoryService(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress());
 	}
 
-	public int RegisterProvider(int /*long*/ prov) {
+	public int RegisterProvider(long /*int*/ prov) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), prov);
 	}
 
-	public int UnregisterProvider(int /*long*/ prov) {
+	public int UnregisterProvider(long /*int*/ prov) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), prov);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider2.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IDIRECTORYSERVICEPROVIDER2_IID =
 		new nsID(NS_IDIRECTORYSERVICEPROVIDER2_IID_STRING);
 
-	public nsIDirectoryServiceProvider2(int /*long*/ address) {
+	public nsIDirectoryServiceProvider2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetFiles(byte[] prop, int /*long*/[] _retval) {
+	public int GetFiles(byte[] prop, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIDirectoryServiceProvider.LAST_METHOD_ID + 1, getAddress(), prop, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDirectoryServiceProvider.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IDIRECTORYSERVICEPROVIDER_IID =
 		new nsID(NS_IDIRECTORYSERVICEPROVIDER_IID_STR);
 
-	public nsIDirectoryServiceProvider(int /*long*/ address) {
+	public nsIDirectoryServiceProvider(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetFile(byte[] prop, int[] persistent, int /*long*/[] _retval) {
+	public int GetFile(byte[] prop, int[] persistent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), prop, persistent, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsID.java x86_64/org/eclipse/swt/internal/mozilla/nsID.java
--- x86/org/eclipse/swt/internal/mozilla/nsID.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsID.java	2009-02-11 17:43:48.000000000 -0500
@@ -43,9 +43,9 @@
 }
 
 public boolean Equals(nsID other) {
-	int /*long*/ ptr = XPCOM.nsID_new();
+	long /*int*/ ptr = XPCOM.nsID_new();
 	XPCOM.memmove(ptr, this, nsID.sizeof);
-	int /*long*/ otherPtr = XPCOM.nsID_new();
+	long /*int*/ otherPtr = XPCOM.nsID_new();
 	XPCOM.memmove(otherPtr, other, nsID.sizeof);
 	boolean result = XPCOM.nsID_Equals(ptr, otherPtr) != 0;
 	XPCOM.nsID_delete(ptr);
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IDOCSHELL_IID =
 		new nsID(NS_IDOCSHELL_IID_STR);
 
-	public nsIDocShell_1_8(int /*long*/ address) {
+	public nsIDocShell_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int LoadURI(int /*long*/ uri, int /*long*/ loadInfo, int aLoadFlags, int firstParty) {
+	public int LoadURI(long /*int*/ uri, long /*int*/ loadInfo, int aLoadFlags, int firstParty) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uri, loadInfo, aLoadFlags, firstParty);
 	}
 
-	public int LoadStream(int /*long*/ aStream, int /*long*/ aURI, int /*long*/ aContentType, int /*long*/ aContentCharset, int /*long*/ aLoadInfo) {
+	public int LoadStream(long /*int*/ aStream, long /*int*/ aURI, long /*int*/ aContentType, long /*int*/ aContentCharset, long /*int*/ aLoadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aStream, aURI, aContentType, aContentCharset, aLoadInfo);
 	}
 
@@ -55,11 +55,11 @@
 
 	public static final int INTERNAL_LOAD_FLAGS_DONT_SEND_REFERRER = 2;
 
-	public int InternalLoad(int /*long*/ aURI, int /*long*/ aReferrer, int /*long*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, int /*long*/ aPostDataStream, int /*long*/ aHeadersStream, int aLoadFlags, int /*long*/ aSHEntry, int firstParty, int /*long*/[] aDocShell, int /*long*/[] aRequest) {
+	public int InternalLoad(long /*int*/ aURI, long /*int*/ aReferrer, long /*int*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, long /*int*/ aPostDataStream, long /*int*/ aHeadersStream, int aLoadFlags, long /*int*/ aSHEntry, int firstParty, long /*int*/[] aDocShell, long /*int*/[] aRequest) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aReferrer, aOwner, aFlags, aWindowTarget, aTypeHint, aPostDataStream, aHeadersStream, aLoadFlags, aSHEntry, firstParty, aDocShell, aRequest);
 	}
 
-	public int CreateLoadInfo(int /*long*/[] loadInfo) {
+	public int CreateLoadInfo(long /*int*/[] loadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), loadInfo);
 	}
 
@@ -67,7 +67,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress());
 	}
 
-	public int SetCurrentURI(int /*long*/ aURI) {
+	public int SetCurrentURI(long /*int*/ aURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aURI);
 	}
 
@@ -75,35 +75,35 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), isUnload);
 	}
 
-	public int GetPresContext(int /*long*/[] aPresContext) {
+	public int GetPresContext(long /*int*/[] aPresContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPresContext);
 	}
 
-	public int GetPresShell(int /*long*/[] aPresShell) {
+	public int GetPresShell(long /*int*/[] aPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPresShell);
 	}
 
-	public int GetEldestPresShell(int /*long*/[] aEldestPresShell) {
+	public int GetEldestPresShell(long /*int*/[] aEldestPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aEldestPresShell);
 	}
 
-	public int GetContentViewer(int /*long*/[] aContentViewer) {
+	public int GetContentViewer(long /*int*/[] aContentViewer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aContentViewer);
 	}
 
-	public int GetChromeEventHandler(int /*long*/[] aChromeEventHandler) {
+	public int GetChromeEventHandler(long /*int*/[] aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aChromeEventHandler);
 	}
 
-	public int SetChromeEventHandler(int /*long*/ aChromeEventHandler) {
+	public int SetChromeEventHandler(long /*int*/ aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aChromeEventHandler);
 	}
 
-	public int GetDocumentCharsetInfo(int /*long*/[] aDocumentCharsetInfo) {
+	public int GetDocumentCharsetInfo(long /*int*/[] aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aDocumentCharsetInfo);
 	}
 
-	public int SetDocumentCharsetInfo(int /*long*/ aDocumentCharsetInfo) {
+	public int SetDocumentCharsetInfo(long /*int*/ aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aDocumentCharsetInfo);
 	}
 
@@ -151,7 +151,7 @@
 
 	public static final int ENUMERATE_BACKWARDS = 1;
 
-	public int GetDocShellEnumerator(int aItemType, int aDirection, int /*long*/[] _retval) {
+	public int GetDocShellEnumerator(int aItemType, int aDirection, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aItemType, aDirection, _retval);
 	}
 
@@ -255,11 +255,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 46, getAddress(), aIsExecutingOnLoadHandler);
 	}
 
-	public int GetLayoutHistoryState(int /*long*/[] aLayoutHistoryState) {
+	public int GetLayoutHistoryState(long /*int*/[] aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 47, getAddress(), aLayoutHistoryState);
 	}
 
-	public int SetLayoutHistoryState(int /*long*/ aLayoutHistoryState) {
+	public int SetLayoutHistoryState(long /*int*/ aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 48, getAddress(), aLayoutHistoryState);
 	}
 
@@ -267,11 +267,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 49, getAddress(), aShouldSaveLayoutState);
 	}
 
-	public int GetSecurityUI(int /*long*/[] aSecurityUI) {
+	public int GetSecurityUI(long /*int*/[] aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 50, getAddress(), aSecurityUI);
 	}
 
-	public int SetSecurityUI(int /*long*/ aSecurityUI) {
+	public int SetSecurityUI(long /*int*/ aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 51, getAddress(), aSecurityUI);
 	}
 
@@ -283,7 +283,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 53, getAddress());
 	}
 
-	public int BeginRestore(int /*long*/ viewer, int top) {
+	public int BeginRestore(long /*int*/ viewer, int top) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 54, getAddress(), viewer, top);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDocShell_1_9.java x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell_1_9.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDocShell_1_9.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell_1_9.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IDOCSHELL_IID =
 		new nsID(NS_IDOCSHELL_IID_STR);
 
-	public nsIDocShell_1_9(int /*long*/ address) {
+	public nsIDocShell_1_9(long /*int*/ address) {
 		super(address);
 	}
 
-	public int LoadURI(int /*long*/ uri, int /*long*/ loadInfo, int aLoadFlags, int firstParty) {
+	public int LoadURI(long /*int*/ uri, long /*int*/ loadInfo, int aLoadFlags, int firstParty) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uri, loadInfo, aLoadFlags, firstParty);
 	}
 
-	public int LoadStream(int /*long*/ aStream, int /*long*/ aURI, int /*long*/ aContentType, int /*long*/ aContentCharset, int /*long*/ aLoadInfo) {
+	public int LoadStream(long /*int*/ aStream, long /*int*/ aURI, long /*int*/ aContentType, long /*int*/ aContentCharset, long /*int*/ aLoadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aStream, aURI, aContentType, aContentCharset, aLoadInfo);
 	}
 
@@ -61,11 +61,11 @@
 
 	public static final int INTERNAL_LOAD_FLAGS_BYPASS_CLASSIFIER = 16;
 
-	public int InternalLoad(int /*long*/ aURI, int /*long*/ aReferrer, int /*long*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, int /*long*/ aPostDataStream, int /*long*/ aHeadersStream, int aLoadFlags, int /*long*/ aSHEntry, int firstParty, int /*long*/[] aDocShell, int /*long*/[] aRequest) {
+	public int InternalLoad(long /*int*/ aURI, long /*int*/ aReferrer, long /*int*/ aOwner, int aFlags, char[] aWindowTarget, byte[] aTypeHint, long /*int*/ aPostDataStream, long /*int*/ aHeadersStream, int aLoadFlags, long /*int*/ aSHEntry, int firstParty, long /*int*/[] aDocShell, long /*int*/[] aRequest) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aReferrer, aOwner, aFlags, aWindowTarget, aTypeHint, aPostDataStream, aHeadersStream, aLoadFlags, aSHEntry, firstParty, aDocShell, aRequest);
 	}
 
-	public int CreateLoadInfo(int /*long*/[] loadInfo) {
+	public int CreateLoadInfo(long /*int*/[] loadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), loadInfo);
 	}
 
@@ -73,7 +73,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress());
 	}
 
-	public int SetCurrentURI(int /*long*/ aURI) {
+	public int SetCurrentURI(long /*int*/ aURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aURI);
 	}
 
@@ -81,35 +81,35 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), isUnload);
 	}
 
-	public int GetPresContext(int /*long*/[] aPresContext) {
+	public int GetPresContext(long /*int*/[] aPresContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPresContext);
 	}
 
-	public int GetPresShell(int /*long*/[] aPresShell) {
+	public int GetPresShell(long /*int*/[] aPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPresShell);
 	}
 
-	public int GetEldestPresShell(int /*long*/[] aEldestPresShell) {
+	public int GetEldestPresShell(long /*int*/[] aEldestPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aEldestPresShell);
 	}
 
-	public int GetContentViewer(int /*long*/[] aContentViewer) {
+	public int GetContentViewer(long /*int*/[] aContentViewer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aContentViewer);
 	}
 
-	public int GetChromeEventHandler(int /*long*/[] aChromeEventHandler) {
+	public int GetChromeEventHandler(long /*int*/[] aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aChromeEventHandler);
 	}
 
-	public int SetChromeEventHandler(int /*long*/ aChromeEventHandler) {
+	public int SetChromeEventHandler(long /*int*/ aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aChromeEventHandler);
 	}
 
-	public int GetDocumentCharsetInfo(int /*long*/[] aDocumentCharsetInfo) {
+	public int GetDocumentCharsetInfo(long /*int*/[] aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aDocumentCharsetInfo);
 	}
 
-	public int SetDocumentCharsetInfo(int /*long*/ aDocumentCharsetInfo) {
+	public int SetDocumentCharsetInfo(long /*int*/ aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aDocumentCharsetInfo);
 	}
 
@@ -157,7 +157,7 @@
 
 	public static final int ENUMERATE_BACKWARDS = 1;
 
-	public int GetDocShellEnumerator(int aItemType, int aDirection, int /*long*/[] _retval) {
+	public int GetDocShellEnumerator(int aItemType, int aDirection, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aItemType, aDirection, _retval);
 	}
 
@@ -261,11 +261,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 46, getAddress(), aIsExecutingOnLoadHandler);
 	}
 
-	public int GetLayoutHistoryState(int /*long*/[] aLayoutHistoryState) {
+	public int GetLayoutHistoryState(long /*int*/[] aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 47, getAddress(), aLayoutHistoryState);
 	}
 
-	public int SetLayoutHistoryState(int /*long*/ aLayoutHistoryState) {
+	public int SetLayoutHistoryState(long /*int*/ aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 48, getAddress(), aLayoutHistoryState);
 	}
 
@@ -273,11 +273,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 49, getAddress(), aShouldSaveLayoutState);
 	}
 
-	public int GetSecurityUI(int /*long*/[] aSecurityUI) {
+	public int GetSecurityUI(long /*int*/[] aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 50, getAddress(), aSecurityUI);
 	}
 
-	public int SetSecurityUI(int /*long*/ aSecurityUI) {
+	public int SetSecurityUI(long /*int*/ aSecurityUI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 51, getAddress(), aSecurityUI);
 	}
 
@@ -289,7 +289,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 53, getAddress());
 	}
 
-	public int BeginRestore(int /*long*/ viewer, int top) {
+	public int BeginRestore(long /*int*/ viewer, int top) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 54, getAddress(), viewer, top);
 	}
 
@@ -321,15 +321,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 61, getAddress(), numEntries);
 	}
 
-	public int GetSessionStorageForURI(int /*long*/ uri, int /*long*/[] _retval) {
+	public int GetSessionStorageForURI(long /*int*/ uri, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 62, getAddress(), uri, _retval);
 	}
 
-	public int AddSessionStorage(int /*long*/ aDomain, int /*long*/ storage) {
+	public int AddSessionStorage(long /*int*/ aDomain, long /*int*/ storage) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 63, getAddress(), aDomain, storage);
 	}
 
-	public int GetCurrentDocumentChannel(int /*long*/[] aCurrentDocumentChannel) {
+	public int GetCurrentDocumentChannel(long /*int*/[] aCurrentDocumentChannel) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 64, getAddress(), aCurrentDocumentChannel);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDocShell.java x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDocShell.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDocShell.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,23 +37,23 @@
 	public static final nsID NS_IDOCSHELL_IID =
 		new nsID(NS_IDOCSHELL_IID_STR);
 
-	public nsIDocShell(int /*long*/ address) {
+	public nsIDocShell(long /*int*/ address) {
 		super(address);
 	}
 
-	public int LoadURI(int /*long*/ uri, int /*long*/ loadInfo, int aLoadFlags, int firstParty) {
+	public int LoadURI(long /*int*/ uri, long /*int*/ loadInfo, int aLoadFlags, int firstParty) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uri, loadInfo, aLoadFlags, firstParty);
 	}
 
-	public int LoadStream(int /*long*/ aStream, int /*long*/ aURI, int /*long*/ aContentType, int /*long*/ aContentCharset, int /*long*/ aLoadInfo) {
+	public int LoadStream(long /*int*/ aStream, long /*int*/ aURI, long /*int*/ aContentType, long /*int*/ aContentCharset, long /*int*/ aLoadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aStream, aURI, aContentType, aContentCharset, aLoadInfo);
 	}
 
-	public int InternalLoad(int /*long*/ aURI, int /*long*/ aReferrer, int /*long*/ aOwner, int aInheritOwner, char[] aWindowTarget, int /*long*/ aPostDataStream, int /*long*/ aHeadersStream, int aLoadFlags, int /*long*/ aSHEntry, int firstParty, int /*long*/[] aDocShell, int /*long*/[] aRequest) {
+	public int InternalLoad(long /*int*/ aURI, long /*int*/ aReferrer, long /*int*/ aOwner, int aInheritOwner, char[] aWindowTarget, long /*int*/ aPostDataStream, long /*int*/ aHeadersStream, int aLoadFlags, long /*int*/ aSHEntry, int firstParty, long /*int*/[] aDocShell, long /*int*/[] aRequest) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aURI, aReferrer, aOwner, aInheritOwner, aWindowTarget, aPostDataStream, aHeadersStream, aLoadFlags, aSHEntry, firstParty, aDocShell, aRequest);
 	}
 
-	public int CreateLoadInfo(int /*long*/[] loadInfo) {
+	public int CreateLoadInfo(long /*int*/[] loadInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), loadInfo);
 	}
 
@@ -61,7 +61,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress());
 	}
 
-	public int SetCurrentURI(int /*long*/ aURI) {
+	public int SetCurrentURI(long /*int*/ aURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aURI);
 	}
 
@@ -69,43 +69,43 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetPresContext(int /*long*/[] aPresContext) {
+	public int GetPresContext(long /*int*/[] aPresContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPresContext);
 	}
 
-	public int GetPresShell(int /*long*/[] aPresShell) {
+	public int GetPresShell(long /*int*/[] aPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPresShell);
 	}
 
-	public int GetEldestPresShell(int /*long*/[] aEldestPresShell) {
+	public int GetEldestPresShell(long /*int*/[] aEldestPresShell) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aEldestPresShell);
 	}
 
-	public int GetContentViewer(int /*long*/[] aContentViewer) {
+	public int GetContentViewer(long /*int*/[] aContentViewer) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aContentViewer);
 	}
 
-	public int GetChromeEventHandler(int /*long*/[] aChromeEventHandler) {
+	public int GetChromeEventHandler(long /*int*/[] aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aChromeEventHandler);
 	}
 
-	public int SetChromeEventHandler(int /*long*/ aChromeEventHandler) {
+	public int SetChromeEventHandler(long /*int*/ aChromeEventHandler) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aChromeEventHandler);
 	}
 
-	public int GetParentURIContentListener(int /*long*/[] aParentURIContentListener) {
+	public int GetParentURIContentListener(long /*int*/[] aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aParentURIContentListener);
 	}
 
-	public int SetParentURIContentListener(int /*long*/ aParentURIContentListener) {
+	public int SetParentURIContentListener(long /*int*/ aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aParentURIContentListener);
 	}
 
-	public int GetDocumentCharsetInfo(int /*long*/[] aDocumentCharsetInfo) {
+	public int GetDocumentCharsetInfo(long /*int*/[] aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), aDocumentCharsetInfo);
 	}
 
-	public int SetDocumentCharsetInfo(int /*long*/ aDocumentCharsetInfo) {
+	public int SetDocumentCharsetInfo(long /*int*/ aDocumentCharsetInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aDocumentCharsetInfo);
 	}
 
@@ -153,7 +153,7 @@
 
 	public static final int ENUMERATE_BACKWARDS = 1;
 
-	public int GetDocShellEnumerator(int aItemType, int aDirection, int /*long*/[] _retval) {
+	public int GetDocShellEnumerator(int aItemType, int aDirection, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 28, getAddress(), aItemType, aDirection, _retval);
 	}
 
@@ -255,11 +255,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 48, getAddress(), aIsExecutingOnLoadHandler);
 	}
 
-	public int GetLayoutHistoryState(int /*long*/[] aLayoutHistoryState) {
+	public int GetLayoutHistoryState(long /*int*/[] aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 49, getAddress(), aLayoutHistoryState);
 	}
 
-	public int SetLayoutHistoryState(int /*long*/ aLayoutHistoryState) {
+	public int SetLayoutHistoryState(long /*int*/ aLayoutHistoryState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 50, getAddress(), aLayoutHistoryState);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IDOMEVENT_IID =
 		new nsID(NS_IDOMEVENT_IID_STR);
 
-	public nsIDOMEvent(int /*long*/ address) {
+	public nsIDOMEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -47,15 +47,15 @@
 
 	public static final int BUBBLING_PHASE = 3;
 
-	public int GetType(int /*long*/ aType) {
+	public int GetType(long /*int*/ aType) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aType);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aTarget);
 	}
 
-	public int GetCurrentTarget(int /*long*/[] aCurrentTarget) {
+	public int GetCurrentTarget(long /*int*/[] aCurrentTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aCurrentTarget);
 	}
 
@@ -71,7 +71,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aCancelable);
 	}
 
-	public int GetTimeStamp(int /*long*/[] aTimeStamp) {
+	public int GetTimeStamp(long /*int*/[] aTimeStamp) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aTimeStamp);
 	}
 
@@ -83,7 +83,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress());
 	}
 
-	public int InitEvent(int /*long*/ eventTypeArg, int canBubbleArg, int cancelableArg) {
+	public int InitEvent(long /*int*/ eventTypeArg, int canBubbleArg, int cancelableArg) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), eventTypeArg, canBubbleArg, cancelableArg);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMEventTarget.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,19 +37,19 @@
 	public static final nsID NS_IDOMEVENTTARGET_IID =
 		new nsID(NS_IDOMEVENTTARGET_IID_STR);
 
-	public nsIDOMEventTarget(int /*long*/ address) {
+	public nsIDOMEventTarget(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddEventListener(int /*long*/ type, int /*long*/ listener, int useCapture) {
+	public int AddEventListener(long /*int*/ type, long /*int*/ listener, int useCapture) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), type, listener, useCapture);
 	}
 
-	public int RemoveEventListener(int /*long*/ type, int /*long*/ listener, int useCapture) {
+	public int RemoveEventListener(long /*int*/ type, long /*int*/ listener, int useCapture) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), type, listener, useCapture);
 	}
 
-	public int DispatchEvent(int /*long*/ evt, int[] _retval) {
+	public int DispatchEvent(long /*int*/ evt, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), evt, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMKeyEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IDOMKEYEVENT_IID =
 		new nsID(NS_IDOMKEYEVENT_IID_STR);
 
-	public nsIDOMKeyEvent(int /*long*/ address) {
+	public nsIDOMKeyEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -293,7 +293,7 @@
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 6, getAddress(), aMetaKey);
 	}
 
-	public int InitKeyEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, int keyCodeArg, int charCodeArg) {
+	public int InitKeyEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, int keyCodeArg, int charCodeArg) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 7, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, keyCodeArg, charCodeArg);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMMouseEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IDOMMOUSEEVENT_IID =
 		new nsID(NS_IDOMMOUSEEVENT_IID_STR);
 
-	public nsIDOMMouseEvent(int /*long*/ address) {
+	public nsIDOMMouseEvent(long /*int*/ address) {
 		super(address);
 	}
 
@@ -77,11 +77,11 @@
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 9, getAddress(), aButton);
 	}
 
-	public int GetRelatedTarget(int /*long*/[] aRelatedTarget) {
+	public int GetRelatedTarget(long /*int*/[] aRelatedTarget) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 10, getAddress(), aRelatedTarget);
 	}
 
-	public int InitMouseEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, short buttonArg, int /*long*/ relatedTargetArg) {
+	public int InitMouseEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int detailArg, int screenXArg, int screenYArg, int clientXArg, int clientYArg, int ctrlKeyArg, int altKeyArg, int shiftKeyArg, int metaKeyArg, short buttonArg, long /*int*/ relatedTargetArg) {
 		return XPCOM.VtblCall(nsIDOMUIEvent.LAST_METHOD_ID + 11, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, detailArg, screenXArg, screenYArg, clientXArg, clientYArg, ctrlKeyArg, altKeyArg, shiftKeyArg, metaKeyArg, buttonArg, relatedTargetArg);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMSerializer_1_7.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IDOMSERIALIZER_IID =
 		new nsID(NS_IDOMSERIALIZER_IID_STR);
 
-	public nsIDOMSerializer_1_7(int /*long*/ address) {
+	public nsIDOMSerializer_1_7(long /*int*/ address) {
 		super(address);
 	}
 
-	public int SerializeToString(int /*long*/ root, int /*long*/ _retval) {
+	public int SerializeToString(long /*int*/ root, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), root, _retval);
 	}
 
-	public int SerializeToStream(int /*long*/ root, int /*long*/ stream, int /*long*/ charset) {
+	public int SerializeToStream(long /*int*/ root, long /*int*/ stream, long /*int*/ charset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), root, stream, charset);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMSerializer.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IDOMSERIALIZER_IID =
 		new nsID(NS_IDOMSERIALIZER_IID_STR);
 
-	public nsIDOMSerializer(int /*long*/ address) {
+	public nsIDOMSerializer(long /*int*/ address) {
 		super(address);
 	}
 
-	public int SerializeToString(int /*long*/ root, int /*long*/[] _retval) {
+	public int SerializeToString(long /*int*/ root, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), root, _retval);
 	}
 
-	public int SerializeToStream(int /*long*/ root, int /*long*/ stream, byte[] charset) {
+	public int SerializeToStream(long /*int*/ root, long /*int*/ stream, byte[] charset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), root, stream, charset);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMUIEvent.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IDOMUIEVENT_IID =
 		new nsID(NS_IDOMUIEVENT_IID_STR);
 
-	public nsIDOMUIEvent(int /*long*/ address) {
+	public nsIDOMUIEvent(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetView(int /*long*/[] aView) {
+	public int GetView(long /*int*/[] aView) {
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 1, getAddress(), aView);
 	}
 
@@ -49,7 +49,7 @@
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 2, getAddress(), aDetail);
 	}
 
-	public int InitUIEvent(int /*long*/ typeArg, int canBubbleArg, int cancelableArg, int /*long*/ viewArg, int detailArg) {
+	public int InitUIEvent(long /*int*/ typeArg, int canBubbleArg, int cancelableArg, long /*int*/ viewArg, int detailArg) {
 		return XPCOM.VtblCall(nsIDOMEvent.LAST_METHOD_ID + 3, getAddress(), typeArg, canBubbleArg, cancelableArg, viewArg, detailArg);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMWindowCollection.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IDOMWINDOWCOLLECTION_IID =
 		new nsID(NS_IDOMWINDOWCOLLECTION_IID_STR);
 
-	public nsIDOMWindowCollection(int /*long*/ address) {
+	public nsIDOMWindowCollection(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLength);
 	}
 
-	public int Item(int index, int /*long*/[] _retval) {
+	public int Item(int index, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), index, _retval);
 	}
 
-	public int NamedItem(int /*long*/ name, int /*long*/[] _retval) {
+	public int NamedItem(long /*int*/ name, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), name, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java x86_64/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDOMWindow.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,35 +37,35 @@
 	public static final nsID NS_IDOMWINDOW_IID =
 		new nsID(NS_IDOMWINDOW_IID_STR);
 
-	public nsIDOMWindow(int /*long*/ address) {
+	public nsIDOMWindow(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetDocument(int /*long*/[] aDocument) {
+	public int GetDocument(long /*int*/[] aDocument) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aDocument);
 	}
 
-	public int GetParent(int /*long*/[] aParent) {
+	public int GetParent(long /*int*/[] aParent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aParent);
 	}
 
-	public int GetTop(int /*long*/[] aTop) {
+	public int GetTop(long /*int*/[] aTop) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aTop);
 	}
 
-	public int GetScrollbars(int /*long*/[] aScrollbars) {
+	public int GetScrollbars(long /*int*/[] aScrollbars) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aScrollbars);
 	}
 
-	public int GetFrames(int /*long*/[] aFrames) {
+	public int GetFrames(long /*int*/[] aFrames) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aFrames);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aName);
 	}
 
-	public int SetName(int /*long*/ aName) {
+	public int SetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aName);
 	}
 
@@ -93,7 +93,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), xScrollDif, yScrollDif);
 	}
 
-	public int GetSelection(int /*long*/[] _retval) {
+	public int GetSelection(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), _retval);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java x86_64/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDownload_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IDOWNLOAD_IID =
 		new nsID(NS_IDOWNLOAD_IID_STR);
 
-	public nsIDownload_1_8(int /*long*/ address) {
+	public nsIDownload_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 1, getAddress(), aTargetFile);
 	}
 
@@ -49,27 +49,27 @@
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 2, getAddress(), aPercentComplete);
 	}
 
-	public int GetAmountTransferred(int /*long*/ aAmountTransferred) {
+	public int GetAmountTransferred(long /*int*/ aAmountTransferred) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 3, getAddress(), aAmountTransferred);
 	}
 
-	public int GetSize(int /*long*/ aSize) {
+	public int GetSize(long /*int*/ aSize) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 4, getAddress(), aSize);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 5, getAddress(), aSource);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 6, getAddress(), aTarget);
 	}
 
-	public int GetCancelable(int /*long*/[] aCancelable) {
+	public int GetCancelable(long /*int*/[] aCancelable) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 7, getAddress(), aCancelable);
 	}
 
-	public int GetDisplayName(int /*long*/[] aDisplayName) {
+	public int GetDisplayName(long /*int*/[] aDisplayName) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 8, getAddress(), aDisplayName);
 	}
 
@@ -77,7 +77,7 @@
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 9, getAddress(), aStartTime);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsITransfer.LAST_METHOD_ID + 10, getAddress(), aMIMEInfo);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIDownload.java x86_64/org/eclipse/swt/internal/mozilla/nsIDownload.java
--- x86/org/eclipse/swt/internal/mozilla/nsIDownload.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIDownload.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,23 +37,23 @@
 	public static final nsID NS_IDOWNLOAD_IID =
 		new nsID(NS_IDOWNLOAD_IID_STR);
 
-	public nsIDownload(int /*long*/ address) {
+	public nsIDownload(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Init(int /*long*/ aSource, int /*long*/ aTarget, char[] aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aPersist) {
+	public int Init(long /*int*/ aSource, long /*int*/ aTarget, char[] aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aPersist) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aPersist);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetTarget(int /*long*/[] aTarget) {
+	public int GetTarget(long /*int*/[] aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aTarget);
 	}
 
-	public int GetPersist(int /*long*/[] aPersist) {
+	public int GetPersist(long /*int*/[] aPersist) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aPersist);
 	}
 
@@ -61,7 +61,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPercentComplete);
 	}
 
-	public int GetDisplayName(int /*long*/[] aDisplayName) {
+	public int GetDisplayName(long /*int*/[] aDisplayName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDisplayName);
 	}
 
@@ -73,23 +73,23 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aStartTime);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aMIMEInfo);
 	}
 
-	public int GetListener(int /*long*/[] aListener) {
+	public int GetListener(long /*int*/[] aListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aListener);
 	}
 
-	public int SetListener(int /*long*/ aListener) {
+	public int SetListener(long /*int*/ aListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aListener);
 	}
 
-	public int GetObserver(int /*long*/[] aObserver) {
+	public int GetObserver(long /*int*/[] aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aObserver);
 	}
 
-	public int SetObserver(int /*long*/ aObserver) {
+	public int SetObserver(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aObserver);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java x86_64/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java
--- x86/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIEmbeddingSiteWindow.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IEMBEDDINGSITEWINDOW_IID =
 		new nsID(NS_IEMBEDDINGSITEWINDOW_IID_STR);
 
-	public nsIEmbeddingSiteWindow(int /*long*/ address) {
+	public nsIEmbeddingSiteWindow(long /*int*/ address) {
 		super(address);
 	}
 
@@ -67,7 +67,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aVisibility);
 	}
 
-	public int GetTitle(int /*long*/[] aTitle) {
+	public int GetTitle(long /*int*/[] aTitle) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aTitle);
 	}
 
@@ -75,7 +75,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aTitle);
 	}
 
-	public int GetSiteWindow(int /*long*/[] aSiteWindow) {
+	public int GetSiteWindow(long /*int*/[] aSiteWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aSiteWindow);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIFactory.java x86_64/org/eclipse/swt/internal/mozilla/nsIFactory.java
--- x86/org/eclipse/swt/internal/mozilla/nsIFactory.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIFactory.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IFACTORY_IID =
 		new nsID(NS_IFACTORY_IID_STR);
 
-	public nsIFactory(int /*long*/ address) {
+	public nsIFactory(long /*int*/ address) {
 		super(address);
 	}
 
-	public int CreateInstance(int /*long*/ aOuter, nsID iid, int /*long*/[] result) {
+	public int CreateInstance(long /*int*/ aOuter, nsID iid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aOuter, iid, result);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIFile.java x86_64/org/eclipse/swt/internal/mozilla/nsIFile.java
--- x86/org/eclipse/swt/internal/mozilla/nsIFile.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIFile.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IFILE_IID =
 		new nsID(NS_IFILE_IID_STR);
 
-	public nsIFile(int /*long*/ address) {
+	public nsIFile(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@
 
 	public static final int DIRECTORY_TYPE = 1;
 
-	public int Append(int /*long*/ node) {
+	public int Append(long /*int*/ node) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), node);
 	}
 
-	public int AppendNative(int /*long*/ node) {
+	public int AppendNative(long /*int*/ node) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), node);
 	}
 
@@ -61,43 +61,43 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), type, permissions);
 	}
 
-	public int GetLeafName(int /*long*/ aLeafName) {
+	public int GetLeafName(long /*int*/ aLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aLeafName);
 	}
 
-	public int SetLeafName(int /*long*/ aLeafName) {
+	public int SetLeafName(long /*int*/ aLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aLeafName);
 	}
 
-	public int GetNativeLeafName(int /*long*/ aNativeLeafName) {
+	public int GetNativeLeafName(long /*int*/ aNativeLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aNativeLeafName);
 	}
 
-	public int SetNativeLeafName(int /*long*/ aNativeLeafName) {
+	public int SetNativeLeafName(long /*int*/ aNativeLeafName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aNativeLeafName);
 	}
 
-	public int CopyTo(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyTo(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToFollowingLinks(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToFollowingLinks(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), newParentDir, newName);
 	}
 
-	public int CopyToFollowingLinksNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int CopyToFollowingLinksNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), newParentDir, newName);
 	}
 
-	public int MoveTo(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int MoveTo(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), newParentDir, newName);
 	}
 
-	public int MoveToNative(int /*long*/ newParentDir, int /*long*/ newName) {
+	public int MoveToNative(long /*int*/ newParentDir, long /*int*/ newName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), newParentDir, newName);
 	}
 
@@ -149,19 +149,19 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aFileSizeOfLink);
 	}
 
-	public int GetTarget(int /*long*/ aTarget) {
+	public int GetTarget(long /*int*/ aTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 27, getAddress(), aTarget);
 	}
 
-	public int GetNativeTarget(int /*long*/ aNativeTarget) {
+	public int GetNativeTarget(long /*int*/ aNativeTarget) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 28, getAddress(), aNativeTarget);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 29, getAddress(), aPath);
 	}
 
-	public int GetNativePath(int /*long*/ aNativePath) {
+	public int GetNativePath(long /*int*/ aNativePath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 30, getAddress(), aNativePath);
 	}
 
@@ -205,23 +205,23 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 40, getAddress(), type, permissions);
 	}
 
-	public int Clone(int /*long*/[] _retval) {
+	public int Clone(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 41, getAddress(), _retval);
 	}
 
-	public int Equals(int /*long*/ inFile, int[] _retval) {
+	public int Equals(long /*int*/ inFile, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 42, getAddress(), inFile, _retval);
 	}
 
-	public int Contains(int /*long*/ inFile, int recur, int[] _retval) {
+	public int Contains(long /*int*/ inFile, int recur, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 43, getAddress(), inFile, recur, _retval);
 	}
 
-	public int GetParent(int /*long*/[] aParent) {
+	public int GetParent(long /*int*/[] aParent) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 44, getAddress(), aParent);
 	}
 
-	public int GetDirectoryEntries(int /*long*/[] aDirectoryEntries) {
+	public int GetDirectoryEntries(long /*int*/[] aDirectoryEntries) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 45, getAddress(), aDirectoryEntries);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java x86_64/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java
--- x86/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIFilePicker_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IFILEPICKER_IID =
 		new nsID(NS_IFILEPICKER_IID_STR);
 
-	public nsIFilePicker_1_8(int /*long*/ address) {
+	public nsIFilePicker_1_8(long /*int*/ address) {
 		super(address);
 	}
 
@@ -56,7 +56,7 @@
 	public static final int filterXUL = 32;
 	public static final int filterApps = 64;
 
-	public int Init(int /*long*/ parent, int /*long*/ title, int mode) {
+	public int Init(long /*int*/ parent, long /*int*/ title, int mode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, title, mode);
 	}
 
@@ -64,23 +64,23 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), filterMask);
 	}
 
-	public int AppendFilter(int /*long*/ title, int /*long*/ filter) {
+	public int AppendFilter(long /*int*/ title, long /*int*/ filter) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), title, filter);
 	}
 
-	public int GetDefaultString(int /*long*/ aDefaultString) {
+	public int GetDefaultString(long /*int*/ aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aDefaultString);
 	}
 
-	public int SetDefaultString(int /*long*/ aDefaultString) {
+	public int SetDefaultString(long /*int*/ aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aDefaultString);
 	}
 
-	public int GetDefaultExtension(int /*long*/ aDefaultExtension) {
+	public int GetDefaultExtension(long /*int*/ aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDefaultExtension);
 	}
 
-	public int SetDefaultExtension(int /*long*/ aDefaultExtension) {
+	public int SetDefaultExtension(long /*int*/ aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aDefaultExtension);
 	}
 
@@ -92,27 +92,27 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aFilterIndex);
 	}
 
-	public int GetDisplayDirectory(int /*long*/[] aDisplayDirectory) {
+	public int GetDisplayDirectory(long /*int*/[] aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aDisplayDirectory);
 	}
 
-	public int SetDisplayDirectory(int /*long*/ aDisplayDirectory) {
+	public int SetDisplayDirectory(long /*int*/ aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aDisplayDirectory);
 	}
 
-	public int GetFile(int /*long*/[] aFile) {
+	public int GetFile(long /*int*/[] aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aFile);
 	}
 
-	public int GetFileURL(int /*long*/[] aFileURL) {
+	public int GetFileURL(long /*int*/[] aFileURL) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aFileURL);
 	}
 
-	public int GetFiles(int /*long*/[] aFiles) {
+	public int GetFiles(long /*int*/[] aFiles) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aFiles);
 	}
 
-	public int Show(int /*long*/ _retval) {
+	public int Show(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIFilePicker.java x86_64/org/eclipse/swt/internal/mozilla/nsIFilePicker.java
--- x86/org/eclipse/swt/internal/mozilla/nsIFilePicker.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIFilePicker.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IFILEPICKER_IID =
 		new nsID(NS_IFILEPICKER_IID_STR);
 
-	public nsIFilePicker(int /*long*/ address) {
+	public nsIFilePicker(long /*int*/ address) {
 		super(address);
 	}
 
@@ -56,7 +56,7 @@
 	public static final int filterXUL = 32;
 	public static final int filterApps = 64;
 
-	public int Init(int /*long*/ parent, char[] title, int mode) {
+	public int Init(long /*int*/ parent, char[] title, int mode) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, title, mode);
 	}
 
@@ -68,7 +68,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), title, filter);
 	}
 
-	public int GetDefaultString(int /*long*/[] aDefaultString) {
+	public int GetDefaultString(long /*int*/[] aDefaultString) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aDefaultString);
 	}
 
@@ -76,7 +76,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aDefaultString);
 	}
 
-	public int GetDefaultExtension(int /*long*/[] aDefaultExtension) {
+	public int GetDefaultExtension(long /*int*/[] aDefaultExtension) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aDefaultExtension);
 	}
 
@@ -92,27 +92,27 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aFilterIndex);
 	}
 
-	public int GetDisplayDirectory(int /*long*/[] aDisplayDirectory) {
+	public int GetDisplayDirectory(long /*int*/[] aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aDisplayDirectory);
 	}
 
-	public int SetDisplayDirectory(int /*long*/ aDisplayDirectory) {
+	public int SetDisplayDirectory(long /*int*/ aDisplayDirectory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aDisplayDirectory);
 	}
 
-	public int GetFile(int /*long*/[] aFile) {
+	public int GetFile(long /*int*/[] aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aFile);
 	}
 
-	public int GetFileURL(int /*long*/[] aFileURL) {
+	public int GetFileURL(long /*int*/[] aFileURL) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aFileURL);
 	}
 
-	public int GetFiles(int /*long*/[] aFiles) {
+	public int GetFiles(long /*int*/[] aFiles) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aFiles);
 	}
 
-	public int Show(int /*long*/ _retval) {
+	public int Show(long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), _retval);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java
--- x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,31 +37,31 @@
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher_1_8(int /*long*/ address) {
+	public nsIHelperAppLauncher_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/ aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/ aSuggestedFileName) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 6, getAddress(), aWebProgressListener);
 	}
 
@@ -69,11 +69,11 @@
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 8, getAddress(), aTargetFile);
 	}
 
-	public int GetTimeDownloadStarted(int /*long*/ aTimeDownloadStarted) {
+	public int GetTimeDownloadStarted(long /*int*/ aTimeDownloadStarted) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 9, getAddress(), aTimeDownloadStarted);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java
--- x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher_1_9.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,31 +37,31 @@
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher_1_9(int /*long*/ address) {
+	public nsIHelperAppLauncher_1_9(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/ aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/ aSuggestedFileName) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 6, getAddress(), aWebProgressListener);
 	}
 
@@ -69,7 +69,7 @@
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 7, getAddress());
 	}
 
-	public int GetTargetFile(int /*long*/[] aTargetFile) {
+	public int GetTargetFile(long /*int*/[] aTargetFile) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 8, getAddress(), aTargetFile);
 	}
 
@@ -77,7 +77,7 @@
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 9, getAddress(), aTargetFileIsExecutable);
 	}
 
-	public int GetTimeDownloadStarted(int /*long*/ aTimeDownloadStarted) {
+	public int GetTimeDownloadStarted(long /*int*/ aTimeDownloadStarted) {
 		return XPCOM.VtblCall(nsICancelable.LAST_METHOD_ID + 10, getAddress(), aTimeDownloadStarted);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java
--- x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog_1_9.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IHELPERAPPLAUNCHERDIALOG_IID =
 		new nsID(NS_IHELPERAPPLAUNCHERDIALOG_IID_STR);
 
-	public nsIHelperAppLauncherDialog_1_9(int /*long*/ address) {
+	public nsIHelperAppLauncherDialog_1_9(long /*int*/ address) {
 		super(address);
 	}
 
@@ -47,11 +47,11 @@
 
 	public static final int REASON_TYPESNIFFED = 2;
 
-	public int Show(int /*long*/ aLauncher, int /*long*/ aWindowContext, int aReason) {
+	public int Show(long /*int*/ aLauncher, long /*int*/ aWindowContext, int aReason) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLauncher, aWindowContext, aReason);
 	}
 
-	public int PromptForSaveToFile(int /*long*/ aLauncher, int /*long*/ aWindowContext, char[] aDefaultFileName, char[] aSuggestedFileExtension, int aForcePrompt, int /*long*/[] _retval) {
+	public int PromptForSaveToFile(long /*int*/ aLauncher, long /*int*/ aWindowContext, char[] aDefaultFileName, char[] aSuggestedFileExtension, int aForcePrompt, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aLauncher, aWindowContext, aDefaultFileName, aSuggestedFileExtension, aForcePrompt, _retval);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java
--- x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncherDialog.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,19 +37,19 @@
 	public static final nsID NS_IHELPERAPPLAUNCHERDIALOG_IID =
 		new nsID(NS_IHELPERAPPLAUNCHERDIALOG_IID_STR);
 
-	public nsIHelperAppLauncherDialog(int /*long*/ address) {
+	public nsIHelperAppLauncherDialog(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Show(int /*long*/ aLauncher, int /*long*/ aContext) {
+	public int Show(long /*int*/ aLauncher, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aLauncher, aContext);
 	}
 
-	public int PromptForSaveToFile(int /*long*/ aWindowContext, char[] aDefaultFile, char[] aSuggestedFileExtension, int /*long*/[] _retval) {
+	public int PromptForSaveToFile(long /*int*/ aWindowContext, char[] aDefaultFile, char[] aSuggestedFileExtension, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWindowContext, aDefaultFile, aSuggestedFileExtension, _retval);
 	}
 
-	public int ShowProgressDialog(int /*long*/ aLauncher, int /*long*/ aContext) {
+	public int ShowProgressDialog(long /*int*/ aLauncher, long /*int*/ aContext) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aLauncher, aContext);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java
--- x86/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIHelperAppLauncher.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,27 +37,27 @@
 	public static final nsID NS_IHELPERAPPLAUNCHER_IID =
 		new nsID(NS_IHELPERAPPLAUNCHER_IID_STR);
 
-	public nsIHelperAppLauncher(int /*long*/ address) {
+	public nsIHelperAppLauncher(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetMIMEInfo(int /*long*/[] aMIMEInfo) {
+	public int GetMIMEInfo(long /*int*/[] aMIMEInfo) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aMIMEInfo);
 	}
 
-	public int GetSource(int /*long*/[] aSource) {
+	public int GetSource(long /*int*/[] aSource) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSource);
 	}
 
-	public int GetSuggestedFileName(int /*long*/[] aSuggestedFileName) {
+	public int GetSuggestedFileName(long /*int*/[] aSuggestedFileName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSuggestedFileName);
 	}
 
-	public int SaveToDisk(int /*long*/ aNewFileLocation, int aRememberThisPreference) {
+	public int SaveToDisk(long /*int*/ aNewFileLocation, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aNewFileLocation, aRememberThisPreference);
 	}
 
-	public int LaunchWithApplication(int /*long*/ aApplication, int aRememberThisPreference) {
+	public int LaunchWithApplication(long /*int*/ aApplication, int aRememberThisPreference) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aApplication, aRememberThisPreference);
 	}
 
@@ -65,7 +65,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress());
 	}
 
-	public int SetWebProgressListener(int /*long*/ aWebProgressListener) {
+	public int SetWebProgressListener(long /*int*/ aWebProgressListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aWebProgressListener);
 	}
 
@@ -73,7 +73,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress());
 	}
 
-	public int GetDownloadInfo(int /*long*/[] aSourceUrl, long[] aTimeDownloadStarted, int /*long*/[] _retval) {
+	public int GetDownloadInfo(long /*int*/[] aSourceUrl, long[] aTimeDownloadStarted, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aSourceUrl, aTimeDownloadStarted, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIInputStream.java x86_64/org/eclipse/swt/internal/mozilla/nsIInputStream.java
--- x86/org/eclipse/swt/internal/mozilla/nsIInputStream.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIInputStream.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IINPUTSTREAM_IID =
 		new nsID(NS_IINPUTSTREAM_IID_STR);
 
-	public nsIInputStream(int /*long*/ address) {
+	public nsIInputStream(long /*int*/ address) {
 		super(address);
 	}
 
@@ -53,7 +53,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aBuf, aCount, _retval);
 	}
 
-	public int ReadSegments(int /*long*/ aWriter, int /*long*/ aClosure, int aCount, int[] _retval) {
+	public int ReadSegments(long /*int*/ aWriter, long /*int*/ aClosure, int aCount, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aWriter, aClosure, aCount, _retval);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java x86_64/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java
--- x86/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIInterfaceRequestor.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IINTERFACEREQUESTOR_IID =
 		new nsID(NS_IINTERFACEREQUESTOR_IID_STR);
 
-	public nsIInterfaceRequestor(int /*long*/ address) {
+	public nsIInterfaceRequestor(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetInterface(nsID uuid, int /*long*/[] result) {
+	public int GetInterface(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uuid, result);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIIOService.java x86_64/org/eclipse/swt/internal/mozilla/nsIIOService.java
--- x86/org/eclipse/swt/internal/mozilla/nsIIOService.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIIOService.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IIOSERVICE_IID =
 		new nsID(NS_IIOSERVICE_IID_STR);
 
-	public nsIIOService(int /*long*/ address) {
+	public nsIIOService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetProtocolHandler(byte[] aScheme, int /*long*/[] _retval) {
+	public int GetProtocolHandler(byte[] aScheme, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aScheme, _retval);
 	}
 
@@ -49,19 +49,19 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aScheme, _retval);
 	}
 
-	public int NewURI(int /*long*/ aSpec, byte[] aOriginCharset, int /*long*/ aBaseURI, int /*long*/[] _retval) {
+	public int NewURI(long /*int*/ aSpec, byte[] aOriginCharset, long /*int*/ aBaseURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSpec, aOriginCharset, aBaseURI, _retval);
 	}
 
-	public int NewFileURI(int /*long*/ aFile, int /*long*/[] _retval) {
+	public int NewFileURI(long /*int*/ aFile, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aFile, _retval);
 	}
 
-	public int NewChannelFromURI(int /*long*/ aURI, int /*long*/[] _retval) {
+	public int NewChannelFromURI(long /*int*/ aURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aURI, _retval);
 	}
 
-	public int NewChannel(int /*long*/ aSpec, byte[] aOriginCharset, int /*long*/ aBaseURI, int /*long*/[] _retval) {
+	public int NewChannel(long /*int*/ aSpec, byte[] aOriginCharset, long /*int*/ aBaseURI, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aSpec, aOriginCharset, aBaseURI, _retval);
 	}
 
@@ -77,7 +77,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPort, aScheme, _retval);
 	}
 
-	public int ExtractScheme(int /*long*/ urlString, int /*long*/ _retval) {
+	public int ExtractScheme(long /*int*/ urlString, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), urlString, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java x86_64/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java
--- x86/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIJSContextStack.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IJSCONTEXTSTACK_IID =
 		new nsID(NS_IJSCONTEXTSTACK_IID_STR);
 
-	public nsIJSContextStack(int /*long*/ address) {
+	public nsIJSContextStack(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,15 +45,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aCount);
 	}
 
-	public int Peek(int /*long*/[] _retval) {
+	public int Peek(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 
-	public int Pop(int /*long*/[] _retval) {
+	public int Pop(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), _retval);
 	}
 
-	public int Push(int /*long*/ cx) {
+	public int Push(long /*int*/ cx) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), cx);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsILocalFile.java x86_64/org/eclipse/swt/internal/mozilla/nsILocalFile.java
--- x86/org/eclipse/swt/internal/mozilla/nsILocalFile.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsILocalFile.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,19 +37,19 @@
 	public static final nsID NS_ILOCALFILE_IID =
 		new nsID(NS_ILOCALFILE_IID_STR);
 
-	public nsILocalFile(int /*long*/ address) {
+	public nsILocalFile(long /*int*/ address) {
 		super(address);
 	}
 
-	public int InitWithPath(int /*long*/ filePath) {
+	public int InitWithPath(long /*int*/ filePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 1, getAddress(), filePath);
 	}
 
-	public int InitWithNativePath(int /*long*/ filePath) {
+	public int InitWithNativePath(long /*int*/ filePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 2, getAddress(), filePath);
 	}
 
-	public int InitWithFile(int /*long*/ aFile) {
+	public int InitWithFile(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 3, getAddress(), aFile);
 	}
 
@@ -61,15 +61,15 @@
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 5, getAddress(), aFollowLinks);
 	}
 
-	public int OpenNSPRFileDesc(int flags, int mode, int /*long*/[] _retval) {
+	public int OpenNSPRFileDesc(int flags, int mode, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 6, getAddress(), flags, mode, _retval);
 	}
 
-	public int OpenANSIFileDesc(byte[] mode, int /*long*/[] _retval) {
+	public int OpenANSIFileDesc(byte[] mode, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 7, getAddress(), mode, _retval);
 	}
 
-	public int Load(int /*long*/[] _retval) {
+	public int Load(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 8, getAddress(), _retval);
 	}
 
@@ -77,19 +77,19 @@
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 9, getAddress(), aDiskSpaceAvailable);
 	}
 
-	public int AppendRelativePath(int /*long*/ relativeFilePath) {
+	public int AppendRelativePath(long /*int*/ relativeFilePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 10, getAddress(), relativeFilePath);
 	}
 
-	public int AppendRelativeNativePath(int /*long*/ relativeFilePath) {
+	public int AppendRelativeNativePath(long /*int*/ relativeFilePath) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 11, getAddress(), relativeFilePath);
 	}
 
-	public int GetPersistentDescriptor(int /*long*/ aPersistentDescriptor) {
+	public int GetPersistentDescriptor(long /*int*/ aPersistentDescriptor) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 12, getAddress(), aPersistentDescriptor);
 	}
 
-	public int SetPersistentDescriptor(int /*long*/ aPersistentDescriptor) {
+	public int SetPersistentDescriptor(long /*int*/ aPersistentDescriptor) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 13, getAddress(), aPersistentDescriptor);
 	}
 
@@ -101,11 +101,11 @@
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 15, getAddress());
 	}
 
-	public int GetRelativeDescriptor(int /*long*/ fromFile, int /*long*/ _retval) {
+	public int GetRelativeDescriptor(long /*int*/ fromFile, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 16, getAddress(), fromFile, _retval);
 	}
 
-	public int SetRelativeDescriptor(int /*long*/ fromFile, int /*long*/ relativeDesc) {
+	public int SetRelativeDescriptor(long /*int*/ fromFile, long /*int*/ relativeDesc) {
 		return XPCOM.VtblCall(nsIFile.LAST_METHOD_ID + 17, getAddress(), fromFile, relativeDesc);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIMemory.java x86_64/org/eclipse/swt/internal/mozilla/nsIMemory.java
--- x86/org/eclipse/swt/internal/mozilla/nsIMemory.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIMemory.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IMEMORY_IID =
 		new nsID(NS_IMEMORY_IID_STR);
 
-	public nsIMemory(int /*long*/ address) {
+	public nsIMemory(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,11 +45,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), size);
 	}
 
-	public int Realloc(int /*long*/ ptr, int newSize) {
+	public int Realloc(long /*int*/ ptr, int newSize) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), ptr, newSize);
 	}
 
-	public int Free(int /*long*/ ptr) {
+	public int Free(long /*int*/ ptr) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), ptr);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIObserverService.java x86_64/org/eclipse/swt/internal/mozilla/nsIObserverService.java
--- x86/org/eclipse/swt/internal/mozilla/nsIObserverService.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIObserverService.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,23 +37,23 @@
 	public static final nsID NS_IOBSERVERSERVICE_IID =
 		new nsID(NS_IOBSERVERSERVICE_IID_STR);
 
-	public nsIObserverService(int /*long*/ address) {
+	public nsIObserverService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddObserver(int /*long*/ anObserver, byte[] aTopic, int ownsWeak) {
+	public int AddObserver(long /*int*/ anObserver, byte[] aTopic, int ownsWeak) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), anObserver, aTopic, ownsWeak);
 	}
 
-	public int RemoveObserver(int /*long*/ anObserver, byte[] aTopic) {
+	public int RemoveObserver(long /*int*/ anObserver, byte[] aTopic) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), anObserver, aTopic);
 	}
 
-	public int NotifyObservers(int /*long*/ aSubject, byte[] aTopic, char[] someData) {
+	public int NotifyObservers(long /*int*/ aSubject, byte[] aTopic, char[] someData) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aSubject, aTopic, someData);
 	}
 
-	public int EnumerateObservers(byte[] aTopic, int /*long*/[] _retval) {
+	public int EnumerateObservers(byte[] aTopic, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aTopic, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java x86_64/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java
--- x86/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIPrefBranch.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IPREFBRANCH_IID =
 		new nsID(NS_IPREFBRANCH_IID_STR);
 
-	public nsIPrefBranch(int /*long*/ address) {
+	public nsIPrefBranch(long /*int*/ address) {
 		super(address);
 	}
 
@@ -49,7 +49,7 @@
 
 	public static final int PREF_BOOL = 128;
 
-	public int GetRoot(int /*long*/[] aRoot) {
+	public int GetRoot(long /*int*/[] aRoot) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aRoot);
 	}
 
@@ -65,7 +65,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aPrefName, aValue);
 	}
 
-	public int GetCharPref(byte[] aPrefName, int /*long*/[] _retval) {
+	public int GetCharPref(byte[] aPrefName, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPrefName, _retval);
 	}
 
@@ -81,11 +81,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aPrefName, aValue);
 	}
 
-	public int GetComplexValue(byte[] aPrefName, nsID aType, int /*long*/[] aValue) {
+	public int GetComplexValue(byte[] aPrefName, nsID aType, long /*int*/[] aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aPrefName, aType, aValue);
 	}
 
-	public int SetComplexValue(byte[] aPrefName, nsID aType, int /*long*/ aValue) {
+	public int SetComplexValue(byte[] aPrefName, nsID aType, long /*int*/ aValue) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aPrefName, aType, aValue);
 	}
 
@@ -113,7 +113,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 16, getAddress(), aStartingAt);
 	}
 
-	public int GetChildList(byte[] aStartingAt, int[] aCount, int /*long*/[] aChildArray) {
+	public int GetChildList(byte[] aStartingAt, int[] aCount, long /*int*/[] aChildArray) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aStartingAt, aCount, aChildArray);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java x86_64/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java
--- x86/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIPrefLocalizedString.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IPREFLOCALIZEDSTRING_IID =
 		new nsID(NS_IPREFLOCALIZEDSTRING_IID_STR);
 
-	public nsIPrefLocalizedString(int /*long*/ address) {
+	public nsIPrefLocalizedString(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetData(int /*long*/[] aData) {
+	public int GetData(long /*int*/[] aData) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aData);
 	}
 
@@ -49,7 +49,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aData);
 	}
 
-	public int ToString(int /*long*/[] _retval) {
+	public int ToString(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), _retval);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIPrefService.java x86_64/org/eclipse/swt/internal/mozilla/nsIPrefService.java
--- x86/org/eclipse/swt/internal/mozilla/nsIPrefService.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIPrefService.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IPREFSERVICE_IID =
 		new nsID(NS_IPREFSERVICE_IID_STR);
 
-	public nsIPrefService(int /*long*/ address) {
+	public nsIPrefService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int ReadUserPrefs(int /*long*/ aFile) {
+	public int ReadUserPrefs(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aFile);
 	}
 
@@ -53,15 +53,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress());
 	}
 
-	public int SavePrefFile(int /*long*/ aFile) {
+	public int SavePrefFile(long /*int*/ aFile) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aFile);
 	}
 
-	public int GetBranch(byte[] aPrefRoot, int /*long*/[] _retval) {
+	public int GetBranch(byte[] aPrefRoot, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aPrefRoot, _retval);
 	}
 
-	public int GetDefaultBranch(byte[] aPrefRoot, int /*long*/[] _retval) {
+	public int GetDefaultBranch(byte[] aPrefRoot, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aPrefRoot, _retval);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java x86_64/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java
--- x86/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIProgressDialog_1_8.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IPROGRESSDIALOG_IID =
 		new nsID(NS_IPROGRESSDIALOG_IID_STR);
 
-	public nsIProgressDialog_1_8(int /*long*/ address) {
+	public nsIProgressDialog_1_8(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Open(int /*long*/ aParent) {
+	public int Open(long /*int*/ aParent) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 1, getAddress(), aParent);
 	}
 
@@ -53,19 +53,19 @@
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 3, getAddress(), aCancelDownloadOnClose);
 	}
 
-	public int GetObserver(int /*long*/[] aObserver) {
+	public int GetObserver(long /*int*/[] aObserver) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 4, getAddress(), aObserver);
 	}
 
-	public int SetObserver(int /*long*/ aObserver) {
+	public int SetObserver(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 5, getAddress(), aObserver);
 	}
 
-	public int GetDialog(int /*long*/[] aDialog) {
+	public int GetDialog(long /*int*/[] aDialog) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 6, getAddress(), aDialog);
 	}
 
-	public int SetDialog(int /*long*/ aDialog) {
+	public int SetDialog(long /*int*/ aDialog) {
 		return XPCOM.VtblCall(nsIDownload_1_8.LAST_METHOD_ID + 7, getAddress(), aDialog);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java x86_64/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java
--- x86/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIProgressDialog.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IPROGRESSDIALOG_IID =
 		new nsID(NS_IPROGRESSDIALOG_IID_STR);
 
-	public nsIProgressDialog(int /*long*/ address) {
+	public nsIProgressDialog(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Open(int /*long*/ aParent) {
+	public int Open(long /*int*/ aParent) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 1, getAddress(), aParent);
 	}
 
@@ -53,11 +53,11 @@
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 3, getAddress(), aCancelDownloadOnClose);
 	}
 
-	public int GetDialog(int /*long*/[] aDialog) {
+	public int GetDialog(long /*int*/[] aDialog) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 4, getAddress(), aDialog);
 	}
 
-	public int SetDialog(int /*long*/ aDialog) {
+	public int SetDialog(long /*int*/ aDialog) {
 		return XPCOM.VtblCall(nsIDownload.LAST_METHOD_ID + 5, getAddress(), aDialog);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIPromptService2.java x86_64/org/eclipse/swt/internal/mozilla/nsIPromptService2.java
--- x86/org/eclipse/swt/internal/mozilla/nsIPromptService2.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIPromptService2.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IPROMPTSERVICE2_IID =
 		new nsID(NS_IPROMPTSERVICE2_IID_STR);
 
-	public nsIPromptService2(int /*long*/ address) {
+	public nsIPromptService2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int PromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int level, int /*long*/ authInfo, char[] checkboxLabel, int[] checkValue, int[] _retval) {
+	public int PromptAuth(long /*int*/ aParent, long /*int*/ aChannel, int level, long /*int*/ authInfo, char[] checkboxLabel, int[] checkValue, int[] _retval) {
 		return XPCOM.VtblCall(nsIPromptService.LAST_METHOD_ID + 1, getAddress(), aParent, aChannel, level, authInfo, checkboxLabel, checkValue, _retval);
 	}
 
-	public int AsyncPromptAuth(int /*long*/ aParent, int /*long*/ aChannel, int /*long*/ aCallback, int /*long*/ aContext, int level, int /*long*/ authInfo, char[] checkboxLabel, int[] checkValue, int /*long*/[] _retval) {
+	public int AsyncPromptAuth(long /*int*/ aParent, long /*int*/ aChannel, long /*int*/ aCallback, long /*int*/ aContext, int level, long /*int*/ authInfo, char[] checkboxLabel, int[] checkValue, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIPromptService.LAST_METHOD_ID + 2, getAddress(), aParent, aChannel, aCallback, aContext, level, authInfo, checkboxLabel, checkValue, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIPromptService.java x86_64/org/eclipse/swt/internal/mozilla/nsIPromptService.java
--- x86/org/eclipse/swt/internal/mozilla/nsIPromptService.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIPromptService.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,23 +37,23 @@
 	public static final nsID NS_IPROMPTSERVICE_IID =
 		new nsID(NS_IPROMPTSERVICE_IID_STR);
 
-	public nsIPromptService(int /*long*/ address) {
+	public nsIPromptService(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Alert(int /*long*/ aParent, char[] aDialogTitle, char[] aText) {
+	public int Alert(long /*int*/ aParent, char[] aDialogTitle, char[] aText) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aParent, aDialogTitle, aText);
 	}
 
-	public int AlertCheck(int /*long*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState) {
+	public int AlertCheck(long /*int*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aParent, aDialogTitle, aText, aCheckMsg, aCheckState);
 	}
 
-	public int Confirm(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int[] _retval) {
+	public int Confirm(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aParent, aDialogTitle, aText, _retval);
 	}
 
-	public int ConfirmCheck(int /*long*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int ConfirmCheck(long /*int*/ aParent, char[] aDialogTitle, char[] aText, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aParent, aDialogTitle, aText, aCheckMsg, aCheckState, _retval);
 	}
 
@@ -91,23 +91,23 @@
 
 	public static final int STD_YES_NO_BUTTONS = 1027;
 	
-	public int ConfirmEx(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int aButtonFlags, char[] aButton0Title, char[] aButton1Title, char[] aButton2Title, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int ConfirmEx(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int aButtonFlags, char[] aButton0Title, char[] aButton1Title, char[] aButton2Title, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParent, aDialogTitle, aText, aButtonFlags, aButton0Title, aButton1Title, aButton2Title, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int Prompt(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aValue, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int Prompt(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aValue, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParent, aDialogTitle, aText, aValue, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int PromptUsernameAndPassword(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aUsername, int /*long*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int PromptUsernameAndPassword(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aUsername, long /*int*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aParent, aDialogTitle, aText, aUsername, aPassword, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int PromptPassword(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int /*long*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
+	public int PromptPassword(long /*int*/ aParent, char[] aDialogTitle, char[] aText, long /*int*/[] aPassword, char[] aCheckMsg, int[] aCheckState, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aParent, aDialogTitle, aText, aPassword, aCheckMsg, aCheckState, _retval);
 	}
 
-	public int Select(int /*long*/ aParent, char[] aDialogTitle, char[] aText, int aCount, int /*long*/[] aSelectList, int[] aOutSelection, int[] _retval) {
+	public int Select(long /*int*/ aParent, char[] aDialogTitle, char[] aText, int aCount, long /*int*/[] aSelectList, int[] aOutSelection, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aParent, aDialogTitle, aText, aCount, aSelectList, aOutSelection, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIProperties.java x86_64/org/eclipse/swt/internal/mozilla/nsIProperties.java
--- x86/org/eclipse/swt/internal/mozilla/nsIProperties.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIProperties.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_IPROPERTIES_IID =
 		new nsID(NS_IPROPERTIES_IID_STR);
 
-	public nsIProperties(int /*long*/ address) {
+	public nsIProperties(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Get(byte[] prop, nsID iid, int /*long*/[] result) {
+	public int Get(byte[] prop, nsID iid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), prop, iid, result);
 	}
 
-	public int Set(byte[] prop, int /*long*/ value) {
+	public int Set(byte[] prop, long /*int*/ value) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), prop, value);
 	}
 
@@ -57,7 +57,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), prop);
 	}
 
-	public int GetKeys(int[] count, int /*long*/[] keys) {
+	public int GetKeys(int[] count, long /*int*/[] keys) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), count, keys);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIRequest.java x86_64/org/eclipse/swt/internal/mozilla/nsIRequest.java
--- x86/org/eclipse/swt/internal/mozilla/nsIRequest.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIRequest.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IREQUEST_IID =
 		new nsID(NS_IREQUEST_IID_STR);
 
-	public nsIRequest(int /*long*/ address) {
+	public nsIRequest(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetName(int /*long*/ aName) {
+	public int GetName(long /*int*/ aName) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aName);
 	}
 
@@ -49,7 +49,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 
-	public int GetStatus(int /*long*/[] aStatus) {
+	public int GetStatus(long /*int*/[] aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aStatus);
 	}
 
@@ -65,15 +65,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress());
 	}
 
-	public int GetLoadGroup(int /*long*/[] aLoadGroup) {
+	public int GetLoadGroup(long /*int*/[] aLoadGroup) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aLoadGroup);
 	}
 
-	public int SetLoadGroup(int /*long*/ aLoadGroup) {
+	public int SetLoadGroup(long /*int*/ aLoadGroup) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aLoadGroup);
 	}
 
-	public int GetLoadFlags(int /*long*/[] aLoadFlags) {
+	public int GetLoadFlags(long /*int*/[] aLoadFlags) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aLoadFlags);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIServiceManager.java x86_64/org/eclipse/swt/internal/mozilla/nsIServiceManager.java
--- x86/org/eclipse/swt/internal/mozilla/nsIServiceManager.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIServiceManager.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,15 +37,15 @@
 	public static final nsID NS_ISERVICEMANAGER_IID =
 		new nsID(NS_ISERVICEMANAGER_IID_STR);
 
-	public nsIServiceManager(int /*long*/ address) {
+	public nsIServiceManager(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetService(nsID aClass, nsID aIID, int /*long*/[] result) {
+	public int GetService(nsID aClass, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aClass, aIID, result);
 	}
 
-	public int GetServiceByContractID(byte[] aContractID, nsID aIID, int /*long*/[] result) {
+	public int GetServiceByContractID(byte[] aContractID, nsID aIID, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContractID, aIID, result);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java x86_64/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java
--- x86/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsISimpleEnumerator.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_ISIMPLEENUMERATOR_IID =
 		new nsID(NS_ISIMPLEENUMERATOR_IID_STR);
 
-	public nsISimpleEnumerator(int /*long*/ address) {
+	public nsISimpleEnumerator(long /*int*/ address) {
 		super(address);
 	}
 
@@ -45,7 +45,7 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), _retval);
 	}
 
-	public int GetNext(int /*long*/[] _retval) {
+	public int GetNext(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsISupports.java x86_64/org/eclipse/swt/internal/mozilla/nsISupports.java
--- x86/org/eclipse/swt/internal/mozilla/nsISupports.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsISupports.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,17 +37,17 @@
 	public static final nsID NS_ISUPPORTS_IID =
 		new nsID(NS_ISUPPORTS_IID_STR);
 
-	int /*long*/ address;
+	long /*int*/ address;
 
-	public nsISupports(int /*long*/ address) {
+	public nsISupports(long /*int*/ address) {
 		this.address = address;
 	}
 
-	public int /*long*/ getAddress() {
+	public long /*int*/ getAddress() {
 		return this.address;
 	}
 
-	public int QueryInterface(nsID uuid, int /*long*/[] result) {
+	public int QueryInterface(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(0, getAddress(), uuid, result);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java x86_64/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java
--- x86/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsISupportsWeakReference.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_ISUPPORTSWEAKREFERENCE_IID =
 		new nsID(NS_ISUPPORTSWEAKREFERENCE_IID_STR);
 
-	public nsISupportsWeakReference(int /*long*/ address) {
+	public nsISupportsWeakReference(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetWeakReference(int /*long*/[] _retval) {
+	public int GetWeakReference(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsITooltipListener.java x86_64/org/eclipse/swt/internal/mozilla/nsITooltipListener.java
--- x86/org/eclipse/swt/internal/mozilla/nsITooltipListener.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsITooltipListener.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_ITOOLTIPLISTENER_IID =
 		new nsID(NS_ITOOLTIPLISTENER_IID_STR);
 
-	public nsITooltipListener(int /*long*/ address) {
+	public nsITooltipListener(long /*int*/ address) {
 		super(address);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsITransfer.java x86_64/org/eclipse/swt/internal/mozilla/nsITransfer.java
--- x86/org/eclipse/swt/internal/mozilla/nsITransfer.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsITransfer.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_ITRANSFER_IID =
 		new nsID(NS_ITRANSFER_IID_STR);
 
-	public nsITransfer(int /*long*/ address) {
+	public nsITransfer(long /*int*/ address) {
 		super(address);
 	}
 
-	public int Init(int /*long*/ aSource, int /*long*/ aTarget, int /*long*/ aDisplayName, int /*long*/ aMIMEInfo, long startTime, int /*long*/ aTempFile, int /*long*/ aCancelable) {
+	public int Init(long /*int*/ aSource, long /*int*/ aTarget, long /*int*/ aDisplayName, long /*int*/ aMIMEInfo, long startTime, long /*int*/ aTempFile, long /*int*/ aCancelable) {
 		return XPCOM.VtblCall(nsIWebProgressListener2.LAST_METHOD_ID + 1, getAddress(), aSource, aTarget, aDisplayName, aMIMEInfo, startTime, aTempFile, aCancelable);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java x86_64/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java
--- x86/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIURIContentListener.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,39 +37,39 @@
 	public static final nsID NS_IURICONTENTLISTENER_IID =
 		new nsID(NS_IURICONTENTLISTENER_IID_STR);
 
-	public nsIURIContentListener(int /*long*/ address) {
+	public nsIURIContentListener(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OnStartURIOpen(int /*long*/ aURI, int[] _retval) {
+	public int OnStartURIOpen(long /*int*/ aURI, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aURI, _retval);
 	}
 
-	public int DoContent(byte[] aContentType, int aIsContentPreferred, int /*long*/ aRequest, int /*long*/[] aContentHandler, int[] _retval) {
+	public int DoContent(byte[] aContentType, int aIsContentPreferred, long /*int*/ aRequest, long /*int*/[] aContentHandler, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aContentType, aIsContentPreferred, aRequest, aContentHandler, _retval);
 	}
 
-	public int IsPreferred(byte[] aContentType, int /*long*/[] aDesiredContentType, int[] _retval) {
+	public int IsPreferred(byte[] aContentType, long /*int*/[] aDesiredContentType, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aContentType, aDesiredContentType, _retval);
 	}
 
-	public int CanHandleContent(byte[] aContentType, int aIsContentPreferred, int /*long*/[] aDesiredContentType, int[] _retval) {
+	public int CanHandleContent(byte[] aContentType, int aIsContentPreferred, long /*int*/[] aDesiredContentType, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContentType, aIsContentPreferred, aDesiredContentType, _retval);
 	}
 
-	public int GetLoadCookie(int /*long*/[] aLoadCookie) {
+	public int GetLoadCookie(long /*int*/[] aLoadCookie) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aLoadCookie);
 	}
 
-	public int SetLoadCookie(int /*long*/ aLoadCookie) {
+	public int SetLoadCookie(long /*int*/ aLoadCookie) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aLoadCookie);
 	}
 
-	public int GetParentContentListener(int /*long*/[] aParentContentListener) {
+	public int GetParentContentListener(long /*int*/[] aParentContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aParentContentListener);
 	}
 
-	public int SetParentContentListener(int /*long*/ aParentContentListener) {
+	public int SetParentContentListener(long /*int*/ aParentContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aParentContentListener);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIURI.java x86_64/org/eclipse/swt/internal/mozilla/nsIURI.java
--- x86/org/eclipse/swt/internal/mozilla/nsIURI.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIURI.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,67 +37,67 @@
 	public static final nsID NS_IURI_IID =
 		new nsID(NS_IURI_IID_STR);
 
-	public nsIURI(int /*long*/ address) {
+	public nsIURI(long /*int*/ address) {
 		super(address);
 	}
 
-	public int GetSpec(int /*long*/ aSpec) {
+	public int GetSpec(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aSpec);
 	}
 
-	public int SetSpec(int /*long*/ aSpec) {
+	public int SetSpec(long /*int*/ aSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aSpec);
 	}
 
-	public int GetPrePath(int /*long*/ aPrePath) {
+	public int GetPrePath(long /*int*/ aPrePath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aPrePath);
 	}
 
-	public int GetScheme(int /*long*/ aScheme) {
+	public int GetScheme(long /*int*/ aScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aScheme);
 	}
 
-	public int SetScheme(int /*long*/ aScheme) {
+	public int SetScheme(long /*int*/ aScheme) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aScheme);
 	}
 
-	public int GetUserPass(int /*long*/ aUserPass) {
+	public int GetUserPass(long /*int*/ aUserPass) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aUserPass);
 	}
 
-	public int SetUserPass(int /*long*/ aUserPass) {
+	public int SetUserPass(long /*int*/ aUserPass) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aUserPass);
 	}
 
-	public int GetUsername(int /*long*/ aUsername) {
+	public int GetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aUsername);
 	}
 
-	public int SetUsername(int /*long*/ aUsername) {
+	public int SetUsername(long /*int*/ aUsername) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aUsername);
 	}
 
-	public int GetPassword(int /*long*/ aPassword) {
+	public int GetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aPassword);
 	}
 
-	public int SetPassword(int /*long*/ aPassword) {
+	public int SetPassword(long /*int*/ aPassword) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aPassword);
 	}
 
-	public int GetHostPort(int /*long*/ aHostPort) {
+	public int GetHostPort(long /*int*/ aHostPort) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aHostPort);
 	}
 
-	public int SetHostPort(int /*long*/ aHostPort) {
+	public int SetHostPort(long /*int*/ aHostPort) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aHostPort);
 	}
 
-	public int GetHost(int /*long*/ aHost) {
+	public int GetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 14, getAddress(), aHost);
 	}
 
-	public int SetHost(int /*long*/ aHost) {
+	public int SetHost(long /*int*/ aHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 15, getAddress(), aHost);
 	}
 
@@ -109,15 +109,15 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 17, getAddress(), aPort);
 	}
 
-	public int GetPath(int /*long*/ aPath) {
+	public int GetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 18, getAddress(), aPath);
 	}
 
-	public int SetPath(int /*long*/ aPath) {
+	public int SetPath(long /*int*/ aPath) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 19, getAddress(), aPath);
 	}
 
-	public int Equals(int /*long*/ other, int[] _retval) {
+	public int Equals(long /*int*/ other, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 20, getAddress(), other, _retval);
 	}
 
@@ -125,23 +125,23 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 21, getAddress(), scheme, _retval);
 	}
 
-	public int Clone(int /*long*/[] _retval) {
+	public int Clone(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 22, getAddress(), _retval);
 	}
 
-	public int Resolve(int /*long*/ relativePath, int /*long*/ _retval) {
+	public int Resolve(long /*int*/ relativePath, long /*int*/ _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 23, getAddress(), relativePath, _retval);
 	}
 
-	public int GetAsciiSpec(int /*long*/ aAsciiSpec) {
+	public int GetAsciiSpec(long /*int*/ aAsciiSpec) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 24, getAddress(), aAsciiSpec);
 	}
 
-	public int GetAsciiHost(int /*long*/ aAsciiHost) {
+	public int GetAsciiHost(long /*int*/ aAsciiHost) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 25, getAddress(), aAsciiHost);
 	}
 
-	public int GetOriginCharset(int /*long*/ aOriginCharset) {
+	public int GetOriginCharset(long /*int*/ aOriginCharset) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 26, getAddress(), aOriginCharset);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWeakReference.java x86_64/org/eclipse/swt/internal/mozilla/nsIWeakReference.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWeakReference.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWeakReference.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IWEAKREFERENCE_IID =
 		new nsID(NS_IWEAKREFERENCE_IID_STR);
 
-	public nsIWeakReference(int /*long*/ address) {
+	public nsIWeakReference(long /*int*/ address) {
 		super(address);
 	}
 
-	public int QueryReferent(nsID uuid, int /*long*/[] result) {
+	public int QueryReferent(nsID uuid, long /*int*/[] result) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), uuid, result);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserChromeFocus.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBBROWSERCHROMEFOCUS_IID =
 		new nsID(NS_IWEBBROWSERCHROMEFOCUS_IID_STR);
 
-	public nsIWebBrowserChromeFocus(int /*long*/ address) {
+	public nsIWebBrowserChromeFocus(long /*int*/ address) {
 		super(address);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserChrome.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBBROWSERCHROME_IID =
 		new nsID(NS_IWEBBROWSERCHROME_IID_STR);
 
-	public nsIWebBrowserChrome(int /*long*/ address) {
+	public nsIWebBrowserChrome(long /*int*/ address) {
 		super(address);
 	}
 
@@ -51,11 +51,11 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), statusType, status);
 	}
 
-	public int GetWebBrowser(int /*long*/[] aWebBrowser) {
+	public int GetWebBrowser(long /*int*/[] aWebBrowser) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWebBrowser);
 	}
 
-	public int SetWebBrowser(int /*long*/ aWebBrowser) {
+	public int SetWebBrowser(long /*int*/ aWebBrowser) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aWebBrowser);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowserFocus.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBBROWSERFOCUS_IID =
 		new nsID(NS_IWEBBROWSERFOCUS_IID_STR);
 
-	public nsIWebBrowserFocus(int /*long*/ address) {
+	public nsIWebBrowserFocus(long /*int*/ address) {
 		super(address);
 	}
 
@@ -57,19 +57,19 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress());
 	}
 
-	public int GetFocusedWindow(int /*long*/[] aFocusedWindow) {
+	public int GetFocusedWindow(long /*int*/[] aFocusedWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aFocusedWindow);
 	}
 
-	public int SetFocusedWindow(int /*long*/ aFocusedWindow) {
+	public int SetFocusedWindow(long /*int*/ aFocusedWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aFocusedWindow);
 	}
 
-	public int GetFocusedElement(int /*long*/[] aFocusedElement) {
+	public int GetFocusedElement(long /*int*/[] aFocusedElement) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aFocusedElement);
 	}
 
-	public int SetFocusedElement(int /*long*/ aFocusedElement) {
+	public int SetFocusedElement(long /*int*/ aFocusedElement) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aFocusedElement);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebBrowser.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,35 +37,35 @@
 	public static final nsID NS_IWEBBROWSER_IID =
 		new nsID(NS_IWEBBROWSER_IID_STR);
 
-	public nsIWebBrowser(int /*long*/ address) {
+	public nsIWebBrowser(long /*int*/ address) {
 		super(address);
 	}
 
-	public int AddWebBrowserListener(int /*long*/ aListener, nsID aIID) {
+	public int AddWebBrowserListener(long /*int*/ aListener, nsID aIID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aListener, aIID);
 	}
 
-	public int RemoveWebBrowserListener(int /*long*/ aListener, nsID aIID) {
+	public int RemoveWebBrowserListener(long /*int*/ aListener, nsID aIID) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aListener, aIID);
 	}
 
-	public int GetContainerWindow(int /*long*/[] aContainerWindow) {
+	public int GetContainerWindow(long /*int*/[] aContainerWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aContainerWindow);
 	}
 
-	public int SetContainerWindow(int /*long*/ aContainerWindow) {
+	public int SetContainerWindow(long /*int*/ aContainerWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aContainerWindow);
 	}
 
-	public int GetParentURIContentListener(int /*long*/[] aParentURIContentListener) {
+	public int GetParentURIContentListener(long /*int*/[] aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParentURIContentListener);
 	}
 
-	public int SetParentURIContentListener(int /*long*/ aParentURIContentListener) {
+	public int SetParentURIContentListener(long /*int*/ aParentURIContentListener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParentURIContentListener);
 	}
 
-	public int GetContentDOMWindow(int /*long*/[] aContentDOMWindow) {
+	public int GetContentDOMWindow(long /*int*/[] aContentDOMWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), aContentDOMWindow);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebNavigationInfo.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBNAVIGATIONINFO_IID =
 		new nsID(NS_IWEBNAVIGATIONINFO_IID_STR);
 
-	public nsIWebNavigationInfo(int /*long*/ address) {
+	public nsIWebNavigationInfo(long /*int*/ address) {
 		super(address);
 	}
 
@@ -49,7 +49,7 @@
 
 	public static final int OTHER = 32768;
 
-	public int IsTypeSupported(int /*long*/ aType, int /*long*/ aWebNav, int[] _retval) {
+	public int IsTypeSupported(long /*int*/ aType, long /*int*/ aWebNav, int[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aType, aWebNav, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebNavigation.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBNAVIGATION_IID =
 		new nsID(NS_IWEBNAVIGATION_IID_STR);
 
-	public nsIWebNavigation(int /*long*/ address) {
+	public nsIWebNavigation(long /*int*/ address) {
 		super(address);
 	}
 
@@ -79,7 +79,7 @@
 
 	public static final int LOAD_FLAGS_CHARSET_CHANGE = 1024;
 
-	public int LoadURI(char[] uri, int loadFlags, int /*long*/ referrer, int /*long*/ postData, int /*long*/ headers) {
+	public int LoadURI(char[] uri, int loadFlags, long /*int*/ referrer, long /*int*/ postData, long /*int*/ headers) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), uri, loadFlags, referrer, postData, headers);
 	}
 
@@ -97,23 +97,23 @@
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), stopFlags);
 	}
 
-	public int GetDocument(int /*long*/[] aDocument) {
+	public int GetDocument(long /*int*/[] aDocument) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aDocument);
 	}
 
-	public int GetCurrentURI(int /*long*/[] aCurrentURI) {
+	public int GetCurrentURI(long /*int*/[] aCurrentURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aCurrentURI);
 	}
 
-	public int GetReferringURI(int /*long*/[] aReferringURI) {
+	public int GetReferringURI(long /*int*/[] aReferringURI) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aReferringURI);
 	}
 
-	public int GetSessionHistory(int /*long*/[] aSessionHistory) {
+	public int GetSessionHistory(long /*int*/[] aSessionHistory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 12, getAddress(), aSessionHistory);
 	}
 
-	public int SetSessionHistory(int /*long*/ aSessionHistory) {
+	public int SetSessionHistory(long /*int*/ aSessionHistory) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 13, getAddress(), aSessionHistory);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebProgress.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgress.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebProgress.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgress.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBPROGRESS_IID =
 		new nsID(NS_IWEBPROGRESS_IID_STR);
 
-	public nsIWebProgress(int /*long*/ address) {
+	public nsIWebProgress(long /*int*/ address) {
 		super(address);
 	}
 
@@ -61,15 +61,15 @@
 
 	public static final int NOTIFY_ALL = 255;
 
-	public int AddProgressListener(int /*long*/ listener, int aNotifyMask) {
+	public int AddProgressListener(long /*int*/ listener, int aNotifyMask) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), listener, aNotifyMask);
 	}
 
-	public int RemoveProgressListener(int /*long*/ listener) {
+	public int RemoveProgressListener(long /*int*/ listener) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), listener);
 	}
 
-	public int GetDOMWindow(int /*long*/[] aDOMWindow) {
+	public int GetDOMWindow(long /*int*/[] aDOMWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aDOMWindow);
 	}
 
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgressListener2.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IWEBPROGRESSLISTENER2_IID =
 		new nsID(NS_IWEBPROGRESSLISTENER2_IID_STR);
 
-	public nsIWebProgressListener2(int /*long*/ address) {
+	public nsIWebProgressListener2(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OnProgressChange64(int /*long*/ aWebProgress, int /*long*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
+	public int OnProgressChange64(long /*int*/ aWebProgress, long /*int*/ aRequest, long aCurSelfProgress, long aMaxSelfProgress, long aCurTotalProgress, long aMaxTotalProgress) {
 		return XPCOM.VtblCall(nsIWebProgressListener.LAST_METHOD_ID + 1, getAddress(), aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 	}
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWebProgressListener.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,7 +37,7 @@
 	public static final nsID NS_IWEBPROGRESSLISTENER_IID =
 		new nsID(NS_IWEBPROGRESSLISTENER_IID_STR);
 
-	public nsIWebProgressListener(int /*long*/ address) {
+	public nsIWebProgressListener(long /*int*/ address) {
 		super(address);
 	}
 
@@ -71,23 +71,23 @@
 
 	public static final int STATE_SECURE_LOW = 131072;
 
-	public int OnStateChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aStateFlags, int aStatus) {
+	public int OnStateChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aStateFlags, int aStatus) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aWebProgress, aRequest, aStateFlags, aStatus);
 	}
 
-	public int OnProgressChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
+	public int OnProgressChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aCurSelfProgress, int aMaxSelfProgress, int aCurTotalProgress, int aMaxTotalProgress) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aWebProgress, aRequest, aCurSelfProgress, aMaxSelfProgress, aCurTotalProgress, aMaxTotalProgress);
 	}
 
-	public int OnLocationChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int /*long*/ location) {
+	public int OnLocationChange(long /*int*/ aWebProgress, long /*int*/ aRequest, long /*int*/ location) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aWebProgress, aRequest, location);
 	}
 
-	public int OnStatusChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int aStatus, char[] aMessage) {
+	public int OnStatusChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int aStatus, char[] aMessage) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), aWebProgress, aRequest, aStatus, aMessage);
 	}
 
-	public int OnSecurityChange(int /*long*/ aWebProgress, int /*long*/ aRequest, int state) {
+	public int OnSecurityChange(long /*int*/ aWebProgress, long /*int*/ aRequest, int state) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aWebProgress, aRequest, state);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java x86_64/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWindowCreator2.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,13 +37,13 @@
 	public static final nsID NS_IWINDOWCREATOR2_IID =
 		new nsID(NS_IWINDOWCREATOR2_IID_STR);
 
-	public nsIWindowCreator2(int /*long*/ address) {
+	public nsIWindowCreator2(long /*int*/ address) {
 		super(address);
 	}
 
 	public static final int PARENT_IS_LOADING_OR_RUNNING_TIMEOUT = 1;
 
-	public int CreateChromeWindow2(int /*long*/ parent, int chromeFlags, int contextFlags, int /*long*/ uri, int[] cancel, int /*long*/[] _retval) {
+	public int CreateChromeWindow2(long /*int*/ parent, int chromeFlags, int contextFlags, long /*int*/ uri, int[] cancel, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsIWindowCreator.LAST_METHOD_ID + 1, getAddress(), parent, chromeFlags, contextFlags, uri, cancel, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java x86_64/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWindowCreator.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,11 +37,11 @@
 	public static final nsID NS_IWINDOWCREATOR_IID =
 		new nsID(NS_IWINDOWCREATOR_IID_STR);
 
-	public nsIWindowCreator(int /*long*/ address) {
+	public nsIWindowCreator(long /*int*/ address) {
 		super(address);
 	}
 
-	public int CreateChromeWindow(int /*long*/ parent, int chromeFlags, int /*long*/[] _retval) {
+	public int CreateChromeWindow(long /*int*/ parent, int chromeFlags, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), parent, chromeFlags, _retval);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java x86_64/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java
--- x86/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/nsIWindowWatcher.java	2009-02-11 17:43:48.000000000 -0500
@@ -37,51 +37,51 @@
 	public static final nsID NS_IWINDOWWATCHER_IID =
 		new nsID(NS_IWINDOWWATCHER_IID_STR);
 
-	public nsIWindowWatcher(int /*long*/ address) {
+	public nsIWindowWatcher(long /*int*/ address) {
 		super(address);
 	}
 
-	public int OpenWindow(int /*long*/ aParent, byte[] aUrl, byte[] aName, byte[] aFeatures, int /*long*/ aArguments, int /*long*/[] _retval) {
+	public int OpenWindow(long /*int*/ aParent, byte[] aUrl, byte[] aName, byte[] aFeatures, long /*int*/ aArguments, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 1, getAddress(), aParent, aUrl, aName, aFeatures, aArguments, _retval);
 	}
 
-	public int RegisterNotification(int /*long*/ aObserver) {
+	public int RegisterNotification(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 2, getAddress(), aObserver);
 	}
 
-	public int UnregisterNotification(int /*long*/ aObserver) {
+	public int UnregisterNotification(long /*int*/ aObserver) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 3, getAddress(), aObserver);
 	}
 
-	public int GetWindowEnumerator(int /*long*/[] _retval) {
+	public int GetWindowEnumerator(long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 4, getAddress(), _retval);
 	}
 
-	public int GetNewPrompter(int /*long*/ aParent, int /*long*/[] _retval) {
+	public int GetNewPrompter(long /*int*/ aParent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 5, getAddress(), aParent, _retval);
 	}
 
-	public int GetNewAuthPrompter(int /*long*/ aParent, int /*long*/[] _retval) {
+	public int GetNewAuthPrompter(long /*int*/ aParent, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 6, getAddress(), aParent, _retval);
 	}
 
-	public int SetWindowCreator(int /*long*/ creator) {
+	public int SetWindowCreator(long /*int*/ creator) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 7, getAddress(), creator);
 	}
 
-	public int GetChromeForWindow(int /*long*/ aWindow, int /*long*/[] _retval) {
+	public int GetChromeForWindow(long /*int*/ aWindow, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 8, getAddress(), aWindow, _retval);
 	}
 
-	public int GetWindowByName(char[] aTargetName, int /*long*/ aCurrentWindow, int /*long*/[] _retval) {
+	public int GetWindowByName(char[] aTargetName, long /*int*/ aCurrentWindow, long /*int*/[] _retval) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 9, getAddress(), aTargetName, aCurrentWindow, _retval);
 	}
 
-	public int GetActiveWindow(int /*long*/[] aActiveWindow) {
+	public int GetActiveWindow(long /*int*/[] aActiveWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 10, getAddress(), aActiveWindow);
 	}
 
-	public int SetActiveWindow(int /*long*/ aActiveWindow) {
+	public int SetActiveWindow(long /*int*/ aActiveWindow) {
 		return XPCOM.VtblCall(nsISupports.LAST_METHOD_ID + 11, getAddress(), aActiveWindow);
 	}
 }
\ No newline at end of file
diff -ur x86/org/eclipse/swt/internal/mozilla/XPCOMInit.java x86_64/org/eclipse/swt/internal/mozilla/XPCOMInit.java
--- x86/org/eclipse/swt/internal/mozilla/XPCOMInit.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/XPCOMInit.java	2009-02-11 17:43:48.000000000 -0500
@@ -33,7 +33,7 @@
 	public static final int PATH_MAX = 4096;
 	
 public static final native int GREVersionRange_sizeof ();
-public static final native int GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, int /*long*/ properties, int propertiesLength, int /*long*/ buffer, int buflen);
+public static final native int GRE_GetGREPathWithProperties (GREVersionRange versions, int versionsLength, long /*int*/ properties, int propertiesLength, long /*int*/ buffer, int buflen);
 public static final native int XPCOMGlueStartup (byte[] place);
 public static final native int XPCOMGlueShutdown ();
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/XPCOM.java x86_64/org/eclipse/swt/internal/mozilla/XPCOM.java
--- x86/org/eclipse/swt/internal/mozilla/XPCOM.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/XPCOM.java	2009-02-11 17:43:48.000000000 -0500
@@ -124,183 +124,183 @@
 	public static final int NS_ERROR_FILE_NOT_FOUND = 0x80520012;
 	public static final int NS_ERROR_FILE_UNRECOGNIZED_PATH = 0x80520001;
 
-public static final native void memmove(nsID dest, int /*long*/ src, int nbytes);
-public static final native void memmove(int /*long*/ dest, nsID src, int nbytes);
-public static final native int NS_GetComponentManager(int /*long*/[] result);
-public static final native int NS_GetServiceManager(int /*long*/[] result);
-public static final native int NS_InitXPCOM2(int /*long*/ result, int /*long*/ binDirectory, int /*long*/ appFileLocationProvider);
-public static final native int NS_NewLocalFile(int /*long*/ path, int followLinks, int /*long*/[] result);
-public static final native int strlen_PRUnichar(int /*long*/ s);
-public static final native int /*long*/ nsEmbedCString_new();
-public static final native int /*long*/ nsEmbedCString_new(byte[] aString, int length);
-public static final native int /*long*/ nsEmbedCString_new(int aString, int length);
-public static final native void nsEmbedCString_delete(int /*long*/ ptr);
-public static final native int nsEmbedCString_Length(int /*long*/ ptr);
-public static final native int /*long*/ nsEmbedCString_get(int /*long*/ ptr);
-public static final native void nsID_delete(int /*long*/ ptr);
-public static final native int /*long*/ nsID_new();
-public static final native int nsID_Equals(int /*long*/ ptr, int /*long*/ other);
-public static final native int /*long*/ nsEmbedString_new();
-public static final native int /*long*/ nsEmbedString_new(char[] aString);
-public static final native void nsEmbedString_delete(int /*long*/ ptr);
-public static final native int nsEmbedString_Length(int /*long*/ ptr);
-public static final native int /*long*/ nsEmbedString_get(int /*long*/ ptr);
+public static final native void memmove(nsID dest, long /*int*/ src, int nbytes);
+public static final native void memmove(long /*int*/ dest, nsID src, int nbytes);
+public static final native int NS_GetComponentManager(long /*int*/[] result);
+public static final native int NS_GetServiceManager(long /*int*/[] result);
+public static final native int NS_InitXPCOM2(long /*int*/ result, long /*int*/ binDirectory, long /*int*/ appFileLocationProvider);
+public static final native int NS_NewLocalFile(long /*int*/ path, int followLinks, long /*int*/[] result);
+public static final native int strlen_PRUnichar(long /*int*/ s);
+public static final native long /*int*/ nsEmbedCString_new();
+public static final native long /*int*/ nsEmbedCString_new(byte[] aString, int length);
+public static final native long /*int*/ nsEmbedCString_new(int aString, int length);
+public static final native void nsEmbedCString_delete(long /*int*/ ptr);
+public static final native int nsEmbedCString_Length(long /*int*/ ptr);
+public static final native long /*int*/ nsEmbedCString_get(long /*int*/ ptr);
+public static final native void nsID_delete(long /*int*/ ptr);
+public static final native long /*int*/ nsID_new();
+public static final native int nsID_Equals(long /*int*/ ptr, long /*int*/ other);
+public static final native long /*int*/ nsEmbedString_new();
+public static final native long /*int*/ nsEmbedString_new(char[] aString);
+public static final native void nsEmbedString_delete(long /*int*/ ptr);
+public static final native int nsEmbedString_Length(long /*int*/ ptr);
+public static final native long /*int*/ nsEmbedString_get(long /*int*/ ptr);
 public static final native int XPCOMGlueStartup(byte[] place);
 public static final native int XPCOMGlueShutdown();
 
-public static final native int /*long*/ Call(int /*long*/ ptr, int /*long*/ aInStream, int /*long*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount);
+public static final native long /*int*/ Call(long /*int*/ ptr, long /*int*/ aInStream, long /*int*/ aClosure, byte[] aFromSegment, int aToOffset, int aCount, int[] aWriteCount);
 
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, float arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, float[] arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long[] arg0);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, short[] arg0);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long [] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, char[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, long arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, long arg1, long arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, nsID arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, nsID arg1, long [] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, nsID arg1, long arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, char[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, char[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, byte[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, byte[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int[] arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, int arg2);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long [] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6);
-
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14);
-static final native int VtblCall(int fnNumber, int /*long*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, float arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, float[] arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long[] arg0);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, short[] arg0);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long [] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, char[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long [] arg0, long [] arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, long[] arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, long arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, long arg1, long arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, nsID arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, nsID arg1, long [] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, long[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, nsID arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, long[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int[] arg1, long[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, nsID arg1, long arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, char[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, char[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, byte[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, byte[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int[] arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, int arg2);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, nsID arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, long arg1, nsID arg2, long[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, int arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, long arg2, long[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long [] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, char[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, char[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int[] arg0, int[] arg1, int[] arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, int arg1, nsID arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, long arg1, nsID arg2, long [] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int[] arg2, int[] arg3);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long [] arg2, int[] arg3);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, int arg2, int arg3, int arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, char[] arg0, int arg1, long arg2, long arg3, long arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int[] arg1, int[] arg2, int[] arg3, int[] arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, int arg2, int[] arg3, int[] arg4);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, int arg1, long arg2, long [] arg3, int[] arg4);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, byte[] arg1, byte[] arg2, byte[] arg3, int arg4, int[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, byte[] arg1, byte[] arg2, byte[] arg3, long arg4, long [] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, int arg3, long arg4, int arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, int arg3, long arg4, int arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, long arg3, long arg4, long arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, long arg3, long arg4, long arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, int arg3, int arg4, int arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, int arg3, byte[] arg4, byte[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, nsID arg0, byte[] arg1, byte[] arg2, long arg3, byte[] arg4, byte[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, long arg2, long arg3, long arg4, long arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, char[] arg3, int[] arg4, int[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, int[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, byte[] arg0, byte[] arg1, byte[] arg2, int arg3, int arg4, long[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int[] arg4, int[] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int[] arg4, long [] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, char[] arg2, char[] arg3, int arg4, int [] arg5);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, char[] arg2, char[] arg3, int arg4, long[] arg5);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, int[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, long[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, char[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, char[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, int arg2, long arg3, char[] arg4, int[] arg5, int[] arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, long arg4, int arg5, int arg6);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, long arg4, long arg5, long arg6);
+
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int[] arg3, int[] arg4, char[] arg5, int[] arg6, int[] arg7);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, long[] arg3, long [] arg4, char[] arg5, int[] arg6, int[] arg7);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, char[] arg6, int[] arg7, int[] arg8);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, long arg3, int arg4, long arg5, char[] arg6, int[] arg7, long [] arg8);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, char[] arg1, char[] arg2, int arg3, char[] arg4, char[] arg5, char[] arg6, char[] arg7, int[] arg8, int[] arg9);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int[] arg10, int[] arg11);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, long arg5, long arg6, int arg7, long arg8, int arg9, long [] arg10, long [] arg11);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, char[] arg4, byte[] arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int[] arg11, int[] arg12);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, long arg1, long arg2, int arg3, char[] arg4, byte[] arg5, long arg6, long arg7, int arg8, long arg9, int arg10, long [] arg11, long [] arg12);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, int arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, int arg14);
+static final native int VtblCall(int fnNumber, long /*int*/ ppVtbl, long arg0, int arg1, int arg2, long arg3, int arg4, int arg5, int arg6, int arg7, int arg8, int arg9, int arg10, int arg11, int arg12, short arg13, long arg14);
 }
diff -ur x86/org/eclipse/swt/internal/mozilla/XPCOMObject.java x86_64/org/eclipse/swt/internal/mozilla/XPCOMObject.java
--- x86/org/eclipse/swt/internal/mozilla/XPCOMObject.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/mozilla/XPCOMObject.java	2009-02-11 17:43:48.000000000 -0500
@@ -16,7 +16,7 @@
 
 public class XPCOMObject {
 
-	private int /*long*/ ppVtable;
+	private long /*int*/ ppVtable;
 	
 	static private final int MAX_ARG_COUNT = 12;
 	static private final int MAX_VTABLE_LENGTH = 80;
@@ -24,7 +24,7 @@
 	static private Hashtable ObjectMap = new Hashtable ();
 	
 public XPCOMObject (int[] argCounts) {
-	int /*long*/[] callbackAddresses = new int /*long*/[argCounts.length];
+	long /*int*/[] callbackAddresses = new long /*int*/[argCounts.length];
 	synchronized (Callbacks) {
 		for (int i = 0, length = argCounts.length; i < length; i++){
 			if ((Callbacks[i][argCounts[i]]) == null) {
@@ -35,737 +35,737 @@
 		}
 	}
 
-	int /*long*/ pVtable = C.malloc (C.PTR_SIZEOF * argCounts.length);
+	long /*int*/ pVtable = C.malloc (C.PTR_SIZEOF * argCounts.length);
 	XPCOM.memmove (pVtable, callbackAddresses, C.PTR_SIZEOF * argCounts.length);
 	ppVtable = C.malloc (C.PTR_SIZEOF);
-	XPCOM.memmove (ppVtable, new int /*long*/[] {pVtable}, C.PTR_SIZEOF);
+	XPCOM.memmove (ppVtable, new long /*int*/[] {pVtable}, C.PTR_SIZEOF);
 	ObjectMap.put (new LONG (ppVtable), this);
 }
 	
-static int /*long*/ callback0 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback0 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method0 (args);
 }
-static int /*long*/ callback1 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback1 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method1 (args);
 }
-static int /*long*/ callback10 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback10 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method10 (args);
 }
-static int /*long*/ callback11 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback11 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method11 (args);
 }
-static int /*long*/ callback12 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback12 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method12 (args);
 }
-static int /*long*/ callback13 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback13 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method13 (args);
 }
-static int /*long*/ callback14 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback14 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method14 (args);
 }
-static int /*long*/ callback15 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback15 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method15 (args);
 }
-static int /*long*/ callback16 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback16 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method16 (args);
 }
-static int /*long*/ callback17 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback17 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method17 (args);
 }
-static int /*long*/ callback18 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback18 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method18 (args);
 }
-static int /*long*/ callback19 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback19 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method19 (args);
 }
-static int /*long*/ callback2 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback2 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method2 (args);
 }
-static int /*long*/ callback20 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback20 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method20 (args);
 }
-static int /*long*/ callback21 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback21 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method21 (args);
 }
-static int /*long*/ callback22 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback22 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method22 (args);
 }
-static int /*long*/ callback23 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback23 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method23 (args);
 }
-static int /*long*/ callback24 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback24 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method24 (args);
 }
-static int /*long*/ callback25 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback25 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method25 (args);
 }
-static int /*long*/ callback26 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback26 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method26 (args);
 }
-static int /*long*/ callback27 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback27 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method27 (args);
 }
-static int /*long*/ callback28 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback28 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method28 (args);
 }
-static int /*long*/ callback29 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback29 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method29 (args);
 }
-static int /*long*/ callback3 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback3 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method3 (args);
 }
-static int /*long*/ callback30 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback30 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method30 (args);
 }
-static int /*long*/ callback31 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback31 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method31 (args);
 }
-static int /*long*/ callback32 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback32 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method32 (args);
 }
-static int /*long*/ callback33 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback33 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method33 (args);
 }
-static int /*long*/ callback34 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback34 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method34 (args);
 }
-static int /*long*/ callback35 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback35 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method35 (args);
 }
-static int /*long*/ callback36 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback36 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method36 (args);
 }
-static int /*long*/ callback37 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback37 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method37 (args);
 }
-static int /*long*/ callback38 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback38 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method38 (args);
 }
-static int /*long*/ callback39 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback39 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method39 (args);
 }
-static int /*long*/ callback4 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback4 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method4 (args);
 }
-static int /*long*/ callback40 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback40 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method40 (args);
 }
-static int /*long*/ callback41 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback41 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method41 (args);
 }
-static int /*long*/ callback42 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback42 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method42 (args);
 }
-static int /*long*/ callback43 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback43 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method43 (args);
 }
-static int /*long*/ callback44 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback44 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method44 (args);
 }
-static int /*long*/ callback45 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback45 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method45 (args);
 }
-static int /*long*/ callback46 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback46 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method46 (args);
 }
-static int /*long*/ callback47 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback47 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method47 (args);
 }
-static int /*long*/ callback48 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback48 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method48 (args);
 }
-static int /*long*/ callback49 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback49 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method49 (args);
 }
-static int /*long*/ callback5 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback5 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method5 (args);
 }
-static int /*long*/ callback50 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback50 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method50 (args);
 }
-static int /*long*/ callback51 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback51 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method51 (args);
 }
-static int /*long*/ callback52 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback52 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method52 (args);
 }
-static int /*long*/ callback53 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback53 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method53 (args);
 }
-static int /*long*/ callback54 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback54 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method54 (args);
 }
-static int /*long*/ callback55 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback55 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method55 (args);
 }
-static int /*long*/ callback56 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback56 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method56 (args);
 }
-static int /*long*/ callback57 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback57 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method57 (args);
 }
-static int /*long*/ callback58 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback58 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method58 (args);
 }
-static int /*long*/ callback59 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback59 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method59 (args);
 }
-static int /*long*/ callback6 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback6 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method6 (args);
 }
-static int /*long*/ callback60 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback60 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method60 (args);
 }
-static int /*long*/ callback61 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback61 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method61 (args);
 }
-static int /*long*/ callback62 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback62 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method62 (args);
 }
-static int /*long*/ callback63 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback63 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method63 (args);
 }
-static int /*long*/ callback64 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback64 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method64 (args);
 }
-static int /*long*/ callback65 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback65 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method65 (args);
 }
-static int /*long*/ callback66 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback66 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method66 (args);
 }
-static int /*long*/ callback67 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback67 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method67 (args);
 }
-static int /*long*/ callback68 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback68 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method68 (args);
 }
-static int /*long*/ callback69 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback69 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method69 (args);
 }
-static int /*long*/ callback7 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback7 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method7 (args);
 }
-static int /*long*/ callback70 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback70 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method70 (args);
 }
-static int /*long*/ callback71 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback71 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method71 (args);
 }
-static int /*long*/ callback72 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback72 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method72 (args);
 }
-static int /*long*/ callback73 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback73 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method73 (args);
 }
-static int /*long*/ callback74 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback74 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method74 (args);
 }
-static int /*long*/ callback75 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback75 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method75 (args);
 }
-static int /*long*/ callback76 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback76 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method76 (args);
 }
-static int /*long*/ callback77 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback77 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method77 (args);
 }
-static int /*long*/ callback78 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback78 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method78 (args);
 }
-static int /*long*/ callback79 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback79 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method79 (args);
 }
-static int /*long*/ callback8 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback8 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method8 (args);
 }
-static int /*long*/ callback9 (int /*long*/[] callbackArgs) {
+static long /*int*/ callback9 (long /*int*/[] callbackArgs) {
 	// find the object on which this call was invoked
-	int /*long*/ address = callbackArgs[0];
+	long /*int*/ address = callbackArgs[0];
 	Object object = ObjectMap.get (new LONG (address));
 	if (object == null) return XPCOM.NS_ERROR_FAILURE;
-	int /*long*/[] args = new int /*long*/[callbackArgs.length - 1];
+	long /*int*/[] args = new long /*int*/[callbackArgs.length - 1];
 	System.arraycopy (callbackArgs, 1, args, 0, args.length);
 	return ((XPCOMObject) object).method9 (args);
 }
 
 public void dispose() {
 	// free the memory for this reference
-	int /*long*/[] pVtable = new int /*long*/[1];
+	long /*int*/[] pVtable = new long /*int*/[1];
 	XPCOM.memmove (pVtable, ppVtable, C.PTR_SIZEOF);
 	C.free (pVtable[0]);
 	C.free (ppVtable);	
@@ -776,248 +776,248 @@
 	ppVtable = 0;
 }
 	
-public int /*long*/ getAddress () {
+public long /*int*/ getAddress () {
 	return ppVtable;
 }
 
-public int /*long*/ method0 (int /*long*/[] args) {
+public long /*int*/ method0 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method1 (int /*long*/[] args) {
+public long /*int*/ method1 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method10 (int /*long*/[] args) {
+public long /*int*/ method10 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method11 (int /*long*/[] args) {
+public long /*int*/ method11 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method12 (int /*long*/[] args) {
+public long /*int*/ method12 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method13 (int /*long*/[] args) {
+public long /*int*/ method13 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method14 (int /*long*/[] args) {
+public long /*int*/ method14 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method15 (int /*long*/[] args) {
+public long /*int*/ method15 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method16 (int /*long*/[] args) {
+public long /*int*/ method16 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method17 (int /*long*/[] args) {
+public long /*int*/ method17 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method18 (int /*long*/[] args) {
+public long /*int*/ method18 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method19 (int /*long*/[] args) {
+public long /*int*/ method19 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method2 (int /*long*/[] args) {
+public long /*int*/ method2 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method20 (int /*long*/[] args) {
+public long /*int*/ method20 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method21 (int /*long*/[] args) {
+public long /*int*/ method21 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method22 (int /*long*/[] args) {
+public long /*int*/ method22 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method23 (int /*long*/[] args) {
+public long /*int*/ method23 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method24 (int /*long*/[] args) {
+public long /*int*/ method24 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method25 (int /*long*/[] args) {
+public long /*int*/ method25 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method26 (int /*long*/[] args) {
+public long /*int*/ method26 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method27 (int /*long*/[] args) {
+public long /*int*/ method27 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method28 (int /*long*/[] args) {
+public long /*int*/ method28 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method29 (int /*long*/[] args) {
+public long /*int*/ method29 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method3 (int /*long*/[] args) {
+public long /*int*/ method3 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method30 (int /*long*/[] args) {
+public long /*int*/ method30 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method31 (int /*long*/[] args) {
+public long /*int*/ method31 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method32 (int /*long*/[] args) {
+public long /*int*/ method32 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method33 (int /*long*/[] args) {
+public long /*int*/ method33 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method34 (int /*long*/[] args) {
+public long /*int*/ method34 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method35 (int /*long*/[] args) {
+public long /*int*/ method35 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method36 (int /*long*/[] args) {
+public long /*int*/ method36 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method37 (int /*long*/[] args) {
+public long /*int*/ method37 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method38 (int /*long*/[] args) {
+public long /*int*/ method38 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method39 (int /*long*/[] args) {
+public long /*int*/ method39 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method4 (int /*long*/[] args) {
+public long /*int*/ method4 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method40 (int /*long*/[] args) {
+public long /*int*/ method40 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method41 (int /*long*/[] args) {
+public long /*int*/ method41 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method42 (int /*long*/[] args) {
+public long /*int*/ method42 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method43 (int /*long*/[] args) {
+public long /*int*/ method43 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method44 (int /*long*/[] args) {
+public long /*int*/ method44 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method45 (int /*long*/[] args) {
+public long /*int*/ method45 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method46 (int /*long*/[] args) {
+public long /*int*/ method46 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method47 (int /*long*/[] args) {
+public long /*int*/ method47 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method48 (int /*long*/[] args) {
+public long /*int*/ method48 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method49 (int /*long*/[] args) {
+public long /*int*/ method49 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method5 (int /*long*/[] args) {
+public long /*int*/ method5 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method50 (int /*long*/[] args) {
+public long /*int*/ method50 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method51 (int /*long*/[] args) {
+public long /*int*/ method51 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method52 (int /*long*/[] args) {
+public long /*int*/ method52 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method53 (int /*long*/[] args) {
+public long /*int*/ method53 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method54 (int /*long*/[] args) {
+public long /*int*/ method54 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method55 (int /*long*/[] args) {
+public long /*int*/ method55 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method56 (int /*long*/[] args) {
+public long /*int*/ method56 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method57 (int /*long*/[] args) {
+public long /*int*/ method57 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method58 (int /*long*/[] args) {
+public long /*int*/ method58 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method59 (int /*long*/[] args) {
+public long /*int*/ method59 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method6 (int /*long*/[] args) {
+public long /*int*/ method6 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method60 (int /*long*/[] args) {
+public long /*int*/ method60 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method61 (int /*long*/[] args) {
+public long /*int*/ method61 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method62 (int /*long*/[] args) {
+public long /*int*/ method62 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method63 (int /*long*/[] args) {
+public long /*int*/ method63 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method64 (int /*long*/[] args) {
+public long /*int*/ method64 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method65 (int /*long*/[] args) {
+public long /*int*/ method65 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method66 (int /*long*/[] args) {
+public long /*int*/ method66 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method67 (int /*long*/[] args) {
+public long /*int*/ method67 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method68 (int /*long*/[] args) {
+public long /*int*/ method68 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method69 (int /*long*/[] args) {
+public long /*int*/ method69 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method7 (int /*long*/[] args) {
+public long /*int*/ method7 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method70 (int /*long*/[] args) {
+public long /*int*/ method70 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method71 (int /*long*/[] args) {
+public long /*int*/ method71 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method72 (int /*long*/[] args) {
+public long /*int*/ method72 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method73 (int /*long*/[] args) {
+public long /*int*/ method73 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method74 (int /*long*/[] args) {
+public long /*int*/ method74 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method75 (int /*long*/[] args) {
+public long /*int*/ method75 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method76 (int /*long*/[] args) {
+public long /*int*/ method76 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method77 (int /*long*/[] args) {
+public long /*int*/ method77 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method78 (int /*long*/[] args) {
+public long /*int*/ method78 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method79 (int /*long*/[] args) {
+public long /*int*/ method79 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method8 (int /*long*/[] args) {
+public long /*int*/ method8 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
-public int /*long*/ method9 (int /*long*/[] args) {
+public long /*int*/ method9 (long /*int*/[] args) {
 	return XPCOM.NS_ERROR_NOT_IMPLEMENTED;
 }
 }
diff -ur x86/org/eclipse/swt/internal/opengl/glx/GLX.java x86_64/org/eclipse/swt/internal/opengl/glx/GLX.java
--- x86/org/eclipse/swt/internal/opengl/glx/GLX.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/opengl/glx/GLX.java	2009-02-11 17:43:48.000000000 -0500
@@ -220,8 +220,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXChooseVisual(int /*long*/ dpy, int screen, int[] attribList);
-public static final int /*long*/ glXChooseVisual(int /*long*/ dpy, int screen, int[] attribList) {
+public static final native long /*int*/ _glXChooseVisual(long /*int*/ dpy, int screen, int[] attribList);
+public static final long /*int*/ glXChooseVisual(long /*int*/ dpy, int screen, int[] attribList) {
 	lock.lock();
 	try {
 		return _glXChooseVisual(dpy, screen, attribList);
@@ -229,8 +229,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _glXCopyContext(int /*long*/ dpy, int /*long*/ src, int /*long*/ dst, int mask);
-public static final void glXCopyContext(int /*long*/ dpy, int /*long*/ src, int /*long*/ dst, int mask) {
+public static final native void _glXCopyContext(long /*int*/ dpy, long /*int*/ src, long /*int*/ dst, int mask);
+public static final void glXCopyContext(long /*int*/ dpy, long /*int*/ src, long /*int*/ dst, int mask) {
 	lock.lock();
 	try {
 		_glXCopyContext(dpy, src, dst, mask);
@@ -238,8 +238,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXCreateContext(int /*long*/ dpy, XVisualInfo vis, int /*long*/ shareList, boolean direct);
-public static final int /*long*/ glXCreateContext(int /*long*/ dpy, XVisualInfo vis, int /*long*/ shareList, boolean direct) {
+public static final native long /*int*/ _glXCreateContext(long /*int*/ dpy, XVisualInfo vis, long /*int*/ shareList, boolean direct);
+public static final long /*int*/ glXCreateContext(long /*int*/ dpy, XVisualInfo vis, long /*int*/ shareList, boolean direct) {
 	lock.lock();
 	try {
 		return _glXCreateContext(dpy, vis, shareList, direct);
@@ -247,8 +247,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXCreateGLXPixmap(int /*long*/ dpy, XVisualInfo vis, int /*long*/ pixmap);
-public static final int /*long*/ glXCreateGLXPixmap(int /*long*/ dpy, XVisualInfo vis, int /*long*/ pixmap) {
+public static final native long /*int*/ _glXCreateGLXPixmap(long /*int*/ dpy, XVisualInfo vis, long /*int*/ pixmap);
+public static final long /*int*/ glXCreateGLXPixmap(long /*int*/ dpy, XVisualInfo vis, long /*int*/ pixmap) {
 	lock.lock();
 	try {
 		return _glXCreateGLXPixmap(dpy, vis, pixmap);
@@ -256,8 +256,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _glXDestroyContext(int /*long*/ dpy, int /*long*/ ctx);
-public static final void glXDestroyContext(int /*long*/ dpy, int /*long*/ ctx) {
+public static final native void _glXDestroyContext(long /*int*/ dpy, long /*int*/ ctx);
+public static final void glXDestroyContext(long /*int*/ dpy, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		_glXDestroyContext(dpy, ctx);
@@ -265,8 +265,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _glXDestroyGLXPixmap(int /*long*/ dpy, int /*long*/ pix);
-public static final void glXDestroyGLXPixmap(int /*long*/ dpy, int /*long*/ pix) {
+public static final native void _glXDestroyGLXPixmap(long /*int*/ dpy, long /*int*/ pix);
+public static final void glXDestroyGLXPixmap(long /*int*/ dpy, long /*int*/ pix) {
 	lock.lock();
 	try {
 		_glXDestroyGLXPixmap(dpy, pix);
@@ -274,8 +274,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXGetClientString(int /*long*/ dpy, int name);
-public static final int /*long*/ glXGetClientString(int /*long*/ dpy, int name) {
+public static final native long /*int*/ _glXGetClientString(long /*int*/ dpy, int name);
+public static final long /*int*/ glXGetClientString(long /*int*/ dpy, int name) {
 	lock.lock();
 	try {
 		return _glXGetClientString(dpy, name);
@@ -283,8 +283,8 @@
 		lock.unlock();
 	}
 }
-public static final native int _glXGetConfig(int /*long*/ dpy, XVisualInfo vis, int attrib, int[] value);
-public static final int glXGetConfig(int /*long*/ dpy, XVisualInfo vis, int attrib, int[] value) {
+public static final native int _glXGetConfig(long /*int*/ dpy, XVisualInfo vis, int attrib, int[] value);
+public static final int glXGetConfig(long /*int*/ dpy, XVisualInfo vis, int attrib, int[] value) {
 	lock.lock();
 	try {
 		return _glXGetConfig(dpy, vis, attrib, value);
@@ -292,8 +292,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXGetCurrentContext();
-public static final int /*long*/ glXGetCurrentContext() {
+public static final native long /*int*/ _glXGetCurrentContext();
+public static final long /*int*/ glXGetCurrentContext() {
 	lock.lock();
 	try {
 		return _glXGetCurrentContext();
@@ -301,8 +301,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXGetCurrentDrawable();
-public static final int /*long*/ glXGetCurrentDrawable() {
+public static final native long /*int*/ _glXGetCurrentDrawable();
+public static final long /*int*/ glXGetCurrentDrawable() {
 	lock.lock();
 	try {
 		return _glXGetCurrentDrawable();
@@ -310,8 +310,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _glXIsDirect(int /*long*/ dpy, int /*long*/ ctx);
-public static final boolean glXIsDirect(int /*long*/ dpy, int /*long*/ ctx) {
+public static final native boolean _glXIsDirect(long /*int*/ dpy, long /*int*/ ctx);
+public static final boolean glXIsDirect(long /*int*/ dpy, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		return _glXIsDirect(dpy, ctx);
@@ -319,8 +319,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _glXMakeCurrent(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ ctx);
-public static final boolean glXMakeCurrent(int /*long*/ dpy, int /*long*/ drawable, int /*long*/ ctx) {
+public static final native boolean _glXMakeCurrent(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ ctx);
+public static final boolean glXMakeCurrent(long /*int*/ dpy, long /*int*/ drawable, long /*int*/ ctx) {
 	lock.lock();
 	try {
 		return _glXMakeCurrent(dpy, drawable, ctx);
@@ -328,8 +328,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _glXQueryExtension(int /*long*/ dpy, int[] errorBase, int[] eventBase);
-public static final boolean glXQueryExtension(int /*long*/ dpy, int[] errorBase, int[] eventBase) {
+public static final native boolean _glXQueryExtension(long /*int*/ dpy, int[] errorBase, int[] eventBase);
+public static final boolean glXQueryExtension(long /*int*/ dpy, int[] errorBase, int[] eventBase) {
 	lock.lock();
 	try {
 		return _glXQueryExtension(dpy, errorBase, eventBase);
@@ -337,8 +337,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXQueryExtensionsString(int /*long*/ dpy, int screen);
-public static final int /*long*/ glXQueryExtensionsString(int /*long*/ dpy, int screen) {
+public static final native long /*int*/ _glXQueryExtensionsString(long /*int*/ dpy, int screen);
+public static final long /*int*/ glXQueryExtensionsString(long /*int*/ dpy, int screen) {
 	lock.lock();
 	try {
 		return _glXQueryExtensionsString(dpy, screen);
@@ -346,8 +346,8 @@
 		lock.unlock();
 	}
 }
-public static final native int /*long*/ _glXQueryServerString(int /*long*/ dpy, int screen, int name);
-public static final int /*long*/ glXQueryServerString(int /*long*/ dpy, int screen, int name) {
+public static final native long /*int*/ _glXQueryServerString(long /*int*/ dpy, int screen, int name);
+public static final long /*int*/ glXQueryServerString(long /*int*/ dpy, int screen, int name) {
 	lock.lock();
 	try {
 		return _glXQueryServerString(dpy, screen, name);
@@ -355,8 +355,8 @@
 		lock.unlock();
 	}
 }
-public static final native boolean _glXQueryVersion(int /*long*/ dpy, int[] major, int[] minor);
-public static final boolean glXQueryVersion(int /*long*/ dpy, int[] major, int[] minor) {
+public static final native boolean _glXQueryVersion(long /*int*/ dpy, int[] major, int[] minor);
+public static final boolean glXQueryVersion(long /*int*/ dpy, int[] major, int[] minor) {
 	lock.lock();
 	try {
 		return _glXQueryVersion(dpy, major, minor);
@@ -364,8 +364,8 @@
 		lock.unlock();
 	}
 }
-public static final native void _glXSwapBuffers(int /*long*/ dpy, int /*long*/ drawable);
-public static final void glXSwapBuffers(int /*long*/ dpy, int /*long*/ drawable) {
+public static final native void _glXSwapBuffers(long /*int*/ dpy, long /*int*/ drawable);
+public static final void glXSwapBuffers(long /*int*/ dpy, long /*int*/ drawable) {
 	lock.lock();
 	try {
 		_glXSwapBuffers(dpy, drawable);
@@ -391,5 +391,5 @@
 		lock.unlock();
 	}
 }
-public static final native void memmove(XVisualInfo dest, int /*long*/ src, int size);
+public static final native void memmove(XVisualInfo dest, long /*int*/ src, int size);
 }
diff -ur x86/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java x86_64/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java
--- x86/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/opengl/glx/XVisualInfo.java	2009-02-11 17:43:48.000000000 -0500
@@ -11,7 +11,7 @@
 package org.eclipse.swt.internal.opengl.glx;
 
 public class XVisualInfo {
-	public int /*long*/ visual;
+	public long /*int*/ visual;
 	public int visualid;
 	public int screen;
 	public int depth;
diff -ur x86/org/eclipse/swt/internal/theme/ButtonDrawData.java x86_64/org/eclipse/swt/internal/theme/ButtonDrawData.java
--- x86/org/eclipse/swt/internal/theme/ButtonDrawData.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ButtonDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -25,10 +25,10 @@
 void draw(Theme theme, GC gc, Rectangle bounds) {
 	int state = this.state[DrawData.WIDGET_WHOLE];
 
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 	if ((style & SWT.RADIO) != 0) {
-		int /*long*/ radioButtonHandle = theme.radioButtonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (radioButtonHandle);
+		long /*int*/ radioButtonHandle = theme.radioButtonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (radioButtonHandle);
 		theme.transferClipping (gc, gtkStyle);
 		int indicator_size = theme.getWidgetProperty(radioButtonHandle, "indicator-size");
 		int indicator_spacing = theme.getWidgetProperty(radioButtonHandle, "indicator-spacing");
@@ -74,8 +74,8 @@
 	}
 	
 	if ((style & SWT.CHECK) != 0) {
-		int /*long*/ checkButtonHandle = theme.checkButtonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (checkButtonHandle);
+		long /*int*/ checkButtonHandle = theme.checkButtonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (checkButtonHandle);
 		theme.transferClipping (gc, gtkStyle);
 		int indicator_size = theme.getWidgetProperty(checkButtonHandle, "indicator-size");
 		int indicator_spacing = theme.getWidgetProperty(checkButtonHandle, "indicator-spacing");
@@ -122,8 +122,8 @@
 	
 
 	if ((style & SWT.PUSH) != 0) {
-		int /*long*/ buttonHandle = theme.buttonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+		long /*int*/ buttonHandle = theme.buttonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 		theme.transferClipping (gc, gtkStyle);		
 		int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 		int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
diff -ur x86/org/eclipse/swt/internal/theme/ComboDrawData.java x86_64/org/eclipse/swt/internal/theme/ComboDrawData.java
--- x86/org/eclipse/swt/internal/theme/ComboDrawData.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ComboDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -24,9 +24,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	
 	int x = bounds.x;
@@ -61,10 +61,10 @@
 		OS.gtk_paint_box(gtkStyle, drawable, state_type, shadow_type, null, buttonHandle, detail, arrow_button_x, y, arrow_button_width, height);
 	}		
 	byte[] arrow_detail = Converter.wcsToMbcs(null, "arrow", true);
-	int /*long*/ arrowHandle = theme.arrowHandle;
+	long /*int*/ arrowHandle = theme.arrowHandle;
 	OS.gtk_paint_arrow(gtkStyle, drawable, state_type, OS.GTK_SHADOW_OUT, null, arrowHandle, arrow_detail, OS.GTK_ARROW_DOWN, true, arrow_x, arrow_y, arrow_width, arrow_height);
 	
-	int /*long*/ entryHandle = theme.entryHandle;
+	long /*int*/ entryHandle = theme.entryHandle;
 	gtkStyle = OS.gtk_widget_get_style(entryHandle);
 	theme.transferClipping(gc, gtkStyle);
 	state_type = getStateType(DrawData.WIDGET_WHOLE);
@@ -100,8 +100,8 @@
 
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
 	int interior_focus = theme.getWidgetProperty(buttonHandle, "interior-focus");
 	int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
diff -ur x86/org/eclipse/swt/internal/theme/DrawData.java x86_64/org/eclipse/swt/internal/theme/DrawData.java
--- x86/org/eclipse/swt/internal/theme/DrawData.java	2009-06-24 21:13:54.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/DrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -79,21 +79,21 @@
 }
 
 void drawImage(Theme theme, Image image, GC gc, Rectangle bounds) {
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 	Rectangle rect = image.getBounds();
 	int state_type = getStateType(DrawData.WIDGET_WHOLE);
 	if (state_type == OS.GTK_STATE_NORMAL) {
 		gc.drawImage(image, 0, 0, rect.width, rect.height, bounds.x, bounds.y, bounds.width, bounds.height);
 	} else {
-		int /*long*/ pixbuf = Theme.createPixbuf(image);
-		int /*long*/ source = OS.gtk_icon_source_new();
+		long /*int*/ pixbuf = Theme.createPixbuf(image);
+		long /*int*/ source = OS.gtk_icon_source_new();
 		if (source != 0) {
 			OS.gtk_icon_source_set_pixbuf(source, pixbuf);
 			//TODO - always uses buttonHandle
-			int /*long*/ buttonHandle = theme.buttonHandle;
-			int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+			long /*int*/ buttonHandle = theme.buttonHandle;
+			long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 			theme.transferClipping(gc, gtkStyle);
-			int /*long*/ rendered = OS.gtk_style_render_icon(gtkStyle, source, OS.GTK_TEXT_DIR_NONE, state_type, -1, buttonHandle, null);
+			long /*int*/ rendered = OS.gtk_style_render_icon(gtkStyle, source, OS.GTK_TEXT_DIR_NONE, state_type, -1, buttonHandle, null);
 			OS.g_object_unref(pixbuf);
 			//TODO - stretching
 			if (rendered != 0) {
@@ -106,12 +106,12 @@
 }
 
 void drawText(Theme theme, String text, int flags, GC gc, Rectangle bounds) {
-	int /*long*/ widget = getTextHandle(theme);
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(widget);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ widget = getTextHandle(theme);
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(widget);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping (gc, gtkStyle);
 	byte[] buffer = Converter.wcsToMbcs(null, text, true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
 	int[] width = new int[1], height = new int[1];
 	OS.pango_layout_get_size(layout, width, height);
 	OS.pango_layout_set_width(layout, bounds.width * OS.PANGO_SCALE);
@@ -160,7 +160,7 @@
 	return state_type;
 }
 
-int /*long*/ getTextHandle(Theme theme) {
+long /*int*/ getTextHandle(Theme theme) {
 	return theme.labelHandle;
 }
 
@@ -169,9 +169,9 @@
 }
 
 Rectangle measureText(Theme theme, String text, int flags, GC gc, Rectangle bounds) {
-	int /*long*/ widget = getTextHandle(theme);
+	long /*int*/ widget = getTextHandle(theme);
 	byte[] buffer = Converter.wcsToMbcs(null, text, true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout(widget, buffer);
 	if (bounds != null) OS.pango_layout_set_width(layout, bounds.width);
 	if ((flags & DrawData.DRAW_LEFT) != 0) {
 		OS.pango_layout_set_alignment(layout, OS.PANGO_ALIGN_LEFT);
diff -ur x86/org/eclipse/swt/internal/theme/ExpanderDrawData.java x86_64/org/eclipse/swt/internal/theme/ExpanderDrawData.java
--- x86/org/eclipse/swt/internal/theme/ExpanderDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ExpanderDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -22,9 +22,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ treeHandle = theme.treeHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (treeHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ treeHandle = theme.treeHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (treeHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int state_type = getStateType(DrawData.WIDGET_WHOLE);
 	int expander_style = OS.GTK_EXPANDER_COLAPSED;
@@ -38,7 +38,7 @@
 
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
-	int /*long*/ treeHandle = theme.treeHandle;
+	long /*int*/ treeHandle = theme.treeHandle;
 	int expander_size = theme.getWidgetProperty(treeHandle, "expander-size");
 	if (new Rectangle(bounds.x, bounds.y, expander_size, expander_size).contains(position)) {
 		return DrawData.WIDGET_WHOLE;
diff -ur x86/org/eclipse/swt/internal/theme/GroupDrawData.java x86_64/org/eclipse/swt/internal/theme/GroupDrawData.java
--- x86/org/eclipse/swt/internal/theme/GroupDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/GroupDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -29,9 +29,9 @@
 static final int GROUP_HEADER_X = 9;
 static final int GROUP_HEADER_PAD = 2;
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ frameHandle = theme.frameHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (frameHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ frameHandle = theme.frameHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (frameHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
 	int ythickness = OS.gtk_style_get_ythickness(gtkStyle);
diff -ur x86/org/eclipse/swt/internal/theme/ProgressBarDrawData.java x86_64/org/eclipse/swt/internal/theme/ProgressBarDrawData.java
--- x86/org/eclipse/swt/internal/theme/ProgressBarDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ProgressBarDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -22,9 +22,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ progressHandle = theme.progressHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (progressHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ progressHandle = theme.progressHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (progressHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	byte[] detail = Converter.wcsToMbcs(null, "trough", true);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
diff -ur x86/org/eclipse/swt/internal/theme/TabFolderDrawData.java x86_64/org/eclipse/swt/internal/theme/TabFolderDrawData.java
--- x86/org/eclipse/swt/internal/theme/TabFolderDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/TabFolderDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -31,9 +31,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	height -= tabsHeight;
diff -ur x86/org/eclipse/swt/internal/theme/TabItemDrawData.java x86_64/org/eclipse/swt/internal/theme/TabItemDrawData.java
--- x86/org/eclipse/swt/internal/theme/TabItemDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/TabItemDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -27,8 +27,8 @@
 }
 
 Rectangle computeTrim(Theme theme, GC gc) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(notebookHandle);
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(notebookHandle);
 	int hborder, vborder;
 	if (OS.GTK_VERSION >= OS.VERSION(2, 4, 0)) {
 		hborder = theme.getWidgetProperty(notebookHandle, "tab-hborder");
@@ -50,9 +50,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ notebookHandle = theme.notebookHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ notebookHandle = theme.notebookHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (notebookHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	if ((state[DrawData.WIDGET_WHOLE] & DrawData.SELECTED) == 0) {
diff -ur x86/org/eclipse/swt/internal/theme/Theme.java x86_64/org/eclipse/swt/internal/theme/Theme.java
--- x86/org/eclipse/swt/internal/theme/Theme.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/Theme.java	2009-02-11 17:43:48.000000000 -0500
@@ -18,7 +18,7 @@
 public class Theme {
 	Device device;
 	
-	int /*long*/ shellHandle, fixedHandle, buttonHandle, arrowHandle,
+	long /*int*/ shellHandle, fixedHandle, buttonHandle, arrowHandle,
 		frameHandle, entryHandle, checkButtonHandle, radioButtonHandle, 
 		notebookHandle, treeHandle, progressHandle, toolbarHandle,
 		labelHandle, separatorHandle;
@@ -68,29 +68,29 @@
 }
 
 //TODO - share this code 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -109,10 +109,10 @@
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
@@ -218,18 +218,18 @@
 	return data.measureText(this, text, flags, gc, bounds);
 }
 
-int getWidgetProperty(int /*long*/ handle, String name) {
+int getWidgetProperty(long /*int*/ handle, String name) {
 	byte[] propertyName = Converter.wcsToMbcs(null, name, true);
 	int[] result = new int[1];
 	OS.gtk_widget_style_get(handle, propertyName, result, 0);
 	return result[0];
 }
 
-void transferClipping(GC gc, int /*long*/ style) {
+void transferClipping(GC gc, long /*int*/ style) {
 	GCData data = gc.getGCData();
-	int /*long*/ clipRgn = data.clipRgn;
-	int /*long*/ damageRgn = data.damageRgn;
-	int /*long*/ clipping = clipRgn;
+	long /*int*/ clipRgn = data.clipRgn;
+	long /*int*/ damageRgn = data.damageRgn;
+	long /*int*/ clipping = clipRgn;
 	if (damageRgn != 0) {
 		if (clipping != 0) {
 			clipping = OS.gdk_region_new();
@@ -239,7 +239,7 @@
 			clipping = damageRgn;
 		}
 	}
-	int /*long*/ [] curGC = new int /*long*/ [1];
+	long /*int*/ [] curGC = new long /*int*/ [1];
 	for (int i = 0; i < 5; i++) {
 		OS.gtk_style_get_fg_gc (style, i, curGC);
 		if (curGC[0] != 0) OS.gdk_gc_set_clip_region (curGC[0], clipping);
diff -ur x86/org/eclipse/swt/internal/theme/ToolBarDrawData.java x86_64/org/eclipse/swt/internal/theme/ToolBarDrawData.java
--- x86/org/eclipse/swt/internal/theme/ToolBarDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ToolBarDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -21,9 +21,9 @@
 }
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
-	int /*long*/ toolbarHandle = theme.toolbarHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (toolbarHandle);
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ toolbarHandle = theme.toolbarHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (toolbarHandle);
+	long /*int*/ drawable = gc.getGCData().drawable;
 	theme.transferClipping(gc, gtkStyle);
 	int x = bounds.x, y = bounds.y, width = bounds.width, height = bounds.height;
 	byte[] detail = Converter.wcsToMbcs(null, "toolbar", true);
diff -ur x86/org/eclipse/swt/internal/theme/ToolItemDrawData.java x86_64/org/eclipse/swt/internal/theme/ToolItemDrawData.java
--- x86/org/eclipse/swt/internal/theme/ToolItemDrawData.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/internal/theme/ToolItemDrawData.java	2009-02-11 17:43:48.000000000 -0500
@@ -27,8 +27,8 @@
 }
 
 Rectangle computeTrim(Theme theme, GC gc) {
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style(buttonHandle);
 	int focus_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
 	int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
@@ -47,13 +47,13 @@
 
 void draw(Theme theme, GC gc, Rectangle bounds) {
 	int state = this.state[DrawData.WIDGET_WHOLE];
-	int /*long*/ drawable = gc.getGCData().drawable;
+	long /*int*/ drawable = gc.getGCData().drawable;
 
 	if ((style & SWT.SEPARATOR) != 0) {
 		int state_type = getStateType(DrawData.WIDGET_WHOLE);
-		int /*long*/ separatorHandle = theme.separatorHandle;
+		long /*int*/ separatorHandle = theme.separatorHandle;
 		byte[] detail = Converter.wcsToMbcs(null, "vseparator", true);
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (separatorHandle);
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (separatorHandle);
 		theme.transferClipping(gc, gtkStyle);
 		if ((parent.style & SWT.VERTICAL) != 0) {
 			OS.gtk_paint_hline(gtkStyle, drawable, state_type, null, separatorHandle, detail, bounds.x, bounds.x + bounds.width, bounds.y + bounds.height / 2);
@@ -63,8 +63,8 @@
 		return;
 	}
 
-	int /*long*/ buttonHandle = theme.buttonHandle;
-	int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+	long /*int*/ buttonHandle = theme.buttonHandle;
+	long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 	theme.transferClipping (gc, gtkStyle);
 	int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
 	int focus_padding = theme.getWidgetProperty(buttonHandle, "focus-padding");
@@ -83,7 +83,7 @@
 	}
 	
 	int[] relief = new int[1];
-	int /*long*/ toolbarHandle = theme.toolbarHandle;
+	long /*int*/ toolbarHandle = theme.toolbarHandle;
 	OS.gtk_widget_style_get(toolbarHandle, OS.button_relief, relief, 0);
 
 	int shadow_type = OS.GTK_SHADOW_OUT;
@@ -149,8 +149,8 @@
 int hit(Theme theme, Point position, Rectangle bounds) {
 	if (!bounds.contains(position)) return DrawData.WIDGET_NOWHERE;
 	if ((style & SWT.DROP_DOWN) != 0) {
-		int /*long*/ buttonHandle = theme.buttonHandle;
-		int /*long*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
+		long /*int*/ buttonHandle = theme.buttonHandle;
+		long /*int*/ gtkStyle = OS.gtk_widget_get_style (buttonHandle);
 		int xthickness = OS.gtk_style_get_xthickness(gtkStyle);
 		int interior_focus = theme.getWidgetProperty(buttonHandle, "interior-focus");
 		int focus_line_width = theme.getWidgetProperty(buttonHandle, "focus-line-width");
diff -ur x86/org/eclipse/swt/opengl/GLCanvas.java x86_64/org/eclipse/swt/opengl/GLCanvas.java
--- x86/org/eclipse/swt/opengl/GLCanvas.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/opengl/GLCanvas.java	2009-02-11 17:43:48.000000000 -0500
@@ -27,9 +27,9 @@
  */
 
 public class GLCanvas extends Canvas {
-	int /*long*/ context;
-	int /*long*/ xWindow;
-	int /*long*/ glWindow;
+	long /*int*/ context;
+	long /*int*/ xWindow;
+	long /*int*/ glWindow;
 	XVisualInfo vinfo;
 	static final int MAX_ATTRIBUTES = 32;
 
@@ -104,9 +104,9 @@
 	}
 	glxAttrib [pos++] = 0;
 	OS.gtk_widget_realize (handle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-	int /*long*/ infoPtr = GLX.glXChooseVisual (xDisplay, OS.XDefaultScreen (xDisplay), glxAttrib);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ infoPtr = GLX.glXChooseVisual (xDisplay, OS.XDefaultScreen (xDisplay), glxAttrib);
 	if (infoPtr == 0) {
 		dispose ();
 		SWT.error (SWT.ERROR_UNSUPPORTED_DEPTH);
@@ -114,8 +114,8 @@
 	vinfo = new XVisualInfo ();
 	GLX.memmove (vinfo, infoPtr, XVisualInfo.sizeof);
 	OS.XFree (infoPtr);
-	int /*long*/ screen = OS.gdk_screen_get_default ();
-	int /*long*/ gdkvisual = OS.gdk_x11_screen_lookup_visual (screen, vinfo.visualid);
+	long /*int*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ gdkvisual = OS.gdk_x11_screen_lookup_visual (screen, vinfo.visualid);
 	//FIXME- share lists
 	//context = GLX.glXCreateContext (xDisplay, info, share == null ? 0 : share.context, true);
 	context = GLX.glXCreateContext (xDisplay, vinfo, 0, true);
@@ -157,8 +157,8 @@
 				OS.gdk_window_resize (glWindow, clientArea.width, clientArea.height);
 				break;
 			case SWT.Dispose:
-				int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-				int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+				long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+				long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 				if (context != 0) {
 					if (GLX.glXGetCurrentContext () == context) {
 						GLX.glXMakeCurrent (xDisplay, 0, 0);
@@ -190,8 +190,8 @@
  */
 public GLData getGLData () {
 	checkWidget ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLData data = new GLData ();
 	int [] value = new int [1];
 	GLX.glXGetConfig (xDisplay, vinfo, GLX.GLX_DOUBLEBUFFER, value);
@@ -253,8 +253,8 @@
 public void setCurrent () {
 	checkWidget ();
 	if (GLX.glXGetCurrentContext () == context) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLX.glXMakeCurrent (xDisplay, xWindow, context);
 }
 
@@ -268,8 +268,8 @@
  */
 public void swapBuffers () {
 	checkWidget ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
 	GLX.glXSwapBuffers (xDisplay, xWindow);
 }
 }
diff -ur x86/org/eclipse/swt/printing/PrintDialog.java x86_64/org/eclipse/swt/printing/PrintDialog.java
--- x86/org/eclipse/swt/printing/PrintDialog.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/printing/PrintDialog.java	2009-02-11 17:43:48.000000000 -0500
@@ -36,7 +36,7 @@
 	int startPage = 1, endPage = 1;
 	boolean printToFile = false;
 
-	int /*long*/ handle;
+	long /*int*/ handle;
 	int index;
 	byte [] settingsData;
 	
@@ -279,7 +279,7 @@
 		return Printer.getDefaultPrinterData();
 	} else {
 		byte [] titleBytes = Converter.wcsToMbcs (null, getText(), true);
-		int /*long*/ topHandle = getParent().handle;
+		long /*int*/ topHandle = getParent().handle;
 		while (topHandle != 0 && !OS.GTK_IS_WINDOW(topHandle)) {
 			topHandle = OS.gtk_widget_get_parent(topHandle);
 		}
@@ -292,8 +292,8 @@
 			OS.GTK_PRINT_CAPABILITY_COLLATE | OS.GTK_PRINT_CAPABILITY_COPIES | OS.GTK_PRINT_CAPABILITY_PAGE_SET);
 		
 		/* Set state into print dialog settings. */
-		int /*long*/ settings = OS.gtk_print_settings_new();
-		int /*long*/ page_setup = OS.gtk_page_setup_new();
+		long /*int*/ settings = OS.gtk_print_settings_new();
+		long /*int*/ page_setup = OS.gtk_page_setup_new();
 		
 		if (printerData != null) {
 			if (printerData.otherData != null) {
@@ -329,7 +329,7 @@
 		Display display = getParent() != null ? getParent().getDisplay (): Display.getCurrent ();
 		
 		int signalId = 0;
-		int /*long*/ hookId = 0;
+		long /*int*/ hookId = 0;
 		if ((getStyle () & SWT.RIGHT_TO_LEFT) != 0) {
 			signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 			hookId = OS.g_signal_add_emission_hook (signalId, 0, ((LONG) display.getData (GET_EMISSION_PROC_KEY)).value, handle, 0);
@@ -348,7 +348,7 @@
 			OS.g_signal_remove_emission_hook (signalId, hookId);
 		}
 		if (response == OS.GTK_RESPONSE_OK) {
-			int /*long*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);
+			long /*int*/ printer = OS.gtk_print_unix_dialog_get_selected_printer(handle);
 			if (printer != 0) {
 				/* Get state from print dialog. */
 				settings = OS.gtk_print_unix_dialog_get_settings(handle); // must unref
@@ -362,7 +362,7 @@
 					case OS.GTK_PRINT_PAGES_RANGES:
 						scope = PrinterData.PAGE_RANGE;
 						int[] num_ranges = new int[1];
-						int /*long*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);
+						long /*int*/ page_ranges = OS.gtk_print_settings_get_page_ranges(settings, num_ranges);
 						int [] pageRange = new int[2];
 						int length = num_ranges[0];
 						int min = Integer.MAX_VALUE, max = 0;
@@ -384,7 +384,7 @@
 				
 				printToFile = data.name.equals("Print to File"); //$NON-NLS-1$
 				if (printToFile) {
-					int /*long*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);
+					long /*int*/ address = OS.gtk_print_settings_get(settings, OS.GTK_PRINT_SETTINGS_OUTPUT_URI);
 					int length = OS.strlen (address);
 					byte [] buffer = new byte [length];
 					OS.memmove (buffer, address, length);
@@ -400,7 +400,7 @@
 
 				/* Save other print_settings data as key/value pairs in otherData. */
 				Callback printSettingsCallback = new Callback(this, "GtkPrintSettingsFunc", 3); //$NON-NLS-1$
-				int /*long*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();
+				long /*int*/ GtkPrintSettingsFunc = printSettingsCallback.getAddress();
 				if (GtkPrintSettingsFunc == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 				index = 0;
 				settingsData = new byte[1024];
@@ -416,7 +416,7 @@
 				store("bottom_margin", OS.gtk_page_setup_get_bottom_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
 				store("left_margin", OS.gtk_page_setup_get_left_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
 				store("right_margin", OS.gtk_page_setup_get_right_margin(page_setup, OS.GTK_UNIT_MM)); //$NON-NLS-1$
-				int /*long*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$
+				long /*int*/ paper_size = OS.gtk_page_setup_get_paper_size(page_setup); //$NON-NLS-1$
 				storeBytes("paper_size_name", OS.gtk_paper_size_get_name(paper_size)); //$NON-NLS-1$
 				storeBytes("paper_size_display_name", OS.gtk_paper_size_get_display_name(paper_size)); //$NON-NLS-1$
 				storeBytes("paper_size_ppd_name", OS.gtk_paper_size_get_ppd_name(paper_size)); //$NON-NLS-1$
@@ -433,7 +433,7 @@
 	}
 }
 
-int /*long*/ GtkPrintSettingsFunc (int /*long*/ key, int /*long*/ value, int /*long*/ data) {
+long /*int*/ GtkPrintSettingsFunc (long /*int*/ key, long /*int*/ value, long /*int*/ data) {
 	int length = OS.strlen (key);
 	byte [] keyBuffer = new byte [length];
 	OS.memmove (keyBuffer, key, length);
@@ -456,7 +456,7 @@
 	store(key, String.valueOf(value));
 }
 
-void storeBytes(String key, int /*long*/ value) {
+void storeBytes(String key, long /*int*/ value) {
 	int length = OS.strlen (value);
 	byte [] valueBuffer = new byte [length];
 	OS.memmove (valueBuffer, value, length);
diff -ur x86/org/eclipse/swt/printing/Printer.java x86_64/org/eclipse/swt/printing/Printer.java
--- x86/org/eclipse/swt/printing/Printer.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/printing/Printer.java	2009-02-11 17:43:48.000000000 -0500
@@ -44,12 +44,12 @@
 	static PrinterData [] printerList;
 	
 	PrinterData data;
-	int /*long*/ printer;
-	int /*long*/ printJob;
-	int /*long*/ settings;
-	int /*long*/ pageSetup;
-	int /*long*/ surface;
-	int /*long*/ cairo;
+	long /*int*/ printer;
+	long /*int*/ printJob;
+	long /*int*/ settings;
+	long /*int*/ pageSetup;
+	long /*int*/ surface;
+	long /*int*/ cairo;
 	
 	/**
 	 * whether or not a GC was created for this printer
@@ -79,18 +79,18 @@
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]");
 	}
 	Callback printerCallback = new Callback(Printer.class, "GtkPrinterFunc_List", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_List = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_List = printerCallback.getAddress();
 	if (GtkPrinterFunc_List == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	OS.gtk_enumerate_printers(GtkPrinterFunc_List, 0, 0, true);
 	printerCallback.dispose ();
 	return printerList;
 }
 
-static int /*long*/ GtkPrinterFunc_List (int /*long*/ printer, int /*long*/ user_data) {
+static long /*int*/ GtkPrinterFunc_List (long /*int*/ printer, long /*int*/ user_data) {
 	int length = printerList.length;
 	PrinterData [] newList = new PrinterData [length + 1];
 	System.arraycopy (printerList, 0, newList, 0, length);
@@ -126,18 +126,18 @@
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]");
 	}
 	Callback printerCallback = new Callback(Printer.class, "GtkPrinterFunc_Default", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_Default = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_Default = printerCallback.getAddress();
 	if (GtkPrinterFunc_Default == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	OS.gtk_enumerate_printers(GtkPrinterFunc_Default, 0, 0, true);
 	printerCallback.dispose ();
 	return printerList[0];
 }
 
-static int /*long*/ GtkPrinterFunc_Default (int /*long*/ printer, int /*long*/ user_data) {
+static long /*int*/ GtkPrinterFunc_Default (long /*int*/ printer, long /*int*/ user_data) {
 	if (OS.gtk_printer_is_default(printer)) {
 		printerList[0] = printerDataFromGtkPrinter(printer);
 		return 1;
@@ -147,9 +147,9 @@
 	return 0;
 }
 
-int /*long*/ gtkPrinterFromPrinterData() {
+long /*int*/ gtkPrinterFromPrinterData() {
 	Callback printerCallback = new Callback(this, "GtkPrinterFunc_FindNamedPrinter", 2); //$NON-NLS-1$
-	int /*long*/ GtkPrinterFunc_FindNamedPrinter = printerCallback.getAddress();
+	long /*int*/ GtkPrinterFunc_FindNamedPrinter = printerCallback.getAddress();
 	if (GtkPrinterFunc_FindNamedPrinter == 0) SWT.error (SWT.ERROR_NO_MORE_CALLBACKS);
 	printer = 0;
 	OS.gtk_enumerate_printers(GtkPrinterFunc_FindNamedPrinter, 0, 0, true);
@@ -157,7 +157,7 @@
 	return printer;
 }
 
-int /*long*/ GtkPrinterFunc_FindNamedPrinter (int /*long*/ printer, int /*long*/ user_data) {
+long /*int*/ GtkPrinterFunc_FindNamedPrinter (long /*int*/ printer, long /*int*/ user_data) {
 	PrinterData pd = printerDataFromGtkPrinter(printer);
 	if (pd.driver.equals(data.driver) && pd.name.equals(data.name)) {
 		this.printer = printer;
@@ -169,9 +169,9 @@
 	return 0;
 }
 
-static PrinterData printerDataFromGtkPrinter(int /*long*/ printer) {
-	int /*long*/ backend = OS.gtk_printer_get_backend(printer);
-	int /*long*/ address = OS.G_OBJECT_TYPE_NAME(backend);
+static PrinterData printerDataFromGtkPrinter(long /*int*/ printer) {
+	long /*int*/ backend = OS.gtk_printer_get_backend(printer);
+	long /*int*/ address = OS.G_OBJECT_TYPE_NAME(backend);
 	int length = OS.strlen (address);
 	byte [] buffer = new byte [length];
 	OS.memmove (buffer, address, length);
@@ -189,7 +189,7 @@
 /* 
 * Restore printer settings and page_setup data from data.
 */
-static void restore(byte [] data, int /*long*/ settings, int /*long*/ page_setup) {
+static void restore(byte [] data, long /*int*/ settings, long /*int*/ page_setup) {
 	settingsData = data;
 	start = end = 0;
 	while (end < settingsData.length && settingsData[end] != 0) {
@@ -222,7 +222,7 @@
 	double width = restoreDouble("paper_size_width"); //$NON-NLS-1$
 	double height = restoreDouble("paper_size_height"); //$NON-NLS-1$
 	boolean custom = restoreBoolean("paper_size_is_custom"); //$NON-NLS-1$
-	int /*long*/ paper_size = 0;
+	long /*int*/ paper_size = 0;
 	if (custom) {
 		if (ppd_name.length > 0) {
 			paper_size = OS.gtk_paper_size_new_from_ppd(ppd_name, display_name, width, height);
@@ -236,7 +236,7 @@
 	OS.gtk_paper_size_free(paper_size);
 }
 
-static void setScope(int /*long*/ settings, int scope, int startPage, int endPage) {
+static void setScope(long /*int*/ settings, int scope, int startPage, int endPage) {
 	switch (scope) {
 	case PrinterData.ALL_PAGES:
 		OS.gtk_print_settings_set_print_pages(settings, OS.GTK_PRINT_PAGES_ALL);
@@ -365,8 +365,8 @@
 public Font getSystemFont () {
 	checkDevice ();
 	if (systemFont != null) return systemFont;
-	int /*long*/ style = OS.gtk_widget_get_default_style();	
-	int /*long*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
+	long /*int*/ style = OS.gtk_widget_get_default_style();	
+	long /*int*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
 	return systemFont = Font.gtk_new (this, defaultFont);
 }
 
@@ -383,9 +383,9 @@
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC(GCData data) {
-	int /*long*/ drawable = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, 1);
-	int /*long*/ gdkGC = OS.gdk_gc_new (drawable);
+public long /*int*/ internal_new_GC(GCData data) {
+	long /*int*/ drawable = OS.gdk_pixmap_new(OS.GDK_ROOT_PARENT(), 1, 1, 1);
+	long /*int*/ gdkGC = OS.gdk_gc_new (drawable);
 	if (gdkGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	if (data != null) {
 		if (isGCCreated) SWT.error(SWT.ERROR_INVALID_ARGUMENT);
@@ -421,7 +421,7 @@
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC(int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC(long /*int*/ gdkGC, GCData data) {
 	if (data != null) isGCCreated = false;
 	OS.g_object_unref (gdkGC);
 	if (data != null) {
diff -ur x86/org/eclipse/swt/program/Program.java x86_64/org/eclipse/swt/program/Program.java
--- x86/org/eclipse/swt/program/Program.java	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/org/eclipse/swt/program/Program.java	2009-02-11 17:43:48.000000000 -0500
@@ -42,7 +42,7 @@
 	 */
 	boolean gnomeExpectUri;
 	
-	static int /*long*/ cdeShell;
+	static long /*int*/ cdeShell;
 
 	static final String[] CDE_ICON_EXT = { ".m.pm",   ".l.pm",   ".s.pm",   ".t.pm" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
 	static final String[] CDE_MASK_EXT = { ".m_m.bm", ".l_m.bm", ".s_m.bm", ".t_m.bm" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$
@@ -70,11 +70,11 @@
 	int desktop = DESKTOP_UNKNOWN;
 
 	/* Get the list of properties on the root window. */
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
-	int /*long*/ rootWindow = OS.XDefaultRootWindow(xDisplay);
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ rootWindow = OS.XDefaultRootWindow(xDisplay);
 	int[] numProp = new int[1];
-	int /*long*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);
-	int /*long*/ [] property = new int /*long*/ [numProp[0]];
+	long /*int*/ propList = OS.XListProperties(xDisplay, rootWindow, numProp);
+	long /*int*/ [] property = new long /*int*/ [numProp[0]];
 	if (propList != 0) {
 		OS.memmove(property, propList, (property.length * OS.PTR_SIZEOF));
 		OS.XFree(propList);
@@ -93,10 +93,10 @@
 	 */
 	if (desktop == DESKTOP_UNKNOWN) {
 		byte[] gnomeName = Converter.wcsToMbcs(null, "_NET_SUPPORTING_WM_CHECK", true);
-		int /*long*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);
+		long /*int*/ gnome = OS.XInternAtom(xDisplay, gnomeName, true);
 		if (gnome != OS.None && (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) && gnome_init()) {
 			desktop = DESKTOP_GNOME;
-			int /*long*/ icon_theme = GNOME.gnome_icon_theme_new();
+			long /*int*/ icon_theme = GNOME.gnome_icon_theme_new();
 			display.setData(ICON_THEME_DATA, new LONG(icon_theme));
 			display.addListener(SWT.Dispose, new Listener() {
 				public void handleEvent(Event event) {
@@ -112,10 +112,10 @@
 			});
 			/* Check for libgnomevfs-2 version 2.4 */
 			byte[] buffer = Converter.wcsToMbcs(null, "libgnomevfs-2.so.0", true);
-			int /*long*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);
+			long /*int*/ libgnomevfs = OS.dlopen(buffer, OS.RTLD_LAZY);
 			if (libgnomevfs != 0) {
 				buffer = Converter.wcsToMbcs(null, "gnome_vfs_url_show", true);
-				int /*long*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);
+				long /*int*/ gnome_vfs_url_show = OS.dlsym(libgnomevfs, buffer);
 				if (gnome_vfs_url_show != 0) {
 					desktop = DESKTOP_GNOME_24;
 				}
@@ -131,7 +131,7 @@
 	*/
 	if (desktop == DESKTOP_UNKNOWN) {
 		byte[] cdeName = Converter.wcsToMbcs(null, "_DT_SM_PREFERENCES", true);
-		int /*long*/ cde = OS.XInternAtom(xDisplay, cdeName, true);
+		long /*int*/ cde = OS.XInternAtom(xDisplay, cdeName, true);
 		for (int index = 0; desktop == DESKTOP_UNKNOWN && index < property.length; index++) {
 			if (property[index] == OS.None) continue; /* do not match atoms that do not exist */
 			if (property[index] == cde && cde_init(display)) desktop = DESKTOP_CDE;
@@ -146,7 +146,7 @@
 	/* Use the character encoding for the default locale */
 	byte[] action = Converter.wcsToMbcs(null, command, true);
 	byte[] fileArg = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ ptr = OS.g_malloc(fileArg.length);
+	long /*int*/ ptr = OS.g_malloc(fileArg.length);
 	OS.memmove(ptr, fileArg, fileArg.length);
 	DtActionArg args = new DtActionArg();
 	args.argClass = CDE.DtACTION_FILE;
@@ -176,7 +176,7 @@
 	byte[] dataTypeBuf = Converter.wcsToMbcs(null, dataType, true);
 	byte[] attrNameBuf = Converter.wcsToMbcs(null, attrName, true);
 	byte[] optNameBuf = null;
-	int /*long*/ attrValue = CDE.DtDtsDataTypeToAttributeValue(dataTypeBuf, attrNameBuf, optNameBuf);
+	long /*int*/ attrValue = CDE.DtDtsDataTypeToAttributeValue(dataTypeBuf, attrNameBuf, optNameBuf);
 	if (attrValue == 0) return null;
 	int length = OS.strlen(attrValue);
 	byte[] attrValueBuf = new byte[length];
@@ -189,11 +189,11 @@
 static Hashtable cde_getDataTypeInfo() {
 	Hashtable dataTypeInfo = new Hashtable();
 	int index;
-	int /*long*/ dataTypeList = CDE.DtDtsDataTypeNames();
+	long /*int*/ dataTypeList = CDE.DtDtsDataTypeNames();
 	if (dataTypeList != 0) {
 		/* For each data type name in the list */
 		index = 0; 
-		int /*long*/ [] dataType = new int /*long*/ [1];
+		long /*int*/ [] dataType = new long /*int*/ [1];
 		OS.memmove(dataType, dataTypeList + (index++ * 4), 4);
 		while (dataType[0] != 0) {
 			int length = OS.strlen(dataType[0]);
@@ -277,13 +277,13 @@
 
 	/* Use the character encoding for the default locale */
 	CDE.XtToolkitInitialize();
-	int /*long*/ xtContext = CDE.XtCreateApplicationContext ();
-	int /*long*/ xDisplay = OS.GDK_DISPLAY();
+	long /*int*/ xtContext = CDE.XtCreateApplicationContext ();
+	long /*int*/ xDisplay = OS.GDK_DISPLAY();
 	byte[] appName = Converter.wcsToMbcs(null, "CDE", true);
 	byte[] appClass = Converter.wcsToMbcs(null, "CDE", true);
-	int /*long*/ [] argc = new int /*long*/ [] {0};
+	long /*int*/ [] argc = new long /*int*/ [] {0};
 	CDE.XtDisplayInitialize(xtContext, xDisplay, appName, appClass, 0, 0, argc, 0);
-	int /*long*/ widgetClass = CDE.topLevelShellWidgetClass ();
+	long /*int*/ widgetClass = CDE.topLevelShellWidgetClass ();
 	cdeShell = CDE.XtAppCreateShell (appName, appClass, widgetClass, xDisplay, null, 0);
 	CDE.XtSetMappedWhenManaged (cdeShell, false);
 	CDE.XtResizeWidget (cdeShell, 10, 10, 0);
@@ -343,10 +343,10 @@
  */
 boolean gnome_24_execute(String fileName) {
 	byte[] mimeTypeBuffer = Converter.wcsToMbcs(null, name, true);
-	int /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
+	long /*int*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
 	byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
-	int /*long*/ list = GNOME.g_list_append(0, uri);
+	long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
+	long /*int*/ list = GNOME.g_list_append(0, uri);
 	int result = GNOME.gnome_vfs_mime_application_launch(ptr, list);
 	GNOME.gnome_vfs_mime_application_free(ptr);
 	GNOME.g_free(uri);
@@ -359,7 +359,7 @@
  */
 static boolean gnome_24_launch(String fileName) {
 	byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
+	long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input_with_dirs(fileNameBuffer, GNOME.GNOME_VFS_MAKE_URI_DIR_CURRENT);
 	int result = GNOME.gnome_vfs_url_show(uri);
 	GNOME.g_free(uri);
 	return (result == GNOME.GNOME_VFS_OK);
@@ -372,7 +372,7 @@
 	if (gnomeExpectUri) {
 		/* Convert the given path into a URL */
 		byte[] fileNameBuffer = Converter.wcsToMbcs(null, fileName, true);
-		int /*long*/ uri = GNOME.gnome_vfs_make_uri_from_input(fileNameBuffer);
+		long /*int*/ uri = GNOME.gnome_vfs_make_uri_from_input(fileNameBuffer);
 		if (uri != 0) {
 			int length = OS.strlen(uri);
 			if (length > 0) {
@@ -436,24 +436,24 @@
  */
 static Hashtable gnome_getMimeInfo() {
 	Hashtable mimeInfo = new Hashtable();
-	int /*long*/[] mimeData = new int /*long*/[1];
-	int /*long*/[] extensionData = new int /*long*/[1];
-	int /*long*/ mimeList = GNOME.gnome_vfs_get_registered_mime_types();
-	int /*long*/ mimeElement = mimeList;
+	long /*int*/[] mimeData = new long /*int*/[1];
+	long /*int*/[] extensionData = new long /*int*/[1];
+	long /*int*/ mimeList = GNOME.gnome_vfs_get_registered_mime_types();
+	long /*int*/ mimeElement = mimeList;
 	while (mimeElement != 0) {
 		OS.memmove (mimeData, mimeElement, OS.PTR_SIZEOF);
-		int /*long*/ mimePtr = mimeData[0];
+		long /*int*/ mimePtr = mimeData[0];
 		int mimeLength = OS.strlen(mimePtr);
 		byte[] mimeTypeBuffer = new byte[mimeLength];
 		OS.memmove(mimeTypeBuffer, mimePtr, mimeLength);
 		String mimeType = new String(Converter.mbcsToWcs(null, mimeTypeBuffer));
-		int /*long*/ extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);
+		long /*int*/ extensionList = GNOME.gnome_vfs_mime_get_extensions_list(mimePtr);
 		if (extensionList != 0) {
 			Vector extensions = new Vector();
-			int /*long*/ extensionElement = extensionList;
+			long /*int*/ extensionElement = extensionList;
 			while (extensionElement != 0) {
 				OS.memmove(extensionData, extensionElement, OS.PTR_SIZEOF);
-				int /*long*/ extensionPtr = extensionData[0];
+				long /*int*/ extensionPtr = extensionData[0];
 				int extensionLength = OS.strlen(extensionPtr);
 				byte[] extensionBuffer = new byte[extensionLength];
 				OS.memmove(extensionBuffer, extensionPtr, extensionLength);
@@ -475,7 +475,7 @@
 	String mimeType = null;
 	String fileName = "swt" + extension;
 	byte[] extensionBuffer = Converter.wcsToMbcs(null, fileName, true);
-	int /*long*/ typeName = GNOME.gnome_vfs_mime_type_from_name(extensionBuffer);
+	long /*int*/ typeName = GNOME.gnome_vfs_mime_type_from_name(extensionBuffer);
 	if (typeName != 0) {
 		int length = OS.strlen(typeName);
 		if (length > 0) {
@@ -490,7 +490,7 @@
 static Program gnome_getProgram(Display display, String mimeType) {
 	Program program = null;
 	byte[] mimeTypeBuffer = Converter.wcsToMbcs(null, mimeType, true);
-	int /*long*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
+	long /*int*/ ptr = GNOME.gnome_vfs_mime_get_default_application(mimeTypeBuffer);
 	if (ptr != 0) {
 		program = new Program();
 		program.display = display;
@@ -507,9 +507,9 @@
 		buffer = new byte[length + 1];
 		OS.memmove(buffer, application.id, length);
 		LONG gnomeIconTheme = (LONG)display.getData(ICON_THEME_DATA);
-		int /*long*/ icon_name = GNOME.gnome_icon_lookup(gnomeIconTheme.value, 0, null, buffer, 0, mimeTypeBuffer, 
+		long /*int*/ icon_name = GNOME.gnome_icon_lookup(gnomeIconTheme.value, 0, null, buffer, 0, mimeTypeBuffer, 
 				GNOME.GNOME_ICON_LOOKUP_FLAGS_NONE, null);
-		int /*long*/ path = 0;
+		long /*int*/ path = 0;
 		if (icon_name != 0) path = GNOME.gnome_icon_theme_lookup_icon(gnomeIconTheme.value, icon_name, PREFERRED_ICON_SIZE, null, null);
 		if (path != 0) {
 			length = OS.strlen(path);
diff -ur x86/org/eclipse/swt/widgets/Button.java x86_64/org/eclipse/swt/widgets/Button.java
--- x86/org/eclipse/swt/widgets/Button.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Button.java	2009-02-11 17:43:50.000000000 -0500
@@ -45,7 +45,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Button extends Control {
-	int /*long*/ boxHandle, labelHandle, imageHandle, arrowHandle, groupHandle;
+	long /*int*/ boxHandle, labelHandle, imageHandle, arrowHandle, groupHandle;
 	boolean selected, grayed;
 	ImageList imageList;
 	Image image;
@@ -162,7 +162,7 @@
 	}
 	if (wHint != SWT.DEFAULT || hHint != SWT.DEFAULT) {
 		if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_CAN_DEFAULT) != 0) {
-			int /*long*/ [] buffer = new int /*long*/ [1];
+			long /*int*/ [] buffer = new long /*int*/ [1];
 			GtkBorder border = new GtkBorder ();
 			OS.gtk_widget_style_get (handle, OS.default_border, buffer, 0);
 			if (buffer[0] != 0) {
@@ -263,7 +263,7 @@
 	if (arrowHandle != 0) display.removeWidget (arrowHandle);
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	if (labelHandle != 0) return labelHandle;
 	return super.fontHandle ();
 }
@@ -379,14 +379,14 @@
 	return text;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	if ((style & SWT.RADIO) != 0) selected  = getSelection ();
 	return result;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	if ((style & SWT.RADIO) != 0) {
 		if ((parent.getStyle () & SWT.NO_RADIO_GROUP) != 0) {
 			setSelection (!selected);
@@ -408,8 +408,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	// widget could be disposed at this point
 	if (handle == 0) return 0;
 	if ((style & SWT.PUSH) != 0 && OS.GTK_WIDGET_HAS_DEFAULT (handle)) {
@@ -419,8 +419,8 @@
 	return result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	// widget could be disposed at this point
 	if (handle == 0) return 0;
 	if ((style & SWT.PUSH) != 0 && !OS.GTK_WIDGET_HAS_DEFAULT (handle)) {
@@ -432,8 +432,8 @@
 	return result;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	if ((style & SWT.RADIO) != 0) selected  = getSelection ();
 	return result;
@@ -637,7 +637,7 @@
 	if (imageHandle != 0) setBackgroundColor(imageHandle, color);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -712,7 +712,7 @@
 		if (image.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 		imageList = new ImageList ();
 		int imageIndex = imageList.add (image);
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		if (text.length () == 0) OS.gtk_widget_hide (labelHandle);
 		OS.gtk_widget_show (imageHandle);
diff -ur x86/org/eclipse/swt/widgets/Canvas.java x86_64/org/eclipse/swt/widgets/Canvas.java
--- x86/org/eclipse/swt/widgets/Canvas.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Canvas.java	2009-02-11 17:43:50.000000000 -0500
@@ -147,46 +147,46 @@
 	return ime;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_button_press_event (widget, event);
+		long /*int*/ result = ime.gtk_button_press_event (widget, event);
 		if (result != 0) return result;
 	}
 	return  super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_commit (imcontext, text);
+		long /*int*/ result = ime.gtk_commit (imcontext, text);
 		if (result != 0) return result;
 	}
 	return super.gtk_commit (imcontext, text);
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ event) {
 	if ((state & OBSCURED) != 0) return 0;
 	boolean isFocus = caret != null && caret.isFocusCaret ();
 	if (isFocus) caret.killFocus ();
-	int /*long*/ result = super.gtk_expose_event (widget, event);
+	long /*int*/ result = super.gtk_expose_event (widget, event);
 	if (isFocus) caret.setFocus ();
 	return result;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	if (caret != null) caret.setFocus ();
 	return result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	if (caret != null) caret.killFocus ();
 	return result;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	if (ime != null) {
-		int /*long*/ result = ime.gtk_preedit_changed (imcontext);
+		long /*int*/ result = ime.gtk_preedit_changed (imcontext);
 		if (result != 0) return result;
 	}
 	return super.gtk_preedit_changed (imcontext);
@@ -246,16 +246,16 @@
 	if (!isVisible ()) return;
 	boolean isFocus = caret != null && caret.isFocusCaret ();
 	if (isFocus) caret.killFocus ();
-	int /*long*/ window = paintWindow ();
-	int /*long*/ visibleRegion = OS.gdk_drawable_get_visible_region (window);
+	long /*int*/ window = paintWindow ();
+	long /*int*/ visibleRegion = OS.gdk_drawable_get_visible_region (window);
 	GdkRectangle srcRect = new GdkRectangle ();
 	srcRect.x = x;
 	srcRect.y = y;
 	srcRect.width = width;
 	srcRect.height = height;
-	int /*long*/ copyRegion = OS.gdk_region_rectangle (srcRect);
+	long /*int*/ copyRegion = OS.gdk_region_rectangle (srcRect);
 	OS.gdk_region_intersect(copyRegion, visibleRegion);
-	int /*long*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);	
+	long /*int*/ invalidateRegion = OS.gdk_region_rectangle (srcRect);	
 	OS.gdk_region_subtract (invalidateRegion, visibleRegion);
 	OS.gdk_region_offset (invalidateRegion, deltaX, deltaY);
 	GdkRectangle copyRect = new GdkRectangle();
@@ -272,7 +272,7 @@
 //		GC gc = new GC (this);
 //		gc.copyArea (x, y, width, height, destX, destY);
 //		gc.dispose ();
-		int /*long*/ gdkGC = OS.gdk_gc_new (window);
+		long /*int*/ gdkGC = OS.gdk_gc_new (window);
 		OS.gdk_gc_set_exposures (gdkGC, true);
 		OS.gdk_draw_drawable (window, gdkGC, window, copyRect.x, copyRect.y, copyRect.x + deltaX, copyRect.y + deltaY, copyRect.width, copyRect.height);
 		OS.g_object_unref (gdkGC);
@@ -394,7 +394,7 @@
 }
 	
 void updateCaret () {
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle == 0) return;
 	GdkRectangle rect = new GdkRectangle ();
 	rect.x = caret.x;
diff -ur x86/org/eclipse/swt/widgets/Caret.java x86_64/org/eclipse/swt/widgets/Caret.java
--- x86/org/eclipse/swt/widgets/Caret.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Caret.java	2009-02-11 17:43:50.000000000 -0500
@@ -96,13 +96,13 @@
 boolean drawCaret () {
 	if (parent == null) return false;
 	if (parent.isDisposed ()) return false;
-	int /*long*/ window = parent.paintWindow ();
-	int /*long*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ window = parent.paintWindow ();
+	long /*int*/ gc = OS.gdk_gc_new (window);
 	GdkColor color = new GdkColor ();
 	color.red = (short) 0xffff;
 	color.green = (short) 0xffff;
 	color.blue = (short) 0xffff;
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
 	OS.gdk_colormap_alloc_color (colormap, color, true, true);
 	OS.gdk_gc_set_foreground (gc, color);
 	OS.gdk_gc_set_function (gc, OS.GDK_XOR);
diff -ur x86/org/eclipse/swt/widgets/ColorDialog.java x86_64/org/eclipse/swt/widgets/ColorDialog.java
--- x86/org/eclipse/swt/widgets/ColorDialog.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ColorDialog.java	2009-02-11 17:43:50.000000000 -0500
@@ -113,12 +113,12 @@
  */
 public RGB open () {
 	byte [] buffer = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ handle = OS.gtk_color_selection_dialog_new (buffer);
+	long /*int*/ handle = OS.gtk_color_selection_dialog_new (buffer);
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -141,7 +141,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
diff -ur x86/org/eclipse/swt/widgets/Combo.java x86_64/org/eclipse/swt/widgets/Combo.java
--- x86/org/eclipse/swt/widgets/Combo.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Combo.java	2009-02-11 17:43:50.000000000 -0500
@@ -56,9 +56,9 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Combo extends Composite {
-	int /*long*/ buttonHandle, entryHandle, listHandle, textRenderer, cellHandle, popupHandle;
+	long /*int*/ buttonHandle, entryHandle, listHandle, textRenderer, cellHandle, popupHandle;
 	int lastEventTime, visibleCount = 5;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	String [] items = new String [0];
 	boolean ignoreSelect, lockText;
@@ -183,13 +183,13 @@
 		* stopping the "delete" and "insert_text" signal emission. 
 		*/
 		ignoreSelect = lockText = true;
-		int /*long*/ item = OS.gtk_list_item_new_with_label (buffer);
-		int /*long*/ label = OS.gtk_bin_get_child (item); 
+		long /*int*/ item = OS.gtk_list_item_new_with_label (buffer);
+		long /*int*/ label = OS.gtk_bin_get_child (item); 
 		setForegroundColor (label, getForegroundColor ());
 		OS.gtk_widget_modify_font (label, getFontDescription ());
 		OS.gtk_widget_set_direction (label, OS.gtk_widget_get_direction (handle));
 		OS.gtk_widget_show (item);
-		int /*long*/ items = OS.g_list_append (0, item);
+		long /*int*/ items = OS.g_list_append (0, item);
 		OS.gtk_list_insert_items (listHandle, items, index);
 		ignoreSelect = lockText = false;
 	}
@@ -344,9 +344,9 @@
 		if ((style & SWT.READ_ONLY) != 0) {
 			int index = OS.gtk_combo_box_get_active (handle);
 			if (index != -1) {
-				int /*long*/ modelHandle = OS.gtk_combo_box_get_model (handle);
-				int /*long*/ [] ptr = new int /*long*/ [1];
-				int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+				long /*int*/ modelHandle = OS.gtk_combo_box_get_model (handle);
+				long /*int*/ [] ptr = new long /*int*/ [1];
+				long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 				OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 				OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
 				OS.g_free (iter);
@@ -370,10 +370,10 @@
 	if (hHint != SWT.DEFAULT && hHint < 0) hHint = 0;
 	int[] w = new int [1], h = new int [1];
 	OS.gtk_widget_realize (entryHandle);
-	int /*long*/ layout = OS.gtk_entry_get_layout (entryHandle);
+	long /*int*/ layout = OS.gtk_entry_get_layout (entryHandle);
 	OS.pango_layout_get_size (layout, w, h);
 	int xborder = INNER_BORDER, yborder = INNER_BORDER;
-	int /*long*/ style = OS.gtk_widget_get_style (entryHandle);
+	long /*int*/ style = OS.gtk_widget_get_style (entryHandle);
 	xborder += OS.gtk_style_get_xthickness (style);
 	yborder += OS.gtk_style_get_ythickness (style);
 	int [] property = new int [1];
@@ -389,7 +389,7 @@
 	GtkRequisition arrowRequesition = new GtkRequisition ();
 	OS.gtk_widget_size_request (buttonHandle, arrowRequesition);
 	GtkRequisition listRequesition = new GtkRequisition ();
-	int /*long*/ listParent = OS.gtk_widget_get_parent (listHandle);
+	long /*int*/ listParent = OS.gtk_widget_get_parent (listHandle);
 	OS.gtk_widget_size_request (listParent != 0 ? listParent : listHandle, listRequesition);
 	
 	width = Math.max (listRequesition.width, width) + arrowRequesition.width + 4;
@@ -422,7 +422,7 @@
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
-		int /*long*/ oldList = OS.gtk_window_list_toplevels ();  
+		long /*int*/ oldList = OS.gtk_window_list_toplevels ();  
 		if ((style & SWT.READ_ONLY) != 0) {
 			handle = OS.gtk_combo_box_new_text ();
 			if (handle == 0) error (SWT.ERROR_NO_HANDLES);
@@ -468,9 +468,9 @@
 		*/
 		OS.gtk_container_forall (handle, display.allChildrenProc, 0);
 		if (display.allChildren != 0) {
-			int /*long*/ list = display.allChildren;
+			long /*int*/ list = display.allChildren;
 			while (list != 0) {
-				int /*long*/ widget = OS.g_list_data (list);
+				long /*int*/ widget = OS.g_list_data (list);
 				if (OS.GTK_IS_BUTTON (widget)) {
 					buttonHandle = widget;
 					break;
@@ -499,14 +499,14 @@
 		listHandle = combo.list;
 		
 		if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
-			int /*long*/ parentHandle = 0;
-			int /*long*/ temp = listHandle;
+			long /*int*/ parentHandle = 0;
+			long /*int*/ temp = listHandle;
 			while ((temp = OS.gtk_widget_get_parent(temp)) != 0) {
 				parentHandle = temp;
 			}
 			popupHandle = parentHandle;
 			if (popupHandle != 0) {
-				int /*long*/ modalGroup = getShell().modalGroup;
+				long /*int*/ modalGroup = getShell().modalGroup;
 				if (modalGroup != 0) {
 					OS.gtk_window_group_add_window (modalGroup, popupHandle);
 				}
@@ -519,11 +519,11 @@
 		* to hook events.  The fix is to find the first child that is
 		* not the entry or list and assume this is the arrow handle.
 		*/
-		int /*long*/ list = OS.gtk_container_get_children (handle);
+		long /*int*/ list = OS.gtk_container_get_children (handle);
 		if (list != 0) {
 			int i = 0, count = OS.g_list_length (list);
 			while (i<count) {
-				int /*long*/ childHandle = OS.g_list_nth_data (list, i);
+				long /*int*/ childHandle = OS.g_list_nth_data (list, i);
 				if (childHandle != entryHandle && childHandle != listHandle) {
 					buttonHandle = childHandle;
 					break;
@@ -564,15 +564,15 @@
 	if (buttonHandle != 0) display.removeWidget (buttonHandle);
 	if (entryHandle != 0) display.removeWidget (entryHandle);
 	if (listHandle != 0) display.removeWidget (listHandle);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -581,18 +581,18 @@
 	return false;
 }
 
-int /*long*/ findPopupHandle (int /*long*/ oldList) {
-	int /*long*/ hdl = 0;
-	int /*long*/ currentList = OS.gtk_window_list_toplevels();
-	int /*long*/ oldFromList = oldList;
-	int /*long*/ newFromList = currentList;
+long /*int*/ findPopupHandle (long /*int*/ oldList) {
+	long /*int*/ hdl = 0;
+	long /*int*/ currentList = OS.gtk_window_list_toplevels();
+	long /*int*/ oldFromList = oldList;
+	long /*int*/ newFromList = currentList;
 	boolean isFound;
 	while (newFromList != 0) {
-		int /*long*/ newToplevel = OS.g_list_data(newFromList);
+		long /*int*/ newToplevel = OS.g_list_data(newFromList);
 		isFound = false;
 		oldFromList = oldList;
 		while (oldFromList != 0) {
-			int /*long*/ oldToplevel = OS.g_list_data(oldFromList);
+			long /*int*/ oldToplevel = OS.g_list_data(oldFromList);
 			if (newToplevel == oldToplevel) {
 				isFound = true;
 				break;
@@ -610,7 +610,7 @@
 	return hdl;
 }
 
-void fixModal (int /*long*/ group, int /*long*/ modalGroup) {
+void fixModal (long /*int*/ group, long /*int*/ modalGroup) {
 	if (popupHandle != 0) {
 		if (group != 0) {
 			OS.gtk_window_group_add_window (group, popupHandle);
@@ -632,7 +632,7 @@
 	*  filter has to be called by SWT.
 	*/	
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -642,12 +642,12 @@
 	gdkEventKey = 0;
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	if (entryHandle != 0) return entryHandle;
 	return super.fontHandle ();
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if ((style & SWT.READ_ONLY) != 0 && buttonHandle != 0) return buttonHandle;
 	}
@@ -677,9 +677,9 @@
 	}
 	int eventMask =	OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_PRESS_MASK | 
 		OS.GDK_BUTTON_RELEASE_MASK;
- 	int /*long*/ [] handles = new int /*long*/ [] {buttonHandle, entryHandle, listHandle};
+ 	long /*int*/ [] handles = new long /*int*/ [] {buttonHandle, entryHandle, listHandle};
 	for (int i=0; i<handles.length; i++) {
-		int /*long*/ eventHandle = handles [i];
+		long /*int*/ eventHandle = handles [i];
 		if (eventHandle != 0) {
 			/* Connect the mouse signals */
 			OS.gtk_widget_add_events (eventHandle, eventMask);
@@ -703,7 +703,7 @@
 			}
 		}
 	}
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -712,7 +712,7 @@
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	return entryHandle != 0 ? OS.GTK_ENTRY_IM_CONTEXT (entryHandle) : 0;
 }
 
@@ -737,8 +737,8 @@
 		}
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
 		boolean selected = OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
 		if (selected) {
 			OS.gtk_list_unselect_all (listHandle);
@@ -779,9 +779,9 @@
 	if (filter && entryHandle != 0) {
 		int [] index = new int [1];
 		int [] trailing = new int [1];
-		int /*long*/ layout = OS.gtk_entry_get_layout (entryHandle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (entryHandle);
 		OS.pango_layout_xy_to_index (layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, trailing);
-		int /*long*/ ptr = OS.pango_layout_get_text (layout);
+		long /*int*/ ptr = OS.pango_layout_get_text (layout);
 		int position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 		Point selection = getSelection ();
 		if (selection.x <= position && position < selection.y) {
@@ -795,11 +795,11 @@
 	return super.dragDetect (x, y, filter, consume);
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return fixedHandle;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -964,7 +964,7 @@
 			int index = OS.gtk_combo_box_get_active (handle);
 			if (index != -1) length = getItem (index).length ();
 		} else {
-			int /*long*/ str = OS.gtk_entry_get_text (entryHandle);
+			long /*int*/ str = OS.gtk_entry_get_text (entryHandle);
 			if (str != 0) length = (int)/*64*/OS.g_utf8_strlen (str, -1);
 		}
 		return new Point (0, length);
@@ -994,10 +994,10 @@
 		return OS.gtk_combo_box_get_active (handle);
 	}
 	int index = 0, result = -1;
-	int /*long*/ children = OS.gtk_container_get_children (listHandle);
-	int /*long*/ temp = children;
+	long /*int*/ children = OS.gtk_container_get_children (listHandle);
+	long /*int*/ temp = children;
 	while (temp != 0) {
-		int /*long*/ item = OS.g_list_data (temp);
+		long /*int*/ item = OS.g_list_data (temp);
 		if (OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED) {
 			result = index;
 			break;
@@ -1024,7 +1024,7 @@
 public String getText () {
 	checkWidget();
 	if (entryHandle != 0) {
-		int /*long*/ str = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ str = OS.gtk_entry_get_text (entryHandle);
 		if (str == 0) return "";
 		int length = OS.strlen (str);
 		byte [] buffer = new byte [length];
@@ -1105,12 +1105,12 @@
 	return visibleCount;
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	/*
 	* Feature in GTK. Depending on where the user clicks, GTK prevents 
 	* the left mouse button event from being propagated. The fix is to
@@ -1126,7 +1126,7 @@
 	return super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (widget == handle) {
 			if (entryHandle == 0) {
@@ -1150,7 +1150,7 @@
 		}
 	} else {
 		if (!ignoreSelect) {
-			int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+			long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 			int length = OS.strlen (ptr);
 			byte [] buffer = new byte [length];
 			OS.memmove (buffer, ptr, length);
@@ -1171,7 +1171,7 @@
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1190,7 +1190,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if (!OS.gtk_editable_get_editable (entryHandle)) return 0;
 	int length = OS.strlen (text);
@@ -1228,7 +1228,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (lockText) {
 		OS.gtk_list_unselect_item (listHandle, 0);
 		OS.g_signal_stop_emission_by_name (entryHandle, OS.delete_text);
@@ -1254,7 +1254,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent)  {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent)  {
 	/*
 	* Feature in GTK. Depending on where the user clicks, GTK prevents 
 	* the left mouse button event from being propagated. The fix is to
@@ -1306,12 +1306,12 @@
 	return super.gtk_event_after(widget, gdkEvent);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	if (lockText) {
 		OS.gtk_list_unselect_item (listHandle, 0);
 		OS.g_signal_stop_emission_by_name (entryHandle, OS.insert_text);
@@ -1325,7 +1325,7 @@
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	String newText = verifyText (oldText, pos [0], pos [0]);
@@ -1357,8 +1357,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
@@ -1406,7 +1406,7 @@
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -1473,14 +1473,14 @@
 	return super.isFocusHandle (widget);
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ childHandle =  entryHandle != 0 ? entryHandle : handle;	
+long /*int*/ paintWindow () {
+	long /*int*/ childHandle =  entryHandle != 0 ? entryHandle : handle;	
 	OS.gtk_widget_realize (childHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (childHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (childHandle);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if ((style & SWT.READ_ONLY) != 0) return window;
 	}
-	int /*long*/ children = OS.gdk_window_get_children (window);
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) window = OS.g_list_data (children);
 	OS.g_list_free (children);
 	return window;
@@ -1505,7 +1505,7 @@
 	if (entryHandle != 0) OS.gtk_editable_paste_clipboard (entryHandle);
 }
 
-int /*long*/ parentingHandle() {
+long /*int*/ parentingHandle() {
 	return fixedHandle;
 }
 
@@ -1514,7 +1514,7 @@
 	if (buttonHandle != 0) display.addWidget (buttonHandle, this);
 	if (entryHandle != 0) display.addWidget (entryHandle, this);
 	if (listHandle != 0) display.addWidget (listHandle, this);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -1558,10 +1558,10 @@
 		OS.gtk_combo_box_remove_text (handle, index);
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
 		boolean selected = OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
-		int /*long*/ items = OS.g_list_append (0, item);
+		long /*int*/ items = OS.g_list_append (0, item);
 		OS.gtk_list_remove_items (listHandle, items);
 		OS.g_list_free (items);
 		OS.g_list_free (children);
@@ -1608,10 +1608,10 @@
 	} else {
 		boolean selected = false;
 		ignoreSelect = true;
-		int /*long*/ items = 0;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ items = 0;
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
 		for (int i = start; i <= end; i++) {
-			int /*long*/ item = OS.g_list_nth_data (children, i);
+			long /*int*/ item = OS.g_list_nth_data (children, i);
 			selected |= OS.GTK_WIDGET_STATE (item) == OS.GTK_STATE_SELECTED;
 			items = OS.g_list_append (items, item);
 		}
@@ -1801,7 +1801,7 @@
 	return super.setBounds (x, y, width, newHeight, move, resize);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (entryHandle != 0) OS.gtk_widget_modify_font (entryHandle, font);
@@ -1822,11 +1822,11 @@
 		OS.gtk_widget_modify_font (entryHandle, font);
 		if (listHandle != 0) {
 			OS.gtk_widget_modify_font (listHandle, font);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					OS.gtk_widget_modify_font (widget, font);
 				}
 				OS.g_list_free (itemsList);
@@ -1844,11 +1844,11 @@
 		setForegroundColor (entryHandle, color);
 		if (listHandle != 0) {
 			setForegroundColor (listHandle, color);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					setForegroundColor (widget, color);
 				}
 				OS.g_list_free (itemsList);
@@ -1889,9 +1889,9 @@
 		}
 	} else {
 		ignoreSelect = true;
-		int /*long*/ children = OS.gtk_container_get_children (listHandle);
-		int /*long*/ item = OS.g_list_nth_data (children, index);
-		int /*long*/ label = OS.gtk_bin_get_child (item);
+		long /*int*/ children = OS.gtk_container_get_children (listHandle);
+		long /*int*/ item = OS.g_list_nth_data (children, index);
+		long /*int*/ label = OS.gtk_bin_get_child (item);
 		OS.gtk_label_set_text (label, buffer);
 		OS.g_list_free (children);
 		ignoreSelect = false;
@@ -1937,15 +1937,15 @@
 	} else {
 		lockText = ignoreSelect = true;
 		OS.gtk_list_clear_items (listHandle, 0, -1);
-		int /*long*/ font = getFontDescription ();
+		long /*int*/ font = getFontDescription ();
 		GdkColor color = getForegroundColor ();
 		int direction = OS.gtk_widget_get_direction (handle);
 		int i = 0;
 		while (i < items.length) {
 			String string = items [i];
 			byte [] buffer = Converter.wcsToMbcs (null, string, true);
-			int /*long*/ item = OS.gtk_list_item_new_with_label (buffer);
-			int /*long*/ label = OS.gtk_bin_get_child (item); 
+			long /*int*/ item = OS.gtk_list_item_new_with_label (buffer);
+			long /*int*/ label = OS.gtk_bin_get_child (item); 
 			setForegroundColor (label, color);
 			OS.gtk_widget_modify_font (label, font);
 			OS.gtk_widget_set_direction (label, direction);
@@ -2023,11 +2023,11 @@
 		if (entryHandle != 0) OS.gtk_widget_set_direction (entryHandle, dir);
 		if (listHandle != 0) {
 			OS.gtk_widget_set_direction (listHandle, dir);
-			int /*long*/ itemsList = OS.gtk_container_get_children (listHandle);
+			long /*int*/ itemsList = OS.gtk_container_get_children (listHandle);
 			if (itemsList != 0) {
 				int count = OS.g_list_length (itemsList);
 				for (int i=count - 1; i>=0; i--) {
-					int /*long*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
+					long /*int*/ widget = OS.gtk_bin_get_child (OS.g_list_nth_data (itemsList, i));
 					OS.gtk_widget_set_direction (widget, dir);
 				}
 				OS.g_list_free (itemsList);
@@ -2110,7 +2110,7 @@
 	* fix is to block the firing of these events and fire them ourselves in a consistent manner. 
 	*/
 	if (hooks (SWT.Verify) || filters (SWT.Verify)) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (entryHandle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (entryHandle);
 		string = verifyText (string, 0, (int)/*64*/OS.g_utf8_strlen (ptr, -1));
 		if (string == null) return;
 	}
@@ -2190,9 +2190,9 @@
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext = imContext (); 
+			long /*int*/ imContext = imContext (); 
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -2211,7 +2211,7 @@
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
diff -ur x86/org/eclipse/swt/widgets/Composite.java x86_64/org/eclipse/swt/widgets/Composite.java
--- x86/org/eclipse/swt/widgets/Composite.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Composite.java	2009-02-11 17:43:50.000000000 -0500
@@ -48,8 +48,8 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Composite extends Scrollable {
-	public int /*long*/  embeddedHandle;
-	int /*long*/ imHandle, socketHandle;
+	public long /*int*/  embeddedHandle;
+	long /*int*/ imHandle, socketHandle;
 	Layout layout;
 	Control[] tabList;
 	int layoutCount, backgroundMode;
@@ -100,15 +100,15 @@
 }
 
 Control [] _getChildren () {
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return new Control [0];
 	int count = OS.g_list_length (list);
 	Control [] children = new Control [count];
 	int i = 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ handle = OS.g_list_data (temp);
+		long /*int*/ handle = OS.g_list_data (temp);
 		if (handle != 0) {
 			Widget widget = display.getWidget (handle);
 			if (widget != null && widget != this) {
@@ -202,7 +202,7 @@
 	/* Do nothing - Subclassing is allowed */
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	if (scrolledHandle != 0) return 0;
 	return super.childStyle ();
 }
@@ -262,9 +262,9 @@
 			if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_fixed_set_has_window (fixedHandle, true);
 		}
-		int /*long*/ vadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+		long /*int*/ vadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 		if (vadj == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ hadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+		long /*int*/ hadj = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 		if (hadj == 0) error (SWT.ERROR_NO_HANDLES);
 		scrolledHandle = OS.gtk_scrolled_window_new (hadj, vadj);
 		if (scrolledHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);
@@ -332,7 +332,7 @@
 	Control control = findBackgroundControl ();
 	if (control != null) {
 		GCData data = gc.getGCData ();
-		int /*long*/ cairo = data.cairo;
+		long /*int*/ cairo = data.cairo;
 		if (cairo != 0) {
 			Cairo.cairo_save (cairo);
 			if (control.backgroundImage != null) {
@@ -340,15 +340,15 @@
 				Cairo.cairo_translate (cairo, -pt.x, -pt.y);
 				x += pt.x;
 				y += pt.y;
-				int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-				int /*long*/ xVisual = OS.gdk_x11_visual_get_xvisual (OS.gdk_visual_get_system());
-				int /*long*/ drawable = control.backgroundImage.pixmap;
-				int /*long*/ xDrawable = OS.GDK_PIXMAP_XID (drawable);				
+				long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+				long /*int*/ xVisual = OS.gdk_x11_visual_get_xvisual (OS.gdk_visual_get_system());
+				long /*int*/ drawable = control.backgroundImage.pixmap;
+				long /*int*/ xDrawable = OS.GDK_PIXMAP_XID (drawable);				
 				int [] w = new int [1], h = new int [1];
 				OS.gdk_drawable_get_size (drawable, w, h);
-				int /*long*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);
+				long /*int*/ surface = Cairo.cairo_xlib_surface_create (xDisplay, xDrawable, xVisual, w [0], h [0]);
 				if (surface == 0) error (SWT.ERROR_NO_HANDLES);
-				int /*long*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);
+				long /*int*/ pattern = Cairo.cairo_pattern_create_for_surface (surface);
 				if (pattern == 0) error (SWT.ERROR_NO_HANDLES);
 				Cairo.cairo_pattern_set_extend (pattern, Cairo.CAIRO_EXTEND_REPEAT);
 				if ((data.style & SWT.MIRRORED) != 0) {
@@ -366,7 +366,7 @@
 			Cairo.cairo_fill (cairo);
 			Cairo.cairo_restore (cairo);
 		} else {
-			int /*long*/ gdkGC = gc.handle;
+			long /*int*/ gdkGC = gc.handle;
 			GdkGCValues values = new GdkGCValues ();
 			OS.gdk_gc_get_values (gdkGC, values);
 			if (control.backgroundImage != null) {
@@ -424,7 +424,7 @@
 	}
 }
 
-void fixModal(int /*long*/ group, int /*long*/ modalGroup)  {
+void fixModal(long /*int*/ group, long /*int*/ modalGroup)  {
 	Control[] controls = _getChildren ();
 	for (int i = 0; i < controls.length; i++) {
 		controls[i].fixModal (group, modalGroup);
@@ -463,15 +463,15 @@
 
 void fixZOrder () {
 	if ((state & CANVAS) != 0) return;
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ parentWindow = OS.GTK_WIDGET_WINDOW (parentHandle);
 	if (parentWindow == 0) return;
-	int /*long*/ [] userData = new int /*long*/ [1];
-	int /*long*/ windowList = OS.gdk_window_get_children (parentWindow);
+	long /*int*/ [] userData = new long /*int*/ [1];
+	long /*int*/ windowList = OS.gdk_window_get_children (parentWindow);
 	if (windowList != 0) {
-		int /*long*/ windows = windowList;
+		long /*int*/ windows = windowList;
 		while (windows != 0) {
-			int /*long*/ window = OS.g_list_data (windows);
+			long /*int*/ window = OS.g_list_data (windows);
 			if (window != redrawWindow) {
 				OS.gdk_window_get_user_data (window, userData);
 				if (userData [0] == 0 || OS.G_OBJECT_TYPE (userData [0]) != display.gtk_fixed_get_type ()) {
@@ -484,12 +484,12 @@
 	}
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	if (socketHandle != 0) return socketHandle;
 	return super.focusHandle ();
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (socketHandle != 0) OS.GTK_WIDGET_SET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
 	boolean result = super.forceFocus (focusHandle);
 	if (socketHandle != 0) OS.GTK_WIDGET_UNSET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
@@ -550,7 +550,7 @@
 	* NOTE: The current implementation will count
 	* non-registered children.
 	*/
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -564,7 +564,7 @@
 			return new Rectangle (0, 0, 0, 0);
 		}
 		forceResize ();
-		int /*long*/ clientHandle = clientHandle ();
+		long /*int*/ clientHandle = clientHandle ();
 		int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 		int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 		return new Rectangle (0, 0, width, height);
@@ -645,8 +645,8 @@
 	return tabList;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	if ((state & CANVAS) != 0) {
 		if ((style & SWT.NO_FOCUS) == 0 && hooksKeys ()) {
@@ -660,7 +660,7 @@
 	return result;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	if ((state & CANVAS) == 0) {
 		return super.gtk_expose_event (widget, eventPtr);
@@ -671,7 +671,7 @@
 	if (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
 	OS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);
-	int /*long*/ [] rectangles = new int /*long*/ [1];
+	long /*int*/ [] rectangles = new long /*int*/ [1];
 	int [] n_rectangles = new int [1];
 	OS.gdk_region_get_rectangles (gdkEvent.region, rectangles, n_rectangles);
 	GdkRectangle rect = new GdkRectangle ();
@@ -683,7 +683,7 @@
 		event.width = rect.width;
 		event.height = rect.height;
 		if ((style & SWT.MIRRORED) != 0) event.x = getClientWidth () - event.width - event.x;
-		int /*long*/ damageRgn = OS.gdk_region_new ();
+		long /*int*/ damageRgn = OS.gdk_region_new ();
 		OS.gdk_region_union_with_rect (damageRgn, rect);
 		GCData data = new GCData ();
 		data.damageRgn = damageRgn;
@@ -698,8 +698,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  The default behavior when the return key
@@ -719,30 +719,30 @@
 	return result;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	if (widget == socketHandle) return 0;
 	return super.gtk_focus (widget, directionType);
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	return (state & CANVAS) != 0 ? 1 : result;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_out_event (widget, event);
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_out_event (widget, event);
 	return (state & CANVAS) != 0 ? 1 : result;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	fixZOrder ();
 	return 0;	
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
 	if ((style & SWT.NO_BACKGROUND) != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, false);
 	}
 	if (socketHandle != 0) {
@@ -751,16 +751,16 @@
 	return result;
 }
 
-int /*long*/ gtk_scroll_child (int /*long*/ widget, int /*long*/ scrollType, int /*long*/ horizontal) {
+long /*int*/ gtk_scroll_child (long /*int*/ widget, long /*int*/ scrollType, long /*int*/ horizontal) {
 	/* Stop GTK scroll child signal for canvas */
 	OS.g_signal_stop_emission_by_name (widget, OS.scroll_child);
 	return 1;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
-	int /*long*/ result = super.gtk_style_set (widget, previousStyle);
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
+	long /*int*/ result = super.gtk_style_set (widget, previousStyle);
 	if ((style & SWT.NO_BACKGROUND) != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, false);
 	}
 	return result;
@@ -784,7 +784,7 @@
 	return hooks (SWT.KeyDown) || hooks (SWT.KeyUp);
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return imHandle;
 }
 
@@ -1002,16 +1002,16 @@
 	}
 }
 
-void moveAbove (int /*long*/ child, int /*long*/ sibling) {
+void moveAbove (long /*int*/ child, long /*int*/ sibling) {
 	if (child == sibling) return;
-	int /*long*/ parentHandle = parentingHandle ();
+	long /*int*/ parentHandle = parentingHandle ();
 	GtkFixed fixed = new GtkFixed ();
 	OS.memmove (fixed, parentHandle);
-	int /*long*/ children = fixed.children;
+	long /*int*/ children = fixed.children;
 	if (children == 0) return;
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ [] widget = new int /*long*/ [1];
-	int /*long*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ [] widget = new long /*int*/ [1];
+	long /*int*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.memmove (widget, data [0], OS.PTR_SIZEOF);
@@ -1039,20 +1039,20 @@
 	OS.memmove (parentHandle, fixed);
 }
 
-void moveBelow (int /*long*/ child, int /*long*/ sibling) {
+void moveBelow (long /*int*/ child, long /*int*/ sibling) {
 	if (child == sibling) return;
-	int /*long*/ parentHandle = parentingHandle ();
+	long /*int*/ parentHandle = parentingHandle ();
 	if (sibling == 0 && parentHandle == fixedHandle) {
 		moveAbove (child, scrolledHandle != 0  ? scrolledHandle : handle);
 		return;
 	}
 	GtkFixed fixed = new GtkFixed ();
 	OS.memmove (fixed, parentHandle);
-	int /*long*/ children = fixed.children;
+	long /*int*/ children = fixed.children;
 	if (children == 0) return;
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ [] widget = new int /*long*/ [1];
-	int /*long*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ [] widget = new long /*int*/ [1];
+	long /*int*/ childData = 0, childLink = 0, siblingLink = 0, temp = children;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.memmove (widget, data [0], OS.PTR_SIZEOF);
@@ -1084,7 +1084,7 @@
 	Control[] children = _getChildren ();
 	for (int i = 0; i < children.length; i++) {
 		Control child = children[i];
-		int /*long*/ topHandle = child.topHandle ();
+		long /*int*/ topHandle = child.topHandle ();
 		int x = OS.GTK_WIDGET_X (topHandle);
 		int y = OS.GTK_WIDGET_Y (topHandle);
 		int controlWidth = (child.state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
@@ -1126,12 +1126,12 @@
 	return new Point (width, height);
 }
 
-int /*long*/ parentingHandle () {
+long /*int*/ parentingHandle () {
 	if ((state & CANVAS) != 0) return handle;
 	return fixedHandle != 0 ? fixedHandle : handle;
 }
 
-void printWidget (GC gc, int /*long*/ drawable, int depth, int x, int y) {
+void printWidget (GC gc, long /*int*/ drawable, int depth, int x, int y) {
 	Region oldClip = new Region (gc.getDevice ());
 	Region newClip = new Region (gc.getDevice ());
 	gc.getClipping (oldClip);
diff -ur x86/org/eclipse/swt/widgets/Control.java x86_64/org/eclipse/swt/widgets/Control.java
--- x86/org/eclipse/swt/widgets/Control.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Control.java	2009-02-11 17:43:50.000000000 -0500
@@ -42,8 +42,8 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public abstract class Control extends Widget implements Drawable {
-	int /*long*/ fixedHandle;
-	int /*long*/ redrawWindow, enableWindow;
+	long /*int*/ fixedHandle;
+	long /*int*/ redrawWindow, enableWindow;
 	int drawCount;
 	Composite parent;
 	Cursor cursor;
@@ -99,13 +99,13 @@
 void deregister () {
 	super.deregister ();
 	if (fixedHandle != 0) display.removeWidget (fixedHandle);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) display.removeWidget (imHandle);
 }
 
 boolean drawGripper (int x, int y, int width, int height, boolean vertical) {
-	int /*long*/ paintHandle = paintHandle ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle);
+	long /*int*/ paintHandle = paintHandle ();
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle);
 	if (window == 0) return false;
 	int orientation = vertical ? OS.GTK_ORIENTATION_HORIZONTAL : OS.GTK_ORIENTATION_VERTICAL;
 	if ((style & SWT.MIRRORED) != 0) x = getClientWidth () - width - x;
@@ -117,16 +117,16 @@
 	OS.gtk_widget_set_sensitive (handle, enabled);
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return eventHandle ();
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return handle;
 }
 
-int /*long*/ eventWindow () {
-	int /*long*/ eventHandle = eventHandle ();
+long /*int*/ eventWindow () {
+	long /*int*/ eventHandle = eventHandle ();
 	OS.gtk_widget_realize (eventHandle);
 	return OS.GTK_WIDGET_WINDOW (eventHandle);
 }
@@ -138,7 +138,7 @@
 		if (control.setFocus ()) return;
 	}
 	shell.setSavedFocus (focusControl);
-	int /*long*/ focusHandle = shell.vboxHandle;
+	long /*int*/ focusHandle = shell.vboxHandle;
 	OS.GTK_WIDGET_SET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
 	OS.gtk_widget_grab_focus (focusHandle);
 	OS.GTK_WIDGET_UNSET_FLAGS (focusHandle, OS.GTK_CAN_FOCUS);
@@ -148,7 +148,7 @@
 	if (fixedHandle != 0) fixStyle (fixedHandle);
 }
 
-void fixStyle (int /*long*/ handle) {
+void fixStyle (long /*int*/ handle) {
 	/*
 	* Feature in GTK.  Some GTK themes apply a different background to
 	* the contents of a GtkNotebook.  However, in an SWT TabFolder, the
@@ -161,7 +161,7 @@
 	* should not override the application background.
 	*/
 	if ((state & BACKGROUND) != 0) return;
-	int /*long*/ childStyle = parent.childStyle ();
+	long /*int*/ childStyle = parent.childStyle ();
 	if (childStyle != 0) {		
 		GdkColor color = new GdkColor();
 		OS.gtk_style_get_bg (childStyle, 0, color);
@@ -169,11 +169,11 @@
 	}
 }
 
-int /*long*/ focusHandle () {
+long /*int*/ focusHandle () {
 	return handle;
 }
 
-int /*long*/ fontHandle () {
+long /*int*/ fontHandle () {
 	return handle;
 }
 
@@ -183,7 +183,7 @@
 
 void hookEvents () {
 	/* Connect the keyboard signals */
-	int /*long*/ focusHandle = focusHandle ();
+	long /*int*/ focusHandle = focusHandle ();
 	int focusMask = OS.GDK_KEY_PRESS_MASK | OS.GDK_KEY_RELEASE_MASK | OS.GDK_FOCUS_CHANGE_MASK;
 	OS.gtk_widget_add_events (focusHandle, focusMask);
 	OS.g_signal_connect_closure_by_id (focusHandle, display.signalIds [POPUP_MENU], 0, display.closures [POPUP_MENU], false);
@@ -195,7 +195,7 @@
 	OS.g_signal_connect_closure_by_id (focusHandle, display.signalIds [FOCUS_OUT_EVENT], 0, display.closures [FOCUS_OUT_EVENT], false);
 
 	/* Connect the mouse signals */
-	int /*long*/ eventHandle = eventHandle ();
+	long /*int*/ eventHandle = eventHandle ();
 	int eventMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_PRESS_MASK | OS.GDK_BUTTON_RELEASE_MASK;
 	OS.gtk_widget_add_events (eventHandle, eventMask);
 	OS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT], false);
@@ -204,7 +204,7 @@
 	OS.g_signal_connect_closure_by_id (eventHandle, display.signalIds [SCROLL_EVENT], 0, display.closures [SCROLL_EVENT], false);
 	
 	/* Connect enter/exit signals */
-	int /*long*/ enterExitHandle = enterExitHandle ();
+	long /*int*/ enterExitHandle = enterExitHandle ();
 	int enterExitMask = OS.GDK_ENTER_NOTIFY_MASK | OS.GDK_LEAVE_NOTIFY_MASK;
 	OS.gtk_widget_add_events (enterExitHandle, enterExitMask);
 	OS.g_signal_connect_closure_by_id (enterExitHandle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);
@@ -220,7 +220,7 @@
 	* The signal is hooked to the fixedHandle to catch events sent to
 	* lightweight widgets.
 	*/
-	int /*long*/ blockHandle = fixedHandle != 0 ? fixedHandle : eventHandle;
+	long /*int*/ blockHandle = fixedHandle != 0 ? fixedHandle : eventHandle;
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [BUTTON_PRESS_EVENT], 0, display.closures [BUTTON_PRESS_EVENT_INVERSE], true);
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT_INVERSE], true);
 	OS.g_signal_connect_closure_by_id (blockHandle, display.signalIds [MOTION_NOTIFY_EVENT], 0, display.closures [MOTION_NOTIFY_EVENT_INVERSE], true);
@@ -232,7 +232,7 @@
 	}
 	
 	/* Connect the paint signal */
-	int /*long*/ paintHandle = paintHandle ();
+	long /*int*/ paintHandle = paintHandle ();
 	int paintMask = OS.GDK_EXPOSURE_MASK | OS.GDK_VISIBILITY_NOTIFY_MASK;
 	OS.gtk_widget_add_events (paintHandle, paintMask);
 	OS.g_signal_connect_closure_by_id (paintHandle, display.signalIds [EXPOSE_EVENT], 0, display.closures [EXPOSE_EVENT_INVERSE], false);
@@ -242,7 +242,7 @@
 	/* Connect the Input Method signals */
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [REALIZE], 0, display.closures [REALIZE], true);
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [UNREALIZE], 0, display.closures [UNREALIZE], false);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		OS.g_signal_connect_closure (imHandle, OS.commit, display.closures [COMMIT], false);
 		OS.g_signal_connect_closure (imHandle, OS.preedit_changed, display.closures [PREEDIT_CHANGED], false);
@@ -250,11 +250,11 @@
 	
 	OS.g_signal_connect_closure_by_id (paintHandle, display.signalIds [STYLE_SET], 0, display.closures [STYLE_SET], false);
    
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.g_signal_connect_closure_by_id (topHandle, display.signalIds [MAP], 0, display.closures [MAP], true);
 }
 
-int /*long*/ hoverProc (int /*long*/ widget) {
+long /*int*/ hoverProc (long /*int*/ widget) {
 	int [] x = new int [1], y = new int [1], mask = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, mask);
 	sendMouseEvent (SWT.MouseHover, 0, /*time*/0, x [0], y [0], false, mask [0]);
@@ -262,14 +262,14 @@
 	return 0;
 }
 
-int /*long*/ topHandle() {
+long /*int*/ topHandle() {
 	if (fixedHandle != 0) return fixedHandle;
 	return super.topHandle ();
 }
 
-int /*long*/ paintHandle () {
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ paintHandle = handle;
+long /*int*/ paintHandle () {
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ paintHandle = handle;
 	while (paintHandle != topHandle) {
 		if ((OS.GTK_WIDGET_FLAGS (paintHandle) & OS.GTK_NO_WINDOW) == 0) break;
 		paintHandle = OS.gtk_widget_get_parent (paintHandle);
@@ -277,8 +277,8 @@
 	return paintHandle;
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ paintHandle = paintHandle ();
+long /*int*/ paintWindow () {
+	long /*int*/ paintHandle = paintHandle ();
 	OS.gtk_widget_realize (paintHandle);
 	return OS.GTK_WIDGET_WINDOW (paintHandle);
 }
@@ -304,25 +304,25 @@
 	checkWidget ();
 	if (gc == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (gc.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_realize (topHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	GCData data = gc.getGCData ();
 	OS.gdk_window_process_updates (window, true);
 	printWidget (gc, data.drawable, OS.gdk_drawable_get_depth (data.drawable), 0, 0);
 	return true;
 }
 
-void printWidget (GC gc, int /*long*/ drawable, int depth, int x, int y) {
+void printWidget (GC gc, long /*int*/ drawable, int depth, int x, int y) {
 	boolean obscured = (state & OBSCURED) != 0;
 	state &= ~OBSCURED;
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	printWindow (true, this, gc.handle, drawable, depth, window, x, y);
 	if (obscured) state |= OBSCURED;
 }
 
-void printWindow (boolean first, Control control, int /*long*/ gc, int /*long*/ drawable, int depth, int /*long*/ window, int x, int y) {
+void printWindow (boolean first, Control control, long /*int*/ gc, long /*int*/ drawable, int depth, long /*int*/ window, int x, int y) {
 	if (OS.gdk_drawable_get_depth (window) != depth) return;
 	GdkRectangle rect = new GdkRectangle ();
 	int [] width = new int [1], height = new int [1];
@@ -330,13 +330,13 @@
 	rect.width = width [0];
 	rect.height = height [0];
 	OS.gdk_window_begin_paint_rect (window, rect);
-	int /*long*/ [] real_drawable = new int /*long*/ [1];
+	long /*int*/ [] real_drawable = new long /*int*/ [1];
 	int [] x_offset = new int [1], y_offset = new int [1];
 	OS.gdk_window_get_internal_paint_info (window, real_drawable, x_offset, y_offset);	
-	int /*long*/ [] userData = new int /*long*/ [1];
+	long /*int*/ [] userData = new long /*int*/ [1];
 	OS.gdk_window_get_user_data (window, userData);
 	if (userData [0] != 0) {
-		int /*long*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);
+		long /*int*/ eventPtr = OS.gdk_event_new (OS.GDK_EXPOSE);
 		GdkEventExpose event = new GdkEventExpose ();
 		event.type = OS.GDK_EXPOSE;
 		event.window = OS.g_object_ref (window);
@@ -352,7 +352,7 @@
 	if (!first) {
 		int [] cX = new int [1], cY = new int [1];
 		OS.gdk_window_get_position (window, cX, cY);
-		int /*long*/ parentWindow = OS.gdk_window_get_parent (window);
+		long /*int*/ parentWindow = OS.gdk_window_get_parent (window);
 		int [] pW = new int [1], pH = new int [1];
 		OS.gdk_drawable_get_size (parentWindow, pW, pH);
 		srcX = x_offset [0] - cX [0];
@@ -364,13 +364,13 @@
 	}
 	OS.gdk_draw_drawable (drawable, gc, real_drawable [0], srcX, srcY, destX, destY, destWidth, destHeight);
 	OS.gdk_window_end_paint (window);
-	int /*long*/ children = OS.gdk_window_get_children (window);
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) {
-		int /*long*/ windows = children;
+		long /*int*/ windows = children;
 		while (windows != 0) {
-			int /*long*/ child = OS.g_list_data (windows);
+			long /*int*/ child = OS.g_list_data (windows);
 			if (OS.gdk_window_is_visible (child)) {
-				int /*long*/ [] data = new int /*long*/ [1];
+				long /*int*/ [] data = new long /*int*/ [1];
 				OS.gdk_window_get_user_data (child, data);
 				if (data [0] != 0) {
 					Widget widget = display.findWidget (data [0]);
@@ -484,7 +484,7 @@
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) style |= SWT.MIRRORED;
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	return parent.childStyle ();
 }
 
@@ -544,7 +544,7 @@
 	return computeNativeSize (handle, wHint, hHint, changed);	
 }
 
-Point computeNativeSize (int /*long*/ h, int wHint, int hHint, boolean changed) {
+Point computeNativeSize (long /*int*/ h, int wHint, int hHint, boolean changed) {
 	int width = wHint, height = hHint;
 	if (wHint == SWT.DEFAULT && hHint == SWT.DEFAULT) {
 		GtkRequisition requisition = new GtkRequisition ();
@@ -570,7 +570,7 @@
 	* topHandle.  Note that all calls to gtk_widget_size_allocate()
 	* must be preceded by a call to gtk_widget_size_request().
 	*/
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	GtkRequisition requisition = new GtkRequisition ();
 	gtk_widget_size_request (topHandle, requisition);
 	GtkAllocation allocation = new GtkAllocation ();
@@ -621,7 +621,7 @@
  */
 public Rectangle getBounds () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int y = OS.GTK_WIDGET_Y (topHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
@@ -686,7 +686,7 @@
 	/* Do nothing */
 }
 
-void modifyStyle (int /*long*/ handle, int /*long*/ style) {
+void modifyStyle (long /*int*/ handle, long /*int*/ style) {
 	super.modifyStyle(handle, style);
 	/*
 	* Bug in GTK.  When changing the style of a control that  
@@ -697,8 +697,8 @@
 }
 
 void moveHandle (int x, int y) {
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ parentHandle = parent.parentingHandle ();
 	/*
 	* Feature in GTK.  Calling gtk_fixed_move() to move a child causes
 	* the whole parent to redraw.  This is a performance problem. The
@@ -716,13 +716,13 @@
 }
 
 void resizeHandle (int width, int height) {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_set_size_request (topHandle, width, height);
 	if (topHandle != handle) OS.gtk_widget_set_size_request (handle, width, height);
 }
 
 int setBounds (int x, int y, int width, int height, boolean move, boolean resize) {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	boolean sendMove = move;
 	if ((parent.style & SWT.MIRRORED) != 0) {
 		int clientWidth = parent.getClientWidth ();
@@ -846,7 +846,7 @@
  */
 public Point getLocation () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int y = OS.GTK_WIDGET_Y (topHandle);
 	if ((parent.style & SWT.MIRRORED) != 0) {
@@ -911,7 +911,7 @@
  */
 public Point getSize () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (topHandle);
 	return new Point (width, height);
@@ -961,15 +961,15 @@
 public void setRegion (Region region) {
 	checkWidget ();
 	if (region != null && region.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle ());
-	int /*long*/ shape_region = (region == null) ? 0 : region.handle;
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle ());
+	long /*int*/ shape_region = (region == null) ? 0 : region.handle;
 	OS.gdk_window_shape_combine_region (window, shape_region, 0, 0);
 	this.region = region;
 }
 
 void setRelations () {
-	int /*long*/ parentHandle = parent.parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
 	int count = OS.g_list_length (list);
 	if (count > 1) {
@@ -977,7 +977,7 @@
 		 * the receiver is the last item in the list, so its predecessor will
 		 * be the second-last item in the list
 		 */
-		int /*long*/ handle = OS.g_list_nth_data (list, count - 2);
+		long /*int*/ handle = OS.g_list_nth_data (list, count - 2);
 		if (handle != 0) {
 			Widget widget = display.getWidget (handle);
 			if (widget != null && widget != this) {
@@ -1020,7 +1020,7 @@
 	return true;
 }
 
-boolean isFocusHandle (int /*long*/ widget) {
+boolean isFocusHandle (long /*int*/ widget) {
 	return widget == focusHandle (); 
 }
 
@@ -1159,7 +1159,7 @@
  */
 public Point toControl (int x, int y) {
 	checkWidget ();
-	int /*long*/ window = eventWindow ();
+	long /*int*/ window = eventWindow ();
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	x -= origin_x [0];
@@ -1208,7 +1208,7 @@
  */
 public Point toDisplay (int x, int y) {
 	checkWidget();
-	int /*long*/ window = eventWindow ();
+	long /*int*/ window = eventWindow ();
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	if ((style & SWT.MIRRORED) != 0) x = getClientWidth () - x;
@@ -1856,12 +1856,12 @@
  */
 void removeRelation () {
 	if (!isDescribedByLabel ()) return;		/* there will not be any */
-	int /*long*/ accessible = OS.gtk_widget_get_accessible (handle);
+	long /*int*/ accessible = OS.gtk_widget_get_accessible (handle);
 	if (accessible == 0) return;
-	int /*long*/ set = ATK.atk_object_ref_relation_set (accessible);
+	long /*int*/ set = ATK.atk_object_ref_relation_set (accessible);
 	int count = ATK.atk_relation_set_get_n_relations (set);
 	for (int i = 0; i < count; i++) {
-		int /*long*/ relation = ATK.atk_relation_set_get_relation (set, 0);
+		long /*int*/ relation = ATK.atk_relation_set_get_relation (set, 0);
 		ATK.atk_relation_set_remove (set, relation);
 	}
 	OS.g_object_unref (set);
@@ -1984,7 +1984,7 @@
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean quit = false, dragging = false;
 	while (!quit) {
-		int /*long*/ eventPtr = 0;
+		long /*int*/ eventPtr = 0;
 		while (true) {
 			eventPtr = OS.gdk_event_get ();
 			if (eventPtr != 0) {
@@ -2032,8 +2032,8 @@
 	return dragging;
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
-	int /*long*/ imHandle = imHandle ();
+boolean filterKey (int keyval, long /*int*/ event) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		return OS.gtk_im_context_filter_keypress (imHandle, event);
 	}
@@ -2055,13 +2055,13 @@
 	oldDecorations.fixDecorations (newDecorations, this, menus);
 }
 
-int /*long*/ fixedMapProc (int /*long*/ widget) {
+long /*int*/ fixedMapProc (long /*int*/ widget) {
 	OS.GTK_WIDGET_SET_FLAGS (widget, OS.GTK_MAPPED);
-	int /*long*/ widgetList = OS.gtk_container_get_children (widget);
+	long /*int*/ widgetList = OS.gtk_container_get_children (widget);
 	if (widgetList != 0) {
-		int /*long*/ widgets = widgetList;
+		long /*int*/ widgets = widgetList;
 		while (widgets != 0) {
-			int /*long*/ child = OS.g_list_data (widgets);
+			long /*int*/ child = OS.g_list_data (widgets);
 			if (OS.GTK_WIDGET_VISIBLE (child) && OS.gtk_widget_get_child_visible (child) && !OS.GTK_WIDGET_MAPPED (child)) {
 				OS.gtk_widget_map (child);
 			}
@@ -2075,7 +2075,7 @@
 	return 0;
 }
 
-void fixModal(int /*long*/ group, int /*long*/ modalGroup) {	
+void fixModal(long /*int*/ group, long /*int*/ modalGroup) {	
 }
 
 /**
@@ -2101,13 +2101,13 @@
 	return forceFocus (focusHandle ());
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	/* When the control is zero sized it must be realized */
 	OS.gtk_widget_realize (focusHandle);
 	OS.gtk_widget_grab_focus (focusHandle);
 	Shell shell = getShell ();
-	int /*long*/ shellHandle = shell.shellHandle;
-	int /*long*/ handle = OS.gtk_window_get_focus (shellHandle);
+	long /*int*/ shellHandle = shell.shellHandle;
+	long /*int*/ handle = OS.gtk_window_get_focus (shellHandle);
 	while (handle != 0) {
 		if (handle == focusHandle) return true;
 		Widget widget = display.getWidget (handle);
@@ -2160,7 +2160,7 @@
 }
 
 GdkColor getBgColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_bg (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2168,7 +2168,7 @@
 }
 
 GdkColor getBaseColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_base (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2268,8 +2268,8 @@
 	return font != null ? font : defaultFont ();
 }
 	
-int /*long*/ getFontDescription () {
-	int /*long*/ fontHandle = fontHandle ();
+long /*int*/ getFontDescription () {
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	return OS.gtk_style_get_font_desc (OS.gtk_widget_get_style (fontHandle));
 }
@@ -2294,7 +2294,7 @@
 }
 
 GdkColor getFgColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_fg (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2306,7 +2306,7 @@
 }
 
 GdkColor getTextColor () {
-	int /*long*/ fontHandle = fontHandle ();
+	long /*int*/ fontHandle = fontHandle ();
 	OS.gtk_widget_realize (fontHandle);
 	GdkColor color = new GdkColor ();
 	OS.gtk_style_get_text (OS.gtk_widget_get_style (fontHandle), OS.GTK_STATE_NORMAL, color);
@@ -2358,7 +2358,7 @@
 public Monitor getMonitor () {
 	checkWidget();
 	Monitor monitor = null;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, paintWindow ());
 		GdkRectangle dest = new GdkRectangle ();
@@ -2501,11 +2501,11 @@
 	return (state & HIDDEN) == 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	return gtk_button_press_event (widget, event, true);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event, boolean sendMouseDown) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event, boolean sendMouseDown) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
@@ -2520,10 +2520,10 @@
 	if (((shell.style & SWT.ON_TOP) != 0) && (((shell.style & SWT.NO_FOCUS) == 0) || ((style & SWT.NO_FOCUS) == 0))) {
 		shell.forceActive();
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if (gdkEvent.type == OS.GDK_BUTTON_PRESS) {
 		display.clickCount = 1;
-		int /*long*/ nextEvent = OS.gdk_event_peek ();
+		long /*int*/ nextEvent = OS.gdk_event_peek ();
 		if (nextEvent != 0) {
 			int eventType = OS.GDK_EVENT_TYPE (nextEvent);
 			if (eventType == OS.GDK_2BUTTON_PRESS) display.clickCount = 2;
@@ -2570,7 +2570,7 @@
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	/*
@@ -2589,7 +2589,7 @@
 	return sendMouseEvent (SWT.MouseUp, button, display.clickCount, 0, false, gdkEvent.time, gdkEvent.x_root, gdkEvent.y_root, false, gdkEvent.state) ? 0 : 1;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	if (text == 0) return 0;
 	int length = OS.strlen (text);
 	if (length == 0) return 0;
@@ -2600,7 +2600,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {
 		/*
 		 * Feature in GTK. Children of a shell will inherit and display the shell's
@@ -2613,7 +2613,7 @@
 			char [] chars = fixMnemonic (toolTipText, false);
 			buffer = Converter.wcsToMbcs (null, chars, true);
 		}
-		int /*long*/ toolHandle = getShell().handle;
+		long /*int*/ toolHandle = getShell().handle;
 		OS.gtk_widget_set_tooltip_text (toolHandle, buffer);
 	}
 	if (display.currentControl == this) return 0;
@@ -2632,7 +2632,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -2672,7 +2672,7 @@
 				}
 			} else {
 				display.ignoreFocus = false;
-				int /*long*/ grabHandle = OS.gtk_grab_get_current ();
+				long /*int*/ grabHandle = OS.gtk_grab_get_current ();
 				if (grabHandle != 0) {
 					if (OS.G_OBJECT_TYPE (grabHandle) == OS.GTK_TYPE_MENU ()) {
 						display.ignoreFocus = true;
@@ -2688,7 +2688,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	if (!hooks (SWT.Paint) && !filters (SWT.Paint)) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
@@ -2710,34 +2710,34 @@
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	/* Stop GTK traversal for every widget */
 	return 1;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	// widget could be disposed at this point
 	if (handle != 0) {
 		Control oldControl = display.imControl;
 		if (oldControl != this)  {
 			if (oldControl != null && !oldControl.isDisposed ()) {
-				int /*long*/ oldIMHandle = oldControl.imHandle ();
+				long /*int*/ oldIMHandle = oldControl.imHandle ();
 				if (oldIMHandle != 0) OS.gtk_im_context_reset (oldIMHandle);
 			}
 		}
 		if (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {
-			int /*long*/ imHandle = imHandle ();
+			long /*int*/ imHandle = imHandle ();
 			if (imHandle != 0) OS.gtk_im_context_focus_in (imHandle);
 		}
 	}
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	// widget could be disposed at this point
 	if (handle != 0) {
 		if (hooks (SWT.KeyDown) || hooks (SWT.KeyUp)) {
-			int /*long*/ imHandle = imHandle ();
+			long /*int*/ imHandle = imHandle ();
 			if (imHandle != 0) {
 				OS.gtk_im_context_focus_out (imHandle);
 			}
@@ -2746,7 +2746,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (!hasFocus ()) return 0;
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
@@ -2765,16 +2765,16 @@
 	return super.gtk_key_press_event (widget, event);
 }
 
-int /*long*/ gtk_key_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_release_event (long /*int*/ widget, long /*int*/ event) {
 	if (!hasFocus ()) return 0;
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		if (OS.gtk_im_context_filter_keypress (imHandle, event)) return 1;
 	}
 	return super.gtk_key_release_event (widget, event);
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (display.currentControl != this) return 0;
 	display.removeMouseHoverTimeout (handle);
 	int result = 0;
@@ -2789,15 +2789,15 @@
 	return result;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	int result = 0;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey keyEvent = new GdkEventKey ();
 		OS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);
 		if (keyEvent.type == OS.GDK_KEY_PRESS) {
 			Control focusControl = display.getFocusControl ();
-			int /*long*/ focusHandle = focusControl != null ? focusControl.focusHandle () : 0;
+			long /*int*/ focusHandle = focusControl != null ? focusControl.focusHandle () : 0;
 			if (focusHandle != 0) {
 				display.mnemonicControl = this;
 				OS.gtk_widget_event (focusHandle, eventPtr);
@@ -2810,7 +2810,7 @@
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
 	OS.memmove (gdkEvent, event, GdkEventMotion.sizeof);
 	if (this == display.currentControl && (hooks (SWT.MouseHover) || filters (SWT.MouseHover))) {
@@ -2820,7 +2820,7 @@
 	int state = gdkEvent.state;
 	if (gdkEvent.is_hint != 0) {
 		int [] pointer_x = new int [1], pointer_y = new int [1], mask = new int [1];
-		int /*long*/ window = eventWindow ();
+		long /*int*/ window = eventWindow ();
 		OS.gdk_window_get_pointer (window, pointer_x, pointer_y, mask);
 		x = pointer_x [0];
 		y = pointer_y [0];
@@ -2830,32 +2830,32 @@
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
 	if (!hasFocus()) return 0;
 	int [] x = new int [1], y = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, null);
 	return showMenu (x [0], y [0]) ? 1 : 0;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	display.showIMWindow (this);
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ imHandle = imHandle ();
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		OS.gtk_im_context_set_client_window (imHandle, window);
 	}
 	if (backgroundImage != null) {
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 		if (window != 0) OS.gdk_window_set_back_pixmap (window, backgroundImage.pixmap, false);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	GdkEventScroll gdkEvent = new GdkEventScroll ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventScroll.sizeof);
 	switch (gdkEvent.direction) {
@@ -2871,29 +2871,29 @@
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	if (!hasFocus ()) return 0;
 	return sendHelpEvent (helpType) ? 1 : 0;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
 	if (backgroundImage != null) {
 		setBackgroundPixmap (backgroundImage.pixmap);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_unrealize (int /*long*/ widget) {
-	int /*long*/ imHandle = imHandle ();
+long /*int*/ gtk_unrealize (long /*int*/ widget) {
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) OS.gtk_im_context_set_client_window (imHandle, 0);
 	return 0;	
 }
 
-int /*long*/ gtk_visibility_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_visibility_notify_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventVisibility gdkEvent = new GdkEventVisibility ();
 	OS.memmove (gdkEvent, event, GdkEventVisibility.sizeof);
-	int /*long*/ paintWindow = paintWindow();
-	int /*long*/ window = gdkEvent.window;
+	long /*int*/ paintWindow = paintWindow();
+	long /*int*/ window = gdkEvent.window;
 	if (window == paintWindow) {
 		if (gdkEvent.state == OS.GDK_VISIBILITY_FULLY_OBSCURED) {
 			state |= OBSCURED;
@@ -2912,7 +2912,7 @@
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	OS.gtk_widget_size_request (widget, requisition);	
 }
 
@@ -2929,11 +2929,11 @@
  * @param data the platform specific GC data 
  * @return the platform specific GC handle
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	checkWidget ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window == 0) SWT.error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ gdkGC = OS.gdk_gc_new (window);
+	long /*int*/ gdkGC = OS.gdk_gc_new (window);
 	if (gdkGC == 0) error (SWT.ERROR_NO_HANDLES);	
 	if (data != null) {
 		int mask = SWT.LEFT_TO_RIGHT | SWT.RIGHT_TO_LEFT;
@@ -2955,7 +2955,7 @@
 	return gdkGC;
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return 0;
 }
 
@@ -2972,7 +2972,7 @@
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	checkWidget ();
 	OS.g_object_unref (gdkGC);
 }
@@ -3112,7 +3112,7 @@
 void register () {
 	super.register ();
 	if (fixedHandle != 0) display.addWidget (fixedHandle, this);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) display.addWidget (imHandle, this);
 }
 
@@ -3188,7 +3188,7 @@
 
 void redrawWidget (int x, int y, int width, int height, boolean redrawAll, boolean all, boolean trim) {
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	GdkRectangle rect = new GdkRectangle ();
 	if (redrawAll) {
 		int [] w = new int [1], h = new int [1];
@@ -3238,7 +3238,7 @@
 	super.releaseWidget ();
 	if (display.currentControl == this) display.currentControl = null;
 	display.removeMouseHoverTimeout (handle);
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) {
 		OS.gtk_im_context_reset (imHandle);
 		OS.gtk_im_context_set_client_window (imHandle, 0);
@@ -3304,7 +3304,7 @@
 	}
 }
 
-boolean sendHelpEvent (int /*long*/ helpType) {
+boolean sendHelpEvent (long /*int*/ helpType) {
 	Control control = this;
 	while (control != null) {
 		if (control.hooks (SWT.Help)) {
@@ -3335,7 +3335,7 @@
 		event.x = (int)x;
 		event.y = (int)y;
 	} else {
-		int /*long*/ window = eventWindow ();
+		long /*int*/ window = eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		event.x = (int)x - origin_x [0];
@@ -3389,7 +3389,7 @@
 	}
 	boolean set = false;
 	if (gdkColor == null) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 		set = (OS.gtk_rc_style_get_color_flags (style, OS.GTK_STATE_NORMAL) & OS.GTK_RC_BG) != 0;
 	} else {
 		GdkColor oldColor = getBackgroundColor ();
@@ -3406,10 +3406,10 @@
 	}
 }
 
-void setBackgroundColor (int /*long*/ handle, GdkColor color) {
+void setBackgroundColor (long /*int*/ handle, GdkColor color) {
 	int index = OS.GTK_STATE_NORMAL;
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
-	int /*long*/ ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
+	long /*int*/ ptr = OS.gtk_rc_style_get_bg_pixmap_name (style, index);
 	if (ptr != 0) OS.g_free (ptr);
 	String name = color == null ? "<parent>" : "<none>";
 	byte[] buffer = Converter.wcsToMbcs (null, name, true);
@@ -3463,8 +3463,8 @@
 	redrawChildren ();
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
+void setBackgroundPixmap (long /*int*/ pixmap) {
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (paintHandle ());
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, backgroundImage.pixmap, false);
 }
 
@@ -3518,14 +3518,14 @@
 	setCursor (cursor != null ? cursor.handle : 0);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ window = eventWindow ();
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ window = eventWindow ();
 	if (window != 0) {
 		OS.gdk_window_set_cursor (window, cursor);
 		if (!OS.GDK_WINDOWING_X11 ()) {
 			OS.gdk_flush ();
 		} else {
-			int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+			long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 			OS.XFlush (xDisplay);
 		}
 	}
@@ -3593,9 +3593,9 @@
 		}
 	} else {
 		OS.gtk_widget_realize (handle);
-		int /*long*/ parentHandle = parent.eventHandle ();
-		int /*long*/ window = parent.eventWindow ();
-		int /*long*/ topHandle = topHandle ();
+		long /*int*/ parentHandle = parent.eventHandle ();
+		long /*int*/ window = parent.eventWindow ();
+		long /*int*/ topHandle = topHandle ();
 		GdkWindowAttr attributes = new GdkWindowAttr ();
 		attributes.x = OS.GTK_WIDGET_X (topHandle);
 		attributes.y = OS.GTK_WIDGET_Y (topHandle);
@@ -3610,9 +3610,9 @@
 			if (!OS.GDK_WINDOWING_X11 ()) {
 				OS.gdk_window_raise (enableWindow);
 			} else {
-				int /*long*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);			
-				int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);
-				int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);
+				long /*int*/ topWindow = OS.GTK_WIDGET_WINDOW (topHandle);			
+				long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (topWindow);
+				long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (enableWindow);
 				int xScreen = OS.XDefaultScreen (xDisplay);
 				int flags = OS.CWStackMode | OS.CWSibling;			
 				XWindowChanges changes = new XWindowChanges ();
@@ -3665,7 +3665,7 @@
 	checkWidget();
 	if (((state & FONT) == 0) && font == null) return;
 	this.font = font;
-	int /*long*/ fontDesc;
+	long /*int*/ fontDesc;
 	if (font == null) {
 		fontDesc = defaultFont ().handle;
 	} else {
@@ -3680,7 +3680,7 @@
 	setFontDescription (fontDesc);
 }
 	
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 }
 
@@ -3711,7 +3711,7 @@
 	}
 	boolean set = false;
 	if (gdkColor == null) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 		set = (OS.gtk_rc_style_get_color_flags (style, OS.GTK_STATE_NORMAL) & OS.GTK_RC_FG) != 0;
 	} else {
 		GdkColor oldColor = getForegroundColor ();
@@ -3739,7 +3739,7 @@
 		* first sized.  The fix is to set the value to (0, 0) as
 		* expected by SWT.
 		*/
-		int /*long*/ topHandle = topHandle ();
+		long /*int*/ topHandle = topHandle ();
 		if ((parent.style & SWT.MIRRORED) != 0) {
 			OS.GTK_WIDGET_SET_X (topHandle, parent.getClientWidth ());
 		} else {
@@ -3820,7 +3820,7 @@
 	if (parent.isDisposed()) SWT.error (SWT.ERROR_INVALID_ARGUMENT);
 	if (this.parent == parent) return true;
 	if (!isReparentable ()) return false;
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x = OS.GTK_WIDGET_X (topHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (topHandle);
 	if ((this.parent.style & SWT.MIRRORED) != 0) {
@@ -3839,7 +3839,7 @@
 		newDecorations.fixAccelGroup ();
 		oldDecorations.fixAccelGroup ();
 	}
-	int /*long*/ newParent = parent.parentingHandle();
+	long /*int*/ newParent = parent.parentingHandle();
 	OS.gtk_widget_reparent (topHandle, newParent);
 	OS.gtk_fixed_move (newParent, topHandle, x, y);
 	this.parent = parent;
@@ -3852,7 +3852,7 @@
 	if (fixedHandle != 0) setBackgroundColor (fixedHandle, null);
 }
 
-void setParentWindow (int /*long*/ widget) {
+void setParentWindow (long /*int*/ widget) {
 }
 
 boolean setRadioSelection (boolean value) {
@@ -3887,7 +3887,7 @@
 	if (redraw) {
 		if (--drawCount == 0) {
 			if (redrawWindow != 0) {
-				int /*long*/ window = paintWindow ();
+				long /*int*/ window = paintWindow ();
 				/* Explicitly hiding the window avoids flicker on GTK+ >= 2.6 */
 				OS.gdk_window_hide (redrawWindow);
 				OS.gdk_window_destroy (redrawWindow);
@@ -3898,7 +3898,7 @@
 	} else {
 		if (drawCount++ == 0) {
 			if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) != 0) {
-				int /*long*/ window = paintWindow ();
+				long /*int*/ window = paintWindow ();
 				Rectangle rect = getBounds ();
 				GdkWindowAttr attributes = new GdkWindowAttr ();
 				attributes.width = rect.width;
@@ -3987,7 +3987,7 @@
 public void setVisible (boolean visible) {
 	checkWidget();
 	if (((state & HIDDEN) == 0) == visible) return;
-	int /*long*/ topHandle = topHandle();
+	long /*int*/ topHandle = topHandle();
 	if (visible) {
 		/*
 		* It is possible (but unlikely), that application
@@ -4068,11 +4068,11 @@
 		}
 	}
 
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ siblingHandle = sibling != null ? sibling.topHandle () : 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ siblingHandle = sibling != null ? sibling.topHandle () : 0;
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	if (window != 0) {
-		int /*long*/ siblingWindow = 0;
+		long /*int*/ siblingWindow = 0;
 		if (sibling != null) {
 			if (above && sibling.enableWindow != 0) {
 				siblingWindow = enableWindow;
@@ -4080,7 +4080,7 @@
 				siblingWindow = OS.GTK_WIDGET_WINDOW (siblingHandle);
 			}
 		}
-		int /*long*/ redrawWindow = fixChildren ? parent.redrawWindow : 0;
+		long /*int*/ redrawWindow = fixChildren ? parent.redrawWindow : 0;
 		if (!OS.GDK_WINDOWING_X11 () || (siblingWindow == 0 && (!above || redrawWindow == 0))) {
 			if (above) {
 				OS.gdk_window_raise (window);
@@ -4095,8 +4095,8 @@
 			changes.sibling = OS.gdk_x11_drawable_get_xid (siblingWindow != 0 ? siblingWindow : redrawWindow);
 			changes.stack_mode = above ? OS.Above : OS.Below;
 			if (redrawWindow != 0 && siblingWindow == 0) changes.stack_mode = OS.Below;
-			int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-			int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
+			long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+			long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
 			int xScreen = OS.XDefaultScreen (xDisplay);
 			int flags = OS.CWStackMode | OS.CWSibling;
 			/*
@@ -4163,10 +4163,10 @@
 
 void setWidgetBackground  () {
 	if (fixedHandle != 0) {
-		int /*long*/ style = OS.gtk_widget_get_modifier_style (fixedHandle);
+		long /*int*/ style = OS.gtk_widget_get_modifier_style (fixedHandle);
 		modifyStyle (fixedHandle, style);
 	}
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 	modifyStyle (handle, style);
 }
 
@@ -4192,8 +4192,8 @@
 void showWidget () {
 	// Comment this line to disable zero-sized widgets
 	state |= ZERO_WIDTH | ZERO_HEIGHT;
-	int /*long*/ topHandle = topHandle ();
-	int /*long*/ parentHandle = parent.parentingHandle ();
+	long /*int*/ topHandle = topHandle ();
+	long /*int*/ parentHandle = parent.parentingHandle ();
 	parent.setParentWindow (topHandle);
 	OS.gtk_container_add (parentHandle, topHandle);
 	if (handle != 0 && handle != topHandle) OS.gtk_widget_show (handle);
@@ -4460,7 +4460,7 @@
 //	checkWidget();
 	if (!OS.GTK_WIDGET_VISIBLE (topHandle ())) return; 
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (flush) display.flushExposes (window, all);
 	OS.gdk_window_process_updates (window, all);
 	OS.gdk_flush ();
@@ -4478,7 +4478,7 @@
 	/* Do nothing */
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case EXPOSE_EVENT_INVERSE: {
 			if ((OS.GTK_VERSION <  OS.VERSION (2, 8, 0)) && ((state & OBSCURED) == 0)) {
@@ -4486,10 +4486,10 @@
 				if (control != null && control.backgroundImage != null) {
 					GdkEventExpose gdkEvent = new GdkEventExpose ();
 					OS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);
-					int /*long*/ paintWindow = paintWindow();
-					int /*long*/ window = gdkEvent.window;
+					long /*int*/ paintWindow = paintWindow();
+					long /*int*/ window = gdkEvent.window;
 					if (window != paintWindow) break;
-					int /*long*/ gdkGC = OS.gdk_gc_new (window);
+					long /*int*/ gdkGC = OS.gdk_gc_new (window);
 					OS.gdk_gc_set_clip_region (gdkGC, gdkEvent.region);
 					int[] dest_x = new int[1], dest_y = new int[1];
 					OS.gtk_widget_translate_coordinates (paintHandle (), control.paintHandle (), 0, 0, dest_x, dest_y);
diff -ur x86/org/eclipse/swt/widgets/DateTime.java x86_64/org/eclipse/swt/widgets/DateTime.java
--- x86/org/eclipse/swt/widgets/DateTime.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/DateTime.java	2009-02-11 17:43:50.000000000 -0500
@@ -473,12 +473,12 @@
 	}
 }
 
-int /*long*/ gtk_day_selected (int /*long*/ widget) {
+long /*int*/ gtk_day_selected (long /*int*/ widget) {
 	sendSelectionEvent ();
 	return 0;
 }
 
-int /*long*/ gtk_month_changed (int /*long*/ widget) {
+long /*int*/ gtk_month_changed (long /*int*/ widget) {
 	sendSelectionEvent ();
 	return 0;
 }
diff -ur x86/org/eclipse/swt/widgets/Decorations.java x86_64/org/eclipse/swt/widgets/Decorations.java
--- x86/org/eclipse/swt/widgets/Decorations.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Decorations.java	2009-02-11 17:43:50.000000000 -0500
@@ -101,7 +101,7 @@
 	Menu [] menus;
 	Control savedFocus;
 	Button defaultButton, saveDefault;
-	int /*long*/ accelGroup, vboxHandle;
+	long /*int*/ accelGroup, vboxHandle;
 	
 Decorations () {
 	/* Do nothing */
@@ -170,17 +170,17 @@
 		sort (bestImages);
 		images = bestImages;
 	}
-	int /*long*/ pixbufs = 0;
+	long /*int*/ pixbufs = 0;
 	if (images != null) {
 		for (int i = 0; i < images.length; i++) {
 			Image image = images [i];
-			int /*long*/ pixbuf = Display.createPixbuf (image);
+			long /*int*/ pixbuf = Display.createPixbuf (image);
 			pixbufs = OS.g_list_append (pixbufs, pixbuf);			
 		}
 	}
 	OS.gtk_window_set_icon_list (topHandle (), pixbufs);
-	int /*long*/ [] data = new int /*long*/ [1];
-	int /*long*/ temp = pixbufs;
+	long /*int*/ [] data = new long /*int*/ [1];
+	long /*int*/ temp = pixbufs;
 	while (temp != 0) {
 		OS.memmove (data, temp, OS.PTR_SIZEOF);
 		OS.g_object_unref (data [0]);
@@ -231,7 +231,7 @@
 	accelGroup = OS.gtk_accel_group_new ();
 	if (accelGroup == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	//FIXME - what should we do for Decorations
-	int /*long*/ shellHandle = topHandle ();
+	long /*int*/ shellHandle = topHandle ();
 	OS.gtk_window_add_accel_group (shellHandle, accelGroup);
 }
 
@@ -242,7 +242,7 @@
 
 void destroyAccelGroup () {
 	if (accelGroup == 0) return;
-	int /*long*/ shellHandle = topHandle ();
+	long /*int*/ shellHandle = topHandle ();
 	OS.gtk_window_remove_accel_group (shellHandle, accelGroup);
 	//TEMPORARY CODE
 //	OS.g_object_unref (accelGroup);
@@ -532,7 +532,7 @@
  */
 public void setDefaultButton (Button button) {
 	checkWidget();
-	int /*long*/ buttonHandle = 0;
+	long /*int*/ buttonHandle = 0;
 	if (button != null) {
 		if (button.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 		if (button.menuShell () != this) error (SWT.ERROR_INVALID_PARENT);
@@ -744,7 +744,7 @@
 	* key.
 	*/
 	if (!button.isVisible () || !button.isEnabled ()) return true;
-	int /*long*/ shellHandle = _getShell ().topHandle ();
+	long /*int*/ shellHandle = _getShell ().topHandle ();
 	return OS.gtk_window_activate_default (shellHandle);
 }
 
diff -ur x86/org/eclipse/swt/widgets/DirectoryDialog.java x86_64/org/eclipse/swt/widgets/DirectoryDialog.java
--- x86/org/eclipse/swt/widgets/DirectoryDialog.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/DirectoryDialog.java	2009-02-11 17:43:50.000000000 -0500
@@ -124,15 +124,15 @@
 }
 String openChooserDialog () {
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ shellHandle = parent.topHandle ();
-	int /*long*/ handle = OS.gtk_file_chooser_dialog_new (
+	long /*int*/ shellHandle = parent.topHandle ();
+	long /*int*/ handle = OS.gtk_file_chooser_dialog_new (
 		titleBytes,
 		shellHandle,
 		OS.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER,
 		OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL,
 		OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK,
 		0);
-	int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+	long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 	if (pixbufs != 0) {
 		OS.gtk_window_set_icon_list (handle, pixbufs);
 		OS.g_list_free (pixbufs);
@@ -150,7 +150,7 @@
 		* when setting a file name that is not a true canonical path. 
 		* The fix is to use the canonical path.
 		*/
-		int /*long*/ ptr = OS.realpath (buffer, null);
+		long /*int*/ ptr = OS.realpath (buffer, null);
 		if (ptr != 0) {
 			OS.gtk_file_chooser_set_current_folder (handle, ptr);
 			OS.g_free (ptr);
@@ -158,9 +158,9 @@
 	}
 	if (message.length () > 0) {
 		byte [] buffer = Converter.wcsToMbcs (null, message, true);
-		int /*long*/ box = OS.gtk_hbox_new (false, 0);
+		long /*int*/ box = OS.gtk_hbox_new (false, 0);
 		if (box == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ label = OS.gtk_label_new (buffer);
+		long /*int*/ label = OS.gtk_label_new (buffer);
 		if (label == 0) error (SWT.ERROR_NO_HANDLES);
 		OS.gtk_container_add (box, label);
 		OS.gtk_widget_show (label);
@@ -177,7 +177,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -190,13 +190,13 @@
 		display.setModalDialog (oldModal);
 	}
 	if (response == OS.GTK_RESPONSE_OK) {
-		int /*long*/ path = OS.gtk_file_chooser_get_filename (handle);
+		long /*int*/ path = OS.gtk_file_chooser_get_filename (handle);
 		if (path != 0) {
-			int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
+			long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
 			OS.g_free (path);
 			if (utf8Ptr != 0) {
-				int /*long*/ [] items_written = new int /*long*/ [1];
-				int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+				long /*int*/ [] items_written = new long /*int*/ [1];
+				long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 				OS.g_free (utf8Ptr);
 				if (utf16Ptr != 0) {
 					int clength = (int)/*64*/items_written [0];
@@ -215,11 +215,11 @@
 }
 String openClassicDialog () {
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
-	int /*long*/ handle = OS.gtk_file_selection_new (titleBytes);
+	long /*int*/ handle = OS.gtk_file_selection_new (titleBytes);
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -234,8 +234,8 @@
 		int length = path.length ();
 		char [] buffer = new char [length + 1];
 		path.getChars (0, length, buffer, 0);
-		int /*long*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
-		int /*long*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
+		long /*int*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
+		long /*int*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
 		OS.gtk_file_selection_set_filename (handle, fileNamePtr);
 		OS.g_free (utf8Ptr);
 		OS.g_free (fileNamePtr);		
@@ -243,12 +243,12 @@
 	GtkFileSelection selection = new GtkFileSelection ();
 	OS.memmove (selection, handle);
 	OS.gtk_file_selection_hide_fileop_buttons (handle);
-	int /*long*/ fileListParent = OS.gtk_widget_get_parent (selection.file_list);
+	long /*int*/ fileListParent = OS.gtk_widget_get_parent (selection.file_list);
 	OS.gtk_widget_hide (selection.file_list);
 	OS.gtk_widget_hide (fileListParent);
 	if (message.length () > 0) {
 		byte [] buffer = Converter.wcsToMbcs (null, message, true);
-		int /*long*/ labelHandle = OS.gtk_label_new (buffer);
+		long /*int*/ labelHandle = OS.gtk_label_new (buffer);
 		OS.gtk_label_set_line_wrap (labelHandle, true);		
 		OS.gtk_misc_set_alignment (labelHandle, 0.0f, 0.0f);
 		OS.gtk_container_add (selection.main_vbox, labelHandle);
@@ -264,7 +264,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -277,11 +277,11 @@
 		display.setModalDialog (oldModal);
 	}
 	if (response == OS.GTK_RESPONSE_OK) {
-		int /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
-		int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
+		long /*int*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
+		long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
 		if (utf8Ptr != 0) {
-			int /*long*/ [] items_written = new int /*long*/ [1];
-			int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+			long /*int*/ [] items_written = new long /*int*/ [1];
+			long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 			if (utf16Ptr != 0) {
 				int length = (int)/*64*/items_written [0];
 				char [] buffer = new char [length];
diff -ur x86/org/eclipse/swt/widgets/Display.java x86_64/org/eclipse/swt/widgets/Display.java
--- x86/org/eclipse/swt/widgets/Display.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Display.java	2009-02-11 17:43:50.000000000 -0500
@@ -97,29 +97,29 @@
 
 	/* Events Dispatching and Callback */
 	int gdkEventCount;
-	int /*long*/ [] gdkEvents;
+	long /*int*/ [] gdkEvents;
 	Widget [] gdkEventWidgets;
 	int [] dispatchEvents;
 	Event [] eventQueue;
-	int /*long*/ fds;
+	long /*int*/ fds;
 	int allocated_nfds;
 	boolean wake;
 	int [] max_priority = new int [1], timeout = new int [1];
 	Callback eventCallback, filterCallback;
-	int /*long*/ eventProc, filterProc, windowProc2, windowProc3, windowProc4, windowProc5;
+	long /*int*/ eventProc, filterProc, windowProc2, windowProc3, windowProc4, windowProc5;
 	Callback windowCallback2, windowCallback3, windowCallback4, windowCallback5;
 	EventTable eventTable, filterTable;
 	static String APP_NAME = "SWT"; //$NON-NLS-1$
 	static final String DISPATCH_EVENT_KEY = "org.eclipse.swt.internal.gtk.dispatchEvent"; //$NON-NLS-1$
 	static final String ADD_WIDGET_KEY = "org.eclipse.swt.internal.addWidget"; //$NON-NLS-1$
-	int /*long*/ [] closures;
+	long /*int*/ [] closures;
 	int [] signalIds;
-	int /*long*/ shellMapProcClosure;
+	long /*int*/ shellMapProcClosure;
 
 	/* Widget Table */
 	int [] indexTable;
 	int freeSlot;
-	int /*long*/ lastHandle;
+	long /*int*/ lastHandle;
 	Widget lastWidget;
 	Widget [] widgetTable;
 	final static int GROW_SIZE = 1024;
@@ -150,7 +150,7 @@
 	
 	/* Input method resources */
 	Control imControl;
-	int /*long*/ preeditWindow, preeditLabel;
+	long /*int*/ preeditWindow, preeditLabel;
 
 	/* Sync/Async Widget Communication */
 	Synchronizer synchronizer = new Synchronizer (this);
@@ -166,40 +166,40 @@
 	int [] timerIds;
 	Runnable [] timerList;
 	Callback timerCallback;
-	int /*long*/ timerProc;
+	long /*int*/ timerProc;
 	Callback windowTimerCallback;
-	int /*long*/ windowTimerProc;
+	long /*int*/ windowTimerProc;
 	
 	/* Caret */
 	Caret currentCaret;
 	Callback caretCallback;
 	int caretId;
-	int /*long*/ caretProc;
+	long /*int*/ caretProc;
 	
 	/* Mnemonics */
 	Control mnemonicControl;
 
 	/* Mouse hover */
 	int mouseHoverId;
-	int /*long*/ mouseHoverHandle, mouseHoverProc;
+	long /*int*/ mouseHoverHandle, mouseHoverProc;
 	Callback mouseHoverCallback;
 	
 	/* Menu position callback */
-	int /*long*/ menuPositionProc;
+	long /*int*/ menuPositionProc;
 	Callback menuPositionCallback;
 
 	/* Tooltip size allocate callback */
-	int /*long*/ sizeAllocateProc;
+	long /*int*/ sizeAllocateProc;
 	Callback sizeAllocateCallback;
-	int /*long*/ sizeRequestProc;
+	long /*int*/ sizeRequestProc;
 	Callback sizeRequestCallback;
 
 	/* Shell map callback */
-	int /*long*/ shellMapProc;
+	long /*int*/ shellMapProc;
 	Callback shellMapCallback;
 	
 	/* Idle proc callback */
-	int /*long*/ idleProc;
+	long /*int*/ idleProc;
 	int idleHandle;
 	Callback idleCallback;
 	static final String ADD_IDLE_PROC_KEY = "org.eclipse.swt.internal.gtk.addIdleProc"; //$NON-NLS-1$
@@ -210,29 +210,29 @@
 	/* GtkTreeView callbacks */
 	int[] treeSelection;
 	int treeSelectionLength;
-	int /*long*/ treeSelectionProc;
+	long /*int*/ treeSelectionProc;
 	Callback treeSelectionCallback;
-	int /*long*/ cellDataProc;
+	long /*int*/ cellDataProc;
 	Callback cellDataCallback;
 	
 	/* Set direction callback */
-	int /*long*/ setDirectionProc;
+	long /*int*/ setDirectionProc;
 	Callback setDirectionCallback;
 	static final String GET_DIRECTION_PROC_KEY = "org.eclipse.swt.internal.gtk.getDirectionProc"; //$NON-NLS-1$
 	
 	/* Set emissionProc callback */
-	int /*long*/ emissionProc;
+	long /*int*/ emissionProc;
 	Callback emissionProcCallback;
 	static final String GET_EMISSION_PROC_KEY = "org.eclipse.swt.internal.gtk.getEmissionProc"; //$NON-NLS-1$
 	
 	/* Get all children callback */
-	int /*long*/ allChildrenProc, allChildren;
+	long /*int*/ allChildrenProc, allChildren;
 	Callback allChildrenCallback;
 
 	/* Settings callbacks */
-	int /*long*/ styleSetProc;
+	long /*int*/ styleSetProc;
 	Callback styleSetCallback;
-	int /*long*/ shellHandle;
+	long /*int*/ shellHandle;
 	boolean settingsChanged, runSettings;
 	
 	/* Entry focus behaviour */
@@ -242,14 +242,14 @@
 	Control currentControl;
 	
 	/* Flush exposes */
-	int /*long*/ checkIfEventProc;
+	long /*int*/ checkIfEventProc;
 	Callback checkIfEventCallback;
-	int /*long*/ flushWindow;
+	long /*int*/ flushWindow;
 	boolean flushAll;
 	GdkRectangle flushRect = new GdkRectangle ();
 	XExposeEvent exposeEvent = new XExposeEvent ();
 	XVisibilityEvent visibilityEvent = new XVisibilityEvent ();
-	int /*long*/ [] flushData = new int /*long*/ [1];
+	long /*int*/ [] flushData = new long /*int*/ [1];
 
 	/* System Resources */
 	Font systemFont;
@@ -276,16 +276,16 @@
 	int lastEventTime, lastUserEventTime;
 	
 	/* Fixed Subclass */
-	static int /*long*/ fixed_type;
-	static int /*long*/ fixed_info_ptr;
+	static long /*int*/ fixed_type;
+	static long /*int*/ fixed_info_ptr;
 	static Callback fixedClassInitCallback, fixedMapCallback, fixedSizeAllocateCallback;
-	static int /*long*/ fixedClassInitProc, fixedMapProc, fixedSizeAllocateProc, oldFixedSizeAllocateProc;
+	static long /*int*/ fixedClassInitProc, fixedMapProc, fixedSizeAllocateProc, oldFixedSizeAllocateProc;
 
 	/* Renderer Subclass */
-	static int /*long*/ text_renderer_type, pixbuf_renderer_type, toggle_renderer_type;
-	static int /*long*/ text_renderer_info_ptr, pixbuf_renderer_info_ptr, toggle_renderer_info_ptr;
+	static long /*int*/ text_renderer_type, pixbuf_renderer_type, toggle_renderer_type;
+	static long /*int*/ text_renderer_info_ptr, pixbuf_renderer_info_ptr, toggle_renderer_info_ptr;
 	static Callback rendererClassInitCallback, rendererRenderCallback, rendererGetSizeCallback;
-	static int /*long*/ rendererClassInitProc, rendererRenderProc, rendererGetSizeProc;
+	static long /*int*/ rendererClassInitProc, rendererRenderProc, rendererGetSizeProc;
 
 	/* Key Mappings */
 	static final int [] [] KeyTable = {
@@ -514,16 +514,16 @@
 	filterTable.hook (eventType, listener);
 }
 
-void addGdkEvent (int /*long*/ event) {
+void addGdkEvent (long /*int*/ event) {
 	if (gdkEvents == null) {
 		int length = GROW_SIZE;
-		gdkEvents = new int /*long*/ [length];
+		gdkEvents = new long /*int*/ [length];
 		gdkEventWidgets = new Widget [length];
 		gdkEventCount = 0;
 	}
 	if (gdkEventCount == gdkEvents.length) {
 		int length = gdkEventCount + GROW_SIZE;
-		int /*long*/ [] newEvents = new int /*long*/ [length];
+		long /*int*/ [] newEvents = new long /*int*/ [length];
 		System.arraycopy (gdkEvents, 0, newEvents, 0, gdkEventCount);
 		gdkEvents = newEvents;
 		Widget [] newWidgets = new Widget [length];
@@ -531,7 +531,7 @@
 		gdkEventWidgets = newWidgets;
 	}
 	Widget widget = null;
-	int /*long*/ handle = OS.gtk_get_event_widget (event);
+	long /*int*/ handle = OS.gtk_get_event_widget (event);
 	if (handle != 0) {
 		do {
 			widget = getWidget (handle);
@@ -582,7 +582,7 @@
 	eventTable.hook (eventType, listener);
 }
 
-int /*long*/ allChildrenProc (int /*long*/ widget, int /*long*/ recurse) {
+long /*int*/ allChildrenProc (long /*int*/ widget, long /*int*/ recurse) {
 	allChildren = OS.g_list_append (allChildren, widget);
 	if (recurse != 0 && OS.GTK_IS_CONTAINER (widget)) {
 		OS.gtk_container_forall (widget, allChildrenProc, recurse);
@@ -590,7 +590,7 @@
 	return 0;
 }
 
-void addMouseHoverTimeout (int /*long*/ handle) {
+void addMouseHoverTimeout (long /*int*/ handle) {
 	if (mouseHoverId != 0) OS.gtk_timeout_remove (mouseHoverId);
 	mouseHoverId = OS.gtk_timeout_add (400, mouseHoverProc, handle);
 	mouseHoverHandle = handle;
@@ -615,7 +615,7 @@
 	popups [index] = menu;
 }
 
-void addWidget (int /*long*/ handle, Widget widget) {
+void addWidget (long /*int*/ handle, Widget widget) {
 	if (handle == 0) return;
 	if (freeSlot == -1) {
 		int length = (freeSlot = indexTable.length) + GROW_SIZE;
@@ -688,12 +688,12 @@
 	if (!OS.GDK_WINDOWING_X11 ()) {
 		OS.gdk_flush ();
 	} else {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 		OS.XFlush (xDisplay);
 	}
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	Widget widget = getWidget (data);
 	if (widget == null) return 0;
 	return widget.cellDataProc (tree_column, cell, tree_model, iter, data);
@@ -716,7 +716,7 @@
 	}
 }
 
-int /*long*/ checkIfEventProc (int /*long*/ display, int /*long*/ xEvent, int /*long*/ userData) {
+long /*int*/ checkIfEventProc (long /*int*/ display, long /*int*/ xEvent, long /*int*/ userData) {
 	int type = OS.X_EVENT_TYPE (xEvent);
 	switch (type) {
 		case OS.VisibilityNotify:
@@ -726,11 +726,11 @@
 		default:
 			return 0;
 	}
-	int /*long*/ window = OS.gdk_window_lookup (OS.X_EVENT_WINDOW (xEvent));
+	long /*int*/ window = OS.gdk_window_lookup (OS.X_EVENT_WINDOW (xEvent));
 	if (window == 0) return 0;
 	if (flushWindow != 0) {
 		if (flushAll) {
-			int /*long*/ tempWindow = window;
+			long /*int*/ tempWindow = window;
 			do {
 				if (tempWindow == flushWindow) break;
 			} while ((tempWindow = OS.gdk_window_get_parent (tempWindow)) != 0);
@@ -755,7 +755,7 @@
 		case OS.VisibilityNotify: {
 			OS.memmove (visibilityEvent, xEvent, XVisibilityEvent.sizeof);
 			OS.gdk_window_get_user_data (window, flushData);
-			int /*long*/ handle = flushData [0];
+			long /*int*/ handle = flushData [0];
 			Widget widget = handle != 0 ? getWidget (handle) : null;
 			if (widget != null && widget instanceof Control) {
 				Control control = (Control) widget;
@@ -851,11 +851,11 @@
 		OS.g_thread_init (0);
 	}
 	OS.gtk_set_locale();
-	if (!OS.gtk_init_check (new int /*long*/ [] {0}, null)) {
+	if (!OS.gtk_init_check (new long /*int*/ [] {0}, null)) {
 		SWT.error (SWT.ERROR_NO_HANDLES, null, " [gtk_init_check() failed]"); //$NON-NLS-1$
 	}
 	if (OS.GDK_WINDOWING_X11 ()) xDisplay = OS.GDK_DISPLAY ();
-	int /*long*/ ptr = OS.gtk_check_version (MAJOR, MINOR, MICRO);
+	long /*int*/ ptr = OS.gtk_check_version (MAJOR, MINOR, MICRO);
 	if (ptr != 0) {
 		int length = OS.strlen (ptr);
 		byte [] buffer = new byte [length];
@@ -955,9 +955,9 @@
 }
 
 Image createImage (String name) {
-	int /*long*/ style = OS.gtk_widget_get_default_style ();
+	long /*int*/ style = OS.gtk_widget_get_default_style ();
 	byte[] buffer = Converter.wcsToMbcs (null, name, true);
-	int /*long*/ pixbuf = OS.gtk_icon_set_render_icon (
+	long /*int*/ pixbuf = OS.gtk_icon_set_render_icon (
 		OS.gtk_icon_factory_lookup_default (buffer), style,
 		OS.GTK_TEXT_DIR_NONE, OS.GTK_STATE_NORMAL, OS.GTK_ICON_SIZE_DIALOG, 0, 0);
 	if (pixbuf == 0) return null;
@@ -965,7 +965,7 @@
 	int height = OS.gdk_pixbuf_get_height (pixbuf);
 	int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
 	boolean hasAlpha = OS.gdk_pixbuf_get_has_alpha (pixbuf);
-	int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+	long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 	byte [] data = new byte [stride * height];
 	OS.memmove (data, pixels, data.length);
 	OS.g_object_unref (pixbuf);
@@ -990,29 +990,29 @@
 	return new Image (this, imageData);
 }
 
-static int /*long*/ createPixbuf(Image image) {
+static long /*int*/ createPixbuf(Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
-	int /*long*/ pixbuf;
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ pixbuf;
 	boolean hasMask = image.mask != 0 && OS.gdk_drawable_get_depth (image.mask) == 1;
 	if (hasMask) {
 		pixbuf = OS.gdk_pixbuf_new (OS.GDK_COLORSPACE_RGB, true, 8, w [0], h [0]);
 		if (pixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable (pixbuf, image.pixmap, colormap, 0, 0, 0, 0, w [0], h [0]);
-		int /*long*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
+		long /*int*/ maskPixbuf = OS.gdk_pixbuf_new(OS.GDK_COLORSPACE_RGB, false, 8, w [0], h [0]);
 		if (maskPixbuf == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 		OS.gdk_pixbuf_get_from_drawable(maskPixbuf, image.mask, 0, 0, 0, 0, 0, w [0], h [0]);
 		int stride = OS.gdk_pixbuf_get_rowstride(pixbuf);
-		int /*long*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
+		long /*int*/ pixels = OS.gdk_pixbuf_get_pixels(pixbuf);
 		byte[] line = new byte[stride];
 		int maskStride = OS.gdk_pixbuf_get_rowstride(maskPixbuf);
-		int /*long*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
+		long /*int*/ maskPixels = OS.gdk_pixbuf_get_pixels(maskPixbuf);
 		byte[] maskLine = new byte[maskStride];
 		for (int y=0; y<h[0]; y++) {
-			int /*long*/ offset = pixels + (y * stride);
+			long /*int*/ offset = pixels + (y * stride);
 			OS.memmove(line, offset, stride);
-			int /*long*/ maskOffset = maskPixels + (y * maskStride);
+			long /*int*/ maskOffset = maskPixels + (y * maskStride);
 			OS.memmove(maskLine, maskOffset, maskStride);
 			for (int x=0; x<w[0]; x++) {
 				if (maskLine[x * 3] == 0) {
@@ -1031,10 +1031,10 @@
 		if (hasAlpha) {
 			byte [] alpha = data.alphaData;
 			int stride = OS.gdk_pixbuf_get_rowstride (pixbuf);
-			int /*long*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
+			long /*int*/ pixels = OS.gdk_pixbuf_get_pixels (pixbuf);
 			byte [] line = new byte [stride];
 			for (int y = 0; y < h [0]; y++) {
-				int /*long*/ offset = pixels + (y * stride);
+				long /*int*/ offset = pixels + (y * stride);
 				OS.memmove (line, offset, stride);
 				for (int x = 0; x < w [0]; x++) {
 					line [x*4+3] = alpha [y*w [0]+x];
@@ -1073,7 +1073,7 @@
 void destroyDisplay () {
 }
 
-int /*long*/ emissionProc (int /*long*/ ihint, int /*long*/ n_param_values, int /*long*/ param_values, int /*long*/ data) {
+long /*int*/ emissionProc (long /*int*/ ihint, long /*int*/ n_param_values, long /*int*/ param_values, long /*int*/ data) {
 	if (OS.gtk_widget_get_toplevel (OS.g_value_peek_pointer(param_values)) == data) {
 		OS.gtk_widget_set_direction (OS.g_value_peek_pointer(param_values), OS.GTK_TEXT_DIR_RTL);
 	}
@@ -1142,7 +1142,7 @@
 	SWT.error (code);
 }
 
-int /*long*/ eventProc (int /*long*/ event, int /*long*/ data) {
+long /*int*/ eventProc (long /*int*/ event, long /*int*/ data) {
 	/*
 	* Use gdk_event_get_time() rather than event.time or
 	* gtk_get_current_event_time().  If the event does not
@@ -1197,7 +1197,7 @@
  *    <li>ERROR_DEVICE_DISPOSED - if the receiver has been disposed</li>
  * </ul>
  */
-public Widget findWidget (int /*long*/ handle) {
+public Widget findWidget (long /*int*/ handle) {
 	checkDevice ();
 	return getWidget (handle);
 }
@@ -1224,7 +1224,7 @@
  * 
  * @since 3.1
  */
-public Widget findWidget (int /*long*/ handle, int /*long*/ id) {
+public Widget findWidget (long /*int*/ handle, long /*int*/ id) {
 	checkDevice ();
 	return null;
 }
@@ -1246,12 +1246,12 @@
  * 
  * @since 3.3
  */
-public Widget findWidget (Widget widget, int /*long*/ id) {
+public Widget findWidget (Widget widget, long /*int*/ id) {
 	checkDevice ();
 	return null;
 }
 
-static int /*long*/ fixedClassInitProc (int /*long*/ g_class, int /*long*/ class_data) {
+static long /*int*/ fixedClassInitProc (long /*int*/ g_class, long /*int*/ class_data) {
 	GtkWidgetClass klass = new GtkWidgetClass ();
 	OS.memmove (klass, g_class);
 	klass.map = fixedMapProc;
@@ -1261,21 +1261,21 @@
 	return 0;
 }
 
-static int /*long*/ fixedMapProc (int /*long*/ handle) {
+static long /*int*/ fixedMapProc (long /*int*/ handle) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.fixedMapProc (handle);
 	return 0;
 }
 
-static int /*long*/ fixedSizeAllocateProc (int /*long*/ handle, int /*long*/ allocation) {
+static long /*int*/ fixedSizeAllocateProc (long /*int*/ handle, long /*int*/ allocation) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.fixedSizeAllocateProc (handle, allocation);
 	return OS.Call (oldFixedSizeAllocateProc, handle, allocation);
 }
 
-static int /*long*/ rendererClassInitProc (int /*long*/ g_class, int /*long*/ class_data) {
+static long /*int*/ rendererClassInitProc (long /*int*/ g_class, long /*int*/ class_data) {
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
 	klass.render = rendererRenderProc;
@@ -1284,28 +1284,28 @@
 	return 0;
 }
 
-static int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ handle, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
+static long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ handle, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.rendererGetSizeProc (cell, handle, cell_area, x_offset, y_offset, width, height);
 	return 0;
 }
 
-static int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ handle, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+static long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ handle, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	Display display = getCurrent ();
 	Widget widget = display.getWidget (handle);
 	if (widget != null) return widget.rendererRenderProc (cell, window, handle, background_area, cell_area, expose_area, flags);
 	return 0;
 }
 
-void flushExposes (int /*long*/ window, boolean all) {
+void flushExposes (long /*int*/ window, boolean all) {
 	OS.gdk_flush ();
 	OS.gdk_flush ();
 	if (OS.GDK_WINDOWING_X11 ()) {
 		this.flushWindow = window;
 		this.flushAll = all;
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-		int /*long*/ xEvent = OS.g_malloc (XEvent.sizeof);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xEvent = OS.g_malloc (XEvent.sizeof);
 		OS.XCheckIfEvent (xDisplay, xEvent, checkIfEventProc, 0);
 		OS.g_free (xEvent);
 		this.flushWindow = 0;
@@ -1358,7 +1358,7 @@
 
 int getCaretBlinkTime () {
 //	checkDevice ();
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	if (settings == 0) return 500;
 	int [] buffer = new int [1];
 	OS.g_object_get (settings, OS.gtk_cursor_blink, buffer, 0);
@@ -1388,9 +1388,9 @@
 public Control getCursorControl () {
 	checkDevice();
 	int[] x = new int[1], y = new int[1];
-	int /*long*/ handle = 0;
-	int /*long*/ [] user_data = new int /*long*/ [1];
-	int /*long*/ window = OS.gdk_window_at_pointer (x,y);
+	long /*int*/ handle = 0;
+	long /*int*/ [] user_data = new long /*int*/ [1];
+	long /*int*/ window = OS.gdk_window_at_pointer (x,y);
 	if (window != 0) {
 		OS.gdk_window_get_user_data (window, user_data);
 		handle = user_data [0];
@@ -1403,8 +1403,8 @@
 		if (!OS.GDK_WINDOWING_X11 ()) return null;
 		OS.gdk_error_trap_push ();
 		int[] unusedInt = new int[1];
-		int /*long*/[] unusedPtr = new int /*long*/[1], buffer = new int /*long*/[1];
-		int /*long*/ xWindow, xParent = OS.XDefaultRootWindow (xDisplay);
+		long /*int*/[] unusedPtr = new long /*int*/[1], buffer = new long /*int*/[1];
+		long /*int*/ xWindow, xParent = OS.XDefaultRootWindow (xDisplay);
 		do {
 			if (OS.XQueryPointer (xDisplay, xParent, unusedPtr, buffer, unusedInt, unusedInt, unusedInt, unusedInt, unusedInt) == 0) {
 				handle = 0;
@@ -1412,7 +1412,7 @@
 			}
 			if ((xWindow = buffer [0]) != 0) {
 				xParent = xWindow;
-				int /*long*/ gdkWindow = OS.gdk_window_lookup (xWindow);
+				long /*int*/ gdkWindow = OS.gdk_window_lookup (xWindow);
 				if (gdkWindow != 0)	{
 					OS.gdk_window_get_user_data (gdkWindow, user_data);
 					if (user_data[0] != 0) handle = user_data[0];	
@@ -1442,7 +1442,7 @@
 	return filterTable.hooks (eventType);
 }
 
-int /*long*/ filterProc (int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data) {
+long /*int*/ filterProc (long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data) {
 	if (data == 0) {
 		/*
 		* Feature in GTK.  When button 4, 5, 6, or 7 is released, GTK
@@ -1599,19 +1599,19 @@
 	return new Point (dpi, dpi);
 }
 
-int /*long*/ gtk_fixed_get_type () {
+long /*int*/ gtk_fixed_get_type () {
 	return fixed_type;
 }
 
-int /*long*/ gtk_cell_renderer_text_get_type () {
+long /*int*/ gtk_cell_renderer_text_get_type () {
 	return text_renderer_type;
 }
 
-int /*long*/ gtk_cell_renderer_pixbuf_get_type () {
+long /*int*/ gtk_cell_renderer_pixbuf_get_type () {
 	return pixbuf_renderer_type;
 }
 
-int /*long*/ gtk_cell_renderer_toggle_get_type () {
+long /*int*/ gtk_cell_renderer_toggle_get_type () {
 	return toggle_renderer_type;
 }
 
@@ -1671,7 +1671,7 @@
  */
 public int getDoubleClickTime () {
 	checkDevice ();
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	int [] buffer = new int [1];
 	OS.g_object_get (settings, OS.gtk_double_click_time, buffer, 0);
 	return buffer [0];
@@ -1696,8 +1696,8 @@
 		return focusControl;
 	}
 	if (activeShell == null) return null;
-	int /*long*/ shellHandle = activeShell.shellHandle;
-	int /*long*/ handle = OS.gtk_window_get_focus (shellHandle);
+	long /*int*/ shellHandle = activeShell.shellHandle;
+	long /*int*/ handle = OS.gtk_window_get_focus (shellHandle);
 	if (handle == 0) return null;
 	do {
 		Widget widget = getWidget (handle);
@@ -1794,12 +1794,12 @@
  */
 Rectangle getWorkArea() {
 	byte[] name = Converter.wcsToMbcs (null, "_NET_WORKAREA", true); //$NON-NLS-1$
-	int /*long*/ atom = OS.gdk_atom_intern (name, true);
+	long /*int*/ atom = OS.gdk_atom_intern (name, true);
 	if (atom == OS.GDK_NONE) return null;
-	int /*long*/[] actualType = new int /*long*/[1];
+	long /*int*/[] actualType = new long /*int*/[1];
 	int[] actualFormat = new int[1];
 	int[] actualLength = new int[1];
-	int /*long*/[] data = new int /*long*/[1];
+	long /*int*/[] data = new long /*int*/[1];
 	if (!OS.gdk_property_get (OS.GDK_ROOT_PARENT (), atom, OS.GDK_NONE, 0, 16, 0, actualType, actualFormat, actualLength, data)) {
 		return null;
 	}
@@ -1830,7 +1830,7 @@
 	checkDevice ();
 	Monitor [] monitors = null;
 	Rectangle workArea = getWorkArea();
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorCount = OS.gdk_screen_get_n_monitors (screen);
 		if (monitorCount > 0) {
@@ -2132,12 +2132,12 @@
 	GdkColor gdkColor;
 	
 	/* Get Tooltip resources */
-	int /*long*/ tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);
+	long /*int*/ tooltipShellHandle = OS.gtk_window_new (OS.GTK_WINDOW_POPUP);
 	if (tooltipShellHandle == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	byte[] gtk_tooltips = Converter.wcsToMbcs (null, "gtk-tooltips", true); //$NON-NLS-1$
 	OS.gtk_widget_set_name (tooltipShellHandle, gtk_tooltips);
 	OS.gtk_widget_realize (tooltipShellHandle);
-	int /*long*/ tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);
+	long /*int*/ tooltipStyle = OS.gtk_widget_get_style (tooltipShellHandle);
 	gdkColor = new GdkColor();
 	OS.gtk_style_get_fg (tooltipStyle, OS.GTK_STATE_NORMAL, gdkColor);
 	COLOR_INFO_FOREGROUND = gdkColor;
@@ -2147,7 +2147,7 @@
 	OS.gtk_widget_destroy (tooltipShellHandle);	
 
 	/* Get Shell resources */
-	int /*long*/ style = OS.gtk_widget_get_style (shellHandle);	
+	long /*int*/ style = OS.gtk_widget_get_style (shellHandle);	
 	gdkColor = new GdkColor();
 	OS.gtk_style_get_black (style, gdkColor);
 	COLOR_WIDGET_DARK_SHADOW = gdkColor;
@@ -2228,8 +2228,8 @@
 public Font getSystemFont () {
 	checkDevice ();
 	if (systemFont != null) return systemFont;
-	int /*long*/ style = OS.gtk_widget_get_style (shellHandle);	
-	int /*long*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
+	long /*int*/ style = OS.gtk_widget_get_style (shellHandle);	
+	long /*int*/ defaultFont = OS.pango_font_description_copy (OS.gtk_style_get_font_desc (style));
 	return systemFont = Font.gtk_new (this, defaultFont);
 }
 
@@ -2267,10 +2267,10 @@
 	}
 }
 
-Widget getWidget (int /*long*/ handle) {
+Widget getWidget (long /*int*/ handle) {
 	if (handle == 0) return null;
 	if (lastWidget != null && lastHandle == handle) return lastWidget;
-	int /*long*/ index = OS.g_object_get_qdata (handle, SWT_OBJECT_INDEX) - 1;
+	long /*int*/ index = OS.g_object_get_qdata (handle, SWT_OBJECT_INDEX) - 1;
 	if (0 <= index && index < widgetTable.length) {
 		lastHandle = handle;
 		return lastWidget = widgetTable [(int)/*64*/index];
@@ -2278,7 +2278,7 @@
 	return null;	
 }
 
-int /*long*/ idleProc (int /*long*/ data) {
+long /*int*/ idleProc (long /*int*/ data) {
 	boolean result = runAsyncMessages (false);
 	if (!result) {
 		synchronized (idleLock) {
@@ -2307,7 +2307,7 @@
 }
 
 void initializeCallbacks () {
-	closures = new int /*long*/ [Widget.LAST_SIGNAL];
+	closures = new long /*int*/ [Widget.LAST_SIGNAL];
 	signalIds = new int [Widget.LAST_SIGNAL];
 
 	/* Cache signals for GtkWidget */
@@ -2509,10 +2509,10 @@
 	* fix is to for the initializaion by creating
 	* a temporary GtkEntry.
 	*/
-	int /*long*/ entry = OS.gtk_entry_new ();
+	long /*int*/ entry = OS.gtk_entry_new ();
 	OS.gtk_widget_destroy (entry);
 	int [] buffer2 = new int [1];
-	int /*long*/ settings = OS.gtk_settings_get_default ();
+	long /*int*/ settings = OS.gtk_settings_get_default ();
 	OS.g_object_get (settings, OS.gtk_entry_select_on_focus, buffer2, 0);
 	entrySelectOnFocus = buffer2 [0] != 0;
 }
@@ -2528,9 +2528,9 @@
 	/* Get the window manager name */
 	windowManager = ""; //$NON-NLS-1$
 	if (OS.GTK_VERSION >= OS.VERSION (2, 2, 0)) {
-		int /*long*/ screen = OS.gdk_screen_get_default ();
+		long /*int*/ screen = OS.gdk_screen_get_default ();
 		if (screen != 0) {
-			int /*long*/ ptr2 = OS.gdk_x11_screen_get_window_manager_name (screen);
+			long /*int*/ ptr2 = OS.gdk_x11_screen_get_window_manager_name (screen);
 			if (ptr2 != 0) {
 				int length = OS.strlen (ptr2);
 				if (length > 0) {
@@ -2556,7 +2556,7 @@
  * @param hDC the platform specific GC handle
  * @param data the platform specific GC data 
  */
-public void internal_dispose_GC (int /*long*/ gdkGC, GCData data) {
+public void internal_dispose_GC (long /*int*/ gdkGC, GCData data) {
 	OS.g_object_unref (gdkGC);
 }
 
@@ -2580,10 +2580,10 @@
  *    <li>ERROR_NO_HANDLES if a handle could not be obtained for gc creation</li>
  * </ul>
  */
-public int /*long*/ internal_new_GC (GCData data) {
+public long /*int*/ internal_new_GC (GCData data) {
 	if (isDisposed()) SWT.error(SWT.ERROR_DEVICE_DISPOSED);
-	int /*long*/ root = OS.GDK_ROOT_PARENT ();
-	int /*long*/ gdkGC = OS.gdk_gc_new (root);
+	long /*int*/ root = OS.GDK_ROOT_PARENT ();
+	long /*int*/ gdkGC = OS.gdk_gc_new (root);
 	if (gdkGC == 0) SWT.error (SWT.ERROR_NO_HANDLES);
 	OS.gdk_gc_set_subwindow (gdkGC, OS.GDK_INCLUDE_INFERIORS);
 	if (data != null) {
@@ -2689,7 +2689,7 @@
 	Point point = new Point (x, y);
 	if (from == to) return point;
 	if (from != null) {
-		int /*long*/ window = from.eventWindow ();
+		long /*int*/ window = from.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		if ((from.style & SWT.MIRRORED) != 0) point.x = from.getClientWidth () - point.x;
@@ -2697,7 +2697,7 @@
 		point.y += origin_y [0];
 	}
 	if (to != null) {
-		int /*long*/ window = to.eventWindow ();
+		long /*int*/ window = to.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		point.x -= origin_x [0];
@@ -2766,7 +2766,7 @@
 	return result [0];
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	Widget widget = getWidget (menu);
 	if (widget == null) return 0;
 	return widget.menuPositionProc (menu, x, y, push_in, user_data);	
@@ -2818,7 +2818,7 @@
 	if (from == to) return rect;
 	boolean fromRTL = false, toRTL = false;
 	if (from != null) {
-		int /*long*/ window = from.eventWindow ();
+		long /*int*/ window = from.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		if (fromRTL = (from.style & SWT.MIRRORED) != 0) rect.x = from.getClientWidth() - rect.x;
@@ -2826,7 +2826,7 @@
 		rect.y += origin_y [0];
 	}
 	if (to != null) {
-		int /*long*/ window = to.eventWindow ();
+		long /*int*/ window = to.eventWindow ();
 		int [] origin_x = new int [1], origin_y = new int [1];
 		OS.gdk_window_get_origin (window, origin_x, origin_y);
 		rect.x -= origin_x [0];
@@ -2837,7 +2837,7 @@
 	return rect;
 }
 
-int /*long*/ mouseHoverProc (int /*long*/ handle) {
+long /*int*/ mouseHoverProc (long /*int*/ handle) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.hoverProc (handle);
@@ -2901,13 +2901,13 @@
 		if (isDisposed ()) error (SWT.ERROR_DEVICE_DISPOSED);
 		if (event == null) error (SWT.ERROR_NULL_ARGUMENT);
 		if (!OS.GDK_WINDOWING_X11()) return false;
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 		int type = event.type;
 		switch (type) {
 			case SWT.KeyDown:
 			case SWT.KeyUp: {
 				int keyCode = 0;
-				int /*long*/ keysym = untranslateKey (event.keyCode);
+				long /*int*/ keysym = untranslateKey (event.keyCode);
 				if (keysym != 0) keyCode = OS.XKeysymToKeycode (xDisplay, keysym);
 				if (keyCode == 0) {
 					char key = event.character;
@@ -2986,7 +2986,7 @@
 void putGdkEvents () {
 	if (gdkEventCount != 0) {
 		for (int i = 0; i < gdkEventCount; i++) {
-			int /*long*/ event = gdkEvents [i];
+			long /*int*/ event = gdkEvents [i];
 			Widget widget = gdkEventWidgets [i];
 			if (widget == null || !widget.isDisposed ()) {
 				OS.gdk_event_put (event);
@@ -3291,9 +3291,9 @@
 	if (filterTable.size () == 0) filterTable = null;
 }
 
-int /*long*/ removeGdkEvent () {
+long /*int*/ removeGdkEvent () {
 	if (gdkEventCount == 0) return 0;
-	int /*long*/ event = gdkEvents [0];
+	long /*int*/ event = gdkEvents [0];
 	--gdkEventCount;
 	System.arraycopy (gdkEvents, 1, gdkEvents, 0, gdkEventCount);
 	System.arraycopy (gdkEventWidgets, 1, gdkEventWidgets, 0, gdkEventCount);
@@ -3342,7 +3342,7 @@
 	eventTable.unhook (eventType, listener);
 }
 
-void removeMouseHoverTimeout (int /*long*/ handle) {
+void removeMouseHoverTimeout (long /*int*/ handle) {
 	if (handle != mouseHoverHandle) return;
 	if (mouseHoverId != 0) OS.gtk_timeout_remove (mouseHoverId);
 	mouseHoverId = 0;
@@ -3359,7 +3359,7 @@
 	}
 }
 
-Widget removeWidget (int /*long*/ handle) {
+Widget removeWidget (long /*int*/ handle) {
 	if (handle == 0) return null;
 	lastWidget = null;
 	Widget widget = null;
@@ -3479,8 +3479,8 @@
 public void setCursorLocation (int x, int y) {
 	checkDevice ();
 	if (OS.GDK_WINDOWING_X11 ()) {
-		int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-		int /*long*/ xWindow = OS.XDefaultRootWindow (xDisplay);
+		long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+		long /*int*/ xWindow = OS.XDefaultRootWindow (xDisplay);
 		OS.XWarpPointer (xDisplay, OS.None, xWindow, 0, 0, 0, 0, x, y);
 	}
 }
@@ -3548,7 +3548,7 @@
 	}
 	if (key.equals (ADD_WIDGET_KEY)) {
 		Object [] data = (Object []) value;
-		int /*long*/ handle = ((LONG) data [0]).value;
+		long /*int*/ handle = ((LONG) data [0]).value;
 		Widget widget = (Widget) data [1];
 		if (widget != null) {
 			addWidget (handle, widget);
@@ -3637,10 +3637,10 @@
 	this.data = data;
 }
 
-int /*long*/ setDirectionProc (int /*long*/ widget, int /*long*/ direction) {
+long /*int*/ setDirectionProc (long /*int*/ widget, long /*int*/ direction) {
 	OS.gtk_widget_set_direction (widget, (int)/*64*/ direction);
 	if (OS.GTK_IS_MENU_ITEM (widget)) {
-		int /*long*/ submenu = OS.gtk_menu_item_get_submenu (widget);
+		long /*int*/ submenu = OS.gtk_menu_item_get_submenu (widget);
 		if (submenu != 0) {
 			OS.gtk_widget_set_direction (submenu, (int)/*64*/ direction);
 			OS.gtk_container_forall (submenu, setDirectionProc, direction);
@@ -3715,9 +3715,9 @@
 		OS.gtk_container_add (preeditWindow, preeditLabel);
 		OS.gtk_widget_show (preeditLabel);
 	}
-	int /*long*/ [] preeditString = new int /*long*/ [1];
-	int /*long*/ [] pangoAttrs = new int /*long*/ [1];
-	int /*long*/ imHandle = control.imHandle ();
+	long /*int*/ [] preeditString = new long /*int*/ [1];
+	long /*int*/ [] pangoAttrs = new long /*int*/ [1];
+	long /*int*/ imHandle = control.imHandle ();
 	OS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, null);
 	if (preeditString [0] != 0 && OS.strlen (preeditString [0]) > 0) {
 		Control widget = control.findBackgroundControl ();
@@ -3771,7 +3771,7 @@
 		fds = OS.g_malloc (OS.GPollFD_sizeof () * allocated_nfds);
 	}
 	max_priority [0] = timeout [0] = 0;
-	int /*long*/ context = OS.g_main_context_default ();
+	long /*int*/ context = OS.g_main_context_default ();
 	boolean result = false;
 	do {
 		if (OS.g_main_context_acquire (context)) {
@@ -3782,7 +3782,7 @@
 				allocated_nfds = nfds;
 				fds = OS.g_malloc (OS.GPollFD_sizeof() * allocated_nfds);
 			}
-			int /*long*/ poll = OS.g_main_context_get_poll_func (context);
+			long /*int*/ poll = OS.g_main_context_get_poll_func (context);
 			if (poll != 0) {
 				if (nfds > 0 || timeout [0] != 0) {
 					/*
@@ -3876,7 +3876,7 @@
 	}
 }
 
-int /*long*/ timerProc (int /*long*/ i) {
+long /*int*/ timerProc (long /*int*/ i) {
 	if (timerList == null) return 0;
 	int index = (int)/*64*/i;
 	if (0 <= index && index < timerList.length) {
@@ -3888,7 +3888,7 @@
 	return 0;
 }
 
-int /*long*/ caretProc (int /*long*/ clientData) {
+long /*int*/ caretProc (long /*int*/ clientData) {
 	caretId = 0;
 	if (currentCaret == null) {
 		return 0;
@@ -3903,19 +3903,19 @@
 	return 0;
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (user_data);
 	if (widget == null) return 0;
 	return widget.sizeAllocateProc (handle, arg0, user_data);
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (user_data);
 	if (widget == null) return 0;
 	return widget.sizeRequestProc (handle, arg0, user_data);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, long /*int*/ data) {
 	Widget widget = getWidget (data);
 	if (widget == null) return 0;
 	return widget.treeSelectionProc (model, path, iter, treeSelection, treeSelectionLength++);
@@ -3973,13 +3973,13 @@
 	caretId = OS.gtk_timeout_add (blinkRate, caretProc, 0); 
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.shellMapProc (handle, arg0, user_data);
 }
 
-int /*long*/ styleSetProc (int /*long*/ gobject, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ styleSetProc (long /*int*/ gobject, long /*int*/ arg1, long /*int*/ user_data) {
 	settingsChanged = true;
 	return 0;
 }
@@ -4087,31 +4087,31 @@
 	return 0;
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, arg1, user_data);
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ user_data) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.windowProc (handle, arg0, arg1, arg2, user_data);
 }
 
-int /*long*/ windowTimerProc (int /*long*/ handle) {
+long /*int*/ windowTimerProc (long /*int*/ handle) {
 	Widget widget = getWidget (handle);
 	if (widget == null) return 0;
 	return widget.timerProc (handle);
diff -ur x86/org/eclipse/swt/widgets/ExpandBar.java x86_64/org/eclipse/swt/widgets/ExpandBar.java
--- x86/org/eclipse/swt/widgets/ExpandBar.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ExpandBar.java	2009-02-11 17:43:50.000000000 -0500
@@ -164,7 +164,7 @@
 		}
 		OS.gtk_container_set_border_width (handle, 0);
 	} else {
-		int /*long*/ topHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
+		long /*int*/ topHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 		if (topHandle == 0) error (SWT.ERROR_NO_HANDLES);
 		OS.gtk_fixed_set_has_window (topHandle, true);
 		if ((style & SWT.V_SCROLL) != 0) {
@@ -238,11 +238,11 @@
 	layoutItems (index, true);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return OS.GTK_VERSION >= OS.VERSION (2, 4, 0) ? fixedHandle : handle;
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null && lastFocus.setFocus ()) return true;
 		for (int i = 0; i < itemCount; i++) {
@@ -354,7 +354,7 @@
 	return spacing;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -375,7 +375,7 @@
 	return super.gtk_button_press_event (widget, event);
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) {
 			GdkEventButton gdkEvent = new GdkEventButton ();
@@ -395,7 +395,7 @@
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		GdkEventExpose gdkEvent = new GdkEventExpose ();
 		OS.memmove(gdkEvent, eventPtr, GdkEventExpose.sizeof);
@@ -413,24 +413,24 @@
 	return super.gtk_expose_event (widget, eventPtr);
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) lastFocus.redraw ();
 	}
 	return super.gtk_focus_in_event(widget, event);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION < OS.VERSION (2, 4, 0)) {
 		if (lastFocus != null) lastFocus.redraw ();
 	}
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		if (!hasFocus ()) return 0;
-		int /*long*/ result = super.gtk_key_press_event (widget, event);
+		long /*int*/ result = super.gtk_key_press_event (widget, event);
 		if (result != 0) return result;
 		int index = 0;
 		while (index < itemCount) {
@@ -544,7 +544,7 @@
 	}
 }
 
-int /*long*/ parentingHandle () {
+long /*int*/ parentingHandle () {
 	return OS.GTK_VERSION >= OS.VERSION (2, 4, 0) ? fixedHandle : handle;
 }
 
@@ -603,7 +603,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 		for (int i = 0; i < itemCount; i++) {
@@ -629,7 +629,7 @@
 	ExpandItem item = items [itemCount - 1];
 	int maxHeight = item.y + getBandHeight () + spacing;
 	if (item.expanded) maxHeight += item.height;
-	int /*long*/ adjustmentHandle = OS.gtk_scrolled_window_get_vadjustment (scrolledHandle);
+	long /*int*/ adjustmentHandle = OS.gtk_scrolled_window_get_vadjustment (scrolledHandle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, adjustmentHandle);
 	yCurrentScroll = (int)adjustment.value;
@@ -649,7 +649,7 @@
 	OS.gtk_scrolled_window_set_policy (scrolledHandle, OS.GTK_POLICY_NEVER, policy);
 	int width = OS.GTK_WIDGET_WIDTH (fixedHandle) - spacing * 2;
 	if (policy == OS.GTK_POLICY_ALWAYS) {
-		int /*long*/ vHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);
+		long /*int*/ vHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR (scrolledHandle);
 		GtkRequisition requisition = new GtkRequisition ();
 		OS.gtk_widget_size_request (vHandle, requisition);
 		width -= requisition.width;
diff -ur x86/org/eclipse/swt/widgets/ExpandItem.java x86_64/org/eclipse/swt/widgets/ExpandItem.java
--- x86/org/eclipse/swt/widgets/ExpandItem.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ExpandItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -38,7 +38,7 @@
 	ExpandBar parent;
 	Control control;
 	ImageList imageList;
-	int /*long*/ clientHandle, boxHandle, labelHandle, imageHandle;
+	long /*int*/ clientHandle, boxHandle, labelHandle, imageHandle;
 	boolean expanded;
 	int x, y, width, height;
 	int imageHeight, imageWidth;
@@ -315,7 +315,7 @@
 	return width;
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	Event event = new Event ();
 	event.item = this;
 	int type = OS.gtk_expander_get_expanded (handle) ? SWT.Collapse : SWT.Expand;
@@ -323,23 +323,23 @@
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	setFocus ();
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 	parent.lastFocus = this;
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	parent.layoutItems (0, false);
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event(widget, event);
 	return 0;
 }
@@ -502,7 +502,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -547,7 +547,7 @@
 			if (image.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 			imageList = new ImageList ();
 			int imageIndex = imageList.add (image);
-			int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+			long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 			OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 			if (text.length () == 0) OS.gtk_widget_hide (labelHandle);
 			OS.gtk_widget_show (imageHandle);
@@ -602,7 +602,7 @@
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case ACTIVATE_INVERSE: {
 			expanded = OS.gtk_expander_get_expanded (handle);
diff -ur x86/org/eclipse/swt/widgets/FileDialog.java x86_64/org/eclipse/swt/widgets/FileDialog.java
--- x86/org/eclipse/swt/widgets/FileDialog.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/FileDialog.java	2009-02-11 17:43:50.000000000 -0500
@@ -44,7 +44,7 @@
 	String fullPath = "";
 	int filterIndex = -1;
 	boolean overwrite = false;
-	int /*long*/ handle;
+	long /*int*/ handle;
 	static final char SEPARATOR = System.getProperty ("file.separator").charAt (0);
 	static final char EXTENSION_SEPARATOR = ';';
 	
@@ -96,18 +96,18 @@
 	/* MULTI is only valid if the native dialog's action is Open */
 	fullPath = null;
 	if ((style & (SWT.SAVE | SWT.MULTI)) == SWT.MULTI) {
-		int /*long*/ list = OS.gtk_file_chooser_get_filenames (handle);
+		long /*int*/ list = OS.gtk_file_chooser_get_filenames (handle);
 		int listLength = OS.g_slist_length (list);
 		fileNames = new String [listLength];
-		int /*long*/ current = list;
+		long /*int*/ current = list;
 		int writePos = 0;
 		for (int i = 0; i < listLength; i++) {
-			int /*long*/ name = OS.g_slist_data (current);
-			int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (name, -1, null, null, null);
+			long /*int*/ name = OS.g_slist_data (current);
+			long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (name, -1, null, null, null);
 			OS.g_free (name);
 			if (utf8Ptr != 0) {
-				int /*long*/ [] items_written = new int /*long*/ [1];
-				int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+				long /*int*/ [] items_written = new long /*int*/ [1];
+				long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 				OS.g_free (utf8Ptr);
 				if (utf16Ptr != 0) {
 					int clength = (int)/*64*/items_written [0];
@@ -127,13 +127,13 @@
 		}
 		OS.g_slist_free (list);
 	} else {
-		int /*long*/ path = OS.gtk_file_chooser_get_filename (handle);
+		long /*int*/ path = OS.gtk_file_chooser_get_filename (handle);
 		if (path != 0) {
-			int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
+			long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (path, -1, null, null, null);
 			OS.g_free (path);
 			if (utf8Ptr != 0) {
-				int /*long*/ [] items_written = new int /*long*/ [1];
-				int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+				long /*int*/ [] items_written = new long /*int*/ [1];
+				long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 				OS.g_free (utf8Ptr);
 				if (utf16Ptr != 0) {
 					int clength = (int)/*64*/items_written [0];
@@ -148,9 +148,9 @@
 		}
 	}
 	filterIndex = -1;
-	int /*long*/ filter = OS.gtk_file_chooser_get_filter (handle);
+	long /*int*/ filter = OS.gtk_file_chooser_get_filter (handle);
 	if (filter != 0) {
-		int /*long*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);
+		long /*int*/ filterNamePtr = OS.gtk_file_filter_get_name (filter);
 		if (filterNamePtr != 0) {
 			int length = OS.strlen (filterNamePtr);
 			byte[] buffer = new byte [length];
@@ -183,23 +183,23 @@
 	filterIndex = -1;
 	GtkFileSelection selection = new GtkFileSelection ();
 	OS.memmove (selection, handle);
-	int /*long*/ entry = selection.selection_entry;
-	int /*long*/ entryText = OS.gtk_entry_get_text (entry);
+	long /*int*/ entry = selection.selection_entry;
+	long /*int*/ entryText = OS.gtk_entry_get_text (entry);
 	int entryLength = OS.strlen (entryText);
 	if (entryLength == 0) {
-		int /*long*/ fileList = selection.file_list;
-		int /*long*/ listSelection = OS.gtk_tree_view_get_selection (fileList);
-		int /*long*/[] model = new int /*long*/[1];
-		int /*long*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);
+		long /*int*/ fileList = selection.file_list;
+		long /*int*/ listSelection = OS.gtk_tree_view_get_selection (fileList);
+		long /*int*/[] model = new long /*int*/[1];
+		long /*int*/ selectedList = OS.gtk_tree_selection_get_selected_rows (listSelection, model);
 		if (selectedList == 0) return null;
 		int listLength = OS.g_list_length (selectedList);
 		if (listLength == 0) {
 			OS.g_list_free (selectedList);
 			return null;
 		}
-		int /*long*/ path = OS.g_list_nth_data (selectedList, 0);
-		int /*long*/ [] ptr = new int /*long*/[1];
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ path = OS.g_list_nth_data (selectedList, 0);
+		long /*int*/ [] ptr = new long /*int*/[1];
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter (model [0], iter, path)) {
 			OS.gtk_tree_model_get (model [0], iter, 0, ptr, -1);
 		}
@@ -216,10 +216,10 @@
 		OS.gtk_entry_set_text (entry, buffer);
 	}
 
-	int /*long*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
-	int /*long*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
-	int /*long*/ [] items_written = new int /*long*/ [1];
-	int /*long*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
+	long /*int*/ fileNamePtr = OS.gtk_file_selection_get_filename (handle);
+	long /*int*/ utf8Ptr = OS.g_filename_to_utf8 (fileNamePtr, -1, null, null, null);
+	long /*int*/ [] items_written = new long /*int*/ [1];
+	long /*int*/ utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 	entryLength = (int)/*64*/items_written [0];
 	char [] buffer = new char [entryLength];
 	OS.memmove (buffer, utf16Ptr, entryLength * 2);
@@ -237,9 +237,9 @@
 	if ((style & SWT.MULTI) == 0) {
 		fileNames = new String[] {fileName};
 	} else {
-		int /*long*/ namesPtr = OS.gtk_file_selection_get_selections (handle);
-		int /*long*/ namesPtr1 = namesPtr;
-		int /*long*/ [] namePtr = new int /*long*/ [1];
+		long /*int*/ namesPtr = OS.gtk_file_selection_get_selections (handle);
+		long /*int*/ namesPtr1 = namesPtr;
+		long /*int*/ [] namePtr = new long /*int*/ [1];
 		OS.memmove (namePtr, namesPtr1, OS.PTR_SIZEOF);
 		int length = 0;
 		while (namePtr[0] != 0) {
@@ -248,11 +248,11 @@
 			OS.memmove(namePtr, namesPtr1, OS.PTR_SIZEOF);
 		}
 		fileNames = new String [length];
-		namePtr = new int /*long*/ [length];
+		namePtr = new long /*int*/ [length];
 		OS.memmove (namePtr, namesPtr, length * OS.PTR_SIZEOF);
 		for (int i = 0; i < length; i++) {			
 			utf8Ptr = OS.g_filename_to_utf8 (namePtr [i], -1, null, null, null);
-			items_written = new int /*long*/ [1];
+			items_written = new long /*int*/ [1];
 			utf16Ptr = OS.g_utf8_to_utf16 (utf8Ptr, -1, null, items_written, null);
 			buffer = new char [(int)/*64*/items_written [0]];
 			OS.memmove (buffer, utf16Ptr, items_written [0] * 2);
@@ -370,7 +370,7 @@
 	int action = (style & SWT.SAVE) != 0 ?
 		OS.GTK_FILE_CHOOSER_ACTION_SAVE :
 		OS.GTK_FILE_CHOOSER_ACTION_OPEN;
-	int /*long*/ shellHandle = parent.topHandle ();
+	long /*int*/ shellHandle = parent.topHandle ();
 	handle = OS.gtk_file_chooser_dialog_new (
 		titleBytes,
 		shellHandle,
@@ -378,7 +378,7 @@
 		OS.GTK_STOCK_CANCEL (), OS.GTK_RESPONSE_CANCEL,
 		OS.GTK_STOCK_OK (), OS.GTK_RESPONSE_OK,
 		0);
-	int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+	long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 	if (pixbufs != 0) {
 		OS.gtk_window_set_icon_list (handle, pixbufs);
 		OS.g_list_free (pixbufs);
@@ -393,7 +393,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -416,9 +416,9 @@
 	byte [] titleBytes = Converter.wcsToMbcs (null, title, true);
 	handle = OS.gtk_file_selection_new (titleBytes);
 	if (parent != null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for (handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -434,7 +434,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -479,7 +479,7 @@
 			* when setting a file name that is not a true canonical path. 
 			* The fix is to use the canonical path.
 			*/
-			int /*long*/ ptr = OS.realpath (buffer, null);
+			long /*int*/ ptr = OS.realpath (buffer, null);
 			if (ptr != 0) {
 				OS.gtk_file_chooser_set_filename (handle, ptr);
 				OS.g_free (ptr);
@@ -491,7 +491,7 @@
 			* when setting a file name that is not a true canonical path. 
 			* The fix is to use the canonical path.
 			*/
-			int /*long*/ ptr = OS.realpath (buffer, null);
+			long /*int*/ ptr = OS.realpath (buffer, null);
 			if (ptr != 0) {
 				OS.gtk_file_chooser_set_current_folder (handle, ptr);
 				OS.g_free (ptr);
@@ -506,7 +506,7 @@
 				* when setting a file name that is not a true canonical path. 
 				* The fix is to use the canonical path.
 				*/
-				int /*long*/ ptr = OS.realpath (buffer, null);
+				long /*int*/ ptr = OS.realpath (buffer, null);
 				if (ptr != 0) {
 					OS.gtk_file_chooser_set_filename (handle, ptr);
 					OS.g_free (ptr);
@@ -527,10 +527,10 @@
 	/* Set the extension filters */
 	if (filterNames == null) filterNames = new String [0];
 	if (filterExtensions == null) filterExtensions = new String [0];
-	int /*long*/ initialFilter = 0;
+	long /*int*/ initialFilter = 0;
 	for (int i = 0; i < filterExtensions.length; i++) {
 		if (filterExtensions [i] != null) {
-			int /*long*/ filter = OS.gtk_file_filter_new ();
+			long /*int*/ filter = OS.gtk_file_filter_new ();
 			if (filterNames.length > i && filterNames [i] != null) {
 				byte [] name = Converter.wcsToMbcs (null, filterNames [i], true);
 				OS.gtk_file_filter_set_name (filter, name);
@@ -586,8 +586,8 @@
 	int length = fullPath.length ();
 	char [] buffer = new char [length + 1];
 	fullPath.getChars (0, length, buffer, 0);
-	int /*long*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
-	int /*long*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
+	long /*int*/ utf8Ptr = OS.g_utf16_to_utf8 (buffer, -1, null, null, null);
+	long /*int*/ fileNamePtr = OS.g_filename_from_utf8 (utf8Ptr, -1, null, null, null);
 	OS.gtk_file_selection_set_filename (handle, fileNamePtr);
 	OS.g_free (utf8Ptr);
 	OS.g_free (fileNamePtr);
diff -ur x86/org/eclipse/swt/widgets/FontDialog.java x86_64/org/eclipse/swt/widgets/FontDialog.java
--- x86/org/eclipse/swt/widgets/FontDialog.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/FontDialog.java	2009-02-11 17:43:50.000000000 -0500
@@ -133,15 +133,15 @@
  * </ul>
  */
 public FontData open () {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	byte [] titleBytes;
 	titleBytes = Converter.wcsToMbcs (null, title, true);
 	Display display = parent != null ? parent.getDisplay (): Display.getCurrent ();
 	handle = OS.gtk_font_selection_dialog_new (titleBytes);
 	if (parent!=null) {
-		int /*long*/ shellHandle = parent.topHandle ();
+		long /*int*/ shellHandle = parent.topHandle ();
 		OS.gtk_window_set_transient_for(handle, shellHandle);
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (shellHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -149,7 +149,7 @@
 	}
 	if (fontData != null) {
 		Font font = new Font (display, fontData);
-		int /*long*/ fontName = OS.pango_font_description_to_string (font.handle);
+		long /*int*/ fontName = OS.pango_font_description_to_string (font.handle);
 		int length = OS.strlen (fontName);
 		byte [] buffer = new byte [length + 1];
 		OS.memmove (buffer, fontName, length);
@@ -164,7 +164,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
@@ -178,12 +178,12 @@
 	}
 	boolean success = response == OS.GTK_RESPONSE_OK; 
 	if (success) {
-		int /*long*/ fontName = OS.gtk_font_selection_dialog_get_font_name (handle);
+		long /*int*/ fontName = OS.gtk_font_selection_dialog_get_font_name (handle);
 		int length = OS.strlen (fontName);
 		byte [] buffer = new byte [length + 1];
 		OS.memmove (buffer, fontName, length);
 		OS.g_free (fontName);
-		int /*long*/ fontDesc = OS.pango_font_description_from_string (buffer);
+		long /*int*/ fontDesc = OS.pango_font_description_from_string (buffer);
 		Font font = Font.gtk_new (display, fontDesc);
 		fontData = font.getFontData () [0];
 		OS.pango_font_description_free (fontDesc);		
diff -ur x86/org/eclipse/swt/widgets/Group.java x86_64/org/eclipse/swt/widgets/Group.java
--- x86/org/eclipse/swt/widgets/Group.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Group.java	2009-02-11 17:43:50.000000000 -0500
@@ -40,7 +40,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Group extends Composite {
-	int /*long*/ clientHandle, labelHandle;
+	long /*int*/ clientHandle, labelHandle;
 	String text = "";
 
 /**
@@ -95,7 +95,7 @@
 	if (!isValidSubclass ()) error (SWT.ERROR_INVALID_SUBCLASS);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	return clientHandle;
 }
 
@@ -156,7 +156,7 @@
 	OS.gtk_widget_set_sensitive (labelHandle, enabled);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
@@ -200,7 +200,7 @@
 	return mnemonicMatch (labelHandle, key);
 }
 
-int /*long*/ parentingHandle() {
+long /*int*/ parentingHandle() {
 	return fixedHandle;
 }
 
@@ -226,7 +226,7 @@
 	setBackgroundColor(fixedHandle, color);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	OS.gtk_widget_modify_font (labelHandle, font);
 }
diff -ur x86/org/eclipse/swt/widgets/ImageList.java x86_64/org/eclipse/swt/widgets/ImageList.java
--- x86/org/eclipse/swt/widgets/ImageList.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ImageList.java	2009-02-11 17:43:50.000000000 -0500
@@ -15,13 +15,13 @@
 import org.eclipse.swt.graphics.*;
 
 class ImageList {
-	int /*long*/ [] pixbufs;
+	long /*int*/ [] pixbufs;
 	int width = -1, height = -1;
 	Image [] images;
 	
 public ImageList() {
 	images = new Image [4];
-	pixbufs = new int /*long*/ [4];
+	pixbufs = new long /*int*/ [4];
 }
 
 public int add (Image image) {
@@ -41,7 +41,7 @@
 		Image [] newImages = new Image [images.length + 4];
 		System.arraycopy (images, 0, newImages, 0, images.length);
 		images = newImages;
-		int /*long*/ [] newPixbufs = new int /*long*/ [pixbufs.length + 4];
+		long /*int*/ [] newPixbufs = new long /*int*/ [pixbufs.length + 4];
 		System.arraycopy (pixbufs, 0, newPixbufs, 0, pixbufs.length);
 		pixbufs = newPixbufs;
 	}
@@ -62,7 +62,7 @@
 	return images [index];
 }
 
-int /*long*/ getPixbuf (int index) {
+long /*int*/ getPixbuf (int index) {
 	return pixbufs [index];
 }
 
@@ -74,7 +74,7 @@
 	return -1;
 }
 
-int indexOf (int /*long*/ pixbuf) {
+int indexOf (long /*int*/ pixbuf) {
 	if (pixbuf == 0) return -1;
 	for (int index=0; index<images.length; index++) {
 		if (pixbuf == pixbufs [index]) return index;
@@ -112,17 +112,17 @@
 void set (int index, Image image) {
 	int [] w = new int [1], h = new int [1];
  	OS.gdk_drawable_get_size (image.pixmap, w, h);
-	int /*long*/ pixbuf = Display.createPixbuf (image);
+	long /*int*/ pixbuf = Display.createPixbuf (image);
 	if (width == -1 || height == -1) {
 		width = w [0];
 		height = h [0];
 	}
 	if (w [0] != width || h [0] != height) {
-		int /*long*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, width, height, OS.GDK_INTERP_BILINEAR);
+		long /*int*/ scaledPixbuf = OS.gdk_pixbuf_scale_simple(pixbuf, width, height, OS.GDK_INTERP_BILINEAR);
 		OS.g_object_unref (pixbuf);
 		pixbuf = scaledPixbuf;
 	}
-	int /*long*/ oldPixbuf = pixbufs [index];
+	long /*int*/ oldPixbuf = pixbufs [index];
 	if (oldPixbuf != 0) {
 		if (images [index] == image) {
 			OS.gdk_pixbuf_copy_area (pixbuf, 0, 0, width, height, oldPixbuf, 0, 0);
diff -ur x86/org/eclipse/swt/widgets/IME.java x86_64/org/eclipse/swt/widgets/IME.java
--- x86/org/eclipse/swt/widgets/IME.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/IME.java	2009-02-11 17:43:50.000000000 -0500
@@ -241,14 +241,14 @@
 	return false; 
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	if (!isInlineEnabled ()) return 0;
-	int /*long*/ imHandle = imHandle ();
+	long /*int*/ imHandle = imHandle ();
 	if (imHandle != 0) OS.gtk_im_context_reset (imHandle);
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ textPtr) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ textPtr) {
 	if (!isInlineEnabled ()) return 0;
 	boolean doit = true;
 	ranges = null;
@@ -277,14 +277,14 @@
 	return doit ? 0 : 1;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	if (!isInlineEnabled ()) return 0;
 	ranges = null;
 	styles = null;
 	commitCount = 0;
-	int /*long*/ imHandle = imHandle ();
-	int /*long*/ [] preeditString = new int /*long*/ [1];
-	int /*long*/ [] pangoAttrs = new int /*long*/ [1];
+	long /*int*/ imHandle = imHandle ();
+	long /*int*/ [] preeditString = new long /*int*/ [1];
+	long /*int*/ [] pangoAttrs = new long /*int*/ [1];
 	int [] cursorPos = new int [1];
 	OS.gtk_im_context_get_preedit_string (imHandle, preeditString, pangoAttrs, cursorPos);
 	caretOffset = cursorPos [0];
@@ -296,7 +296,7 @@
 		chars = Converter.mbcsToWcs (null, buffer);
 		if (pangoAttrs [0] != 0) {
 			int count = 0;
-			int /*long*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);
+			long /*int*/ iterator = OS.pango_attr_list_get_iterator (pangoAttrs [0]);
 			while (OS.pango_attr_iterator_next (iterator)) count++;
 			OS.pango_attr_iterator_destroy (iterator);
 			ranges = new int [count * 2];
@@ -311,7 +311,7 @@
 				ranges [i * 2] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + start [0]);
 				ranges [i * 2 + 1] = (int)/*64*/OS.g_utf8_pointer_to_offset (preeditString [0], preeditString [0] + end [0]) - 1;
 				styles [i] = new TextStyle (null, null, null);
-				int /*long*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);
+				long /*int*/ attr = OS.pango_attr_iterator_get (iterator, OS.PANGO_ATTR_FOREGROUND);
 				if (attr != 0) {
 					OS.memmove (attrColor, attr, PangoAttrColor.sizeof);
 					GdkColor color = new GdkColor ();
@@ -382,7 +382,7 @@
 	return 1;
 }
 
-int /*long*/ imHandle () {
+long /*int*/ imHandle () {
 	return parent.imHandle ();
 }
 
diff -ur x86/org/eclipse/swt/widgets/Label.java x86_64/org/eclipse/swt/widgets/Label.java
--- x86/org/eclipse/swt/widgets/Label.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Label.java	2009-02-11 17:43:50.000000000 -0500
@@ -49,7 +49,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Label extends Control {
-	int /*long*/ frameHandle, labelHandle, imageHandle;
+	long /*int*/ frameHandle, labelHandle, imageHandle;
 	ImageList imageList;
 	Image image;
 	String text;
@@ -107,8 +107,8 @@
 void addRelation (Control control) {
 	if (!control.isDescribedByLabel ()) return;
 	if (labelHandle == 0) return;
-	int /*long*/ accessible = OS.gtk_widget_get_accessible (labelHandle);
-	int /*long*/ controlAccessible = OS.gtk_widget_get_accessible (control.handle);
+	long /*int*/ accessible = OS.gtk_widget_get_accessible (labelHandle);
+	long /*int*/ controlAccessible = OS.gtk_widget_get_accessible (control.handle);
 	if (accessible != 0 && controlAccessible != 0) {
 		OS.atk_object_add_relationship (controlAccessible, OS.ATK_RELATION_LABELLED_BY, accessible);
 	}
@@ -155,11 +155,11 @@
 	* muliple lines of text.
 	*/
 	if (hHint == SWT.DEFAULT && labelHandle != 0) {
-		int /*long*/ layout = OS.gtk_label_get_layout (labelHandle);
-		int /*long*/ context = OS.pango_layout_get_context (layout);
-		int /*long*/ lang = OS.pango_context_get_language (context);
-		int /*long*/ font = getFontDescription ();
-		int /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);
+		long /*int*/ layout = OS.gtk_label_get_layout (labelHandle);
+		long /*int*/ context = OS.pango_layout_get_context (layout);
+		long /*int*/ lang = OS.pango_context_get_language (context);
+		long /*int*/ font = getFontDescription ();
+		long /*int*/ metrics = OS.pango_context_get_metrics (context, font, lang);
 		int ascent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_ascent (metrics));
 		int descent = OS.PANGO_PIXELS (OS.pango_font_metrics_get_descent (metrics));
 		OS.pango_font_metrics_unref (metrics);
@@ -168,7 +168,7 @@
 		OS.g_object_get (labelHandle, OS.ypad, buffer, 0);
 		fontHeight += 2 * buffer [0];
 		if (frameHandle != 0) {
-			int /*long*/ style = OS.gtk_widget_get_style (frameHandle);
+			long /*int*/ style = OS.gtk_widget_get_style (frameHandle);
 			fontHeight += 2 * OS.gtk_style_get_ythickness (style);
 			fontHeight += 2 * OS.gtk_container_get_border_width (frameHandle);
 		}
@@ -230,7 +230,7 @@
 	if (imageHandle != 0) display.removeWidget (imageHandle);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
@@ -392,8 +392,8 @@
 	boolean isRTL = (style & SWT.RIGHT_TO_LEFT) != 0;
 	if (text != null && text.length () != 0) {
 		if (OS.GTK_VERSION >= OS.VERSION(2, 4, 0)) {
-			int /*long*/ layout = OS.gtk_label_get_layout (labelHandle);
-			int /*long*/ linePtr = OS.pango_layout_get_line (layout, 0);
+			long /*int*/ layout = OS.gtk_label_get_layout (labelHandle);
+			long /*int*/ linePtr = OS.pango_layout_get_line (layout, 0);
 			int resolved_dir = OS.pango_layout_line_get_resolved_dir (linePtr);
 			if (resolved_dir == OS.PANGO_DIRECTION_RTL) {
 				isRTL = !isRTL;
@@ -474,7 +474,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -518,7 +518,7 @@
 	if (image != null) {
 		imageList = new ImageList ();
 		int imageIndex = imageList.add (image);
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_hide (labelHandle);
 		OS.gtk_widget_show (imageHandle);
diff -ur x86/org/eclipse/swt/widgets/Link.java x86_64/org/eclipse/swt/widgets/Link.java
--- x86/org/eclipse/swt/widgets/Link.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Link.java	2009-02-11 17:43:50.000000000 -0500
@@ -281,8 +281,8 @@
 	return text;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);	
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);	
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -320,8 +320,8 @@
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_release_event (widget, event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_release_event (widget, event);
 	if (result != 0) return result;
 	if (focusIndex == -1) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
@@ -344,8 +344,8 @@
 	return result;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
-	int /*long*/ result = super.gtk_event_after (widget, gdkEvent);
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
+	long /*int*/ result = super.gtk_event_after (widget, gdkEvent);
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -356,7 +356,7 @@
 	return result;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if ((state & OBSCURED) != 0) return 0;
 	GdkEventExpose gdkEvent = new GdkEventExpose ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventExpose.sizeof);
@@ -397,8 +397,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (focusIndex == -1) return result;
 	GdkEventKey gdkEvent = new GdkEventKey ();
@@ -427,8 +427,8 @@
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_motion_notify_event (widget, event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_motion_notify_event (widget, event);
 	if (result != 0) return result;
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
 	OS.memmove (gdkEvent, event, GdkEventMotion.sizeof);
@@ -661,7 +661,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	layout.setFont (Font.gtk_new (display, font));
 }
diff -ur x86/org/eclipse/swt/widgets/List.java x86_64/org/eclipse/swt/widgets/List.java
--- x86/org/eclipse/swt/widgets/List.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/List.java	2009-02-11 17:43:50.000000000 -0500
@@ -39,7 +39,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class List extends Scrollable {
-	int /*long*/ modelHandle;
+	long /*int*/ modelHandle;
 
 	static final int TEXT_COLUMN = 0;
 
@@ -95,7 +95,7 @@
 	checkWidget();
 	if (string == null) error (SWT.ERROR_NULL_ARGUMENT);
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	OS.gtk_list_store_append (modelHandle, iter);
 	OS.gtk_list_store_set (modelHandle, iter, TEXT_COLUMN, buffer, -1);
@@ -133,7 +133,7 @@
 		error (SWT.ERROR_INVALID_RANGE);
 	}
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	/*
 	* Feature in GTK.  It is much faster to append to a list store
@@ -195,14 +195,14 @@
 	* Columns:
 	* 0 - text
 	*/
-	int /*long*/ [] types = new int /*long*/ [] {OS.G_TYPE_STRING ()};
+	long /*int*/ [] types = new long /*int*/ [] {OS.G_TYPE_STRING ()};
 	modelHandle = OS.gtk_list_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_tree_view_column_pack_start (columnHandle, textRenderer, true);
 	OS.gtk_tree_view_column_add_attribute (columnHandle, textRenderer, OS.text, TEXT_COLUMN);
@@ -211,7 +211,7 @@
 	OS.gtk_container_add (scrolledHandle, handle);
 	
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -275,8 +275,8 @@
 public void deselect (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index); 
 	OS.gtk_tree_selection_unselect_iter (selection, iter);
@@ -306,8 +306,8 @@
 	if (start >= count && end >= count) return;
 	start = Math.min (count - 1, Math.max (0, start));
 	end = Math.min (count - 1, Math.max (0, end));
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index); 
@@ -337,9 +337,9 @@
 public void deselect (int [] indices) {
 	checkWidget();
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<indices.length; i++) {
 		int index = indices [i];
@@ -361,7 +361,7 @@
  */
 public void deselectAll () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -370,10 +370,10 @@
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -386,7 +386,7 @@
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -407,10 +407,10 @@
  */
 public int getFocusIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return -1;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	int [] index = new int []{-1};
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
@@ -441,8 +441,8 @@
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ [] ptr = new long /*int*/ [1];
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
 	OS.g_free (iter);
@@ -483,13 +483,13 @@
 public int getItemHeight () {
 	checkWidget();
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 	if (itemCount == 0) {
 		int [] w = new int [1], h = new int [1];
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
 		return h [0];
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 		int [] w = new int [1], h = new int [1];
@@ -518,9 +518,9 @@
 public String [] getItems () {
 	checkWidget();
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	String [] result = new String [count];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	for (int index=0; index<count; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_model_get (modelHandle, iter, 0, ptr, -1);
@@ -574,7 +574,7 @@
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -597,7 +597,7 @@
  */
 public int getSelectionIndex () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		display.treeSelectionLength  = 0;
@@ -611,14 +611,14 @@
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] index = new int [1];
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				OS.memmove (index, indices, 4);
 				break;
@@ -648,7 +648,7 @@
  */
 public int [] getSelectionIndices () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		display.treeSelectionLength  = 0;
@@ -664,15 +664,15 @@
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -702,24 +702,24 @@
  */
 public int getTopIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return 0;
 	if (path [0] == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 	int[] index = new int [1];
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
 	return index [0];
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	postEvent (SWT.Selection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select list view, when multiple items are already
@@ -733,10 +733,10 @@
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -751,10 +751,10 @@
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -774,8 +774,8 @@
 	return result;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -797,8 +797,8 @@
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -811,14 +811,14 @@
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
 void hookEvents () {
 	super.hookEvents();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 }
@@ -891,15 +891,15 @@
  */
 public boolean isSelected (int index) {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	byte [] buffer = Converter.wcsToMbcs (null, Integer.toString (index), true);
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (buffer);
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (buffer);
 	boolean answer = OS.gtk_tree_selection_path_is_selected (selection, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -934,9 +934,9 @@
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_remove (modelHandle, iter);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -966,8 +966,8 @@
 	if (!(0 <= start && start <= end && end < count)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=end; index>=start; index--) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
@@ -1028,8 +1028,8 @@
 	if (!(0 <= start && start <= end && end < count)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	int last = -1;
 	for (int i=0; i<newIndices.length; i++) {
@@ -1054,7 +1054,7 @@
  */
 public void removeAll () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1100,13 +1100,13 @@
 public void select (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	OS.gtk_tree_selection_select_iter (selection, iter); 
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 		OS.gtk_tree_path_free (path);
 	}
@@ -1143,14 +1143,14 @@
 	if (count == 0 || start >= count) return;
 	start = Math.max (0, start);
 	end = Math.min (end, count - 1);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_selection_select_iter (selection, iter);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -1186,9 +1186,9 @@
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
 	int length = indices.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<length; i++) {
 		int index = indices [i];
@@ -1196,7 +1196,7 @@
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 		OS.gtk_tree_selection_select_iter (selection, iter); 
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -1218,7 +1218,7 @@
 public void selectAll () {
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1232,10 +1232,10 @@
 	*/
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 	if (!(0 <= index && index < count))  return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 	/*
@@ -1302,7 +1302,7 @@
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0)))  {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	byte [] buffer = Converter.wcsToMbcs (null, string, true);
 	OS.gtk_list_store_set (modelHandle, iter, TEXT_COLUMN, buffer, -1);
@@ -1329,11 +1329,11 @@
 	for (int i=0; i<items.length; i++) {
 		if (items [i] == null) error (SWT.ERROR_INVALID_ARGUMENT);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (iter == 0) error (SWT.ERROR_ITEM_NOT_ADDED);
 	for (int i=0; i<items.length; i++) {
 		String string = items [i];
@@ -1503,9 +1503,9 @@
 public void setTopIndex (int index) {
 	checkWidget();
 	if (!(0 <= index && index < OS.gtk_tree_model_iter_n_children (modelHandle, 0))) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0, 0);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
 		/*
@@ -1542,9 +1542,9 @@
 	checkWidget();
 	int index = getSelectionIndex ();
 	if (index == -1) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	/*
 	* This code intentionally commented.
 	* Bug in GTK.  According to the documentation, gtk_tree_view_scroll_to_cell
@@ -1578,9 +1578,9 @@
 	OS.g_free (iter);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) { 
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {
 			int [] index = new int [1];
 			OS.memmove (index, indices, 4);
diff -ur x86/org/eclipse/swt/widgets/MenuItem.java x86_64/org/eclipse/swt/widgets/MenuItem.java
--- x86/org/eclipse/swt/widgets/MenuItem.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/MenuItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -37,7 +37,7 @@
  */
 public class MenuItem extends Item {
 	Menu parent, menu;
-	int /*long*/ groupHandle;
+	long /*int*/ groupHandle;
 	int accelerator;
 	
 /**
@@ -126,11 +126,11 @@
 	createWidget (index);
 }
 
-void addAccelerator (int /*long*/ accelGroup) {
+void addAccelerator (long /*int*/ accelGroup) {
 	updateAccelerator (accelGroup, true);
 }
 
-void addAccelerators (int /*long*/ accelGroup) {
+void addAccelerators (long /*int*/ accelGroup) {
 	addAccelerator (accelGroup);
 	if (menu != null) menu.addAccelerators (accelGroup);
 }
@@ -251,7 +251,7 @@
 			if (groupHandle == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.g_object_ref (groupHandle);
 			OS.gtk_object_sink (groupHandle);
-			int /*long*/ group = OS.gtk_radio_menu_item_get_group (groupHandle);
+			long /*int*/ group = OS.gtk_radio_menu_item_get_group (groupHandle);
 			handle = OS.gtk_radio_menu_item_new_with_label (group, buffer);
 			break;
 		case SWT.CHECK:
@@ -264,10 +264,10 @@
 	}
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
 	if ((style & SWT.SEPARATOR) == 0) {
-		int /*long*/ label = OS.gtk_bin_get_child (handle);
+		long /*int*/ label = OS.gtk_bin_get_child (handle);
 		OS.gtk_accel_label_set_accel_widget (label, 0);
 	}
-	int /*long*/ parentHandle = parent.handle;
+	long /*int*/ parentHandle = parent.handle;
 	boolean enabled = OS.GTK_WIDGET_SENSITIVE (parentHandle);     
 	if (!enabled) OS.GTK_WIDGET_SET_FLAGS (parentHandle, OS.GTK_SENSITIVE);
 	OS.gtk_menu_shell_insert (parentHandle, handle, index);
@@ -299,7 +299,7 @@
 	return accelerator;
 }
 
-int /*long*/ getAccelGroup () {
+long /*int*/ getAccelGroup () {
 	Menu menu = parent;
 	while (menu != null && menu.cascade != null) {
 		menu = menu.cascade.parent;
@@ -400,7 +400,7 @@
 	return OS.gtk_check_menu_item_get_active(handle);
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	if ((style & SWT.CASCADE) != 0 && menu != null) return 0;
 	/*
 	* Bug in GTK.  When an ancestor menu is disabled and
@@ -411,7 +411,7 @@
 	*/
 	if (!isEnabled ()) return 0;
 	Event event = new Event ();
-	int /*long*/ ptr = OS.gtk_get_current_event ();
+	long /*int*/ ptr = OS.gtk_get_current_event ();
 	if (ptr != 0) {
 		GdkEvent gdkEvent = new GdkEvent ();
 		OS.memmove (gdkEvent, ptr, GdkEvent.sizeof);
@@ -438,13 +438,13 @@
 	return 0;
 }
 
-int /*long*/ gtk_select (int /*long*/ item) {
+long /*int*/ gtk_select (long /*int*/ item) {
 	parent.selectedItem = this;
 	sendEvent (SWT.Arm);
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	boolean handled = hooks (SWT.Help);
 	if (handled) {
 		postEvent (SWT.Help);
@@ -503,7 +503,7 @@
 
 void releaseWidget () {
 	super.releaseWidget ();
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	if (groupHandle != 0) OS.g_object_unref (groupHandle);
 	groupHandle = 0;
@@ -511,11 +511,11 @@
 	parent = null;
 }
 
-void removeAccelerator (int /*long*/ accelGroup) {
+void removeAccelerator (long /*int*/ accelGroup) {
 	updateAccelerator (accelGroup, false);
 }
 
-void removeAccelerators (int /*long*/ accelGroup) {
+void removeAccelerators (long /*int*/ accelGroup) {
 	removeAccelerator (accelGroup);
 	if (menu != null) menu.removeAccelerators (accelGroup);
 }
@@ -621,7 +621,7 @@
 public void setAccelerator (int accelerator) {
 	checkWidget();
 	if (this.accelerator == accelerator) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	this.accelerator = accelerator;
 	if (accelGroup != 0) addAccelerator (accelGroup);
@@ -643,7 +643,7 @@
 public void setEnabled (boolean enabled) {
 	checkWidget();
 	if (OS.GTK_WIDGET_SENSITIVE (handle) == enabled) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerator (accelGroup);
 	OS.gtk_widget_set_sensitive (handle, enabled);
 	if (accelGroup != 0) addAccelerator (accelGroup);
@@ -680,8 +680,8 @@
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
-		int /*long*/ imageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ imageHandle = OS.gtk_image_new_from_pixbuf (pixbuf);
 		OS.gtk_image_menu_item_set_image (handle, imageHandle);
 		OS.gtk_widget_show (imageHandle);
 	} else {
@@ -733,7 +733,7 @@
 	/* Assign the new menu */
 	Menu oldMenu = this.menu;
 	if (oldMenu == menu) return;
-	int /*long*/ accelGroup = getAccelGroup ();
+	long /*int*/ accelGroup = getAccelGroup ();
 	if (accelGroup != 0) removeAccelerators (accelGroup);
 	if (oldMenu != null) {
 		oldMenu.cascade = null;
@@ -843,17 +843,17 @@
 	}
 	char [] chars = fixMnemonic (string);
 	byte [] buffer = Converter.wcsToMbcs (null, chars, true);
-	int /*long*/ label = OS.gtk_bin_get_child (handle);
+	long /*int*/ label = OS.gtk_bin_get_child (handle);
 	OS.gtk_label_set_text_with_mnemonic (label, buffer);
 	buffer = Converter.wcsToMbcs (null, accelString, true);
-	int /*long*/ ptr = OS.g_malloc (buffer.length);
+	long /*int*/ ptr = OS.g_malloc (buffer.length);
 	OS.memmove (ptr, buffer, buffer.length);
-	int /*long*/ oldPtr = OS.GTK_ACCEL_LABEL_GET_ACCEL_STRING (label);
+	long /*int*/ oldPtr = OS.GTK_ACCEL_LABEL_GET_ACCEL_STRING (label);
 	OS.GTK_ACCEL_LABEL_SET_ACCEL_STRING (label, ptr);
 	if (oldPtr != 0) OS.g_free (oldPtr);
 }
 
-void updateAccelerator (int /*long*/ accelGroup, boolean add) {
+void updateAccelerator (long /*int*/ accelGroup, boolean add) {
 	if (accelerator == 0 || !getEnabled ()) return;
 	if ((accelerator & SWT.COMMAND) != 0) return;
 	int mask = 0;
diff -ur x86/org/eclipse/swt/widgets/Menu.java x86_64/org/eclipse/swt/widgets/Menu.java
--- x86/org/eclipse/swt/widgets/Menu.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Menu.java	2009-02-11 17:43:50.000000000 -0500
@@ -43,7 +43,7 @@
 	boolean hasLocation;
 	MenuItem cascade, selectedItem;
 	Decorations parent;
-	int /*long*/ imItem, imSeparator, imHandle;
+	long /*int*/ imItem, imSeparator, imHandle;
 	ImageList imageList;
 
 /**
@@ -205,7 +205,7 @@
 					OS.gtk_menu_shell_set_take_focus (handle, false);
 				}
 			}
-			int /*long*/ address = hasLocation ? display.menuPositionProc: 0;
+			long /*int*/ address = hasLocation ? display.menuPositionProc: 0;
 			/*
 			* Bug in GTK.  The timestamp passed into gtk_menu_popup is used
 			* to perform an X pointer grab.  It cannot be zero, else the grab
@@ -221,7 +221,7 @@
 	}
 }
 
-void addAccelerators (int /*long*/ accelGroup) {
+void addAccelerators (long /*int*/ accelGroup) {
 	MenuItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
 		MenuItem item = items[i];
@@ -287,7 +287,7 @@
 	if ((style & SWT.BAR) != 0) {
 		handle = OS.gtk_menu_bar_new ();
 		if (handle == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ vboxHandle = parent.vboxHandle;
+		long /*int*/ vboxHandle = parent.vboxHandle;
 		OS.gtk_container_add (vboxHandle, handle);
 		OS.gtk_box_set_child_packing (vboxHandle, handle, false, true, 0, OS.GTK_PACK_START);
 	} else {
@@ -296,7 +296,7 @@
 	}
 }
 
-void createIMMenu (int /*long*/ imHandle) {
+void createIMMenu (long /*int*/ imHandle) {
 	if (this.imHandle == imHandle) return;
 	this.imHandle = imHandle;
 	if (imHandle == 0) {
@@ -321,7 +321,7 @@
 		OS.gtk_widget_show (imItem);
 		OS.gtk_menu_shell_insert (handle, imItem, -1);
 	}
-	int /*long*/ imSubmenu = OS.gtk_menu_new ();
+	long /*int*/ imSubmenu = OS.gtk_menu_new ();
 	OS.gtk_im_multicontext_append_menuitems (imHandle, imSubmenu);
 	OS.gtk_menu_item_set_submenu (imItem, imSubmenu);
 }
@@ -347,7 +347,7 @@
 	if (!OS.GTK_WIDGET_MAPPED (handle)) {
 		return new Rectangle (0, 0, 0, 0);
 	}
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	int x = origin_x [0] + OS.GTK_WIDGET_X (handle);
@@ -411,13 +411,13 @@
  */
 public MenuItem getItem (int index) {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	int count = OS.g_list_length (list);
 	if (imSeparator != 0) count--;
 	if (imItem != 0) count--;
 	if (!(0 <= index && index < count)) error (SWT.ERROR_INVALID_RANGE);
-	int /*long*/ data = OS.g_list_nth_data (list, index);
+	long /*int*/ data = OS.g_list_nth_data (list, index);
 	OS.g_list_free (list);
 	if (data == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	return (MenuItem) display.getWidget (data);
@@ -435,7 +435,7 @@
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -462,7 +462,7 @@
  */
 public MenuItem [] getItems () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return new MenuItem [0];
 	int count = OS.g_list_length (list);
 	if (imSeparator != 0) count--;
@@ -470,7 +470,7 @@
 	MenuItem [] items = new MenuItem [count];
 	int index = 0;
 	for (int i=0; i<count; i++) {
-		int /*long*/ data = OS.g_list_nth_data (list, i);
+		long /*int*/ data = OS.g_list_nth_data (list, i);
 		MenuItem item = (MenuItem) display.getWidget (data);
 		if (item != null) items [index++] = item; 
 	}
@@ -596,7 +596,7 @@
 	return OS.GTK_WIDGET_MAPPED (handle);
 }
 
-int /*long*/ gtk_hide (int /*long*/ widget) {
+long /*int*/ gtk_hide (long /*int*/ widget) {
 	if ((style & SWT.POP_UP) != 0) {
 		display.activeShell = getShell ();
 	}
@@ -615,7 +615,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_show (int /*long*/ widget) {
+long /*int*/ gtk_show (long /*int*/ widget) {
 	if ((style & SWT.POP_UP) != 0) {
 		display.activeShell = getShell ();
 		return 0;
@@ -625,7 +625,7 @@
 }
 
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	if (sendHelpEvent (helpType)) {
 		OS.gtk_menu_shell_deactivate (handle);
 		return 1;
@@ -710,7 +710,7 @@
 	return getVisible ();
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	/*
 	* Feature in GTK.  The menu position function sets the position of the
 	* top-left pixel of the menu.  If the menu would be off-screen, GTK will
@@ -798,7 +798,7 @@
 	eventTable.unhook (SWT.Show, listener);
 }
 
-void removeAccelerators (int /*long*/ accelGroup) {
+void removeAccelerators (long /*int*/ accelGroup) {
 	MenuItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
 		MenuItem item = items[i];
@@ -830,7 +830,7 @@
 	eventTable.unhook (SWT.Help, listener);
 }
 
-boolean sendHelpEvent (int /*long*/ helpType) {
+boolean sendHelpEvent (long /*int*/ helpType) {
 	if (selectedItem != null && !selectedItem.isDisposed()) {
 		if (selectedItem.hooks (SWT.Help)) {
 			selectedItem.postEvent (SWT.Help);
diff -ur x86/org/eclipse/swt/widgets/MessageBox.java x86_64/org/eclipse/swt/widgets/MessageBox.java
--- x86/org/eclipse/swt/widgets/MessageBox.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/MessageBox.java	2009-02-11 17:43:50.000000000 -0500
@@ -41,7 +41,7 @@
 public class MessageBox extends Dialog {
 
 	String message = "";
-	int /*long*/ handle;
+	long /*int*/ handle;
 /**
  * Constructs a new instance of this class given only its parent.
  *
@@ -127,7 +127,7 @@
  * </ul>
  */
 public int open () {
-	int /*long*/ parentHandle = (parent != null) ? parent.topHandle() : 0;
+	long /*int*/ parentHandle = (parent != null) ? parent.topHandle() : 0;
 	int dialogFlags = OS.GTK_DIALOG_DESTROY_WITH_PARENT;
 	if ((style & (SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL)) != 0) {
 		dialogFlags |= OS.GTK_DIALOG_MODAL;
@@ -141,7 +141,7 @@
 	handle = OS.gtk_message_dialog_new(parentHandle, dialogFlags, messageType, 0, buffer);
 	if (handle == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 	if (parentHandle != 0) {
-		int /*long*/ pixbufs = OS.gtk_window_get_icon_list (parentHandle);
+		long /*int*/ pixbufs = OS.gtk_window_get_icon_list (parentHandle);
 		if (pixbufs != 0) {
 			OS.gtk_window_set_icon_list (handle, pixbufs);
 			OS.g_list_free (pixbufs);
@@ -158,7 +158,7 @@
 		display.setModalDialog (this);
 	}
 	int signalId = 0;
-	int /*long*/ hookId = 0;
+	long /*int*/ hookId = 0;
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		signalId = OS.g_signal_lookup (OS.map, OS.GTK_TYPE_WIDGET());
 		hookId = OS.g_signal_add_emission_hook (signalId, 0, display.emissionProc, handle, 0);
diff -ur x86/org/eclipse/swt/widgets/Monitor.java x86_64/org/eclipse/swt/widgets/Monitor.java
--- x86/org/eclipse/swt/widgets/Monitor.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Monitor.java	2009-02-11 17:43:50.000000000 -0500
@@ -22,7 +22,7 @@
  * @since 3.0
  */
 public final class Monitor {
-	int /*long*/ handle;
+	long /*int*/ handle;
 	int x, y, width, height;
 	int clientX, clientY, clientWidth, clientHeight;
 	
diff -ur x86/org/eclipse/swt/widgets/ProgressBar.java x86_64/org/eclipse/swt/widgets/ProgressBar.java
--- x86/org/eclipse/swt/widgets/ProgressBar.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ProgressBar.java	2009-02-11 17:43:50.000000000 -0500
@@ -160,8 +160,8 @@
 	return SWT.NORMAL;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
 	if (result != 0) return result;
 	/*
 	* Bug in GTK.  When a progress bar has been unrealized after being
@@ -270,7 +270,7 @@
 	//NOT IMPLEMENTED
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	if (isVisible ()) OS.gtk_progress_bar_pulse (handle);
 	return 1;
 }
@@ -293,7 +293,7 @@
 	* but unexpected.  The fix is to force all
 	* outstanding redraws to be delivered.
 	*/
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	OS.gdk_window_process_updates (window, false);
 	OS.gdk_flush ();
 }
diff -ur x86/org/eclipse/swt/widgets/Sash.java x86_64/org/eclipse/swt/widgets/Sash.java
--- x86/org/eclipse/swt/widgets/Sash.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Sash.java	2009-02-11 17:43:50.000000000 -0500
@@ -40,7 +40,7 @@
 public class Sash extends Control {
 	boolean dragging;
 	int startX, startY, lastX, lastY;
-	int /*long*/ defaultCursor;
+	long /*int*/ defaultCursor;
 
 	private final static int INCREMENT = 1;
 	private final static int PAGE_INCREMENT = 9;
@@ -143,12 +143,12 @@
 
 void drawBand (int x, int y, int width, int height) {
 	if ((style & SWT.SMOOTH) != 0) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
 	if (window == 0) return;
 	byte [] bits = {-86, 85, -86, 85, -86, 85, -86, 85};
-	int /*long*/ stipplePixmap = OS.gdk_bitmap_create_from_data (window, bits, 8, 8);
-	int /*long*/ gc = OS.gdk_gc_new (window);
-	int /*long*/ colormap = OS.gdk_colormap_get_system();
+	long /*int*/ stipplePixmap = OS.gdk_bitmap_create_from_data (window, bits, 8, 8);
+	long /*int*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ colormap = OS.gdk_colormap_get_system();
 	GdkColor color = new GdkColor ();
 	OS.gdk_color_white (colormap, color);
 	OS.gdk_gc_set_foreground (gc, color);	
@@ -161,8 +161,8 @@
 	OS.g_object_unref (gc);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -170,7 +170,7 @@
 	if (button != 1) return 0;
 	if (gdkEvent.type == OS.GDK_2BUTTON_PRESS) return 0;
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (widget);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (widget);
 	int [] origin_x = new int [1], origin_y = new int [1];
 	OS.gdk_window_get_origin (window, origin_x, origin_y);
 	startX = (int) (gdkEvent.x_root - origin_x [0]);
@@ -208,8 +208,8 @@
 	return result;	
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_release_event (widget, eventPtr);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_release_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -238,8 +238,8 @@
 	return result;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_focus_in_event (widget, event);
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_focus_in_event (widget, event);
 	if (result != 0) return result;
 	// widget could be disposed at this point
 	if (handle != 0) {
@@ -249,8 +249,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -285,9 +285,9 @@
 			if (newX == lastX && newY == lastY) return result;
 			
 			/* Ensure that the pointer image does not change */
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 			int grabMask = OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK;
-			int /*long*/ gdkCursor = cursor != null ? cursor.handle : defaultCursor;
+			long /*int*/ gdkCursor = cursor != null ? cursor.handle : defaultCursor;
 			int ptrGrabResult = OS.gdk_pointer_grab (window, false, grabMask, window, gdkCursor, OS.GDK_CURRENT_TIME);
 
 			/* The event must be sent because its doit flag is used. */
@@ -324,8 +324,8 @@
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_motion_notify_event (widget, eventPtr);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_motion_notify_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (!dragging) return 0;
 	GdkEventMotion gdkEvent = new GdkEventMotion ();
@@ -387,7 +387,7 @@
 	return result;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
+long /*int*/ gtk_realize (long /*int*/ widget) {
 	setCursor (cursor != null ? cursor.handle : 0);
 	return super.gtk_realize (widget);
 }
@@ -428,7 +428,7 @@
 	eventTable.unhook (SWT.DefaultSelection,listener);	
 }
 
-void setCursor (int /*long*/ cursor) {
+void setCursor (long /*int*/ cursor) {
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 }
 
diff -ur x86/org/eclipse/swt/widgets/Scale.java x86_64/org/eclipse/swt/widgets/Scale.java
--- x86/org/eclipse/swt/widgets/Scale.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Scale.java	2009-02-11 17:43:50.000000000 -0500
@@ -126,7 +126,7 @@
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
+	long /*int*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
 	if (hAdjustment == 0) error (SWT.ERROR_NO_HANDLES);	
 	if ((style & SWT.HORIZONTAL) != 0) {
 		handle = OS.gtk_hscale_new (hAdjustment);
@@ -158,7 +158,7 @@
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.step_increment;
@@ -176,7 +176,7 @@
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.upper;
@@ -194,7 +194,7 @@
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.lower;
@@ -214,7 +214,7 @@
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_increment;
@@ -232,13 +232,13 @@
  */
 public int getSelection () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.value;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	postEvent (SWT.Selection);
 	return 0;
 }
diff -ur x86/org/eclipse/swt/widgets/Scrollable.java x86_64/org/eclipse/swt/widgets/Scrollable.java
--- x86/org/eclipse/swt/widgets/Scrollable.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Scrollable.java	2009-02-11 17:43:50.000000000 -0500
@@ -32,7 +32,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public abstract class Scrollable extends Control {
-	int /*long*/ scrolledHandle;
+	long /*int*/ scrolledHandle;
 	ScrollBar horizontalBar, verticalBar;
 
 /**
@@ -73,7 +73,7 @@
 	super (parent, style);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	return handle;
 }
 
@@ -115,7 +115,7 @@
 	trimWidth  += vScrollBarWidth ();
 	if (scrolledHandle != 0) {
 		if (OS.gtk_scrolled_window_get_shadow_type (scrolledHandle) != OS.GTK_SHADOW_NONE) {
-			int /*long*/ style = OS.gtk_widget_get_style (scrolledHandle);
+			long /*int*/ style = OS.gtk_widget_get_style (scrolledHandle);
 			int xthickness = OS.gtk_style_get_xthickness (style);
 			int ythickness = OS.gtk_style_get_ythickness (style);
 			trimX -= xthickness;
@@ -194,7 +194,7 @@
 public Rectangle getClientArea () {
 	checkWidget ();
 	forceResize ();
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int x = OS.GTK_WIDGET_X (clientHandle);
 	int y = OS.GTK_WIDGET_Y (clientHandle);
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
@@ -232,8 +232,8 @@
 	return verticalBar;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_scroll_event (widget, eventPtr);
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_scroll_event (widget, eventPtr);
 	
 	/*
 	* Feature in GTK.  Scrolled windows do not scroll if the scrollbars
@@ -267,7 +267,7 @@
 
 int hScrollBarWidth() {
 	if (horizontalBar==null) return 0;
-	int /*long*/ hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);
+	long /*int*/ hBarHandle = OS.GTK_SCROLLED_WINDOW_HSCROLLBAR(scrolledHandle);
 	if (hBarHandle==0) return 0;
 	GtkRequisition requisition = new GtkRequisition();
 	OS.gtk_widget_size_request(hBarHandle, requisition);
@@ -311,9 +311,9 @@
 	super.redrawWidget (x, y, width, height, redrawAll, all, trim);
 	if ((OS.GTK_WIDGET_FLAGS (handle) & OS.GTK_REALIZED) == 0) return;
 	if (!trim) return;
-	int /*long*/ topHandle = topHandle (), paintHandle = paintHandle ();
+	long /*int*/ topHandle = topHandle (), paintHandle = paintHandle ();
 	if (topHandle == paintHandle) return;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (topHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	if (redrawAll) {
 		rect.width = OS.GTK_WIDGET_WIDTH (topHandle);
@@ -361,7 +361,7 @@
 	if (scrolledHandle != 0) OS.gtk_widget_show (scrolledHandle);
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	if (fixedHandle != 0) return fixedHandle;
 	if (scrolledHandle != 0) return scrolledHandle;
 	return super.topHandle ();
@@ -373,7 +373,7 @@
 
 int vScrollBarWidth() {
 	if (verticalBar == null) return 0;
-	int /*long*/ vBarHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR(scrolledHandle);
+	long /*int*/ vBarHandle = OS.GTK_SCROLLED_WINDOW_VSCROLLBAR(scrolledHandle);
 	if (vBarHandle == 0) return 0;
 	GtkRequisition requisition = new GtkRequisition();
 	OS.gtk_widget_size_request (vBarHandle, requisition);
diff -ur x86/org/eclipse/swt/widgets/ScrollBar.java x86_64/org/eclipse/swt/widgets/ScrollBar.java
--- x86/org/eclipse/swt/widgets/ScrollBar.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ScrollBar.java	2009-02-11 17:43:50.000000000 -0500
@@ -83,7 +83,7 @@
  */
 public class ScrollBar extends Widget {
 	Scrollable parent;
-	int /*long*/ adjustmentHandle;
+	long /*int*/ adjustmentHandle;
 	int detail;
 	boolean dragSent;
 	
@@ -343,7 +343,7 @@
  */
 public boolean getVisible () {
 	checkWidget ();
-	int /*long*/ scrolledHandle = parent.scrolledHandle;
+	long /*int*/ scrolledHandle = parent.scrolledHandle;
 	int [] hsp = new int [1], vsp = new int [1];
 	OS.gtk_scrolled_window_get_policy (scrolledHandle, hsp, vsp);
 	if ((style & SWT.HORIZONTAL) != 0) {
@@ -353,20 +353,20 @@
 	}
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	detail = OS.GTK_SCROLL_NONE;
 	dragSent = false;	
 	return result;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	detail = (int)/*64*/scroll;
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	Event event = new Event ();
 	dragSent = detail == OS.GTK_SCROLL_JUMP;
 	switch (detail) {
@@ -394,7 +394,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent gtkEvent = new GdkEvent ();
 	OS.memmove (gtkEvent, gdkEvent, GdkEvent.sizeof);
 	switch (gtkEvent.type) {
diff -ur x86/org/eclipse/swt/widgets/Shell.java x86_64/org/eclipse/swt/widgets/Shell.java
--- x86/org/eclipse/swt/widgets/Shell.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Shell.java	2009-02-11 17:43:50.000000000 -0500
@@ -117,7 +117,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Shell extends Decorations {
-	int /*long*/ shellHandle, tooltipsHandle, tooltipWindow, group, modalGroup;
+	long /*int*/ shellHandle, tooltipsHandle, tooltipWindow, group, modalGroup;
 	boolean mapped, moved, resized, opened, fullScreen, showWithParent;
 	int oldX, oldY, oldWidth, oldHeight;
 	int minWidth, minHeight;
@@ -245,7 +245,7 @@
 	this (display, null, style, 0, false);
 }
 
-Shell (Display display, Shell parent, int style, int /*long*/ handle, boolean embedded) {
+Shell (Display display, Shell parent, int style, long /*int*/ handle, boolean embedded) {
 	super ();
 	checkSubclass ();
 	if (display == null) display = Display.getCurrent ();
@@ -347,7 +347,7 @@
 	this (parent != null ? parent.display : null, parent, style, 0, false);
 }
 
-public static Shell gtk_new (Display display, int /*long*/ handle) {
+public static Shell gtk_new (Display display, long /*int*/ handle) {
 	return new Shell (display, null, SWT.NO_TRIM, handle, true);
 }
 
@@ -368,7 +368,7 @@
  * 
  * @since 3.3
  */
-public static Shell internal_new (Display display, int /*long*/ handle) {
+public static Shell internal_new (Display display, long /*int*/ handle) {
 	return new Shell (display, null, SWT.NO_TRIM, handle, false);
 }
 
@@ -418,7 +418,7 @@
 	if (display.ignoreTrim) return;
 	int width = OS.GTK_WIDGET_WIDTH (shellHandle);
 	int height = OS.GTK_WIDGET_HEIGHT (shellHandle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gdk_window_get_frame_extents (window, rect);
 	int trimWidth = Math.max (0, rect.width - width);
@@ -473,7 +473,7 @@
 	if (!force) {
 		if (activeShell == null) return;
 		if (!display.activePending) {
-			int /*long*/ focusHandle = OS.gtk_window_get_focus (activeShell.shellHandle);
+			long /*int*/ focusHandle = OS.gtk_window_get_focus (activeShell.shellHandle);
 			if (focusHandle != 0 && !OS.GTK_WIDGET_HAS_FOCUS (focusHandle)) return;
 		}
 	}
@@ -501,10 +501,10 @@
 	* window.  The fix is to use XSetInputFocus() to force
 	* the focus.
 	*/
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	if ((xFocus || (style & SWT.ON_TOP) != 0) && OS.GDK_WINDOWING_X11 ()) {
-		int /*long*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
-		int /*long*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
+		long /*int*/ xDisplay = OS.gdk_x11_drawable_get_xdisplay (window);
+		long /*int*/ xWindow = OS.gdk_x11_drawable_get_xid (window);
 		OS.gdk_error_trap_push ();
 		/* Use CurrentTime instead of the last event time to ensure that the shell becomes active */
 		OS.XSetInputFocus (xDisplay, xWindow, OS.RevertToParent, OS.CurrentTime);
@@ -534,7 +534,7 @@
 	if (!opened) resized = false;
 }
 
-int /*long*/ childStyle () {
+long /*int*/ childStyle () {
 	return 0;
 }
 
@@ -632,7 +632,7 @@
 	} else {
 		vboxHandle = OS.gtk_bin_get_child (shellHandle);
 		if (vboxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ children = OS.gtk_container_get_children (vboxHandle);
+		long /*int*/ children = OS.gtk_container_get_children (vboxHandle);
 		if (OS.g_list_length (children) > 0) {
 			scrolledHandle = OS.g_list_data (children);
 		}
@@ -652,7 +652,7 @@
 	OS.gtk_widget_realize (shellHandle);
 }
 
-int /*long*/ filterProc (int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data2) {
+long /*int*/ filterProc (long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data2) {
 	int eventType = OS.X_EVENT_TYPE (xEvent);
 	if (eventType != OS.FocusOut && eventType != OS.FocusIn) return 0;
 	XFocusChangeEvent xFocusEvent = new XFocusChangeEvent();
@@ -716,7 +716,7 @@
 	OS.g_signal_connect_closure_by_id (shellHandle, display.signalIds [MAP_EVENT], 0, display.shellMapProcClosure, false);
 	OS.g_signal_connect_closure_by_id (shellHandle, display.signalIds [ENTER_NOTIFY_EVENT], 0, display.closures [ENTER_NOTIFY_EVENT], false);
 	OS.g_signal_connect_closure (shellHandle, OS.move_focus, display.closures [MOVE_FOCUS], false);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	OS.gdk_window_add_filter  (window, display.filterProc, shellHandle);
 }
 
@@ -745,7 +745,7 @@
 	/* Do nothing */
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	return shellHandle;
 }
 
@@ -776,15 +776,15 @@
 	}
 }
 
-int /*long*/ fixedSizeAllocateProc(int /*long*/ widget, int /*long*/ allocationPtr) {
+long /*int*/ fixedSizeAllocateProc(long /*int*/ widget, long /*int*/ allocationPtr) {
 	int clientWidth = 0;
 	if ((style & SWT.MIRRORED) != 0) clientWidth = getClientWidth ();
-	int /*long*/ result = super.fixedSizeAllocateProc (widget, allocationPtr);
+	long /*int*/ result = super.fixedSizeAllocateProc (widget, allocationPtr);
 	if ((style & SWT.MIRRORED) != 0) moveChildren (clientWidth);
 	return result;
 }
 
-void fixStyle (int /*long*/ handle) {
+void fixStyle (long /*int*/ handle) {
 }
 
 void forceResize () {
@@ -1004,7 +1004,7 @@
 	return result;
 }
 
-int /*long*/ gtk_configure_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_configure_event (long /*int*/ widget, long /*int*/ event) {
 	int [] x = new int [1], y = new int [1];
 	OS.gtk_window_get_position (shellHandle, x, y);
 	if (!moved || oldX != x [0] || oldY != y [0]) {
@@ -1017,19 +1017,19 @@
 	return 0;
 }
 
-int /*long*/ gtk_delete_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_delete_event (long /*int*/ widget, long /*int*/ event) {
 	if (isEnabled()) closeWidget ();
 	return 1;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	if (widget != shellHandle) {
 		return super.gtk_enter_notify_event (widget, event);
 	}
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	switch ((int)/*64*/directionType) {
 		case OS.GTK_DIR_TAB_FORWARD:
 		case OS.GTK_DIR_TAB_BACKWARD:
@@ -1046,17 +1046,17 @@
 	return super.gtk_focus (widget, directionType);
 }
 
-int /*long*/ gtk_move_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_move_focus (long /*int*/ widget, long /*int*/ directionType) {
 	Control control = display.getFocusControl ();
 	if (control != null) {
-		int /*long*/ focusHandle = control.focusHandle ();
+		long /*int*/ focusHandle = control.focusHandle ();
 		OS.gtk_widget_child_focus (focusHandle, (int)/*64*/directionType);
 	}
 	OS.g_signal_stop_emission_by_name (shellHandle, OS.move_focus);
 	return 1;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	/* Stop menu mnemonics when the shell is disabled */
 	if (widget == shellHandle) {
 		return (state & DISABLED) != 0 ? 1 : 0;
@@ -1064,7 +1064,7 @@
 	return super.gtk_key_press_event (widget, event);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	int width = OS.GTK_WIDGET_WIDTH (shellHandle);
 	int height = OS.GTK_WIDGET_HEIGHT (shellHandle);
 	if (!resized || oldWidth != width || oldHeight != height) {
@@ -1075,9 +1075,9 @@
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_realize (widget);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+long /*int*/ gtk_realize (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_realize (widget);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	if ((style & SWT.SHELL_TRIM) != SWT.SHELL_TRIM) {
 		int decorations = 0;
 		if ((style & SWT.NO_TRIM) == 0) {
@@ -1103,7 +1103,7 @@
 	return result;
 }
 
-int /*long*/ gtk_window_state_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_window_state_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventWindowState gdkEvent = new GdkEventWindowState ();
 	OS.memmove (gdkEvent, event, GdkEventWindowState.sizeof);
 	minimized = (gdkEvent.new_window_state & OS.GDK_WINDOW_STATE_ICONIFIED) != 0;
@@ -1342,13 +1342,13 @@
 	return result;
 }
 
-void setCursor (int /*long*/ cursor) {
+void setCursor (long /*int*/ cursor) {
 	if (enableWindow != 0) {
 		OS.gdk_window_set_cursor (enableWindow, cursor);
 		if (!OS.GDK_WINDOWING_X11 ()) {
 			OS.gdk_flush ();
 		} else {
-			int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+			long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 			OS.XFlush (xDisplay);
 		}
 	}
@@ -1381,9 +1381,9 @@
 			enableWindow = 0;
 		}
 	} else {
-		int /*long*/ parentHandle = shellHandle;
+		long /*int*/ parentHandle = shellHandle;
 		OS.gtk_widget_realize (parentHandle);
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (parentHandle);
 		Rectangle rect = getBounds ();
 		GdkWindowAttr attributes = new GdkWindowAttr ();
 		attributes.width = rect.width;
@@ -1398,7 +1398,7 @@
 				if (!OS.GDK_WINDOWING_X11 ()) {
 					OS.gdk_flush ();
 				} else {
-					int /*long*/ xDisplay = OS.GDK_DISPLAY ();
+					long /*int*/ xDisplay = OS.GDK_DISPLAY ();
 					OS.XFlush (xDisplay);
 				}
 			}
@@ -1499,13 +1499,13 @@
 		if (menu.parent != this) error (SWT.ERROR_INVALID_PARENT);
 	}
 	if (menuBar != null) {
-		int /*long*/ menuHandle = menuBar.handle;
+		long /*int*/ menuHandle = menuBar.handle;
 		OS.gtk_widget_hide (menuHandle);
 		destroyAccelGroup ();
 	}
 	menuBar = menu;
 	if (menuBar != null) {
-		int /*long*/ menuHandle = menu.handle;
+		long /*int*/ menuHandle = menu.handle;
 		OS.gtk_widget_show (menuHandle);
 		createAccelGroup ();
 		menuBar.addAccelerators (accelGroup);
@@ -1729,7 +1729,7 @@
 	if (mapped) setZOrder (sibling, above, false, false);
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	mapped = true;
 	display.dispatchEvents = null;
 	return 0;
@@ -1743,12 +1743,12 @@
 	if (vboxHandle != 0) OS.gtk_widget_show (vboxHandle);
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	int offset = 16;
 	int [] x = new int [1], y = new int [1];
 	OS.gdk_window_get_pointer (0, x, y, null);
 	y [0] += offset;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		int monitorNumber = OS.gdk_screen_get_monitor_at_point (screen, x[0], y[0]);
 		GdkRectangle dest = new GdkRectangle ();
@@ -1766,7 +1766,7 @@
 	return 0;
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	OS.gtk_widget_hide (handle);
 	return 0;
 }
@@ -1812,7 +1812,7 @@
 }
 
 void updateModal () {
-	int /*long*/ group = 0;
+	long /*int*/ group = 0;
 	if (display.getModalDialog () == null) {
 		Shell modal = getModalShell ();
 		int mask = SWT.PRIMARY_MODAL | SWT.APPLICATION_MODAL | SWT.SYSTEM_MODAL;
@@ -1957,16 +1957,16 @@
 	tooltipsHandle = 0;
 	if (group != 0) OS.g_object_unref (group);
 	group = modalGroup = 0;
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (shellHandle);
 	OS.gdk_window_remove_filter(window, display.filterProc, shellHandle);
 	lastActive = null;
 }
 
-void setToolTipText (int /*long*/ tipWidget, String string) {
+void setToolTipText (long /*int*/ tipWidget, String string) {
 	setToolTipText (tipWidget, tipWidget, string);
 }
 
-void setToolTipText (int /*long*/ rootWidget, int /*long*/ tipWidget, String string) {
+void setToolTipText (long /*int*/ rootWidget, long /*int*/ tipWidget, String string) {
 	if (OS.GTK_VERSION >= OS.VERSION (2, 12, 0)) {
 		byte [] buffer = null;
 		if (string != null && string.length () > 0) {
@@ -1982,12 +1982,12 @@
 		* 2 fake GDK_MOTION_NOTIFY events (to mimic the GTK call) which 
 		* contain the proper x and y coordinates.
 		*/
-		int /*long*/ eventPtr = 0;
-		int /*long*/ tipWindow = OS.GTK_WIDGET_WINDOW (rootWidget);
+		long /*int*/ eventPtr = 0;
+		long /*int*/ tipWindow = OS.GTK_WIDGET_WINDOW (rootWidget);
 		if (tipWindow != 0) {
 			int [] x = new int [1], y = new int [1];
-			int /*long*/ window = OS.gdk_window_at_pointer (x, y);
-			int /*long*/ [] user_data = new int /*long*/ [1];
+			long /*int*/ window = OS.gdk_window_at_pointer (x, y);
+			long /*int*/ [] user_data = new long /*int*/ [1];
 			if (window != 0) OS.gdk_window_get_user_data (window, user_data);
 			if (tipWidget == user_data [0]) {
 				eventPtr = OS.gdk_event_new (OS.GDK_MOTION_NOTIFY);
@@ -2033,7 +2033,7 @@
 		if (OS.GTK_VERSION >= OS.VERSION (2, 2, 1)) {
 			OS.gtk_tooltips_force_window (tooltipsHandle);
 		}
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (tooltipsHandle);
 		if (tipWindow != 0 && tipWindow != tooltipWindow) {
 			OS.g_signal_connect (tipWindow, OS.size_allocate, display.sizeAllocateProc, shellHandle);
 			tooltipWindow = tipWindow;
@@ -2049,9 +2049,9 @@
 		if (tipWindow != 0) {
 			if ((OS.GTK_WIDGET_FLAGS (tipWidget) & (OS.GTK_REALIZED | OS.GTK_VISIBLE)) != 0) {
 				int [] x = new int [1], y = new int [1];
-				int /*long*/ window = OS.gdk_window_at_pointer (x, y);
+				long /*int*/ window = OS.gdk_window_at_pointer (x, y);
 				if (window != 0) {
-					int /*long*/ [] user_data = new int /*long*/ [1];
+					long /*int*/ [] user_data = new long /*int*/ [1];
 					OS.gdk_window_get_user_data (window, user_data);
 					if (tipWidget == user_data [0]) {
 						/* 
@@ -2065,7 +2065,7 @@
 						int handler_id = OS.g_signal_connect (tipWindow, OS.size_request, display.sizeRequestProc, shellHandle);
 						OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);
 						OS.gtk_widget_hide (tipWindow);
-						int /*long*/ data = OS.gtk_tooltips_data_get (tipWidget);
+						long /*int*/ data = OS.gtk_tooltips_data_get (tipWidget);
 						OS.GTK_TOOLTIPS_SET_ACTIVE (tooltipsHandle, data);
 						OS.gtk_tooltips_set_tip (tooltipsHandle, tipWidget, buffer, null);
 						if (handler_id != 0) OS.g_signal_handler_disconnect (tipWindow, handler_id);
diff -ur x86/org/eclipse/swt/widgets/Slider.java x86_64/org/eclipse/swt/widgets/Slider.java
--- x86/org/eclipse/swt/widgets/Slider.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Slider.java	2009-02-11 17:43:50.000000000 -0500
@@ -152,7 +152,7 @@
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
+	long /*int*/ hAdjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 10);
 	if (hAdjustment == 0) error (SWT.ERROR_NO_HANDLES);
 	if ((style & SWT.HORIZONTAL) != 0) {
 		handle = OS.gtk_hscrollbar_new (hAdjustment);
@@ -174,20 +174,20 @@
 	OS.gtk_container_add (fixedHandle, handle);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_button_press_event (widget, eventPtr);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_button_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	detail = OS.GTK_SCROLL_NONE;
 	dragSent = false;
 	return result;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	detail = (int)/*64*/scroll;
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	Event event = new Event ();
 	dragSent = detail == OS.GTK_SCROLL_JUMP;
 	switch (detail) {
@@ -213,7 +213,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent gtkEvent = new GdkEvent ();
 	OS.memmove (gtkEvent, gdkEvent, GdkEvent.sizeof);
 	switch (gtkEvent.type) {
@@ -246,13 +246,13 @@
 
 void register () {
 	super.register ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	display.addWidget (hAdjustment, this);
 }
 
 void deregister () {
 	super.deregister ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	display.removeWidget (hAdjustment);
 }
 
@@ -283,7 +283,7 @@
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.step_increment;
@@ -301,7 +301,7 @@
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.upper;
@@ -319,7 +319,7 @@
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.lower;
@@ -339,7 +339,7 @@
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_increment;
@@ -357,7 +357,7 @@
  */
 public int getSelection () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.value;
@@ -376,7 +376,7 @@
  */
 public int getThumb () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	return (int) adjustment.page_size;
@@ -443,7 +443,7 @@
  */
 public void setMaximum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int minimum = (int) adjustment.lower;
@@ -473,7 +473,7 @@
 public void setMinimum (int value) {
 	checkWidget ();
 	if (value < 0) return;
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int maximum = (int) adjustment.upper;
@@ -553,7 +553,7 @@
 public void setThumb (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	value = (int) Math.min (value, (int)(adjustment.upper - adjustment.lower));
@@ -594,7 +594,7 @@
 	if (increment < 1) return;
 	if (pageIncrement < 1) return;
 	thumb = Math.min (thumb, maximum - minimum);
-	int /*long*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_range_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	adjustment.value = Math.min (Math.max (selection, minimum), maximum - thumb);
diff -ur x86/org/eclipse/swt/widgets/Spinner.java x86_64/org/eclipse/swt/widgets/Spinner.java
--- x86/org/eclipse/swt/widgets/Spinner.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Spinner.java	2009-02-11 17:43:50.000000000 -0500
@@ -45,7 +45,7 @@
 	static final int INNER_BORDER = 2;
 	static final int MIN_ARROW_WIDTH = 6;
 	int lastEventTime = 0;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	
 	/**
@@ -202,8 +202,8 @@
 	if (hHint != SWT.DEFAULT && hHint < 0) hHint = 0;
 	int[] w = new int [1], h = new int [1];
 	OS.gtk_widget_realize (handle);
-	int /*long*/ layout = OS.gtk_entry_get_layout (handle);
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ layout = OS.gtk_entry_get_layout (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -221,7 +221,7 @@
 		string = buffer.toString ();
 	}
 	byte [] buffer1 = Converter.wcsToMbcs (null, string, false);
-	int /*long*/ ptr = OS.pango_layout_get_text (layout);
+	long /*int*/ ptr = OS.pango_layout_get_text (layout);
 	int length = OS.strlen (ptr);
 	byte [] buffer2 = new byte [length];
 	OS.memmove (buffer2, ptr, length);	
@@ -239,7 +239,7 @@
 public Rectangle computeTrim (int x, int y, int width, int height) {
 	checkWidget ();
 	int xborder = 0, yborder = 0;
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		xborder += OS.gtk_style_get_xthickness (style);
 		yborder += OS.gtk_style_get_ythickness (style);
@@ -253,7 +253,7 @@
 		xborder += property [0];
 		yborder += property [0];
 	}
-	int /*long*/ fontDesc = OS.gtk_style_get_font_desc (style);
+	long /*int*/ fontDesc = OS.gtk_style_get_font_desc (style);
 	int fontSize = OS.pango_font_description_get_size (fontDesc);
 	int arrowSize = Math.max (OS.PANGO_PIXELS (fontSize), MIN_ARROW_WIDTH);
 	arrowSize = arrowSize - arrowSize % 2;	
@@ -287,7 +287,7 @@
 	fixedHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (fixedHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
-	int /*long*/ adjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
+	long /*int*/ adjustment = OS.gtk_adjustment_new (0, 0, 100, 1, 10, 0);
 	if (adjustment == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_spin_button_new (adjustment, 1, 0);
 	if (handle == 0) error (SWT.ERROR_NO_HANDLES);
@@ -316,23 +316,23 @@
 
 void deregister () {
 	super.deregister ();
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
-int /*long*/ enterExitHandle () {
+long /*int*/ enterExitHandle () {
 	return fixedHandle;
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -351,7 +351,7 @@
 	*  filter has to be called by SWT.
 	*/	
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -367,7 +367,7 @@
 
 public int getBorderWidth () {
 	checkWidget();
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		 return OS.gtk_style_get_xthickness (style);
 	}
@@ -391,7 +391,7 @@
  */
 public int getIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -412,7 +412,7 @@
  */
 public int getMaximum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -433,7 +433,7 @@
  */
 public int getMinimum () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -455,7 +455,7 @@
  */
 public int getPageIncrement () {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -476,7 +476,7 @@
  */
 public int getSelection () {
 	checkWidget ();	
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int digits = OS.gtk_spin_button_get_digits (handle);
@@ -501,7 +501,7 @@
  */
 public String getText () {
 	checkWidget ();
-	int /*long*/ str = OS.gtk_entry_get_text (handle);
+	long /*int*/ str = OS.gtk_entry_get_text (handle);
 	if (str == 0) return "";
 	int length = OS.strlen (str);
 	byte [] buffer = new byte [length];
@@ -548,26 +548,26 @@
 }
 
 String getDecimalSeparator () {
-	int /*long*/ ptr = OS.localeconv_decimal_point ();
+	long /*int*/ ptr = OS.localeconv_decimal_point ();
 	int length = OS.strlen (ptr);
 	byte [] buffer = new byte [length];
 	OS.memmove (buffer, ptr, length);	
 	return new String (Converter.mbcsToWcs (null, buffer));
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
-	int /*long*/ str = OS.gtk_entry_get_text (handle);
+long /*int*/ gtk_changed (long /*int*/ widget) {
+	long /*int*/ str = OS.gtk_entry_get_text (handle);
 	int length = OS.strlen (str);
 	if (length > 0) {
-		int /*long*/ [] endptr = new int /*long*/ [1];
+		long /*int*/ [] endptr = new long /*int*/ [1];
 		double value = OS.g_strtod (str, endptr);
 		if (endptr [0] == str + length) {
-			int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+			long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 			GtkAdjustment adjustment = new GtkAdjustment ();
 			OS.memmove (adjustment, hAdjustment);
 			if (value != adjustment.value && adjustment.lower <= value && value <= adjustment.upper) {
@@ -584,7 +584,7 @@
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -603,7 +603,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if (!OS.gtk_editable_get_editable (handle)) return 0;
 	int length = OS.strlen (text);
@@ -641,7 +641,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	String newText = verifyText ("", (int)/*64*/start_pos, (int)/*64*/end_pos);
 	if (newText == null) {
@@ -662,17 +662,17 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	if (cursor != null) setCursor (cursor.handle);
 	return super.gtk_event_after (widget, gdkEvent);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 //	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	if (new_text == 0 || new_text_length == 0) return 0;
 	byte [] buffer = new byte [(int)/*64*/new_text_length];
@@ -681,7 +681,7 @@
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	String newText = verifyText (oldText, pos [0], pos [0]);
@@ -713,15 +713,15 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -729,7 +729,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ widget) {
+long /*int*/ gtk_value_changed (long /*int*/ widget) {
 	postEvent (SWT.Selection);
 	return 0;
 }
@@ -742,7 +742,7 @@
 	OS.g_signal_connect_closure (handle, OS.value_changed, display.closures [VALUE_CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.activate, display.closures [ACTIVATE], false);
 	OS.g_signal_connect_closure (handle, OS.populate_popup, display.closures [POPULATE_POPUP], false);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -751,13 +751,13 @@
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	return OS.GTK_ENTRY_IM_CONTEXT (handle);
 }
 
-int /*long*/ paintWindow () {
-	int /*long*/ window = super.paintWindow ();
-	int /*long*/ children = OS.gdk_window_get_children (window);
+long /*int*/ paintWindow () {
+	long /*int*/ window = super.paintWindow ();
+	long /*int*/ children = OS.gdk_window_get_children (window);
 	if (children != 0) window = OS.g_list_data (children);
 	OS.g_list_free (children);
 	return window;
@@ -782,7 +782,7 @@
 
 void register () {
 	super.register ();
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -869,14 +869,14 @@
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ defaultCursor = 0;
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ defaultCursor = 0;
 	if (cursor == 0) defaultCursor = OS.gdk_cursor_new (OS.GDK_XTERM);
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 	if (cursor == 0) OS.gdk_cursor_destroy (defaultCursor);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 }
 
@@ -895,7 +895,7 @@
 public void setIncrement (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -921,7 +921,7 @@
  */
 public void setMaximum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -948,7 +948,7 @@
  */
 public void setMinimum (int value) {
 	checkWidget ();
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -975,7 +975,7 @@
 public void setPageIncrement (int value) {
 	checkWidget ();
 	if (value < 1) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	double newValue = value;
@@ -1062,7 +1062,7 @@
 	if (value < 0) error (SWT.ERROR_INVALID_ARGUMENT);
 	int digits = OS.gtk_spin_button_get_digits (handle);
 	if (value == digits) return;
-	int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+	long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 	GtkAdjustment adjustment = new GtkAdjustment ();
 	OS.memmove (adjustment, hAdjustment);
 	int diff = Math.abs (value - digits);
@@ -1130,9 +1130,9 @@
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext =  imContext ();
+			long /*int*/ imContext =  imContext ();
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -1151,7 +1151,7 @@
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1172,7 +1172,7 @@
 		index = 0;
 	}
 	if (string.length () > 0) {
-		int /*long*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
+		long /*int*/ hAdjustment = OS.gtk_spin_button_get_adjustment (handle);
 		GtkAdjustment adjustment = new GtkAdjustment ();
 		OS.memmove (adjustment, hAdjustment);
 		if (adjustment.lower < 0 && string.charAt (0) == '-') index++;
diff -ur x86/org/eclipse/swt/widgets/TabFolder.java x86_64/org/eclipse/swt/widgets/TabFolder.java
--- x86/org/eclipse/swt/widgets/TabFolder.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TabFolder.java	2009-02-11 17:43:50.000000000 -0500
@@ -97,8 +97,8 @@
 	if (!isValidSubclass ()) error (SWT.ERROR_INVALID_SUBCLASS);
 }
 
-int /*long*/ childStyle () {
-	int /*long*/ rcStyle = OS.gtk_widget_get_modifier_style (handle);
+long /*int*/ childStyle () {
+	long /*int*/ rcStyle = OS.gtk_widget_get_modifier_style (handle);
 	if ((OS.gtk_rc_style_get_color_flags (rcStyle, 0) & OS.GTK_RC_BG) != 0) return 0;
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_widget_get_style (handle);
@@ -136,7 +136,7 @@
 	addListener(SWT.DefaultSelection,typedListener);
 }
 
-int /*long*/ clientHandle () {
+long /*int*/ clientHandle () {
 	int index = OS.gtk_notebook_get_current_page (handle);
 	if (index != -1 && items [index] != null) {
 		return items [index].pageHandle;
@@ -161,7 +161,7 @@
 public Rectangle computeTrim (int x, int y, int width, int height) {
 	checkWidget();
 	forceResize ();
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int clientX = OS.GTK_WIDGET_X (clientHandle);
 	int clientY = OS.GTK_WIDGET_Y (clientHandle);
 	x -= clientX;
@@ -198,7 +198,7 @@
 }
 
 void createItem (TabItem item, int index) {
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	int itemCount = 0;
 	if (list != 0) {
 		itemCount = OS.g_list_length (list);
@@ -210,15 +210,15 @@
 		System.arraycopy (items, 0, newItems, 0, items.length);
 		items = newItems;
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 0);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 0);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
-	int /*long*/ pageHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
+	long /*int*/ pageHandle = OS.g_object_new (display.gtk_fixed_get_type (), 0);
 	if (pageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.g_signal_handlers_block_matched (handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, SWITCH_PAGE);
 	OS.gtk_notebook_insert_page (handle, pageHandle, boxHandle, index);
@@ -280,7 +280,7 @@
 	}
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return handle;
 }
 		
@@ -302,7 +302,7 @@
 public TabItem getItem (int index) {
 	checkWidget();
 	if (!(0 <= index && index < getItemCount())) error (SWT.ERROR_INVALID_RANGE);	
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) error (SWT.ERROR_CANNOT_GET_ITEM);
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -331,7 +331,7 @@
 public TabItem getItem(Point point) {
 	checkWidget();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return null;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -355,7 +355,7 @@
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -425,11 +425,11 @@
 	return OS.gtk_notebook_get_current_page (handle);
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ directionType) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ directionType) {
 	return 0;
 }
 
-int /*long*/ gtk_switch_page (int /*long*/ widget, int /*long*/ page, int /*long*/ page_num) {
+long /*int*/ gtk_switch_page (long /*int*/ widget, long /*int*/ page, long /*int*/ page_num) {
 	int index = OS.gtk_notebook_get_current_page (handle);
 	if (index != -1) {
 		Control control = items [index].getControl ();
@@ -474,7 +474,7 @@
 public int indexOf (TabItem item) {
 	checkWidget();
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return -1;
 	int count = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -491,7 +491,7 @@
 		Control child = children [i];
 		int index = 0;
 		int count = 0;
-		int /*long*/ list = OS.gtk_container_get_children (handle);
+		long /*int*/ list = OS.gtk_container_get_children (handle);
 		if (list != 0) {
 			count = OS.g_list_length (list);
 			OS.g_list_free (list);
@@ -516,7 +516,7 @@
 boolean mnemonicHit (char key) {
 	int itemCount = getItemCount ();
 	for (int i=0; i<itemCount; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -525,7 +525,7 @@
 boolean mnemonicMatch (char key) {
 	int itemCount = getItemCount ();
 	for (int i=0; i<itemCount; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -599,7 +599,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TabItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
diff -ur x86/org/eclipse/swt/widgets/TabItem.java x86_64/org/eclipse/swt/widgets/TabItem.java
--- x86/org/eclipse/swt/widgets/TabItem.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TabItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -33,7 +33,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class TabItem extends Item {
-	int /*long*/ labelHandle, imageHandle, pageHandle;
+	long /*int*/ labelHandle, imageHandle, pageHandle;
 	Control control;
 	TabFolder parent;
 	String toolTipText;
@@ -205,12 +205,12 @@
 	return toolTipText;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event (widget, event);
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
@@ -274,7 +274,7 @@
 	if (oldControl != null) oldControl.setVisible (false);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -297,7 +297,7 @@
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff -ur x86/org/eclipse/swt/widgets/TableColumn.java x86_64/org/eclipse/swt/widgets/TableColumn.java
--- x86/org/eclipse/swt/widgets/TableColumn.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TableColumn.java	2009-02-11 17:43:50.000000000 -0500
@@ -35,7 +35,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class TableColumn extends Item {
-	int /*long*/ labelHandle, imageHandle, buttonHandle;
+	long /*int*/ labelHandle, imageHandle, buttonHandle;
 	Table parent;
 	int modelIndex, lastButton, lastTime, lastX, lastWidth;
 	boolean customDraw, useFixedWidth;
@@ -323,7 +323,7 @@
 	return OS.gtk_tree_view_column_get_width (handle);
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	/*
 	* There is no API to get a double click on a table column.  Normally, when
 	* the mouse is double clicked, this is indicated by GDK_2BUTTON_PRESS
@@ -333,7 +333,7 @@
 	*/
 	boolean doubleClick = false;
 	boolean postEvent = true;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -365,11 +365,11 @@
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	useFixedWidth = false;
 	int x = OS.GTK_WIDGET_X (widget);
 	int width = OS.GTK_WIDGET_WIDTH (widget);
@@ -418,7 +418,7 @@
 			}
 		}
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter_first (parent.modelHandle, iter)) {
 			do {
 				width = Math.max (width, parent.calculateWidth (handle, iter));
@@ -525,7 +525,7 @@
 	parent.createRenderers (handle, modelIndex, index == 0, style);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -540,7 +540,7 @@
 		}
 		int imageIndex = headerImageList.indexOf (image);
 		if (imageIndex == -1) imageIndex = headerImageList.add (image);
-		int /*long*/ pixbuf = headerImageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = headerImageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff -ur x86/org/eclipse/swt/widgets/TableItem.java x86_64/org/eclipse/swt/widgets/TableItem.java
--- x86/org/eclipse/swt/widgets/TableItem.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TableItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -126,7 +126,7 @@
 }
 
 Color _getBackground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.BACKGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getBackground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -137,7 +137,7 @@
 Color _getBackground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getBackground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_BACKGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getBackground ();
@@ -147,13 +147,13 @@
 }
 
 boolean _getChecked () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.CHECKED_COLUMN, ptr, -1);
 	return ptr [0] != 0;
 }
 
 Color _getForeground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.FOREGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getForeground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -164,7 +164,7 @@
 Color _getForeground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getForeground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex =  parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_FOREGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getForeground ();
@@ -176,7 +176,7 @@
 Image _getImage (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return null;
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_PIXBUF, ptr, -1);
 	if (ptr [0] == 0) return null;
@@ -189,7 +189,7 @@
 String _getText (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return "";
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Table.CELL_TEXT, ptr, -1);
 	if (ptr [0] == 0) return "";
@@ -268,14 +268,14 @@
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -356,15 +356,15 @@
 public Rectangle getBounds (int index) {
 	checkWidget();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
@@ -548,18 +548,18 @@
 public Rectangle getImageBounds (int index) {
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle ();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
 	OS.gtk_tree_path_free (path);
@@ -674,19 +674,19 @@
 	if (0 > index || index > count - 1) return new Rectangle (0, 0, 0, 0);
 	// TODO fully test on early and later versions of GTK
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -734,12 +734,12 @@
 
 void redraw () {
 	if ((OS.GTK_WIDGET_FLAGS (parent.handle) & OS.GTK_REALIZED) != 0) {
-		int /*long*/ parentHandle = parent.handle;
-		int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+		long /*int*/ parentHandle = parent.handle;
+		long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 		GdkRectangle rect = new GdkRectangle ();
 		OS.gtk_tree_view_get_cell_area (parentHandle, path, 0, rect);
 		OS.gtk_tree_path_free (path);
-		int /*long*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
+		long /*int*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
 		rect.x = 0;
 		int [] w = new int [1], h = new int [1];
 		OS.gdk_drawable_get_size (window, w, h);
@@ -844,16 +844,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -917,7 +917,7 @@
 	if (oldFont == font) return;
 	this.font = font;
 	if (oldFont != null && oldFont.equals (font)) return;
-	int /*long*/ fontHandle = font != null ? font.handle : 0;
+	long /*int*/ fontHandle = font != null ? font.handle : 0;
 	OS.gtk_list_store_set (parent.modelHandle, handle, Table.FONT_COLUMN, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -968,7 +968,7 @@
 	if (oldFont != null && oldFont.equals (font)) return;
 
 	int modelIndex = parent.columnCount == 0 ? Table.FIRST_COLUMN : parent.columns [index].modelIndex;
-	int /*long*/ fontHandle  = font != null ? font.handle : 0;
+	long /*int*/ fontHandle  = font != null ? font.handle : 0;
 	OS.gtk_list_store_set (parent.modelHandle, handle, modelIndex + Table.CELL_FONT, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -986,16 +986,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1091,16 +1091,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1133,7 +1133,7 @@
 	* GTK+'s "inconsistent" state does not match SWT's concept of grayed.
 	* Render checked+grayed as "inconsistent", unchecked+grayed as blank.
 	*/
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Table.CHECKED_COLUMN, ptr, -1);
 	OS.gtk_list_store_set (parent.modelHandle, handle, Table.GRAYED_COLUMN, ptr [0] == 0 ? false : grayed, -1);
 	cached = true;
@@ -1163,7 +1163,7 @@
 	}
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return;
-	int /*long*/ pixbuf = 0;
+	long /*int*/ pixbuf = 0;
 	if (image != null) {
 		ImageList imageList = parent.imageList;
 		if (imageList == null) imageList = parent.imageList = new ImageList ();
@@ -1191,10 +1191,10 @@
 	if ((parent.style & SWT.VIRTUAL) != 0 && parent.currentItem == null) {
 		if (OS.GTK_VERSION >= OS.VERSION (2, 3, 2)) {
 			if (image != null) {
-				int /*long*/parentHandle = parent.handle;
-				int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
+				long /*int*/parentHandle = parent.handle;
+				long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
 				int [] w = new int [1];
-				int /*long*/ pixbufRenderer = parent.getPixbufRenderer(column);
+				long /*int*/ pixbufRenderer = parent.getPixbufRenderer(column);
 				OS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, null, w);
 				if (w[0] < image.getBounds().width) {
 					/*
@@ -1202,7 +1202,7 @@
 					* are relying on the fact that it is done as part of modifying
 					* the style.
 					*/
-					int /*long*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
+					long /*int*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
 					parent.modifyStyle (parentHandle, style);
 				}
 			} 
diff -ur x86/org/eclipse/swt/widgets/Table.java x86_64/org/eclipse/swt/widgets/Table.java
--- x86/org/eclipse/swt/widgets/Table.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Table.java	2009-02-11 17:43:50.000000000 -0500
@@ -67,9 +67,9 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Table extends Composite {
-	int /*long*/ modelHandle, checkRenderer;
+	long /*int*/ modelHandle, checkRenderer;
 	int itemCount, columnCount, lastIndexOf, sortDirection;
-	int /*long*/ ignoreCell;
+	long /*int*/ ignoreCell;
 	TableItem [] items;
 	TableColumn [] columns;
 	TableItem currentItem;
@@ -169,9 +169,9 @@
 	return checkBits (style, SWT.SINGLE, SWT.MULTI, 0, 0, 0, 0);
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	if (cell == ignoreCell) return 0;
-	int /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
 	int [] index = new int [1];
 	OS.memmove (index, OS.gtk_tree_path_get_indices (path), 4);
 	TableItem item = _getItem (index[0]);
@@ -222,7 +222,7 @@
 			setData = checkData (item);
 		}
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	if (setData) {
 		ptr [0] = 0;
 		if (isPixbuf) {
@@ -331,7 +331,7 @@
 	addListener (SWT.DefaultSelection, typedListener);
 }
 
-int calculateWidth (int /*long*/ column, int /*long*/ iter) {
+int calculateWidth (long /*int*/ column, long /*int*/ iter) {
 	OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 	/*
 	* Bug in GTK.  The width calculated by gtk_tree_view_column_cell_get_size()
@@ -347,11 +347,11 @@
 	int [] w = new int [1];
 	OS.gtk_widget_style_get(handle, OS.focus_line_width, w, 0);
 	width += 2 * w [0];
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ renderer = OS.g_list_data (temp);
+		long /*int*/ renderer = OS.g_list_data (temp);
 		if (renderer != 0) {
 			OS.gtk_cell_renderer_get_size (renderer, handle, null, null, null, w, null);
 			width += w [0];
@@ -519,18 +519,18 @@
 			modelIndex++;
 		}
 		if (modelIndex == modelLength) {
-			int /*long*/ oldModel = modelHandle;
-			int /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
-			int /*long*/ newModel = OS.gtk_list_store_newv (types.length, types);
+			long /*int*/ oldModel = modelHandle;
+			long /*int*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
+			long /*int*/ newModel = OS.gtk_list_store_newv (types.length, types);
 			if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			for (int i=0; i<itemCount; i++) {
-				int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+				long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 				if (newItem == 0) error (SWT.ERROR_NO_HANDLES);
 				OS.gtk_list_store_append (newModel, newItem);
 				TableItem item = items [i];
 				if (item != null) {
-					int /*long*/ oldItem = item.handle;
+					long /*int*/ oldItem = item.handle;
 					for (int j=0; j<modelLength; j++) {
 						OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 						OS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);
@@ -548,7 +548,7 @@
 			modelHandle = newModel;
 		}
 	}
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	if (index == 0 && columnCount > 0) {
 		TableColumn checkColumn = columns [0];
@@ -605,7 +605,7 @@
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	scrolledHandle = OS.gtk_scrolled_window_new (0, 0);
 	if (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ [] types = getColumnTypes (1);
+	long /*int*/ [] types = getColumnTypes (1);
 	modelHandle = OS.gtk_list_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
@@ -620,7 +620,7 @@
 	OS.gtk_container_add (scrolledHandle, handle);
 	
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -664,11 +664,11 @@
 	} else {
 		createColumn (column, index);
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 3);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 3);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
@@ -677,7 +677,7 @@
 	column.labelHandle = labelHandle;
 	column.imageHandle = imageHandle;	
 	OS.gtk_tree_view_column_set_widget (column.handle, boxHandle);
-	int /*long*/ widget = OS.gtk_widget_get_parent (boxHandle);
+	long /*int*/ widget = OS.gtk_widget_get_parent (boxHandle);
 	while (widget != handle) {
 		if (OS.GTK_IS_BUTTON (widget)) {
 			column.buttonHandle = widget;
@@ -734,7 +734,7 @@
 	items [index] = item;
 }
 
-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
+void createRenderers (long /*int*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
 	OS.gtk_tree_view_column_clear (columnHandle);
 	if ((style & SWT.CHECK) != 0 && check) {
 		OS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);
@@ -757,9 +757,9 @@
 			OS.g_object_set_qdata (checkRenderer, Display.SWT_OBJECT_INDEX1, columnHandle);
 		}
 	}
-	int /*long*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
+	long /*int*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
 	if (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
 	
 	if (ownerDraw) {
@@ -862,7 +862,7 @@
 	checkWidget();
 	if (index < 0 || index >= itemCount) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_iter (selection, _getItem (index).handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -887,7 +887,7 @@
 public void deselect (int start, int end) {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		if (index < 0 || index >= itemCount) continue;
@@ -918,7 +918,7 @@
 	checkWidget();
 	if (indices == null) error (SWT.ERROR_NULL_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<indices.length; i++) {
 		int index = indices[i];
@@ -940,7 +940,7 @@
 public void deselectAll () {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -954,7 +954,7 @@
 		index++;
 	}
 	if (index == columnCount) return;
-	int /*long*/ columnHandle = column.handle;
+	long /*int*/ columnHandle = column.handle;
 	if (columnCount == 1) {
 		firstCustomDraw = column.customDraw;
 	}
@@ -962,18 +962,18 @@
 	columns [columnCount] = null;
 	OS.gtk_tree_view_remove_column (handle, columnHandle);
 	if (columnCount == 0) {
-		int /*long*/ oldModel = modelHandle;
-		int /*long*/[] types = getColumnTypes (1);
-		int /*long*/ newModel = OS.gtk_list_store_newv (types.length, types);
+		long /*int*/ oldModel = modelHandle;
+		long /*int*/[] types = getColumnTypes (1);
+		long /*int*/ newModel = OS.gtk_list_store_newv (types.length, types);
 		if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-		int /*long*/ [] ptr = new int /*long*/ [1];
+		long /*int*/ [] ptr = new long /*int*/ [1];
 		for (int i=0; i<itemCount; i++) {
-			int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (newItem == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_list_store_append (newModel, newItem);
 			TableItem item = items [i];
 			if (item != null) {
-				int /*long*/ oldItem = item.handle;
+				long /*int*/ oldItem = item.handle;
 				for (int j=0; j<FIRST_COLUMN; j++) {
 					OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 					OS.gtk_list_store_set (newModel, newItem, j, ptr [0], -1);
@@ -1004,7 +1004,7 @@
 		for (int i=0; i<itemCount; i++) {
 			TableItem item = items [i];
 			if (item != null) {
-				int /*long*/ iter = item.handle;
+				long /*int*/ iter = item.handle;
 				int modelIndex = column.modelIndex;
 				OS.gtk_list_store_set (modelHandle, iter, modelIndex + CELL_PIXBUF, 0, -1);
 				OS.gtk_list_store_set (modelHandle, iter, modelIndex + CELL_TEXT, 0, -1);
@@ -1061,7 +1061,7 @@
 		index++;
 	}
 	if (index == itemCount) return;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_remove (modelHandle, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1073,10 +1073,10 @@
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1089,7 +1089,7 @@
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -1112,13 +1112,13 @@
 	checkWidget ();
 	forceResize ();
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binX = new int [1], binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, binX, binY);
 	int [] fixedX = new int [1], fixedY = new int [1];
 	OS.gdk_window_get_origin (fixedWindow, fixedX, fixedY);
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 	return new Rectangle (fixedX [0] - binX [0], fixedY [0] - binY [0], width, height);
@@ -1183,8 +1183,8 @@
 	return columnCount;
 }
 
-int /*long*/[] getColumnTypes (int columnCount) {
-	int /*long*/[] types = new int /*long*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
+long /*int*/[] getColumnTypes (int columnCount) {
+	long /*int*/[] types = new long /*int*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
 	// per row data
 	types [CHECKED_COLUMN] = OS.G_TYPE_BOOLEAN ();
 	types [GRAYED_COLUMN] = OS.G_TYPE_BOOLEAN ();
@@ -1233,13 +1233,13 @@
 public int [] getColumnOrder () {
 	checkWidget ();
 	if (columnCount == 0) return new int [0];
-	int /*long*/ list = OS.gtk_tree_view_get_columns (handle);
+	long /*int*/ list = OS.gtk_tree_view_get_columns (handle);
 	if (list == 0) return new int [0];
 	int  i = 0, count = OS.g_list_length (list);
 	int [] order = new int [count];
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ column = OS.g_list_data (temp);
+		long /*int*/ column = OS.g_list_data (temp);
 		if (column != 0) {
 			for (int j=0; j<columnCount; j++) {
 				if (columns [j].handle == column) {
@@ -1289,11 +1289,11 @@
 }
 
 TableItem getFocusItem () {
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return null;
 	TableItem item = null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	if (indices != 0) {
 		int [] index = new int []{-1};
 		OS.memmove (index, indices, 4);
@@ -1341,7 +1341,7 @@
 		GtkRequisition requisition = new GtkRequisition ();
 		int height = 0;
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ buttonHandle = columns [i].buttonHandle;
+			long /*int*/ buttonHandle = columns [i].buttonHandle;
 			if (buttonHandle != 0) {
 				OS.gtk_widget_size_request (buttonHandle, requisition);
 				height = Math.max (height, requisition.height);
@@ -1350,8 +1350,8 @@
 		return height;
 	}
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, null, binY);
 	int [] fixedY = new int [1];
@@ -1428,11 +1428,11 @@
 public TableItem getItem (Point point) {
 	checkWidget();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, point.x, point.y, path, null, null, null)) return null;
 	if (path [0] == 0) return null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path [0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path [0]);
 	TableItem item = null;
 	if (indices != 0) {
 		int [] index = new int [1];
@@ -1472,7 +1472,7 @@
 public int getItemHeight () {
 	checkWidget();
 	if (itemCount == 0) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 		int [] w = new int [1], h = new int [1];
 		ignoreSize = true;
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1480,11 +1480,11 @@
 		return h [0];
 	} else {
 		int height = 0;
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		int columnCount = Math.max (1, this.columnCount);
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 			OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 			int [] w = new int [1], h = new int [1];
 			OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1546,14 +1546,14 @@
 	return OS.gtk_tree_view_get_rules_hint (handle);
 }
 
-int /*long*/ getPixbufRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getPixbufRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ pixbufRenderer = 0;
+	long /*int*/ pixbufRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {
 			pixbufRenderer = renderer;
 			break;
@@ -1582,7 +1582,7 @@
  */
 public TableItem [] getSelection () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
@@ -1596,15 +1596,15 @@
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -1632,7 +1632,7 @@
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -1658,25 +1658,25 @@
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 		OS.gtk_tree_selection_selected_foreach (selection, display.treeSelectionProc, handle);
 		if (display.treeSelectionLength == 0) return -1;
 		return display.treeSelection [0];
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	/*
 	* Bug in GTK.  gtk_tree_selection_get_selected_rows() segmentation faults
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] index = new int [1];
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				OS.memmove (index, indices, 4);
 				break;
@@ -1706,7 +1706,7 @@
  */
 public int [] getSelectionIndices () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [itemCount];
@@ -1721,15 +1721,15 @@
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		int [] treeSelection = new int [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ indices = OS.gtk_tree_path_get_indices (data);
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ indices = OS.gtk_tree_path_get_indices (data);
 			if (indices != 0) {
 				int [] index = new int [1];
 				OS.memmove (index, indices, 4);
@@ -1787,14 +1787,14 @@
 	return sortDirection;
 }
 
-int /*long*/ getTextRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getTextRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ textRenderer = 0;
+	long /*int*/ textRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_TEXT (renderer)) {
 			textRenderer = renderer;
 			break;
@@ -1819,22 +1819,22 @@
  */
 public int getTopIndex () {
 	checkWidget();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return 0;
 	if (path [0] == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path[0]);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path[0]);
 	int[] index = new int [1];
 	if (indices != 0) OS.memmove (index, indices, 4);
 	OS.gtk_tree_path_free (path [0]);
 	return index [0];
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select table view, when multiple items are already
@@ -1846,10 +1846,10 @@
 	*/
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1864,10 +1864,10 @@
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1887,13 +1887,13 @@
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	TableItem item = getFocusItem ();
 	if (item != null) {
 		Event event = new Event ();
@@ -1903,8 +1903,8 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -1928,8 +1928,8 @@
 	return result;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -1942,15 +1942,15 @@
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_motion_notify_event (widget, event);
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	TableItem item = null;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 	if (indices != 0) {
 		int [] index = new int []{-1};
 		OS.memmove (index, indices, 4);
@@ -1962,10 +1962,10 @@
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (pathStr);
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (pathStr);
 	if (path == 0) return 0;
-	int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+	long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 	if (indices != 0) {
 		int [] index = new int [1];
 		OS.memmove (index, indices, 4);
@@ -1980,7 +1980,7 @@
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	/*
 	 * Bug in GTK.  For some reason, gtk_widget_size_request() fails
 	 * to include the height of the tree view items when there are
@@ -1991,17 +1991,17 @@
 		super.gtk_widget_size_request (widget, requisition);
 		return;
 	}
-	int /*long*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
+	long /*int*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
 	boolean fixVisible = columns != 0;
 	while (list != 0) {
-		int /*long*/ column = OS.g_list_data (list);
+		long /*int*/ column = OS.g_list_data (list);
 		if (OS.gtk_tree_view_column_get_visible (column)) {
 			fixVisible = false;
 			break;
 		}
 		list = OS.g_list_next (list);
 	}
-	int /*long*/ columnHandle = 0;
+	long /*int*/ columnHandle = 0;
 	if (fixVisible) {
 		columnHandle = OS.g_list_data (columns);
 		OS.gtk_tree_view_column_set_visible (columnHandle, true);
@@ -2014,13 +2014,13 @@
 }
 
 void hideFirstColumn () {
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, false);	
 }
 
 void hookEvents () {
 	super.hookEvents ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 	if (checkRenderer != 0) {
@@ -2106,9 +2106,9 @@
  */
 public boolean isSelected (int index) {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	byte [] buffer = Converter.wcsToMbcs (null, Integer.toString (index), true);
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (buffer);
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (buffer);
 	boolean answer = OS.gtk_tree_selection_path_is_selected (selection, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
@@ -2116,7 +2116,7 @@
 
 boolean mnemonicHit (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -2124,13 +2124,13 @@
 
 boolean mnemonicMatch (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -2219,7 +2219,7 @@
 public void remove (int index) {
 	checkWidget();
 	if (!(0 <= index && index < itemCount)) error (SWT.ERROR_ITEM_NOT_REMOVED);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	TableItem item = items [index];
 	boolean disposed = false;
 	if (item != null) {
@@ -2232,7 +2232,7 @@
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, index);
 	}
 	if (!disposed) {
-		int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+		long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 		OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 		OS.gtk_list_store_remove (modelHandle, iter);
 		OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2264,8 +2264,8 @@
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child (modelHandle, iter, 0, start);
 	int index = start;
 	while (index <= end) {
@@ -2308,9 +2308,9 @@
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	int last = -1;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	for (int i=0; i<newIndices.length; i++) {
 		int index = newIndices [i];
 		if (index != last) {
@@ -2356,7 +2356,7 @@
 	}
 	items = new TableItem [4];
 	itemCount = 0;
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_list_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2411,16 +2411,16 @@
 	eventTable.unhook (SWT.DefaultSelection,listener);	
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
-	int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ widget, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
+	long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
-	int /*long*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
+	long /*int*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
 	if (!ignoreSize && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
-		int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+		long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 		TableItem item = null;
 		if (iter != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			int [] buffer = new int [1];
 			OS.memmove (buffer, OS.gtk_tree_path_get_indices (path), 4);
 			int index = buffer [0];
@@ -2430,7 +2430,7 @@
 		if (item != null) {
 			int columnIndex = 0;
 			if (columnCount > 0) {
-				int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+				long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 				for (int i = 0; i < columnCount; i++) {
 					if (columns [i].handle == columnHandle) {
 						columnIndex = i;
@@ -2469,18 +2469,18 @@
 	return result;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ widget, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ widget, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	TableItem item = null;
-	int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+	long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 	if (iter != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		int [] buffer = new int [1];
 		OS.memmove (buffer, OS.gtk_tree_path_get_indices (path), 4);
 		int index = buffer [0];
 		item = _getItem (index);
 		OS.gtk_tree_path_free (path);
 	}
-	int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+	long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 	int columnIndex = 0;
 	if (columnCount > 0) {
 		for (int i = 0; i < columnCount; i++) {
@@ -2494,7 +2494,7 @@
 		if (OS.GTK_IS_CELL_RENDERER_TOGGLE (cell) || (OS.GTK_IS_CELL_RENDERER_PIXBUF (cell) && (columnIndex != 0 || (style & SWT.CHECK) == 0))) {
 			drawFlags = (int)/*64*/flags;
 			drawState = SWT.FOREGROUND;
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			OS.gtk_tree_model_get (modelHandle, item.handle, Table.BACKGROUND_COLUMN, ptr, -1);
 			if (ptr [0] == 0) {
 				int modelIndex = columnCount == 0 ? Table.FIRST_COLUMN : columns [columnIndex].modelIndex;
@@ -2505,7 +2505,7 @@
 			if ((flags & OS.GTK_CELL_RENDERER_FOCUSED) != 0) drawState |= SWT.FOCUSED;			
 			
 			GdkRectangle rect = new GdkRectangle ();
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 			OS.gtk_tree_path_free (path);
 			
@@ -2549,7 +2549,7 @@
 				if ((drawState & SWT.SELECTED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_SELECTED;
 				if ((drawState & SWT.FOCUSED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_FOCUSED;
 				if ((drawState & SWT.SELECTED) != 0) {
-					int /*long*/ style = OS.gtk_widget_get_style (widget);					
+					long /*int*/ style = OS.gtk_widget_get_style (widget);					
 					//TODO - parity and sorted
 					byte[] detail = Converter.wcsToMbcs (null, "cell_odd", true);
 					OS.gtk_paint_flat_box (style, window, OS.GTK_STATE_SELECTED, OS.GTK_SHADOW_NONE, rect, widget, detail, rect.x, rect.y, rect.width, rect.height);
@@ -2560,7 +2560,7 @@
 			}
 		}
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if ((drawState & SWT.BACKGROUND) != 0 && (drawState & SWT.SELECTED) == 0) {
 		GC gc = new GC (this);
 		gc.setBackground (item.getBackground (columnIndex));
@@ -2570,7 +2570,7 @@
 		gc.dispose ();
 	}
 	if ((drawState & SWT.FOREGROUND) != 0 || OS.GTK_IS_CELL_RENDERER_TOGGLE (cell)) {
-		int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+		long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 		GtkCellRendererClass klass = new GtkCellRendererClass ();
 		OS.memmove (klass, g_class);
 		if (drawForeground != null && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
@@ -2582,7 +2582,7 @@
 		if (OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
 			if (hooks (SWT.PaintItem)) {
 				GdkRectangle rect = new GdkRectangle ();
-				int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+				long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 				OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 				OS.gtk_tree_path_free (path);
 				ignoreSize = true;
@@ -2633,8 +2633,8 @@
 	for (int i=0; i<end; i++) {
 		boolean customDraw = columnCount != 0 ? columns [i].customDraw : firstCustomDraw;
 		if (customDraw) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
-			int /*long*/ textRenderer = getTextRenderer (column);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ textRenderer = getTextRenderer (column);
 			OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, 0, 0, 0);
 			if (columnCount != 0) columns [i].customDraw = false;
 		}
@@ -2658,12 +2658,12 @@
 	checkWidget();
 	if (!(0 <= index && index < itemCount))  return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	TableItem item = _getItem (index);
 	OS.gtk_tree_selection_select_iter (selection, item.handle);
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 		OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 		OS.gtk_tree_path_free (path);
 	}
@@ -2701,13 +2701,13 @@
 	start = Math.max (0, start);
 	end = Math.min (end, itemCount - 1);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int index=start; index<=end; index++) {
 		TableItem item = _getItem (index);
 		OS.gtk_tree_selection_select_iter (selection, item.handle);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -2745,7 +2745,7 @@
 	int length = indices.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	for (int i=0; i<length; i++) {
 		int index = indices [i];
@@ -2753,7 +2753,7 @@
 		TableItem item = _getItem (index);
 		OS.gtk_tree_selection_select_iter (selection, item.handle);
 		if ((style & SWT.SINGLE) != 0) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 			OS.gtk_tree_path_free (path);
 		}
@@ -2777,7 +2777,7 @@
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2792,8 +2792,8 @@
 	*/
 	if (!(0 <= index && index < itemCount))  return;
 	TableItem item = _getItem (index);
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_view_set_cursor (handle, path, 0, false);
 	/*
@@ -2815,9 +2815,9 @@
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
+void setBackgroundPixmap (long /*int*/ pixmap) {
 	super.setBackgroundPixmap (pixmap);
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);	
 }
 
@@ -2881,13 +2881,13 @@
 		seen [index] = true;
 	}
 	for (int i=0; i<order.length; i++) {
-		int /*long*/ column = columns [order [i]].handle;
-		int /*long*/ baseColumn = i == 0 ? 0 : columns [order [i-1]].handle;
+		long /*int*/ column = columns [order [i]].handle;
+		long /*int*/ baseColumn = i == 0 ? 0 : columns [order [i-1]].handle;
 		OS.gtk_tree_view_move_column_after (handle, column, baseColumn);
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TableColumn[] columns = getColumns ();
 	for (int i = 0; i < columns.length; i++) {
@@ -2942,7 +2942,7 @@
 	System.arraycopy (items, 0, newItems, 0, itemCount);
 	items = newItems;
 	if (isVirtual) {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 		for (int i=itemCount; i<count; i++) {
 			OS.gtk_list_store_append (modelHandle, iter);
@@ -2980,12 +2980,12 @@
 
 void setParentBackground () {
 	super.setParentBackground ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);
 }
 
-void setParentWindow (int /*long*/ widget) {
-	int /*long*/ window = eventWindow ();
+void setParentWindow (long /*int*/ widget) {
+	long /*int*/ window = eventWindow ();
 	OS.gtk_widget_set_parent_window (widget, window);
 }
 
@@ -3003,7 +3003,7 @@
 	}
 }
 
-void setScrollWidth (int /*long*/ column, TableItem item) {
+void setScrollWidth (long /*int*/ column, TableItem item) {
 	if (columnCount != 0 || currentItem == item) return;
 	/*
 	* Use GTK_TREE_VIEW_COLUMN_GROW_ONLY on GTK versions < 2.3.2
@@ -3260,7 +3260,7 @@
 public void setTopIndex (int index) {
 	checkWidget();
 	if (!(0 <= index && index < itemCount)) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, _getItem (index).handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, _getItem (index).handle);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0f, 0f);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
 		/*
@@ -3334,10 +3334,10 @@
 	*/
 	int columnCount = Math.max (1, this.columnCount);
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 		if (OS.gtk_tree_view_column_get_visible (column)) return false;
 	}
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, true);
 	return true;
 }
@@ -3368,8 +3368,8 @@
 	showItem (item.handle);
 }
 
-void showItem (int /*long*/ iter) {
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+void showItem (long /*int*/ iter) {
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	/*
 	* This code intentionally commented.
 	* Bug in GTK.  According to the documentation, gtk_tree_view_scroll_to_cell
@@ -3422,9 +3422,9 @@
 	showItem (item.handle);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) { 
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {
 			int [] index = new int [1];
 			OS.memmove (index, indices, 4);
@@ -3443,12 +3443,12 @@
 	* The fix is to queue a resize event for each child to
 	* force the position to be corrected.
 	*/
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ widget = OS.g_list_data (temp);
+		long /*int*/ widget = OS.g_list_data (temp);
 		if (widget != 0) OS.gtk_widget_queue_resize  (widget);
 		temp = OS.g_list_next (temp);
 	}
diff -ur x86/org/eclipse/swt/widgets/Text.java x86_64/org/eclipse/swt/widgets/Text.java
--- x86/org/eclipse/swt/widgets/Text.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Text.java	2009-02-11 17:43:50.000000000 -0500
@@ -46,9 +46,9 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Text extends Scrollable {
-	int /*long*/ bufferHandle;
+	long /*int*/ bufferHandle;
 	int tabs = 8, lastEventTime = 0;
-	int /*long*/ gdkEventKey = 0;
+	long /*int*/ gdkEventKey = 0;
 	int fixStart = -1, fixEnd = -1;
 	boolean doubleClick;
 	String message = "";
@@ -299,7 +299,7 @@
 		OS.gtk_text_buffer_get_end_iter (bufferHandle, position);
 		OS.gtk_text_buffer_insert (bufferHandle, position, buffer, buffer.length);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
@@ -319,8 +319,8 @@
 		OS.gtk_editable_select_region (handle, position, position);
 	} else {
 		byte [] position = new byte [ITER_SIZEOF];
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, insertMark);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, position);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, position);
@@ -334,13 +334,13 @@
 	int[] w = new int [1], h = new int [1];
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_widget_realize (handle);
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		OS.pango_layout_get_size (layout, w, h);
 	} else {
 		byte [] start =  new byte [ITER_SIZEOF], end  =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_bounds (bufferHandle, start, end);
-		int /*long*/ text = OS.gtk_text_buffer_get_text (bufferHandle, start, end, true);
-		int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, text);
+		long /*int*/ text = OS.gtk_text_buffer_get_text (bufferHandle, start, end, true);
+		long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, text);
 		OS.g_free (text);
 		OS.pango_layout_set_width (layout, wHint * OS.PANGO_SCALE);
 		OS.pango_layout_get_size (layout, w, h);
@@ -369,7 +369,7 @@
 	int xborder = 0, yborder = 0;
 	if ((style & SWT.SINGLE) != 0) {
 		if ((style & SWT.BORDER) != 0) {
-			int /*long*/ style = OS.gtk_widget_get_style (handle);
+			long /*int*/ style = OS.gtk_widget_get_style (handle);
 			xborder += OS.gtk_style_get_xthickness (style);
 			yborder += OS.gtk_style_get_ythickness (style);
 		}
@@ -410,7 +410,7 @@
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_copy_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_copy_clipboard (bufferHandle, clipboard);
 	}
 }
@@ -432,7 +432,7 @@
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_cut_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_cut_clipboard (bufferHandle, clipboard, OS.gtk_text_view_get_editable (handle));
 	}
 }
@@ -440,7 +440,7 @@
 void deregister () {
 	super.deregister ();
 	if (bufferHandle != 0) display.removeWidget (bufferHandle);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.removeWidget (imContext);
 }
 
@@ -468,9 +468,9 @@
 			if ((style & SWT.SINGLE) != 0) {
 				int [] index = new int [1];
 				int [] trailing = new int [1];
-				int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+				long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 				OS.pango_layout_xy_to_index (layout, x * OS.PANGO_SCALE, y * OS.PANGO_SCALE, index, trailing);
-				int /*long*/ ptr = OS.pango_layout_get_text (layout);
+				long /*int*/ ptr = OS.pango_layout_get_text (layout);
 				position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 			} else {
 				byte [] p = new byte [ITER_SIZEOF];
@@ -489,15 +489,15 @@
 	return super.dragDetect (x, y, filter, consume);
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
-boolean filterKey (int keyval, int /*long*/ event) {
+boolean filterKey (int keyval, long /*int*/ event) {
 	int time = OS.gdk_event_get_time (event);
 	if (time != lastEventTime) {
 		lastEventTime = time;
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			return OS.gtk_im_context_filter_keypress (imContext, event);
 		}
@@ -516,7 +516,7 @@
 	*  filter has to be called by SWT.
 	*/
 	if (gdkEventKey != 0 && gdkEventKey != -1) {
-		int /*long*/ imContext = imContext ();
+		long /*int*/ imContext = imContext ();
 		if (imContext != 0) {
 			OS.gtk_im_context_filter_keypress (imContext, gdkEventKey);
 			gdkEventKey = -1;
@@ -533,7 +533,7 @@
 public int getBorderWidth () {
 	checkWidget();
 	if ((style & SWT.MULTI) != 0) return super.getBorderWidth ();
-	int /*long*/ style = OS.gtk_widget_get_style (handle);
+	long /*int*/ style = OS.gtk_widget_get_style (handle);
 	if ((this.style & SWT.BORDER) != 0) {
 		 return OS.gtk_style_get_xthickness (style);
 	}
@@ -557,7 +557,7 @@
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) return 1;
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	return OS.gtk_text_iter_get_line (position);
 }
@@ -585,7 +585,7 @@
 		}
 		int [] offset_x = new int [1], offset_y = new int [1];
 		OS.gtk_entry_get_layout_offsets (handle, offset_x, offset_y);
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		PangoRectangle pos = new PangoRectangle ();
 		OS.pango_layout_index_to_pos (layout, index, pos);
 		int x = offset_x [0] + OS.PANGO_PIXELS (pos.x) - getBorderWidth ();
@@ -593,7 +593,7 @@
 		return new Point (x, y);
 	}
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_text_view_get_iter_location (handle, position, rect);
@@ -622,7 +622,7 @@
 		return OS.gtk_editable_get_position (handle);
 	}
 	byte [] position = new byte [ITER_SIZEOF];
-	int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_buffer_get_iter_at_mark (bufferHandle, position, mark);
 	return OS.gtk_text_iter_get_offset (position);
 }
@@ -640,7 +640,7 @@
 public int getCharCount () {
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		return (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	return OS.gtk_text_buffer_get_char_count (bufferHandle);
@@ -812,9 +812,9 @@
 	if ((style & SWT.SINGLE) != 0) {
 		int [] index = new int [1];
 		int [] trailing = new int [1];
-		int /*long*/ layout = OS.gtk_entry_get_layout (handle);
+		long /*int*/ layout = OS.gtk_entry_get_layout (handle);
 		OS.pango_layout_xy_to_index (layout, point.x * OS.PANGO_SCALE, point.y * OS.PANGO_SCALE, index, trailing);
-		int /*long*/ ptr = OS.pango_layout_get_text (layout);
+		long /*int*/ ptr = OS.pango_layout_get_text (layout);
 		position = (int)/*64*/OS.g_utf8_pointer_to_offset (ptr, ptr + index[0]) + trailing[0];
 	} else {
 		byte [] p = new byte [ITER_SIZEOF];
@@ -910,7 +910,7 @@
 
 int getTabWidth (int tabs) {
 	byte[] buffer = Converter.wcsToMbcs(null, " ", true);
-	int /*long*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
+	long /*int*/ layout = OS.gtk_widget_create_pango_layout (handle, buffer);
 	int [] width = new int [1];
 	int [] height = new int [1];
 	OS.pango_layout_get_size (layout, width, height);
@@ -934,7 +934,7 @@
  */
 public String getText () {
 	checkWidget ();
-	int /*long*/ address;
+	long /*int*/ address;
 	if ((style & SWT.SINGLE) != 0) {
 		address = OS.gtk_entry_get_text (handle);
 	} else {
@@ -973,7 +973,7 @@
 	checkWidget ();
 	if (!(start <= end && 0 <= end)) return "";
 	start = Math.max (0, start);
-	int /*long*/ address;
+	long /*int*/ address;
 	if ((style & SWT.SINGLE) != 0) {
 		address = OS.gtk_editable_get_chars (handle, start, end + 1);
 	} else {
@@ -1071,13 +1071,13 @@
 	return lineTop [0];
 }
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	postEvent (SWT.DefaultSelection);
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
@@ -1092,7 +1092,7 @@
 }
 
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	/*
 	* Feature in GTK.  When the user types, GTK positions
 	* the caret after sending the changed signal.  This
@@ -1101,7 +1101,7 @@
 	* is to post the modify event when the user is typing.
 	*/
 	boolean keyPress = false;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
@@ -1120,7 +1120,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imContext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imContext, long /*int*/ text) {
 	if (text == 0) return 0;
 	if ((style & SWT.SINGLE) != 0) {
 		if (!OS.gtk_editable_get_editable (handle)) return 0;
@@ -1162,7 +1162,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_delete_range (int /*long*/ widget, int /*long*/ iter1, int /*long*/ iter2) {
+long /*int*/ gtk_delete_range (long /*int*/ widget, long /*int*/ iter1, long /*int*/ iter2) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	byte [] startIter = new byte [ITER_SIZEOF];
 	byte [] endIter = new byte [ITER_SIZEOF];
@@ -1198,7 +1198,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	String newText = verifyText ("", (int)/*64*/start_pos, (int)/*64*/end_pos);
 	if (newText == null) {
@@ -1226,7 +1226,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	if (cursor != null) setCursor (cursor.handle);
 	/*
 	* Feature in GTK.  The gtk-entry-select-on-focus property is a global
@@ -1242,7 +1242,7 @@
 				GdkEventFocus gdkEventFocus = new GdkEventFocus ();
 				OS.memmove (gdkEventFocus, gdkEvent, GdkEventFocus.sizeof);
 				if (gdkEventFocus.in == 0) {
-					int /*long*/ settings = OS.gtk_settings_get_default ();
+					long /*int*/ settings = OS.gtk_settings_get_default ();
 					OS.g_object_set (settings, OS.gtk_entry_select_on_focus, true, 0);
 				}
 				break;
@@ -1251,13 +1251,13 @@
 	return super.gtk_event_after (widget, gdkEvent);
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	fixIM ();
 	return super.gtk_focus_out_event (widget, event);
 }
 
-int /*long*/ gtk_grab_focus (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_grab_focus (widget);
+long /*int*/ gtk_grab_focus (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_grab_focus (widget);
 	/*
 	* Feature in GTK.  GtkEntry widgets select their text on focus in,
 	* clearing the previous selection.  This behavior is controlled by
@@ -1266,13 +1266,13 @@
 	* the entry has done focus in processing.
 	*/
 	if ((style & SWT.SINGLE) != 0 && display.entrySelectOnFocus) {
-		int /*long*/ settings = OS.gtk_settings_get_default ();
+		long /*int*/ settings = OS.gtk_settings_get_default ();
 		OS.g_object_set (settings, OS.gtk_entry_select_on_focus, false, 0);
 	}
 	return result;
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	if (new_text == 0 || new_text_length == 0) return 0;
 	byte [] buffer = new byte [(int)/*64*/new_text_length];
@@ -1281,7 +1281,7 @@
 	int [] pos = new int [1];
 	OS.memmove (pos, position, 4);
 	if (pos [0] == -1) {
-		int /*long*/ ptr = OS.gtk_entry_get_text (handle);
+		long /*int*/ ptr = OS.gtk_entry_get_text (handle);
 		pos [0] = (int)/*64*/OS.g_utf8_strlen (ptr, -1);
 	}
 	/* Use the selection when the text was deleted */
@@ -1320,15 +1320,15 @@
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ result = super.gtk_key_press_event (widget, event);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ result = super.gtk_key_press_event (widget, event);
 	if (result != 0) fixIM ();
 	if (gdkEventKey == -1) result = 1;
 	gdkEventKey = 0;
 	return result;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	if ((style & SWT.RIGHT_TO_LEFT) != 0) {
 		OS.gtk_widget_set_direction (menu, OS.GTK_TEXT_DIR_RTL);
 		OS.gtk_container_forall (menu, display.setDirectionProc, OS.GTK_TEXT_DIR_RTL);
@@ -1336,7 +1336,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_text_buffer_insert_text (int /*long*/ widget, int /*long*/ iter, int /*long*/ text, int /*long*/ length) {
+long /*int*/ gtk_text_buffer_insert_text (long /*int*/ widget, long /*int*/ iter, long /*int*/ text, long /*int*/ length) {
 	if (!hooks (SWT.Verify) && !filters (SWT.Verify)) return 0;
 	byte [] position = new byte [ITER_SIZEOF];
 	OS.memmove (position, iter, position.length);
@@ -1380,7 +1380,7 @@
 		OS.g_signal_connect_closure (bufferHandle, OS.delete_range, display.closures [DELETE_RANGE], false);
 		OS.g_signal_connect_closure (handle, OS.populate_popup, display.closures [POPULATE_POPUP], false);
 	}
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) {
 		OS.g_signal_connect_closure (imContext, OS.commit, display.closures [COMMIT], false);
 		int id = OS.g_signal_lookup (OS.commit, OS.gtk_im_context_get_type ());
@@ -1389,7 +1389,7 @@
 	}
 }
 
-int /*long*/ imContext () {
+long /*int*/ imContext () {
 	if ((style & SWT.SINGLE) != 0) {
 		return OS.gtk_editable_get_editable (handle) ? OS.GTK_ENTRY_IM_CONTEXT (handle) : 0;
 	} 
@@ -1430,15 +1430,15 @@
 		}
 		OS.gtk_text_buffer_insert (bufferHandle, start, buffer, buffer.length);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, start);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	if ((style & SWT.SINGLE) != 0) {
-		int /*long*/ window = super.paintWindow ();
-		int /*long*/ children = OS.gdk_window_get_children (window);
+		long /*int*/ window = super.paintWindow ();
+		long /*int*/ children = OS.gdk_window_get_children (window);
 		if (children != 0) window = OS.g_list_data (children);
 		OS.g_list_free (children);
 		return window;
@@ -1464,7 +1464,7 @@
 	if ((style & SWT.SINGLE) != 0) {
 		OS.gtk_editable_paste_clipboard (handle);
 	} else {
-		int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+		long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 		OS.gtk_text_buffer_paste_clipboard (bufferHandle, clipboard, null, OS.gtk_text_view_get_editable (handle));
 	}
 }
@@ -1472,7 +1472,7 @@
 void register () {
 	super.register ();
 	if (bufferHandle != 0) display.addWidget (bufferHandle, this);
-	int /*long*/ imContext = imContext ();
+	long /*int*/ imContext = imContext ();
 	if (imContext != 0) display.addWidget (imContext, this);
 }
 
@@ -1487,7 +1487,7 @@
 		* it around until ownership of the clipboard is lost.
 		*/
 		if ((style & SWT.MULTI) != 0) {
-			int /*long*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
+			long /*int*/ clipboard = OS.gtk_clipboard_get (OS.GDK_NONE);
 			OS.gtk_text_buffer_paste_clipboard (bufferHandle, clipboard, null, OS.gtk_text_view_get_editable (handle));
 		}
 	}
@@ -1584,8 +1584,8 @@
 		byte [] end =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, start, 0);
 		OS.gtk_text_buffer_get_end_iter (bufferHandle, end);
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, start);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, end);
 	}
@@ -1596,8 +1596,8 @@
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setCursor (int /*long*/ cursor) {
-	int /*long*/ defaultCursor = 0;
+void setCursor (long /*int*/ cursor) {
+	long /*int*/ defaultCursor = 0;
 	if (cursor == 0) defaultCursor = OS.gdk_cursor_new (OS.GDK_XTERM);
 	super.setCursor (cursor != 0 ? cursor : defaultCursor);
 	if (cursor == 0) OS.gdk_cursor_destroy (defaultCursor);
@@ -1676,7 +1676,7 @@
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	setTabStops (tabs);
 }
@@ -1761,7 +1761,7 @@
 		byte [] position =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, position, start);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 }
@@ -1801,8 +1801,8 @@
 		byte [] endIter =  new byte [ITER_SIZEOF];
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, startIter, start);
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, endIter, end);
-		int /*long*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
-		int /*long*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+		long /*int*/ insertMark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ selectionMark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 		OS.gtk_text_buffer_move_mark (bufferHandle, selectionMark, startIter);
 		OS.gtk_text_buffer_move_mark (bufferHandle, insertMark, endIter);
 	}
@@ -1868,7 +1868,7 @@
 void setTabStops (int tabs) {
 	if ((style & SWT.SINGLE) != 0) return;
 	int tabWidth = getTabWidth (tabs);
-	int /*long*/ tabArray = OS.pango_tab_array_new (1, false);
+	long /*int*/ tabArray = OS.pango_tab_array_new (1, false);
 	OS.pango_tab_array_set_tab (tabArray, 0, OS.PANGO_TAB_LEFT, tabWidth);
 	OS.gtk_text_view_set_tabs (handle, tabArray);
 	OS.pango_tab_array_free (tabArray);
@@ -1922,7 +1922,7 @@
 		OS.g_signal_handlers_unblock_matched (bufferHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, TEXT_BUFFER_INSERT_TEXT);
 		OS.gtk_text_buffer_get_iter_at_offset (bufferHandle, position, 0);
 		OS.gtk_text_buffer_place_cursor (bufferHandle, position);
-		int /*long*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
+		long /*int*/ mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 		OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	}
 	sendEvent (SWT.Modify);
@@ -1994,7 +1994,7 @@
 public void showSelection () {
 	checkWidget ();
 	if ((style & SWT.SINGLE) != 0) return;
-	int /*long*/ mark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
+	long /*int*/ mark = OS.gtk_text_buffer_get_selection_bound (bufferHandle);
 	OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
 	mark = OS.gtk_text_buffer_get_insert (bufferHandle);
 	OS.gtk_text_view_scroll_mark_onscreen (handle, mark);
@@ -2005,9 +2005,9 @@
 	switch (key) {
 		case OS.GDK_KP_Enter:
 		case OS.GDK_Return: {
-			int /*long*/ imContext =  imContext ();
+			long /*int*/ imContext =  imContext ();
 			if (imContext != 0) {
-				int /*long*/ [] preeditString = new int /*long*/ [1];
+				long /*int*/ [] preeditString = new long /*int*/ [1];
 				OS.gtk_im_context_get_preedit_string (imContext, preeditString, null, null);
 				if (preeditString [0] != 0) {
 					int length = OS.strlen (preeditString [0]);
@@ -2041,7 +2041,7 @@
 	event.text = string;
 	event.start = start;
 	event.end = end;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventKey gdkEvent = new GdkEventKey ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventKey.sizeof);
diff -ur x86/org/eclipse/swt/widgets/ToolBar.java x86_64/org/eclipse/swt/widgets/ToolBar.java
--- x86/org/eclipse/swt/widgets/ToolBar.java	2009-06-24 21:13:56.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ToolBar.java	2009-02-11 17:43:50.000000000 -0500
@@ -142,11 +142,11 @@
 	return computeNativeSize (handle, wHint, hHint, changed);
 }
 
-int /*long*/ eventHandle () {
+long /*int*/ eventHandle () {
 	return fixedHandle;
 }
 
-int /*long*/ enterExitHandle() {
+long /*int*/ enterExitHandle() {
 	return handle;
 }
 
@@ -164,7 +164,7 @@
 	}
 }
 
-boolean forceFocus (int /*long*/ focusHandle) {
+boolean forceFocus (long /*int*/ focusHandle) {
 	if (lastFocus != null && lastFocus.setFocus ()) return true;
 	ToolItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
@@ -233,7 +233,7 @@
  */
 public int getItemCount () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return 0;
 	int itemCount = OS.g_list_length (list);
 	OS.g_list_free (list);
@@ -258,12 +258,12 @@
  */
 public ToolItem [] getItems () {
 	checkWidget();
-	int /*long*/ list = OS.gtk_container_get_children (handle);
+	long /*int*/ list = OS.gtk_container_get_children (handle);
 	if (list == 0) return new ToolItem [0];
 	int count = OS.g_list_length (list);
 	ToolItem [] result = new ToolItem [count];
 	for (int i=0; i<count; i++) {
-		int /*long*/ data = OS.g_list_nth_data (list, i);
+		long /*int*/ data = OS.g_list_nth_data (list, i);
 		Widget widget = display.getWidget (data);
 		result [i] = (ToolItem) widget;
 	}
@@ -290,9 +290,9 @@
 	return 1;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	if (!hasFocus ()) return 0;
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	ToolItem [] items = getItems ();
 	int length = items.length;
@@ -313,7 +313,7 @@
 				if ((item.style & SWT.DROP_DOWN) != 0) {
 					Event event = new Event ();
 					event.detail = SWT.ARROW;
-					int /*long*/ topHandle = item.topHandle ();
+					long /*int*/ topHandle = item.topHandle ();
 					event.x = OS.GTK_WIDGET_X (topHandle);
 					event.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);
 					if ((style & SWT.MIRRORED) != 0) event.x = getClientWidth() - OS.GTK_WIDGET_WIDTH(topHandle) - event.x;
@@ -375,7 +375,7 @@
 boolean mnemonicHit (char key) {
 	ToolItem [] items = getItems ();
 	for (int i=0; i<items.length; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -384,7 +384,7 @@
 boolean mnemonicMatch (char key) {
 	ToolItem [] items = getItems ();
 	for (int i=0; i<items.length; i++) {
-		int /*long*/ labelHandle = items [i].labelHandle;
+		long /*int*/ labelHandle = items [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
@@ -430,7 +430,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	ToolItem [] items = getItems ();
 	for (int i = 0; i < items.length; i++) {
diff -ur x86/org/eclipse/swt/widgets/ToolItem.java x86_64/org/eclipse/swt/widgets/ToolItem.java
--- x86/org/eclipse/swt/widgets/ToolItem.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ToolItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -37,7 +37,7 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class ToolItem extends Item {
-	int /*long*/ boxHandle, arrowHandle, arrowBoxHandle, separatorHandle, labelHandle, imageHandle;
+	long /*int*/ boxHandle, arrowHandle, arrowBoxHandle, separatorHandle, labelHandle, imageHandle;
 	ToolBar parent;
 	Control control;
 	Image hotImage, disabledImage;
@@ -245,11 +245,11 @@
 	}
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 //	This code is intentionally commented.
-//	int /*long*/ fontHandle = parent.fontHandle ();
+//	long /*int*/ fontHandle = parent.fontHandle ();
 //	GdkColor color = new GdkColor ();
-//	int /*long*/ style = OS.gtk_widget_get_style (fontHandle);
+//	long /*int*/ style = OS.gtk_widget_get_style (fontHandle);
 //	OS.gtk_style_get_fg (style, OS.GTK_STATE_NORMAL, color);
-//	int /*long*/ font = OS.gtk_style_get_font_desc (style);
+//	long /*int*/ font = OS.gtk_style_get_font_desc (style);
 //	setForegroundColor (color);
 //	setFontDescription (font);
 	if ((parent.state & FOREGROUND) != 0) {
@@ -292,7 +292,7 @@
 public Rectangle getBounds () {
 	checkWidget();
 	parent.forceResize ();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	int x, y, width, height;
 	/*
 	* Bug in GTK.  Toolbar items are only allocated their minimum size
@@ -381,7 +381,7 @@
  */
 public boolean getEnabled () {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	return OS.GTK_WIDGET_SENSITIVE (topHandle);
 }
 
@@ -471,11 +471,11 @@
 public int getWidth () {
 	checkWidget();
 	parent.forceResize ();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	return OS.GTK_WIDGET_WIDTH (topHandle);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	double x = gdkEvent.x;
@@ -483,14 +483,14 @@
 	double y = gdkEvent.y;
 	gdkEvent.y += OS.GTK_WIDGET_Y (handle);
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
-	int /*long*/ result = parent.gtk_button_press_event (widget, event);
+	long /*int*/ result = parent.gtk_button_press_event (widget, event);
 	gdkEvent.x = x;
 	gdkEvent.y = y;
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	double x = gdkEvent.x;
@@ -498,17 +498,17 @@
 	double y = gdkEvent.y;
 	gdkEvent.y += OS.GTK_WIDGET_Y (handle);
 	OS.memmove (event, gdkEvent, GdkEventButton.sizeof);
-	int /*long*/ result = parent.gtk_button_release_event (widget, event);
+	long /*int*/ result = parent.gtk_button_release_event (widget, event);
 	gdkEvent.x = x;
 	gdkEvent.y = y;
 	OS.memmove(event, gdkEvent, GdkEventButton.sizeof);
 	return result;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	Event event = new Event ();
 	if ((style & SWT.DROP_DOWN) != 0) {
-		int /*long*/ eventPtr = OS.gtk_get_current_event ();
+		long /*int*/ eventPtr = OS.gtk_get_current_event ();
 		if (eventPtr != 0) {
 			GdkEvent gdkEvent = new GdkEvent ();
 			OS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);
@@ -524,7 +524,7 @@
 					if ((((parent.style & SWT.RIGHT_TO_LEFT) == 0) && x <= (int)x_win [0])
 						|| (((parent.style & SWT.RIGHT_TO_LEFT) != 0) && (int)x_win [0] <= x + width)) {
 						event.detail = SWT.ARROW;
-						int /*long*/ topHandle = topHandle ();
+						long /*int*/ topHandle = topHandle ();
 						event.x = OS.GTK_WIDGET_X (topHandle);
 						if ((parent.style & SWT.MIRRORED) != 0) event.x = parent.getClientWidth () - OS.GTK_WIDGET_WIDTH (topHandle) - event.x;
 						event.y = OS.GTK_WIDGET_Y (topHandle) + OS.GTK_WIDGET_HEIGHT (topHandle);
@@ -544,7 +544,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_enter_notify_event (widget, event);
 	drawHotImage = (parent.style & SWT.FLAT) != 0 && hotImage != null;
 	if (drawHotImage && imageHandle != 0) {
@@ -552,7 +552,7 @@
 		if (imageList != null) {
 			int index = imageList.indexOf (hotImage);
 			if (index != -1) {
-				int /*long*/ pixbuf = imageList.getPixbuf (index);
+				long /*int*/ pixbuf = imageList.getPixbuf (index);
 				OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 			}
 		}
@@ -560,7 +560,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ gdkEvent) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ gdkEvent) {
 	GdkEvent event = new GdkEvent ();
 	OS.memmove (event, gdkEvent, GdkEvent.sizeof);
 	switch (event.type) {
@@ -576,13 +576,13 @@
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	OS.GTK_WIDGET_UNSET_FLAGS (handle, OS.GTK_CAN_FOCUS);
 	parent.lastFocus = this;
 	return 0;
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	parent.gtk_leave_notify_event (widget, event);
 	if (drawHotImage) {
 		drawHotImage = false;
@@ -591,7 +591,7 @@
 			if (imageList != null) {
 				int index = imageList.indexOf (image);
 				if (index != -1) {
-					int /*long*/ pixbuf = imageList.getPixbuf (index);
+					long /*int*/ pixbuf = imageList.getPixbuf (index);
 					OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 				}
 			}
@@ -600,12 +600,12 @@
 	return 0;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	parent.fixZOrder ();
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
@@ -642,7 +642,7 @@
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [BUTTON_RELEASE_EVENT], 0, display.closures [BUTTON_RELEASE_EVENT], false);
 	OS.g_signal_connect_closure_by_id (handle, display.signalIds [EVENT_AFTER], 0, display.closures[EVENT_AFTER], false);
 
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.g_signal_connect_closure_by_id (topHandle, display.signalIds [MAP], 0, display.closures [MAP], true);
 }
 
@@ -812,7 +812,7 @@
  */
 public void setEnabled (boolean enabled) {
 	checkWidget();
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	OS.gtk_widget_set_sensitive (topHandle, enabled);
 	if (enabled) {
 		/*
@@ -840,7 +840,7 @@
 	return result;
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (handle, font);
 	if (labelHandle != 0) OS.gtk_widget_modify_font (labelHandle, font);
 	if (imageHandle != 0) OS.gtk_widget_modify_font (imageHandle, font);
@@ -899,7 +899,7 @@
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff -ur x86/org/eclipse/swt/widgets/ToolTip.java x86_64/org/eclipse/swt/widgets/ToolTip.java
--- x86/org/eclipse/swt/widgets/ToolTip.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/ToolTip.java	2009-02-11 17:43:50.000000000 -0500
@@ -46,7 +46,7 @@
 	String text, message;
 	TrayItem item;
 	int x, y, timerId;
-	int /*long*/ layoutText = 0, layoutMessage = 0;
+	long /*int*/ layoutText = 0, layoutMessage = 0;
 	int [] borderPolygon;
 	boolean spikeAbove, autohide;
 	
@@ -132,7 +132,7 @@
 }
 
 void configure () {
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	OS.gtk_widget_realize (handle);
 	int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, OS.GTK_WIDGET_WINDOW (handle));
 	GdkRectangle dest = new GdkRectangle ();
@@ -246,9 +246,9 @@
 			OS.gtk_window_move (handle, Math.min(dest.width - w, x - w + 17), y - h - TIP_HEIGHT);
 		}
 	}
-	int /*long*/ rgn = OS.gdk_region_polygon (polyline, polyline.length / 2, OS.GDK_EVEN_ODD_RULE);
+	long /*int*/ rgn = OS.gdk_region_polygon (polyline, polyline.length / 2, OS.GDK_EVEN_ODD_RULE);
 	OS.gtk_widget_realize (handle);
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 	OS.gdk_window_shape_combine_region (window, rgn, 0, 0);
 	OS.gdk_region_destroy (rgn);
 }
@@ -287,13 +287,13 @@
 void deregister () {
 	super.deregister ();
 	if ((style & SWT.BALLOON) == 0) {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) display.removeWidget (tipWindow);
 	}
 }
 
 void destroyWidget () {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	releaseHandle ();
 	if (topHandle != 0 && (state & HANDLE) != 0) {
 		if ((style & SWT.BALLOON) != 0) {
@@ -325,9 +325,9 @@
 	int x = this.x;
 	int y = this.y;
 	if (item != null) {
-		int /*long*/ itemHandle = item.handle; 
+		long /*int*/ itemHandle = item.handle; 
 		OS.gtk_widget_realize (itemHandle);
-		int /*long*/ window = OS.GTK_WIDGET_WINDOW (itemHandle);
+		long /*int*/ window = OS.GTK_WIDGET_WINDOW (itemHandle);
 		int [] px = new int [1], py = new int [1];
 		OS.gdk_window_get_origin (window, px, py);
 		x = px [0] + OS.GTK_WIDGET_WIDTH (itemHandle) / 2;
@@ -446,19 +446,19 @@
 public boolean getVisible () {
 	checkWidget ();
 	if ((style & SWT.BALLOON) != 0) return OS.GTK_WIDGET_VISIBLE (handle);
-	int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+	long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 	return OS.GTK_WIDGET_VISIBLE (tipWindow);
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	notifyListeners (SWT.Selection, new Event ());
 	setVisible (false);
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
-	int /*long*/ gdkGC = OS.gdk_gc_new (window);
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
+	long /*int*/ gdkGC = OS.gdk_gc_new (window);
 	OS.gdk_draw_polygon (window, gdkGC, 0, borderPolygon, borderPolygon.length / 2);
 	int x = BORDER + PADDING;
 	int y = BORDER + PADDING;
@@ -472,8 +472,8 @@
 			case SWT.ICON_WARNING: buffer = Converter.wcsToMbcs (null, "gtk-dialog-warning", true); break;
 		}
 		if (buffer != null) {
-			int /*long*/ style = OS.gtk_widget_get_default_style ();
-			int /*long*/ pixbuf = OS.gtk_icon_set_render_icon (
+			long /*int*/ style = OS.gtk_widget_get_default_style ();
+			long /*int*/ pixbuf = OS.gtk_icon_set_render_icon (
 				OS.gtk_icon_factory_lookup_default (buffer), 
 				style,
 				OS.GTK_TEXT_DIR_NONE, 
@@ -499,11 +499,11 @@
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	Point point = getLocation (); 
 	int x = point.x;
 	int y = point.y;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	OS.gtk_widget_realize (widget);
 	int monitorNumber = OS.gdk_screen_get_monitor_at_window (screen, OS.GTK_WIDGET_WINDOW (widget));
 	GdkRectangle dest = new GdkRectangle ();
@@ -522,7 +522,7 @@
 		OS.gtk_widget_add_events (handle, OS.GDK_BUTTON_PRESS_MASK);
 		OS.g_signal_connect_closure (handle, OS.button_press_event, display.closures [BUTTON_PRESS_EVENT], false);
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) {
 			OS.g_signal_connect_closure (tipWindow, OS.size_allocate, display.closures [SIZE_ALLOCATE], false);
 			OS.gtk_widget_add_events (tipWindow, OS.GDK_BUTTON_PRESS_MASK);
@@ -553,7 +553,7 @@
 void register () {
 	super.register ();
 	if ((style & SWT.BALLOON) == 0) {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (tipWindow != 0) display.addWidget (tipWindow, this);
 	}
 }
@@ -640,7 +640,7 @@
 	if ((style & SWT.BALLOON) != 0) {
 		if (OS.GTK_WIDGET_VISIBLE (handle)) configure ();
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		if (OS.GTK_WIDGET_VISIBLE (tipWindow)) {
 			OS.gtk_window_move (tipWindow, x, y);
 		}
@@ -732,13 +732,13 @@
 		if (OS.GTK_VERSION >= OS.VERSION (2, 4, 0)) {
 			OS.pango_layout_set_auto_dir (layoutText, false);
 		}
-		int /*long*/ boldAttr = OS.pango_attr_weight_new (OS.PANGO_WEIGHT_BOLD);
+		long /*int*/ boldAttr = OS.pango_attr_weight_new (OS.PANGO_WEIGHT_BOLD);
 		PangoAttribute attribute = new PangoAttribute ();
 		OS.memmove (attribute, boldAttr, PangoAttribute.sizeof);
 		attribute.start_index = 0;
 		attribute.end_index = buffer.length;
 		OS.memmove (boldAttr, attribute, PangoAttribute.sizeof);
-		int /*long*/ attrList = OS.pango_attr_list_new ();
+		long /*int*/ attrList = OS.pango_attr_list_new ();
 		OS.pango_attr_list_insert (attrList, boldAttr);
 		OS.pango_layout_set_attributes (layoutText, attrList);
 		OS.pango_attr_list_unref (attrList);
@@ -771,13 +771,13 @@
 			configure ();
 			OS.gtk_widget_show (handle);
 		} else {
-			int /*long*/ vboxHandle = parent.vboxHandle;
+			long /*int*/ vboxHandle = parent.vboxHandle;
 			StringBuffer string = new StringBuffer (text);
 			if (text.length () > 0) string.append ("\n\n");
 			string.append (message);
 			byte [] buffer = Converter.wcsToMbcs (null, string.toString(), true);
 			OS.gtk_tooltips_set_tip (handle, vboxHandle, buffer, null);
-			int /*long*/ data = OS.gtk_tooltips_data_get (vboxHandle);
+			long /*int*/ data = OS.gtk_tooltips_data_get (vboxHandle);
 			OS.GTK_TOOLTIPS_SET_ACTIVE (handle, data);
 			OS.gtk_tooltips_set_tip (handle, vboxHandle, buffer, null);
 		}		
@@ -786,17 +786,17 @@
 		if ((style & SWT.BALLOON) != 0) {
 			OS.gtk_widget_hide (handle);
 		} else {
-			int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+			long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 			OS.gtk_widget_hide (tipWindow);
 		}
 	}
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	if ((style & SWT.BALLOON) != 0) {
 		OS.gtk_widget_hide (handle);
 	} else {
-		int /*long*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
+		long /*int*/ tipWindow = OS.GTK_TOOLTIPS_TIP_WINDOW (handle);
 		OS.gtk_widget_hide (tipWindow);
 	}
 	return 0;
diff -ur x86/org/eclipse/swt/widgets/Tracker.java x86_64/org/eclipse/swt/widgets/Tracker.java
--- x86/org/eclipse/swt/widgets/Tracker.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Tracker.java	2009-02-11 17:43:50.000000000 -0500
@@ -41,7 +41,7 @@
 public class Tracker extends Widget {
 	Composite parent;
 	Cursor cursor;
-	int /*long*/ lastCursor, window;
+	long /*int*/ lastCursor, window;
 	boolean tracking, cancelled, grabbed, stippled;
 	Rectangle [] rectangles = new Rectangle [0], proportions = rectangles;
 	Rectangle bounds;
@@ -303,14 +303,14 @@
 }
 
 void drawRectangles (Rectangle [] rects) {
-	int /*long*/ window = OS.GDK_ROOT_PARENT ();
+	long /*int*/ window = OS.GDK_ROOT_PARENT ();
 	if (parent != null) {
 		window = OS.GTK_WIDGET_WINDOW (parent.paintHandle());
 	} 
 	if (window == 0) return;
-	int /*long*/ gc = OS.gdk_gc_new (window);
+	long /*int*/ gc = OS.gdk_gc_new (window);
 	if (gc == 0) return;
-	int /*long*/ colormap = OS.gdk_colormap_get_system ();
+	long /*int*/ colormap = OS.gdk_colormap_get_system ();
 	GdkColor color = new GdkColor ();
 	OS.gdk_color_white (colormap, color);
 	OS.gdk_gc_set_foreground (gc, color);
@@ -363,17 +363,17 @@
 }
 
 boolean grab () {
-	int /*long*/ cursor = this.cursor != null ? this.cursor.handle : 0;
+	long /*int*/ cursor = this.cursor != null ? this.cursor.handle : 0;
 	int result = OS.gdk_pointer_grab (window, false, OS.GDK_POINTER_MOTION_MASK | OS.GDK_BUTTON_RELEASE_MASK, window, cursor, OS.GDK_CURRENT_TIME);
 	return result == OS.GDK_GRAB_SUCCESS;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	return gtk_mouse (OS.GDK_BUTTON_RELEASE, widget, event);
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	GdkEventKey keyEvent = new GdkEventKey ();
 	OS.memmove (keyEvent, eventPtr, GdkEventKey.sizeof);
@@ -507,8 +507,8 @@
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ cursor = this.cursor != null ? this.cursor.handle : 0;
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ cursor = this.cursor != null ? this.cursor.handle : 0;
 	if (cursor != lastCursor) {
 		ungrab ();
 		grabbed = grab ();
@@ -517,7 +517,7 @@
 	return gtk_mouse (OS.GDK_MOTION_NOTIFY, widget, eventPtr);
 }
 
-int /*long*/ gtk_mouse (int eventType, int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_mouse (int eventType, long /*int*/ widget, long /*int*/ eventPtr) {
 	int [] newX = new int [1], newY = new int [1];
 	OS.gdk_window_get_pointer (window, newX, newY, null);
 	if (oldX != newX [0] || oldY != newY [0]) {
@@ -707,7 +707,7 @@
 	GdkEvent gdkEvent = new GdkEvent();
 	while (tracking) {
 		if (parent != null && parent.isDisposed ()) break;
-		int /*long*/ eventPtr;
+		long /*int*/ eventPtr;
 		while (true) {
 			eventPtr = OS.gdk_event_get ();
 			if (eventPtr != 0) {
@@ -717,7 +717,7 @@
 			}
 		}
 		OS.memmove (gdkEvent, eventPtr, GdkEvent.sizeof);
-		int /*long*/ widget = OS.gtk_get_event_widget (eventPtr);
+		long /*int*/ widget = OS.gtk_get_event_widget (eventPtr);
 		switch (gdkEvent.type) {
 			case OS.GDK_MOTION_NOTIFY: gtk_motion_notify_event (widget, eventPtr); break;
 			case OS.GDK_BUTTON_RELEASE: gtk_button_release_event (widget, eventPtr); break;
diff -ur x86/org/eclipse/swt/widgets/TrayItem.java x86_64/org/eclipse/swt/widgets/TrayItem.java
--- x86/org/eclipse/swt/widgets/TrayItem.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TrayItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -39,8 +39,8 @@
 	Tray parent;
 	ToolTip toolTip;
 	String toolTipText;
-	int /*long*/ imageHandle;
-	int /*long*/ tooltipsHandle;
+	long /*int*/ imageHandle;
+	long /*int*/ tooltipsHandle;
 	ImageList imageList;
 
 /**
@@ -157,20 +157,20 @@
 	OS.gtk_container_add (handle, imageHandle);
 	OS.gtk_widget_show (handle);
 	OS.gtk_widget_show (imageHandle);
-	int /*long*/ id = OS.gtk_plug_get_id (handle);
+	long /*int*/ id = OS.gtk_plug_get_id (handle);
 	int monitor = 0;
-	int /*long*/ screen = OS.gdk_screen_get_default ();
+	long /*int*/ screen = OS.gdk_screen_get_default ();
 	if (screen != 0) {
 		monitor = OS.gdk_screen_get_number (screen);
 	}
 	byte [] trayBuffer = Converter.wcsToMbcs (null, "_NET_SYSTEM_TRAY_S" + monitor, true);
-	int /*long*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);
-	int /*long*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);
-	int /*long*/ xDisplay = OS.GDK_DISPLAY ();
-	int /*long*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);
+	long /*int*/ trayAtom = OS.gdk_atom_intern (trayBuffer, true);
+	long /*int*/ xTrayAtom = OS.gdk_x11_atom_to_xatom (trayAtom);
+	long /*int*/ xDisplay = OS.GDK_DISPLAY ();
+	long /*int*/ trayWindow = OS.XGetSelectionOwner (xDisplay, xTrayAtom);
 	byte [] messageBuffer = Converter.wcsToMbcs (null, "_NET_SYSTEM_TRAY_OPCODE", true);
-	int /*long*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);
-	int /*long*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);
+	long /*int*/ messageAtom = OS.gdk_atom_intern (messageBuffer, true);
+	long /*int*/ xMessageAtom = OS.gdk_x11_atom_to_xatom (messageAtom);
 	XClientMessageEvent event = new XClientMessageEvent ();
 	event.type = OS.ClientMessage;
 	event.window = trayWindow;
@@ -179,7 +179,7 @@
 	event.data [0] = OS.GDK_CURRENT_TIME;
 	event.data [1] = OS.SYSTEM_TRAY_REQUEST_DOCK;
 	event.data [2] = id;
-	int /*long*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);
+	long /*int*/ clientEvent = OS.g_malloc (XClientMessageEvent.sizeof);
 	OS.memmove (clientEvent, event, XClientMessageEvent.sizeof);
 	OS.XSendEvent (xDisplay, trayWindow, false, OS.NoEventMask, clientEvent);
 	OS.g_free (clientEvent);
@@ -246,7 +246,7 @@
 	return toolTipText;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
 	if (gdkEvent.type == OS.GDK_3BUTTON_PRESS) return 0;
@@ -262,13 +262,13 @@
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	if (image != null && image.mask != 0) {
 		if (OS.gdk_drawable_get_depth (image.mask) == 1) {
 			int xoffset = (int) Math.floor (OS.GTK_WIDGET_X (widget) + ((OS.GTK_WIDGET_WIDTH (widget) - OS.GTK_WIDGET_REQUISITION_WIDTH (widget)) * 0.5) + 0.5);
 			int yoffset = (int) Math.floor (OS.GTK_WIDGET_Y (widget) + ((OS.GTK_WIDGET_HEIGHT (widget) - OS.GTK_WIDGET_REQUISITION_HEIGHT (widget)) * 0.5) + 0.5);
 			Rectangle b = image.getBounds();
-			int /*long*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);
+			long /*int*/ gdkImagePtr = OS.gdk_drawable_get_image (image.mask, 0, 0, b.width, b.height);
 			if (gdkImagePtr == 0) SWT.error(SWT.ERROR_NO_HANDLES);
 			GdkImage gdkImage = new GdkImage();
 			OS.memmove (gdkImage, gdkImagePtr);
@@ -287,7 +287,7 @@
 				}
 			}
 			OS.gtk_widget_realize (handle);
-			int /*long*/ window = OS.GTK_WIDGET_WINDOW (handle);
+			long /*int*/ window = OS.GTK_WIDGET_WINDOW (handle);
 			OS.gdk_window_shape_combine_region (window, region.handle, 0, 0);
 			region.dispose ();
 		}
@@ -418,7 +418,7 @@
 		} else {
 			imageList.put (imageIndex, image);
 		}
-		int /*long*/ pixbuf = imageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = imageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff -ur x86/org/eclipse/swt/widgets/TreeColumn.java x86_64/org/eclipse/swt/widgets/TreeColumn.java
--- x86/org/eclipse/swt/widgets/TreeColumn.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TreeColumn.java	2009-02-11 17:43:50.000000000 -0500
@@ -37,7 +37,7 @@
  * @since 3.1
  */
 public class TreeColumn extends Item {
-	int /*long*/ labelHandle, imageHandle, buttonHandle;
+	long /*int*/ labelHandle, imageHandle, buttonHandle;
 	Tree parent;
 	int modelIndex, lastButton, lastTime, lastX, lastWidth;
 	boolean customDraw, useFixedWidth;
@@ -325,7 +325,7 @@
 	return OS.gtk_tree_view_column_get_width (handle);
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	/*
 	* There is no API to get a double click on a table column.  Normally, when
 	* the mouse is double clicked, this is indicated by GDK_2BUTTON_PRESS
@@ -335,7 +335,7 @@
 	*/
 	boolean doubleClick = false;
 	boolean postEvent = true;
-	int /*long*/ eventPtr = OS.gtk_get_current_event ();
+	long /*int*/ eventPtr = OS.gtk_get_current_event ();
 	if (eventPtr != 0) {
 		GdkEventButton gdkEvent = new GdkEventButton ();
 		OS.memmove (gdkEvent, eventPtr, GdkEventButton.sizeof);
@@ -367,11 +367,11 @@
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return parent.gtk_mnemonic_activate (widget, arg1);
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	useFixedWidth = false;
 	int x = OS.GTK_WIDGET_X (widget);
 	int width = OS.GTK_WIDGET_WIDTH (widget);
@@ -415,7 +415,7 @@
 	if ((parent.style & SWT.VIRTUAL) != 0) {
 		//NOT DONE
 	} else {
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter_first (parent.modelHandle, iter)) {
 			do {
 				width = Math.max (width, parent.calculateWidth (handle, iter, true));
@@ -522,7 +522,7 @@
 	parent.createRenderers (handle, modelIndex, index == 0, style);
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	OS.gtk_widget_modify_font (labelHandle, font);
 	OS.gtk_widget_modify_font (imageHandle, font);
 }
@@ -537,7 +537,7 @@
 		}
 		int imageIndex = headerImageList.indexOf (image);
 		if (imageIndex == -1) imageIndex = headerImageList.add (image);
-		int /*long*/ pixbuf = headerImageList.getPixbuf (imageIndex);
+		long /*int*/ pixbuf = headerImageList.getPixbuf (imageIndex);
 		OS.gtk_image_set_from_pixbuf (imageHandle, pixbuf);
 		OS.gtk_widget_show (imageHandle);
 	} else {
diff -ur x86/org/eclipse/swt/widgets/TreeItem.java x86_64/org/eclipse/swt/widgets/TreeItem.java
--- x86/org/eclipse/swt/widgets/TreeItem.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/TreeItem.java	2009-02-11 17:43:50.000000000 -0500
@@ -180,7 +180,7 @@
 	this (checkNull (parentItem).parent, parentItem.handle, style, checkIndex (index), true);
 }
 
-TreeItem (Tree parent, int /*long*/ parentIter, int style, int index, boolean create) {
+TreeItem (Tree parent, long /*int*/ parentIter, int style, int index, boolean create) {
 	super (parent, style);
 	this.parent = parent;
 	if (create) {
@@ -211,7 +211,7 @@
 }
 
 Color _getBackground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.BACKGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getBackground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -222,7 +222,7 @@
 Color _getBackground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getBackground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_BACKGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getBackground ();
@@ -232,13 +232,13 @@
 }
 
 boolean _getChecked () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.CHECKED_COLUMN, ptr, -1);
 	return ptr [0] != 0;
 }
 
 Color _getForeground () {
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.FOREGROUND_COLUMN, ptr, -1);
 	if (ptr [0] == 0) return parent.getForeground ();
 	GdkColor gdkColor = new GdkColor ();
@@ -249,7 +249,7 @@
 Color _getForeground (int index) {
 	int count = Math.max (1, parent.columnCount);
 	if (0 > index || index > count - 1) return _getForeground ();
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex =  parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_FOREGROUND, ptr, -1);
 	if (ptr [0] == 0) return _getForeground ();
@@ -261,7 +261,7 @@
 Image _getImage (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return null;
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_PIXBUF, ptr, -1);
 	if (ptr [0] == 0) return null;
@@ -274,7 +274,7 @@
 String _getText (int index) {
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return "";
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
 	OS.gtk_tree_model_get (parent.modelHandle, handle, modelIndex + Tree.CELL_TEXT, ptr, -1);
 	if (ptr [0] == 0) return ""; //$NON-NLS-1$
@@ -422,15 +422,15 @@
 	// TODO fully test on early and later versions of GTK
 	checkWidget();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	GdkRectangle rect = new GdkRectangle ();
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
@@ -493,14 +493,14 @@
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, 0);
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -593,7 +593,7 @@
  */
 public boolean getExpanded () {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	boolean answer = OS.gtk_tree_view_row_expanded (parent.handle, path);
 	OS.gtk_tree_path_free (path);
 	return answer;
@@ -745,18 +745,18 @@
 	// TODO fully test on early and later versions of GTK
 	checkWidget ();
 	if (!parent.checkData (this)) error (SWT.ERROR_WIDGET_DISPOSED);
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.getColumnCount ()) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 	GdkRectangle rect = new GdkRectangle ();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	OS.gtk_tree_view_get_cell_area (parentHandle, path, column, rect);
 	if ((parent.getStyle () & SWT.MIRRORED) != 0) rect.x = parent.getClientWidth () - rect.width - rect.x;
@@ -907,12 +907,12 @@
  */
 public TreeItem getParentItem () {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	TreeItem item = null;
 	int depth = OS.gtk_tree_path_get_depth (path); 
 	if (depth > 1) {
 		OS.gtk_tree_path_up (path);
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		if (OS.gtk_tree_model_get_iter (parent.modelHandle, iter, path)) {
 			item = parent._getItem (iter);
 		}
@@ -970,19 +970,19 @@
 	if (0 > index || index > count - 1) return new Rectangle (0, 0, 0, 0);
 	// TODO fully test on early and later versions of GTK
 	// shifted a bit too far right on later versions of GTK - however, old Tree also had this problem
-	int /*long*/ parentHandle = parent.handle;
-	int /*long*/ column = 0;
+	long /*int*/ parentHandle = parent.handle;
+	long /*int*/ column = 0;
 	if (index >= 0 && index < parent.columnCount) {
 		column = parent.columns [index].handle;
 	} else {
 		column = OS.gtk_tree_view_get_column (parentHandle, index);
 	}
 	if (column == 0) return new Rectangle (0, 0, 0, 0);
-	int /*long*/ textRenderer = parent.getTextRenderer (column);
-	int /*long*/ pixbufRenderer = parent.getPixbufRenderer (column);
+	long /*int*/ textRenderer = parent.getTextRenderer (column);
+	long /*int*/ pixbufRenderer = parent.getPixbufRenderer (column);
 	if (textRenderer == 0 || pixbufRenderer == 0)  return new Rectangle (0, 0, 0, 0);
 
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	OS.gtk_widget_realize (parentHandle);
 	
 	boolean isExpander = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle) > 0;
@@ -1065,8 +1065,8 @@
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	int index = -1;
 	boolean isParent = false;
-	int /*long*/ currentPath = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
-	int /*long*/ parentPath = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
+	long /*int*/ currentPath = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ parentPath = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
 	int depth = OS.gtk_tree_path_get_depth (parentPath);
 	if (depth > 1 && OS.gtk_tree_path_up(parentPath)) {
 		if (OS.gtk_tree_path_compare(currentPath, parentPath) == 0) isParent = true;
@@ -1074,9 +1074,9 @@
 	OS.gtk_tree_path_free (currentPath);
 	OS.gtk_tree_path_free (parentPath);
 	if (!isParent) return index;
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, item.handle);
 	if (depth > 1) {
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {	
 			int[] temp = new int[depth];
 			OS.memmove (temp, indices, 4 * temp.length);
@@ -1088,13 +1088,13 @@
 }
 
 void redraw () {
-	int /*long*/ parentHandle = parent.handle;
+	long /*int*/ parentHandle = parent.handle;
 	if ((OS.GTK_WIDGET_FLAGS (parentHandle) & OS.GTK_REALIZED) != 0) {
-		int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 		GdkRectangle rect = new GdkRectangle ();
 		OS.gtk_tree_view_get_cell_area (parentHandle, path, 0, rect);
 		OS.gtk_tree_path_free (path);
-		int /*long*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
+		long /*int*/ window = OS.gtk_tree_view_get_bin_window (parentHandle);
 		rect.x = 0;
 		int [] w = new int [1], h = new int [1];
 		OS.gdk_drawable_get_size (window, w, h);
@@ -1137,7 +1137,7 @@
 	checkWidget ();
 	int length = OS.gtk_tree_model_iter_n_children (parent.modelHandle, handle);
 	if (length == 0) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int [] index = new int [1];
 	while (OS.gtk_tree_model_iter_children (parent.modelHandle, iter, handle)) {
 		OS.gtk_tree_model_get (parent.modelHandle, iter, Tree.ID_COLUMN, index, -1);
@@ -1236,16 +1236,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1296,7 +1296,7 @@
  */
 public void setExpanded (boolean expanded) {
 	checkWidget();
-	int /*long*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (parent.modelHandle, handle);
 	if (expanded) {
 		OS.g_signal_handlers_block_matched (parent.handle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, TEST_EXPAND_ROW);
 		OS.gtk_tree_view_expand_row (parent.handle, path, false);
@@ -1338,7 +1338,7 @@
 	if (oldFont == font) return;
 	this.font = font;
 	if (oldFont != null && oldFont.equals (font)) return;
-	int /*long*/ fontHandle = font != null ? font.handle : 0;
+	long /*int*/ fontHandle = font != null ? font.handle : 0;
 	OS.gtk_tree_store_set (parent.modelHandle, handle, Tree.FONT_COLUMN, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -1389,7 +1389,7 @@
 	if (oldFont != null && oldFont.equals (font)) return;
 	
 	int modelIndex = parent.columnCount == 0 ? Tree.FIRST_COLUMN : parent.columns [index].modelIndex;
-	int /*long*/ fontHandle  = font != null ? font.handle : 0;
+	long /*int*/ fontHandle  = font != null ? font.handle : 0;
 	OS.gtk_tree_store_set (parent.modelHandle, handle, modelIndex + Tree.CELL_FONT, fontHandle, -1);
 	/*
 	* Bug in GTK.  When using fixed-height-mode,
@@ -1407,16 +1407,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1516,16 +1516,16 @@
 		boolean customDraw = (parent.columnCount == 0)  ? parent.firstCustomDraw : parent.columns [index].customDraw;
 		if (!customDraw) {
 			if ((parent.style & SWT.VIRTUAL) == 0) {
-				int /*long*/ parentHandle = parent.handle;
-				int /*long*/ column = 0;
+				long /*int*/ parentHandle = parent.handle;
+				long /*int*/ column = 0;
 				if (parent.columnCount > 0) {
 					column = parent.columns [index].handle;
 				} else {
 					column = OS.gtk_tree_view_get_column (parentHandle, index);
 				}
 				if (column == 0) return;
-				int /*long*/ textRenderer = parent.getTextRenderer (column);
-				int /*long*/ imageRenderer = parent.getPixbufRenderer (column);
+				long /*int*/ textRenderer = parent.getTextRenderer (column);
+				long /*int*/ imageRenderer = parent.getPixbufRenderer (column);
 				OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, display.cellDataProc, parentHandle, 0);
 				OS.gtk_tree_view_column_set_cell_data_func (column, imageRenderer, display.cellDataProc, parentHandle, 0);
 			}
@@ -1558,7 +1558,7 @@
 	* GTK+'s "inconsistent" state does not match SWT's concept of grayed.
 	* Render checked+grayed as "inconsistent", unchecked+grayed as blank.
 	*/
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	OS.gtk_tree_model_get (parent.modelHandle, handle, Tree.CHECKED_COLUMN, ptr, -1);
 	OS.gtk_tree_store_set (parent.modelHandle, handle, Tree.GRAYED_COLUMN, ptr [0] == 0 ? false : grayed, -1);
 	cached = true;
@@ -1590,7 +1590,7 @@
 	}
 	int count = Math.max (1, parent.getColumnCount ());
 	if (0 > index || index > count - 1) return;
-	int /*long*/ pixbuf = 0;
+	long /*int*/ pixbuf = 0;
 	if (image != null) {
 		ImageList imageList = parent.imageList;
 		if (imageList == null) imageList = parent.imageList = new ImageList ();
@@ -1620,10 +1620,10 @@
 	if ((parent.style & SWT.VIRTUAL) != 0 && parent.currentItem == null) {
 		if (OS.GTK_VERSION >= OS.VERSION (2, 3, 2)) {
 			if (image != null) {
-				int /*long*/parentHandle = parent.handle;
-				int /*long*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
+				long /*int*/parentHandle = parent.handle;
+				long /*int*/ column = OS.gtk_tree_view_get_column (parentHandle, index);
 				int [] w = new int [1];
-				int /*long*/ pixbufRenderer = parent.getPixbufRenderer(column);
+				long /*int*/ pixbufRenderer = parent.getPixbufRenderer(column);
 				OS.gtk_tree_view_column_cell_get_position (column, pixbufRenderer, null, w);
 				if (w[0] < image.getBounds().width) {
 					/*
@@ -1631,7 +1631,7 @@
 					 * are relying on the fact that it is done as part of modifying
 					 * the style.
 					 */
-					int /*long*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
+					long /*int*/ style = OS.gtk_widget_get_modifier_style (parentHandle);
 					parent.modifyStyle (parentHandle, style);
 				}
 			} 
diff -ur x86/org/eclipse/swt/widgets/Tree.java x86_64/org/eclipse/swt/widgets/Tree.java
--- x86/org/eclipse/swt/widgets/Tree.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Tree.java	2009-02-11 17:43:50.000000000 -0500
@@ -74,9 +74,9 @@
  * @see <a href="http://www.eclipse.org/swt/">Sample code and further information</a>
  */
 public class Tree extends Composite {
-	int /*long*/ modelHandle, checkRenderer;
+	long /*int*/ modelHandle, checkRenderer;
 	int columnCount, sortDirection;
-	int /*long*/ ignoreCell;
+	long /*int*/ ignoreCell;
 	TreeItem[] items;
 	TreeColumn [] columns;
 	TreeColumn sortColumn;
@@ -154,14 +154,14 @@
 	}
 }
 
-TreeItem _getItem (int /*long*/ iter) {
+TreeItem _getItem (long /*int*/ iter) {
 	int id = getId (iter, true);
 	if (items [id] != null) return items [id];
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 	int depth = OS.gtk_tree_path_get_depth (path);
 	int [] indices = new int [depth];
 	OS.memmove (indices, OS.gtk_tree_path_get_indices (path), 4*depth);
-	int /*long*/ parentIter = 0;
+	long /*int*/ parentIter = 0;
 	if (depth > 1) {
 		OS.gtk_tree_path_up (path);
 		parentIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
@@ -173,8 +173,8 @@
 	return items [id];
 }
 
-TreeItem _getItem (int /*long*/ parentIter, int index) {
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+TreeItem _getItem (long /*int*/ parentIter, int index) {
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child(modelHandle, iter, parentIter, index);
 	int id = getId (iter, true);
 	OS.g_free (iter);
@@ -182,7 +182,7 @@
 	return items [id] = new TreeItem (this, parentIter, SWT.NONE, index, false);
 }
 
-int getId (int /*long*/ iter, boolean queryModel) {
+int getId (long /*int*/ iter, boolean queryModel) {
 	if (queryModel) {
 		int[] value = new int[1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, value, -1);
@@ -218,7 +218,7 @@
 	return checkBits (style, SWT.SINGLE, SWT.MULTI, 0, 0, 0, 0);
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	if (cell == ignoreCell) return 0;
 	TreeItem item = _getItem (iter);
 	if (item != null) OS.g_object_set_qdata (cell, Display.SWT_OBJECT_INDEX2, item.handle);
@@ -245,7 +245,7 @@
 		* fix is to only provide the data if the row is visible.
 		*/
 		if (OS.GTK_VERSION < OS.VERSION (2, 3, 2)) {
-			int /*long*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (tree_model, iter);
 			OS.gtk_widget_realize (handle);
 			GdkRectangle visible = new GdkRectangle ();
 			OS.gtk_tree_view_get_visible_rect (handle, visible);
@@ -267,7 +267,7 @@
 			setData = checkData (item);
 		}
 	}
-	int /*long*/ [] ptr = new int /*long*/ [1];
+	long /*int*/ [] ptr = new long /*int*/ [1];
 	if (setData) {
 		if (isPixbuf) {
 			ptr [0] = 0;
@@ -405,7 +405,7 @@
 	addListener (SWT.Collapse, typedListener);
 }
 
-int calculateWidth (int /*long*/ column, int /*long*/ iter, boolean recurse) {
+int calculateWidth (long /*int*/ column, long /*int*/ iter, boolean recurse) {
 	OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 	/*
 	* Bug in GTK.  The width calculated by gtk_tree_view_column_cell_get_size()
@@ -419,7 +419,7 @@
 	
 	int width = 0;
 	int [] w = new int [1];
-	int /*long*/ path = 0;
+	long /*int*/ path = 0;
 
 	if (OS.gtk_tree_view_get_expander_column (handle) == column) {
 		/* indent */
@@ -434,11 +434,11 @@
 	}
 	OS.gtk_widget_style_get(handle, OS.focus_line_width, w, 0);
 	width += 2 * w [0];
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ renderer = OS.g_list_data (temp);
+		long /*int*/ renderer = OS.g_list_data (temp);
 		if (renderer != 0) {
 			OS.gtk_cell_renderer_get_size (renderer, handle, null, null, null, w, null);
 			width += w [0];
@@ -451,7 +451,7 @@
 		if (path == 0) path = OS.gtk_tree_model_get_path (modelHandle, iter);
 		boolean expanded = OS.gtk_tree_view_row_expanded (handle, path);
 		if (expanded) {
-			int /*long*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ childIter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			boolean valid = OS.gtk_tree_model_iter_children (modelHandle, childIter, iter);
 			while (valid) {
 				width = Math.max (width, calculateWidth (column, childIter, true));
@@ -493,8 +493,8 @@
 	clear (0, index, all);
 }
 
-void clear (int /*long*/ parentIter, int index, boolean all) {
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+void clear (long /*int*/ parentIter, int index, boolean all) {
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	OS.gtk_tree_model_iter_nth_child(modelHandle, iter, parentIter, index);
 	int[] value = new int[1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, value, -1);
@@ -529,10 +529,10 @@
 	checkWidget ();
 	clearAll (all, 0);
 }
-void clearAll (boolean all, int /*long*/ parentIter) {
+void clearAll (boolean all, long /*int*/ parentIter) {
 	int length = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (length == 0) return;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parentIter);
 	int[] value = new int[1];
 	while (valid) {
@@ -558,13 +558,13 @@
 	return size;
 }
 
-void copyModel (int /*long*/ oldModel, int oldStart, int /*long*/ newModel, int newStart, int /*long*/ [] types, int /*long*/ oldParent, int /*long*/ newParent, int modelLength) {
-	int /*long*/ iter = OS.g_malloc(OS.GtkTreeIter_sizeof ());
+void copyModel (long /*int*/ oldModel, int oldStart, long /*int*/ newModel, int newStart, long /*int*/ [] types, long /*int*/ oldParent, long /*int*/ newParent, int modelLength) {
+	long /*int*/ iter = OS.g_malloc(OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_iter_children (oldModel, iter, oldParent))  {
-		int /*long*/ [] oldItems = new int /*long*/ [OS.gtk_tree_model_iter_n_children (oldModel, oldParent)];
+		long /*int*/ [] oldItems = new long /*int*/ [OS.gtk_tree_model_iter_n_children (oldModel, oldParent)];
 		int oldIndex = 0;
 		do {
-			int /*long*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ newItem = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (newItem == 0) error (SWT.ERROR_NO_HANDLES);	
 			OS.gtk_tree_store_append (newModel, newItem, newParent);
 			int [] index = new int [1];
@@ -573,9 +573,9 @@
 			if (index [0] != -1) {
 				item = items [index [0]];
 				if (item != null) {
-					int /*long*/ oldItem = item.handle;
+					long /*int*/ oldItem = item.handle;
 					oldItems[oldIndex++] = oldItem;
-					int /*long*/ [] ptr = new int /*long*/ [1];
+					long /*int*/ [] ptr = new long /*int*/ [1];
 					for (int j = 0; j < FIRST_COLUMN; j++) {
 						OS.gtk_tree_model_get (oldModel, oldItem, j, ptr, -1);
 						OS.gtk_tree_store_set (newModel, newItem, j, ptr [0], -1);
@@ -600,7 +600,7 @@
 			}
 		} while (OS.gtk_tree_model_iter_next(oldModel, iter));
 		for (int i = 0; i < oldItems.length; i++) {
-			int /*long*/ oldItem = oldItems [i];
+			long /*int*/ oldItem = oldItems [i];
 			if (oldItem != 0) {
 				OS.gtk_tree_store_remove (oldModel, oldItem);
 				OS.g_free (oldItem);
@@ -633,17 +633,17 @@
 			modelIndex++;
 		}
 		if (modelIndex == modelLength) {
-			int /*long*/ oldModel = modelHandle;
-			int /*long*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
-			int /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);
+			long /*int*/ oldModel = modelHandle;
+			long /*int*/[] types = getColumnTypes (columnCount + 4); // grow by 4 rows at a time
+			long /*int*/ newModel = OS.gtk_tree_store_newv (types.length, types);
 			if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-			copyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, modelLength);
+			copyModel (oldModel, FIRST_COLUMN, newModel, FIRST_COLUMN, types, (long /*int*/)0, (long /*int*/)0, modelLength);
 			OS.gtk_tree_view_set_model (handle, newModel);
 			OS.g_object_unref (oldModel);
 			modelHandle = newModel;
 		}
 	}
-	int /*long*/ columnHandle = OS.gtk_tree_view_column_new ();
+	long /*int*/ columnHandle = OS.gtk_tree_view_column_new ();
 	if (columnHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	if (index == 0 && columnCount > 0) {
 		TreeColumn checkColumn = columns [0];
@@ -700,7 +700,7 @@
 	OS.gtk_fixed_set_has_window (fixedHandle, true);
 	scrolledHandle = OS.gtk_scrolled_window_new (0, 0);
 	if (scrolledHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ [] types = getColumnTypes (1);
+	long /*int*/ [] types = getColumnTypes (1);
 	modelHandle = OS.gtk_tree_store_newv (types.length, types);
 	if (modelHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	handle = OS.gtk_tree_view_new_with_model (modelHandle);
@@ -715,7 +715,7 @@
 	OS.gtk_container_add (scrolledHandle, handle);
 
 	int mode = (style & SWT.MULTI) != 0 ? OS.GTK_SELECTION_MULTIPLE : OS.GTK_SELECTION_BROWSE;
-	int /*long*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selectionHandle = OS.gtk_tree_view_get_selection (handle);
 	OS.gtk_tree_selection_set_mode (selectionHandle, mode);
 	OS.gtk_tree_view_set_headers_visible (handle, false);	
 	int hsp = (style & SWT.H_SCROLL) != 0 ? OS.GTK_POLICY_AUTOMATIC : OS.GTK_POLICY_NEVER;
@@ -764,11 +764,11 @@
 	} else {
 		createColumn (column, index);
 	}
-	int /*long*/ boxHandle = OS.gtk_hbox_new (false, 3);
+	long /*int*/ boxHandle = OS.gtk_hbox_new (false, 3);
 	if (boxHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
+	long /*int*/ labelHandle = OS.gtk_label_new_with_mnemonic (null);
 	if (labelHandle == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ imageHandle = OS.gtk_image_new ();
+	long /*int*/ imageHandle = OS.gtk_image_new ();
 	if (imageHandle == 0) error (SWT.ERROR_NO_HANDLES);
 	OS.gtk_container_add (boxHandle, imageHandle);
 	OS.gtk_container_add (boxHandle, labelHandle);
@@ -777,7 +777,7 @@
 	column.labelHandle = labelHandle;
 	column.imageHandle = imageHandle;	
 	OS.gtk_tree_view_column_set_widget (column.handle, boxHandle);
-	int /*long*/ widget = OS.gtk_widget_get_parent (boxHandle);
+	long /*int*/ widget = OS.gtk_widget_get_parent (boxHandle);
 	while (widget != handle) {
 		if (OS.GTK_IS_BUTTON (widget)) {
 			column.buttonHandle = widget;
@@ -811,7 +811,7 @@
 	}
 }
 
-void createItem (TreeItem item, int /*long*/ parentIter, int index) {
+void createItem (TreeItem item, long /*int*/ parentIter, int index) {
 	int count = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (index == -1) index = count;
 	if (!(0 <= index && index <= count)) error (SWT.ERROR_INVALID_RANGE);
@@ -831,7 +831,7 @@
 	modelChanged = true;
 }
 
-void createRenderers (int /*long*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
+void createRenderers (long /*int*/ columnHandle, int modelIndex, boolean check, int columnStyle) {
 	OS.gtk_tree_view_column_clear (columnHandle);
 	if ((style & SWT.CHECK) != 0 && check) {
 		OS.gtk_tree_view_column_pack_start (columnHandle, checkRenderer, false);
@@ -854,9 +854,9 @@
 			OS.g_object_set_qdata (checkRenderer, Display.SWT_OBJECT_INDEX1, columnHandle);
 		}
 	}
-	int /*long*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
+	long /*int*/ pixbufRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_pixbuf_get_type (), 0) : OS.gtk_cell_renderer_pixbuf_new ();
 	if (pixbufRenderer == 0) error (SWT.ERROR_NO_HANDLES);
-	int /*long*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
+	long /*int*/ textRenderer = ownerDraw ? OS.g_object_new (display.gtk_cell_renderer_text_get_type (), 0) : OS.gtk_cell_renderer_text_new ();
 	if (textRenderer == 0) error (SWT.ERROR_NO_HANDLES);
 	
 	if (ownerDraw) {
@@ -965,7 +965,7 @@
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_iter (selection, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -983,7 +983,7 @@
 public void deselectAll() {
 	checkWidget();
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_unselect_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -997,7 +997,7 @@
 		index++;
 	}
 	if (index == columnCount) return;
-	int /*long*/ columnHandle = column.handle;
+	long /*int*/ columnHandle = column.handle;
 	if (columnCount == 1) {
 		firstCustomDraw = column.customDraw;
 	}
@@ -1005,11 +1005,11 @@
 	columns [columnCount] = null;
 	OS.gtk_tree_view_remove_column (handle, columnHandle);
 	if (columnCount == 0) {
-		int /*long*/ oldModel = modelHandle;
-		int /*long*/[] types = getColumnTypes (1);
-		int /*long*/ newModel = OS.gtk_tree_store_newv (types.length, types);
+		long /*int*/ oldModel = modelHandle;
+		long /*int*/[] types = getColumnTypes (1);
+		long /*int*/ newModel = OS.gtk_tree_store_newv (types.length, types);
 		if (newModel == 0) error (SWT.ERROR_NO_HANDLES);
-		copyModel(oldModel, column.modelIndex, newModel, FIRST_COLUMN, types, (int /*long*/)0, (int /*long*/)0, FIRST_COLUMN + CELL_TYPES);
+		copyModel(oldModel, column.modelIndex, newModel, FIRST_COLUMN, types, (long /*int*/)0, (long /*int*/)0, FIRST_COLUMN + CELL_TYPES);
 		OS.gtk_tree_view_set_model (handle, newModel);
 		OS.g_object_unref (oldModel);
 		modelHandle = newModel;
@@ -1019,7 +1019,7 @@
 		for (int i=0; i<items.length; i++) {
 			TreeItem item = items [i];
 			if (item != null) {
-				int /*long*/ iter = item.handle;
+				long /*int*/ iter = item.handle;
 				int modelIndex = column.modelIndex;
 				OS.gtk_tree_store_set (modelHandle, iter, modelIndex + CELL_PIXBUF, 0, -1);
 				OS.gtk_tree_store_set (modelHandle, iter, modelIndex + CELL_TEXT, 0, -1);
@@ -1084,7 +1084,7 @@
 	if (OS.GTK_VERSION < OS.VERSION (2, 0, 6)) {
 		int length = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 		if (length > 0) {
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, 0);
 			while (valid) {
 				if (item.handle == iter) {
@@ -1096,7 +1096,7 @@
 			OS.g_free (iter);
 		}
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_store_remove (modelHandle, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1106,10 +1106,10 @@
 boolean dragDetect (int x, int y, boolean filter, boolean [] consume) {
 	boolean selected = false;
 	if (filter) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, x, y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) selected = true;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1122,7 +1122,7 @@
 	return dragDetect;
 }
 
-int /*long*/ eventWindow () {
+long /*int*/ eventWindow () {
 	return paintWindow ();
 }
 
@@ -1145,13 +1145,13 @@
 	checkWidget ();
 	forceResize ();
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binX = new int [1], binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, binX, binY);
 	int [] fixedX = new int [1], fixedY = new int [1];
 	OS.gdk_window_get_origin (fixedWindow, fixedX, fixedY);
-	int /*long*/ clientHandle = clientHandle ();
+	long /*int*/ clientHandle = clientHandle ();
 	int width = (state & ZERO_WIDTH) != 0 ? 0 : OS.GTK_WIDGET_WIDTH (clientHandle);
 	int height = (state & ZERO_HEIGHT) != 0 ? 0 : OS.GTK_WIDGET_HEIGHT (clientHandle);
 	return new Rectangle (fixedX [0] - binX [0], fixedY [0] - binY [0], width, height);
@@ -1251,13 +1251,13 @@
 public int [] getColumnOrder () {
 	checkWidget ();
 	if (columnCount == 0) return new int [0];
-	int /*long*/ list = OS.gtk_tree_view_get_columns (handle);
+	long /*int*/ list = OS.gtk_tree_view_get_columns (handle);
 	if (list == 0) return new int [0];
 	int  i = 0, count = OS.g_list_length (list);
 	int [] order = new int [count];
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ column = OS.g_list_data (temp);
+		long /*int*/ column = OS.g_list_data (temp);
 		if (column != 0) {
 			for (int j=0; j<columnCount; j++) {
 				if (columns [j].handle == column) {
@@ -1272,8 +1272,8 @@
 	return order;
 }
 
-int /*long*/[] getColumnTypes (int columnCount) {
-	int /*long*/[] types = new int /*long*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
+long /*int*/[] getColumnTypes (int columnCount) {
+	long /*int*/[] types = new long /*int*/ [FIRST_COLUMN + (columnCount * CELL_TYPES)];
 	// per row data
 	types [ID_COLUMN] = OS.G_TYPE_INT ();
 	types [CHECKED_COLUMN] = OS.G_TYPE_BOOLEAN (); 
@@ -1329,11 +1329,11 @@
 }
 
 TreeItem getFocusItem () {
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_tree_view_get_cursor (handle, path, null);
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -1384,7 +1384,7 @@
 		GtkRequisition requisition = new GtkRequisition ();
 		int height = 0;
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ buttonHandle = columns [i].buttonHandle;
+			long /*int*/ buttonHandle = columns [i].buttonHandle;
 			if (buttonHandle != 0) {
 				OS.gtk_widget_size_request (buttonHandle, requisition);
 				height = Math.max (height, requisition.height);
@@ -1393,8 +1393,8 @@
 		return height;
 	}
 	OS.gtk_widget_realize (handle);
-	int /*long*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
-	int /*long*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
+	long /*int*/ fixedWindow = OS.GTK_WIDGET_WINDOW (fixedHandle);
+	long /*int*/ binWindow = OS.gtk_tree_view_get_bin_window (handle);
 	int [] binY = new int [1];
 	OS.gdk_window_get_origin (binWindow, null, binY);
 	int [] fixedY = new int [1];
@@ -1477,13 +1477,13 @@
 public TreeItem getItem (Point point) {
 	checkWidget ();
 	if (point == null) error (SWT.ERROR_NULL_ARGUMENT);
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
-	int /*long*/ [] columnHandle = new int /*long*/ [1];
+	long /*int*/ [] columnHandle = new long /*int*/ [1];
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, point.x, point.y, path, columnHandle, null, null)) return null;
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		boolean overExpander = false;
 		if (OS.gtk_tree_view_get_expander_column (handle) == columnHandle [0]) {
@@ -1540,7 +1540,7 @@
 	checkWidget ();
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, 0);
 	if (itemCount == 0) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, 0);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, 0);
 		int [] w = new int [1], h = new int [1];
 		ignoreSize = true;
 		OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1548,11 +1548,11 @@
 		return h [0];
 	} else {
 		int height = 0;
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		OS.gtk_tree_model_get_iter_first (modelHandle, iter);
 		int columnCount = Math.max (1, this.columnCount);
 		for (int i=0; i<columnCount; i++) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 			OS.gtk_tree_view_column_cell_set_cell_data (column, modelHandle, iter, false, false);
 			int [] w = new int [1], h = new int [1];
 			OS.gtk_tree_view_column_cell_get_size (column, null, null, null, w, h);
@@ -1585,7 +1585,7 @@
 	return getItems (0);
 }
 
-TreeItem [] getItems (int /*long*/ parent) {
+TreeItem [] getItems (long /*int*/ parent) {
 	int length = OS.gtk_tree_model_iter_n_children (modelHandle, parent);
 	TreeItem[] result = new TreeItem [length];
 	if (length == 0) return result;
@@ -1596,7 +1596,7 @@
 	} else {
 		int i = 0;
 		int[] index = new int [1];
-		int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+		long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 		boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parent);
 		while (valid) {
 			OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -1649,14 +1649,14 @@
 	return null;
 }
 
-int /*long*/ getPixbufRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getPixbufRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ pixbufRenderer = 0;
+	long /*int*/ pixbufRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_PIXBUF (renderer)) {
 			pixbufRenderer = renderer;
 			break;
@@ -1685,7 +1685,7 @@
  */
 public TreeItem[] getSelection () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength  = 0;
 		display.treeSelection = new int [items.length];
@@ -1699,15 +1699,15 @@
 	* in versions smaller than 2.2.4 if the model is NULL.  The fix is
 	* to give a valid pointer instead.
 	*/
-	int /*long*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new int /*long*/ [1] : null;
-	int /*long*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
+	long /*int*/ [] model = OS.GTK_VERSION < OS.VERSION (2, 2, 4) ? new long /*int*/ [1] : null;
+	long /*int*/ list = OS.gtk_tree_selection_get_selected_rows (selection, model);
 	if (list != 0) {
 		int count = OS.g_list_length (list);
 		TreeItem [] treeSelection = new TreeItem [count];
 		int length = 0;
 		for (int i=0; i<count; i++) {
-			int /*long*/ data = OS.g_list_nth_data (list, i);
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ data = OS.g_list_nth_data (list, i);
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (OS.gtk_tree_model_get_iter (modelHandle, iter, data)) {
 				treeSelection [length] = _getItem (iter);
 				length++;
@@ -1737,7 +1737,7 @@
  */
 public int getSelectionCount () {
 	checkWidget();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	if (OS.GTK_VERSION < OS.VERSION (2, 2, 0)) {
 		display.treeSelectionLength = 0;
 		display.treeSelection = null;
@@ -1789,14 +1789,14 @@
 	return sortDirection;
 }
 
-int /*long*/ getTextRenderer (int /*long*/ column) {
-	int /*long*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
+long /*int*/ getTextRenderer (long /*int*/ column) {
+	long /*int*/ list = OS.gtk_tree_view_column_get_cell_renderers (column);
 	if (list == 0) return 0;
 	int count = OS.g_list_length (list);
-	int /*long*/ textRenderer = 0;
+	long /*int*/ textRenderer = 0;
 	int i = 0;
 	while (i < count) {
-		int /*long*/ renderer = OS.g_list_nth_data (list, i);
+		long /*int*/ renderer = OS.g_list_nth_data (list, i);
 		 if (OS.GTK_IS_CELL_RENDERER_TEXT (renderer)) {
 			textRenderer = renderer;
 			break;
@@ -1823,12 +1823,12 @@
  */
 public TreeItem getTopItem () {
 	checkWidget ();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos (handle, 1, 1, path, null, null, null)) return null;
 	if (path [0] == 0) return null;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path [0])) {
 		item = _getItem (iter);
 	}
@@ -1837,11 +1837,11 @@
 	return item;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventButton gdkEvent = new GdkEventButton ();
 	OS.memmove (gdkEvent, event, GdkEventButton.sizeof);
 	if (gdkEvent.window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
-	int /*long*/ result = super.gtk_button_press_event (widget, event);
+	long /*int*/ result = super.gtk_button_press_event (widget, event);
 	if (result != 0) return result;
 	/*
 	* Feature in GTK.  In a multi-select tree view, when multiple items are already
@@ -1853,10 +1853,10 @@
 	*/
 	int button = gdkEvent.button;
 	if (button == 3 && gdkEvent.type == OS.GDK_BUTTON_PRESS) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				if (OS.gtk_tree_selection_path_is_selected (selection, path [0])) result = 1;
 				OS.gtk_tree_path_free (path [0]);
 			}
@@ -1871,10 +1871,10 @@
 	* widget from automatically selecting the first item.
 	*/
 	if ((style & SWT.SINGLE) != 0 && getSelectionCount () == 0) {
-		int /*long*/ [] path = new int /*long*/ [1];
+		long /*int*/ [] path = new long /*int*/ [1];
 		if (OS.gtk_tree_view_get_path_at_pos (handle, (int)gdkEvent.x, (int)gdkEvent.y, path, null, null, null)) {
 			if (path [0] != 0) {
-				int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+				long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 				OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 				OS.gtk_tree_view_set_cursor (handle, path [0], 0, false);
 				OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -1894,13 +1894,13 @@
 	return result;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_button_release_event (widget, event);
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	TreeItem item = getFocusItem ();
 	if (item != null) {
 		Event event = new Event ();
@@ -1910,14 +1910,14 @@
 	return 0;
 }
 
-int /*long*/ gtk_expand_collapse_cursor_row (int /*long*/ widget, int /*long*/ logical, int /*long*/ expand, int /*long*/ open_all) {
+long /*int*/ gtk_expand_collapse_cursor_row (long /*int*/ widget, long /*int*/ logical, long /*int*/ expand, long /*int*/ open_all) {
 	// FIXME - this flag is never cleared.  It should be cleared when the expand all operation completes.
 	if (expand != 0 && open_all != 0) expandAll = true;
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ eventPtr) {
-	int /*long*/ result = super.gtk_key_press_event (widget, eventPtr);
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ eventPtr) {
+	long /*int*/ result = super.gtk_key_press_event (widget, eventPtr);
 	if (result != 0) return result;
 	if (OS.GTK_VERSION < OS.VERSION (2, 2 ,0)) {
 		/*
@@ -1941,14 +1941,14 @@
 	return result;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
-	int /*long*/ window = OS.GDK_EVENT_WINDOW (event);
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
+	long /*int*/ window = OS.GDK_EVENT_WINDOW (event);
 	if (window != OS.gtk_tree_view_get_bin_window (handle)) return 0;
 	return super.gtk_motion_notify_event (widget, event);
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
-	int /*long*/ result = super.gtk_popup_menu (widget);
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
+	long /*int*/ result = super.gtk_popup_menu (widget);
 	/*
 	* Bug in GTK.  The context menu for the typeahead in GtkTreeViewer
 	* opens in the bottom right corner of the screen when Shift+F10
@@ -1961,10 +1961,10 @@
 	return OS.GTK_VERSION < OS.VERSION (2, 6, 5) ? 1 : result;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	if (path == 0) return 0;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path)) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -1977,7 +1977,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_test_collapse_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_collapse_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	int [] index = new int [1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
 	TreeItem item = items [index [0]];
@@ -2015,7 +2015,7 @@
 	return 0;
 }
 
-int /*long*/ gtk_test_expand_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_expand_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	int [] index = new int [1];
 	OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
 	TreeItem item = items [index [0]];
@@ -2057,11 +2057,11 @@
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
-	int /*long*/ path = OS.gtk_tree_path_new_from_string (pathStr);
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
+	long /*int*/ path = OS.gtk_tree_path_new_from_string (pathStr);
 	if (path == 0) return 0;
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof());
 	if (OS.gtk_tree_model_get_iter (modelHandle, iter, path)) {
 		item = _getItem (iter);
 	}
@@ -2077,7 +2077,7 @@
 	return 0;
 }
 
-void gtk_widget_size_request (int /*long*/ widget, GtkRequisition requisition) {
+void gtk_widget_size_request (long /*int*/ widget, GtkRequisition requisition) {
 	/*
 	 * Bug in GTK.  For some reason, gtk_widget_size_request() fails
 	 * to include the height of the tree view items when there are
@@ -2088,17 +2088,17 @@
 		super.gtk_widget_size_request (widget, requisition);
 		return;
 	}
-	int /*long*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
+	long /*int*/ columns = OS.gtk_tree_view_get_columns (handle), list = columns;
 	boolean fixVisible = columns != 0;
 	while (list != 0) {
-		int /*long*/ column = OS.g_list_data (list);
+		long /*int*/ column = OS.g_list_data (list);
 		if (OS.gtk_tree_view_column_get_visible (column)) {
 			fixVisible = false;
 			break;
 		}
 		list = OS.g_list_next (list);
 	}
-	int /*long*/ columnHandle = 0;
+	long /*int*/ columnHandle = 0;
 	if (fixVisible) {
 		columnHandle = OS.g_list_data (columns);
 		OS.gtk_tree_view_column_set_visible (columnHandle, true);
@@ -2111,13 +2111,13 @@
 }
 
 void hideFirstColumn () {
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, false);	
 }
 	
 void hookEvents () {
 	super.hookEvents ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection(handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection(handle);
 	OS.g_signal_connect_closure (selection, OS.changed, display.closures [CHANGED], false);
 	OS.g_signal_connect_closure (handle, OS.row_activated, display.closures [ROW_ACTIVATED], false);
 	OS.g_signal_connect_closure (handle, OS.test_expand_row, display.closures [TEST_EXPAND_ROW], false);
@@ -2181,10 +2181,10 @@
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	int index = -1;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	int depth = OS.gtk_tree_path_get_depth (path);
 	if (depth == 1) {
-		int /*long*/ indices = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indices = OS.gtk_tree_path_get_indices (path);
 		if (indices != 0) {	
 			int[] temp = new int[1];
 			OS.memmove (temp, indices, 4);
@@ -2197,7 +2197,7 @@
 
 boolean mnemonicHit (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicHit (labelHandle, key)) return true;
 	}
 	return false;
@@ -2205,13 +2205,13 @@
 
 boolean mnemonicMatch (char key) {
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ labelHandle = columns [i].labelHandle;
+		long /*int*/ labelHandle = columns [i].labelHandle;
 		if (labelHandle != 0 && mnemonicMatch (labelHandle, key)) return true;
 	}
 	return false;
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	OS.gtk_widget_realize (handle);
 	return OS.gtk_tree_view_get_bin_window (handle);
 }
@@ -2257,9 +2257,9 @@
 	items [index [0]] = null;
 }
 
-void releaseItems (int /*long*/ parentIter) {
+void releaseItems (long /*int*/ parentIter) {
 	int[] index = new int [1];
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	boolean valid = OS.gtk_tree_model_iter_children (modelHandle, iter, parentIter);
 	while (valid) {
 		releaseItems (iter);
@@ -2309,14 +2309,14 @@
 	currentItem = null;
 }
 
-void remove (int /*long*/ parentIter, int start, int end) {
+void remove (long /*int*/ parentIter, int start, int end) {
 	if (start > end) return;
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (!(0 <= start && start <= end && end < itemCount)) {
 		error (SWT.ERROR_INVALID_RANGE);
 	}
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
-	int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 	int index = start;
 	for (int i = start; i <= end; i++) {
 		OS.gtk_tree_model_iter_nth_child (modelHandle, iter, parentIter, index);
@@ -2349,7 +2349,7 @@
 		if (item != null && !item.isDisposed ()) item.release (false);
 	}
 	items = new TreeItem[4];
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_store_clear (modelHandle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2427,19 +2427,19 @@
 	eventTable.unhook (SWT.Collapse, listener);
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ widget, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
-	int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ widget, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
+	long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 	GtkCellRendererClass klass = new GtkCellRendererClass ();
 	OS.memmove (klass, g_class);
-	int /*long*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
+	long /*int*/ result = OS.call (klass.get_size, cell, handle, cell_area, x_offset, y_offset, width, height);
 	if (!ignoreSize && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
-		int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+		long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 		TreeItem item = null;
 		if (iter != 0) item = _getItem (iter);
 		if (item != null) {
 			int columnIndex = 0;
 			if (columnCount > 0) {
-				int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+				long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 				for (int i = 0; i < columnCount; i++) {
 					if (columns [i].handle == columnHandle) {
 						columnIndex = i;
@@ -2478,11 +2478,11 @@
 	return result;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ widget, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ widget, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	TreeItem item = null;
-	int /*long*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
+	long /*int*/ iter = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX2);
 	if (iter != 0) item = _getItem (iter);
-	int /*long*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
+	long /*int*/ columnHandle = OS.g_object_get_qdata (cell, Display.SWT_OBJECT_INDEX1);
 	int columnIndex = 0;
 	if (columnCount > 0) {
 		for (int i = 0; i < columnCount; i++) {
@@ -2496,7 +2496,7 @@
 		if (OS.GTK_IS_CELL_RENDERER_TOGGLE (cell) || (OS.GTK_IS_CELL_RENDERER_PIXBUF (cell) && (columnIndex != 0 || (style & SWT.CHECK) == 0))) {
 			drawFlags = (int)/*64*/flags;
 			drawState = SWT.FOREGROUND;
-			int /*long*/ [] ptr = new int /*long*/ [1];
+			long /*int*/ [] ptr = new long /*int*/ [1];
 			OS.gtk_tree_model_get (modelHandle, item.handle, Tree.BACKGROUND_COLUMN, ptr, -1);
 			if (ptr [0] == 0) {
 				int modelIndex = columnCount == 0 ? Tree.FIRST_COLUMN : columns [columnIndex].modelIndex;
@@ -2507,7 +2507,7 @@
 			if ((flags & OS.GTK_CELL_RENDERER_FOCUSED) != 0) drawState |= SWT.FOCUSED;			
 			
 			GdkRectangle rect = new GdkRectangle ();
-			int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+			long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 			OS.gtk_tree_view_get_background_area (handle, path, columnHandle, rect);
 			OS.gtk_tree_path_free (path);
 			
@@ -2551,7 +2551,7 @@
 				if ((drawState & SWT.SELECTED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_SELECTED;
 				if ((drawState & SWT.FOCUSED) != 0) drawFlags |= OS.GTK_CELL_RENDERER_FOCUSED;
 				if ((drawState & SWT.SELECTED) != 0) {
-					int /*long*/ style = OS.gtk_widget_get_style (widget);					
+					long /*int*/ style = OS.gtk_widget_get_style (widget);					
 					//TODO - parity and sorted
 					byte[] detail = Converter.wcsToMbcs (null, "cell_odd", true);
 					OS.gtk_paint_flat_box (style, window, OS.GTK_STATE_SELECTED, OS.GTK_SHADOW_NONE, rect, widget, detail, rect.x, rect.y, rect.width, rect.height);
@@ -2562,7 +2562,7 @@
 			}
 		}
 	}
-	int /*long*/ result = 0;
+	long /*int*/ result = 0;
 	if ((drawState & SWT.BACKGROUND) != 0 && (drawState & SWT.SELECTED) == 0) {
 		GC gc = new GC (this);
 		gc.setBackground (item.getBackground (columnIndex));
@@ -2572,7 +2572,7 @@
 		gc.dispose ();
 	}
 	if ((drawState & SWT.FOREGROUND) != 0 || OS.GTK_IS_CELL_RENDERER_TOGGLE (cell)) {
-		int /*long*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
+		long /*int*/ g_class = OS.g_type_class_peek_parent (OS.G_OBJECT_GET_CLASS (cell));
 		GtkCellRendererClass klass = new GtkCellRendererClass ();
 		OS.memmove (klass, g_class);
 		if (drawForeground != null && OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
@@ -2584,7 +2584,7 @@
 		if (OS.GTK_IS_CELL_RENDERER_TEXT (cell)) {
 			if (hooks (SWT.PaintItem)) {
 				GdkRectangle rect = new GdkRectangle ();
-				int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
+				long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, iter);
 				OS.gtk_tree_view_get_cell_area (handle, path, columnHandle, rect);
 				OS.gtk_tree_path_free (path);
 				if (OS.GTK_VERSION < OS.VERSION (2, 8, 18) && OS.gtk_tree_view_get_expander_column (handle) == columnHandle) {
@@ -2644,8 +2644,8 @@
 	for (int i=0; i<end; i++) {
 		boolean customDraw = columnCount != 0 ? columns [i].customDraw : firstCustomDraw;
 		if (customDraw) {
-			int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
-			int /*long*/ textRenderer = getTextRenderer (column);
+			long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
+			long /*int*/ textRenderer = getTextRenderer (column);
 			OS.gtk_tree_view_column_set_cell_data_func (column, textRenderer, 0, 0, 0);
 			if (columnCount != 0) columns [i].customDraw = false;
 		}
@@ -2679,7 +2679,7 @@
 	if (item.isDisposed()) error (SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
 	Rectangle rect = item.getBounds();
-	int /*long*/ [] path = new int /*long*/ [1];
+	long /*int*/ [] path = new long /*int*/ [1];
 	OS.gtk_widget_realize (handle);
 	if (!OS.gtk_tree_view_get_path_at_pos(handle, rect.x, rect.y, path, null, null, null)) return;
 	if (path [0] == 0) return;
@@ -2688,7 +2688,7 @@
 	OS.gtk_tree_path_free (path [0]);
 }
 
-void setItemCount (int /*long*/ parentIter, int count) {
+void setItemCount (long /*int*/ parentIter, int count) {
 	int itemCount = OS.gtk_tree_model_iter_n_children (modelHandle, parentIter);
 	if (count == itemCount) return;
 	boolean isVirtual = (style & SWT.VIRTUAL) != 0;
@@ -2696,7 +2696,7 @@
 	remove (parentIter, count, itemCount - 1);
 	if (isVirtual) {
 		for (int i=itemCount; i<count; i++) {
-			int /*long*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
+			long /*int*/ iter = OS.g_malloc (OS.GtkTreeIter_sizeof ());
 			if (iter == 0) error (SWT.ERROR_NO_HANDLES);
 			OS.gtk_tree_store_append (modelHandle, iter, parentIter);
 			OS.gtk_tree_store_set (modelHandle, iter, ID_COLUMN, -1, -1);
@@ -2751,7 +2751,7 @@
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error (SWT.ERROR_INVALID_ARGUMENT);
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_iter (selection, item.handle);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2773,7 +2773,7 @@
 	checkWidget();
 	if ((style & SWT.SINGLE) != 0) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	OS.gtk_tree_selection_select_all (selection);
 	OS.g_signal_handlers_unblock_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
@@ -2785,9 +2785,9 @@
 	OS.gtk_widget_modify_base (handle, 0, color);
 }
 
-void setBackgroundPixmap (int /*long*/ pixmap) {
+void setBackgroundPixmap (long /*int*/ pixmap) {
 	super.setBackgroundPixmap (pixmap);
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);	
 }
 
@@ -2852,15 +2852,15 @@
 		if (seen [index]) error (SWT.ERROR_INVALID_ARGUMENT);
 		seen [index] = true;
 	}
-	int /*long*/ baseColumn = 0;
+	long /*int*/ baseColumn = 0;
 	for (int i=0; i<order.length; i++) {
-		int /*long*/ column = columns [order [i]].handle;
+		long /*int*/ column = columns [order [i]].handle;
 		OS.gtk_tree_view_move_column_after (handle, column, baseColumn);
 		baseColumn = column;
 	}
 }
 
-void setFontDescription (int /*long*/ font) {
+void setFontDescription (long /*int*/ font) {
 	super.setFontDescription (font);
 	TreeColumn[] columns = getColumns ();
 	for (int i = 0; i < columns.length; i++) {
@@ -2918,16 +2918,16 @@
 
 void setParentBackground () {
 	super.setParentBackground ();
-	int /*long*/ window = paintWindow ();
+	long /*int*/ window = paintWindow ();
 	if (window != 0) OS.gdk_window_set_back_pixmap (window, 0, true);
 }
 
-void setParentWindow (int /*long*/ widget) {
-	int /*long*/ window = eventWindow ();
+void setParentWindow (long /*int*/ widget) {
+	long /*int*/ window = eventWindow ();
 	OS.gtk_widget_set_parent_window (widget, window);
 }
 
-void setScrollWidth (int /*long*/ column, TreeItem item) {
+void setScrollWidth (long /*int*/ column, TreeItem item) {
 	if (columnCount != 0 || currentItem == item) return;
 	/*
 	* Use GTK_TREE_VIEW_COLUMN_GROW_ONLY on GTK versions < 2.3.2
@@ -2996,7 +2996,7 @@
 	int length = items.length;
 	if (length == 0 || ((style & SWT.SINGLE) != 0 && length > 1)) return;
 	boolean fixColumn = showFirstColumn ();
-	int /*long*/ selection = OS.gtk_tree_view_get_selection (handle);
+	long /*int*/ selection = OS.gtk_tree_view_get_selection (handle);
 	OS.g_signal_handlers_block_matched (selection, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, CHANGED);
 	boolean first = true;
 	for (int i = 0; i < length; i++) {
@@ -3004,7 +3004,7 @@
 		if (item == null) continue;
 		if (item.isDisposed ()) break;
 		if (item.parent != this) continue;
-		int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+		long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 		showItem (path, false);
 		if (first) {
 			OS.gtk_tree_view_set_cursor (handle, path, 0, false);
@@ -3097,7 +3097,7 @@
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error(SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	showItem (path, false);
 	OS.gtk_tree_view_scroll_to_cell (handle, path, 0, true, 0f, 0f);
 	if (OS.GTK_VERSION < OS.VERSION (2, 8, 0)) {
@@ -3172,10 +3172,10 @@
 	*/
 	int columnCount = Math.max (1, this.columnCount);
 	for (int i=0; i<columnCount; i++) {
-		int /*long*/ column = OS.gtk_tree_view_get_column (handle, i);
+		long /*int*/ column = OS.gtk_tree_view_get_column (handle, i);
 		if (OS.gtk_tree_view_column_get_visible (column)) return false;
 	}
-	int /*long*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
+	long /*int*/ firstColumn = OS.gtk_tree_view_get_column (handle, 0);
 	OS.gtk_tree_view_column_set_visible (firstColumn, true);
 	return true;
 }
@@ -3198,13 +3198,13 @@
 	if (items.length != 0 && items [0] != null) showItem (items [0]);
 }
 
-void showItem (int /*long*/ path, boolean scroll) {
+void showItem (long /*int*/ path, boolean scroll) {
 	int depth = OS.gtk_tree_path_get_depth (path);
 	if (depth > 1) {
 		int [] indices = new int [depth - 1];
-		int /*long*/ indicesPtr = OS.gtk_tree_path_get_indices (path);
+		long /*int*/ indicesPtr = OS.gtk_tree_path_get_indices (path);
 		OS.memmove (indices, indicesPtr, indices.length * 4);
-		int /*long*/ tempPath = OS.gtk_tree_path_new ();
+		long /*int*/ tempPath = OS.gtk_tree_path_new ();
 		for (int i=0; i<indices.length; i++) {
 			OS.gtk_tree_path_append_index (tempPath, indices [i]);
 			OS.gtk_tree_view_expand_row (handle, tempPath, false);
@@ -3276,12 +3276,12 @@
 	if (item == null) error (SWT.ERROR_NULL_ARGUMENT);
 	if (item.isDisposed ()) error(SWT.ERROR_INVALID_ARGUMENT);
 	if (item.parent != this) return;
-	int /*long*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
+	long /*int*/ path = OS.gtk_tree_model_get_path (modelHandle, item.handle);
 	showItem (path, true);
 	OS.gtk_tree_path_free (path);
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int[] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int[] selection, int length) {
 	if (selection != null) {
 		int [] index = new int [1];
 		OS.gtk_tree_model_get (modelHandle, iter, ID_COLUMN, index, -1);
@@ -3299,12 +3299,12 @@
 	* The fix is to queue a resize event for each child to
 	* force the position to be corrected.
 	*/
-	int /*long*/ parentHandle = parentingHandle ();
-	int /*long*/ list = OS.gtk_container_get_children (parentHandle);
+	long /*int*/ parentHandle = parentingHandle ();
+	long /*int*/ list = OS.gtk_container_get_children (parentHandle);
 	if (list == 0) return;
-	int /*long*/ temp = list;
+	long /*int*/ temp = list;
 	while (temp != 0) {
-		int /*long*/ widget = OS.g_list_data (temp);
+		long /*int*/ widget = OS.g_list_data (temp);
 		if (widget != 0) OS.gtk_widget_queue_resize  (widget);
 		temp = OS.g_list_next (temp);
 	}
diff -ur x86/org/eclipse/swt/widgets/Widget.java x86_64/org/eclipse/swt/widgets/Widget.java
--- x86/org/eclipse/swt/widgets/Widget.java	2009-06-24 21:13:58.000000000 -0400
+++ x86_64/org/eclipse/swt/widgets/Widget.java	2009-02-11 17:43:50.000000000 -0500
@@ -54,7 +54,7 @@
 	 * platforms and should never be accessed from application code.
 	 * </p>
 	 */
-	public int /*long*/ handle;
+	public long /*int*/ handle;
 	int style, state;
 	Display display;
 	EventTable eventTable;
@@ -265,7 +265,7 @@
 	addListener (SWT.Dispose, typedListener);
 }
 
-int /*long*/ paintWindow () {
+long /*int*/ paintWindow () {
 	return 0;
 }
 
@@ -281,7 +281,7 @@
 	return style;
 }
 
-int /*long*/ cellDataProc (int /*long*/ tree_column, int /*long*/ cell, int /*long*/ tree_model, int /*long*/ iter, int /*long*/ data) {
+long /*int*/ cellDataProc (long /*int*/ tree_column, long /*int*/ cell, long /*int*/ tree_model, long /*int*/ iter, long /*int*/ data) {
 	return 0;
 }
 
@@ -402,7 +402,7 @@
 }
 
 void destroyWidget () {
-	int /*long*/ topHandle = topHandle ();
+	long /*int*/ topHandle = topHandle ();
 	releaseHandle ();
 	if (topHandle != 0 && (state & HANDLE) != 0) {
 		OS.gtk_widget_destroy (topHandle);
@@ -596,253 +596,253 @@
 }
 
 
-int /*long*/ gtk_activate (int /*long*/ widget) {
+long /*int*/ gtk_activate (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_button_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_press_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_button_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_button_release_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_changed (int /*long*/ widget) {
+long /*int*/ gtk_changed (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_change_value (int /*long*/ widget, int /*long*/ scroll, int /*long*/ value1, int /*long*/ value2) {
+long /*int*/ gtk_change_value (long /*int*/ widget, long /*int*/ scroll, long /*int*/ value1, long /*int*/ value2) {
 	return 0;
 }
 
-int /*long*/ gtk_clicked (int /*long*/ widget) {
+long /*int*/ gtk_clicked (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_commit (int /*long*/ imcontext, int /*long*/ text) {
+long /*int*/ gtk_commit (long /*int*/ imcontext, long /*int*/ text) {
 	return 0;
 }
 
-int /*long*/ gtk_configure_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_configure_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_day_selected (int /*long*/ widget) {
+long /*int*/ gtk_day_selected (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_delete_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_range (int /*long*/ widget, int /*long*/ iter1, int /*long*/ iter2) {
+long /*int*/ gtk_delete_range (long /*int*/ widget, long /*int*/ iter1, long /*int*/ iter2) {
 	return 0;
 }
 
-int /*long*/ gtk_delete_text (int /*long*/ widget, int /*long*/ start_pos, int /*long*/ end_pos) {
+long /*int*/ gtk_delete_text (long /*int*/ widget, long /*int*/ start_pos, long /*int*/ end_pos) {
 	return 0;
 }
 
-int /*long*/ gtk_enter_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_enter_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_event_after (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_event_after (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_expand_collapse_cursor_row (int /*long*/ widget, int /*long*/ logical, int /*long*/ expand, int /*long*/ open_all) {
+long /*int*/ gtk_expand_collapse_cursor_row (long /*int*/ widget, long /*int*/ logical, long /*int*/ expand, long /*int*/ open_all) {
 	return 0;
 }
 
-int /*long*/ gtk_expose_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_expose_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_in_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_in_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_focus_out_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_focus_out_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_grab_focus (int /*long*/ widget) {
+long /*int*/ gtk_grab_focus (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_hide (int /*long*/ widget) {
+long /*int*/ gtk_hide (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_input (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_input (long /*int*/ widget, long /*int*/ arg1) {
 	return 0;
 }
 
-int /*long*/ gtk_insert_text (int /*long*/ widget, int /*long*/ new_text, int /*long*/ new_text_length, int /*long*/ position) {
+long /*int*/ gtk_insert_text (long /*int*/ widget, long /*int*/ new_text, long /*int*/ new_text_length, long /*int*/ position) {
 	return 0;
 }
 
-int /*long*/ gtk_key_press_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_press_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
 	return sendKeyEvent (SWT.KeyDown, gdkEvent) ? 0 : 1;
 }
 
-int /*long*/ gtk_key_release_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_key_release_event (long /*int*/ widget, long /*int*/ event) {
 	GdkEventKey gdkEvent = new GdkEventKey ();
 	OS.memmove (gdkEvent, event, GdkEventKey.sizeof);
 	return sendKeyEvent (SWT.KeyUp, gdkEvent) ? 0 : 1;
 }
 
-int /*long*/ gtk_leave_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_leave_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_map (int /*long*/ widget) {
+long /*int*/ gtk_map (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_map_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_map_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_mnemonic_activate (int /*long*/ widget, int /*long*/ arg1) {
+long /*int*/ gtk_mnemonic_activate (long /*int*/ widget, long /*int*/ arg1) {
 	return 0;
 }
 
-int /*long*/ gtk_month_changed (int /*long*/ widget) {
+long /*int*/ gtk_month_changed (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_motion_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_motion_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_move_focus (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_move_focus (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_output (int /*long*/ widget) {
+long /*int*/ gtk_output (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_populate_popup (int /*long*/ widget, int /*long*/ menu) {
+long /*int*/ gtk_populate_popup (long /*int*/ widget, long /*int*/ menu) {
 	return 0;
 }
 
-int /*long*/ gtk_popup_menu (int /*long*/ widget) {
+long /*int*/ gtk_popup_menu (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_preedit_changed (int /*long*/ imcontext) {
+long /*int*/ gtk_preedit_changed (long /*int*/ imcontext) {
 	return 0;
 }
 
-int /*long*/ gtk_realize (int /*long*/ widget) {
+long /*int*/ gtk_realize (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_row_activated (int /*long*/ tree, int /*long*/ path, int /*long*/ column) {
+long /*int*/ gtk_row_activated (long /*int*/ tree, long /*int*/ path, long /*int*/ column) {
 	return 0;
 }
 
-int /*long*/ gtk_scroll_child (int /*long*/ widget, int /*long*/ scrollType, int /*long*/ horizontal) {
+long /*int*/ gtk_scroll_child (long /*int*/ widget, long /*int*/ scrollType, long /*int*/ horizontal) {
 	return 0;
 }
 
-int /*long*/ gtk_scroll_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_scroll_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_select (int /*long*/ item) {
+long /*int*/ gtk_select (long /*int*/ item) {
 	return 0;
 }
 
-int /*long*/ gtk_show (int /*long*/ widget) {
+long /*int*/ gtk_show (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_show_help (int /*long*/ widget, int /*long*/ helpType) {
+long /*int*/ gtk_show_help (long /*int*/ widget, long /*int*/ helpType) {
 	return 0;
 }
 
-int /*long*/ gtk_size_allocate (int /*long*/ widget, int /*long*/ allocation) {
+long /*int*/ gtk_size_allocate (long /*int*/ widget, long /*int*/ allocation) {
 	return 0;
 }
 
-int /*long*/ gtk_style_set (int /*long*/ widget, int /*long*/ previousStyle) {
+long /*int*/ gtk_style_set (long /*int*/ widget, long /*int*/ previousStyle) {
 	return 0;
 }
 
-int /*long*/ gtk_switch_page (int /*long*/ widget, int /*long*/ page, int /*long*/ page_num) {
+long /*int*/ gtk_switch_page (long /*int*/ widget, long /*int*/ page, long /*int*/ page_num) {
 	return 0;
 }
 
-int /*long*/ gtk_test_collapse_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_collapse_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	return 0;
 }
 
-int /*long*/ gtk_test_expand_row (int /*long*/ tree, int /*long*/ iter, int /*long*/ path) {
+long /*int*/ gtk_test_expand_row (long /*int*/ tree, long /*int*/ iter, long /*int*/ path) {
 	return 0;
 }
 
-int /*long*/ gtk_text_buffer_insert_text (int /*long*/ widget, int /*long*/ iter, int /*long*/ text, int /*long*/ length) {
+long /*int*/ gtk_text_buffer_insert_text (long /*int*/ widget, long /*int*/ iter, long /*int*/ text, long /*int*/ length) {
 	return 0;
 }
 
-int /*long*/ gtk_timer () {
+long /*int*/ gtk_timer () {
 	return 0;
 }
 
-int /*long*/ gtk_toggled (int /*long*/ renderer, int /*long*/ pathStr) {
+long /*int*/ gtk_toggled (long /*int*/ renderer, long /*int*/ pathStr) {
 	return 0;
 }
 
-int /*long*/ gtk_unmap (int /*long*/ widget) {
+long /*int*/ gtk_unmap (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_unmap_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_unmap_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_unrealize (int /*long*/ widget) {
+long /*int*/ gtk_unrealize (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ gtk_value_changed (int /*long*/ adjustment) {
+long /*int*/ gtk_value_changed (long /*int*/ adjustment) {
 	return 0;
 }
 
-int /*long*/ gtk_visibility_notify_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_visibility_notify_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int /*long*/ gtk_window_state_event (int /*long*/ widget, int /*long*/ event) {
+long /*int*/ gtk_window_state_event (long /*int*/ widget, long /*int*/ event) {
 	return 0;
 }
 
-int fontHeight (int /*long*/ font, int /*long*/ widgetHandle) {
-	int /*long*/ context = OS.gtk_widget_get_pango_context (widgetHandle);
-	int /*long*/ lang = OS.pango_context_get_language (context);
-	int /*long*/ metrics = OS.pango_context_get_metrics (context, font, lang);
+int fontHeight (long /*int*/ font, long /*int*/ widgetHandle) {
+	long /*int*/ context = OS.gtk_widget_get_pango_context (widgetHandle);
+	long /*int*/ lang = OS.pango_context_get_language (context);
+	long /*int*/ metrics = OS.pango_context_get_metrics (context, font, lang);
 	int ascent = OS.pango_font_metrics_get_ascent (metrics);
 	int descent = OS.pango_font_metrics_get_descent (metrics);
 	OS.pango_font_metrics_unref (metrics);
 	return OS.PANGO_PIXELS (ascent + descent);
 }
 
-int /*long*/ filterProc(int /*long*/ xEvent, int /*long*/ gdkEvent, int /*long*/ data2) {
+long /*int*/ filterProc(long /*int*/ xEvent, long /*int*/ gdkEvent, long /*int*/ data2) {
 	return 0;
 }
 
@@ -850,11 +850,11 @@
 	return display.filters (eventType);
 }
 
-int /*long*/ fixedMapProc (int /*long*/ widget) {
+long /*int*/ fixedMapProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ fixedSizeAllocateProc(int /*long*/ widget, int /*long*/ allocationPtr) {
+long /*int*/ fixedSizeAllocateProc(long /*int*/ widget, long /*int*/ allocationPtr) {
 	return OS.Call (Display.oldFixedSizeAllocateProc, widget, allocationPtr);
 }
 
@@ -955,15 +955,15 @@
 	return eventTable.hooks (eventType);
 }
 
-int /*long*/ hoverProc (int /*long*/ widget) {
+long /*int*/ hoverProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ menuPositionProc (int /*long*/ menu, int /*long*/ x, int /*long*/ y, int /*long*/ push_in, int /*long*/ user_data) {
+long /*int*/ menuPositionProc (long /*int*/ menu, long /*int*/ x, long /*int*/ y, long /*int*/ push_in, long /*int*/ user_data) {
 	return 0;
 }
 
-boolean mnemonicHit (int /*long*/ mnemonicHandle, char key) {
+boolean mnemonicHit (long /*int*/ mnemonicHandle, char key) {
 	if (!mnemonicMatch (mnemonicHandle, key)) return false;
 	OS.g_signal_handlers_block_matched (mnemonicHandle, OS.G_SIGNAL_MATCH_DATA, 0, 0, 0, 0, MNEMONIC_ACTIVATE);
 	boolean result = OS.gtk_widget_mnemonic_activate (mnemonicHandle, false);
@@ -971,13 +971,13 @@
 	return result;
 }
 
-boolean mnemonicMatch (int /*long*/ mnemonicHandle, char key) {
+boolean mnemonicMatch (long /*int*/ mnemonicHandle, char key) {
 	int keyval1 = OS.gdk_keyval_to_lower (OS.gdk_unicode_to_keyval (key));
 	int keyval2 = OS.gdk_keyval_to_lower (OS.gtk_label_get_mnemonic_keyval (mnemonicHandle)); 
 	return keyval1 == keyval2;
 }
 
-void modifyStyle (int /*long*/ handle, int /*long*/ style) {
+void modifyStyle (long /*int*/ handle, long /*int*/ style) {
 	OS.gtk_widget_modify_style (handle, style);
 }
 
@@ -1120,11 +1120,11 @@
 	eventTable.unhook (eventType, handler);
 }
 
-int /*long*/ rendererGetSizeProc (int /*long*/ cell, int /*long*/ handle, int /*long*/ cell_area, int /*long*/ x_offset, int /*long*/ y_offset, int /*long*/ width, int /*long*/ height) {
+long /*int*/ rendererGetSizeProc (long /*int*/ cell, long /*int*/ handle, long /*int*/ cell_area, long /*int*/ x_offset, long /*int*/ y_offset, long /*int*/ width, long /*int*/ height) {
 	return 0;
 }
 
-int /*long*/ rendererRenderProc (int /*long*/ cell, int /*long*/ window, int /*long*/ handle, int /*long*/ background_area, int /*long*/ cell_area, int /*long*/ expose_area, int /*long*/ flags) {
+long /*int*/ rendererRenderProc (long /*int*/ cell, long /*int*/ window, long /*int*/ handle, long /*int*/ background_area, long /*int*/ cell_area, long /*int*/ expose_area, long /*int*/ flags) {
 	return 0;
 }
 
@@ -1211,7 +1211,7 @@
 
 char [] sendIMKeyEvent (int type, GdkEventKey keyEvent, char [] chars) {
 	int index = 0, count = 0, state = 0;
-	int /*long*/ ptr = 0;
+	long /*int*/ ptr = 0;
 	if (keyEvent == null) {
 		ptr = OS.gtk_get_current_event ();
 		if (ptr != 0) {
@@ -1366,8 +1366,8 @@
 	}
 }
 
-void setForegroundColor (int /*long*/ handle, GdkColor color) {
-	int /*long*/ style = OS.gtk_widget_get_modifier_style (handle);
+void setForegroundColor (long /*int*/ handle, GdkColor color) {
+	long /*int*/ style = OS.gtk_widget_get_modifier_style (handle);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_NORMAL, color);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_ACTIVE, color);
 	OS.gtk_rc_style_set_fg (style, OS.GTK_STATE_PRELIGHT, color);
@@ -1447,15 +1447,15 @@
 void setOrientation () {
 }
 
-int /*long*/ shellMapProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ shellMapProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
-int /*long*/ sizeAllocateProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeAllocateProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
-int /*long*/ sizeRequestProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ sizeRequestProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	return 0;
 }
 
@@ -1474,15 +1474,15 @@
 	return getName () + " {" + string + "}";
 }
 
-int /*long*/ topHandle () {
+long /*int*/ topHandle () {
 	return handle;
 }
 
-int /*long*/ timerProc (int /*long*/ widget) {
+long /*int*/ timerProc (long /*int*/ widget) {
 	return 0;
 }
 
-int /*long*/ treeSelectionProc (int /*long*/ model, int /*long*/ path, int /*long*/ iter, int [] selection, int length) {
+long /*int*/ treeSelectionProc (long /*int*/ model, long /*int*/ path, long /*int*/ iter, int [] selection, int length) {
 	return 0;
 }
 
@@ -1490,7 +1490,7 @@
 	return false;
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case ACTIVATE: return gtk_activate (handle);
 		case CHANGED: return gtk_changed (handle);
@@ -1513,13 +1513,13 @@
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case EXPOSE_EVENT_INVERSE: {
 			GdkEventExpose gdkEvent = new GdkEventExpose ();
 			OS.memmove (gdkEvent, arg0, GdkEventExpose.sizeof);
-			int /*long*/ paintWindow = paintWindow();
-			int /*long*/ window = gdkEvent.window;
+			long /*int*/ paintWindow = paintWindow();
+			long /*int*/ window = gdkEvent.window;
 			if (window != paintWindow) return 0;
 			return (state & OBSCURED) != 0 ? 1 : 0;
 		}
@@ -1561,7 +1561,7 @@
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case DELETE_RANGE: return gtk_delete_range (handle, arg0, arg1);
 		case DELETE_TEXT: return gtk_delete_text (handle, arg0, arg1);
@@ -1574,7 +1574,7 @@
 	}
 }
 
-int /*long*/ windowProc (int /*long*/ handle, int /*long*/ arg0, int /*long*/ arg1, int /*long*/ arg2, int /*long*/ user_data) {
+long /*int*/ windowProc (long /*int*/ handle, long /*int*/ arg0, long /*int*/ arg1, long /*int*/ arg2, long /*int*/ user_data) {
 	switch ((int)/*64*/user_data) {
 		case CHANGE_VALUE: return gtk_change_value (handle, arg0, arg1, arg2);
 		case EXPAND_COLLAPSE_CURSOR_ROW: return gtk_expand_collapse_cursor_row (handle, arg0, arg1, arg2);
diff -ur x86/os.c x86_64/os.c
--- x86/os.c	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/os.c	2009-02-11 17:53:48.000000000 -0500
@@ -21,7 +21,7 @@
 
 #ifndef NO_Call
 JNIEXPORT jint JNICALL OS_NATIVE(Call)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, Call_FUNC);
@@ -33,7 +33,7 @@
 
 #ifndef NO_GDK_1EVENT_1TYPE
 JNIEXPORT jint JNICALL OS_NATIVE(GDK_1EVENT_1TYPE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GDK_1EVENT_1TYPE_FUNC);
@@ -44,12 +44,12 @@
 #endif
 
 #ifndef NO_GDK_1EVENT_1WINDOW
-JNIEXPORT jint JNICALL OS_NATIVE(GDK_1EVENT_1WINDOW)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GDK_1EVENT_1WINDOW)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GDK_1EVENT_1WINDOW_FUNC);
-	rc = (jint)GDK_EVENT_WINDOW((GdkEventAny *)arg0);
+	rc = (jlong)GDK_EVENT_WINDOW((GdkEventAny *)arg0);
 	OS_NATIVE_EXIT(env, that, GDK_1EVENT_1WINDOW_FUNC);
 	return rc;
 }
@@ -80,12 +80,12 @@
 #endif
 
 #ifndef NO_GTK_1ACCEL_1LABEL_1GET_1ACCEL_1STRING
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1ACCEL_1LABEL_1GET_1ACCEL_1STRING)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1ACCEL_1LABEL_1GET_1ACCEL_1STRING)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1ACCEL_1LABEL_1GET_1ACCEL_1STRING_FUNC);
-	rc = (jint)GTK_ACCEL_LABEL_GET_ACCEL_STRING((GtkAccelLabel *)arg0);
+	rc = (jlong)GTK_ACCEL_LABEL_GET_ACCEL_STRING((GtkAccelLabel *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1ACCEL_1LABEL_1GET_1ACCEL_1STRING_FUNC);
 	return rc;
 }
@@ -93,7 +93,7 @@
 
 #ifndef NO_GTK_1ACCEL_1LABEL_1SET_1ACCEL_1STRING
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1ACCEL_1LABEL_1SET_1ACCEL_1STRING)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1ACCEL_1LABEL_1SET_1ACCEL_1STRING_FUNC);
 	GTK_ACCEL_LABEL_SET_ACCEL_STRING((GtkAccelLabel *)arg0, (gchar *)arg1);
@@ -102,24 +102,24 @@
 #endif
 
 #ifndef NO_GTK_1ENTRY_1IM_1CONTEXT
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1ENTRY_1IM_1CONTEXT)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1ENTRY_1IM_1CONTEXT)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1ENTRY_1IM_1CONTEXT_FUNC);
-	rc = (jint)GTK_ENTRY_IM_CONTEXT((GtkEntry *)arg0);
+	rc = (jlong)GTK_ENTRY_IM_CONTEXT((GtkEntry *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1ENTRY_1IM_1CONTEXT_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_GTK_1SCROLLED_1WINDOW_1HSCROLLBAR
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1SCROLLED_1WINDOW_1HSCROLLBAR)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1SCROLLED_1WINDOW_1HSCROLLBAR)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1SCROLLED_1WINDOW_1HSCROLLBAR_FUNC);
-	rc = (jint)GTK_SCROLLED_WINDOW_HSCROLLBAR((GtkScrolledWindow *)arg0);
+	rc = (jlong)GTK_SCROLLED_WINDOW_HSCROLLBAR((GtkScrolledWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1SCROLLED_1WINDOW_1HSCROLLBAR_FUNC);
 	return rc;
 }
@@ -127,7 +127,7 @@
 
 #ifndef NO_GTK_1SCROLLED_1WINDOW_1SCROLLBAR_1SPACING
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1SCROLLED_1WINDOW_1SCROLLBAR_1SPACING)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1SCROLLED_1WINDOW_1SCROLLBAR_1SPACING_FUNC);
@@ -138,24 +138,24 @@
 #endif
 
 #ifndef NO_GTK_1SCROLLED_1WINDOW_1VSCROLLBAR
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1SCROLLED_1WINDOW_1VSCROLLBAR)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1SCROLLED_1WINDOW_1VSCROLLBAR)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1SCROLLED_1WINDOW_1VSCROLLBAR_FUNC);
-	rc = (jint)GTK_SCROLLED_WINDOW_VSCROLLBAR((GtkScrolledWindow *)arg0);
+	rc = (jlong)GTK_SCROLLED_WINDOW_VSCROLLBAR((GtkScrolledWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1SCROLLED_1WINDOW_1VSCROLLBAR_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_GTK_1TEXTVIEW_1IM_1CONTEXT
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1TEXTVIEW_1IM_1CONTEXT)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1TEXTVIEW_1IM_1CONTEXT)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1TEXTVIEW_1IM_1CONTEXT_FUNC);
-	rc = (jint)GTK_TEXTVIEW_IM_CONTEXT((GtkTextView *)arg0);
+	rc = (jlong)GTK_TEXTVIEW_IM_CONTEXT((GtkTextView *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1TEXTVIEW_1IM_1CONTEXT_FUNC);
 	return rc;
 }
@@ -163,7 +163,7 @@
 
 #ifndef NO_GTK_1TOOLTIPS_1SET_1ACTIVE
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1TOOLTIPS_1SET_1ACTIVE)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1TOOLTIPS_1SET_1ACTIVE_FUNC);
 	GTK_TOOLTIPS_SET_ACTIVE((GtkTooltips *)arg0, (GtkTooltipsData *)arg1);
@@ -172,12 +172,12 @@
 #endif
 
 #ifndef NO_GTK_1TOOLTIPS_1TIP_1WINDOW
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1TOOLTIPS_1TIP_1WINDOW)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1TOOLTIPS_1TIP_1WINDOW)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1TOOLTIPS_1TIP_1WINDOW_FUNC);
-	rc = (jint)GTK_TOOLTIPS_TIP_WINDOW((GtkTooltips *)arg0);
+	rc = (jlong)GTK_TOOLTIPS_TIP_WINDOW((GtkTooltips *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1TOOLTIPS_1TIP_1WINDOW_FUNC);
 	return rc;
 }
@@ -185,7 +185,7 @@
 
 #ifndef NO_GTK_1WIDGET_1HEIGHT
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1HEIGHT)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1HEIGHT_FUNC);
@@ -197,7 +197,7 @@
 
 #ifndef NO_GTK_1WIDGET_1REQUISITION_1HEIGHT
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1REQUISITION_1HEIGHT)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1REQUISITION_1HEIGHT_FUNC);
@@ -209,7 +209,7 @@
 
 #ifndef NO_GTK_1WIDGET_1REQUISITION_1WIDTH
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1REQUISITION_1WIDTH)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1REQUISITION_1WIDTH_FUNC);
@@ -221,7 +221,7 @@
 
 #ifndef NO_GTK_1WIDGET_1SET_1HEIGHT
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1WIDGET_1SET_1HEIGHT)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1SET_1HEIGHT_FUNC);
 	GTK_WIDGET_SET_HEIGHT((GtkWidget *)arg0, arg1);
@@ -231,7 +231,7 @@
 
 #ifndef NO_GTK_1WIDGET_1SET_1WIDTH
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1WIDGET_1SET_1WIDTH)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1SET_1WIDTH_FUNC);
 	GTK_WIDGET_SET_WIDTH((GtkWidget *)arg0, arg1);
@@ -241,7 +241,7 @@
 
 #ifndef NO_GTK_1WIDGET_1SET_1X
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1WIDGET_1SET_1X)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1SET_1X_FUNC);
 	GTK_WIDGET_SET_X((GtkWidget *)arg0, arg1);
@@ -251,7 +251,7 @@
 
 #ifndef NO_GTK_1WIDGET_1SET_1Y
 JNIEXPORT void JNICALL OS_NATIVE(GTK_1WIDGET_1SET_1Y)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1SET_1Y_FUNC);
 	GTK_WIDGET_SET_Y((GtkWidget *)arg0, arg1);
@@ -261,7 +261,7 @@
 
 #ifndef NO_GTK_1WIDGET_1WIDTH
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1WIDTH)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1WIDTH_FUNC);
@@ -272,12 +272,12 @@
 #endif
 
 #ifndef NO_GTK_1WIDGET_1WINDOW
-JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1WINDOW)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(GTK_1WIDGET_1WINDOW)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1WINDOW_FUNC);
-	rc = (jint)GTK_WIDGET_WINDOW((GtkWidget *)arg0);
+	rc = (jlong)GTK_WIDGET_WINDOW((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, GTK_1WIDGET_1WINDOW_FUNC);
 	return rc;
 }
@@ -285,7 +285,7 @@
 
 #ifndef NO_GTK_1WIDGET_1X
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1X)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1X_FUNC);
@@ -297,7 +297,7 @@
 
 #ifndef NO_GTK_1WIDGET_1Y
 JNIEXPORT jint JNICALL OS_NATIVE(GTK_1WIDGET_1Y)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, GTK_1WIDGET_1Y_FUNC);
@@ -1017,7 +1017,7 @@
 
 #ifndef NO_X_1EVENT_1TYPE
 JNIEXPORT jint JNICALL OS_NATIVE(X_1EVENT_1TYPE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, X_1EVENT_1TYPE_FUNC);
@@ -1028,12 +1028,12 @@
 #endif
 
 #ifndef NO_X_1EVENT_1WINDOW
-JNIEXPORT jint JNICALL OS_NATIVE(X_1EVENT_1WINDOW)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(X_1EVENT_1WINDOW)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, X_1EVENT_1WINDOW_FUNC);
-	rc = (jint)X_EVENT_WINDOW((XAnyEvent *)arg0);
+	rc = (jlong)X_EVENT_WINDOW((XAnyEvent *)arg0);
 	OS_NATIVE_EXIT(env, that, X_1EVENT_1WINDOW_FUNC);
 	return rc;
 }
@@ -1041,7 +1041,7 @@
 
 #ifndef NO__1Call
 JNIEXPORT jint JNICALL OS_NATIVE(_1Call)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1Call_FUNC);
@@ -1053,7 +1053,7 @@
 
 #ifndef NO__1FcConfigAppFontAddFile
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1FcConfigAppFontAddFile)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	jboolean rc = 0;
@@ -1065,7 +1065,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint, jbyte *);
+		typedef jboolean (*FPTR)(jlong, jbyte *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1085,60 +1085,60 @@
 #endif
 
 #ifndef NO__1GDK_1DISPLAY
-JNIEXPORT jint JNICALL OS_NATIVE(_1GDK_1DISPLAY)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GDK_1DISPLAY)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GDK_1DISPLAY_FUNC);
-	rc = (jint)GDK_DISPLAY();
+	rc = (jlong)GDK_DISPLAY();
 	OS_NATIVE_EXIT(env, that, _1GDK_1DISPLAY_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GDK_1PIXMAP_1XID
-JNIEXPORT jint JNICALL OS_NATIVE(_1GDK_1PIXMAP_1XID)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GDK_1PIXMAP_1XID)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GDK_1PIXMAP_1XID_FUNC);
-	rc = (jint)GDK_PIXMAP_XID((GdkPixmap *)arg0);
+	rc = (jlong)GDK_PIXMAP_XID((GdkPixmap *)arg0);
 	OS_NATIVE_EXIT(env, that, _1GDK_1PIXMAP_1XID_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GDK_1ROOT_1PARENT
-JNIEXPORT jint JNICALL OS_NATIVE(_1GDK_1ROOT_1PARENT)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GDK_1ROOT_1PARENT)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GDK_1ROOT_1PARENT_FUNC);
-	rc = (jint)GDK_ROOT_PARENT();
+	rc = (jlong)GDK_ROOT_PARENT();
 	OS_NATIVE_EXIT(env, that, _1GDK_1ROOT_1PARENT_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GDK_1TYPE_1COLOR
-JNIEXPORT jint JNICALL OS_NATIVE(_1GDK_1TYPE_1COLOR)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GDK_1TYPE_1COLOR)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GDK_1TYPE_1COLOR_FUNC);
-	rc = (jint)GDK_TYPE_COLOR;
+	rc = (jlong)GDK_TYPE_COLOR;
 	OS_NATIVE_EXIT(env, that, _1GDK_1TYPE_1COLOR_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GDK_1TYPE_1PIXBUF
-JNIEXPORT jint JNICALL OS_NATIVE(_1GDK_1TYPE_1PIXBUF)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GDK_1TYPE_1PIXBUF)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GDK_1TYPE_1PIXBUF_FUNC);
-	rc = (jint)GDK_TYPE_PIXBUF;
+	rc = (jlong)GDK_TYPE_PIXBUF;
 	OS_NATIVE_EXIT(env, that, _1GDK_1TYPE_1PIXBUF_FUNC);
 	return rc;
 }
@@ -1146,7 +1146,7 @@
 
 #ifndef NO__1GTK_1IS_1BUTTON
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1BUTTON)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1BUTTON_FUNC);
@@ -1158,7 +1158,7 @@
 
 #ifndef NO__1GTK_1IS_1CELL_1RENDERER_1PIXBUF
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1CELL_1RENDERER_1PIXBUF)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1CELL_1RENDERER_1PIXBUF_FUNC);
@@ -1170,7 +1170,7 @@
 
 #ifndef NO__1GTK_1IS_1CELL_1RENDERER_1TEXT
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1CELL_1RENDERER_1TEXT)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1CELL_1RENDERER_1TEXT_FUNC);
@@ -1182,7 +1182,7 @@
 
 #ifndef NO__1GTK_1IS_1CELL_1RENDERER_1TOGGLE
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1CELL_1RENDERER_1TOGGLE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1CELL_1RENDERER_1TOGGLE_FUNC);
@@ -1194,7 +1194,7 @@
 
 #ifndef NO__1GTK_1IS_1CONTAINER
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1CONTAINER)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1CONTAINER_FUNC);
@@ -1206,7 +1206,7 @@
 
 #ifndef NO__1GTK_1IS_1IMAGE_1MENU_1ITEM
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1IMAGE_1MENU_1ITEM)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1IMAGE_1MENU_1ITEM_FUNC);
@@ -1218,7 +1218,7 @@
 
 #ifndef NO__1GTK_1IS_1MENU_1ITEM
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1MENU_1ITEM)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1MENU_1ITEM_FUNC);
@@ -1230,7 +1230,7 @@
 
 #ifndef NO__1GTK_1IS_1PLUG
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1PLUG)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1PLUG_FUNC);
@@ -1242,7 +1242,7 @@
 
 #ifndef NO__1GTK_1IS_1WINDOW
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1IS_1WINDOW)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1IS_1WINDOW_FUNC);
@@ -1253,96 +1253,96 @@
 #endif
 
 #ifndef NO__1GTK_1STOCK_1CANCEL
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1STOCK_1CANCEL)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1STOCK_1CANCEL)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1STOCK_1CANCEL_FUNC);
-	rc = (jint)GTK_STOCK_CANCEL;
+	rc = (jlong)GTK_STOCK_CANCEL;
 	OS_NATIVE_EXIT(env, that, _1GTK_1STOCK_1CANCEL_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1STOCK_1OK
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1STOCK_1OK)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1STOCK_1OK)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1STOCK_1OK_FUNC);
-	rc = (jint)GTK_STOCK_OK;
+	rc = (jlong)GTK_STOCK_OK;
 	OS_NATIVE_EXIT(env, that, _1GTK_1STOCK_1OK_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1CELL_1RENDERER_1PIXBUF
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1PIXBUF)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1PIXBUF)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1PIXBUF_FUNC);
-	rc = (jint)GTK_TYPE_CELL_RENDERER_PIXBUF;
+	rc = (jlong)GTK_TYPE_CELL_RENDERER_PIXBUF;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1PIXBUF_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1CELL_1RENDERER_1TEXT
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1TEXT)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1TEXT)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1TEXT_FUNC);
-	rc = (jint)GTK_TYPE_CELL_RENDERER_TEXT;
+	rc = (jlong)GTK_TYPE_CELL_RENDERER_TEXT;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1TEXT_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1CELL_1RENDERER_1TOGGLE
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1TOGGLE)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1CELL_1RENDERER_1TOGGLE)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1TOGGLE_FUNC);
-	rc = (jint)GTK_TYPE_CELL_RENDERER_TOGGLE;
+	rc = (jlong)GTK_TYPE_CELL_RENDERER_TOGGLE;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1CELL_1RENDERER_1TOGGLE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1FIXED
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1FIXED)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1FIXED)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1FIXED_FUNC);
-	rc = (jint)GTK_TYPE_FIXED;
+	rc = (jlong)GTK_TYPE_FIXED;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1FIXED_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1MENU
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1MENU)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1MENU)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1MENU_FUNC);
-	rc = (jint)GTK_TYPE_MENU;
+	rc = (jlong)GTK_TYPE_MENU;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1MENU_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1GTK_1TYPE_1WIDGET
-JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1TYPE_1WIDGET)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1GTK_1TYPE_1WIDGET)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1TYPE_1WIDGET_FUNC);
-	rc = (jint)GTK_TYPE_WIDGET;
+	rc = (jlong)GTK_TYPE_WIDGET;
 	OS_NATIVE_EXIT(env, that, _1GTK_1TYPE_1WIDGET_FUNC);
 	return rc;
 }
@@ -1350,7 +1350,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1FLAGS
 JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1WIDGET_1FLAGS)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1FLAGS_FUNC);
@@ -1362,7 +1362,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1HAS_1DEFAULT
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1HAS_1DEFAULT)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1HAS_1DEFAULT_FUNC);
@@ -1374,7 +1374,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1HAS_1FOCUS
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1HAS_1FOCUS)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1HAS_1FOCUS_FUNC);
@@ -1386,7 +1386,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1IS_1SENSITIVE
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1IS_1SENSITIVE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1IS_1SENSITIVE_FUNC);
@@ -1398,7 +1398,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1MAPPED
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1MAPPED)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1MAPPED_FUNC);
@@ -1410,7 +1410,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1SENSITIVE
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1SENSITIVE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1SENSITIVE_FUNC);
@@ -1422,7 +1422,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1SET_1FLAGS
 JNIEXPORT void JNICALL OS_NATIVE(_1GTK_1WIDGET_1SET_1FLAGS)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1SET_1FLAGS_FUNC);
 	GTK_WIDGET_SET_FLAGS(arg0, arg1);
@@ -1432,7 +1432,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1STATE
 JNIEXPORT jint JNICALL OS_NATIVE(_1GTK_1WIDGET_1STATE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1STATE_FUNC);
@@ -1444,7 +1444,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1UNSET_1FLAGS
 JNIEXPORT void JNICALL OS_NATIVE(_1GTK_1WIDGET_1UNSET_1FLAGS)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1UNSET_1FLAGS_FUNC);
 	GTK_WIDGET_UNSET_FLAGS(arg0, arg1);
@@ -1454,7 +1454,7 @@
 
 #ifndef NO__1GTK_1WIDGET_1VISIBLE
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1GTK_1WIDGET_1VISIBLE)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1GTK_1WIDGET_1VISIBLE_FUNC);
@@ -1465,84 +1465,84 @@
 #endif
 
 #ifndef NO__1G_1OBJECT_1CLASS
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1OBJECT_1CLASS)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1OBJECT_1CLASS)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1OBJECT_1CLASS_FUNC);
-	rc = (jint)G_OBJECT_CLASS(arg0);
+	rc = (jlong)G_OBJECT_CLASS(arg0);
 	OS_NATIVE_EXIT(env, that, _1G_1OBJECT_1CLASS_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1OBJECT_1GET_1CLASS
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1OBJECT_1GET_1CLASS)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1OBJECT_1GET_1CLASS)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1OBJECT_1GET_1CLASS_FUNC);
-	rc = (jint)G_OBJECT_GET_CLASS(arg0);
+	rc = (jlong)G_OBJECT_GET_CLASS(arg0);
 	OS_NATIVE_EXIT(env, that, _1G_1OBJECT_1GET_1CLASS_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1OBJECT_1TYPE
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1OBJECT_1TYPE)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1OBJECT_1TYPE)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1OBJECT_1TYPE_FUNC);
-	rc = (jint)G_OBJECT_TYPE(arg0);
+	rc = (jlong)G_OBJECT_TYPE(arg0);
 	OS_NATIVE_EXIT(env, that, _1G_1OBJECT_1TYPE_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1OBJECT_1TYPE_1NAME
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1OBJECT_1TYPE_1NAME)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1OBJECT_1TYPE_1NAME)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1OBJECT_1TYPE_1NAME_FUNC);
-	rc = (jint)G_OBJECT_TYPE_NAME(arg0);
+	rc = (jlong)G_OBJECT_TYPE_NAME(arg0);
 	OS_NATIVE_EXIT(env, that, _1G_1OBJECT_1TYPE_1NAME_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1TYPE_1BOOLEAN
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1TYPE_1BOOLEAN)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1TYPE_1BOOLEAN)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1TYPE_1BOOLEAN_FUNC);
-	rc = (jint)G_TYPE_BOOLEAN;
+	rc = (jlong)G_TYPE_BOOLEAN;
 	OS_NATIVE_EXIT(env, that, _1G_1TYPE_1BOOLEAN_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1TYPE_1INT
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1TYPE_1INT)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1TYPE_1INT)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1TYPE_1INT_FUNC);
-	rc = (jint)G_TYPE_INT;
+	rc = (jlong)G_TYPE_INT;
 	OS_NATIVE_EXIT(env, that, _1G_1TYPE_1INT_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1G_1TYPE_1STRING
-JNIEXPORT jint JNICALL OS_NATIVE(_1G_1TYPE_1STRING)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1G_1TYPE_1STRING)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1G_1TYPE_1STRING_FUNC);
-	rc = (jint)G_TYPE_STRING;
+	rc = (jlong)G_TYPE_STRING;
 	OS_NATIVE_EXIT(env, that, _1G_1TYPE_1STRING_FUNC);
 	return rc;
 }
@@ -1561,12 +1561,12 @@
 #endif
 
 #ifndef NO__1PANGO_1TYPE_1FONT_1DESCRIPTION
-JNIEXPORT jint JNICALL OS_NATIVE(_1PANGO_1TYPE_1FONT_1DESCRIPTION)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1PANGO_1TYPE_1FONT_1DESCRIPTION)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1PANGO_1TYPE_1FONT_1DESCRIPTION_FUNC);
-	rc = (jint)PANGO_TYPE_FONT_DESCRIPTION;
+	rc = (jlong)PANGO_TYPE_FONT_DESCRIPTION;
 	OS_NATIVE_EXIT(env, that, _1PANGO_1TYPE_1FONT_1DESCRIPTION_FUNC);
 	return rc;
 }
@@ -1574,7 +1574,7 @@
 
 #ifndef NO__1XCheckIfEvent
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1XCheckIfEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XCheckIfEvent_FUNC);
@@ -1586,7 +1586,7 @@
 
 #ifndef NO__1XCheckMaskEvent
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1XCheckMaskEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XCheckMaskEvent_FUNC);
@@ -1598,7 +1598,7 @@
 
 #ifndef NO__1XCheckWindowEvent
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1XCheckWindowEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XCheckWindowEvent_FUNC);
@@ -1609,12 +1609,12 @@
 #endif
 
 #ifndef NO__1XDefaultRootWindow
-JNIEXPORT jint JNICALL OS_NATIVE(_1XDefaultRootWindow)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XDefaultRootWindow)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XDefaultRootWindow_FUNC);
-	rc = (jint)XDefaultRootWindow((Display *)arg0);
+	rc = (jlong)XDefaultRootWindow((Display *)arg0);
 	OS_NATIVE_EXIT(env, that, _1XDefaultRootWindow_FUNC);
 	return rc;
 }
@@ -1622,7 +1622,7 @@
 
 #ifndef NO__1XDefaultScreen
 JNIEXPORT jint JNICALL OS_NATIVE(_1XDefaultScreen)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XDefaultScreen_FUNC);
@@ -1634,7 +1634,7 @@
 
 #ifndef NO__1XFlush
 JNIEXPORT void JNICALL OS_NATIVE(_1XFlush)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1XFlush_FUNC);
 	XFlush((Display *)arg0);
@@ -1644,7 +1644,7 @@
 
 #ifndef NO__1XFree
 JNIEXPORT void JNICALL OS_NATIVE(_1XFree)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1XFree_FUNC);
 	XFree((void *)arg0);
@@ -1653,26 +1653,26 @@
 #endif
 
 #ifndef NO__1XGetSelectionOwner
-JNIEXPORT jint JNICALL OS_NATIVE(_1XGetSelectionOwner)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XGetSelectionOwner)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XGetSelectionOwner_FUNC);
-	rc = (jint)XGetSelectionOwner((Display *)arg0, (Atom)arg1);
+	rc = (jlong)XGetSelectionOwner((Display *)arg0, (Atom)arg1);
 	OS_NATIVE_EXIT(env, that, _1XGetSelectionOwner_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1XInternAtom
-JNIEXPORT jint JNICALL OS_NATIVE(_1XInternAtom)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jboolean arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XInternAtom)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jboolean arg2)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XInternAtom_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)XInternAtom((Display *)arg0, (char *)lparg1, (Bool)arg2);
+	rc = (jlong)XInternAtom((Display *)arg0, (char *)lparg1, (Bool)arg2);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1XInternAtom_FUNC);
@@ -1682,7 +1682,7 @@
 
 #ifndef NO__1XKeysymToKeycode
 JNIEXPORT jint JNICALL OS_NATIVE(_1XKeysymToKeycode)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XKeysymToKeycode_FUNC);
@@ -1693,14 +1693,14 @@
 #endif
 
 #ifndef NO__1XListProperties
-JNIEXPORT jint JNICALL OS_NATIVE(_1XListProperties)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XListProperties)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jintArray arg2)
 {
 	jint *lparg2=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XListProperties_FUNC);
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)XListProperties((Display *)arg0, (Window)arg1, (int *)lparg2);
+	rc = (jlong)XListProperties((Display *)arg0, (Window)arg1, (int *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1XListProperties_FUNC);
@@ -1710,10 +1710,10 @@
 
 #ifndef NO__1XQueryPointer
 JNIEXPORT jint JNICALL OS_NATIVE(_1XQueryPointer)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6, jintArray arg7, jintArray arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jintArray arg4, jintArray arg5, jintArray arg6, jintArray arg7, jintArray arg8)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint *lparg6=NULL;
@@ -1721,8 +1721,8 @@
 	jint *lparg8=NULL;
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XQueryPointer_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = (*env)->GetIntArrayElements(env, arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = (*env)->GetIntArrayElements(env, arg6, NULL)) == NULL) goto fail;
@@ -1735,8 +1735,8 @@
 	if (arg6 && lparg6) (*env)->ReleaseIntArrayElements(env, arg6, lparg6, 0);
 	if (arg5 && lparg5) (*env)->ReleaseIntArrayElements(env, arg5, lparg5, 0);
 	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1XQueryPointer_FUNC);
 	return rc;
 }
@@ -1744,24 +1744,24 @@
 
 #ifndef NO__1XQueryTree
 JNIEXPORT jint JNICALL OS_NATIVE(_1XQueryTree)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4, jintArray arg5)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XQueryTree_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = (*env)->GetIntArrayElements(env, arg5, NULL)) == NULL) goto fail;
 	rc = (jint)XQueryTree((Display *)arg0, (Window)arg1, (Window *)lparg2, (Window *)lparg3, (Window **)lparg4, (unsigned int *)lparg5);
 fail:
 	if (arg5 && lparg5) (*env)->ReleaseIntArrayElements(env, arg5, lparg5, 0);
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1XQueryTree_FUNC);
 	return rc;
 }
@@ -1769,7 +1769,7 @@
 
 #ifndef NO__1XReconfigureWMWindow
 JNIEXPORT jint JNICALL OS_NATIVE(_1XReconfigureWMWindow)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4)
 {
 	XWindowChanges _arg4, *lparg4=NULL;
 	jint rc = 0;
@@ -1784,7 +1784,7 @@
 
 #ifndef NO__1XRenderComposite
 JNIEXPORT void JNICALL OS_NATIVE(_1XRenderComposite)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12)
 {
 	OS_NATIVE_ENTER(env, that, _1XRenderComposite_FUNC);
 /*
@@ -1793,7 +1793,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint);
+		typedef void (*FPTR)(jlong, jint, jlong, jlong, jlong, jint, jint, jint, jint, jint, jint, jint, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(XRenderComposite_LIB, RTLD_LAZY);
@@ -1809,20 +1809,20 @@
 #endif
 
 #ifndef NO__1XRenderCreatePicture
-JNIEXPORT jint JNICALL OS_NATIVE(_1XRenderCreatePicture)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XRenderCreatePicture)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jobject arg4)
 {
 	XRenderPictureAttributes _arg4, *lparg4=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XRenderCreatePicture_FUNC);
 	if (arg4) if ((lparg4 = getXRenderPictureAttributesFields(env, arg4, &_arg4)) == NULL) goto fail;
 /*
-	rc = (jint)XRenderCreatePicture(arg0, arg1, arg2, arg3, lparg4);
+	rc = (jlong)XRenderCreatePicture(arg0, arg1, arg2, arg3, lparg4);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint, jint, jint, XRenderPictureAttributes *);
+		typedef jlong (*FPTR)(jlong, jlong, jlong, jlong, XRenderPictureAttributes *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1831,7 +1831,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1, arg2, arg3, lparg4);
+			rc = (jlong)(*fptr)(arg0, arg1, arg2, arg3, lparg4);
 		}
 	}
 fail:
@@ -1841,18 +1841,18 @@
 #endif
 
 #ifndef NO__1XRenderFindStandardFormat
-JNIEXPORT jint JNICALL OS_NATIVE(_1XRenderFindStandardFormat)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XRenderFindStandardFormat)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XRenderFindStandardFormat_FUNC);
 /*
-	rc = (jint)XRenderFindStandardFormat(arg0, arg1);
+	rc = (jlong)XRenderFindStandardFormat(arg0, arg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint);
+		typedef jlong (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1861,7 +1861,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1);
+			rc = (jlong)(*fptr)(arg0, arg1);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1XRenderFindStandardFormat_FUNC);
@@ -1870,18 +1870,18 @@
 #endif
 
 #ifndef NO__1XRenderFindVisualFormat
-JNIEXPORT jint JNICALL OS_NATIVE(_1XRenderFindVisualFormat)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XRenderFindVisualFormat)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XRenderFindVisualFormat_FUNC);
 /*
-	rc = (jint)XRenderFindVisualFormat(arg0, arg1);
+	rc = (jlong)XRenderFindVisualFormat(arg0, arg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint);
+		typedef jlong (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1890,7 +1890,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1);
+			rc = (jlong)(*fptr)(arg0, arg1);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1XRenderFindVisualFormat_FUNC);
@@ -1900,7 +1900,7 @@
 
 #ifndef NO__1XRenderFreePicture
 JNIEXPORT void JNICALL OS_NATIVE(_1XRenderFreePicture)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1XRenderFreePicture_FUNC);
 /*
@@ -1909,7 +1909,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(XRenderFreePicture_LIB, RTLD_LAZY);
@@ -1926,7 +1926,7 @@
 
 #ifndef NO__1XRenderQueryExtension
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1XRenderQueryExtension)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -1940,7 +1940,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint, jint *, jint *);
+		typedef jboolean (*FPTR)(jlong, jint *, jint *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1962,7 +1962,7 @@
 
 #ifndef NO__1XRenderQueryVersion
 JNIEXPORT jint JNICALL OS_NATIVE(_1XRenderQueryVersion)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -1976,7 +1976,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint *, jint *);
+		typedef jint (*FPTR)(jlong, jint *, jint *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -1998,7 +1998,7 @@
 
 #ifndef NO__1XRenderSetPictureClipRectangles
 JNIEXPORT void JNICALL OS_NATIVE(_1XRenderSetPictureClipRectangles)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jshortArray arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jshortArray arg4, jint arg5)
 {
 	jshort *lparg4=NULL;
 	OS_NATIVE_ENTER(env, that, _1XRenderSetPictureClipRectangles_FUNC);
@@ -2009,7 +2009,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, jint, jint, jshort *, jint);
+		typedef void (*FPTR)(jlong, jlong, jint, jint, jshort *, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(XRenderSetPictureClipRectangles_LIB, RTLD_LAZY);
@@ -2028,7 +2028,7 @@
 
 #ifndef NO__1XRenderSetPictureTransform
 JNIEXPORT void JNICALL OS_NATIVE(_1XRenderSetPictureTransform)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jintArray arg2)
 {
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1XRenderSetPictureTransform_FUNC);
@@ -2039,7 +2039,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, jint *);
+		typedef void (*FPTR)(jlong, jlong, jint *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(XRenderSetPictureTransform_LIB, RTLD_LAZY);
@@ -2058,7 +2058,7 @@
 
 #ifndef NO__1XSendEvent
 JNIEXPORT jint JNICALL OS_NATIVE(_1XSendEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2, jlong arg3, jlong arg4)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSendEvent_FUNC);
@@ -2069,24 +2069,24 @@
 #endif
 
 #ifndef NO__1XSetErrorHandler
-JNIEXPORT jint JNICALL OS_NATIVE(_1XSetErrorHandler)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XSetErrorHandler)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSetErrorHandler_FUNC);
-	rc = (jint)XSetErrorHandler((XErrorHandler)arg0);
+	rc = (jlong)XSetErrorHandler((XErrorHandler)arg0);
 	OS_NATIVE_EXIT(env, that, _1XSetErrorHandler_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1XSetIOErrorHandler
-JNIEXPORT jint JNICALL OS_NATIVE(_1XSetIOErrorHandler)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XSetIOErrorHandler)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSetIOErrorHandler_FUNC);
-	rc = (jint)XSetIOErrorHandler((XIOErrorHandler)arg0);
+	rc = (jlong)XSetIOErrorHandler((XIOErrorHandler)arg0);
 	OS_NATIVE_EXIT(env, that, _1XSetIOErrorHandler_FUNC);
 	return rc;
 }
@@ -2094,7 +2094,7 @@
 
 #ifndef NO__1XSetInputFocus
 JNIEXPORT jint JNICALL OS_NATIVE(_1XSetInputFocus)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSetInputFocus_FUNC);
@@ -2106,7 +2106,7 @@
 
 #ifndef NO__1XSetTransientForHint
 JNIEXPORT jint JNICALL OS_NATIVE(_1XSetTransientForHint)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSetTransientForHint_FUNC);
@@ -2117,12 +2117,12 @@
 #endif
 
 #ifndef NO__1XSynchronize
-JNIEXPORT jint JNICALL OS_NATIVE(_1XSynchronize)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1XSynchronize)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XSynchronize_FUNC);
-	rc = (jint)XSynchronize((Display *)arg0, arg1);
+	rc = (jlong)XSynchronize((Display *)arg0, arg1);
 	OS_NATIVE_EXIT(env, that, _1XSynchronize_FUNC);
 	return rc;
 }
@@ -2130,7 +2130,7 @@
 
 #ifndef NO__1XTestFakeButtonEvent
 JNIEXPORT void JNICALL OS_NATIVE(_1XTestFakeButtonEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jboolean arg2, jlong arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1XTestFakeButtonEvent_FUNC);
 	XTestFakeButtonEvent((Display *)arg0, arg1, (Bool)arg2, (unsigned long)arg3);
@@ -2140,7 +2140,7 @@
 
 #ifndef NO__1XTestFakeKeyEvent
 JNIEXPORT void JNICALL OS_NATIVE(_1XTestFakeKeyEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jboolean arg2, jlong arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1XTestFakeKeyEvent_FUNC);
 	XTestFakeKeyEvent((Display *)arg0, arg1, (Bool)arg2, (unsigned long)arg3);
@@ -2150,7 +2150,7 @@
 
 #ifndef NO__1XTestFakeMotionEvent
 JNIEXPORT void JNICALL OS_NATIVE(_1XTestFakeMotionEvent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jlong arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1XTestFakeMotionEvent_FUNC);
 	XTestFakeMotionEvent((Display *)arg0, arg1, arg2, arg3, (unsigned long)arg4);
@@ -2160,7 +2160,7 @@
 
 #ifndef NO__1XWarpPointer
 JNIEXPORT jint JNICALL OS_NATIVE(_1XWarpPointer)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1XWarpPointer_FUNC);
@@ -2172,7 +2172,7 @@
 
 #ifndef NO__1atk_1object_1add_1relationship
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1atk_1object_1add_1relationship)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1atk_1object_1add_1relationship_FUNC);
@@ -2200,12 +2200,12 @@
 #endif
 
 #ifndef NO__1call
-JNIEXPORT jint JNICALL OS_NATIVE(_1call)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1call)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1call_FUNC);
-	rc = (jint)((jint (*)())arg0)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
+	rc = (jlong)((jlong (*)())arg0)(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
 	OS_NATIVE_EXIT(env, that, _1call_FUNC);
 	return rc;
 }
@@ -2213,7 +2213,7 @@
 
 #ifndef NO__1dlclose
 JNIEXPORT jint JNICALL OS_NATIVE(_1dlclose)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1dlclose_FUNC);
@@ -2224,14 +2224,14 @@
 #endif
 
 #ifndef NO__1dlopen
-JNIEXPORT jint JNICALL OS_NATIVE(_1dlopen)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1dlopen)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1dlopen_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)dlopen((const char *)lparg0, arg1);
+	rc = (jlong)dlopen((const char *)lparg0, arg1);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1dlopen_FUNC);
@@ -2240,14 +2240,14 @@
 #endif
 
 #ifndef NO__1dlsym
-JNIEXPORT jint JNICALL OS_NATIVE(_1dlsym)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1dlsym)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1dlsym_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)dlsym((void *)arg0, (const char *)lparg1);
+	rc = (jlong)dlsym((void *)arg0, (const char *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1dlsym_FUNC);
@@ -2256,24 +2256,24 @@
 #endif
 
 #ifndef NO__1g_1cclosure_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1cclosure_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1cclosure_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1cclosure_1new_FUNC);
-	rc = (jint)g_cclosure_new((GCallback)arg0, (gpointer)arg1, (GClosureNotify)arg2);
+	rc = (jlong)g_cclosure_new((GCallback)arg0, (gpointer)arg1, (GClosureNotify)arg2);
 	OS_NATIVE_EXIT(env, that, _1g_1cclosure_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1closure_1ref
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1closure_1ref)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1closure_1ref)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1closure_1ref_FUNC);
-	rc = (jint)g_closure_ref((GClosure *)arg0);
+	rc = (jlong)g_closure_ref((GClosure *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1closure_1ref_FUNC);
 	return rc;
 }
@@ -2281,7 +2281,7 @@
 
 #ifndef NO__1g_1closure_1unref
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1closure_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1closure_1unref_FUNC);
 	g_closure_unref((GClosure *)arg0);
@@ -2290,79 +2290,79 @@
 #endif
 
 #ifndef NO__1g_1filename_1from_1uri
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1filename_1from_1uri)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1filename_1from_1uri)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlongArray arg2)
 {
-	jint *lparg1=NULL;
-	jint *lparg2=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong *lparg2=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1filename_1from_1uri_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)g_filename_from_uri((const char *)arg0, (char **)lparg1, (GError **)lparg2);
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	rc = (jlong)g_filename_from_uri((const char *)arg0, (char **)lparg1, (GError **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1filename_1from_1uri_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1filename_1from_1utf8
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1filename_1from_1utf8)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1filename_1from_1utf8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1filename_1from_1utf8_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)g_filename_from_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	rc = (jlong)g_filename_from_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1filename_1from_1utf8_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1filename_1to_1uri
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1filename_1to_1uri)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1filename_1to_1uri)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1filename_1to_1uri_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)g_filename_to_uri((const char *)arg0, (const char *)arg1, (GError **)lparg2);
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	rc = (jlong)g_filename_to_uri((const char *)arg0, (const char *)arg1, (GError **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1filename_1to_1uri_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1filename_1to_1utf8
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1filename_1to_1utf8)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1filename_1to_1utf8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1filename_1to_1utf8_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)g_filename_to_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	rc = (jlong)g_filename_to_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1filename_1to_1utf8_FUNC);
 	return rc;
 }
@@ -2370,7 +2370,7 @@
 
 #ifndef NO__1g_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1free_FUNC);
 	g_free((gpointer)arg0);
@@ -2380,7 +2380,7 @@
 
 #ifndef NO__1g_1idle_1add
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1idle_1add)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1idle_1add_FUNC);
@@ -2391,24 +2391,24 @@
 #endif
 
 #ifndef NO__1g_1list_1append
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1append)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1append)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1append_FUNC);
-	rc = (jint)g_list_append((GList *)arg0, (gpointer)arg1);
+	rc = (jlong)g_list_append((GList *)arg0, (gpointer)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1append_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1data
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1data)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1data)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1data_FUNC);
-	rc = (jint)g_list_data((GList *)arg0);
+	rc = (jlong)g_list_data((GList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1data_FUNC);
 	return rc;
 }
@@ -2416,7 +2416,7 @@
 
 #ifndef NO__1g_1list_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1list_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1list_1free_FUNC);
 	g_list_free((GList *)arg0);
@@ -2426,7 +2426,7 @@
 
 #ifndef NO__1g_1list_1free_11
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1list_1free_11)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1list_1free_11_FUNC);
 	g_list_free_1((GList *)arg0);
@@ -2436,7 +2436,7 @@
 
 #ifndef NO__1g_1list_1length
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1length)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1length_FUNC);
@@ -2447,84 +2447,84 @@
 #endif
 
 #ifndef NO__1g_1list_1next
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1next)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1next)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1next_FUNC);
-	rc = (jint)g_list_next(arg0);
+	rc = (jlong)g_list_next(arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1next_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1nth
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1nth)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1nth)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1nth_FUNC);
-	rc = (jint)g_list_nth((GList *)arg0, (guint)arg1);
+	rc = (jlong)g_list_nth((GList *)arg0, (guint)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1nth_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1nth_1data
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1nth_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1nth_1data)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1nth_1data_FUNC);
-	rc = (jint)g_list_nth_data((GList *)arg0, (guint)arg1);
+	rc = (jlong)g_list_nth_data((GList *)arg0, (guint)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1nth_1data_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1prepend
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1prepend)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1prepend)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1prepend_FUNC);
-	rc = (jint)g_list_prepend((GList *)arg0, (gpointer)arg1);
+	rc = (jlong)g_list_prepend((GList *)arg0, (gpointer)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1prepend_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1previous
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1previous)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1previous)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1previous_FUNC);
-	rc = (jint)g_list_previous(arg0);
+	rc = (jlong)g_list_previous(arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1previous_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1remove_1link
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1remove_1link)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1remove_1link)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1remove_1link_FUNC);
-	rc = (jint)g_list_remove_link((GList *)arg0, (GList *)arg1);
+	rc = (jlong)g_list_remove_link((GList *)arg0, (GList *)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1remove_1link_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1list_1reverse
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1list_1reverse)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1list_1reverse)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1list_1reverse_FUNC);
-	rc = (jint)g_list_reverse((GList *)arg0);
+	rc = (jlong)g_list_reverse((GList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1list_1reverse_FUNC);
 	return rc;
 }
@@ -2532,7 +2532,7 @@
 
 #ifndef NO__1g_1list_1set_1next
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1list_1set_1next)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1list_1set_1next_FUNC);
 	g_list_set_next((GList *)arg0, (GList *)arg1);
@@ -2542,7 +2542,7 @@
 
 #ifndef NO__1g_1list_1set_1previous
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1list_1set_1previous)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1list_1set_1previous_FUNC);
 	g_list_set_previous((GList *)arg0, (GList *)arg1);
@@ -2551,44 +2551,44 @@
 #endif
 
 #ifndef NO__1g_1locale_1from_1utf8
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1locale_1from_1utf8)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1locale_1from_1utf8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1locale_1from_1utf8_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)g_locale_from_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	rc = (jlong)g_locale_from_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1locale_1from_1utf8_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1locale_1to_1utf8
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1locale_1to_1utf8)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1locale_1to_1utf8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1locale_1to_1utf8_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)g_locale_to_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	rc = (jlong)g_locale_to_utf8((const gchar *)arg0, (gssize)arg1, (gsize *)lparg2, (gsize *)lparg3, (GError **)lparg4);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1locale_1to_1utf8_FUNC);
 	return rc;
 }
@@ -2596,7 +2596,7 @@
 
 #ifndef NO__1g_1log_1default_1handler
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1log_1default_1handler)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jlong arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1log_1default_1handler_FUNC);
 	g_log_default_handler((gchar *)arg0, (GLogLevelFlags)arg1, (gchar *)arg2, (gpointer)arg3);
@@ -2620,7 +2620,7 @@
 
 #ifndef NO__1g_1log_1set_1handler
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1log_1set_1handler)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg0=NULL;
 	jint rc = 0;
@@ -2636,7 +2636,7 @@
 
 #ifndef NO__1g_1main_1context_1acquire
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1main_1context_1acquire)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1acquire_FUNC);
@@ -2648,7 +2648,7 @@
 
 #ifndef NO__1g_1main_1context_1check
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1main_1context_1check)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jint arg3)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1check_FUNC);
@@ -2659,24 +2659,24 @@
 #endif
 
 #ifndef NO__1g_1main_1context_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1main_1context_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1main_1context_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1default_FUNC);
-	rc = (jint)g_main_context_default();
+	rc = (jlong)g_main_context_default();
 	OS_NATIVE_EXIT(env, that, _1g_1main_1context_1default_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1main_1context_1get_1poll_1func
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1main_1context_1get_1poll_1func)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1main_1context_1get_1poll_1func)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1get_1poll_1func_FUNC);
-	rc = (jint)g_main_context_get_poll_func((GMainContext *)arg0);
+	rc = (jlong)g_main_context_get_poll_func((GMainContext *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1main_1context_1get_1poll_1func_FUNC);
 	return rc;
 }
@@ -2684,7 +2684,7 @@
 
 #ifndef NO__1g_1main_1context_1iteration
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1main_1context_1iteration)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1iteration_FUNC);
@@ -2696,7 +2696,7 @@
 
 #ifndef NO__1g_1main_1context_1pending
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1main_1context_1pending)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1pending_FUNC);
@@ -2708,7 +2708,7 @@
 
 #ifndef NO__1g_1main_1context_1prepare
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1main_1context_1prepare)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1)
 {
 	jint *lparg1=NULL;
 	jboolean rc = 0;
@@ -2724,7 +2724,7 @@
 
 #ifndef NO__1g_1main_1context_1query
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1main_1context_1query)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jintArray arg2, jlong arg3, jint arg4)
 {
 	jint *lparg2=NULL;
 	jint rc = 0;
@@ -2740,7 +2740,7 @@
 
 #ifndef NO__1g_1main_1context_1release
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1main_1context_1release)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1main_1context_1release_FUNC);
 	g_main_context_release((GMainContext *)arg0);
@@ -2749,12 +2749,12 @@
 #endif
 
 #ifndef NO__1g_1malloc
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1malloc)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1malloc)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1malloc_FUNC);
-	rc = (jint)g_malloc((gulong)arg0);
+	rc = (jlong)g_malloc((gulong)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1malloc_FUNC);
 	return rc;
 }
@@ -2762,7 +2762,7 @@
 
 #ifndef NO__1g_1object_1get
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1get)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jintArray arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jintArray arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -2778,117 +2778,117 @@
 #endif
 
 #ifndef NO__1g_1object_1get_1qdata
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1object_1get_1qdata)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1object_1get_1qdata)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1object_1get_1qdata_FUNC);
-	rc = (jint)g_object_get_qdata((GObject *)arg0, (GQuark)arg1);
+	rc = (jlong)g_object_get_qdata((GObject *)arg0, (GQuark)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1object_1get_1qdata_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1object_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1object_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1object_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1object_1new_FUNC);
-	rc = (jint)g_object_new((GType)arg0, (const gchar *)arg1);
+	rc = (jlong)g_object_new((GType)arg0, (const gchar *)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1object_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1object_1ref
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1object_1ref)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1object_1ref)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1object_1ref_FUNC);
-	rc = (jint)g_object_ref((gpointer)arg0);
+	rc = (jlong)g_object_ref((gpointer)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1object_1ref_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1g_1object_1set__I_3BFI
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__I_3BFI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jfloat arg2, jint arg3)
+#ifndef NO__1g_1object_1set__J_3BFJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__J_3BFJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jfloat arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1object_1set__I_3BFI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1object_1set__J_3BFJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_object_set((gpointer)arg0, (const gchar *)lparg1, arg2, (const gchar *)NULL);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1object_1set__I_3BFI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1object_1set__J_3BFJ_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1object_1set__I_3BII
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__I_3BII)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+#ifndef NO__1g_1object_1set__J_3BIJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__J_3BIJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1object_1set__I_3BII_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1object_1set__J_3BIJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_object_set((gpointer)arg0, (const gchar *)lparg1, arg2, (const gchar *)NULL);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1object_1set__I_3BII_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1object_1set__J_3BIJ_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1object_1set__I_3BJI
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__I_3BJI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jlong arg2, jint arg3)
+#ifndef NO__1g_1object_1set__J_3BJJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__J_3BJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1object_1set__I_3BJI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1object_1set__J_3BJJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_object_set((gpointer)arg0, (const gchar *)lparg1, arg2, (const gchar *)NULL);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1object_1set__I_3BJI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1object_1set__J_3BJJ_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jobject arg2, jint arg3)
+#ifndef NO__1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jobject arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	GdkColor _arg2, *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = getGdkColorFields(env, arg2, &_arg2)) == NULL) goto fail;
 	g_object_set((gpointer)arg0, (const gchar *)lparg1, lparg2, (const gchar *)NULL);
 fail:
 	if (arg2 && lparg2) setGdkColorFields(env, arg2, lparg2);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1object_1set__I_3BZI
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__I_3BZI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jboolean arg2, jint arg3)
+#ifndef NO__1g_1object_1set__J_3BZJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set__J_3BZJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jboolean arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1object_1set__I_3BZI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1object_1set__J_3BZJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_object_set((gpointer)arg0, (const gchar *)lparg1, arg2, (const gchar *)NULL);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1object_1set__I_3BZI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1object_1set__J_3BZJ_FUNC);
 }
 #endif
 
 #ifndef NO__1g_1object_1set_1qdata
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1set_1qdata)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1object_1set_1qdata_FUNC);
 	g_object_set_qdata((GObject *)arg0, (GQuark)arg1, (gpointer)arg2);
@@ -2898,7 +2898,7 @@
 
 #ifndef NO__1g_1object_1unref
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1object_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1object_1unref_FUNC);
 	g_object_unref((gpointer)arg0);
@@ -2937,12 +2937,12 @@
 #endif
 
 #ifndef NO__1g_1signal_1add_1emission_1hook
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1add_1emission_1hook)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1signal_1add_1emission_1hook)
+	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1add_1emission_1hook_FUNC);
-	rc = (jint)g_signal_add_emission_hook((guint)arg0, (GQuark)arg1, (GSignalEmissionHook)arg2, (gpointer)arg3, (GDestroyNotify)arg4);
+	rc = (jlong)g_signal_add_emission_hook((guint)arg0, (GQuark)arg1, (GSignalEmissionHook)arg2, (gpointer)arg3, (GDestroyNotify)arg4);
 	OS_NATIVE_EXIT(env, that, _1g_1signal_1add_1emission_1hook_FUNC);
 	return rc;
 }
@@ -2950,7 +2950,7 @@
 
 #ifndef NO__1g_1signal_1connect
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1connect)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	jint rc = 0;
@@ -2966,7 +2966,7 @@
 
 #ifndef NO__1g_1signal_1connect_1after
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1connect_1after)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	jint rc = 0;
@@ -2982,7 +2982,7 @@
 
 #ifndef NO__1g_1signal_1connect_1closure
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1connect_1closure)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jboolean arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jboolean arg3)
 {
 	jbyte *lparg1=NULL;
 	jint rc = 0;
@@ -2998,7 +2998,7 @@
 
 #ifndef NO__1g_1signal_1connect_1closure_1by_1id
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1connect_1closure_1by_1id)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jboolean arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jlong arg3, jboolean arg4)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1connect_1closure_1by_1id_FUNC);
@@ -3008,68 +3008,68 @@
 }
 #endif
 
-#ifndef NO__1g_1signal_1emit_1by_1name__I_3B
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__I_3B)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+#ifndef NO__1g_1signal_1emit_1by_1name__J_3B
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__J_3B)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__I_3B_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__J_3B_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_signal_emit_by_name((gpointer)arg0, (const gchar *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__I_3B_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__J_3B_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1signal_1emit_1by_1name__I_3BI
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__I_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+#ifndef NO__1g_1signal_1emit_1by_1name__J_3BJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__J_3BJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__I_3BI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__J_3BJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_signal_emit_by_name((gpointer)arg0, (const gchar *)lparg1, arg2);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__I_3BI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__J_3BJ_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1signal_1emit_1by_1name__I_3BII
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__I_3BII)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+#ifndef NO__1g_1signal_1emit_1by_1name__J_3BJJ
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__J_3BJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__I_3BII_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__J_3BJJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	g_signal_emit_by_name((gpointer)arg0, (const gchar *)lparg1, arg2, arg3);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__I_3BII_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__J_3BJJ_FUNC);
 }
 #endif
 
-#ifndef NO__1g_1signal_1emit_1by_1name__I_3B_3B
-JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__I_3B_3B)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2)
+#ifndef NO__1g_1signal_1emit_1by_1name__J_3B_3B
+JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1emit_1by_1name__J_3B_3B)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__I_3B_3B_FUNC);
+	OS_NATIVE_ENTER(env, that, _1g_1signal_1emit_1by_1name__J_3B_3B_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	g_signal_emit_by_name((gpointer)arg0, (const gchar *)lparg1, lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, JNI_ABORT);
-	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__I_3B_3B_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1signal_1emit_1by_1name__J_3B_3B_FUNC);
 }
 #endif
 
 #ifndef NO__1g_1signal_1handler_1disconnect
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1handler_1disconnect)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1handler_1disconnect_FUNC);
 	g_signal_handler_disconnect((gpointer)arg0, (gulong)arg1);
@@ -3079,7 +3079,7 @@
 
 #ifndef NO__1g_1signal_1handlers_1block_1matched
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1handlers_1block_1matched)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1handlers_1block_1matched_FUNC);
@@ -3091,7 +3091,7 @@
 
 #ifndef NO__1g_1signal_1handlers_1disconnect_1matched
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1handlers_1disconnect_1matched)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1handlers_1disconnect_1matched_FUNC);
@@ -3103,7 +3103,7 @@
 
 #ifndef NO__1g_1signal_1handlers_1unblock_1matched
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1handlers_1unblock_1matched)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1handlers_1unblock_1matched_FUNC);
@@ -3115,7 +3115,7 @@
 
 #ifndef NO__1g_1signal_1lookup
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1signal_1lookup)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlong arg1)
 {
 	jbyte *lparg0=NULL;
 	jint rc = 0;
@@ -3131,7 +3131,7 @@
 
 #ifndef NO__1g_1signal_1remove_1emission_1hook
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1remove_1emission_1hook)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1remove_1emission_1hook_FUNC);
 	g_signal_remove_emission_hook((guint)arg0, (gulong)arg1);
@@ -3141,7 +3141,7 @@
 
 #ifndef NO__1g_1signal_1stop_1emission_1by_1name
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1signal_1stop_1emission_1by_1name)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1g_1signal_1stop_1emission_1by_1name_FUNC);
@@ -3154,12 +3154,12 @@
 #endif
 
 #ifndef NO__1g_1slist_1data
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1slist_1data)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1slist_1data)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1slist_1data_FUNC);
-	rc = (jint)g_slist_data((GSList *)arg0);
+	rc = (jlong)g_slist_data((GSList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1slist_1data_FUNC);
 	return rc;
 }
@@ -3167,7 +3167,7 @@
 
 #ifndef NO__1g_1slist_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1slist_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1slist_1free_FUNC);
 	g_slist_free((GSList *)arg0);
@@ -3177,7 +3177,7 @@
 
 #ifndef NO__1g_1slist_1length
 JNIEXPORT jint JNICALL OS_NATIVE(_1g_1slist_1length)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1slist_1length_FUNC);
@@ -3188,12 +3188,12 @@
 #endif
 
 #ifndef NO__1g_1slist_1next
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1slist_1next)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1slist_1next)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1slist_1next_FUNC);
-	rc = (jint)g_slist_next((GSList *)arg0);
+	rc = (jlong)g_slist_next((GSList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1slist_1next_FUNC);
 	return rc;
 }
@@ -3201,7 +3201,7 @@
 
 #ifndef NO__1g_1source_1remove
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1source_1remove)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1source_1remove_FUNC);
@@ -3213,7 +3213,7 @@
 
 #ifndef NO__1g_1strfreev
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1strfreev)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1strfreev_FUNC);
 	g_strfreev((gchar **)arg0);
@@ -3223,15 +3223,15 @@
 
 #ifndef NO__1g_1strtod
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1g_1strtod)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1strtod_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	rc = (jdouble)g_strtod((const gchar *)arg0, (gchar **)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1strtod_FUNC);
 	return rc;
 }
@@ -3239,7 +3239,7 @@
 
 #ifndef NO__1g_1thread_1init
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1thread_1init)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1thread_1init_FUNC);
 	g_thread_init((GThreadFunctions *)arg0);
@@ -3261,7 +3261,7 @@
 
 #ifndef NO__1g_1type_1add_1interface_1static
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1type_1add_1interface_1static)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1type_1add_1interface_1static_FUNC);
 	g_type_add_interface_static((GType)arg0, (GType)arg1, (const GInterfaceInfo *)arg2);
@@ -3270,38 +3270,38 @@
 #endif
 
 #ifndef NO__1g_1type_1class_1peek
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1class_1peek)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1class_1peek)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1class_1peek_FUNC);
-	rc = (jint)g_type_class_peek((GType)arg0);
+	rc = (jlong)g_type_class_peek((GType)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1class_1peek_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1type_1class_1peek_1parent
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1class_1peek_1parent)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1class_1peek_1parent)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1class_1peek_1parent_FUNC);
-	rc = (jint)g_type_class_peek_parent((gpointer)arg0);
+	rc = (jlong)g_type_class_peek_parent((gpointer)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1class_1peek_1parent_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1type_1from_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1from_1name)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1from_1name)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1from_1name_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)g_type_from_name((const gchar *)lparg0);
+	rc = (jlong)g_type_from_name((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1from_1name_FUNC);
@@ -3310,12 +3310,12 @@
 #endif
 
 #ifndef NO__1g_1type_1interface_1peek_1parent
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1interface_1peek_1parent)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1interface_1peek_1parent)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1interface_1peek_1parent_FUNC);
-	rc = (jint)g_type_interface_peek_parent((gpointer)arg0);
+	rc = (jlong)g_type_interface_peek_parent((gpointer)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1interface_1peek_1parent_FUNC);
 	return rc;
 }
@@ -3323,7 +3323,7 @@
 
 #ifndef NO__1g_1type_1is_1a
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1g_1type_1is_1a)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1is_1a_FUNC);
@@ -3334,24 +3334,24 @@
 #endif
 
 #ifndef NO__1g_1type_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1name_FUNC);
-	rc = (jint)g_type_name((GType)arg0);
+	rc = (jlong)g_type_name((GType)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1name_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1type_1parent
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1parent)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1parent)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1parent_FUNC);
-	rc = (jint)g_type_parent((GType)arg0);
+	rc = (jlong)g_type_parent((GType)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1parent_FUNC);
 	return rc;
 }
@@ -3359,7 +3359,7 @@
 
 #ifndef NO__1g_1type_1query
 JNIEXPORT void JNICALL OS_NATIVE(_1g_1type_1query)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1g_1type_1query_FUNC);
 	g_type_query((GType)arg0, (GTypeQuery *)arg1);
@@ -3368,14 +3368,14 @@
 #endif
 
 #ifndef NO__1g_1type_1register_1static
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1type_1register_1static)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1type_1register_1static)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jint arg3)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1type_1register_1static_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)g_type_register_static((GType)arg0, (const gchar *)lparg1, (const GTypeInfo *)arg2, (GTypeFlags)arg3);
+	rc = (jlong)g_type_register_static((GType)arg0, (const gchar *)lparg1, (const GTypeInfo *)arg2, (GTypeFlags)arg3);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1g_1type_1register_1static_FUNC);
@@ -3384,14 +3384,14 @@
 #endif
 
 #ifndef NO__1g_1utf16_1to_1utf8
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf16_1to_1utf8)
-	(JNIEnv *env, jclass that, jcharArray arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf16_1to_1utf8)
+	(JNIEnv *env, jclass that, jcharArray arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
 	jchar *lparg0=NULL;
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1utf16_1to_1utf8_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3403,11 +3403,11 @@
 #endif
 	{
 		if (arg0) if ((lparg0 = (*env)->GetCharArrayElements(env, arg0, NULL)) == NULL) goto fail;
-		if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-		if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-		if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+		if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+		if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+		if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)g_utf16_to_utf8((const gunichar2 *)lparg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
+	rc = (jlong)g_utf16_to_utf8((const gunichar2 *)lparg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3418,9 +3418,9 @@
 	} else
 #endif
 	{
-		if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-		if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-		if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+		if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+		if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+		if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 		if (arg0 && lparg0) (*env)->ReleaseCharArrayElements(env, arg0, lparg0, JNI_ABORT);
 	}
 	OS_NATIVE_EXIT(env, that, _1g_1utf16_1to_1utf8_FUNC);
@@ -3429,50 +3429,50 @@
 #endif
 
 #ifndef NO__1g_1utf8_1offset_1to_1pointer
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf8_1offset_1to_1pointer)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf8_1offset_1to_1pointer)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1utf8_1offset_1to_1pointer_FUNC);
-	rc = (jint)g_utf8_offset_to_pointer((const gchar *)arg0, arg1);
+	rc = (jlong)g_utf8_offset_to_pointer((const gchar *)arg0, arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1utf8_1offset_1to_1pointer_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1utf8_1pointer_1to_1offset
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf8_1pointer_1to_1offset)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf8_1pointer_1to_1offset)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1utf8_1pointer_1to_1offset_FUNC);
-	rc = (jint)g_utf8_pointer_to_offset((const gchar *)arg0, (const gchar *)arg1);
+	rc = (jlong)g_utf8_pointer_to_offset((const gchar *)arg0, (const gchar *)arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1utf8_1pointer_1to_1offset_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1utf8_1strlen
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf8_1strlen)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf8_1strlen)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1utf8_1strlen_FUNC);
-	rc = (jint)g_utf8_strlen((const gchar *)arg0, arg1);
+	rc = (jlong)g_utf8_strlen((const gchar *)arg0, arg1);
 	OS_NATIVE_EXIT(env, that, _1g_1utf8_1strlen_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1g_1utf8_1to_1utf16__II_3I_3I_3I
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf8_1to_1utf16__II_3I_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+#ifndef NO__1g_1utf8_1to_1utf16__JJ_3J_3J_3J
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf8_1to_1utf16__JJ_3J_3J_3J)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
-	OS_NATIVE_ENTER(env, that, _1g_1utf8_1to_1utf16__II_3I_3I_3I_FUNC);
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
+	OS_NATIVE_ENTER(env, that, _1g_1utf8_1to_1utf16__JJ_3J_3J_3J_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg2) if ((lparg2 = (*env)->GetPrimitiveArrayCritical(env, arg2, NULL)) == NULL) goto fail;
@@ -3481,11 +3481,11 @@
 	} else
 #endif
 	{
-		if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-		if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-		if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+		if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+		if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+		if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)g_utf8_to_utf16((const gchar *)arg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
+	rc = (jlong)g_utf8_to_utf16((const gchar *)arg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3495,25 +3495,25 @@
 	} else
 #endif
 	{
-		if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-		if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-		if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+		if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+		if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+		if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	}
-	OS_NATIVE_EXIT(env, that, _1g_1utf8_1to_1utf16__II_3I_3I_3I_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1utf8_1to_1utf16__JJ_3J_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1g_1utf8_1to_1utf16___3BI_3I_3I_3I
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1utf8_1to_1utf16___3BI_3I_3I_3I)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+#ifndef NO__1g_1utf8_1to_1utf16___3BJ_3J_3J_3J
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1utf8_1to_1utf16___3BJ_3J_3J_3J)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
 	jbyte *lparg0=NULL;
-	jint *lparg2=NULL;
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
-	jint rc = 0;
-	OS_NATIVE_ENTER(env, that, _1g_1utf8_1to_1utf16___3BI_3I_3I_3I_FUNC);
+	jlong *lparg2=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
+	jlong rc = 0;
+	OS_NATIVE_ENTER(env, that, _1g_1utf8_1to_1utf16___3BJ_3J_3J_3J_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
 		if (arg0) if ((lparg0 = (*env)->GetPrimitiveArrayCritical(env, arg0, NULL)) == NULL) goto fail;
@@ -3524,11 +3524,11 @@
 #endif
 	{
 		if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-		if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-		if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-		if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+		if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
+		if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+		if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)g_utf8_to_utf16((const gchar *)lparg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
+	rc = (jlong)g_utf8_to_utf16((const gchar *)lparg0, (glong)arg1, (glong *)lparg2, (glong *)lparg3, (GError **)lparg4);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3539,34 +3539,34 @@
 	} else
 #endif
 	{
-		if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-		if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-		if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+		if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+		if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
+		if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 		if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, JNI_ABORT);
 	}
-	OS_NATIVE_EXIT(env, that, _1g_1utf8_1to_1utf16___3BI_3I_3I_3I_FUNC);
+	OS_NATIVE_EXIT(env, that, _1g_1utf8_1to_1utf16___3BJ_3J_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1g_1value_1peek_1pointer
-JNIEXPORT jint JNICALL OS_NATIVE(_1g_1value_1peek_1pointer)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1g_1value_1peek_1pointer)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1g_1value_1peek_1pointer_FUNC);
-	rc = (jint)g_value_peek_pointer((const GValue *)arg0);
+	rc = (jlong)g_value_peek_pointer((const GValue *)arg0);
 	OS_NATIVE_EXIT(env, that, _1g_1value_1peek_1pointer_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1atom_1intern
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1atom_1intern)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1atom_1intern)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jboolean arg1)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1atom_1intern_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3576,7 +3576,7 @@
 	{
 		if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)gdk_atom_intern((const gchar *)lparg0, arg1);
+	rc = (jlong)gdk_atom_intern((const gchar *)lparg0, arg1);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3592,12 +3592,12 @@
 #endif
 
 #ifndef NO__1gdk_1atom_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1atom_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1atom_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1atom_1name_FUNC);
-	rc = (jint)gdk_atom_name((GdkAtom)arg0);
+	rc = (jlong)gdk_atom_name((GdkAtom)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1atom_1name_FUNC);
 	return rc;
 }
@@ -3614,11 +3614,11 @@
 #endif
 
 #ifndef NO__1gdk_1bitmap_1create_1from_1data
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1bitmap_1create_1from_1data)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1bitmap_1create_1from_1data)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jint arg3)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1bitmap_1create_1from_1data_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3628,7 +3628,7 @@
 	{
 		if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)gdk_bitmap_create_from_data((GdkWindow *)arg0, (const gchar *)lparg1, (gint)arg2, (gint)arg3);
+	rc = (jlong)gdk_bitmap_create_from_data((GdkWindow *)arg0, (const gchar *)lparg1, (gint)arg2, (gint)arg3);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -3645,7 +3645,7 @@
 
 #ifndef NO__1gdk_1cairo_1region
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1cairo_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1cairo_1region_FUNC);
 /*
@@ -3654,7 +3654,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gdk_cairo_region_LIB, RTLD_LAZY);
@@ -3671,7 +3671,7 @@
 
 #ifndef NO__1gdk_1cairo_1set_1source_1color
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1cairo_1set_1source_1color)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1cairo_1set_1source_1color_FUNC);
@@ -3682,7 +3682,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, GdkColor *);
+		typedef void (*FPTR)(jlong, GdkColor *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gdk_cairo_set_source_color_LIB, RTLD_LAZY);
@@ -3701,7 +3701,7 @@
 
 #ifndef NO__1gdk_1color_1white
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1color_1white)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	jboolean rc = 0;
@@ -3717,7 +3717,7 @@
 
 #ifndef NO__1gdk_1colormap_1alloc_1color
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1colormap_1alloc_1color)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jboolean arg2, jboolean arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jboolean arg2, jboolean arg3)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	jboolean rc = 0;
@@ -3733,7 +3733,7 @@
 
 #ifndef NO__1gdk_1colormap_1free_1colors
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1colormap_1free_1colors)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1colormap_1free_1colors_FUNC);
@@ -3745,12 +3745,12 @@
 #endif
 
 #ifndef NO__1gdk_1colormap_1get_1system
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1colormap_1get_1system)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1colormap_1get_1system)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1colormap_1get_1system_FUNC);
-	rc = (jint)gdk_colormap_get_system();
+	rc = (jlong)gdk_colormap_get_system();
 	OS_NATIVE_EXIT(env, that, _1gdk_1colormap_1get_1system_FUNC);
 	return rc;
 }
@@ -3758,7 +3758,7 @@
 
 #ifndef NO__1gdk_1colormap_1query_1color
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1colormap_1query_1color)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1colormap_1query_1color_FUNC);
@@ -3772,7 +3772,7 @@
 
 #ifndef NO__1gdk_1cursor_1destroy
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1cursor_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1cursor_1destroy_FUNC);
 	gdk_cursor_destroy((GdkCursor *)arg0);
@@ -3781,30 +3781,30 @@
 #endif
 
 #ifndef NO__1gdk_1cursor_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1cursor_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1cursor_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1cursor_1new_FUNC);
-	rc = (jint)gdk_cursor_new((GdkCursorType)arg0);
+	rc = (jlong)gdk_cursor_new((GdkCursorType)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1cursor_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1cursor_1new_1from_1pixbuf
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1cursor_1new_1from_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1cursor_1new_1from_1pixbuf)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1cursor_1new_1from_1pixbuf_FUNC);
 /*
-	rc = (jint)gdk_cursor_new_from_pixbuf(arg0, arg1, arg2, arg3);
+	rc = (jlong)gdk_cursor_new_from_pixbuf(arg0, arg1, arg2, arg3);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint, jint, jint);
+		typedef jlong (*FPTR)(jlong, jlong, jint, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -3813,7 +3813,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1, arg2, arg3);
+			rc = (jlong)(*fptr)(arg0, arg1, arg2, arg3);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gdk_1cursor_1new_1from_1pixbuf_FUNC);
@@ -3822,16 +3822,16 @@
 #endif
 
 #ifndef NO__1gdk_1cursor_1new_1from_1pixmap
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1cursor_1new_1from_1pixmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jobject arg3, jint arg4, jint arg5)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1cursor_1new_1from_1pixmap)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jobject arg2, jobject arg3, jint arg4, jint arg5)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	GdkColor _arg3, *lparg3=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1cursor_1new_1from_1pixmap_FUNC);
 	if (arg2) if ((lparg2 = getGdkColorFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getGdkColorFields(env, arg3, &_arg3)) == NULL) goto fail;
-	rc = (jint)gdk_cursor_new_from_pixmap((GdkPixmap *)arg0, (GdkPixmap *)arg1, (GdkColor *)lparg2, (GdkColor *)lparg3, (gint)arg4, (gint)arg5);
+	rc = (jlong)gdk_cursor_new_from_pixmap((GdkPixmap *)arg0, (GdkPixmap *)arg1, (GdkColor *)lparg2, (GdkColor *)lparg3, (gint)arg4, (gint)arg5);
 fail:
 	OS_NATIVE_EXIT(env, that, _1gdk_1cursor_1new_1from_1pixmap_FUNC);
 	return rc;
@@ -3839,18 +3839,18 @@
 #endif
 
 #ifndef NO__1gdk_1display_1get_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1display_1get_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1display_1get_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1display_1get_1default_FUNC);
 /*
-	rc = (jint)gdk_display_get_default();
+	rc = (jlong)gdk_display_get_default();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -3859,7 +3859,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gdk_1display_1get_1default_FUNC);
@@ -3869,7 +3869,7 @@
 
 #ifndef NO__1gdk_1display_1supports_1cursor_1color
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1display_1supports_1cursor_1color)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1display_1supports_1cursor_1color_FUNC);
@@ -3879,7 +3879,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint);
+		typedef jboolean (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -3898,7 +3898,7 @@
 
 #ifndef NO__1gdk_1drag_1status
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1drag_1status)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1drag_1status_FUNC);
 	gdk_drag_status((GdkDragContext *)arg0, (GdkDragAction)arg1, (guint32)arg2);
@@ -3908,7 +3908,7 @@
 
 #ifndef NO__1gdk_1draw_1arc
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1arc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1arc_FUNC);
 	gdk_draw_arc((GdkDrawable *)arg0, (GdkGC *)arg1, (gint)arg2, (gint)arg3, (gint)arg4, (gint)arg5, (gint)arg6, (gint)arg7, (gint)arg8);
@@ -3918,7 +3918,7 @@
 
 #ifndef NO__1gdk_1draw_1drawable
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1drawable)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1drawable_FUNC);
 	gdk_draw_drawable((GdkDrawable *)arg0, (GdkGC *)arg1, (GdkDrawable *)arg2, (gint)arg3, (gint)arg4, (gint)arg5, (gint)arg6, (gint)arg7, (gint)arg8);
@@ -3928,7 +3928,7 @@
 
 #ifndef NO__1gdk_1draw_1image
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1image)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1image_FUNC);
 	gdk_draw_image((GdkDrawable *)arg0, (GdkGC *)arg1, (GdkImage *)arg2, arg3, arg4, arg5, arg6, arg7, arg8);
@@ -3938,7 +3938,7 @@
 
 #ifndef NO__1gdk_1draw_1layout
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1layout)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jlong arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1layout_FUNC);
 	gdk_draw_layout((GdkDrawable *)arg0, (GdkGC *)arg1, (gint)arg2, (gint)arg3, (PangoLayout *)arg4);
@@ -3948,7 +3948,7 @@
 
 #ifndef NO__1gdk_1draw_1layout_1with_1colors
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1layout_1with_1colors)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jobject arg5, jobject arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jlong arg4, jobject arg5, jobject arg6)
 {
 	GdkColor _arg5, *lparg5=NULL;
 	GdkColor _arg6, *lparg6=NULL;
@@ -3963,7 +3963,7 @@
 
 #ifndef NO__1gdk_1draw_1line
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1line)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1line_FUNC);
 	gdk_draw_line((GdkDrawable *)arg0, (GdkGC *)arg1, (gint)arg2, (gint)arg3, (gint)arg4, (gint)arg5);
@@ -3973,7 +3973,7 @@
 
 #ifndef NO__1gdk_1draw_1lines
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1lines)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jintArray arg2, jint arg3)
 {
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1lines_FUNC);
@@ -4001,7 +4001,7 @@
 
 #ifndef NO__1gdk_1draw_1pixbuf
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1pixbuf_FUNC);
 /*
@@ -4027,7 +4027,7 @@
 
 #ifndef NO__1gdk_1draw_1point
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1point)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1point_FUNC);
 	gdk_draw_point((GdkDrawable *)arg0, (GdkGC *)arg1, arg2, arg3);
@@ -4037,7 +4037,7 @@
 
 #ifndef NO__1gdk_1draw_1polygon
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1polygon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jintArray arg3, jint arg4)
 {
 	jint *lparg3=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1polygon_FUNC);
@@ -4065,7 +4065,7 @@
 
 #ifndef NO__1gdk_1draw_1rectangle
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1draw_1rectangle)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1draw_1rectangle_FUNC);
 	gdk_draw_rectangle((GdkDrawable *)arg0, (GdkGC *)arg1, (gint)arg2, (gint)arg3, (gint)arg4, (gint)arg5, (gint)arg6);
@@ -4075,7 +4075,7 @@
 
 #ifndef NO__1gdk_1drawable_1get_1depth
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1drawable_1get_1depth)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1drawable_1get_1depth_FUNC);
@@ -4086,12 +4086,12 @@
 #endif
 
 #ifndef NO__1gdk_1drawable_1get_1image
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1drawable_1get_1image)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1drawable_1get_1image)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1drawable_1get_1image_FUNC);
-	rc = (jint)gdk_drawable_get_image((GdkDrawable *)arg0, (gint)arg1, (gint)arg2, (gint)arg3, (gint)arg4);
+	rc = (jlong)gdk_drawable_get_image((GdkDrawable *)arg0, (gint)arg1, (gint)arg2, (gint)arg3, (gint)arg4);
 	OS_NATIVE_EXIT(env, that, _1gdk_1drawable_1get_1image_FUNC);
 	return rc;
 }
@@ -4099,7 +4099,7 @@
 
 #ifndef NO__1gdk_1drawable_1get_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1drawable_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -4131,12 +4131,12 @@
 #endif
 
 #ifndef NO__1gdk_1drawable_1get_1visible_1region
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1drawable_1get_1visible_1region)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1drawable_1get_1visible_1region)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1drawable_1get_1visible_1region_FUNC);
-	rc = (jint)gdk_drawable_get_visible_region((GdkDrawable *)arg0);
+	rc = (jlong)gdk_drawable_get_visible_region((GdkDrawable *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1drawable_1get_1visible_1region_FUNC);
 	return rc;
 }
@@ -4165,12 +4165,12 @@
 #endif
 
 #ifndef NO__1gdk_1event_1copy
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1copy)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1event_1copy)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1copy_FUNC);
-	rc = (jint)gdk_event_copy((GdkEvent *)arg0);
+	rc = (jlong)gdk_event_copy((GdkEvent *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1event_1copy_FUNC);
 	return rc;
 }
@@ -4178,7 +4178,7 @@
 
 #ifndef NO__1gdk_1event_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1event_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1free_FUNC);
 	gdk_event_free((GdkEvent *)arg0);
@@ -4187,12 +4187,12 @@
 #endif
 
 #ifndef NO__1gdk_1event_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1get)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1event_1get)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1get_FUNC);
-	rc = (jint)gdk_event_get();
+	rc = (jlong)gdk_event_get();
 	OS_NATIVE_EXIT(env, that, _1gdk_1event_1get_FUNC);
 	return rc;
 }
@@ -4200,7 +4200,7 @@
 
 #ifndef NO__1gdk_1event_1get_1coords
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1event_1get_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -4218,12 +4218,12 @@
 #endif
 
 #ifndef NO__1gdk_1event_1get_1graphics_1expose
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1get_1graphics_1expose)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1event_1get_1graphics_1expose)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1get_1graphics_1expose_FUNC);
-	rc = (jint)gdk_event_get_graphics_expose((GdkWindow *)arg0);
+	rc = (jlong)gdk_event_get_graphics_expose((GdkWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1event_1get_1graphics_1expose_FUNC);
 	return rc;
 }
@@ -4231,7 +4231,7 @@
 
 #ifndef NO__1gdk_1event_1get_1root_1coords
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1event_1get_1root_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jdoubleArray arg1, jdoubleArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdoubleArray arg1, jdoubleArray arg2)
 {
 	jdouble *lparg1=NULL;
 	jdouble *lparg2=NULL;
@@ -4250,7 +4250,7 @@
 
 #ifndef NO__1gdk_1event_1get_1state
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1event_1get_1state)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1)
 {
 	jint *lparg1=NULL;
 	jboolean rc = 0;
@@ -4266,7 +4266,7 @@
 
 #ifndef NO__1gdk_1event_1get_1time
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1get_1time)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1get_1time_FUNC);
@@ -4278,7 +4278,7 @@
 
 #ifndef NO__1gdk_1event_1handler_1set
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1event_1handler_1set)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1handler_1set_FUNC);
 	gdk_event_handler_set((GdkEventFunc)arg0, (gpointer)arg1, (GDestroyNotify)arg2);
@@ -4287,24 +4287,24 @@
 #endif
 
 #ifndef NO__1gdk_1event_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1event_1new)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1new_FUNC);
-	rc = (jint)gdk_event_new(arg0);
+	rc = (jlong)gdk_event_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1event_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1event_1peek
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1event_1peek)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1event_1peek)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1peek_FUNC);
-	rc = (jint)gdk_event_peek();
+	rc = (jlong)gdk_event_peek();
 	OS_NATIVE_EXIT(env, that, _1gdk_1event_1peek_FUNC);
 	return rc;
 }
@@ -4312,7 +4312,7 @@
 
 #ifndef NO__1gdk_1event_1put
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1event_1put)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1event_1put_FUNC);
 	gdk_event_put((GdkEvent *)arg0);
@@ -4332,7 +4332,7 @@
 
 #ifndef NO__1gdk_1free_1text_1list
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1free_1text_1list)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1free_1text_1list_FUNC);
 	gdk_free_text_list((gchar **)arg0);
@@ -4342,7 +4342,7 @@
 
 #ifndef NO__1gdk_1gc_1get_1values
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1get_1values)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkGCValues _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1get_1values_FUNC);
@@ -4355,12 +4355,12 @@
 #endif
 
 #ifndef NO__1gdk_1gc_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1gc_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1gc_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1new_FUNC);
-	rc = (jint)gdk_gc_new((GdkDrawable *)arg0);
+	rc = (jlong)gdk_gc_new((GdkDrawable *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1gc_1new_FUNC);
 	return rc;
 }
@@ -4368,7 +4368,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1background
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1background)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1background_FUNC);
@@ -4381,7 +4381,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1clip_1mask
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1clip_1mask)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1clip_1mask_FUNC);
 	gdk_gc_set_clip_mask((GdkGC *)arg0, (GdkBitmap *)arg1);
@@ -4391,7 +4391,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1clip_1origin
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1clip_1origin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1clip_1origin_FUNC);
 	gdk_gc_set_clip_origin((GdkGC *)arg0, (gint)arg1, (gint)arg2);
@@ -4401,7 +4401,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1clip_1rectangle
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1clip_1rectangle)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1clip_1rectangle_FUNC);
@@ -4414,7 +4414,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1clip_1region
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1clip_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1clip_1region_FUNC);
 	gdk_gc_set_clip_region((GdkGC *)arg0, (GdkRegion *)arg1);
@@ -4424,7 +4424,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1dashes
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1dashes)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jbyteArray arg2, jint arg3)
 {
 	jbyte *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1dashes_FUNC);
@@ -4452,7 +4452,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1exposures
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1exposures)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1exposures_FUNC);
 	gdk_gc_set_exposures((GdkGC *)arg0, (gboolean)arg1);
@@ -4462,7 +4462,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1fill
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1fill)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1fill_FUNC);
 	gdk_gc_set_fill((GdkGC *)arg0, (GdkFill)arg1);
@@ -4472,7 +4472,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1foreground
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1foreground)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1foreground_FUNC);
@@ -4485,7 +4485,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1function
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1function)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1function_FUNC);
 	gdk_gc_set_function((GdkGC *)arg0, (GdkFunction)arg1);
@@ -4495,7 +4495,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1line_1attributes
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1line_1attributes)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1line_1attributes_FUNC);
 	gdk_gc_set_line_attributes((GdkGC *)arg0, (gint)arg1, (GdkLineStyle)arg2, (GdkCapStyle)arg3, (GdkJoinStyle)arg4);
@@ -4505,7 +4505,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1stipple
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1stipple)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1stipple_FUNC);
 	gdk_gc_set_stipple((GdkGC *)arg0, (GdkPixmap *)arg1);
@@ -4515,7 +4515,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1subwindow
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1subwindow)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1subwindow_FUNC);
 	gdk_gc_set_subwindow((GdkGC *)arg0, (GdkSubwindowMode)arg1);
@@ -4525,7 +4525,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1tile
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1tile)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1tile_FUNC);
 	gdk_gc_set_tile((GdkGC *)arg0, (GdkPixmap *)arg1);
@@ -4535,7 +4535,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1ts_1origin
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1ts_1origin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1ts_1origin_FUNC);
 	gdk_gc_set_ts_origin((GdkGC *)arg0, arg1, arg2);
@@ -4545,7 +4545,7 @@
 
 #ifndef NO__1gdk_1gc_1set_1values
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1gc_1set_1values)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	GdkGCValues _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1gc_1set_1values_FUNC);
@@ -4567,12 +4567,12 @@
 #endif
 
 #ifndef NO__1gdk_1keymap_1get_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1keymap_1get_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1keymap_1get_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1keymap_1get_1default_FUNC);
-	rc = (jint)gdk_keymap_get_default();
+	rc = (jlong)gdk_keymap_get_default();
 	OS_NATIVE_EXIT(env, that, _1gdk_1keymap_1get_1default_FUNC);
 	return rc;
 }
@@ -4580,7 +4580,7 @@
 
 #ifndef NO__1gdk_1keymap_1translate_1keyboard_1state
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1keymap_1translate_1keyboard_1state)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5, jintArray arg6, jintArray arg7)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5, jintArray arg6, jintArray arg7)
 {
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
@@ -4628,12 +4628,12 @@
 #endif
 
 #ifndef NO__1gdk_1pango_1context_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pango_1context_1get)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pango_1context_1get)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pango_1context_1get_FUNC);
-	rc = (jint)gdk_pango_context_get();
+	rc = (jlong)gdk_pango_context_get();
 	OS_NATIVE_EXIT(env, that, _1gdk_1pango_1context_1get_FUNC);
 	return rc;
 }
@@ -4641,7 +4641,7 @@
 
 #ifndef NO__1gdk_1pango_1context_1set_1colormap
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pango_1context_1set_1colormap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1pango_1context_1set_1colormap_FUNC);
 	gdk_pango_context_set_colormap((PangoContext *)arg0, (GdkColormap *)arg1);
@@ -4650,14 +4650,14 @@
 #endif
 
 #ifndef NO__1gdk_1pango_1layout_1get_1clip_1region
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pango_1layout_1get_1clip_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jint arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pango_1layout_1get_1clip_1region)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jintArray arg3, jint arg4)
 {
 	jint *lparg3=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pango_1layout_1get_1clip_1region_FUNC);
 	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_pango_layout_get_clip_region((PangoLayout *)arg0, arg1, arg2, lparg3, arg4);
+	rc = (jlong)gdk_pango_layout_get_clip_region((PangoLayout *)arg0, arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pango_1layout_1get_1clip_1region_FUNC);
@@ -4667,7 +4667,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1copy_1area
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pixbuf_1copy_1area)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1copy_1area_FUNC);
 	gdk_pixbuf_copy_area((GdkPixbuf *)arg0, arg1, arg2, arg3, arg4, (GdkPixbuf *)arg5, arg6, arg7);
@@ -4676,12 +4676,12 @@
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1get_1from_1drawable
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1from_1drawable)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1from_1drawable)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1from_1drawable_FUNC);
-	rc = (jint)gdk_pixbuf_get_from_drawable((GdkPixbuf *)arg0, (GdkDrawable *)arg1, (GdkColormap *)arg2, arg3, arg4, arg5, arg6, arg7, arg8);
+	rc = (jlong)gdk_pixbuf_get_from_drawable((GdkPixbuf *)arg0, (GdkDrawable *)arg1, (GdkColormap *)arg2, arg3, arg4, arg5, arg6, arg7, arg8);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1get_1from_1drawable_FUNC);
 	return rc;
 }
@@ -4689,7 +4689,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1get_1has_1alpha
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1has_1alpha)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1has_1alpha_FUNC);
@@ -4701,7 +4701,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1get_1height
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1height)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1height_FUNC);
@@ -4712,12 +4712,12 @@
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1get_1pixels
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1pixels)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1pixels)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1pixels_FUNC);
-	rc = (jint)gdk_pixbuf_get_pixels((const GdkPixbuf *)arg0);
+	rc = (jlong)gdk_pixbuf_get_pixels((const GdkPixbuf *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1get_1pixels_FUNC);
 	return rc;
 }
@@ -4725,7 +4725,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1get_1rowstride
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1rowstride)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1rowstride_FUNC);
@@ -4737,7 +4737,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1get_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1get_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1get_1width_FUNC);
@@ -4749,39 +4749,39 @@
 
 #ifndef NO__1gdk_1pixbuf_1loader_1close
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1close)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1loader_1close_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	rc = (jboolean)gdk_pixbuf_loader_close((GdkPixbufLoader *)arg0, (GError **)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1loader_1close_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1loader_1get_1pixbuf
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1get_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1get_1pixbuf)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1loader_1get_1pixbuf_FUNC);
-	rc = (jint)gdk_pixbuf_loader_get_pixbuf((GdkPixbufLoader *)arg0);
+	rc = (jlong)gdk_pixbuf_loader_get_pixbuf((GdkPixbufLoader *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1loader_1get_1pixbuf_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1loader_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1loader_1new_FUNC);
-	rc = (jint)gdk_pixbuf_loader_new();
+	rc = (jlong)gdk_pixbuf_loader_new();
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1loader_1new_FUNC);
 	return rc;
 }
@@ -4789,45 +4789,45 @@
 
 #ifndef NO__1gdk_1pixbuf_1loader_1write
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1pixbuf_1loader_1write)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlongArray arg3)
 {
-	jint *lparg3=NULL;
+	jlong *lparg3=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1loader_1write_FUNC);
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	rc = (jboolean)gdk_pixbuf_loader_write((GdkPixbufLoader *)arg0, (const guchar *)arg1, (gsize)arg2, (GError **)lparg3);
 fail:
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1loader_1write_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1new)
 	(JNIEnv *env, jclass that, jint arg0, jboolean arg1, jint arg2, jint arg3, jint arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1new_FUNC);
-	rc = (jint)gdk_pixbuf_new((GdkColorspace)arg0, (gboolean)arg1, arg2, arg3, arg4);
+	rc = (jlong)gdk_pixbuf_new((GdkColorspace)arg0, (gboolean)arg1, arg2, arg3, arg4);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1new_1from_1file
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1new_1from_1file)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1new_1from_1file)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlongArray arg1)
 {
 	jbyte *lparg0=NULL;
-	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1new_1from_1file_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_pixbuf_new_from_file((const char *)lparg0, (GError**)lparg1);
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	rc = (jlong)gdk_pixbuf_new_from_file((const char *)lparg0, (GError**)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1new_1from_1file_FUNC);
 	return rc;
@@ -4836,24 +4836,24 @@
 
 #ifndef NO__1gdk_1pixbuf_1render_1pixmap_1and_1mask
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pixbuf_1render_1pixmap_1and_1mask)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlongArray arg2, jint arg3)
 {
-	jint *lparg1=NULL;
-	jint *lparg2=NULL;
+	jlong *lparg1=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1render_1pixmap_1and_1mask_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gdk_pixbuf_render_pixmap_and_mask((GdkPixbuf *)arg0, (GdkDrawable **)lparg1, (GdkBitmap **)lparg2, arg3);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1render_1pixmap_1and_1mask_FUNC);
 }
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1render_1to_1drawable
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pixbuf_1render_1to_1drawable)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1render_1to_1drawable_FUNC);
 	gdk_pixbuf_render_to_drawable((GdkPixbuf *)arg0, (GdkDrawable *)arg1, (GdkGC *)arg2, arg3, arg4, arg5, arg6, arg7, arg8, (GdkRgbDither)arg9, arg10, arg11);
@@ -4863,7 +4863,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1render_1to_1drawable_1alpha
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pixbuf_1render_1to_1drawable_1alpha)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1render_1to_1drawable_1alpha_FUNC);
 	gdk_pixbuf_render_to_drawable_alpha((GdkPixbuf *)arg0, (GdkDrawable *)arg1, arg2, arg3, arg4, arg5, arg6, arg7, (GdkPixbufAlphaMode)arg8, arg9, (GdkRgbDither)arg10, arg11, arg12);
@@ -4873,19 +4873,19 @@
 
 #ifndef NO__1gdk_1pixbuf_1save_1to_1buffer
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1pixbuf_1save_1to_1buffer)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jbyteArray arg3, jintArray arg4, jbyteArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2, jbyteArray arg3, jlongArray arg4, jbyteArray arg5)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	jbyte *lparg3=NULL;
-	jint *lparg4=NULL;
+	jlong *lparg4=NULL;
 	jbyte *lparg5=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1save_1to_1buffer_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetByteArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = (*env)->GetByteArrayElements(env, arg5, NULL)) == NULL) goto fail;
 /*
 	rc = (jboolean)gdk_pixbuf_save_to_buffer((GdkPixbuf *)arg0, (gchar **)lparg1, (gsize *)lparg2, (const char *)lparg3, (GError **)lparg4, (char *)lparg5);
@@ -4907,10 +4907,10 @@
 	}
 fail:
 	if (arg5 && lparg5) (*env)->ReleaseByteArrayElements(env, arg5, lparg5, 0);
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
 	if (arg3 && lparg3) (*env)->ReleaseByteArrayElements(env, arg3, lparg3, 0);
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1save_1to_1buffer_FUNC);
 	return rc;
 }
@@ -4918,7 +4918,7 @@
 
 #ifndef NO__1gdk_1pixbuf_1scale
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1pixbuf_1scale)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jdouble arg6, jdouble arg7, jdouble arg8, jdouble arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jdouble arg6, jdouble arg7, jdouble arg8, jdouble arg9, jint arg10)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1scale_FUNC);
 	gdk_pixbuf_scale((const GdkPixbuf *)arg0, (GdkPixbuf *)arg1, arg2, arg3, arg4, arg5, (double)arg6, (double)arg7, (double)arg8, (double)arg9, arg10);
@@ -4927,36 +4927,36 @@
 #endif
 
 #ifndef NO__1gdk_1pixbuf_1scale_1simple
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixbuf_1scale_1simple)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixbuf_1scale_1simple)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixbuf_1scale_1simple_FUNC);
-	rc = (jint)gdk_pixbuf_scale_simple((const GdkPixbuf *)arg0, arg1, arg2, (GdkInterpType)arg3);
+	rc = (jlong)gdk_pixbuf_scale_simple((const GdkPixbuf *)arg0, arg1, arg2, (GdkInterpType)arg3);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixbuf_1scale_1simple_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixmap_1foreign_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixmap_1foreign_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixmap_1foreign_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixmap_1foreign_1new_FUNC);
-	rc = (jint)gdk_pixmap_foreign_new(arg0);
+	rc = (jlong)gdk_pixmap_foreign_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixmap_1foreign_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1pixmap_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pixmap_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1pixmap_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pixmap_1new_FUNC);
-	rc = (jint)gdk_pixmap_new((GdkWindow *)arg0, (gint)arg1, (gint)arg2, (gint)arg3);
+	rc = (jlong)gdk_pixmap_new((GdkWindow *)arg0, (gint)arg1, (gint)arg2, (gint)arg3);
 	OS_NATIVE_EXIT(env, that, _1gdk_1pixmap_1new_FUNC);
 	return rc;
 }
@@ -4964,7 +4964,7 @@
 
 #ifndef NO__1gdk_1pointer_1grab
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1pointer_1grab)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1, jint arg2, jlong arg3, jlong arg4, jint arg5)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1pointer_1grab_FUNC);
@@ -4998,24 +4998,24 @@
 
 #ifndef NO__1gdk_1property_1get
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1property_1get)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jintArray arg6, jintArray arg7, jintArray arg8, jintArray arg9)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jlongArray arg6, jintArray arg7, jintArray arg8, jlongArray arg9)
 {
-	jint *lparg6=NULL;
+	jlong *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
-	jint *lparg9=NULL;
+	jlong *lparg9=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1property_1get_FUNC);
-	if (arg6) if ((lparg6 = (*env)->GetIntArrayElements(env, arg6, NULL)) == NULL) goto fail;
+	if (arg6) if ((lparg6 = (*env)->GetLongArrayElements(env, arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = (*env)->GetIntArrayElements(env, arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = (*env)->GetIntArrayElements(env, arg8, NULL)) == NULL) goto fail;
-	if (arg9) if ((lparg9 = (*env)->GetIntArrayElements(env, arg9, NULL)) == NULL) goto fail;
+	if (arg9) if ((lparg9 = (*env)->GetLongArrayElements(env, arg9, NULL)) == NULL) goto fail;
 	rc = (jboolean)gdk_property_get((GdkWindow *)arg0, (GdkAtom)arg1, (GdkAtom)arg2, arg3, arg4, arg5, (GdkAtom *)lparg6, (gint *)lparg7, (gint *)lparg8, (guchar **)lparg9);
 fail:
-	if (arg9 && lparg9) (*env)->ReleaseIntArrayElements(env, arg9, lparg9, 0);
+	if (arg9 && lparg9) (*env)->ReleaseLongArrayElements(env, arg9, lparg9, 0);
 	if (arg8 && lparg8) (*env)->ReleaseIntArrayElements(env, arg8, lparg8, 0);
 	if (arg7 && lparg7) (*env)->ReleaseIntArrayElements(env, arg7, lparg7, 0);
-	if (arg6 && lparg6) (*env)->ReleaseIntArrayElements(env, arg6, lparg6, 0);
+	if (arg6 && lparg6) (*env)->ReleaseLongArrayElements(env, arg6, lparg6, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1property_1get_FUNC);
 	return rc;
 }
@@ -5023,7 +5023,7 @@
 
 #ifndef NO__1gdk_1region_1destroy
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1destroy_FUNC);
 	gdk_region_destroy((GdkRegion *)arg0);
@@ -5033,7 +5033,7 @@
 
 #ifndef NO__1gdk_1region_1empty
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1region_1empty)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1empty_FUNC);
@@ -5045,7 +5045,7 @@
 
 #ifndef NO__1gdk_1region_1get_1clipbox
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1get_1clipbox)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1get_1clipbox_FUNC);
@@ -5059,24 +5059,24 @@
 
 #ifndef NO__1gdk_1region_1get_1rectangles
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1get_1rectangles)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1get_1rectangles_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gdk_region_get_rectangles((GdkRegion *)arg0, (GdkRectangle **)lparg1, (gint *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1region_1get_1rectangles_FUNC);
 }
 #endif
 
 #ifndef NO__1gdk_1region_1intersect
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1intersect)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1intersect_FUNC);
 	gdk_region_intersect((GdkRegion *)arg0, (GdkRegion *)arg1);
@@ -5085,12 +5085,12 @@
 #endif
 
 #ifndef NO__1gdk_1region_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1region_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1region_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1new_FUNC);
-	rc = (jint)gdk_region_new();
+	rc = (jlong)gdk_region_new();
 	OS_NATIVE_EXIT(env, that, _1gdk_1region_1new_FUNC);
 	return rc;
 }
@@ -5098,7 +5098,7 @@
 
 #ifndef NO__1gdk_1region_1offset
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1offset)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1offset_FUNC);
 	gdk_region_offset((GdkRegion *)arg0, (gint)arg1, (gint)arg2);
@@ -5108,7 +5108,7 @@
 
 #ifndef NO__1gdk_1region_1point_1in
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1region_1point_1in)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1point_1in_FUNC);
@@ -5119,14 +5119,14 @@
 #endif
 
 #ifndef NO__1gdk_1region_1polygon
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1region_1polygon)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1region_1polygon)
 	(JNIEnv *env, jclass that, jintArray arg0, jint arg1, jint arg2)
 {
 	jint *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1polygon_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetIntArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_region_polygon((GdkPoint *)lparg0, arg1, (GdkFillRule)arg2);
+	rc = (jlong)gdk_region_polygon((GdkPoint *)lparg0, arg1, (GdkFillRule)arg2);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseIntArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1region_1polygon_FUNC);
@@ -5135,14 +5135,14 @@
 #endif
 
 #ifndef NO__1gdk_1region_1rect_1in
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1region_1rect_1in)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1region_1rect_1in)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1rect_1in_FUNC);
 	if (arg1) if ((lparg1 = getGdkRectangleFields(env, arg1, &_arg1)) == NULL) goto fail;
-	rc = (jint)gdk_region_rect_in((GdkRegion *)arg0, (GdkRectangle *)lparg1);
+	rc = (jlong)gdk_region_rect_in((GdkRegion *)arg0, (GdkRectangle *)lparg1);
 fail:
 	OS_NATIVE_EXIT(env, that, _1gdk_1region_1rect_1in_FUNC);
 	return rc;
@@ -5150,14 +5150,14 @@
 #endif
 
 #ifndef NO__1gdk_1region_1rectangle
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1region_1rectangle)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1region_1rectangle)
 	(JNIEnv *env, jclass that, jobject arg0)
 {
 	GdkRectangle _arg0, *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1rectangle_FUNC);
 	if (arg0) if ((lparg0 = getGdkRectangleFields(env, arg0, &_arg0)) == NULL) goto fail;
-	rc = (jint)gdk_region_rectangle(lparg0);
+	rc = (jlong)gdk_region_rectangle(lparg0);
 fail:
 	OS_NATIVE_EXIT(env, that, _1gdk_1region_1rectangle_FUNC);
 	return rc;
@@ -5166,7 +5166,7 @@
 
 #ifndef NO__1gdk_1region_1subtract
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1subtract)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1subtract_FUNC);
 	gdk_region_subtract((GdkRegion *)arg0, (GdkRegion *)arg1);
@@ -5176,7 +5176,7 @@
 
 #ifndef NO__1gdk_1region_1union
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1union)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1union_FUNC);
 	gdk_region_union((GdkRegion *)arg0, (GdkRegion *)arg1);
@@ -5186,7 +5186,7 @@
 
 #ifndef NO__1gdk_1region_1union_1with_1rect
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1region_1union_1with_1rect)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1region_1union_1with_1rect_FUNC);
@@ -5208,18 +5208,18 @@
 #endif
 
 #ifndef NO__1gdk_1screen_1get_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1screen_1get_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1screen_1get_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1default_FUNC);
 /*
-	rc = (jint)gdk_screen_get_default();
+	rc = (jlong)gdk_screen_get_default();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -5228,7 +5228,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gdk_1screen_1get_1default_FUNC);
@@ -5238,7 +5238,7 @@
 
 #ifndef NO__1gdk_1screen_1get_1monitor_1at_1point
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1screen_1get_1monitor_1at_1point)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1monitor_1at_1point_FUNC);
@@ -5267,7 +5267,7 @@
 
 #ifndef NO__1gdk_1screen_1get_1monitor_1at_1window
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1screen_1get_1monitor_1at_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1monitor_1at_1window_FUNC);
@@ -5296,7 +5296,7 @@
 
 #ifndef NO__1gdk_1screen_1get_1monitor_1geometry
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1screen_1get_1monitor_1geometry)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkRectangle _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1monitor_1geometry_FUNC);
@@ -5326,7 +5326,7 @@
 
 #ifndef NO__1gdk_1screen_1get_1n_1monitors
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1screen_1get_1n_1monitors)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1n_1monitors_FUNC);
@@ -5355,7 +5355,7 @@
 
 #ifndef NO__1gdk_1screen_1get_1number
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1screen_1get_1number)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1screen_1get_1number_FUNC);
@@ -5434,15 +5434,15 @@
 
 #ifndef NO__1gdk_1text_1property_1to_1utf8_1list
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1text_1property_1to_1utf8_1list)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jint arg3, jlongArray arg4)
 {
-	jint *lparg4=NULL;
+	jlong *lparg4=NULL;
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1text_1property_1to_1utf8_1list_FUNC);
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	rc = (jint)gdk_text_property_to_utf8_list((GdkAtom)arg0, arg1, (guchar *)arg2, arg3, (gchar ***)lparg4);
 fail:
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1text_1property_1to_1utf8_1list_FUNC);
 	return rc;
 }
@@ -5462,26 +5462,26 @@
 
 #ifndef NO__1gdk_1utf8_1to_1compound_1text
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1utf8_1to_1compound_1text)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jintArray arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlongArray arg1, jintArray arg2, jlongArray arg3, jintArray arg4)
 {
 	jbyte *lparg0=NULL;
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
-	jint *lparg3=NULL;
+	jlong *lparg3=NULL;
 	jint *lparg4=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1utf8_1to_1compound_1text_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	rc = (jboolean)gdk_utf8_to_compound_text((const gchar *)lparg0, (GdkAtom *)lparg1, (gint *)lparg2, (guchar **)lparg3, (gint *)lparg4);
 fail:
 	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1utf8_1to_1compound_1text_FUNC);
 	return rc;
@@ -5489,14 +5489,14 @@
 #endif
 
 #ifndef NO__1gdk_1utf8_1to_1string_1target
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1utf8_1to_1string_1target)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1utf8_1to_1string_1target)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1utf8_1to_1string_1target_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_utf8_to_string_target((const gchar *)lparg0);
+	rc = (jlong)gdk_utf8_to_string_target((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1utf8_1to_1string_1target_FUNC);
@@ -5505,12 +5505,12 @@
 #endif
 
 #ifndef NO__1gdk_1visual_1get_1system
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1visual_1get_1system)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1visual_1get_1system)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1visual_1get_1system_FUNC);
-	rc = (jint)gdk_visual_get_system();
+	rc = (jlong)gdk_visual_get_system();
 	OS_NATIVE_EXIT(env, that, _1gdk_1visual_1get_1system_FUNC);
 	return rc;
 }
@@ -5518,7 +5518,7 @@
 
 #ifndef NO__1gdk_1window_1add_1filter
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1add_1filter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1add_1filter_FUNC);
 	gdk_window_add_filter((GdkWindow *)arg0, (GdkFilterFunc)arg1, (gpointer)arg2);
@@ -5527,16 +5527,16 @@
 #endif
 
 #ifndef NO__1gdk_1window_1at_1pointer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1at_1pointer)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1at_1pointer)
 	(JNIEnv *env, jclass that, jintArray arg0, jintArray arg1)
 {
 	jint *lparg0=NULL;
 	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1at_1pointer_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetIntArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_window_at_pointer((gint *)lparg0, (gint *)lparg1);
+	rc = (jlong)gdk_window_at_pointer((gint *)lparg0, (gint *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
 	if (arg0 && lparg0) (*env)->ReleaseIntArrayElements(env, arg0, lparg0, 0);
@@ -5547,7 +5547,7 @@
 
 #ifndef NO__1gdk_1window_1begin_1paint_1rect
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1begin_1paint_1rect)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1begin_1paint_1rect_FUNC);
@@ -5560,7 +5560,7 @@
 
 #ifndef NO__1gdk_1window_1clear_1area
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1clear_1area)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1clear_1area_FUNC);
 	gdk_window_clear_area((GdkWindow *)arg0, arg1, arg2, arg3, arg4);
@@ -5570,7 +5570,7 @@
 
 #ifndef NO__1gdk_1window_1destroy
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1destroy_FUNC);
 	gdk_window_destroy((GdkWindow *)arg0);
@@ -5580,7 +5580,7 @@
 
 #ifndef NO__1gdk_1window_1end_1paint
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1end_1paint)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1end_1paint_FUNC);
 	gdk_window_end_paint((GdkWindow *)arg0);
@@ -5590,7 +5590,7 @@
 
 #ifndef NO__1gdk_1window_1focus
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1focus)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1focus_FUNC);
 	gdk_window_focus((GdkWindow *)arg0, arg1);
@@ -5600,7 +5600,7 @@
 
 #ifndef NO__1gdk_1window_1freeze_1updates
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1freeze_1updates)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1freeze_1updates_FUNC);
 	gdk_window_freeze_updates((GdkWindow *)arg0);
@@ -5609,12 +5609,12 @@
 #endif
 
 #ifndef NO__1gdk_1window_1get_1children
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1get_1children)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1get_1children)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1children_FUNC);
-	rc = (jint)gdk_window_get_children((GdkWindow *)arg0);
+	rc = (jlong)gdk_window_get_children((GdkWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1get_1children_FUNC);
 	return rc;
 }
@@ -5622,7 +5622,7 @@
 
 #ifndef NO__1gdk_1window_1get_1events
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1get_1events)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1events_FUNC);
@@ -5634,7 +5634,7 @@
 
 #ifndef NO__1gdk_1window_1get_1frame_1extents
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1get_1frame_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1frame_1extents_FUNC);
@@ -5648,27 +5648,27 @@
 
 #ifndef NO__1gdk_1window_1get_1internal_1paint_1info
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1get_1internal_1paint_1info)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2, jintArray arg3)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1internal_1paint_1info_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gdk_window_get_internal_paint_info((GdkWindow *)arg0, (GdkDrawable **)lparg1, (gint *)lparg2, (gint *)lparg3);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1get_1internal_1paint_1info_FUNC);
 }
 #endif
 
 #ifndef NO__1gdk_1window_1get_1origin
 JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1get_1origin)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -5686,30 +5686,30 @@
 #endif
 
 #ifndef NO__1gdk_1window_1get_1parent
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1get_1parent)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1get_1parent)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1parent_FUNC);
-	rc = (jint)gdk_window_get_parent((GdkWindow *)arg0);
+	rc = (jlong)gdk_window_get_parent((GdkWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1get_1parent_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1window_1get_1pointer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1get_1pointer)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jintArray arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1get_1pointer)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2, jintArray arg3)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1pointer_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	rc = (jint)gdk_window_get_pointer((GdkWindow *)arg0, (gint *)lparg1, (gint *)lparg2, (GdkModifierType *)lparg3);
+	rc = (jlong)gdk_window_get_pointer((GdkWindow *)arg0, (gint *)lparg1, (gint *)lparg2, (GdkModifierType *)lparg3);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
@@ -5721,7 +5721,7 @@
 
 #ifndef NO__1gdk_1window_1get_1position
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1get_1position)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -5738,21 +5738,21 @@
 
 #ifndef NO__1gdk_1window_1get_1user_1data
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1get_1user_1data)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1get_1user_1data_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	gdk_window_get_user_data((GdkWindow *)arg0, (gpointer *)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1get_1user_1data_FUNC);
 }
 #endif
 
 #ifndef NO__1gdk_1window_1hide
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1hide)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1hide_FUNC);
 	gdk_window_hide((GdkWindow *)arg0);
@@ -5762,7 +5762,7 @@
 
 #ifndef NO__1gdk_1window_1invalidate_1rect
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1invalidate_1rect)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jboolean arg2)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1invalidate_1rect_FUNC);
@@ -5775,7 +5775,7 @@
 
 #ifndef NO__1gdk_1window_1invalidate_1region
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1invalidate_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1invalidate_1region_FUNC);
 	gdk_window_invalidate_region((GdkWindow *)arg0, (GdkRegion *)arg1, (gboolean)arg2);
@@ -5785,7 +5785,7 @@
 
 #ifndef NO__1gdk_1window_1is_1visible
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gdk_1window_1is_1visible)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1is_1visible_FUNC);
@@ -5796,12 +5796,12 @@
 #endif
 
 #ifndef NO__1gdk_1window_1lookup
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1lookup)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1lookup)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1lookup_FUNC);
-	rc = (jint)gdk_window_lookup(arg0);
+	rc = (jlong)gdk_window_lookup(arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1lookup_FUNC);
 	return rc;
 }
@@ -5809,7 +5809,7 @@
 
 #ifndef NO__1gdk_1window_1lower
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1lower)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1lower_FUNC);
 	gdk_window_lower((GdkWindow *)arg0);
@@ -5819,7 +5819,7 @@
 
 #ifndef NO__1gdk_1window_1move
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1move)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1move_FUNC);
 	gdk_window_move((GdkWindow *)arg0, arg1, arg2);
@@ -5828,14 +5828,14 @@
 #endif
 
 #ifndef NO__1gdk_1window_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1window_1new)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1window_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	GdkWindowAttr _arg1, *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1new_FUNC);
 	if (arg1) if ((lparg1 = getGdkWindowAttrFields(env, arg1, &_arg1)) == NULL) goto fail;
-	rc = (jint)gdk_window_new((GdkWindow *)arg0, lparg1, arg2);
+	rc = (jlong)gdk_window_new((GdkWindow *)arg0, lparg1, arg2);
 fail:
 	OS_NATIVE_EXIT(env, that, _1gdk_1window_1new_FUNC);
 	return rc;
@@ -5854,7 +5854,7 @@
 
 #ifndef NO__1gdk_1window_1process_1updates
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1process_1updates)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1process_1updates_FUNC);
 	gdk_window_process_updates((GdkWindow *)arg0, (gboolean)arg1);
@@ -5864,7 +5864,7 @@
 
 #ifndef NO__1gdk_1window_1raise
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1raise)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1raise_FUNC);
 	gdk_window_raise((GdkWindow *)arg0);
@@ -5874,7 +5874,7 @@
 
 #ifndef NO__1gdk_1window_1remove_1filter
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1remove_1filter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1remove_1filter_FUNC);
 	gdk_window_remove_filter((GdkWindow *)arg0, (GdkFilterFunc)arg1, (gpointer)arg2);
@@ -5884,7 +5884,7 @@
 
 #ifndef NO__1gdk_1window_1resize
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1resize)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1resize_FUNC);
 	gdk_window_resize((GdkWindow *)arg0, arg1, arg2);
@@ -5894,7 +5894,7 @@
 
 #ifndef NO__1gdk_1window_1scroll
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1scroll)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1scroll_FUNC);
 	gdk_window_scroll((GdkWindow *)arg0, arg1, arg2);
@@ -5904,7 +5904,7 @@
 
 #ifndef NO__1gdk_1window_1set_1accept_1focus
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1accept_1focus)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1accept_1focus_FUNC);
 /*
@@ -5930,7 +5930,7 @@
 
 #ifndef NO__1gdk_1window_1set_1back_1pixmap
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1back_1pixmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1back_1pixmap_FUNC);
 	gdk_window_set_back_pixmap((GdkWindow *)arg0, (GdkPixmap *)arg1, (gboolean)arg2);
@@ -5940,7 +5940,7 @@
 
 #ifndef NO__1gdk_1window_1set_1cursor
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1cursor)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1cursor_FUNC);
 	gdk_window_set_cursor((GdkWindow *)arg0, (GdkCursor *)arg1);
@@ -5960,7 +5960,7 @@
 
 #ifndef NO__1gdk_1window_1set_1decorations
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1decorations)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1decorations_FUNC);
 	gdk_window_set_decorations((GdkWindow *)arg0, (GdkWMDecoration)arg1);
@@ -5970,7 +5970,7 @@
 
 #ifndef NO__1gdk_1window_1set_1events
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1events)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1events_FUNC);
 	gdk_window_set_events((GdkWindow *)arg0, arg1);
@@ -5980,7 +5980,7 @@
 
 #ifndef NO__1gdk_1window_1set_1icon
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1icon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1icon_FUNC);
 	gdk_window_set_icon((GdkWindow *)arg0, (GdkWindow *)arg1, (GdkPixmap *)arg2, (GdkBitmap *)arg3);
@@ -5990,7 +5990,7 @@
 
 #ifndef NO__1gdk_1window_1set_1icon_1list
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1icon_1list)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1icon_1list_FUNC);
 	gdk_window_set_icon_list((GdkWindow *)arg0, (GList *)arg1);
@@ -6000,7 +6000,7 @@
 
 #ifndef NO__1gdk_1window_1set_1keep_1above
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1keep_1above)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1keep_1above_FUNC);
 /*
@@ -6026,7 +6026,7 @@
 
 #ifndef NO__1gdk_1window_1set_1override_1redirect
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1override_1redirect)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1override_1redirect_FUNC);
 	gdk_window_set_override_redirect((GdkWindow *)arg0, (gboolean)arg1);
@@ -6036,7 +6036,7 @@
 
 #ifndef NO__1gdk_1window_1set_1user_1data
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1set_1user_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1set_1user_1data_FUNC);
 	gdk_window_set_user_data((GdkWindow *)arg0, (gpointer)arg1);
@@ -6046,7 +6046,7 @@
 
 #ifndef NO__1gdk_1window_1shape_1combine_1region
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1shape_1combine_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1shape_1combine_1region_FUNC);
 	gdk_window_shape_combine_region((GdkWindow *)arg0, (GdkRegion *)arg1, arg2, arg3);
@@ -6056,7 +6056,7 @@
 
 #ifndef NO__1gdk_1window_1show
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1show)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1show_FUNC);
 	gdk_window_show((GdkWindow *)arg0);
@@ -6066,7 +6066,7 @@
 
 #ifndef NO__1gdk_1window_1show_1unraised
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1show_1unraised)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1show_1unraised_FUNC);
 	gdk_window_show_unraised((GdkWindow *)arg0);
@@ -6076,7 +6076,7 @@
 
 #ifndef NO__1gdk_1window_1thaw_1updates
 JNIEXPORT void JNICALL OS_NATIVE(_1gdk_1window_1thaw_1updates)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gdk_1window_1thaw_1updates_FUNC);
 	gdk_window_thaw_updates((GdkWindow *)arg0);
@@ -6085,66 +6085,66 @@
 #endif
 
 #ifndef NO__1gdk_1x11_1atom_1to_1xatom
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1atom_1to_1xatom)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1atom_1to_1xatom)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1atom_1to_1xatom_FUNC);
-	rc = (jint)gdk_x11_atom_to_xatom((GdkAtom)arg0);
+	rc = (jlong)gdk_x11_atom_to_xatom((GdkAtom)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1atom_1to_1xatom_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1x11_1colormap_1get_1xcolormap
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1colormap_1get_1xcolormap)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1colormap_1get_1xcolormap)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1colormap_1get_1xcolormap_FUNC);
-	rc = (jint)gdk_x11_colormap_get_xcolormap((GdkColormap *)arg0);
+	rc = (jlong)gdk_x11_colormap_get_xcolormap((GdkColormap *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1colormap_1get_1xcolormap_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1x11_1drawable_1get_1xdisplay
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1drawable_1get_1xdisplay)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1drawable_1get_1xdisplay)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1drawable_1get_1xdisplay_FUNC);
-	rc = (jint)gdk_x11_drawable_get_xdisplay((GdkDrawable *)arg0);
+	rc = (jlong)gdk_x11_drawable_get_xdisplay((GdkDrawable *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1drawable_1get_1xdisplay_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1x11_1drawable_1get_1xid
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1drawable_1get_1xid)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1drawable_1get_1xid)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1drawable_1get_1xid_FUNC);
-	rc = (jint)gdk_x11_drawable_get_xid((GdkDrawable *)arg0);
+	rc = (jlong)gdk_x11_drawable_get_xid((GdkDrawable *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1drawable_1get_1xid_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gdk_1x11_1screen_1get_1window_1manager_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1screen_1get_1window_1manager_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1screen_1get_1window_1manager_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1screen_1get_1window_1manager_1name_FUNC);
 /*
-	rc = (jint)gdk_x11_screen_get_window_manager_name((GdkScreen *)arg0);
+	rc = (jlong)gdk_x11_screen_get_window_manager_name((GdkScreen *)arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(GdkScreen *);
+		typedef jlong (*FPTR)(GdkScreen *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6153,7 +6153,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((GdkScreen *)arg0);
+			rc = (jlong)(*fptr)((GdkScreen *)arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1screen_1get_1window_1manager_1name_FUNC);
@@ -6162,18 +6162,18 @@
 #endif
 
 #ifndef NO__1gdk_1x11_1screen_1lookup_1visual
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1screen_1lookup_1visual)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1screen_1lookup_1visual)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1screen_1lookup_1visual_FUNC);
 /*
-	rc = (jint)gdk_x11_screen_lookup_visual((GdkScreen *)arg0, (VisualID)arg1);
+	rc = (jlong)gdk_x11_screen_lookup_visual((GdkScreen *)arg0, (VisualID)arg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(GdkScreen *, VisualID);
+		typedef jlong (*FPTR)(GdkScreen *, VisualID);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6182,7 +6182,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((GdkScreen *)arg0, (VisualID)arg1);
+			rc = (jlong)(*fptr)((GdkScreen *)arg0, (VisualID)arg1);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1screen_1lookup_1visual_FUNC);
@@ -6191,24 +6191,24 @@
 #endif
 
 #ifndef NO__1gdk_1x11_1visual_1get_1xvisual
-JNIEXPORT jint JNICALL OS_NATIVE(_1gdk_1x11_1visual_1get_1xvisual)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gdk_1x11_1visual_1get_1xvisual)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gdk_1x11_1visual_1get_1xvisual_FUNC);
-	rc = (jint)gdk_x11_visual_get_xvisual((GdkVisual *)arg0);
+	rc = (jlong)gdk_x11_visual_get_xvisual((GdkVisual *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gdk_1x11_1visual_1get_1xvisual_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1accel_1group_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1accel_1group_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1accel_1group_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1accel_1group_1new_FUNC);
-	rc = (jint)gtk_accel_group_new();
+	rc = (jlong)gtk_accel_group_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1accel_1group_1new_FUNC);
 	return rc;
 }
@@ -6216,7 +6216,7 @@
 
 #ifndef NO__1gtk_1accel_1groups_1activate
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1accel_1groups_1activate)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1accel_1groups_1activate_FUNC);
@@ -6228,7 +6228,7 @@
 
 #ifndef NO__1gtk_1accel_1label_1set_1accel_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1accel_1label_1set_1accel_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1accel_1label_1set_1accel_1widget_FUNC);
 	gtk_accel_label_set_accel_widget((GtkAccelLabel *)arg0, (GtkWidget *)arg1);
@@ -6238,7 +6238,7 @@
 
 #ifndef NO__1gtk_1adjustment_1changed
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1adjustment_1changed)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1adjustment_1changed_FUNC);
 	gtk_adjustment_changed((GtkAdjustment *)arg0);
@@ -6247,12 +6247,12 @@
 #endif
 
 #ifndef NO__1gtk_1adjustment_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1adjustment_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1adjustment_1new)
 	(JNIEnv *env, jclass that, jdouble arg0, jdouble arg1, jdouble arg2, jdouble arg3, jdouble arg4, jdouble arg5)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1adjustment_1new_FUNC);
-	rc = (jint)gtk_adjustment_new((gdouble)arg0, (gdouble)arg1, (gdouble)arg2, (gdouble)arg3, (gdouble)arg4, arg5);
+	rc = (jlong)gtk_adjustment_new((gdouble)arg0, (gdouble)arg1, (gdouble)arg2, (gdouble)arg3, (gdouble)arg4, arg5);
 	OS_NATIVE_EXIT(env, that, _1gtk_1adjustment_1new_FUNC);
 	return rc;
 }
@@ -6260,7 +6260,7 @@
 
 #ifndef NO__1gtk_1adjustment_1set_1value
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1adjustment_1set_1value)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1adjustment_1set_1value_FUNC);
 	gtk_adjustment_set_value((GtkAdjustment *)arg0, (gdouble)arg1);
@@ -6270,7 +6270,7 @@
 
 #ifndef NO__1gtk_1adjustment_1value_1changed
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1adjustment_1value_1changed)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1adjustment_1value_1changed_FUNC);
 	gtk_adjustment_value_changed((GtkAdjustment *)arg0);
@@ -6279,12 +6279,12 @@
 #endif
 
 #ifndef NO__1gtk_1arrow_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1arrow_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1arrow_1new)
 	(JNIEnv *env, jclass that, jint arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1arrow_1new_FUNC);
-	rc = (jint)gtk_arrow_new((GtkArrowType)arg0, (GtkShadowType)arg1);
+	rc = (jlong)gtk_arrow_new((GtkArrowType)arg0, (GtkShadowType)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1arrow_1new_FUNC);
 	return rc;
 }
@@ -6292,7 +6292,7 @@
 
 #ifndef NO__1gtk_1arrow_1set
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1arrow_1set)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1arrow_1set_FUNC);
 	gtk_arrow_set((GtkArrow *)arg0, (GtkArrowType)arg1, (GtkShadowType)arg2);
@@ -6301,12 +6301,12 @@
 #endif
 
 #ifndef NO__1gtk_1bin_1get_1child
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1bin_1get_1child)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1bin_1get_1child)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1bin_1get_1child_FUNC);
-	rc = (jint)gtk_bin_get_child((GtkBin *)arg0);
+	rc = (jlong)gtk_bin_get_child((GtkBin *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1bin_1get_1child_FUNC);
 	return rc;
 }
@@ -6314,7 +6314,7 @@
 
 #ifndef NO__1gtk_1box_1set_1child_1packing
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1box_1set_1child_1packing)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2, jboolean arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2, jboolean arg3, jint arg4, jint arg5)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1box_1set_1child_1packing_FUNC);
 	gtk_box_set_child_packing((GtkBox *)arg0, (GtkWidget *)arg1, arg2, arg3, arg4, arg5);
@@ -6324,7 +6324,7 @@
 
 #ifndef NO__1gtk_1box_1set_1spacing
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1box_1set_1spacing)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1box_1set_1spacing_FUNC);
 	gtk_box_set_spacing((GtkBox *)arg0, arg1);
@@ -6334,7 +6334,7 @@
 
 #ifndef NO__1gtk_1button_1clicked
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1button_1clicked)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1button_1clicked_FUNC);
 	gtk_button_clicked((GtkButton *)arg0);
@@ -6344,7 +6344,7 @@
 
 #ifndef NO__1gtk_1button_1get_1relief
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1button_1get_1relief)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1button_1get_1relief_FUNC);
@@ -6355,12 +6355,12 @@
 #endif
 
 #ifndef NO__1gtk_1button_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1button_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1button_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1button_1new_FUNC);
-	rc = (jint)gtk_button_new();
+	rc = (jlong)gtk_button_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1button_1new_FUNC);
 	return rc;
 }
@@ -6368,7 +6368,7 @@
 
 #ifndef NO__1gtk_1button_1set_1relief
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1button_1set_1relief)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1button_1set_1relief_FUNC);
 	gtk_button_set_relief((GtkButton *)arg0, (GtkReliefStyle)arg1);
@@ -6378,7 +6378,7 @@
 
 #ifndef NO__1gtk_1calendar_1display_1options
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1calendar_1display_1options)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1calendar_1display_1options_FUNC);
 /*
@@ -6404,7 +6404,7 @@
 
 #ifndef NO__1gtk_1calendar_1get_1date
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1calendar_1get_1date)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2, jintArray arg3)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -6439,18 +6439,18 @@
 #endif
 
 #ifndef NO__1gtk_1calendar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1calendar_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1calendar_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1calendar_1new_FUNC);
 /*
-	rc = (jint)gtk_calendar_new();
+	rc = (jlong)gtk_calendar_new();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6459,7 +6459,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1calendar_1new_FUNC);
@@ -6469,7 +6469,7 @@
 
 #ifndef NO__1gtk_1calendar_1select_1day
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1calendar_1select_1day)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1calendar_1select_1day_FUNC);
 /*
@@ -6495,7 +6495,7 @@
 
 #ifndef NO__1gtk_1calendar_1select_1month
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1calendar_1select_1month)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1calendar_1select_1month_FUNC);
@@ -6524,7 +6524,7 @@
 
 #ifndef NO__1gtk_1calendar_1set_1display_1options
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1calendar_1set_1display_1options)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1calendar_1set_1display_1options_FUNC);
 /*
@@ -6550,7 +6550,7 @@
 
 #ifndef NO__1gtk_1cell_1layout_1clear
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1cell_1layout_1clear)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1cell_1layout_1clear_FUNC);
 /*
@@ -6559,7 +6559,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint);
+		typedef void (*FPTR)(jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_cell_layout_clear_LIB, RTLD_LAZY);
@@ -6576,7 +6576,7 @@
 
 #ifndef NO__1gtk_1cell_1layout_1pack_1start
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1cell_1layout_1pack_1start)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1cell_1layout_1pack_1start_FUNC);
 /*
@@ -6585,7 +6585,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, jboolean);
+		typedef void (*FPTR)(jlong, jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_cell_layout_pack_start_LIB, RTLD_LAZY);
@@ -6602,7 +6602,7 @@
 
 #ifndef NO__1gtk_1cell_1renderer_1get_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jobject arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6)
 {
 	GdkRectangle _arg2, *lparg2=NULL;
 	jint *lparg3=NULL;
@@ -6627,48 +6627,48 @@
 #endif
 
 #ifndef NO__1gtk_1cell_1renderer_1pixbuf_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1pixbuf_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1pixbuf_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1cell_1renderer_1pixbuf_1new_FUNC);
-	rc = (jint)gtk_cell_renderer_pixbuf_new();
+	rc = (jlong)gtk_cell_renderer_pixbuf_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1cell_1renderer_1pixbuf_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1cell_1renderer_1text_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1text_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1text_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1cell_1renderer_1text_1new_FUNC);
-	rc = (jint)gtk_cell_renderer_text_new();
+	rc = (jlong)gtk_cell_renderer_text_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1cell_1renderer_1text_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1cell_1renderer_1toggle_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1toggle_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1cell_1renderer_1toggle_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1cell_1renderer_1toggle_1new_FUNC);
-	rc = (jint)gtk_cell_renderer_toggle_new();
+	rc = (jlong)gtk_cell_renderer_toggle_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1cell_1renderer_1toggle_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1check_1button_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1check_1button_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1check_1button_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1check_1button_1new_FUNC);
-	rc = (jint)gtk_check_button_new();
+	rc = (jlong)gtk_check_button_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1check_1button_1new_FUNC);
 	return rc;
 }
@@ -6676,7 +6676,7 @@
 
 #ifndef NO__1gtk_1check_1menu_1item_1get_1active
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1check_1menu_1item_1get_1active)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1check_1menu_1item_1get_1active_FUNC);
@@ -6687,14 +6687,14 @@
 #endif
 
 #ifndef NO__1gtk_1check_1menu_1item_1new_1with_1label
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1check_1menu_1item_1new_1with_1label)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1check_1menu_1item_1new_1with_1label)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1check_1menu_1item_1new_1with_1label_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_check_menu_item_new_with_label((const gchar *)lparg0);
+	rc = (jlong)gtk_check_menu_item_new_with_label((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1check_1menu_1item_1new_1with_1label_FUNC);
@@ -6704,7 +6704,7 @@
 
 #ifndef NO__1gtk_1check_1menu_1item_1set_1active
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1check_1menu_1item_1set_1active)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1check_1menu_1item_1set_1active_FUNC);
 	gtk_check_menu_item_set_active((GtkCheckMenuItem *)arg0, (gboolean)arg1);
@@ -6713,12 +6713,12 @@
 #endif
 
 #ifndef NO__1gtk_1check_1version
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1check_1version)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1check_1version)
 	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1check_1version_FUNC);
-	rc = (jint)gtk_check_version(arg0, arg1, arg2);
+	rc = (jlong)gtk_check_version(arg0, arg1, arg2);
 	OS_NATIVE_EXIT(env, that, _1gtk_1check_1version_FUNC);
 	return rc;
 }
@@ -6726,7 +6726,7 @@
 
 #ifndef NO__1gtk_1clipboard_1clear
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1clipboard_1clear)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1clipboard_1clear_FUNC);
 	gtk_clipboard_clear((GtkClipboard *)arg0);
@@ -6735,12 +6735,12 @@
 #endif
 
 #ifndef NO__1gtk_1clipboard_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1clipboard_1get)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1clipboard_1get)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1clipboard_1get_FUNC);
-	rc = (jint)gtk_clipboard_get((GdkAtom)arg0);
+	rc = (jlong)gtk_clipboard_get((GdkAtom)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1clipboard_1get_FUNC);
 	return rc;
 }
@@ -6748,7 +6748,7 @@
 
 #ifndef NO__1gtk_1clipboard_1set_1with_1data
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1clipboard_1set_1with_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlong arg3, jlong arg4, jlong arg5)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1clipboard_1set_1with_1data_FUNC);
@@ -6759,26 +6759,26 @@
 #endif
 
 #ifndef NO__1gtk_1clipboard_1wait_1for_1contents
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1clipboard_1wait_1for_1contents)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1clipboard_1wait_1for_1contents)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1clipboard_1wait_1for_1contents_FUNC);
-	rc = (jint)gtk_clipboard_wait_for_contents((GtkClipboard *)arg0, (GdkAtom)arg1);
+	rc = (jlong)gtk_clipboard_wait_for_contents((GtkClipboard *)arg0, (GdkAtom)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1clipboard_1wait_1for_1contents_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1color_1selection_1dialog_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1color_1selection_1dialog_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1color_1selection_1dialog_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1color_1selection_1dialog_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_color_selection_dialog_new((const gchar *)lparg0);
+	rc = (jlong)gtk_color_selection_dialog_new((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1color_1selection_1dialog_1new_FUNC);
@@ -6788,7 +6788,7 @@
 
 #ifndef NO__1gtk_1color_1selection_1get_1current_1color
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1color_1selection_1get_1current_1color)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1color_1selection_1get_1current_1color_FUNC);
@@ -6802,7 +6802,7 @@
 
 #ifndef NO__1gtk_1color_1selection_1set_1current_1color
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1color_1selection_1set_1current_1color)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1color_1selection_1set_1current_1color_FUNC);
@@ -6815,7 +6815,7 @@
 
 #ifndef NO__1gtk_1color_1selection_1set_1has_1palette
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1color_1selection_1set_1has_1palette)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1color_1selection_1set_1has_1palette_FUNC);
 	gtk_color_selection_set_has_palette((GtkColorSelection *)arg0, arg1);
@@ -6824,18 +6824,18 @@
 #endif
 
 #ifndef NO__1gtk_1combo_1box_1entry_1new_1text
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1combo_1box_1entry_1new_1text)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1combo_1box_1entry_1new_1text)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1entry_1new_1text_FUNC);
 /*
-	rc = (jint)gtk_combo_box_entry_new_text();
+	rc = (jlong)gtk_combo_box_entry_new_text();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6844,7 +6844,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1combo_1box_1entry_1new_1text_FUNC);
@@ -6854,7 +6854,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1get_1active
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1combo_1box_1get_1active)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1get_1active_FUNC);
@@ -6864,7 +6864,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6882,18 +6882,18 @@
 #endif
 
 #ifndef NO__1gtk_1combo_1box_1get_1model
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1combo_1box_1get_1model)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1combo_1box_1get_1model)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1get_1model_FUNC);
 /*
-	rc = (jint)gtk_combo_box_get_model(arg0);
+	rc = (jlong)gtk_combo_box_get_model(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6902,7 +6902,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1combo_1box_1get_1model_FUNC);
@@ -6912,7 +6912,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1insert_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1insert_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jbyteArray arg2)
 {
 	jbyte *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1insert_1text_FUNC);
@@ -6923,7 +6923,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, jbyte *);
+		typedef void (*FPTR)(jlong, jint, jbyte *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_insert_text_LIB, RTLD_LAZY);
@@ -6941,18 +6941,18 @@
 #endif
 
 #ifndef NO__1gtk_1combo_1box_1new_1text
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1combo_1box_1new_1text)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1combo_1box_1new_1text)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1new_1text_FUNC);
 /*
-	rc = (jint)gtk_combo_box_new_text();
+	rc = (jlong)gtk_combo_box_new_text();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -6961,7 +6961,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1combo_1box_1new_1text_FUNC);
@@ -6971,7 +6971,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1popdown
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1popdown)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1popdown_FUNC);
 /*
@@ -6980,7 +6980,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint);
+		typedef void (*FPTR)(jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_popdown_LIB, RTLD_LAZY);
@@ -6997,7 +6997,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1popup
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1popup)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1popup_FUNC);
 /*
@@ -7006,7 +7006,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint);
+		typedef void (*FPTR)(jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_popup_LIB, RTLD_LAZY);
@@ -7023,7 +7023,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1remove_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1remove_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1remove_1text_FUNC);
 /*
@@ -7032,7 +7032,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_remove_text_LIB, RTLD_LAZY);
@@ -7049,7 +7049,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1set_1active
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1set_1active)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1set_1active_FUNC);
 /*
@@ -7058,7 +7058,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_set_active_LIB, RTLD_LAZY);
@@ -7075,7 +7075,7 @@
 
 #ifndef NO__1gtk_1combo_1box_1set_1focus_1on_1click
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1box_1set_1focus_1on_1click)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1box_1set_1focus_1on_1click_FUNC);
 /*
@@ -7084,7 +7084,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jboolean);
+		typedef void (*FPTR)(jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_combo_box_set_focus_on_click_LIB, RTLD_LAZY);
@@ -7101,7 +7101,7 @@
 
 #ifndef NO__1gtk_1combo_1disable_1activate
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1disable_1activate)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1disable_1activate_FUNC);
 	gtk_combo_disable_activate((GtkCombo *)arg0);
@@ -7110,12 +7110,12 @@
 #endif
 
 #ifndef NO__1gtk_1combo_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1combo_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1combo_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1new_FUNC);
-	rc = (jint)gtk_combo_new();
+	rc = (jlong)gtk_combo_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1combo_1new_FUNC);
 	return rc;
 }
@@ -7123,7 +7123,7 @@
 
 #ifndef NO__1gtk_1combo_1set_1case_1sensitive
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1set_1case_1sensitive)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1set_1case_1sensitive_FUNC);
 	gtk_combo_set_case_sensitive((GtkCombo *)arg0, (gboolean)arg1);
@@ -7133,7 +7133,7 @@
 
 #ifndef NO__1gtk_1combo_1set_1popdown_1strings
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1combo_1set_1popdown_1strings)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1combo_1set_1popdown_1strings_FUNC);
 	gtk_combo_set_popdown_strings((GtkCombo *)arg0, (GList *)arg1);
@@ -7143,7 +7143,7 @@
 
 #ifndef NO__1gtk_1container_1add
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1container_1add)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1add_FUNC);
 	gtk_container_add((GtkContainer *)arg0, (GtkWidget *)arg1);
@@ -7153,7 +7153,7 @@
 
 #ifndef NO__1gtk_1container_1forall
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1container_1forall)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1forall_FUNC);
 	gtk_container_forall((GtkContainer *)arg0, (GtkCallback)arg1, (gpointer)arg2);
@@ -7163,7 +7163,7 @@
 
 #ifndef NO__1gtk_1container_1get_1border_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1container_1get_1border_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1get_1border_1width_FUNC);
@@ -7174,12 +7174,12 @@
 #endif
 
 #ifndef NO__1gtk_1container_1get_1children
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1container_1get_1children)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1container_1get_1children)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1get_1children_FUNC);
-	rc = (jint)gtk_container_get_children((GtkContainer *)arg0);
+	rc = (jlong)gtk_container_get_children((GtkContainer *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1container_1get_1children_FUNC);
 	return rc;
 }
@@ -7187,7 +7187,7 @@
 
 #ifndef NO__1gtk_1container_1remove
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1container_1remove)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1remove_FUNC);
 	gtk_container_remove((GtkContainer *)arg0, (GtkWidget *)arg1);
@@ -7197,7 +7197,7 @@
 
 #ifndef NO__1gtk_1container_1resize_1children
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1container_1resize_1children)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1resize_1children_FUNC);
 	gtk_container_resize_children((GtkContainer *)arg0);
@@ -7207,7 +7207,7 @@
 
 #ifndef NO__1gtk_1container_1set_1border_1width
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1container_1set_1border_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1container_1set_1border_1width_FUNC);
 	gtk_container_set_border_width((GtkContainer *)arg0, (guint)arg1);
@@ -7216,14 +7216,14 @@
 #endif
 
 #ifndef NO__1gtk_1dialog_1add_1button
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1dialog_1add_1button)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1dialog_1add_1button)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1dialog_1add_1button_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_dialog_add_button((GtkDialog *)arg0, (const gchar *)lparg1, (gint)arg2);
+	rc = (jlong)gtk_dialog_add_button((GtkDialog *)arg0, (const gchar *)lparg1, (gint)arg2);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1dialog_1add_1button_FUNC);
@@ -7233,7 +7233,7 @@
 
 #ifndef NO__1gtk_1dialog_1run
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1dialog_1run)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1dialog_1run_FUNC);
@@ -7244,12 +7244,12 @@
 #endif
 
 #ifndef NO__1gtk_1drag_1begin
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1drag_1begin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1drag_1begin)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jlong arg4)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1begin_FUNC);
-	rc = (jint)gtk_drag_begin((GtkWidget *)arg0, (GtkTargetList *)arg1, (GdkDragAction)arg2, (gint)arg3, (GdkEvent *)arg4);
+	rc = (jlong)gtk_drag_begin((GtkWidget *)arg0, (GtkTargetList *)arg1, (GdkDragAction)arg2, (gint)arg3, (GdkEvent *)arg4);
 	OS_NATIVE_EXIT(env, that, _1gtk_1drag_1begin_FUNC);
 	return rc;
 }
@@ -7257,7 +7257,7 @@
 
 #ifndef NO__1gtk_1drag_1check_1threshold
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1drag_1check_1threshold)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jint arg4)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1check_1threshold_FUNC);
@@ -7268,12 +7268,12 @@
 #endif
 
 #ifndef NO__1gtk_1drag_1dest_1find_1target
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1drag_1dest_1find_1target)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1drag_1dest_1find_1target)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1dest_1find_1target_FUNC);
-	rc = (jint)gtk_drag_dest_find_target((GtkWidget *)arg0, (GdkDragContext *)arg1, (GtkTargetList *)arg2);
+	rc = (jlong)gtk_drag_dest_find_target((GtkWidget *)arg0, (GdkDragContext *)arg1, (GtkTargetList *)arg2);
 	OS_NATIVE_EXIT(env, that, _1gtk_1drag_1dest_1find_1target_FUNC);
 	return rc;
 }
@@ -7281,7 +7281,7 @@
 
 #ifndef NO__1gtk_1drag_1dest_1set
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1drag_1dest_1set)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jint arg3, jint arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1dest_1set_FUNC);
 	gtk_drag_dest_set((GtkWidget *)arg0, (GtkDestDefaults)arg1, (const GtkTargetEntry *)arg2, (gint)arg3, (GdkDragAction)arg4);
@@ -7291,7 +7291,7 @@
 
 #ifndef NO__1gtk_1drag_1dest_1unset
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1drag_1dest_1unset)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1dest_1unset_FUNC);
 	gtk_drag_dest_unset((GtkWidget *)arg0);
@@ -7301,7 +7301,7 @@
 
 #ifndef NO__1gtk_1drag_1finish
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1drag_1finish)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1, jboolean arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1, jboolean arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1finish_FUNC);
 	gtk_drag_finish((GdkDragContext *)arg0, (gboolean)arg1, (gboolean)arg2, (guint32)arg3);
@@ -7311,7 +7311,7 @@
 
 #ifndef NO__1gtk_1drag_1get_1data
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1drag_1get_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1get_1data_FUNC);
 	gtk_drag_get_data((GtkWidget *)arg0, (GdkDragContext *)arg1, (GdkAtom)arg2, (guint32)arg3);
@@ -7321,7 +7321,7 @@
 
 #ifndef NO__1gtk_1drag_1set_1icon_1pixbuf
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1drag_1set_1icon_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1drag_1set_1icon_1pixbuf_FUNC);
 	gtk_drag_set_icon_pixbuf((GdkDragContext *)arg0, (GdkPixbuf *)arg1, arg2, arg3);
@@ -7330,12 +7330,12 @@
 #endif
 
 #ifndef NO__1gtk_1drawing_1area_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1drawing_1area_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1drawing_1area_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1drawing_1area_1new_FUNC);
-	rc = (jint)gtk_drawing_area_new();
+	rc = (jlong)gtk_drawing_area_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1drawing_1area_1new_FUNC);
 	return rc;
 }
@@ -7343,7 +7343,7 @@
 
 #ifndef NO__1gtk_1editable_1copy_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1copy_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1copy_1clipboard_FUNC);
 	gtk_editable_copy_clipboard((GtkEditable *)arg0);
@@ -7353,7 +7353,7 @@
 
 #ifndef NO__1gtk_1editable_1cut_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1cut_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1cut_1clipboard_FUNC);
 	gtk_editable_cut_clipboard((GtkEditable *)arg0);
@@ -7363,7 +7363,7 @@
 
 #ifndef NO__1gtk_1editable_1delete_1selection
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1delete_1selection)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1delete_1selection_FUNC);
 	gtk_editable_delete_selection((GtkEditable *)arg0);
@@ -7373,7 +7373,7 @@
 
 #ifndef NO__1gtk_1editable_1delete_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1delete_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1delete_1text_FUNC);
 	gtk_editable_delete_text((GtkEditable *)arg0, (gint)arg1, (gint)arg2);
@@ -7382,12 +7382,12 @@
 #endif
 
 #ifndef NO__1gtk_1editable_1get_1chars
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1editable_1get_1chars)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1editable_1get_1chars)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1get_1chars_FUNC);
-	rc = (jint)gtk_editable_get_chars((GtkEditable *)arg0, (gint)arg1, (gint)arg2);
+	rc = (jlong)gtk_editable_get_chars((GtkEditable *)arg0, (gint)arg1, (gint)arg2);
 	OS_NATIVE_EXIT(env, that, _1gtk_1editable_1get_1chars_FUNC);
 	return rc;
 }
@@ -7395,7 +7395,7 @@
 
 #ifndef NO__1gtk_1editable_1get_1editable
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1editable_1get_1editable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1get_1editable_FUNC);
@@ -7407,7 +7407,7 @@
 
 #ifndef NO__1gtk_1editable_1get_1position
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1editable_1get_1position)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1get_1position_FUNC);
@@ -7419,7 +7419,7 @@
 
 #ifndef NO__1gtk_1editable_1get_1selection_1bounds
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1editable_1get_1selection_1bounds)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -7438,7 +7438,7 @@
 
 #ifndef NO__1gtk_1editable_1insert_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1insert_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jintArray arg3)
 {
 	jbyte *lparg1=NULL;
 	jint *lparg3=NULL;
@@ -7455,7 +7455,7 @@
 
 #ifndef NO__1gtk_1editable_1paste_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1paste_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1paste_1clipboard_FUNC);
 	gtk_editable_paste_clipboard((GtkEditable *)arg0);
@@ -7465,7 +7465,7 @@
 
 #ifndef NO__1gtk_1editable_1select_1region
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1select_1region)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1select_1region_FUNC);
 	gtk_editable_select_region((GtkEditable *)arg0, (gint)arg1, (gint)arg2);
@@ -7475,7 +7475,7 @@
 
 #ifndef NO__1gtk_1editable_1set_1editable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1set_1editable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1set_1editable_FUNC);
 	gtk_editable_set_editable((GtkEditable *)arg0, (gboolean)arg1);
@@ -7485,7 +7485,7 @@
 
 #ifndef NO__1gtk_1editable_1set_1position
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1editable_1set_1position)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1editable_1set_1position_FUNC);
 	gtk_editable_set_position((GtkEditable *)arg0, (gint)arg1);
@@ -7495,7 +7495,7 @@
 
 #ifndef NO__1gtk_1entry_1get_1invisible_1char
 JNIEXPORT jchar JNICALL OS_NATIVE(_1gtk_1entry_1get_1invisible_1char)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jchar rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1get_1invisible_1char_FUNC);
@@ -7506,12 +7506,12 @@
 #endif
 
 #ifndef NO__1gtk_1entry_1get_1layout
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1entry_1get_1layout)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1entry_1get_1layout)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1get_1layout_FUNC);
-	rc = (jint)gtk_entry_get_layout((GtkEntry *)arg0);
+	rc = (jlong)gtk_entry_get_layout((GtkEntry *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1entry_1get_1layout_FUNC);
 	return rc;
 }
@@ -7519,7 +7519,7 @@
 
 #ifndef NO__1gtk_1entry_1get_1layout_1offsets
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1get_1layout_1offsets)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -7536,7 +7536,7 @@
 
 #ifndef NO__1gtk_1entry_1get_1max_1length
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1entry_1get_1max_1length)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1get_1max_1length_FUNC);
@@ -7547,12 +7547,12 @@
 #endif
 
 #ifndef NO__1gtk_1entry_1get_1text
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1entry_1get_1text)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1entry_1get_1text)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1get_1text_FUNC);
-	rc = (jint)gtk_entry_get_text((GtkEntry *)arg0);
+	rc = (jlong)gtk_entry_get_text((GtkEntry *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1entry_1get_1text_FUNC);
 	return rc;
 }
@@ -7560,7 +7560,7 @@
 
 #ifndef NO__1gtk_1entry_1get_1visibility
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1entry_1get_1visibility)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1get_1visibility_FUNC);
@@ -7571,12 +7571,12 @@
 #endif
 
 #ifndef NO__1gtk_1entry_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1entry_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1entry_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1new_FUNC);
-	rc = (jint)gtk_entry_new();
+	rc = (jlong)gtk_entry_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1entry_1new_FUNC);
 	return rc;
 }
@@ -7584,7 +7584,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1activates_1default
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1activates_1default)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1activates_1default_FUNC);
 	gtk_entry_set_activates_default((GtkEntry *)arg0, (gboolean)arg1);
@@ -7594,7 +7594,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1alignment
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1alignment)
-	(JNIEnv *env, jclass that, jint arg0, jfloat arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jfloat arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1alignment_FUNC);
 /*
@@ -7620,7 +7620,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1has_1frame
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1has_1frame)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1has_1frame_FUNC);
 	gtk_entry_set_has_frame((GtkEntry *)arg0, (gboolean)arg1);
@@ -7630,7 +7630,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1invisible_1char
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1invisible_1char)
-	(JNIEnv *env, jclass that, jint arg0, jchar arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jchar arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1invisible_1char_FUNC);
 	gtk_entry_set_invisible_char((GtkEntry *)arg0, (gint)arg1);
@@ -7640,7 +7640,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1max_1length
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1max_1length)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1max_1length_FUNC);
 	gtk_entry_set_max_length((GtkEntry *)arg0, (gint)arg1);
@@ -7650,7 +7650,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1text_FUNC);
@@ -7664,7 +7664,7 @@
 
 #ifndef NO__1gtk_1entry_1set_1visibility
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1entry_1set_1visibility)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1set_1visibility_FUNC);
 	gtk_entry_set_visibility((GtkEntry *)arg0, (gboolean)arg1);
@@ -7674,7 +7674,7 @@
 
 #ifndef NO__1gtk_1entry_1text_1index_1to_1layout_1index
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1entry_1text_1index_1to_1layout_1index)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1entry_1text_1index_1to_1layout_1index_FUNC);
@@ -7684,7 +7684,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, jint);
+		typedef jint (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7703,7 +7703,7 @@
 
 #ifndef NO__1gtk_1enumerate_1printers
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1enumerate_1printers)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jboolean arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1enumerate_1printers_FUNC);
 /*
@@ -7712,7 +7712,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, gpointer, GDestroyNotify, gboolean);
+		typedef void (*FPTR)(jlong, gpointer, GDestroyNotify, gboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_enumerate_printers_LIB, RTLD_LAZY);
@@ -7741,7 +7741,7 @@
 
 #ifndef NO__1gtk_1expander_1get_1expanded
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1expander_1get_1expanded)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1get_1expanded_FUNC);
@@ -7751,7 +7751,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint);
+		typedef jboolean (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7769,18 +7769,18 @@
 #endif
 
 #ifndef NO__1gtk_1expander_1get_1label_1widget
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1expander_1get_1label_1widget)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1expander_1get_1label_1widget)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1get_1label_1widget_FUNC);
 /*
-	rc = (jint)gtk_expander_get_label_widget(arg0);
+	rc = (jlong)gtk_expander_get_label_widget(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7789,7 +7789,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1expander_1get_1label_1widget_FUNC);
@@ -7798,20 +7798,20 @@
 #endif
 
 #ifndef NO__1gtk_1expander_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1expander_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1expander_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_expander_new((const gchar *)lparg0);
+	rc = (jlong)gtk_expander_new((const gchar *)lparg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(const gchar *);
+		typedef jlong (*FPTR)(const gchar *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7820,7 +7820,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((const gchar *)lparg0);
+			rc = (jlong)(*fptr)((const gchar *)lparg0);
 		}
 	}
 fail:
@@ -7832,7 +7832,7 @@
 
 #ifndef NO__1gtk_1expander_1set_1expanded
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1expander_1set_1expanded)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1set_1expanded_FUNC);
 /*
@@ -7841,7 +7841,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jboolean);
+		typedef void (*FPTR)(jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_expander_set_expanded_LIB, RTLD_LAZY);
@@ -7858,7 +7858,7 @@
 
 #ifndef NO__1gtk_1expander_1set_1label
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1expander_1set_1label)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1set_1label_FUNC);
@@ -7869,7 +7869,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, const gchar *);
+		typedef void (*FPTR)(jlong, const gchar *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_expander_set_label_LIB, RTLD_LAZY);
@@ -7888,7 +7888,7 @@
 
 #ifndef NO__1gtk_1expander_1set_1label_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1expander_1set_1label_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1expander_1set_1label_1widget_FUNC);
 /*
@@ -7897,7 +7897,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_expander_set_label_widget_LIB, RTLD_LAZY);
@@ -7914,7 +7914,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1add_1filter
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1add_1filter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1add_1filter_FUNC);
 /*
@@ -7923,7 +7923,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_add_filter_LIB, RTLD_LAZY);
@@ -7939,18 +7939,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1chooser_1get_1current_1folder
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1current_1folder)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1current_1folder)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1get_1current_1folder_FUNC);
 /*
-	rc = (jint)gtk_file_chooser_get_current_folder(arg0);
+	rc = (jlong)gtk_file_chooser_get_current_folder(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7959,7 +7959,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1chooser_1get_1current_1folder_FUNC);
@@ -7968,18 +7968,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1chooser_1get_1filename
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filename)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filename)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1get_1filename_FUNC);
 /*
-	rc = (jint)gtk_file_chooser_get_filename(arg0);
+	rc = (jlong)gtk_file_chooser_get_filename(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -7988,7 +7988,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1chooser_1get_1filename_FUNC);
@@ -7997,18 +7997,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1chooser_1get_1filenames
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filenames)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filenames)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1get_1filenames_FUNC);
 /*
-	rc = (jint)gtk_file_chooser_get_filenames(arg0);
+	rc = (jlong)gtk_file_chooser_get_filenames(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -8017,7 +8017,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1chooser_1get_1filenames_FUNC);
@@ -8026,18 +8026,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1chooser_1get_1filter
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filter)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1chooser_1get_1filter)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1get_1filter_FUNC);
 /*
-	rc = (jint)gtk_file_chooser_get_filter(arg0);
+	rc = (jlong)gtk_file_chooser_get_filter(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -8046,7 +8046,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1chooser_1get_1filter_FUNC);
@@ -8056,7 +8056,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1current_1folder
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1current_1folder)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1current_1folder_FUNC);
 /*
@@ -8065,7 +8065,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_current_folder_LIB, RTLD_LAZY);
@@ -8082,7 +8082,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1current_1name
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1current_1name)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1current_1name_FUNC);
@@ -8093,7 +8093,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jbyte *);
+		typedef void (*FPTR)(jlong, jbyte *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_current_name_LIB, RTLD_LAZY);
@@ -8112,7 +8112,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1do_1overwrite_1confirmation
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1do_1overwrite_1confirmation)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1do_1overwrite_1confirmation_FUNC);
 /*
@@ -8121,7 +8121,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jboolean);
+		typedef void (*FPTR)(jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_do_overwrite_confirmation_LIB, RTLD_LAZY);
@@ -8138,7 +8138,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1extra_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1extra_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1extra_1widget_FUNC);
 /*
@@ -8147,7 +8147,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_extra_widget_LIB, RTLD_LAZY);
@@ -8164,7 +8164,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1filename
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1filename)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1filename_FUNC);
 /*
@@ -8173,7 +8173,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_filename_LIB, RTLD_LAZY);
@@ -8190,7 +8190,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1filter
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1filter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1filter_FUNC);
 /*
@@ -8199,7 +8199,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_filter_LIB, RTLD_LAZY);
@@ -8216,7 +8216,7 @@
 
 #ifndef NO__1gtk_1file_1chooser_1set_1select_1multiple
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1chooser_1set_1select_1multiple)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1chooser_1set_1select_1multiple_FUNC);
 /*
@@ -8225,7 +8225,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jboolean);
+		typedef void (*FPTR)(jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_chooser_set_select_multiple_LIB, RTLD_LAZY);
@@ -8242,7 +8242,7 @@
 
 #ifndef NO__1gtk_1file_1filter_1add_1pattern
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1filter_1add_1pattern)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1filter_1add_1pattern_FUNC);
@@ -8253,7 +8253,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jbyte *);
+		typedef void (*FPTR)(jlong, jbyte *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_filter_add_pattern_LIB, RTLD_LAZY);
@@ -8271,18 +8271,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1filter_1get_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1filter_1get_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1filter_1get_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1filter_1get_1name_FUNC);
 /*
-	rc = (jint)gtk_file_filter_get_name(arg0);
+	rc = (jlong)gtk_file_filter_get_name(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -8291,7 +8291,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1filter_1get_1name_FUNC);
@@ -8300,18 +8300,18 @@
 #endif
 
 #ifndef NO__1gtk_1file_1filter_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1filter_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1filter_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1filter_1new_FUNC);
 /*
-	rc = (jint)gtk_file_filter_new();
+	rc = (jlong)gtk_file_filter_new();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -8320,7 +8320,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1filter_1new_FUNC);
@@ -8330,7 +8330,7 @@
 
 #ifndef NO__1gtk_1file_1filter_1set_1name
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1filter_1set_1name)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1filter_1set_1name_FUNC);
@@ -8341,7 +8341,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jbyte *);
+		typedef void (*FPTR)(jlong, jbyte *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_file_filter_set_name_LIB, RTLD_LAZY);
@@ -8359,24 +8359,24 @@
 #endif
 
 #ifndef NO__1gtk_1file_1selection_1get_1filename
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1selection_1get_1filename)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1selection_1get_1filename)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1get_1filename_FUNC);
-	rc = (jint)gtk_file_selection_get_filename((GtkFileSelection *)arg0);
+	rc = (jlong)gtk_file_selection_get_filename((GtkFileSelection *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1selection_1get_1filename_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1file_1selection_1get_1selections
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1selection_1get_1selections)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1selection_1get_1selections)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1get_1selections_FUNC);
-	rc = (jint)gtk_file_selection_get_selections((GtkFileSelection *)arg0);
+	rc = (jlong)gtk_file_selection_get_selections((GtkFileSelection *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1selection_1get_1selections_FUNC);
 	return rc;
 }
@@ -8384,7 +8384,7 @@
 
 #ifndef NO__1gtk_1file_1selection_1hide_1fileop_1buttons
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1selection_1hide_1fileop_1buttons)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1hide_1fileop_1buttons_FUNC);
 	gtk_file_selection_hide_fileop_buttons((GtkFileSelection *)arg0);
@@ -8393,14 +8393,14 @@
 #endif
 
 #ifndef NO__1gtk_1file_1selection_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1file_1selection_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1file_1selection_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_file_selection_new((const gchar *)lparg0);
+	rc = (jlong)gtk_file_selection_new((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1file_1selection_1new_FUNC);
@@ -8410,7 +8410,7 @@
 
 #ifndef NO__1gtk_1file_1selection_1set_1filename
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1selection_1set_1filename)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1set_1filename_FUNC);
 	gtk_file_selection_set_filename((GtkFileSelection *)arg0, (const gchar *)arg1);
@@ -8420,7 +8420,7 @@
 
 #ifndef NO__1gtk_1file_1selection_1set_1select_1multiple
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1file_1selection_1set_1select_1multiple)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1file_1selection_1set_1select_1multiple_FUNC);
 	gtk_file_selection_set_select_multiple((GtkFileSelection *)arg0, (gboolean)arg1);
@@ -8430,7 +8430,7 @@
 
 #ifndef NO__1gtk_1fixed_1move
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1fixed_1move)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1fixed_1move_FUNC);
 	gtk_fixed_move((GtkFixed *)arg0, (GtkWidget *)arg1, (gint)arg2, (gint)arg3);
@@ -8439,12 +8439,12 @@
 #endif
 
 #ifndef NO__1gtk_1fixed_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1fixed_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1fixed_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1fixed_1new_FUNC);
-	rc = (jint)gtk_fixed_new();
+	rc = (jlong)gtk_fixed_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1fixed_1new_FUNC);
 	return rc;
 }
@@ -8452,7 +8452,7 @@
 
 #ifndef NO__1gtk_1fixed_1set_1has_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1fixed_1set_1has_1window)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1fixed_1set_1has_1window_FUNC);
 	gtk_fixed_set_has_window((GtkFixed *)arg0, (gboolean)arg1);
@@ -8461,26 +8461,26 @@
 #endif
 
 #ifndef NO__1gtk_1font_1selection_1dialog_1get_1font_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1font_1selection_1dialog_1get_1font_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1font_1selection_1dialog_1get_1font_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1font_1selection_1dialog_1get_1font_1name_FUNC);
-	rc = (jint)gtk_font_selection_dialog_get_font_name((GtkFontSelectionDialog *)arg0);
+	rc = (jlong)gtk_font_selection_dialog_get_font_name((GtkFontSelectionDialog *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1font_1selection_1dialog_1get_1font_1name_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1font_1selection_1dialog_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1font_1selection_1dialog_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1font_1selection_1dialog_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1font_1selection_1dialog_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_font_selection_dialog_new((const gchar *)lparg0);
+	rc = (jlong)gtk_font_selection_dialog_new((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1font_1selection_1dialog_1new_FUNC);
@@ -8490,7 +8490,7 @@
 
 #ifndef NO__1gtk_1font_1selection_1dialog_1set_1font_1name
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1font_1selection_1dialog_1set_1font_1name)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	jboolean rc = 0;
@@ -8505,26 +8505,26 @@
 #endif
 
 #ifndef NO__1gtk_1frame_1get_1label_1widget
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1frame_1get_1label_1widget)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1frame_1get_1label_1widget)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1frame_1get_1label_1widget_FUNC);
-	rc = (jint)gtk_frame_get_label_widget((GtkFrame *)arg0);
+	rc = (jlong)gtk_frame_get_label_widget((GtkFrame *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1frame_1get_1label_1widget_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1frame_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1frame_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1frame_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1frame_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_frame_new((const gchar *)lparg0);
+	rc = (jlong)gtk_frame_new((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1frame_1new_FUNC);
@@ -8534,7 +8534,7 @@
 
 #ifndef NO__1gtk_1frame_1set_1label
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1frame_1set_1label)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1frame_1set_1label_FUNC);
@@ -8548,7 +8548,7 @@
 
 #ifndef NO__1gtk_1frame_1set_1label_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1frame_1set_1label_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1frame_1set_1label_1widget_FUNC);
 	gtk_frame_set_label_widget((GtkFrame *)arg0, (GtkWidget *)arg1);
@@ -8558,7 +8558,7 @@
 
 #ifndef NO__1gtk_1frame_1set_1shadow_1type
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1frame_1set_1shadow_1type)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1frame_1set_1shadow_1type_FUNC);
 	gtk_frame_set_shadow_type((GtkFrame *)arg0, (GtkShadowType)arg1);
@@ -8567,12 +8567,12 @@
 #endif
 
 #ifndef NO__1gtk_1get_1current_1event
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1get_1current_1event)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1get_1current_1event)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1get_1current_1event_FUNC);
-	rc = (jint)gtk_get_current_event();
+	rc = (jlong)gtk_get_current_event();
 	OS_NATIVE_EXIT(env, that, _1gtk_1get_1current_1event_FUNC);
 	return rc;
 }
@@ -8607,24 +8607,24 @@
 #endif
 
 #ifndef NO__1gtk_1get_1default_1language
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1get_1default_1language)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1get_1default_1language)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1get_1default_1language_FUNC);
-	rc = (jint)gtk_get_default_language();
+	rc = (jlong)gtk_get_default_language();
 	OS_NATIVE_EXIT(env, that, _1gtk_1get_1default_1language_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1get_1event_1widget
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1get_1event_1widget)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1get_1event_1widget)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1get_1event_1widget_FUNC);
-	rc = (jint)gtk_get_event_widget((GdkEvent *)arg0);
+	rc = (jlong)gtk_get_event_widget((GdkEvent *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1get_1event_1widget_FUNC);
 	return rc;
 }
@@ -8632,7 +8632,7 @@
 
 #ifndef NO__1gtk_1grab_1add
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1grab_1add)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1grab_1add_FUNC);
 	gtk_grab_add((GtkWidget *)arg0);
@@ -8641,12 +8641,12 @@
 #endif
 
 #ifndef NO__1gtk_1grab_1get_1current
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1grab_1get_1current)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1grab_1get_1current)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1grab_1get_1current_FUNC);
-	rc = (jint)gtk_grab_get_current();
+	rc = (jlong)gtk_grab_get_current();
 	OS_NATIVE_EXIT(env, that, _1gtk_1grab_1get_1current_FUNC);
 	return rc;
 }
@@ -8654,7 +8654,7 @@
 
 #ifndef NO__1gtk_1grab_1remove
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1grab_1remove)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1grab_1remove_FUNC);
 	gtk_grab_remove((GtkWidget *)arg0);
@@ -8663,62 +8663,62 @@
 #endif
 
 #ifndef NO__1gtk_1hbox_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1hbox_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1hbox_1new)
 	(JNIEnv *env, jclass that, jboolean arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1hbox_1new_FUNC);
-	rc = (jint)gtk_hbox_new((gboolean)arg0, (gint)arg1);
+	rc = (jlong)gtk_hbox_new((gboolean)arg0, (gint)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1hbox_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1hscale_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1hscale_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1hscale_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1hscale_1new_FUNC);
-	rc = (jint)gtk_hscale_new((GtkAdjustment *)arg0);
+	rc = (jlong)gtk_hscale_new((GtkAdjustment *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1hscale_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1hscrollbar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1hscrollbar_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1hscrollbar_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1hscrollbar_1new_FUNC);
-	rc = (jint)gtk_hscrollbar_new((GtkAdjustment *)arg0);
+	rc = (jlong)gtk_hscrollbar_new((GtkAdjustment *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1hscrollbar_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1hseparator_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1hseparator_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1hseparator_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1hseparator_1new_FUNC);
-	rc = (jint)gtk_hseparator_new();
+	rc = (jlong)gtk_hseparator_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1hseparator_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1icon_1factory_1lookup_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1icon_1factory_1lookup_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1icon_1factory_1lookup_1default)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1icon_1factory_1lookup_1default_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_icon_factory_lookup_default((const gchar *)lparg0);
+	rc = (jlong)gtk_icon_factory_lookup_default((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1icon_1factory_1lookup_1default_FUNC);
@@ -8727,12 +8727,12 @@
 #endif
 
 #ifndef NO__1gtk_1icon_1set_1render_1icon
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1icon_1set_1render_1icon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1icon_1set_1render_1icon)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jlong arg5, jlong arg6)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1icon_1set_1render_1icon_FUNC);
-	rc = (jint)gtk_icon_set_render_icon((GtkIconSet *)arg0, (GtkStyle *)arg1, (GtkTextDirection)arg2, (GtkStateType)arg3, (GtkIconSize)arg4, (GtkWidget *)arg5, (const char *)arg6);
+	rc = (jlong)gtk_icon_set_render_icon((GtkIconSet *)arg0, (GtkStyle *)arg1, (GtkTextDirection)arg2, (GtkStateType)arg3, (GtkIconSize)arg4, (GtkWidget *)arg5, (const char *)arg6);
 	OS_NATIVE_EXIT(env, that, _1gtk_1icon_1set_1render_1icon_FUNC);
 	return rc;
 }
@@ -8740,7 +8740,7 @@
 
 #ifndef NO__1gtk_1icon_1source_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1icon_1source_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1icon_1source_1free_FUNC);
 	gtk_icon_source_free((GtkIconSource *)arg0);
@@ -8749,12 +8749,12 @@
 #endif
 
 #ifndef NO__1gtk_1icon_1source_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1icon_1source_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1icon_1source_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1icon_1source_1new_FUNC);
-	rc = (jint)gtk_icon_source_new();
+	rc = (jlong)gtk_icon_source_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1icon_1source_1new_FUNC);
 	return rc;
 }
@@ -8762,7 +8762,7 @@
 
 #ifndef NO__1gtk_1icon_1source_1set_1pixbuf
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1icon_1source_1set_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1icon_1source_1set_1pixbuf_FUNC);
 	gtk_icon_source_set_pixbuf((GtkIconSource *)arg0, (GdkPixbuf *)arg1);
@@ -8772,7 +8772,7 @@
 
 #ifndef NO__1gtk_1im_1context_1filter_1keypress
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1im_1context_1filter_1keypress)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1filter_1keypress_FUNC);
@@ -8784,7 +8784,7 @@
 
 #ifndef NO__1gtk_1im_1context_1focus_1in
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1focus_1in)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1focus_1in_FUNC);
 	gtk_im_context_focus_in((GtkIMContext *)arg0);
@@ -8794,7 +8794,7 @@
 
 #ifndef NO__1gtk_1im_1context_1focus_1out
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1focus_1out)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1focus_1out_FUNC);
 	gtk_im_context_focus_out((GtkIMContext *)arg0);
@@ -8804,31 +8804,31 @@
 
 #ifndef NO__1gtk_1im_1context_1get_1preedit_1string
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1get_1preedit_1string)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlongArray arg2, jintArray arg3)
 {
-	jint *lparg1=NULL;
-	jint *lparg2=NULL;
+	jlong *lparg1=NULL;
+	jlong *lparg2=NULL;
 	jint *lparg3=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1get_1preedit_1string_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gtk_im_context_get_preedit_string((GtkIMContext *)arg0, (gchar **)lparg1, (PangoAttrList **)lparg2, (gint *)lparg3);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1im_1context_1get_1preedit_1string_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1im_1context_1get_1type
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1im_1context_1get_1type)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1im_1context_1get_1type)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1get_1type_FUNC);
-	rc = (jint)gtk_im_context_get_type();
+	rc = (jlong)gtk_im_context_get_type();
 	OS_NATIVE_EXIT(env, that, _1gtk_1im_1context_1get_1type_FUNC);
 	return rc;
 }
@@ -8836,7 +8836,7 @@
 
 #ifndef NO__1gtk_1im_1context_1reset
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1reset)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1reset_FUNC);
 	gtk_im_context_reset((GtkIMContext *)arg0);
@@ -8846,7 +8846,7 @@
 
 #ifndef NO__1gtk_1im_1context_1set_1client_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1set_1client_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1set_1client_1window_FUNC);
 	gtk_im_context_set_client_window((GtkIMContext *)arg0, (GdkWindow *)arg1);
@@ -8856,7 +8856,7 @@
 
 #ifndef NO__1gtk_1im_1context_1set_1cursor_1location
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1context_1set_1cursor_1location)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1context_1set_1cursor_1location_FUNC);
@@ -8869,7 +8869,7 @@
 
 #ifndef NO__1gtk_1im_1multicontext_1append_1menuitems
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1im_1multicontext_1append_1menuitems)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1multicontext_1append_1menuitems_FUNC);
 	gtk_im_multicontext_append_menuitems((GtkIMMulticontext *)arg0, (GtkMenuShell *)arg1);
@@ -8878,26 +8878,26 @@
 #endif
 
 #ifndef NO__1gtk_1im_1multicontext_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1im_1multicontext_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1im_1multicontext_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1im_1multicontext_1new_FUNC);
-	rc = (jint)gtk_im_multicontext_new();
+	rc = (jlong)gtk_im_multicontext_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1im_1multicontext_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1image_1menu_1item_1new_1with_1label
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1image_1menu_1item_1new_1with_1label)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1image_1menu_1item_1new_1with_1label)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1menu_1item_1new_1with_1label_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_image_menu_item_new_with_label((const gchar *)lparg0);
+	rc = (jlong)gtk_image_menu_item_new_with_label((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1image_1menu_1item_1new_1with_1label_FUNC);
@@ -8907,7 +8907,7 @@
 
 #ifndef NO__1gtk_1image_1menu_1item_1set_1image
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1image_1menu_1item_1set_1image)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1menu_1item_1set_1image_FUNC);
 	gtk_image_menu_item_set_image((GtkImageMenuItem *)arg0, (GtkWidget *)arg1);
@@ -8916,36 +8916,36 @@
 #endif
 
 #ifndef NO__1gtk_1image_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1image_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1image_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1new_FUNC);
-	rc = (jint)gtk_image_new();
+	rc = (jlong)gtk_image_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1image_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1image_1new_1from_1pixbuf
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1image_1new_1from_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1image_1new_1from_1pixbuf)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1new_1from_1pixbuf_FUNC);
-	rc = (jint)gtk_image_new_from_pixbuf((GdkPixbuf *)arg0);
+	rc = (jlong)gtk_image_new_from_pixbuf((GdkPixbuf *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1image_1new_1from_1pixbuf_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1image_1new_1from_1pixmap
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1image_1new_1from_1pixmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1image_1new_1from_1pixmap)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1new_1from_1pixmap_FUNC);
-	rc = (jint)gtk_image_new_from_pixmap((GdkPixmap *)arg0, (GdkBitmap *)arg1);
+	rc = (jlong)gtk_image_new_from_pixmap((GdkPixmap *)arg0, (GdkBitmap *)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1image_1new_1from_1pixmap_FUNC);
 	return rc;
 }
@@ -8953,7 +8953,7 @@
 
 #ifndef NO__1gtk_1image_1set_1from_1pixbuf
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1image_1set_1from_1pixbuf)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1set_1from_1pixbuf_FUNC);
 	gtk_image_set_from_pixbuf((GtkImage *)arg0, (GdkPixbuf *)arg1);
@@ -8963,7 +8963,7 @@
 
 #ifndef NO__1gtk_1image_1set_1from_1pixmap
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1image_1set_1from_1pixmap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1image_1set_1from_1pixmap_FUNC);
 	gtk_image_set_from_pixmap((GtkImage *)arg0, (GdkBitmap *)arg1, (GdkBitmap *)arg2);
@@ -8973,30 +8973,30 @@
 
 #ifndef NO__1gtk_1init_1check
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1init_1check)
-	(JNIEnv *env, jclass that, jintArray arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlongArray arg0, jlongArray arg1)
 {
-	jint *lparg0=NULL;
-	jint *lparg1=NULL;
+	jlong *lparg0=NULL;
+	jlong *lparg1=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1init_1check_FUNC);
-	if (arg0) if ((lparg0 = (*env)->GetIntArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg0) if ((lparg0 = (*env)->GetLongArrayElements(env, arg0, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	rc = (jboolean)gtk_init_check((int *)lparg0, (char ***)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
-	if (arg0 && lparg0) (*env)->ReleaseIntArrayElements(env, arg0, lparg0, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
+	if (arg0 && lparg0) (*env)->ReleaseLongArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1init_1check_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1label_1get_1layout
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1label_1get_1layout)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1label_1get_1layout)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1get_1layout_FUNC);
-	rc = (jint)gtk_label_get_layout((GtkLabel *)arg0);
+	rc = (jlong)gtk_label_get_layout((GtkLabel *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1label_1get_1layout_FUNC);
 	return rc;
 }
@@ -9004,7 +9004,7 @@
 
 #ifndef NO__1gtk_1label_1get_1mnemonic_1keyval
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1label_1get_1mnemonic_1keyval)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1get_1mnemonic_1keyval_FUNC);
@@ -9015,14 +9015,14 @@
 #endif
 
 #ifndef NO__1gtk_1label_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1label_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1label_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_label_new((const gchar *)lparg0);
+	rc = (jlong)gtk_label_new((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1label_1new_FUNC);
@@ -9031,14 +9031,14 @@
 #endif
 
 #ifndef NO__1gtk_1label_1new_1with_1mnemonic
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1label_1new_1with_1mnemonic)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1label_1new_1with_1mnemonic)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1new_1with_1mnemonic_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_label_new_with_mnemonic((const gchar *)lparg0);
+	rc = (jlong)gtk_label_new_with_mnemonic((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1label_1new_1with_1mnemonic_FUNC);
@@ -9048,7 +9048,7 @@
 
 #ifndef NO__1gtk_1label_1set_1attributes
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1attributes)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1attributes_FUNC);
 	gtk_label_set_attributes((GtkLabel *)arg0, (PangoAttrList *)arg1);
@@ -9058,7 +9058,7 @@
 
 #ifndef NO__1gtk_1label_1set_1justify
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1justify)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1justify_FUNC);
 	gtk_label_set_justify((GtkLabel *)arg0, (GtkJustification)arg1);
@@ -9068,7 +9068,7 @@
 
 #ifndef NO__1gtk_1label_1set_1line_1wrap
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1line_1wrap)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1line_1wrap_FUNC);
 	gtk_label_set_line_wrap((GtkLabel *)arg0, (gboolean)arg1);
@@ -9078,7 +9078,7 @@
 
 #ifndef NO__1gtk_1label_1set_1line_1wrap_1mode
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1line_1wrap_1mode)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1line_1wrap_1mode_FUNC);
 /*
@@ -9087,7 +9087,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_label_set_line_wrap_mode_LIB, RTLD_LAZY);
@@ -9102,33 +9102,33 @@
 }
 #endif
 
-#ifndef NO__1gtk_1label_1set_1text__II
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1text__II)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+#ifndef NO__1gtk_1label_1set_1text__JJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1text__JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1text__II_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1text__JJ_FUNC);
 	gtk_label_set_text((GtkLabel *)arg0, (const gchar *)arg1);
-	OS_NATIVE_EXIT(env, that, _1gtk_1label_1set_1text__II_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1label_1set_1text__JJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1label_1set_1text__I_3B
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1text__I_3B)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+#ifndef NO__1gtk_1label_1set_1text__J_3B
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1text__J_3B)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1text__I_3B_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1text__J_3B_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	gtk_label_set_text((GtkLabel *)arg0, (const gchar *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1label_1set_1text__I_3B_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1label_1set_1text__J_3B_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1label_1set_1text_1with_1mnemonic
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1label_1set_1text_1with_1mnemonic)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1label_1set_1text_1with_1mnemonic_FUNC);
@@ -9142,7 +9142,7 @@
 
 #ifndef NO__1gtk_1list_1append_1items
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1append_1items)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1append_1items_FUNC);
 	gtk_list_append_items((GtkList *)arg0, (GList *)arg1);
@@ -9152,7 +9152,7 @@
 
 #ifndef NO__1gtk_1list_1clear_1items
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1clear_1items)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1clear_1items_FUNC);
 	gtk_list_clear_items((GtkList *)arg0, arg1, arg2);
@@ -9162,7 +9162,7 @@
 
 #ifndef NO__1gtk_1list_1insert_1items
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1insert_1items)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1insert_1items_FUNC);
 	gtk_list_insert_items((GtkList *)arg0, (GList *)arg1, arg2);
@@ -9171,14 +9171,14 @@
 #endif
 
 #ifndef NO__1gtk_1list_1item_1new_1with_1label
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1list_1item_1new_1with_1label)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1list_1item_1new_1with_1label)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1item_1new_1with_1label_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_list_item_new_with_label((const gchar *)lparg0);
+	rc = (jlong)gtk_list_item_new_with_label((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1list_1item_1new_1with_1label_FUNC);
@@ -9188,7 +9188,7 @@
 
 #ifndef NO__1gtk_1list_1remove_1items
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1remove_1items)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1remove_1items_FUNC);
 	gtk_list_remove_items((GtkList *)arg0, (GList *)arg1);
@@ -9198,7 +9198,7 @@
 
 #ifndef NO__1gtk_1list_1select_1item
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1select_1item)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1select_1item_FUNC);
 	gtk_list_select_item((GtkList *)arg0, arg1);
@@ -9208,7 +9208,7 @@
 
 #ifndef NO__1gtk_1list_1store_1append
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1append)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1append_FUNC);
 	gtk_list_store_append((GtkListStore *)arg0, (GtkTreeIter *)arg1);
@@ -9218,7 +9218,7 @@
 
 #ifndef NO__1gtk_1list_1store_1clear
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1clear)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1clear_FUNC);
 	gtk_list_store_clear((GtkListStore *)arg0);
@@ -9228,7 +9228,7 @@
 
 #ifndef NO__1gtk_1list_1store_1insert
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1insert)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1insert_FUNC);
 	gtk_list_store_insert((GtkListStore *)arg0, (GtkTreeIter *)arg1, (gint)arg2);
@@ -9237,16 +9237,16 @@
 #endif
 
 #ifndef NO__1gtk_1list_1store_1newv
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1list_1store_1newv)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1list_1store_1newv)
+	(JNIEnv *env, jclass that, jint arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1newv_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_list_store_newv((gint)arg0, (GType *)lparg1);
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	rc = (jlong)gtk_list_store_newv((gint)arg0, (GType *)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1newv_FUNC);
 	return rc;
 }
@@ -9254,7 +9254,7 @@
 
 #ifndef NO__1gtk_1list_1store_1remove
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1remove)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1remove_FUNC);
 	gtk_list_store_remove((GtkListStore *)arg0, (GtkTreeIter *)arg1);
@@ -9262,66 +9262,66 @@
 }
 #endif
 
-#ifndef NO__1gtk_1list_1store_1set__IIIII
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__IIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+#ifndef NO__1gtk_1list_1store_1set__JJIIJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__JJIIJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__IIIII_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__JJIIJ_FUNC);
 	gtk_list_store_set((GtkListStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__IIIII_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__JJIIJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1list_1store_1set__IIIJI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__IIIJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jlong arg3, jint arg4)
+#ifndef NO__1gtk_1list_1store_1set__JJIJJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__JJIJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlong arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__IIIJI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__JJIJJ_FUNC);
 	gtk_list_store_set((GtkListStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__IIIJI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__JJIJJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4)
+#ifndef NO__1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4)
 {
 	GdkColor _arg3, *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 	if (arg3) if ((lparg3 = getGdkColorFields(env, arg3, &_arg3)) == NULL) goto fail;
 	gtk_list_store_set((GtkListStore *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
-	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1list_1store_1set__IIIZI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__IIIZI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3, jint arg4)
+#ifndef NO__1gtk_1list_1store_1set__JJIZJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__JJIZJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jboolean arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__IIIZI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__JJIZJ_FUNC);
 	gtk_list_store_set((GtkListStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__IIIZI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__JJIZJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1list_1store_1set__III_3BI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__III_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4)
+#ifndef NO__1gtk_1list_1store_1set__JJI_3BJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1store_1set__JJI_3BJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jbyteArray arg3, jlong arg4)
 {
 	jbyte *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__III_3BI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1list_1store_1set__JJI_3BJ_FUNC);
 	if (arg3) if ((lparg3 = (*env)->GetByteArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gtk_list_store_set((GtkListStore *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseByteArrayElements(env, arg3, lparg3, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__III_3BI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1list_1store_1set__JJI_3BJ_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1list_1unselect_1all
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1unselect_1all)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1unselect_1all_FUNC);
 	gtk_list_unselect_all((GtkList *)arg0);
@@ -9331,7 +9331,7 @@
 
 #ifndef NO__1gtk_1list_1unselect_1item
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1list_1unselect_1item)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1list_1unselect_1item_FUNC);
 	gtk_list_unselect_item((GtkList *)arg0, arg1);
@@ -9351,7 +9351,7 @@
 
 #ifndef NO__1gtk_1main_1do_1event
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1main_1do_1event)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1main_1do_1event_FUNC);
 	gtk_main_do_event((GdkEvent *)arg0);
@@ -9384,24 +9384,24 @@
 #endif
 
 #ifndef NO__1gtk_1menu_1bar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1menu_1bar_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1menu_1bar_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1bar_1new_FUNC);
-	rc = (jint)gtk_menu_bar_new();
+	rc = (jlong)gtk_menu_bar_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1menu_1bar_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1menu_1item_1get_1submenu
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1menu_1item_1get_1submenu)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1menu_1item_1get_1submenu)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1item_1get_1submenu_FUNC);
-	rc = (jint)gtk_menu_item_get_submenu((GtkMenuItem *)arg0);
+	rc = (jlong)gtk_menu_item_get_submenu((GtkMenuItem *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1menu_1item_1get_1submenu_FUNC);
 	return rc;
 }
@@ -9409,7 +9409,7 @@
 
 #ifndef NO__1gtk_1menu_1item_1remove_1submenu
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1item_1remove_1submenu)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1item_1remove_1submenu_FUNC);
 	gtk_menu_item_remove_submenu((GtkMenuItem *)arg0);
@@ -9419,7 +9419,7 @@
 
 #ifndef NO__1gtk_1menu_1item_1set_1submenu
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1item_1set_1submenu)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1item_1set_1submenu_FUNC);
 	gtk_menu_item_set_submenu((GtkMenuItem *)arg0, (GtkWidget *)arg1);
@@ -9428,12 +9428,12 @@
 #endif
 
 #ifndef NO__1gtk_1menu_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1menu_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1menu_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1new_FUNC);
-	rc = (jint)gtk_menu_new();
+	rc = (jlong)gtk_menu_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1menu_1new_FUNC);
 	return rc;
 }
@@ -9441,7 +9441,7 @@
 
 #ifndef NO__1gtk_1menu_1popdown
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1popdown)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1popdown_FUNC);
 	gtk_menu_popdown((GtkMenu *)arg0);
@@ -9451,7 +9451,7 @@
 
 #ifndef NO__1gtk_1menu_1popup
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1popup)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jint arg6)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1popup_FUNC);
 	gtk_menu_popup((GtkMenu *)arg0, (GtkWidget *)arg1, (GtkWidget *)arg2, (GtkMenuPositionFunc)arg3, (gpointer)arg4, (guint)arg5, (guint32)arg6);
@@ -9461,7 +9461,7 @@
 
 #ifndef NO__1gtk_1menu_1shell_1deactivate
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1shell_1deactivate)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1shell_1deactivate_FUNC);
 	gtk_menu_shell_deactivate((GtkMenuShell *)arg0);
@@ -9471,7 +9471,7 @@
 
 #ifndef NO__1gtk_1menu_1shell_1insert
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1shell_1insert)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1shell_1insert_FUNC);
 	gtk_menu_shell_insert((GtkMenuShell *)arg0, (GtkWidget *)arg1, (gint)arg2);
@@ -9481,7 +9481,7 @@
 
 #ifndef NO__1gtk_1menu_1shell_1select_1item
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1shell_1select_1item)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1shell_1select_1item_FUNC);
 	gtk_menu_shell_select_item((GtkMenuShell *)arg0, (GtkWidget *)arg1);
@@ -9491,7 +9491,7 @@
 
 #ifndef NO__1gtk_1menu_1shell_1set_1take_1focus
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1menu_1shell_1set_1take_1focus)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1menu_1shell_1set_1take_1focus_FUNC);
 /*
@@ -9516,14 +9516,14 @@
 #endif
 
 #ifndef NO__1gtk_1message_1dialog_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1message_1dialog_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jbyteArray arg4)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1message_1dialog_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jbyteArray arg4)
 {
 	jbyte *lparg4=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1message_1dialog_1new_FUNC);
 	if (arg4) if ((lparg4 = (*env)->GetByteArrayElements(env, arg4, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_message_dialog_new((GtkWindow *)arg0, (GtkDialogFlags)arg1, (GtkMessageType)arg2, (GtkButtonsType)arg3, (const gchar *)lparg4);
+	rc = (jlong)gtk_message_dialog_new((GtkWindow *)arg0, (GtkDialogFlags)arg1, (GtkMessageType)arg2, (GtkButtonsType)arg3, (const gchar *)lparg4);
 fail:
 	if (arg4 && lparg4) (*env)->ReleaseByteArrayElements(env, arg4, lparg4, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1message_1dialog_1new_FUNC);
@@ -9557,7 +9557,7 @@
 
 #ifndef NO__1gtk_1misc_1set_1alignment
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1misc_1set_1alignment)
-	(JNIEnv *env, jclass that, jint arg0, jfloat arg1, jfloat arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jfloat arg1, jfloat arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1misc_1set_1alignment_FUNC);
 	gtk_misc_set_alignment((GtkMisc *)arg0, (gfloat)arg1, (gfloat)arg2);
@@ -9567,7 +9567,7 @@
 
 #ifndef NO__1gtk_1notebook_1get_1current_1page
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1notebook_1get_1current_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1get_1current_1page_FUNC);
@@ -9579,7 +9579,7 @@
 
 #ifndef NO__1gtk_1notebook_1get_1scrollable
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1notebook_1get_1scrollable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1get_1scrollable_FUNC);
@@ -9591,7 +9591,7 @@
 
 #ifndef NO__1gtk_1notebook_1insert_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1insert_1page)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1insert_1page_FUNC);
 	gtk_notebook_insert_page((GtkNotebook *)arg0, (GtkWidget *)arg1, (GtkWidget *)arg2, (gint)arg3);
@@ -9600,12 +9600,12 @@
 #endif
 
 #ifndef NO__1gtk_1notebook_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1notebook_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1notebook_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1new_FUNC);
-	rc = (jint)gtk_notebook_new();
+	rc = (jlong)gtk_notebook_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1notebook_1new_FUNC);
 	return rc;
 }
@@ -9613,7 +9613,7 @@
 
 #ifndef NO__1gtk_1notebook_1next_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1next_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1next_1page_FUNC);
 	gtk_notebook_next_page((GtkNotebook *)arg0);
@@ -9623,7 +9623,7 @@
 
 #ifndef NO__1gtk_1notebook_1prev_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1prev_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1prev_1page_FUNC);
 	gtk_notebook_prev_page((GtkNotebook *)arg0);
@@ -9633,7 +9633,7 @@
 
 #ifndef NO__1gtk_1notebook_1remove_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1remove_1page)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1remove_1page_FUNC);
 	gtk_notebook_remove_page((GtkNotebook *)arg0, (gint)arg1);
@@ -9643,7 +9643,7 @@
 
 #ifndef NO__1gtk_1notebook_1set_1current_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1set_1current_1page)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1set_1current_1page_FUNC);
 	gtk_notebook_set_current_page((GtkNotebook *)arg0, (gint)arg1);
@@ -9653,7 +9653,7 @@
 
 #ifndef NO__1gtk_1notebook_1set_1scrollable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1set_1scrollable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1set_1scrollable_FUNC);
 	gtk_notebook_set_scrollable((GtkNotebook *)arg0, (gboolean)arg1);
@@ -9663,7 +9663,7 @@
 
 #ifndef NO__1gtk_1notebook_1set_1show_1tabs
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1set_1show_1tabs)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1set_1show_1tabs_FUNC);
 	gtk_notebook_set_show_tabs((GtkNotebook *)arg0, (gboolean)arg1);
@@ -9673,7 +9673,7 @@
 
 #ifndef NO__1gtk_1notebook_1set_1tab_1pos
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1notebook_1set_1tab_1pos)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1notebook_1set_1tab_1pos_FUNC);
 	gtk_notebook_set_tab_pos((GtkNotebook *)arg0, (GtkPositionType)arg1);
@@ -9683,7 +9683,7 @@
 
 #ifndef NO__1gtk_1object_1sink
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1object_1sink)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1object_1sink_FUNC);
 	gtk_object_sink((GtkObject *)arg0);
@@ -9693,7 +9693,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1bottom_1margin
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1bottom_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1bottom_1margin_FUNC);
@@ -9703,7 +9703,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9722,7 +9722,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1left_1margin
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1left_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1left_1margin_FUNC);
@@ -9732,7 +9732,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9751,7 +9751,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1orientation
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1orientation)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1orientation_FUNC);
@@ -9761,7 +9761,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9780,7 +9780,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1page_1height
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1page_1height)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1page_1height_FUNC);
@@ -9790,7 +9790,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9809,7 +9809,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1page_1width
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1page_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1page_1width_FUNC);
@@ -9819,7 +9819,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9838,7 +9838,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1paper_1height
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1paper_1height)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1paper_1height_FUNC);
@@ -9848,7 +9848,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9866,18 +9866,18 @@
 #endif
 
 #ifndef NO__1gtk_1page_1setup_1get_1paper_1size
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1paper_1size)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1paper_1size)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1paper_1size_FUNC);
 /*
-	rc = (jint)gtk_page_setup_get_paper_size(arg0);
+	rc = (jlong)gtk_page_setup_get_paper_size(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9886,7 +9886,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1page_1setup_1get_1paper_1size_FUNC);
@@ -9896,7 +9896,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1paper_1width
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1paper_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1paper_1width_FUNC);
@@ -9906,7 +9906,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9925,7 +9925,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1right_1margin
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1right_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1right_1margin_FUNC);
@@ -9935,7 +9935,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9954,7 +9954,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1get_1top_1margin
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1page_1setup_1get_1top_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1get_1top_1margin_FUNC);
@@ -9964,7 +9964,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -9982,18 +9982,18 @@
 #endif
 
 #ifndef NO__1gtk_1page_1setup_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1page_1setup_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1page_1setup_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1new_FUNC);
 /*
-	rc = (jint)gtk_page_setup_new();
+	rc = (jlong)gtk_page_setup_new();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10002,7 +10002,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1page_1setup_1new_FUNC);
@@ -10012,7 +10012,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1bottom_1margin
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1bottom_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1bottom_1margin_FUNC);
 /*
@@ -10021,7 +10021,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble, jint);
+		typedef void (*FPTR)(jlong, jdouble, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_bottom_margin_LIB, RTLD_LAZY);
@@ -10038,7 +10038,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1left_1margin
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1left_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1left_1margin_FUNC);
 /*
@@ -10047,7 +10047,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble, jint);
+		typedef void (*FPTR)(jlong, jdouble, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_left_margin_LIB, RTLD_LAZY);
@@ -10064,7 +10064,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1orientation
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1orientation)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1orientation_FUNC);
 /*
@@ -10073,7 +10073,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_orientation_LIB, RTLD_LAZY);
@@ -10090,7 +10090,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1paper_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1paper_1size)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1paper_1size_FUNC);
 /*
@@ -10099,7 +10099,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_paper_size_LIB, RTLD_LAZY);
@@ -10116,7 +10116,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1right_1margin
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1right_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1right_1margin_FUNC);
 /*
@@ -10125,7 +10125,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble, jint);
+		typedef void (*FPTR)(jlong, jdouble, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_right_margin_LIB, RTLD_LAZY);
@@ -10142,7 +10142,7 @@
 
 #ifndef NO__1gtk_1page_1setup_1set_1top_1margin
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1page_1setup_1set_1top_1margin)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1page_1setup_1set_1top_1margin_FUNC);
 /*
@@ -10151,7 +10151,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble, jint);
+		typedef void (*FPTR)(jlong, jdouble, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_page_setup_set_top_margin_LIB, RTLD_LAZY);
@@ -10168,7 +10168,7 @@
 
 #ifndef NO__1gtk_1paint_1arrow
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1arrow)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jboolean arg8, jint arg9, jint arg10, jint arg11, jint arg12)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jboolean arg8, jint arg9, jint arg10, jint arg11, jint arg12)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10185,7 +10185,7 @@
 
 #ifndef NO__1gtk_1paint_1box
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1box)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10202,7 +10202,7 @@
 
 #ifndef NO__1gtk_1paint_1box_1gap
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1box_1gap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10219,7 +10219,7 @@
 
 #ifndef NO__1gtk_1paint_1check
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1check)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10236,7 +10236,7 @@
 
 #ifndef NO__1gtk_1paint_1expander
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1expander)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	jbyte *lparg5=NULL;
@@ -10253,7 +10253,7 @@
 
 #ifndef NO__1gtk_1paint_1extension
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1extension)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10270,7 +10270,7 @@
 
 #ifndef NO__1gtk_1paint_1flat_1box
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1flat_1box)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10287,7 +10287,7 @@
 
 #ifndef NO__1gtk_1paint_1focus
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1focus)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8, jint arg9)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8, jint arg9)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	jbyte *lparg5=NULL;
@@ -10303,7 +10303,7 @@
 
 #ifndef NO__1gtk_1paint_1handle
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1handle)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10319,7 +10319,7 @@
 
 #ifndef NO__1gtk_1paint_1hline
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1hline)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	jbyte *lparg5=NULL;
@@ -10336,7 +10336,7 @@
 
 #ifndef NO__1gtk_1paint_1layout
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1layout)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jboolean arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jlong arg9)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10353,7 +10353,7 @@
 
 #ifndef NO__1gtk_1paint_1option
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1option)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10370,7 +10370,7 @@
 
 #ifndef NO__1gtk_1paint_1shadow
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1shadow)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10387,7 +10387,7 @@
 
 #ifndef NO__1gtk_1paint_1shadow_1gap
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1shadow_1gap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10404,7 +10404,7 @@
 
 #ifndef NO__1gtk_1paint_1slider
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1slider)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10421,7 +10421,7 @@
 
 #ifndef NO__1gtk_1paint_1tab
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1tab)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jobject arg4, jint arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jobject arg4, jlong arg5, jbyteArray arg6, jint arg7, jint arg8, jint arg9, jint arg10)
 {
 	GdkRectangle _arg4, *lparg4=NULL;
 	jbyte *lparg6=NULL;
@@ -10438,7 +10438,7 @@
 
 #ifndef NO__1gtk_1paint_1vline
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paint_1vline)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4, jbyteArray arg5, jint arg6, jint arg7, jint arg8)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	jbyte *lparg5=NULL;
@@ -10455,7 +10455,7 @@
 
 #ifndef NO__1gtk_1paper_1size_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1paper_1size_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1free_FUNC);
 /*
@@ -10464,7 +10464,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint);
+		typedef void (*FPTR)(jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_paper_size_free_LIB, RTLD_LAZY);
@@ -10480,18 +10480,18 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1get_1display_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1display_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1display_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1get_1display_1name_FUNC);
 /*
-	rc = (jint)gtk_paper_size_get_display_name(arg0);
+	rc = (jlong)gtk_paper_size_get_display_name(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10500,7 +10500,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1paper_1size_1get_1display_1name_FUNC);
@@ -10510,7 +10510,7 @@
 
 #ifndef NO__1gtk_1paper_1size_1get_1height
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1height)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1get_1height_FUNC);
@@ -10520,7 +10520,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10538,18 +10538,18 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1get_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1get_1name_FUNC);
 /*
-	rc = (jint)gtk_paper_size_get_name(arg0);
+	rc = (jlong)gtk_paper_size_get_name(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10558,7 +10558,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1paper_1size_1get_1name_FUNC);
@@ -10567,18 +10567,18 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1get_1ppd_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1ppd_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1ppd_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1get_1ppd_1name_FUNC);
 /*
-	rc = (jint)gtk_paper_size_get_ppd_name(arg0);
+	rc = (jlong)gtk_paper_size_get_ppd_name(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10587,7 +10587,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1paper_1size_1get_1ppd_1name_FUNC);
@@ -10597,7 +10597,7 @@
 
 #ifndef NO__1gtk_1paper_1size_1get_1width
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1paper_1size_1get_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1get_1width_FUNC);
@@ -10607,7 +10607,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10626,7 +10626,7 @@
 
 #ifndef NO__1gtk_1paper_1size_1is_1custom
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1paper_1size_1is_1custom)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1is_1custom_FUNC);
@@ -10636,7 +10636,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint);
+		typedef jboolean (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10654,20 +10654,20 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1new)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_paper_size_new(lparg0);
+	rc = (jlong)gtk_paper_size_new(lparg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jbyte *);
+		typedef jlong (*FPTR)(jbyte *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10676,7 +10676,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(lparg0);
+			rc = (jlong)(*fptr)(lparg0);
 		}
 	}
 fail:
@@ -10687,22 +10687,22 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1new_1custom
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1new_1custom)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1new_1custom)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1, jdouble arg2, jdouble arg3, jint arg4)
 {
 	jbyte *lparg0=NULL;
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1new_1custom_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_paper_size_new_custom(lparg0, lparg1, arg2, arg3, arg4);
+	rc = (jlong)gtk_paper_size_new_custom(lparg0, lparg1, arg2, arg3, arg4);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jbyte *, jbyte *, jdouble, jdouble, jint);
+		typedef jlong (*FPTR)(jbyte *, jbyte *, jdouble, jdouble, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10711,7 +10711,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(lparg0, lparg1, arg2, arg3, arg4);
+			rc = (jlong)(*fptr)(lparg0, lparg1, arg2, arg3, arg4);
 		}
 	}
 fail:
@@ -10723,22 +10723,22 @@
 #endif
 
 #ifndef NO__1gtk_1paper_1size_1new_1from_1ppd
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1paper_1size_1new_1from_1ppd)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1paper_1size_1new_1from_1ppd)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1, jdouble arg2, jdouble arg3)
 {
 	jbyte *lparg0=NULL;
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1paper_1size_1new_1from_1ppd_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_paper_size_new_from_ppd(lparg0, lparg1, arg2, arg3);
+	rc = (jlong)gtk_paper_size_new_from_ppd(lparg0, lparg1, arg2, arg3);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jbyte *, jbyte *, jdouble, jdouble);
+		typedef jlong (*FPTR)(jbyte *, jbyte *, jdouble, jdouble);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10747,7 +10747,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(lparg0, lparg1, arg2, arg3);
+			rc = (jlong)(*fptr)(lparg0, lparg1, arg2, arg3);
 		}
 	}
 fail:
@@ -10759,42 +10759,42 @@
 #endif
 
 #ifndef NO__1gtk_1plug_1get_1id
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1plug_1get_1id)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1plug_1get_1id)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1plug_1get_1id_FUNC);
-	rc = (jint)gtk_plug_get_id((GtkPlug *)arg0);
+	rc = (jlong)gtk_plug_get_id((GtkPlug *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1plug_1get_1id_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1plug_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1plug_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1plug_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1plug_1new_FUNC);
-	rc = (jint)gtk_plug_new(arg0);
+	rc = (jlong)gtk_plug_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1plug_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1print_1job_1get_1printer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1printer)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1printer)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1get_1printer_FUNC);
 /*
-	rc = (jint)gtk_print_job_get_printer(arg0);
+	rc = (jlong)gtk_print_job_get_printer(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10803,7 +10803,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1job_1get_1printer_FUNC);
@@ -10812,18 +10812,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1job_1get_1settings
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1settings)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1settings)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1get_1settings_FUNC);
 /*
-	rc = (jint)gtk_print_job_get_settings(arg0);
+	rc = (jlong)gtk_print_job_get_settings(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10832,7 +10832,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1job_1get_1settings_FUNC);
@@ -10842,7 +10842,7 @@
 
 #ifndef NO__1gtk_1print_1job_1get_1status
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1status)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1get_1status_FUNC);
@@ -10852,7 +10852,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10870,20 +10870,20 @@
 #endif
 
 #ifndef NO__1gtk_1print_1job_1get_1surface
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1surface)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1surface)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1get_1surface_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_print_job_get_surface(arg0, (GError **)lparg1);
+	rc = (jlong)gtk_print_job_get_surface(arg0, (GError **)lparg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, GError **);
+		typedef jlong (*FPTR)(jlong, GError **);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10892,29 +10892,29 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, (GError **)lparg1);
+			rc = (jlong)(*fptr)(arg0, (GError **)lparg1);
 		}
 	}
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1job_1get_1surface_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1print_1job_1get_1title
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1title)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1job_1get_1title)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1get_1title_FUNC);
 /*
-	rc = (jint)gtk_print_job_get_title(arg0);
+	rc = (jlong)gtk_print_job_get_title(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10923,7 +10923,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1job_1get_1title_FUNC);
@@ -10932,20 +10932,20 @@
 #endif
 
 #ifndef NO__1gtk_1print_1job_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1job_1new)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1, jint arg2, jint arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1job_1new)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_print_job_new((const gchar *)lparg0, arg1, arg2, arg3);
+	rc = (jlong)gtk_print_job_new((const gchar *)lparg0, arg1, arg2, arg3);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(const gchar *, jint, jint, jint);
+		typedef jlong (*FPTR)(const gchar *, jlong, jlong, jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -10954,7 +10954,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((const gchar *)lparg0, arg1, arg2, arg3);
+			rc = (jlong)(*fptr)((const gchar *)lparg0, arg1, arg2, arg3);
 		}
 	}
 fail:
@@ -10966,7 +10966,7 @@
 
 #ifndef NO__1gtk_1print_1job_1send
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1job_1send)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1send_FUNC);
 /*
@@ -10975,7 +10975,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, gpointer, GDestroyNotify);
+		typedef void (*FPTR)(jlong, jlong, gpointer, GDestroyNotify);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_job_send_LIB, RTLD_LAZY);
@@ -10992,21 +10992,21 @@
 
 #ifndef NO__1gtk_1print_1job_1set_1source_1file
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1print_1job_1set_1source_1file)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlongArray arg2)
 {
 	jbyte *lparg1=NULL;
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1job_1set_1source_1file_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 /*
 	rc = (jboolean)gtk_print_job_set_source_file(arg0, (const gchar *)lparg1, (GError **)lparg2);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint, const gchar *, GError **);
+		typedef jboolean (*FPTR)(jlong, const gchar *, GError **);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11019,7 +11019,7 @@
 		}
 	}
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1job_1set_1source_1file_FUNC);
 	return rc;
@@ -11028,7 +11028,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1foreach
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1foreach)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1foreach_FUNC);
 /*
@@ -11037,7 +11037,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint, gpointer);
+		typedef void (*FPTR)(jlong, jlong, gpointer);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_foreach_LIB, RTLD_LAZY);
@@ -11053,20 +11053,20 @@
 #endif
 
 #ifndef NO__1gtk_1print_1settings_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1settings_1get)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_print_settings_get(arg0, (const gchar *)lparg1);
+	rc = (jlong)gtk_print_settings_get(arg0, (const gchar *)lparg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, const gchar *);
+		typedef jlong (*FPTR)(jlong, const gchar *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11075,7 +11075,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, (const gchar *)lparg1);
+			rc = (jlong)(*fptr)(arg0, (const gchar *)lparg1);
 		}
 	}
 fail:
@@ -11087,7 +11087,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1collate
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1collate)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1collate_FUNC);
@@ -11097,7 +11097,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint);
+		typedef jboolean (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11116,7 +11116,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1n_1copies
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1n_1copies)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1n_1copies_FUNC);
@@ -11126,7 +11126,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11145,7 +11145,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1orientation
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1orientation)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1orientation_FUNC);
@@ -11155,7 +11155,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11173,20 +11173,20 @@
 #endif
 
 #ifndef NO__1gtk_1print_1settings_1get_1page_1ranges
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1page_1ranges)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1page_1ranges)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1)
 {
 	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1page_1ranges_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_print_settings_get_page_ranges(arg0, (gint *)lparg1);
+	rc = (jlong)gtk_print_settings_get_page_ranges(arg0, (gint *)lparg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint, gint *);
+		typedef jlong (*FPTR)(jlong, gint *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11195,7 +11195,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, (gint *)lparg1);
+			rc = (jlong)(*fptr)(arg0, (gint *)lparg1);
 		}
 	}
 fail:
@@ -11207,7 +11207,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1paper_1height
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1paper_1height)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1paper_1height_FUNC);
@@ -11217,7 +11217,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11236,7 +11236,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1paper_1width
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1paper_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1paper_1width_FUNC);
@@ -11246,7 +11246,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jdouble (*FPTR)(jint, jint);
+		typedef jdouble (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11265,7 +11265,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1print_1pages
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1print_1pages)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1print_1pages_FUNC);
@@ -11275,7 +11275,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11293,18 +11293,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1settings_1get_1printer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1printer)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1printer)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1printer_FUNC);
 /*
-	rc = (jint)gtk_print_settings_get_printer(arg0);
+	rc = (jlong)gtk_print_settings_get_printer(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11313,7 +11313,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1settings_1get_1printer_FUNC);
@@ -11323,7 +11323,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1get_1resolution
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1get_1resolution)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1get_1resolution_FUNC);
@@ -11333,7 +11333,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11351,18 +11351,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1settings_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1settings_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1settings_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1new_FUNC);
 /*
-	rc = (jint)gtk_print_settings_new();
+	rc = (jlong)gtk_print_settings_new();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11371,7 +11371,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1settings_1new_FUNC);
@@ -11381,7 +11381,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
@@ -11394,7 +11394,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, const gchar *, const gchar *);
+		typedef void (*FPTR)(jlong, const gchar *, const gchar *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_LIB, RTLD_LAZY);
@@ -11414,7 +11414,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1collate
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1collate)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1collate_FUNC);
 /*
@@ -11423,7 +11423,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, gboolean);
+		typedef void (*FPTR)(jlong, gboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_collate_LIB, RTLD_LAZY);
@@ -11440,7 +11440,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1n_1copies
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1n_1copies)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1n_1copies_FUNC);
 /*
@@ -11449,7 +11449,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, gint);
+		typedef void (*FPTR)(jlong, gint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_n_copies_LIB, RTLD_LAZY);
@@ -11466,7 +11466,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1orientation
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1orientation)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1orientation_FUNC);
 /*
@@ -11475,7 +11475,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_orientation_LIB, RTLD_LAZY);
@@ -11492,7 +11492,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1page_1ranges
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1page_1ranges)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jint arg2)
 {
 	jint *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1page_1ranges_FUNC);
@@ -11503,7 +11503,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint *, gint);
+		typedef void (*FPTR)(jlong, jint *, gint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_page_ranges_LIB, RTLD_LAZY);
@@ -11522,7 +11522,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1print_1pages
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1print_1pages)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1print_1pages_FUNC);
 /*
@@ -11531,7 +11531,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_print_pages_LIB, RTLD_LAZY);
@@ -11548,7 +11548,7 @@
 
 #ifndef NO__1gtk_1print_1settings_1set_1printer
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1settings_1set_1printer)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1settings_1set_1printer_FUNC);
@@ -11559,7 +11559,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jbyte *);
+		typedef void (*FPTR)(jlong, jbyte *);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_settings_set_printer_LIB, RTLD_LAZY);
@@ -11578,7 +11578,7 @@
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1get_1current_1page
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1current_1page)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1get_1current_1page_FUNC);
@@ -11588,7 +11588,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11606,18 +11606,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1get_1page_1setup
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1page_1setup)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1page_1setup)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1get_1page_1setup_FUNC);
 /*
-	rc = (jint)gtk_print_unix_dialog_get_page_setup(arg0);
+	rc = (jlong)gtk_print_unix_dialog_get_page_setup(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11626,7 +11626,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1unix_1dialog_1get_1page_1setup_FUNC);
@@ -11635,18 +11635,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1get_1selected_1printer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1selected_1printer)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1selected_1printer)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1get_1selected_1printer_FUNC);
 /*
-	rc = (jint)gtk_print_unix_dialog_get_selected_printer(arg0);
+	rc = (jlong)gtk_print_unix_dialog_get_selected_printer(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11655,7 +11655,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1unix_1dialog_1get_1selected_1printer_FUNC);
@@ -11664,18 +11664,18 @@
 #endif
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1get_1settings
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1settings)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1get_1settings)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1get_1settings_FUNC);
 /*
-	rc = (jint)gtk_print_unix_dialog_get_settings(arg0);
+	rc = (jlong)gtk_print_unix_dialog_get_settings(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11684,7 +11684,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1print_1unix_1dialog_1get_1settings_FUNC);
@@ -11693,20 +11693,20 @@
 #endif
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1new)
-	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1new)
+	(JNIEnv *env, jclass that, jbyteArray arg0, jlong arg1)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1new_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_print_unix_dialog_new((const gchar *)lparg0, (GtkWindow *)arg1);
+	rc = (jlong)gtk_print_unix_dialog_new((const gchar *)lparg0, (GtkWindow *)arg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(const gchar *, GtkWindow *);
+		typedef jlong (*FPTR)(const gchar *, GtkWindow *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11715,7 +11715,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((const gchar *)lparg0, (GtkWindow *)arg1);
+			rc = (jlong)(*fptr)((const gchar *)lparg0, (GtkWindow *)arg1);
 		}
 	}
 fail:
@@ -11727,7 +11727,7 @@
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1set_1current_1page
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1set_1current_1page)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1set_1current_1page_FUNC);
 /*
@@ -11736,7 +11736,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, gint);
+		typedef void (*FPTR)(jlong, gint);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_unix_dialog_set_current_page_LIB, RTLD_LAZY);
@@ -11753,7 +11753,7 @@
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1set_1manual_1capabilities
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1set_1manual_1capabilities)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1set_1manual_1capabilities_FUNC);
 /*
@@ -11762,7 +11762,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_unix_dialog_set_manual_capabilities_LIB, RTLD_LAZY);
@@ -11779,7 +11779,7 @@
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1set_1page_1setup
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1set_1page_1setup)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1set_1page_1setup_FUNC);
 /*
@@ -11788,7 +11788,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_unix_dialog_set_page_setup_LIB, RTLD_LAZY);
@@ -11805,7 +11805,7 @@
 
 #ifndef NO__1gtk_1print_1unix_1dialog_1set_1settings
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1print_1unix_1dialog_1set_1settings)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1print_1unix_1dialog_1set_1settings_FUNC);
 /*
@@ -11814,7 +11814,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(gtk_print_unix_dialog_set_settings_LIB, RTLD_LAZY);
@@ -11830,18 +11830,18 @@
 #endif
 
 #ifndef NO__1gtk_1printer_1get_1backend
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1printer_1get_1backend)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1printer_1get_1backend)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1printer_1get_1backend_FUNC);
 /*
-	rc = (jint)gtk_printer_get_backend(arg0);
+	rc = (jlong)gtk_printer_get_backend(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11850,7 +11850,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1printer_1get_1backend_FUNC);
@@ -11859,18 +11859,18 @@
 #endif
 
 #ifndef NO__1gtk_1printer_1get_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1printer_1get_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1printer_1get_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1printer_1get_1name_FUNC);
 /*
-	rc = (jint)gtk_printer_get_name(arg0);
+	rc = (jlong)gtk_printer_get_name(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11879,7 +11879,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1printer_1get_1name_FUNC);
@@ -11889,7 +11889,7 @@
 
 #ifndef NO__1gtk_1printer_1is_1default
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1printer_1is_1default)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1printer_1is_1default_FUNC);
@@ -11899,7 +11899,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jboolean (*FPTR)(jint);
+		typedef jboolean (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -11917,12 +11917,12 @@
 #endif
 
 #ifndef NO__1gtk_1progress_1bar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1progress_1bar_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1progress_1bar_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1progress_1bar_1new_FUNC);
-	rc = (jint)gtk_progress_bar_new();
+	rc = (jlong)gtk_progress_bar_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1progress_1bar_1new_FUNC);
 	return rc;
 }
@@ -11930,7 +11930,7 @@
 
 #ifndef NO__1gtk_1progress_1bar_1pulse
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1progress_1bar_1pulse)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1progress_1bar_1pulse_FUNC);
 	gtk_progress_bar_pulse((GtkProgressBar *)arg0);
@@ -11940,7 +11940,7 @@
 
 #ifndef NO__1gtk_1progress_1bar_1set_1fraction
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1progress_1bar_1set_1fraction)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1progress_1bar_1set_1fraction_FUNC);
 	gtk_progress_bar_set_fraction((GtkProgressBar *)arg0, (gdouble)arg1);
@@ -11950,7 +11950,7 @@
 
 #ifndef NO__1gtk_1progress_1bar_1set_1orientation
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1progress_1bar_1set_1orientation)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1progress_1bar_1set_1orientation_FUNC);
 	gtk_progress_bar_set_orientation((GtkProgressBar *)arg0, (GtkProgressBarOrientation)arg1);
@@ -11959,62 +11959,62 @@
 #endif
 
 #ifndef NO__1gtk_1radio_1button_1get_1group
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1radio_1button_1get_1group)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1radio_1button_1get_1group)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1radio_1button_1get_1group_FUNC);
-	rc = (jint)gtk_radio_button_get_group((GtkRadioButton *)arg0);
+	rc = (jlong)gtk_radio_button_get_group((GtkRadioButton *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1radio_1button_1get_1group_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1radio_1button_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1radio_1button_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1radio_1button_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1radio_1button_1new_FUNC);
-	rc = (jint)gtk_radio_button_new((GSList *)arg0);
+	rc = (jlong)gtk_radio_button_new((GSList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1radio_1button_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1radio_1menu_1item_1get_1group
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1get_1group)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1get_1group)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1radio_1menu_1item_1get_1group_FUNC);
-	rc = (jint)gtk_radio_menu_item_get_group((GtkRadioMenuItem *)arg0);
+	rc = (jlong)gtk_radio_menu_item_get_group((GtkRadioMenuItem *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1radio_1menu_1item_1get_1group_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1radio_1menu_1item_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1radio_1menu_1item_1new_FUNC);
-	rc = (jint)gtk_radio_menu_item_new((GSList *)arg0);
+	rc = (jlong)gtk_radio_menu_item_new((GSList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1radio_1menu_1item_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1radio_1menu_1item_1new_1with_1label
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1new_1with_1label)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1radio_1menu_1item_1new_1with_1label)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1radio_1menu_1item_1new_1with_1label_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_radio_menu_item_new_with_label((GSList *)arg0, (const gchar *)lparg1);
+	rc = (jlong)gtk_radio_menu_item_new_with_label((GSList *)arg0, (const gchar *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1radio_1menu_1item_1new_1with_1label_FUNC);
@@ -12023,12 +12023,12 @@
 #endif
 
 #ifndef NO__1gtk_1range_1get_1adjustment
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1range_1get_1adjustment)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1range_1get_1adjustment)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1range_1get_1adjustment_FUNC);
-	rc = (jint)gtk_range_get_adjustment((GtkRange *)arg0);
+	rc = (jlong)gtk_range_get_adjustment((GtkRange *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1range_1get_1adjustment_FUNC);
 	return rc;
 }
@@ -12036,7 +12036,7 @@
 
 #ifndef NO__1gtk_1range_1set_1increments
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1range_1set_1increments)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1range_1set_1increments_FUNC);
 	gtk_range_set_increments((GtkRange *)arg0, arg1, arg2);
@@ -12046,7 +12046,7 @@
 
 #ifndef NO__1gtk_1range_1set_1inverted
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1range_1set_1inverted)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1range_1set_1inverted_FUNC);
 	gtk_range_set_inverted((GtkRange *)arg0, arg1);
@@ -12056,7 +12056,7 @@
 
 #ifndef NO__1gtk_1range_1set_1range
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1range_1set_1range)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1range_1set_1range_FUNC);
 	gtk_range_set_range((GtkRange *)arg0, arg1, arg2);
@@ -12066,7 +12066,7 @@
 
 #ifndef NO__1gtk_1range_1set_1value
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1range_1set_1value)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1range_1set_1value_FUNC);
 	gtk_range_set_value((GtkRange *)arg0, arg1);
@@ -12089,12 +12089,12 @@
 #endif
 
 #ifndef NO__1gtk_1rc_1style_1get_1bg_1pixmap_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1rc_1style_1get_1bg_1pixmap_1name)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1rc_1style_1get_1bg_1pixmap_1name)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1get_1bg_1pixmap_1name_FUNC);
-	rc = (jint)gtk_rc_style_get_bg_pixmap_name((GtkRcStyle *)arg0, arg1);
+	rc = (jlong)gtk_rc_style_get_bg_pixmap_name((GtkRcStyle *)arg0, arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1rc_1style_1get_1bg_1pixmap_1name_FUNC);
 	return rc;
 }
@@ -12102,7 +12102,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1get_1color_1flags
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1rc_1style_1get_1color_1flags)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1get_1color_1flags_FUNC);
@@ -12114,7 +12114,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1set_1bg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1rc_1style_1set_1bg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1set_1bg_FUNC);
@@ -12127,7 +12127,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1set_1bg_1pixmap_1name
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1rc_1style_1set_1bg_1pixmap_1name)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1set_1bg_1pixmap_1name_FUNC);
 	gtk_rc_style_set_bg_pixmap_name((GtkRcStyle *)arg0, arg1, (char *)arg2);
@@ -12137,7 +12137,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1set_1color_1flags
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1rc_1style_1set_1color_1flags)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1set_1color_1flags_FUNC);
 	gtk_rc_style_set_color_flags((GtkRcStyle *)arg0, arg1, arg2);
@@ -12147,7 +12147,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1set_1fg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1rc_1style_1set_1fg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1set_1fg_FUNC);
@@ -12160,7 +12160,7 @@
 
 #ifndef NO__1gtk_1rc_1style_1set_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1rc_1style_1set_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1rc_1style_1set_1text_FUNC);
@@ -12173,7 +12173,7 @@
 
 #ifndef NO__1gtk_1scale_1set_1digits
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scale_1set_1digits)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scale_1set_1digits_FUNC);
 	gtk_scale_set_digits((GtkScale *)arg0, (gint)arg1);
@@ -12183,7 +12183,7 @@
 
 #ifndef NO__1gtk_1scale_1set_1draw_1value
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scale_1set_1draw_1value)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scale_1set_1draw_1value_FUNC);
 	gtk_scale_set_draw_value((GtkScale *)arg0, (gboolean)arg1);
@@ -12193,7 +12193,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1add_1with_1viewport
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1add_1with_1viewport)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1add_1with_1viewport_FUNC);
 	gtk_scrolled_window_add_with_viewport((GtkScrolledWindow *)arg0, (GtkWidget *)arg1);
@@ -12202,12 +12202,12 @@
 #endif
 
 #ifndef NO__1gtk_1scrolled_1window_1get_1hadjustment
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1hadjustment)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1hadjustment)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1get_1hadjustment_FUNC);
-	rc = (jint)gtk_scrolled_window_get_hadjustment((GtkScrolledWindow *)arg0);
+	rc = (jlong)gtk_scrolled_window_get_hadjustment((GtkScrolledWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1scrolled_1window_1get_1hadjustment_FUNC);
 	return rc;
 }
@@ -12215,7 +12215,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1get_1policy
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1policy)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -12232,7 +12232,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1get_1shadow_1type
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1shadow_1type)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1get_1shadow_1type_FUNC);
@@ -12243,24 +12243,24 @@
 #endif
 
 #ifndef NO__1gtk_1scrolled_1window_1get_1vadjustment
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1vadjustment)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1get_1vadjustment)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1get_1vadjustment_FUNC);
-	rc = (jint)gtk_scrolled_window_get_vadjustment((GtkScrolledWindow *)arg0);
+	rc = (jlong)gtk_scrolled_window_get_vadjustment((GtkScrolledWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1scrolled_1window_1get_1vadjustment_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1scrolled_1window_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1new_FUNC);
-	rc = (jint)gtk_scrolled_window_new((GtkAdjustment *)arg0, (GtkAdjustment *)arg1);
+	rc = (jlong)gtk_scrolled_window_new((GtkAdjustment *)arg0, (GtkAdjustment *)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1scrolled_1window_1new_FUNC);
 	return rc;
 }
@@ -12268,7 +12268,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1set_1placement
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1set_1placement)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1set_1placement_FUNC);
 	gtk_scrolled_window_set_placement((GtkScrolledWindow *)arg0, (GtkCornerType)arg1);
@@ -12278,7 +12278,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1set_1policy
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1set_1policy)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1set_1policy_FUNC);
 	gtk_scrolled_window_set_policy((GtkScrolledWindow *)arg0, (GtkPolicyType)arg1, (GtkPolicyType)arg2);
@@ -12288,7 +12288,7 @@
 
 #ifndef NO__1gtk_1scrolled_1window_1set_1shadow_1type
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1scrolled_1window_1set_1shadow_1type)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1scrolled_1window_1set_1shadow_1type_FUNC);
 	gtk_scrolled_window_set_shadow_type((GtkScrolledWindow *)arg0, (GtkShadowType)arg1);
@@ -12298,7 +12298,7 @@
 
 #ifndef NO__1gtk_1selection_1data_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1selection_1data_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1selection_1data_1free_FUNC);
 	gtk_selection_data_free((GtkSelectionData *)arg0);
@@ -12308,7 +12308,7 @@
 
 #ifndef NO__1gtk_1selection_1data_1set
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1selection_1data_1set)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlong arg3, jint arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1selection_1data_1set_FUNC);
 	gtk_selection_data_set((GtkSelectionData *)arg0, (GdkAtom)arg1, (gint)arg2, (const guchar *)arg3, (gint)arg4);
@@ -12317,72 +12317,72 @@
 #endif
 
 #ifndef NO__1gtk_1separator_1menu_1item_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1separator_1menu_1item_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1separator_1menu_1item_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1separator_1menu_1item_1new_FUNC);
-	rc = (jint)gtk_separator_menu_item_new();
+	rc = (jlong)gtk_separator_menu_item_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1separator_1menu_1item_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1set_1locale
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1set_1locale)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1set_1locale)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1set_1locale_FUNC);
-	rc = (jint)gtk_set_locale();
+	rc = (jlong)gtk_set_locale();
 	OS_NATIVE_EXIT(env, that, _1gtk_1set_1locale_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1settings_1get_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1settings_1get_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1settings_1get_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1settings_1get_1default_FUNC);
-	rc = (jint)gtk_settings_get_default();
+	rc = (jlong)gtk_settings_get_default();
 	OS_NATIVE_EXIT(env, that, _1gtk_1settings_1get_1default_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1socket_1get_1id
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1socket_1get_1id)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1socket_1get_1id)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1socket_1get_1id_FUNC);
-	rc = (jint)gtk_socket_get_id((GtkSocket *)arg0);
+	rc = (jlong)gtk_socket_get_id((GtkSocket *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1socket_1get_1id_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1socket_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1socket_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1socket_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1socket_1new_FUNC);
-	rc = (jint)gtk_socket_new();
+	rc = (jlong)gtk_socket_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1socket_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1spin_1button_1get_1adjustment
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1spin_1button_1get_1adjustment)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1spin_1button_1get_1adjustment)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1get_1adjustment_FUNC);
-	rc = (jint)gtk_spin_button_get_adjustment((GtkSpinButton*)arg0);
+	rc = (jlong)gtk_spin_button_get_adjustment((GtkSpinButton*)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1spin_1button_1get_1adjustment_FUNC);
 	return rc;
 }
@@ -12390,7 +12390,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1get_1digits
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1spin_1button_1get_1digits)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1get_1digits_FUNC);
@@ -12401,12 +12401,12 @@
 #endif
 
 #ifndef NO__1gtk_1spin_1button_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1spin_1button_1new)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1spin_1button_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jint arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1new_FUNC);
-	rc = (jint)gtk_spin_button_new((GtkAdjustment *)arg0, arg1, arg2);
+	rc = (jlong)gtk_spin_button_new((GtkAdjustment *)arg0, arg1, arg2);
 	OS_NATIVE_EXIT(env, that, _1gtk_1spin_1button_1new_FUNC);
 	return rc;
 }
@@ -12414,7 +12414,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1set_1digits
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1set_1digits)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1set_1digits_FUNC);
 	gtk_spin_button_set_digits((GtkSpinButton*)arg0, arg1);
@@ -12424,7 +12424,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1set_1increments
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1set_1increments)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1set_1increments_FUNC);
 	gtk_spin_button_set_increments((GtkSpinButton*)arg0, arg1, arg2);
@@ -12434,7 +12434,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1set_1range
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1set_1range)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1, jdouble arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1, jdouble arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1set_1range_FUNC);
 	gtk_spin_button_set_range((GtkSpinButton*)arg0, arg1, arg2);
@@ -12444,7 +12444,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1set_1value
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1set_1value)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1set_1value_FUNC);
 	gtk_spin_button_set_value((GtkSpinButton*)arg0, arg1);
@@ -12454,7 +12454,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1set_1wrap
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1set_1wrap)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1set_1wrap_FUNC);
 	gtk_spin_button_set_wrap((GtkSpinButton*)arg0, arg1);
@@ -12464,7 +12464,7 @@
 
 #ifndef NO__1gtk_1spin_1button_1update
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1spin_1button_1update)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1spin_1button_1update_FUNC);
 	gtk_spin_button_update((GtkSpinButton*)arg0);
@@ -12474,7 +12474,7 @@
 
 #ifndef NO__1gtk_1style_1get_1base
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1base)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1base_FUNC);
@@ -12488,7 +12488,7 @@
 
 #ifndef NO__1gtk_1style_1get_1bg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1bg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1bg_FUNC);
@@ -12502,21 +12502,21 @@
 
 #ifndef NO__1gtk_1style_1get_1bg_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1bg_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1bg_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_bg_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1bg_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1black
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1black)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkColor _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1black_FUNC);
@@ -12530,21 +12530,21 @@
 
 #ifndef NO__1gtk_1style_1get_1black_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1black_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1black_1gc_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	gtk_style_get_black_gc((GtkStyle *)arg0, (GdkGC **)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1black_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1dark
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1dark)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1dark_FUNC);
@@ -12558,21 +12558,21 @@
 
 #ifndef NO__1gtk_1style_1get_1dark_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1dark_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1dark_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_dark_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1dark_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1fg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1fg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1fg_FUNC);
@@ -12586,25 +12586,25 @@
 
 #ifndef NO__1gtk_1style_1get_1fg_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1fg_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1fg_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_fg_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1fg_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1font_1desc
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1style_1get_1font_1desc)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1style_1get_1font_1desc)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1font_1desc_FUNC);
-	rc = (jint)gtk_style_get_font_desc((GtkStyle *)arg0);
+	rc = (jlong)gtk_style_get_font_desc((GtkStyle *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1font_1desc_FUNC);
 	return rc;
 }
@@ -12612,7 +12612,7 @@
 
 #ifndef NO__1gtk_1style_1get_1light
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1light)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1light_FUNC);
@@ -12626,35 +12626,35 @@
 
 #ifndef NO__1gtk_1style_1get_1light_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1light_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1light_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_light_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1light_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1mid_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1mid_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1mid_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_mid_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1mid_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1text_FUNC);
@@ -12668,49 +12668,49 @@
 
 #ifndef NO__1gtk_1style_1get_1text_1aa_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1text_1aa_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1text_1aa_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_text_aa_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1text_1aa_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1text_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1text_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1text_1gc_FUNC);
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_style_get_text_gc((GtkStyle *)arg0, arg1, (GdkGC **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1text_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1white_1gc
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1style_1get_1white_1gc)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1white_1gc_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	gtk_style_get_white_gc((GtkStyle *)arg0, (GdkGC **)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1get_1white_1gc_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1style_1get_1xthickness
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1style_1get_1xthickness)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1xthickness_FUNC);
@@ -12722,7 +12722,7 @@
 
 #ifndef NO__1gtk_1style_1get_1ythickness
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1style_1get_1ythickness)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1get_1ythickness_FUNC);
@@ -12733,14 +12733,14 @@
 #endif
 
 #ifndef NO__1gtk_1style_1render_1icon
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1style_1render_1icon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jbyteArray arg6)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1style_1render_1icon)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jlong arg5, jbyteArray arg6)
 {
 	jbyte *lparg6=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1style_1render_1icon_FUNC);
 	if (arg6) if ((lparg6 = (*env)->GetByteArrayElements(env, arg6, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_style_render_icon((GtkStyle *)arg0, (GtkIconSource *)arg1, arg2, arg3, arg4, (GtkWidget *)arg5, (const gchar *)lparg6);
+	rc = (jlong)gtk_style_render_icon((GtkStyle *)arg0, (GtkIconSource *)arg1, arg2, arg3, arg4, (GtkWidget *)arg5, (const gchar *)lparg6);
 fail:
 	if (arg6 && lparg6) (*env)->ReleaseByteArrayElements(env, arg6, lparg6, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1style_1render_1icon_FUNC);
@@ -12749,12 +12749,12 @@
 #endif
 
 #ifndef NO__1gtk_1target_1list_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1target_1list_1new)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1target_1list_1new)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1target_1list_1new_FUNC);
-	rc = (jint)gtk_target_list_new((const GtkTargetEntry *)arg0, (guint)arg1);
+	rc = (jlong)gtk_target_list_new((const GtkTargetEntry *)arg0, (guint)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1target_1list_1new_FUNC);
 	return rc;
 }
@@ -12762,7 +12762,7 @@
 
 #ifndef NO__1gtk_1target_1list_1unref
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1target_1list_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1target_1list_1unref_FUNC);
 	gtk_target_list_unref((GtkTargetList *)arg0);
@@ -12772,7 +12772,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1copy_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1copy_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1copy_1clipboard_FUNC);
 	gtk_text_buffer_copy_clipboard((GtkTextBuffer *)arg0, (GtkClipboard *)arg1);
@@ -12782,7 +12782,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1cut_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1cut_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1cut_1clipboard_FUNC);
 	gtk_text_buffer_cut_clipboard((GtkTextBuffer *)arg0, (GtkClipboard *)arg1, (gboolean)arg2);
@@ -12792,7 +12792,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1delete
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1delete)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
@@ -12809,7 +12809,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1bounds
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1bounds)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
@@ -12826,7 +12826,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1char_1count
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1char_1count)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1char_1count_FUNC);
@@ -12838,7 +12838,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1end_1iter
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1end_1iter)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1end_1iter_FUNC);
@@ -12851,12 +12851,12 @@
 #endif
 
 #ifndef NO__1gtk_1text_1buffer_1get_1insert
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1insert)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1insert)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1insert_FUNC);
-	rc = (jint)gtk_text_buffer_get_insert((GtkTextBuffer *)arg0);
+	rc = (jlong)gtk_text_buffer_get_insert((GtkTextBuffer *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1get_1insert_FUNC);
 	return rc;
 }
@@ -12864,7 +12864,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1iter_1at_1line
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1iter_1at_1line)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1iter_1at_1line_FUNC);
@@ -12878,7 +12878,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1iter_1at_1mark
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1iter_1at_1mark)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1iter_1at_1mark_FUNC);
@@ -12892,7 +12892,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1iter_1at_1offset
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1iter_1at_1offset)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1iter_1at_1offset_FUNC);
@@ -12906,7 +12906,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1line_1count
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1line_1count)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1line_1count_FUNC);
@@ -12917,12 +12917,12 @@
 #endif
 
 #ifndef NO__1gtk_1text_1buffer_1get_1selection_1bound
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1selection_1bound)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1selection_1bound)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1selection_1bound_FUNC);
-	rc = (jint)gtk_text_buffer_get_selection_bound((GtkTextBuffer *)arg0);
+	rc = (jlong)gtk_text_buffer_get_selection_bound((GtkTextBuffer *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1get_1selection_1bound_FUNC);
 	return rc;
 }
@@ -12930,7 +12930,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1get_1selection_1bounds
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1selection_1bounds)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
@@ -12948,16 +12948,16 @@
 #endif
 
 #ifndef NO__1gtk_1text_1buffer_1get_1text
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2, jboolean arg3)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1buffer_1get_1text)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2, jboolean arg3)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1get_1text_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_text_buffer_get_text((GtkTextBuffer *)arg0, (GtkTextIter *)lparg1, (GtkTextIter *)lparg2, (gboolean)arg3);
+	rc = (jlong)gtk_text_buffer_get_text((GtkTextBuffer *)arg0, (GtkTextIter *)lparg1, (GtkTextIter *)lparg2, (gboolean)arg3);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
@@ -12966,40 +12966,40 @@
 }
 #endif
 
-#ifndef NO__1gtk_1text_1buffer_1insert__II_3BI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1insert__II_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3)
+#ifndef NO__1gtk_1text_1buffer_1insert__JJ_3BI
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1insert__JJ_3BI)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jint arg3)
 {
 	jbyte *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1insert__II_3BI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1insert__JJ_3BI_FUNC);
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_text_buffer_insert((GtkTextBuffer *)arg0, (GtkTextIter *)arg1, (const gchar *)lparg2, (gint)arg3);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1insert__II_3BI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1insert__JJ_3BI_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1text_1buffer_1insert__I_3B_3BI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1insert__I_3B_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jbyteArray arg2, jint arg3)
+#ifndef NO__1gtk_1text_1buffer_1insert__J_3B_3BI
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1insert__J_3B_3BI)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jbyteArray arg2, jint arg3)
 {
 	jbyte *lparg1=NULL;
 	jbyte *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1insert__I_3B_3BI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1insert__J_3B_3BI_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetByteArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_text_buffer_insert((GtkTextBuffer *)arg0, (GtkTextIter *)lparg1, (const gchar *)lparg2, (gint)arg3);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseByteArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1insert__I_3B_3BI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1text_1buffer_1insert__J_3B_3BI_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1text_1buffer_1move_1mark
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1move_1mark)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2)
 {
 	jbyte *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1move_1mark_FUNC);
@@ -13013,7 +13013,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1paste_1clipboard
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1paste_1clipboard)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jboolean arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jboolean arg3)
 {
 	jbyte *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1paste_1clipboard_FUNC);
@@ -13027,7 +13027,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1place_1cursor
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1place_1cursor)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1place_1cursor_FUNC);
@@ -13041,7 +13041,7 @@
 
 #ifndef NO__1gtk_1text_1buffer_1set_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1buffer_1set_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1buffer_1set_1text_FUNC);
@@ -13087,7 +13087,7 @@
 
 #ifndef NO__1gtk_1text_1view_1buffer_1to_1window_1coords
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1buffer_1to_1window_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
 {
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
@@ -13103,12 +13103,12 @@
 #endif
 
 #ifndef NO__1gtk_1text_1view_1get_1buffer
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1buffer)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1buffer)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1get_1buffer_FUNC);
-	rc = (jint)gtk_text_view_get_buffer((GtkTextView *)arg0);
+	rc = (jlong)gtk_text_view_get_buffer((GtkTextView *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1text_1view_1get_1buffer_FUNC);
 	return rc;
 }
@@ -13116,7 +13116,7 @@
 
 #ifndef NO__1gtk_1text_1view_1get_1editable
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1editable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1get_1editable_FUNC);
@@ -13128,7 +13128,7 @@
 
 #ifndef NO__1gtk_1text_1view_1get_1iter_1at_1location
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1iter_1at_1location)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jint arg3)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1get_1iter_1at_1location_FUNC);
@@ -13142,7 +13142,7 @@
 
 #ifndef NO__1gtk_1text_1view_1get_1iter_1location
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1iter_1location)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jobject arg2)
 {
 	jbyte *lparg1=NULL;
 	GdkRectangle _arg2, *lparg2=NULL;
@@ -13159,7 +13159,7 @@
 
 #ifndef NO__1gtk_1text_1view_1get_1line_1at_1y
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1line_1at_1y)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2, jintArray arg3)
 {
 	jbyte *lparg1=NULL;
 	jint *lparg3=NULL;
@@ -13176,7 +13176,7 @@
 
 #ifndef NO__1gtk_1text_1view_1get_1visible_1rect
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1visible_1rect)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1get_1visible_1rect_FUNC);
@@ -13189,24 +13189,24 @@
 #endif
 
 #ifndef NO__1gtk_1text_1view_1get_1window
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1view_1get_1window)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1get_1window_FUNC);
-	rc = (jint)gtk_text_view_get_window((GtkTextView *)arg0, (GtkTextWindowType)arg1);
+	rc = (jlong)gtk_text_view_get_window((GtkTextView *)arg0, (GtkTextWindowType)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1text_1view_1get_1window_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1text_1view_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1text_1view_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1text_1view_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1new_FUNC);
-	rc = (jint)gtk_text_view_new();
+	rc = (jlong)gtk_text_view_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1text_1view_1new_FUNC);
 	return rc;
 }
@@ -13214,7 +13214,7 @@
 
 #ifndef NO__1gtk_1text_1view_1scroll_1mark_1onscreen
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1scroll_1mark_1onscreen)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1scroll_1mark_1onscreen_FUNC);
 	gtk_text_view_scroll_mark_onscreen((GtkTextView *)arg0, (GtkTextMark *)arg1);
@@ -13224,7 +13224,7 @@
 
 #ifndef NO__1gtk_1text_1view_1scroll_1to_1iter
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1text_1view_1scroll_1to_1iter)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jdouble arg2, jboolean arg3, jdouble arg4, jdouble arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jdouble arg2, jboolean arg3, jdouble arg4, jdouble arg5)
 {
 	jbyte *lparg1=NULL;
 	jboolean rc = 0;
@@ -13240,7 +13240,7 @@
 
 #ifndef NO__1gtk_1text_1view_1set_1editable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1set_1editable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1set_1editable_FUNC);
 	gtk_text_view_set_editable((GtkTextView *)arg0, (gboolean)arg1);
@@ -13250,7 +13250,7 @@
 
 #ifndef NO__1gtk_1text_1view_1set_1justification
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1set_1justification)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1set_1justification_FUNC);
 	gtk_text_view_set_justification((GtkTextView *)arg0, arg1);
@@ -13260,7 +13260,7 @@
 
 #ifndef NO__1gtk_1text_1view_1set_1tabs
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1set_1tabs)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1set_1tabs_FUNC);
 	gtk_text_view_set_tabs((GtkTextView *)arg0, (PangoTabArray *)arg1);
@@ -13270,7 +13270,7 @@
 
 #ifndef NO__1gtk_1text_1view_1set_1wrap_1mode
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1set_1wrap_1mode)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1text_1view_1set_1wrap_1mode_FUNC);
 	gtk_text_view_set_wrap_mode((GtkTextView *)arg0, arg1);
@@ -13280,7 +13280,7 @@
 
 #ifndef NO__1gtk_1text_1view_1window_1to_1buffer_1coords
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1text_1view_1window_1to_1buffer_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
 {
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
@@ -13297,7 +13297,7 @@
 
 #ifndef NO__1gtk_1timeout_1add
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1timeout_1add)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1timeout_1add_FUNC);
@@ -13319,7 +13319,7 @@
 
 #ifndef NO__1gtk_1toggle_1button_1get_1active
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1toggle_1button_1get_1active)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1get_1active_FUNC);
@@ -13331,7 +13331,7 @@
 
 #ifndef NO__1gtk_1toggle_1button_1get_1inconsistent
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1toggle_1button_1get_1inconsistent)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1get_1inconsistent_FUNC);
@@ -13342,12 +13342,12 @@
 #endif
 
 #ifndef NO__1gtk_1toggle_1button_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1toggle_1button_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1toggle_1button_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1new_FUNC);
-	rc = (jint)gtk_toggle_button_new();
+	rc = (jlong)gtk_toggle_button_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1toggle_1button_1new_FUNC);
 	return rc;
 }
@@ -13355,7 +13355,7 @@
 
 #ifndef NO__1gtk_1toggle_1button_1set_1active
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1toggle_1button_1set_1active)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1set_1active_FUNC);
 	gtk_toggle_button_set_active((GtkToggleButton *)arg0, (gboolean)arg1);
@@ -13365,7 +13365,7 @@
 
 #ifndef NO__1gtk_1toggle_1button_1set_1inconsistent
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1toggle_1button_1set_1inconsistent)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1set_1inconsistent_FUNC);
 	gtk_toggle_button_set_inconsistent((GtkToggleButton *)arg0, (gboolean)arg1);
@@ -13375,7 +13375,7 @@
 
 #ifndef NO__1gtk_1toggle_1button_1set_1mode
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1toggle_1button_1set_1mode)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1toggle_1button_1set_1mode_FUNC);
 	gtk_toggle_button_set_mode((GtkToggleButton *)arg0, (gboolean)arg1);
@@ -13385,7 +13385,7 @@
 
 #ifndef NO__1gtk_1toolbar_1insert_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1toolbar_1insert_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jint arg4)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
@@ -13401,12 +13401,12 @@
 #endif
 
 #ifndef NO__1gtk_1toolbar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1toolbar_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1toolbar_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1toolbar_1new_FUNC);
-	rc = (jint)gtk_toolbar_new();
+	rc = (jlong)gtk_toolbar_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1toolbar_1new_FUNC);
 	return rc;
 }
@@ -13414,7 +13414,7 @@
 
 #ifndef NO__1gtk_1toolbar_1set_1orientation
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1toolbar_1set_1orientation)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1toolbar_1set_1orientation_FUNC);
 	gtk_toolbar_set_orientation((GtkToolbar *)arg0, (GtkOrientation)arg1);
@@ -13424,7 +13424,7 @@
 
 #ifndef NO__1gtk_1tooltip_1trigger_1tooltip_1query
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tooltip_1trigger_1tooltip_1query)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltip_1trigger_1tooltip_1query_FUNC);
 /*
@@ -13449,12 +13449,12 @@
 #endif
 
 #ifndef NO__1gtk_1tooltips_1data_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tooltips_1data_1get)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tooltips_1data_1get)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltips_1data_1get_FUNC);
-	rc = (jint)gtk_tooltips_data_get((GtkWidget *)arg0);
+	rc = (jlong)gtk_tooltips_data_get((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tooltips_1data_1get_FUNC);
 	return rc;
 }
@@ -13462,7 +13462,7 @@
 
 #ifndef NO__1gtk_1tooltips_1disable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tooltips_1disable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltips_1disable_FUNC);
 	gtk_tooltips_disable((GtkTooltips *)arg0);
@@ -13472,7 +13472,7 @@
 
 #ifndef NO__1gtk_1tooltips_1enable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tooltips_1enable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltips_1enable_FUNC);
 	gtk_tooltips_enable((GtkTooltips *)arg0);
@@ -13482,7 +13482,7 @@
 
 #ifndef NO__1gtk_1tooltips_1force_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tooltips_1force_1window)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltips_1force_1window_FUNC);
 	gtk_tooltips_force_window((GtkTooltips *)arg0);
@@ -13491,12 +13491,12 @@
 #endif
 
 #ifndef NO__1gtk_1tooltips_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tooltips_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tooltips_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tooltips_1new_FUNC);
-	rc = (jint)gtk_tooltips_new();
+	rc = (jlong)gtk_tooltips_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1tooltips_1new_FUNC);
 	return rc;
 }
@@ -13504,7 +13504,7 @@
 
 #ifndef NO__1gtk_1tooltips_1set_1tip
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tooltips_1set_1tip)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
@@ -13519,37 +13519,37 @@
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1model_1get__III_3II
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1model_1get__III_3II)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1model_1get__JJI_3IJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1model_1get__JJI_3IJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jintArray arg3, jlong arg4)
 {
 	jint *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get__III_3II_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get__JJI_3IJ_FUNC);
 	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gtk_tree_model_get((GtkTreeModel *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get__III_3II_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get__JJI_3IJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1model_1get__III_3JI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1model_1get__III_3JI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jlongArray arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1model_1get__JJI_3JJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1model_1get__JJI_3JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlongArray arg3, jlong arg4)
 {
 	jlong *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get__III_3JI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get__JJI_3JJ_FUNC);
 	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gtk_tree_model_get((GtkTreeModel *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get__III_3JI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get__JJI_3JJ_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1model_1get_1iter
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1iter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get_1iter_FUNC);
@@ -13561,7 +13561,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1get_1iter_1first
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1iter_1first)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get_1iter_1first_FUNC);
@@ -13573,7 +13573,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1get_1n_1columns
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1n_1columns)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get_1n_1columns_FUNC);
@@ -13584,24 +13584,24 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1model_1get_1path
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1path)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1path)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get_1path_FUNC);
-	rc = (jint)gtk_tree_model_get_path((GtkTreeModel *)arg0, (GtkTreeIter *)arg1);
+	rc = (jlong)gtk_tree_model_get_path((GtkTreeModel *)arg0, (GtkTreeIter *)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get_1path_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1model_1get_1type
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1type)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1model_1get_1type)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1get_1type_FUNC);
-	rc = (jint)gtk_tree_model_get_type();
+	rc = (jlong)gtk_tree_model_get_type();
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1model_1get_1type_FUNC);
 	return rc;
 }
@@ -13609,7 +13609,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1iter_1children
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1model_1iter_1children)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1iter_1children_FUNC);
@@ -13621,7 +13621,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1iter_1n_1children
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1model_1iter_1n_1children)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1iter_1n_1children_FUNC);
@@ -13633,7 +13633,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1iter_1next
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1model_1iter_1next)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1iter_1next_FUNC);
@@ -13645,7 +13645,7 @@
 
 #ifndef NO__1gtk_1tree_1model_1iter_1nth_1child
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1model_1iter_1nth_1child)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1model_1iter_1nth_1child_FUNC);
@@ -13657,7 +13657,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1append_1index
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1path_1append_1index)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1append_1index_FUNC);
 	gtk_tree_path_append_index((GtkTreePath *)arg0, arg1);
@@ -13666,12 +13666,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1path_1compare
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1compare)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1compare)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1compare_FUNC);
-	rc = (jint)gtk_tree_path_compare((const GtkTreePath *)arg0, (const GtkTreePath *)arg1);
+	rc = (jlong)gtk_tree_path_compare((const GtkTreePath *)arg0, (const GtkTreePath *)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1compare_FUNC);
 	return rc;
 }
@@ -13679,7 +13679,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1down
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1path_1down)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1down_FUNC);
 	gtk_tree_path_down((GtkTreePath *)arg0);
@@ -13689,7 +13689,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1path_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1free_FUNC);
 	gtk_tree_path_free((GtkTreePath *)arg0);
@@ -13699,7 +13699,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1get_1depth
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1get_1depth)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1get_1depth_FUNC);
@@ -13710,62 +13710,62 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1path_1get_1indices
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1get_1indices)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1get_1indices)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1get_1indices_FUNC);
-	rc = (jint)gtk_tree_path_get_indices((GtkTreePath *)arg0);
+	rc = (jlong)gtk_tree_path_get_indices((GtkTreePath *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1get_1indices_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1path_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1new_FUNC);
-	rc = (jint)gtk_tree_path_new();
+	rc = (jlong)gtk_tree_path_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1path_1new_1first
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1first)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1first)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1new_1first_FUNC);
-	rc = (jint)gtk_tree_path_new_first();
+	rc = (jlong)gtk_tree_path_new_first();
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1new_1first_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1path_1new_1from_1string__I
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1from_1string__I)
-	(JNIEnv *env, jclass that, jint arg0)
-{
-	jint rc = 0;
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1new_1from_1string__I_FUNC);
-	rc = (jint)gtk_tree_path_new_from_string((const gchar *)arg0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1new_1from_1string__I_FUNC);
+#ifndef NO__1gtk_1tree_1path_1new_1from_1string__J
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1from_1string__J)
+	(JNIEnv *env, jclass that, jlong arg0)
+{
+	jlong rc = 0;
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1new_1from_1string__J_FUNC);
+	rc = (jlong)gtk_tree_path_new_from_string((const gchar *)arg0);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1new_1from_1string__J_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1path_1new_1from_1string___3B
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1from_1string___3B)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1path_1new_1from_1string___3B)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1new_1from_1string___3B_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_tree_path_new_from_string((const gchar *)lparg0);
+	rc = (jlong)gtk_tree_path_new_from_string((const gchar *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1path_1new_1from_1string___3B_FUNC);
@@ -13775,7 +13775,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1next
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1path_1next)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1next_FUNC);
 	gtk_tree_path_next((GtkTreePath *)arg0);
@@ -13785,7 +13785,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1prev
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1path_1prev)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1prev_FUNC);
@@ -13797,7 +13797,7 @@
 
 #ifndef NO__1gtk_1tree_1path_1up
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1path_1up)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1path_1up_FUNC);
@@ -13809,7 +13809,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1count_1selected_1rows
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1selection_1count_1selected_1rows)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1count_1selected_1rows_FUNC);
@@ -13838,35 +13838,35 @@
 
 #ifndef NO__1gtk_1tree_1selection_1get_1selected
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1selection_1get_1selected)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlong arg2)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1get_1selected_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	rc = (jboolean)gtk_tree_selection_get_selected((GtkTreeSelection *)arg0, (GtkTreeModel **)lparg1, (GtkTreeIter *)arg2);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1selection_1get_1selected_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1selection_1get_1selected_1rows
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1selection_1get_1selected_1rows)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1selection_1get_1selected_1rows)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1get_1selected_1rows_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 /*
-	rc = (jint)gtk_tree_selection_get_selected_rows((GtkTreeSelection *)arg0, (GtkTreeModel **)lparg1);
+	rc = (jlong)gtk_tree_selection_get_selected_rows((GtkTreeSelection *)arg0, (GtkTreeModel **)lparg1);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(GtkTreeSelection *, GtkTreeModel **);
+		typedef jlong (*FPTR)(GtkTreeSelection *, GtkTreeModel **);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -13875,11 +13875,11 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((GtkTreeSelection *)arg0, (GtkTreeModel **)lparg1);
+			rc = (jlong)(*fptr)((GtkTreeSelection *)arg0, (GtkTreeModel **)lparg1);
 		}
 	}
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1selection_1get_1selected_1rows_FUNC);
 	return rc;
 }
@@ -13887,7 +13887,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1path_1is_1selected
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1selection_1path_1is_1selected)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1path_1is_1selected_FUNC);
@@ -13899,7 +13899,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1select_1all
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1select_1all)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1select_1all_FUNC);
 	gtk_tree_selection_select_all((GtkTreeSelection *)arg0);
@@ -13909,7 +13909,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1select_1iter
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1select_1iter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1select_1iter_FUNC);
 	gtk_tree_selection_select_iter((GtkTreeSelection *)arg0, (GtkTreeIter *)arg1);
@@ -13919,7 +13919,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1selected_1foreach
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1selected_1foreach)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1selected_1foreach_FUNC);
 	gtk_tree_selection_selected_foreach((GtkTreeSelection *)arg0, (GtkTreeSelectionForeachFunc)arg1, (gpointer)arg2);
@@ -13929,7 +13929,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1set_1mode
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1set_1mode)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1set_1mode_FUNC);
 	gtk_tree_selection_set_mode((GtkTreeSelection *)arg0, (GtkSelectionMode)arg1);
@@ -13939,7 +13939,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1unselect_1all
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1unselect_1all)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1unselect_1all_FUNC);
 	gtk_tree_selection_unselect_all((GtkTreeSelection *)arg0);
@@ -13949,7 +13949,7 @@
 
 #ifndef NO__1gtk_1tree_1selection_1unselect_1iter
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1selection_1unselect_1iter)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1selection_1unselect_1iter_FUNC);
 	gtk_tree_selection_unselect_iter((GtkTreeSelection *)arg0, (GtkTreeIter *)arg1);
@@ -13959,7 +13959,7 @@
 
 #ifndef NO__1gtk_1tree_1store_1append
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1append)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1append_FUNC);
 	gtk_tree_store_append((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, (GtkTreeIter *)arg2);
@@ -13969,7 +13969,7 @@
 
 #ifndef NO__1gtk_1tree_1store_1clear
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1clear)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1clear_FUNC);
 	gtk_tree_store_clear((GtkTreeStore *)arg0);
@@ -13979,7 +13979,7 @@
 
 #ifndef NO__1gtk_1tree_1store_1insert
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1insert)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1insert_FUNC);
 	gtk_tree_store_insert((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, (GtkTreeIter *)arg2, (gint)arg3);
@@ -13988,16 +13988,16 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1store_1newv
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1store_1newv)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1store_1newv)
+	(JNIEnv *env, jclass that, jint arg0, jlongArray arg1)
 {
-	jint *lparg1=NULL;
-	jint rc = 0;
+	jlong *lparg1=NULL;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1newv_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_tree_store_newv(arg0, (GType *)lparg1);
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	rc = (jlong)gtk_tree_store_newv(arg0, (GType *)lparg1);
 fail:
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1newv_FUNC);
 	return rc;
 }
@@ -14005,7 +14005,7 @@
 
 #ifndef NO__1gtk_1tree_1store_1remove
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1remove)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1remove_FUNC);
 	gtk_tree_store_remove((GtkTreeStore *)arg0, (GtkTreeIter *)arg1);
@@ -14013,66 +14013,66 @@
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1store_1set__IIIII
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__IIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1store_1set__JJIIJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__JJIIJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__IIIII_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__JJIIJ_FUNC);
 	gtk_tree_store_set((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__IIIII_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__JJIIJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1store_1set__IIIJI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__IIIJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jlong arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1store_1set__JJIJJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__JJIJJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jlong arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__IIIJI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__JJIJJ_FUNC);
 	gtk_tree_store_set((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__IIIJI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__JJIJJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jobject arg3, jlong arg4)
 {
 	GdkColor _arg3, *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 	if (arg3) if ((lparg3 = getGdkColorFields(env, arg3, &_arg3)) == NULL) goto fail;
 	gtk_tree_store_set((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1store_1set__IIIZI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__IIIZI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1store_1set__JJIZJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__JJIZJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jboolean arg3, jlong arg4)
 {
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__IIIZI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__JJIZJ_FUNC);
 	gtk_tree_store_set((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, arg2, arg3, arg4);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__IIIZI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__JJIZJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1tree_1store_1set__III_3BI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__III_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4)
+#ifndef NO__1gtk_1tree_1store_1set__JJI_3BJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1store_1set__JJI_3BJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jbyteArray arg3, jlong arg4)
 {
 	jbyte *lparg3=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__III_3BI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1store_1set__JJI_3BJ_FUNC);
 	if (arg3) if ((lparg3 = (*env)->GetByteArrayElements(env, arg3, NULL)) == NULL) goto fail;
 	gtk_tree_store_set((GtkTreeStore *)arg0, (GtkTreeIter *)arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) (*env)->ReleaseByteArrayElements(env, arg3, lparg3, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__III_3BI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1store_1set__JJI_3BJ_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1collapse_1row
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1collapse_1row)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1collapse_1row_FUNC);
@@ -14084,7 +14084,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1add_1attribute
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1add_1attribute)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jbyteArray arg2, jint arg3)
 {
 	jbyte *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1add_1attribute_FUNC);
@@ -14098,7 +14098,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1cell_1get_1position
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1cell_1get_1position)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jintArray arg2, jintArray arg3)
 {
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
@@ -14134,7 +14134,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1cell_1get_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1cell_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -14160,7 +14160,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1cell_1set_1cell_1data
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1cell_1set_1cell_1data)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3, jboolean arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jboolean arg3, jboolean arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1cell_1set_1cell_1data_FUNC);
 	gtk_tree_view_column_cell_set_cell_data((GtkTreeViewColumn *)arg0, (GtkTreeModel *)arg1, (GtkTreeIter *)arg2, arg3, arg4);
@@ -14170,7 +14170,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1clear
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1clear)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1clear_FUNC);
 	gtk_tree_view_column_clear((GtkTreeViewColumn *)arg0);
@@ -14179,12 +14179,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1cell_1renderers
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1cell_1renderers)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1cell_1renderers)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1cell_1renderers_FUNC);
-	rc = (jint)gtk_tree_view_column_get_cell_renderers((GtkTreeViewColumn *)arg0);
+	rc = (jlong)gtk_tree_view_column_get_cell_renderers((GtkTreeViewColumn *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1column_1get_1cell_1renderers_FUNC);
 	return rc;
 }
@@ -14192,7 +14192,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1fixed_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1fixed_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1fixed_1width_FUNC);
@@ -14204,7 +14204,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1reorderable
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1reorderable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1reorderable_FUNC);
@@ -14216,7 +14216,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1resizable
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1resizable)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1resizable_FUNC);
@@ -14228,7 +14228,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1sizing
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1sizing)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1sizing_FUNC);
@@ -14240,7 +14240,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1sort_1indicator
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1sort_1indicator)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1sort_1indicator_FUNC);
@@ -14252,7 +14252,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1sort_1order
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1sort_1order)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1sort_1order_FUNC);
@@ -14264,7 +14264,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1spacing
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1spacing)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1spacing_FUNC);
@@ -14276,7 +14276,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1visible
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1visible)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1visible_FUNC);
@@ -14288,7 +14288,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1get_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1get_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1get_1width_FUNC);
@@ -14299,12 +14299,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1column_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1new_FUNC);
-	rc = (jint)gtk_tree_view_column_new();
+	rc = (jlong)gtk_tree_view_column_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1column_1new_FUNC);
 	return rc;
 }
@@ -14312,7 +14312,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1pack_1end
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1pack_1end)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1pack_1end_FUNC);
 	gtk_tree_view_column_pack_end((GtkTreeViewColumn *)arg0, (GtkCellRenderer *)arg1, (gboolean)arg2);
@@ -14322,7 +14322,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1pack_1start
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1pack_1start)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1pack_1start_FUNC);
 	gtk_tree_view_column_pack_start((GtkTreeViewColumn *)arg0, (GtkCellRenderer *)arg1, (gboolean)arg2);
@@ -14332,7 +14332,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1alignment
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1alignment)
-	(JNIEnv *env, jclass that, jint arg0, jfloat arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jfloat arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1alignment_FUNC);
 	gtk_tree_view_column_set_alignment((GtkTreeViewColumn *)arg0, arg1);
@@ -14342,7 +14342,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1cell_1data_1func
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1cell_1data_1func)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1cell_1data_1func_FUNC);
 	gtk_tree_view_column_set_cell_data_func((GtkTreeViewColumn *)arg0, (GtkCellRenderer *)arg1, (GtkTreeCellDataFunc)arg2, (gpointer)arg3, (GtkDestroyNotify)arg4);
@@ -14352,7 +14352,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1clickable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1clickable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1clickable_FUNC);
 	gtk_tree_view_column_set_clickable((GtkTreeViewColumn *)arg0, (gboolean)arg1);
@@ -14362,7 +14362,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1fixed_1width
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1fixed_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1fixed_1width_FUNC);
 	gtk_tree_view_column_set_fixed_width((GtkTreeViewColumn *)arg0, (gint)arg1);
@@ -14372,7 +14372,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1min_1width
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1min_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1min_1width_FUNC);
 	gtk_tree_view_column_set_min_width((GtkTreeViewColumn *)arg0, (gint)arg1);
@@ -14382,7 +14382,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1reorderable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1reorderable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1reorderable_FUNC);
 	gtk_tree_view_column_set_reorderable((GtkTreeViewColumn *)arg0, (gboolean)arg1);
@@ -14392,7 +14392,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1resizable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1resizable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1resizable_FUNC);
 	gtk_tree_view_column_set_resizable((GtkTreeViewColumn *)arg0, (gboolean)arg1);
@@ -14402,7 +14402,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1sizing
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1sizing)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1sizing_FUNC);
 	gtk_tree_view_column_set_sizing((GtkTreeViewColumn *)arg0, (GtkTreeViewColumnSizing)arg1);
@@ -14412,7 +14412,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1sort_1indicator
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1sort_1indicator)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1sort_1indicator_FUNC);
 	gtk_tree_view_column_set_sort_indicator((GtkTreeViewColumn *)arg0, (gboolean)arg1);
@@ -14422,7 +14422,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1sort_1order
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1sort_1order)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1sort_1order_FUNC);
 	gtk_tree_view_column_set_sort_order((GtkTreeViewColumn *)arg0, (GtkSortType)arg1);
@@ -14432,7 +14432,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1title
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1title)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1title_FUNC);
@@ -14446,7 +14446,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1visible
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1visible)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1visible_FUNC);
 	gtk_tree_view_column_set_visible((GtkTreeViewColumn *)arg0, arg1);
@@ -14456,7 +14456,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1column_1set_1widget
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1column_1set_1widget)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1column_1set_1widget_FUNC);
 	gtk_tree_view_column_set_widget((GtkTreeViewColumn *)arg0, (GtkWidget *)arg1);
@@ -14465,12 +14465,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1create_1row_1drag_1icon
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1create_1row_1drag_1icon)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1create_1row_1drag_1icon)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1create_1row_1drag_1icon_FUNC);
-	rc = (jint)gtk_tree_view_create_row_drag_icon((GtkTreeView *)arg0, (GtkTreePath *)arg1);
+	rc = (jlong)gtk_tree_view_create_row_drag_icon((GtkTreeView *)arg0, (GtkTreePath *)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1create_1row_1drag_1icon_FUNC);
 	return rc;
 }
@@ -14478,7 +14478,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1expand_1row
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1expand_1row)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jboolean arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jboolean arg2)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1expand_1row_FUNC);
@@ -14490,7 +14490,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1background_1area
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1background_1area)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jobject arg3)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1background_1area_FUNC);
@@ -14503,12 +14503,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1get_1bin_1window
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1bin_1window)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1bin_1window)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1bin_1window_FUNC);
-	rc = (jint)gtk_tree_view_get_bin_window((GtkTreeView *)arg0);
+	rc = (jlong)gtk_tree_view_get_bin_window((GtkTreeView *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1bin_1window_FUNC);
 	return rc;
 }
@@ -14516,7 +14516,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1cell_1area
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1cell_1area)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jobject arg3)
 {
 	GdkRectangle _arg3, *lparg3=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1cell_1area_FUNC);
@@ -14529,24 +14529,24 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1get_1column
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1column)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1column)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1column_FUNC);
-	rc = (jint)gtk_tree_view_get_column((GtkTreeView *)arg0, (gint)arg1);
+	rc = (jlong)gtk_tree_view_get_column((GtkTreeView *)arg0, (gint)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1column_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1get_1columns
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1columns)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1columns)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1columns_FUNC);
-	rc = (jint)gtk_tree_view_get_columns((GtkTreeView *)arg0);
+	rc = (jlong)gtk_tree_view_get_columns((GtkTreeView *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1columns_FUNC);
 	return rc;
 }
@@ -14554,28 +14554,28 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1cursor
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1cursor)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlongArray arg2)
 {
-	jint *lparg1=NULL;
-	jint *lparg2=NULL;
+	jlong *lparg1=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1cursor_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_tree_view_get_cursor((GtkTreeView *)arg0, (GtkTreePath **)lparg1, (GtkTreeViewColumn **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1cursor_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1get_1expander_1column
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1expander_1column)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1expander_1column)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1expander_1column_FUNC);
-	rc = (jint)gtk_tree_view_get_expander_column((GtkTreeView *)arg0);
+	rc = (jlong)gtk_tree_view_get_expander_column((GtkTreeView *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1expander_1column_FUNC);
 	return rc;
 }
@@ -14583,7 +14583,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1headers_1visible
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1headers_1visible)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1headers_1visible_FUNC);
@@ -14595,24 +14595,24 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1path_1at_1pos
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1path_1at_1pos)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jlongArray arg3, jlongArray arg4, jintArray arg5, jintArray arg6)
 {
-	jint *lparg3=NULL;
-	jint *lparg4=NULL;
+	jlong *lparg3=NULL;
+	jlong *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint *lparg6=NULL;
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1path_1at_1pos_FUNC);
-	if (arg3) if ((lparg3 = (*env)->GetIntArrayElements(env, arg3, NULL)) == NULL) goto fail;
-	if (arg4) if ((lparg4 = (*env)->GetIntArrayElements(env, arg4, NULL)) == NULL) goto fail;
+	if (arg3) if ((lparg3 = (*env)->GetLongArrayElements(env, arg3, NULL)) == NULL) goto fail;
+	if (arg4) if ((lparg4 = (*env)->GetLongArrayElements(env, arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = (*env)->GetIntArrayElements(env, arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = (*env)->GetIntArrayElements(env, arg6, NULL)) == NULL) goto fail;
 	rc = (jboolean)gtk_tree_view_get_path_at_pos((GtkTreeView *)arg0, (gint)arg1, (gint)arg2, (GtkTreePath **)lparg3, (GtkTreeViewColumn **)lparg4, (gint *)lparg5, (gint *)lparg6);
 fail:
 	if (arg6 && lparg6) (*env)->ReleaseIntArrayElements(env, arg6, lparg6, 0);
 	if (arg5 && lparg5) (*env)->ReleaseIntArrayElements(env, arg5, lparg5, 0);
-	if (arg4 && lparg4) (*env)->ReleaseIntArrayElements(env, arg4, lparg4, 0);
-	if (arg3 && lparg3) (*env)->ReleaseIntArrayElements(env, arg3, lparg3, 0);
+	if (arg4 && lparg4) (*env)->ReleaseLongArrayElements(env, arg4, lparg4, 0);
+	if (arg3 && lparg3) (*env)->ReleaseLongArrayElements(env, arg3, lparg3, 0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1path_1at_1pos_FUNC);
 	return rc;
 }
@@ -14620,7 +14620,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1rules_1hint
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1rules_1hint)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1rules_1hint_FUNC);
@@ -14631,12 +14631,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1get_1selection
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1selection)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1selection)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1selection_FUNC);
-	rc = (jint)gtk_tree_view_get_selection((GtkTreeView *)arg0);
+	rc = (jlong)gtk_tree_view_get_selection((GtkTreeView *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1get_1selection_FUNC);
 	return rc;
 }
@@ -14644,7 +14644,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1get_1visible_1rect
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1get_1visible_1rect)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GdkRectangle _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1get_1visible_1rect_FUNC);
@@ -14658,7 +14658,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1insert_1column
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1insert_1column)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1insert_1column_FUNC);
@@ -14670,7 +14670,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1move_1column_1after
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1move_1column_1after)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1move_1column_1after_FUNC);
 	gtk_tree_view_move_column_after((GtkTreeView *)arg0, (GtkTreeViewColumn *)arg1, (GtkTreeViewColumn *)arg2);
@@ -14679,12 +14679,12 @@
 #endif
 
 #ifndef NO__1gtk_1tree_1view_1new_1with_1model
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1tree_1view_1new_1with_1model)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1tree_1view_1new_1with_1model)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1new_1with_1model_FUNC);
-	rc = (jint)gtk_tree_view_new_with_model((GtkTreeModel *)arg0);
+	rc = (jlong)gtk_tree_view_new_with_model((GtkTreeModel *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1tree_1view_1new_1with_1model_FUNC);
 	return rc;
 }
@@ -14692,7 +14692,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1remove_1column
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1remove_1column)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1remove_1column_FUNC);
 	gtk_tree_view_remove_column((GtkTreeView *)arg0, (GtkTreeViewColumn *)arg1);
@@ -14702,7 +14702,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1row_1expanded
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1tree_1view_1row_1expanded)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1row_1expanded_FUNC);
@@ -14714,7 +14714,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1scroll_1to_1cell
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1scroll_1to_1cell)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3, jfloat arg4, jfloat arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jboolean arg3, jfloat arg4, jfloat arg5)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1scroll_1to_1cell_FUNC);
 	gtk_tree_view_scroll_to_cell((GtkTreeView *)arg0, (GtkTreePath *)arg1, (GtkTreeViewColumn *)arg2, (gboolean)arg3, (gfloat)arg4, (gfloat)arg5);
@@ -14724,7 +14724,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1scroll_1to_1point
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1scroll_1to_1point)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1scroll_1to_1point_FUNC);
 	gtk_tree_view_scroll_to_point((GtkTreeView *)arg0, (gint)arg1, (gint)arg2);
@@ -14734,7 +14734,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1cursor
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1cursor)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jboolean arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jboolean arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1cursor_FUNC);
 	gtk_tree_view_set_cursor((GtkTreeView *)arg0, (GtkTreePath *)arg1, (GtkTreeViewColumn *)arg2, arg3);
@@ -14744,7 +14744,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1drag_1dest_1row
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1drag_1dest_1row)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1drag_1dest_1row_FUNC);
 	gtk_tree_view_set_drag_dest_row((GtkTreeView *)arg0, (GtkTreePath *)arg1, arg2);
@@ -14754,7 +14754,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1enable_1search
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1enable_1search)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1enable_1search_FUNC);
 	gtk_tree_view_set_enable_search((GtkTreeView *)arg0, arg1);
@@ -14764,7 +14764,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1headers_1visible
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1headers_1visible)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1headers_1visible_FUNC);
 	gtk_tree_view_set_headers_visible((GtkTreeView *)arg0, (gboolean)arg1);
@@ -14774,7 +14774,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1model
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1model)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1model_FUNC);
 	gtk_tree_view_set_model((GtkTreeView *)arg0, (GtkTreeModel *)arg1);
@@ -14784,7 +14784,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1rules_1hint
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1rules_1hint)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1rules_1hint_FUNC);
 	gtk_tree_view_set_rules_hint((GtkTreeView *)arg0, arg1);
@@ -14794,7 +14794,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1set_1search_1column
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1set_1search_1column)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1set_1search_1column_FUNC);
 	gtk_tree_view_set_search_column((GtkTreeView *)arg0, (gint)arg1);
@@ -14804,7 +14804,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1tree_1to_1widget_1coords
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1tree_1to_1widget_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
 {
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
@@ -14821,7 +14821,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1unset_1rows_1drag_1dest
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1unset_1rows_1drag_1dest)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1tree_1view_1unset_1rows_1drag_1dest_FUNC);
 	gtk_tree_view_unset_rows_drag_dest((GtkTreeView *)arg0);
@@ -14831,7 +14831,7 @@
 
 #ifndef NO__1gtk_1tree_1view_1widget_1to_1tree_1coords
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1tree_1view_1widget_1to_1tree_1coords)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
 {
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
@@ -14847,48 +14847,48 @@
 #endif
 
 #ifndef NO__1gtk_1vbox_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1vbox_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1vbox_1new)
 	(JNIEnv *env, jclass that, jboolean arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1vbox_1new_FUNC);
-	rc = (jint)gtk_vbox_new((gboolean)arg0, (gint)arg1);
+	rc = (jlong)gtk_vbox_new((gboolean)arg0, (gint)arg1);
 	OS_NATIVE_EXIT(env, that, _1gtk_1vbox_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1vscale_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1vscale_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1vscale_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1vscale_1new_FUNC);
-	rc = (jint)gtk_vscale_new((GtkAdjustment *)arg0);
+	rc = (jlong)gtk_vscale_new((GtkAdjustment *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1vscale_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1vscrollbar_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1vscrollbar_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1vscrollbar_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1vscrollbar_1new_FUNC);
-	rc = (jint)gtk_vscrollbar_new((GtkAdjustment *)arg0);
+	rc = (jlong)gtk_vscrollbar_new((GtkAdjustment *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1vscrollbar_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1vseparator_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1vseparator_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1vseparator_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1vseparator_1new_FUNC);
-	rc = (jint)gtk_vseparator_new();
+	rc = (jlong)gtk_vseparator_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1vseparator_1new_FUNC);
 	return rc;
 }
@@ -14896,7 +14896,7 @@
 
 #ifndef NO__1gtk_1widget_1add_1accelerator
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1add_1accelerator)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlong arg2, jint arg3, jint arg4, jint arg5)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1add_1accelerator_FUNC);
@@ -14910,7 +14910,7 @@
 
 #ifndef NO__1gtk_1widget_1add_1events
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1add_1events)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1add_1events_FUNC);
 	gtk_widget_add_events((GtkWidget *)arg0, (gint)arg1);
@@ -14920,7 +14920,7 @@
 
 #ifndef NO__1gtk_1widget_1child_1focus
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1child_1focus)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1child_1focus_FUNC);
@@ -14930,37 +14930,37 @@
 }
 #endif
 
-#ifndef NO__1gtk_1widget_1create_1pango_1layout__II
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1create_1pango_1layout__II)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+#ifndef NO__1gtk_1widget_1create_1pango_1layout__JJ
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1create_1pango_1layout__JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
-	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1create_1pango_1layout__II_FUNC);
-	rc = (jint)gtk_widget_create_pango_layout((GtkWidget *)arg0, (const gchar *)arg1);
-	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1create_1pango_1layout__II_FUNC);
+	jlong rc = 0;
+	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1create_1pango_1layout__JJ_FUNC);
+	rc = (jlong)gtk_widget_create_pango_layout((GtkWidget *)arg0, (const gchar *)arg1);
+	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1create_1pango_1layout__JJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO__1gtk_1widget_1create_1pango_1layout__I_3B
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1create_1pango_1layout__I_3B)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+#ifndef NO__1gtk_1widget_1create_1pango_1layout__J_3B
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1create_1pango_1layout__J_3B)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
-	jint rc = 0;
-	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1create_1pango_1layout__I_3B_FUNC);
+	jlong rc = 0;
+	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1create_1pango_1layout__J_3B_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)gtk_widget_create_pango_layout((GtkWidget *)arg0, (const gchar *)lparg1);
+	rc = (jlong)gtk_widget_create_pango_layout((GtkWidget *)arg0, (const gchar *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1create_1pango_1layout__I_3B_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1create_1pango_1layout__J_3B_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1widget_1destroy
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1destroy_FUNC);
 	gtk_widget_destroy((GtkWidget *)arg0);
@@ -14970,7 +14970,7 @@
 
 #ifndef NO__1gtk_1widget_1event
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1event)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1event_FUNC);
@@ -14981,12 +14981,12 @@
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1accessible
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1accessible)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1accessible)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1accessible_FUNC);
-	rc = (jint)gtk_widget_get_accessible((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_accessible((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1accessible_FUNC);
 	return rc;
 }
@@ -14994,7 +14994,7 @@
 
 #ifndef NO__1gtk_1widget_1get_1child_1visible
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1get_1child_1visible)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1child_1visible_FUNC);
@@ -15017,12 +15017,12 @@
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1default_1style
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1default_1style)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1default_1style)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1default_1style_FUNC);
-	rc = (jint)gtk_widget_get_default_style();
+	rc = (jlong)gtk_widget_get_default_style();
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1default_1style_FUNC);
 	return rc;
 }
@@ -15030,7 +15030,7 @@
 
 #ifndef NO__1gtk_1widget_1get_1direction
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1direction)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1direction_FUNC);
@@ -15042,7 +15042,7 @@
 
 #ifndef NO__1gtk_1widget_1get_1events
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1events)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1events_FUNC);
@@ -15053,36 +15053,36 @@
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1modifier_1style
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1modifier_1style)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1modifier_1style)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1modifier_1style_FUNC);
-	rc = (jint)gtk_widget_get_modifier_style((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_modifier_style((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1modifier_1style_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1pango_1context
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1pango_1context)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1pango_1context)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1pango_1context_FUNC);
-	rc = (jint)gtk_widget_get_pango_context((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_pango_context((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1pango_1context_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1parent
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1parent)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1parent)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1parent_FUNC);
-	rc = (jint)gtk_widget_get_parent((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_parent((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1parent_FUNC);
 	return rc;
 }
@@ -15090,7 +15090,7 @@
 
 #ifndef NO__1gtk_1widget_1get_1size_1request
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1get_1size_1request)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -15106,24 +15106,24 @@
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1style
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1style)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1style)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1style_FUNC);
-	rc = (jint)gtk_widget_get_style((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_style((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1style_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1widget_1get_1toplevel
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1get_1toplevel)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1widget_1get_1toplevel)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1get_1toplevel_FUNC);
-	rc = (jint)gtk_widget_get_toplevel((GtkWidget *)arg0);
+	rc = (jlong)gtk_widget_get_toplevel((GtkWidget *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1get_1toplevel_FUNC);
 	return rc;
 }
@@ -15131,7 +15131,7 @@
 
 #ifndef NO__1gtk_1widget_1grab_1focus
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1grab_1focus)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1grab_1focus_FUNC);
 	gtk_widget_grab_focus((GtkWidget *)arg0);
@@ -15141,7 +15141,7 @@
 
 #ifndef NO__1gtk_1widget_1hide
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1hide)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1hide_FUNC);
 	gtk_widget_hide((GtkWidget *)arg0);
@@ -15151,7 +15151,7 @@
 
 #ifndef NO__1gtk_1widget_1is_1composited
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1is_1composited)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1is_1composited_FUNC);
@@ -15180,7 +15180,7 @@
 
 #ifndef NO__1gtk_1widget_1is_1focus
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1is_1focus)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1is_1focus_FUNC);
@@ -15192,7 +15192,7 @@
 
 #ifndef NO__1gtk_1widget_1map
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1map)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1map_FUNC);
 	gtk_widget_map((GtkWidget *)arg0);
@@ -15202,7 +15202,7 @@
 
 #ifndef NO__1gtk_1widget_1mnemonic_1activate
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1mnemonic_1activate)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1mnemonic_1activate_FUNC);
@@ -15214,7 +15214,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1base
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1base)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1base_FUNC);
@@ -15227,7 +15227,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1bg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1bg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1bg_FUNC);
@@ -15240,7 +15240,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1fg
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1fg)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1fg_FUNC);
@@ -15253,7 +15253,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1font
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1font)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1font_FUNC);
 	gtk_widget_modify_font((GtkWidget *)arg0, (PangoFontDescription *)arg1);
@@ -15263,7 +15263,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1style
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1style)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1style_FUNC);
 	gtk_widget_modify_style((GtkWidget *)arg0, (GtkRcStyle *)arg1);
@@ -15273,7 +15273,7 @@
 
 #ifndef NO__1gtk_1widget_1modify_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1modify_1text)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	GdkColor _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1modify_1text_FUNC);
@@ -15286,7 +15286,7 @@
 
 #ifndef NO__1gtk_1widget_1queue_1resize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1queue_1resize)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1queue_1resize_FUNC);
 	gtk_widget_queue_resize((GtkWidget *)arg0);
@@ -15296,7 +15296,7 @@
 
 #ifndef NO__1gtk_1widget_1realize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1realize)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1realize_FUNC);
 	gtk_widget_realize((GtkWidget *)arg0);
@@ -15306,7 +15306,7 @@
 
 #ifndef NO__1gtk_1widget_1remove_1accelerator
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1remove_1accelerator)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1remove_1accelerator_FUNC);
 	gtk_widget_remove_accelerator((GtkWidget *)arg0, (GtkAccelGroup *)arg1, (guint)arg2, (GdkModifierType)arg3);
@@ -15316,7 +15316,7 @@
 
 #ifndef NO__1gtk_1widget_1reparent
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1reparent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1reparent_FUNC);
 	gtk_widget_reparent((GtkWidget *)arg0, (GtkWidget *)arg1);
@@ -15326,7 +15326,7 @@
 
 #ifndef NO__1gtk_1widget_1send_1expose
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1widget_1send_1expose)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1send_1expose_FUNC);
@@ -15338,7 +15338,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1app_1paintable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1app_1paintable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1app_1paintable_FUNC);
 	gtk_widget_set_app_paintable((GtkWidget *)arg0, arg1);
@@ -15358,7 +15358,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1direction
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1direction)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1direction_FUNC);
 	gtk_widget_set_direction((GtkWidget *)arg0, (GtkTextDirection)arg1);
@@ -15368,7 +15368,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1double_1buffered
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1double_1buffered)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1double_1buffered_FUNC);
 	gtk_widget_set_double_buffered((GtkWidget *)arg0, (gboolean)arg1);
@@ -15378,7 +15378,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1name
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1name)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1name_FUNC);
@@ -15392,7 +15392,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1parent_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1parent_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1parent_1window_FUNC);
 	gtk_widget_set_parent_window((GtkWidget *)arg0, (GdkWindow *)arg1);
@@ -15402,7 +15402,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1redraw_1on_1allocate
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1redraw_1on_1allocate)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1redraw_1on_1allocate_FUNC);
 	gtk_widget_set_redraw_on_allocate((GtkWidget *)arg0, (gboolean)arg1);
@@ -15412,7 +15412,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1sensitive
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1sensitive)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1sensitive_FUNC);
 	gtk_widget_set_sensitive((GtkWidget *)arg0, (gboolean)arg1);
@@ -15422,7 +15422,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1size_1request
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1size_1request)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1size_1request_FUNC);
 	gtk_widget_set_size_request((GtkWidget *)arg0, (gint)arg1, (gint)arg2);
@@ -15432,7 +15432,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1state
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1state)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1state_FUNC);
 	gtk_widget_set_state((GtkWidget *)arg0, (GtkStateType)arg1);
@@ -15442,7 +15442,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1style
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1style)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1style_FUNC);
 	gtk_widget_set_style((GtkWidget *)arg0, (GtkStyle *)arg1);
@@ -15452,7 +15452,7 @@
 
 #ifndef NO__1gtk_1widget_1set_1tooltip_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1set_1tooltip_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1set_1tooltip_1text_FUNC);
@@ -15482,7 +15482,7 @@
 
 #ifndef NO__1gtk_1widget_1shape_1combine_1mask
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1shape_1combine_1mask)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1shape_1combine_1mask_FUNC);
 	gtk_widget_shape_combine_mask((GtkWidget *)arg0, (GdkBitmap *)arg1, (gint)arg2, (gint)arg3);
@@ -15492,7 +15492,7 @@
 
 #ifndef NO__1gtk_1widget_1show
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1show)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1show_FUNC);
 	gtk_widget_show((GtkWidget *)arg0);
@@ -15502,7 +15502,7 @@
 
 #ifndef NO__1gtk_1widget_1show_1now
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1show_1now)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1show_1now_FUNC);
 	gtk_widget_show_now((GtkWidget *)arg0);
@@ -15512,7 +15512,7 @@
 
 #ifndef NO__1gtk_1widget_1size_1allocate
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1size_1allocate)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GtkAllocation _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1size_1allocate_FUNC);
@@ -15525,7 +15525,7 @@
 
 #ifndef NO__1gtk_1widget_1size_1request
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1size_1request)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
 	GtkRequisition _arg1, *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1size_1request_FUNC);
@@ -15537,43 +15537,43 @@
 }
 #endif
 
-#ifndef NO__1gtk_1widget_1style_1get__I_3B_3II
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1style_1get__I_3B_3II)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jintArray arg2, jint arg3)
+#ifndef NO__1gtk_1widget_1style_1get__J_3B_3IJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1style_1get__J_3B_3IJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jintArray arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	jint *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1style_1get__I_3B_3II_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1style_1get__J_3B_3IJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_widget_style_get((GtkWidget *)arg0, (const gchar *)lparg1, lparg2, (const gchar *)NULL);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1style_1get__I_3B_3II_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1style_1get__J_3B_3IJ_FUNC);
 }
 #endif
 
-#ifndef NO__1gtk_1widget_1style_1get__I_3B_3JI
-JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1style_1get__I_3B_3JI)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jlongArray arg2, jint arg3)
+#ifndef NO__1gtk_1widget_1style_1get__J_3B_3JJ
+JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1style_1get__J_3B_3JJ)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jlongArray arg2, jlong arg3)
 {
 	jbyte *lparg1=NULL;
 	jlong *lparg2=NULL;
-	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1style_1get__I_3B_3JI_FUNC);
+	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1style_1get__J_3B_3JJ_FUNC);
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	gtk_widget_style_get((GtkWidget *)arg0, (const gchar *)lparg1, lparg2, (const gchar *)NULL);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
-	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1style_1get__I_3B_3JI_FUNC);
+	OS_NATIVE_EXIT(env, that, _1gtk_1widget_1style_1get__J_3B_3JJ_FUNC);
 }
 #endif
 
 #ifndef NO__1gtk_1widget_1translate_1coordinates
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1widget_1translate_1coordinates)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jint arg2, jint arg3, jintArray arg4, jintArray arg5)
 {
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
@@ -15592,7 +15592,7 @@
 
 #ifndef NO__1gtk_1widget_1unrealize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1widget_1unrealize)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1widget_1unrealize_FUNC);
 	gtk_widget_unrealize((GtkWidget *)arg0);
@@ -15602,7 +15602,7 @@
 
 #ifndef NO__1gtk_1window_1activate_1default
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1window_1activate_1default)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1activate_1default_FUNC);
@@ -15614,7 +15614,7 @@
 
 #ifndef NO__1gtk_1window_1add_1accel_1group
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1add_1accel_1group)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1add_1accel_1group_FUNC);
 	gtk_window_add_accel_group((GtkWindow *)arg0, (GtkAccelGroup *)arg1);
@@ -15624,7 +15624,7 @@
 
 #ifndef NO__1gtk_1window_1deiconify
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1deiconify)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1deiconify_FUNC);
 	gtk_window_deiconify((GtkWindow *)arg0);
@@ -15634,7 +15634,7 @@
 
 #ifndef NO__1gtk_1window_1fullscreen
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1fullscreen)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1fullscreen_FUNC);
 	gtk_window_fullscreen((GtkWindow *)arg0);
@@ -15643,30 +15643,30 @@
 #endif
 
 #ifndef NO__1gtk_1window_1get_1focus
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1get_1focus)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1get_1focus)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1focus_FUNC);
-	rc = (jint)gtk_window_get_focus((GtkWindow *)arg0);
+	rc = (jlong)gtk_window_get_focus((GtkWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1get_1focus_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1gtk_1window_1get_1group
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1get_1group)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1get_1group)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1group_FUNC);
 /*
-	rc = (jint)gtk_window_get_group((GtkWindow *)arg0);
+	rc = (jlong)gtk_window_get_group((GtkWindow *)arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(GtkWindow *);
+		typedef jlong (*FPTR)(GtkWindow *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -15675,7 +15675,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((GtkWindow *)arg0);
+			rc = (jlong)(*fptr)((GtkWindow *)arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1get_1group_FUNC);
@@ -15684,12 +15684,12 @@
 #endif
 
 #ifndef NO__1gtk_1window_1get_1icon_1list
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1get_1icon_1list)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1get_1icon_1list)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1icon_1list_FUNC);
-	rc = (jint)gtk_window_get_icon_list((GtkWindow *)arg0);
+	rc = (jlong)gtk_window_get_icon_list((GtkWindow *)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1get_1icon_1list_FUNC);
 	return rc;
 }
@@ -15697,7 +15697,7 @@
 
 #ifndef NO__1gtk_1window_1get_1mnemonic_1modifier
 JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1get_1mnemonic_1modifier)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1mnemonic_1modifier_FUNC);
@@ -15709,7 +15709,7 @@
 
 #ifndef NO__1gtk_1window_1get_1modal
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1gtk_1window_1get_1modal)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1modal_FUNC);
@@ -15721,7 +15721,7 @@
 
 #ifndef NO__1gtk_1window_1get_1opacity
 JNIEXPORT jdouble JNICALL OS_NATIVE(_1gtk_1window_1get_1opacity)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jdouble rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1get_1opacity_FUNC);
@@ -15750,7 +15750,7 @@
 
 #ifndef NO__1gtk_1window_1get_1position
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1get_1position)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -15767,7 +15767,7 @@
 
 #ifndef NO__1gtk_1window_1get_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -15784,7 +15784,7 @@
 
 #ifndef NO__1gtk_1window_1group_1add_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1group_1add_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1group_1add_1window_FUNC);
 	gtk_window_group_add_window((GtkWindowGroup*)arg0, (GtkWindow*)arg1);
@@ -15793,12 +15793,12 @@
 #endif
 
 #ifndef NO__1gtk_1window_1group_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1group_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1group_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1group_1new_FUNC);
-	rc = (jint)gtk_window_group_new();
+	rc = (jlong)gtk_window_group_new();
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1group_1new_FUNC);
 	return rc;
 }
@@ -15806,7 +15806,7 @@
 
 #ifndef NO__1gtk_1window_1group_1remove_1window
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1group_1remove_1window)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1group_1remove_1window_FUNC);
 	gtk_window_group_remove_window((GtkWindowGroup*)arg0, (GtkWindow*)arg1);
@@ -15816,7 +15816,7 @@
 
 #ifndef NO__1gtk_1window_1iconify
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1iconify)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1iconify_FUNC);
 	gtk_window_iconify((GtkWindow *)arg0);
@@ -15825,12 +15825,12 @@
 #endif
 
 #ifndef NO__1gtk_1window_1list_1toplevels
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1list_1toplevels)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1list_1toplevels)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1list_1toplevels_FUNC);
-	rc = (jint)gtk_window_list_toplevels();
+	rc = (jlong)gtk_window_list_toplevels();
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1list_1toplevels_FUNC);
 	return rc;
 }
@@ -15838,7 +15838,7 @@
 
 #ifndef NO__1gtk_1window_1maximize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1maximize)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1maximize_FUNC);
 	gtk_window_maximize((GtkWindow *)arg0);
@@ -15848,7 +15848,7 @@
 
 #ifndef NO__1gtk_1window_1move
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1move)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1move_FUNC);
 	gtk_window_move((GtkWindow *)arg0, (gint)arg1, (gint)arg2);
@@ -15857,12 +15857,12 @@
 #endif
 
 #ifndef NO__1gtk_1window_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1gtk_1window_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1gtk_1window_1new)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1new_FUNC);
-	rc = (jint)gtk_window_new((GtkWindowType)arg0);
+	rc = (jlong)gtk_window_new((GtkWindowType)arg0);
 	OS_NATIVE_EXIT(env, that, _1gtk_1window_1new_FUNC);
 	return rc;
 }
@@ -15870,7 +15870,7 @@
 
 #ifndef NO__1gtk_1window_1present
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1present)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1present_FUNC);
 	gtk_window_present((GtkWindow *)arg0);
@@ -15880,7 +15880,7 @@
 
 #ifndef NO__1gtk_1window_1remove_1accel_1group
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1remove_1accel_1group)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1remove_1accel_1group_FUNC);
 	gtk_window_remove_accel_group((GtkWindow *)arg0, (GtkAccelGroup *)arg1);
@@ -15890,7 +15890,7 @@
 
 #ifndef NO__1gtk_1window_1resize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1resize)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1resize_FUNC);
 	gtk_window_resize((GtkWindow *)arg0, (gint)arg1, (gint)arg2);
@@ -15900,7 +15900,7 @@
 
 #ifndef NO__1gtk_1window_1set_1default
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1default)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1default_FUNC);
 	gtk_window_set_default((GtkWindow *)arg0, (GtkWidget *)arg1);
@@ -15910,7 +15910,7 @@
 
 #ifndef NO__1gtk_1window_1set_1destroy_1with_1parent
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1destroy_1with_1parent)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1destroy_1with_1parent_FUNC);
 	gtk_window_set_destroy_with_parent((GtkWindow *)arg0, (gboolean)arg1);
@@ -15920,7 +15920,7 @@
 
 #ifndef NO__1gtk_1window_1set_1geometry_1hints
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1geometry_1hints)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jobject arg2, jint arg3)
 {
 	GdkGeometry _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1geometry_1hints_FUNC);
@@ -15933,7 +15933,7 @@
 
 #ifndef NO__1gtk_1window_1set_1icon_1list
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1icon_1list)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1icon_1list_FUNC);
 	gtk_window_set_icon_list((GtkWindow *)arg0, (GList *)arg1);
@@ -15943,7 +15943,7 @@
 
 #ifndef NO__1gtk_1window_1set_1keep_1below
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1keep_1below)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1keep_1below_FUNC);
 /*
@@ -15969,7 +15969,7 @@
 
 #ifndef NO__1gtk_1window_1set_1modal
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1modal)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1modal_FUNC);
 	gtk_window_set_modal((GtkWindow *)arg0, (gboolean)arg1);
@@ -15979,7 +15979,7 @@
 
 #ifndef NO__1gtk_1window_1set_1opacity
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1opacity)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1opacity_FUNC);
 /*
@@ -16005,7 +16005,7 @@
 
 #ifndef NO__1gtk_1window_1set_1resizable
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1resizable)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1resizable_FUNC);
 	gtk_window_set_resizable((GtkWindow *)arg0, (gboolean)arg1);
@@ -16015,7 +16015,7 @@
 
 #ifndef NO__1gtk_1window_1set_1skip_1taskbar_1hint
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1skip_1taskbar_1hint)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1skip_1taskbar_1hint_FUNC);
 /*
@@ -16041,7 +16041,7 @@
 
 #ifndef NO__1gtk_1window_1set_1title
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1title)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1title_FUNC);
@@ -16055,7 +16055,7 @@
 
 #ifndef NO__1gtk_1window_1set_1transient_1for
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1transient_1for)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1transient_1for_FUNC);
 	gtk_window_set_transient_for((GtkWindow *)arg0, (GtkWindow *)arg1);
@@ -16065,7 +16065,7 @@
 
 #ifndef NO__1gtk_1window_1set_1type_1hint
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1set_1type_1hint)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1set_1type_1hint_FUNC);
 	gtk_window_set_type_hint((GtkWindow *)arg0, arg1);
@@ -16075,7 +16075,7 @@
 
 #ifndef NO__1gtk_1window_1unfullscreen
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1unfullscreen)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1unfullscreen_FUNC);
 	gtk_window_unfullscreen((GtkWindow *)arg0);
@@ -16085,7 +16085,7 @@
 
 #ifndef NO__1gtk_1window_1unmaximize
 JNIEXPORT void JNICALL OS_NATIVE(_1gtk_1window_1unmaximize)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1gtk_1window_1unmaximize_FUNC);
 	gtk_window_unmaximize((GtkWindow *)arg0);
@@ -16094,36 +16094,36 @@
 #endif
 
 #ifndef NO__1pango_1attr_1background_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1background_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1background_1new)
 	(JNIEnv *env, jclass that, jshort arg0, jshort arg1, jshort arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1background_1new_FUNC);
-	rc = (jint)pango_attr_background_new(arg0, arg1, arg2);
+	rc = (jlong)pango_attr_background_new(arg0, arg1, arg2);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1background_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1font_1desc_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1font_1desc_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1font_1desc_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1font_1desc_1new_FUNC);
-	rc = (jint)pango_attr_font_desc_new((const PangoFontDescription *)arg0);
+	rc = (jlong)pango_attr_font_desc_new((const PangoFontDescription *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1font_1desc_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1foreground_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1foreground_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1foreground_1new)
 	(JNIEnv *env, jclass that, jshort arg0, jshort arg1, jshort arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1foreground_1new_FUNC);
-	rc = (jint)pango_attr_foreground_new(arg0, arg1, arg2);
+	rc = (jlong)pango_attr_foreground_new(arg0, arg1, arg2);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1foreground_1new_FUNC);
 	return rc;
 }
@@ -16131,7 +16131,7 @@
 
 #ifndef NO__1pango_1attr_1iterator_1destroy
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1attr_1iterator_1destroy)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1iterator_1destroy_FUNC);
 	pango_attr_iterator_destroy((PangoAttrIterator *)arg0);
@@ -16140,24 +16140,24 @@
 #endif
 
 #ifndef NO__1pango_1attr_1iterator_1get
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1iterator_1get)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1iterator_1get)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1iterator_1get_FUNC);
-	rc = (jint)pango_attr_iterator_get((PangoAttrIterator *)arg0, (PangoAttrType)arg1);
+	rc = (jlong)pango_attr_iterator_get((PangoAttrIterator *)arg0, (PangoAttrType)arg1);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1iterator_1get_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1iterator_1get_1attrs
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1iterator_1get_1attrs)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1iterator_1get_1attrs)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1iterator_1get_1attrs_FUNC);
-	rc = (jint)pango_attr_iterator_get_attrs((PangoAttrIterator *)arg0);
+	rc = (jlong)pango_attr_iterator_get_attrs((PangoAttrIterator *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1iterator_1get_1attrs_FUNC);
 	return rc;
 }
@@ -16165,7 +16165,7 @@
 
 #ifndef NO__1pango_1attr_1iterator_1next
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1attr_1iterator_1next)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1iterator_1next_FUNC);
@@ -16177,7 +16177,7 @@
 
 #ifndef NO__1pango_1attr_1iterator_1range
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1attr_1iterator_1range)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -16194,7 +16194,7 @@
 
 #ifndef NO__1pango_1attr_1list_1change
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1attr_1list_1change)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1list_1change_FUNC);
 	pango_attr_list_change((PangoAttrList *)arg0, (PangoAttribute *)arg1);
@@ -16203,12 +16203,12 @@
 #endif
 
 #ifndef NO__1pango_1attr_1list_1get_1iterator
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1list_1get_1iterator)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1list_1get_1iterator)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1list_1get_1iterator_FUNC);
-	rc = (jint)pango_attr_list_get_iterator((PangoAttrList *)arg0);
+	rc = (jlong)pango_attr_list_get_iterator((PangoAttrList *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1list_1get_1iterator_FUNC);
 	return rc;
 }
@@ -16216,7 +16216,7 @@
 
 #ifndef NO__1pango_1attr_1list_1insert
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1attr_1list_1insert)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1list_1insert_FUNC);
 	pango_attr_list_insert((PangoAttrList *)arg0, (PangoAttribute *)arg1);
@@ -16225,12 +16225,12 @@
 #endif
 
 #ifndef NO__1pango_1attr_1list_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1list_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1list_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1list_1new_FUNC);
-	rc = (jint)pango_attr_list_new();
+	rc = (jlong)pango_attr_list_new();
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1list_1new_FUNC);
 	return rc;
 }
@@ -16238,7 +16238,7 @@
 
 #ifndef NO__1pango_1attr_1list_1unref
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1attr_1list_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1list_1unref_FUNC);
 	pango_attr_list_unref((PangoAttrList *)arg0);
@@ -16247,28 +16247,28 @@
 #endif
 
 #ifndef NO__1pango_1attr_1rise_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1rise_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1rise_1new)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1rise_1new_FUNC);
-	rc = (jint)pango_attr_rise_new(arg0);
+	rc = (jlong)pango_attr_rise_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1rise_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1shape_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1shape_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1shape_1new)
 	(JNIEnv *env, jclass that, jobject arg0, jobject arg1)
 {
 	PangoRectangle _arg0, *lparg0=NULL;
 	PangoRectangle _arg1, *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1shape_1new_FUNC);
 	if (arg0) if ((lparg0 = getPangoRectangleFields(env, arg0, &_arg0)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = getPangoRectangleFields(env, arg1, &_arg1)) == NULL) goto fail;
-	rc = (jint)pango_attr_shape_new(lparg0, lparg1);
+	rc = (jlong)pango_attr_shape_new(lparg0, lparg1);
 fail:
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1shape_1new_FUNC);
 	return rc;
@@ -16276,18 +16276,18 @@
 #endif
 
 #ifndef NO__1pango_1attr_1strikethrough_1color_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1strikethrough_1color_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1strikethrough_1color_1new)
 	(JNIEnv *env, jclass that, jshort arg0, jshort arg1, jshort arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1strikethrough_1color_1new_FUNC);
 /*
-	rc = (jint)pango_attr_strikethrough_color_new(arg0, arg1, arg2);
+	rc = (jlong)pango_attr_strikethrough_color_new(arg0, arg1, arg2);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jshort, jshort, jshort);
+		typedef jlong (*FPTR)(jshort, jshort, jshort);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16296,7 +16296,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1, arg2);
+			rc = (jlong)(*fptr)(arg0, arg1, arg2);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1strikethrough_1color_1new_FUNC);
@@ -16305,30 +16305,30 @@
 #endif
 
 #ifndef NO__1pango_1attr_1strikethrough_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1strikethrough_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1strikethrough_1new)
 	(JNIEnv *env, jclass that, jboolean arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1strikethrough_1new_FUNC);
-	rc = (jint)pango_attr_strikethrough_new(arg0);
+	rc = (jlong)pango_attr_strikethrough_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1strikethrough_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1underline_1color_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1underline_1color_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1underline_1color_1new)
 	(JNIEnv *env, jclass that, jshort arg0, jshort arg1, jshort arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1underline_1color_1new_FUNC);
 /*
-	rc = (jint)pango_attr_underline_color_new(arg0, arg1, arg2);
+	rc = (jlong)pango_attr_underline_color_new(arg0, arg1, arg2);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jshort, jshort, jshort);
+		typedef jlong (*FPTR)(jshort, jshort, jshort);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16337,7 +16337,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0, arg1, arg2);
+			rc = (jlong)(*fptr)(arg0, arg1, arg2);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1underline_1color_1new_FUNC);
@@ -16346,42 +16346,42 @@
 #endif
 
 #ifndef NO__1pango_1attr_1underline_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1underline_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1underline_1new)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1underline_1new_FUNC);
-	rc = (jint)pango_attr_underline_new(arg0);
+	rc = (jlong)pango_attr_underline_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1underline_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1attr_1weight_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1attr_1weight_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1attr_1weight_1new)
 	(JNIEnv *env, jclass that, jint arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1attr_1weight_1new_FUNC);
-	rc = (jint)pango_attr_weight_new(arg0);
+	rc = (jlong)pango_attr_weight_new(arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1attr_1weight_1new_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1cairo_1context_1get_1font_1options
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1cairo_1context_1get_1font_1options)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1cairo_1context_1get_1font_1options)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1context_1get_1font_1options_FUNC);
 /*
-	rc = (jint)pango_cairo_context_get_font_options((PangoContext *)arg0);
+	rc = (jlong)pango_cairo_context_get_font_options((PangoContext *)arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(PangoContext *);
+		typedef jlong (*FPTR)(PangoContext *);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16390,7 +16390,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)((PangoContext *)arg0);
+			rc = (jlong)(*fptr)((PangoContext *)arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1cairo_1context_1get_1font_1options_FUNC);
@@ -16400,7 +16400,7 @@
 
 #ifndef NO__1pango_1cairo_1context_1set_1font_1options
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1cairo_1context_1set_1font_1options)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1context_1set_1font_1options_FUNC);
 /*
@@ -16409,7 +16409,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(PangoContext *, jint);
+		typedef void (*FPTR)(PangoContext *, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(pango_cairo_context_set_font_options_LIB, RTLD_LAZY);
@@ -16425,18 +16425,18 @@
 #endif
 
 #ifndef NO__1pango_1cairo_1create_1layout
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1cairo_1create_1layout)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1cairo_1create_1layout)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1create_1layout_FUNC);
 /*
-	rc = (jint)pango_cairo_create_layout(arg0);
+	rc = (jlong)pango_cairo_create_layout(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16445,7 +16445,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1cairo_1create_1layout_FUNC);
@@ -16454,18 +16454,18 @@
 #endif
 
 #ifndef NO__1pango_1cairo_1font_1map_1create_1context
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1create_1context)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1create_1context)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1font_1map_1create_1context_FUNC);
 /*
-	rc = (jint)pango_cairo_font_map_create_context(arg0);
+	rc = (jlong)pango_cairo_font_map_create_context(arg0);
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jlong (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16474,7 +16474,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)(arg0);
+			rc = (jlong)(*fptr)(arg0);
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1cairo_1font_1map_1create_1context_FUNC);
@@ -16483,18 +16483,18 @@
 #endif
 
 #ifndef NO__1pango_1cairo_1font_1map_1get_1default
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1get_1default)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1get_1default)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1font_1map_1get_1default_FUNC);
 /*
-	rc = (jint)pango_cairo_font_map_get_default();
+	rc = (jlong)pango_cairo_font_map_get_default();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16503,7 +16503,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1cairo_1font_1map_1get_1default_FUNC);
@@ -16512,18 +16512,18 @@
 #endif
 
 #ifndef NO__1pango_1cairo_1font_1map_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1font_1map_1new_FUNC);
 /*
-	rc = (jint)pango_cairo_font_map_new();
+	rc = (jlong)pango_cairo_font_map_new();
 */
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)();
+		typedef jlong (*FPTR)();
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -16532,7 +16532,7 @@
 			initialized = 1;
 		}
 		if (fptr) {
-			rc = (jint)(*fptr)();
+			rc = (jlong)(*fptr)();
 		}
 	}
 	OS_NATIVE_EXIT(env, that, _1pango_1cairo_1font_1map_1new_FUNC);
@@ -16542,7 +16542,7 @@
 
 #ifndef NO__1pango_1cairo_1font_1map_1set_1resolution
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1cairo_1font_1map_1set_1resolution)
-	(JNIEnv *env, jclass that, jint arg0, jdouble arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jdouble arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1font_1map_1set_1resolution_FUNC);
 /*
@@ -16551,7 +16551,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jdouble);
+		typedef void (*FPTR)(jlong, jdouble);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(pango_cairo_font_map_set_resolution_LIB, RTLD_LAZY);
@@ -16568,7 +16568,7 @@
 
 #ifndef NO__1pango_1cairo_1layout_1path
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1cairo_1layout_1path)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1layout_1path_FUNC);
 /*
@@ -16577,7 +16577,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(pango_cairo_layout_path_LIB, RTLD_LAZY);
@@ -16594,7 +16594,7 @@
 
 #ifndef NO__1pango_1cairo_1show_1layout
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1cairo_1show_1layout)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1cairo_1show_1layout_FUNC);
 /*
@@ -16603,7 +16603,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jint);
+		typedef void (*FPTR)(jlong, jlong);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(pango_cairo_show_layout_LIB, RTLD_LAZY);
@@ -16620,7 +16620,7 @@
 
 #ifndef NO__1pango_1context_1get_1base_1dir
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1context_1get_1base_1dir)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1get_1base_1dir_FUNC);
@@ -16631,24 +16631,24 @@
 #endif
 
 #ifndef NO__1pango_1context_1get_1language
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1context_1get_1language)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1context_1get_1language)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1get_1language_FUNC);
-	rc = (jint)pango_context_get_language((PangoContext *)arg0);
+	rc = (jlong)pango_context_get_language((PangoContext *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1context_1get_1language_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1context_1get_1metrics
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1context_1get_1metrics)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1context_1get_1metrics)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1get_1metrics_FUNC);
-	rc = (jint)pango_context_get_metrics((PangoContext *)arg0, (const PangoFontDescription *)arg1, (PangoLanguage *)arg2);
+	rc = (jlong)pango_context_get_metrics((PangoContext *)arg0, (const PangoFontDescription *)arg1, (PangoLanguage *)arg2);
 	OS_NATIVE_EXIT(env, that, _1pango_1context_1get_1metrics_FUNC);
 	return rc;
 }
@@ -16656,24 +16656,24 @@
 
 #ifndef NO__1pango_1context_1list_1families
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1context_1list_1families)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1list_1families_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	pango_context_list_families((PangoContext *)arg0, (PangoFontFamily ***)lparg1, (int *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1pango_1context_1list_1families_FUNC);
 }
 #endif
 
 #ifndef NO__1pango_1context_1set_1base_1dir
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1context_1set_1base_1dir)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1set_1base_1dir_FUNC);
 	pango_context_set_base_dir((PangoContext *)arg0, arg1);
@@ -16683,7 +16683,7 @@
 
 #ifndef NO__1pango_1context_1set_1language
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1context_1set_1language)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1context_1set_1language_FUNC);
 	pango_context_set_language((PangoContext *)arg0, (PangoLanguage *)arg1);
@@ -16692,12 +16692,12 @@
 #endif
 
 #ifndef NO__1pango_1font_1description_1copy
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1copy)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1description_1copy)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1copy_FUNC);
-	rc = (jint)pango_font_description_copy((PangoFontDescription *)arg0);
+	rc = (jlong)pango_font_description_copy((PangoFontDescription *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1description_1copy_FUNC);
 	return rc;
 }
@@ -16705,7 +16705,7 @@
 
 #ifndef NO__1pango_1font_1description_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1free_FUNC);
 	pango_font_description_free((PangoFontDescription *)arg0);
@@ -16714,11 +16714,11 @@
 #endif
 
 #ifndef NO__1pango_1font_1description_1from_1string
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1from_1string)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1description_1from_1string)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1from_1string_FUNC);
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -16728,7 +16728,7 @@
 	{
 		if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	}
-	rc = (jint)pango_font_description_from_string((const char *)lparg0);
+	rc = (jlong)pango_font_description_from_string((const char *)lparg0);
 fail:
 #ifdef JNI_VERSION_1_2
 	if (IS_JNI_1_2) {
@@ -16744,12 +16744,12 @@
 #endif
 
 #ifndef NO__1pango_1font_1description_1get_1family
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1get_1family)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1description_1get_1family)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1get_1family_FUNC);
-	rc = (jint)pango_font_description_get_family((PangoFontDescription *)arg0);
+	rc = (jlong)pango_font_description_get_family((PangoFontDescription *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1description_1get_1family_FUNC);
 	return rc;
 }
@@ -16757,7 +16757,7 @@
 
 #ifndef NO__1pango_1font_1description_1get_1size
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1get_1size_FUNC);
@@ -16769,7 +16769,7 @@
 
 #ifndef NO__1pango_1font_1description_1get_1style
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1get_1style)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1get_1style_FUNC);
@@ -16781,7 +16781,7 @@
 
 #ifndef NO__1pango_1font_1description_1get_1weight
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1get_1weight)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1get_1weight_FUNC);
@@ -16792,12 +16792,12 @@
 #endif
 
 #ifndef NO__1pango_1font_1description_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1description_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1new_FUNC);
-	rc = (jint)pango_font_description_new();
+	rc = (jlong)pango_font_description_new();
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1description_1new_FUNC);
 	return rc;
 }
@@ -16805,7 +16805,7 @@
 
 #ifndef NO__1pango_1font_1description_1set_1family
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1set_1family)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1set_1family_FUNC);
@@ -16833,7 +16833,7 @@
 
 #ifndef NO__1pango_1font_1description_1set_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1set_1size)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1set_1size_FUNC);
 	pango_font_description_set_size((PangoFontDescription *)arg0, (gint)arg1);
@@ -16843,7 +16843,7 @@
 
 #ifndef NO__1pango_1font_1description_1set_1stretch
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1set_1stretch)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1set_1stretch_FUNC);
 	pango_font_description_set_stretch((PangoFontDescription *)arg0, (PangoStretch)arg1);
@@ -16853,7 +16853,7 @@
 
 #ifndef NO__1pango_1font_1description_1set_1style
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1set_1style)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1set_1style_FUNC);
 	pango_font_description_set_style((PangoFontDescription *)arg0, (PangoStyle)arg1);
@@ -16863,7 +16863,7 @@
 
 #ifndef NO__1pango_1font_1description_1set_1weight
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1description_1set_1weight)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1set_1weight_FUNC);
 	pango_font_description_set_weight((PangoFontDescription *)arg0, (PangoWeight)arg1);
@@ -16872,36 +16872,36 @@
 #endif
 
 #ifndef NO__1pango_1font_1description_1to_1string
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1description_1to_1string)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1description_1to_1string)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1description_1to_1string_FUNC);
-	rc = (jint)pango_font_description_to_string((PangoFontDescription *)arg0);
+	rc = (jlong)pango_font_description_to_string((PangoFontDescription *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1description_1to_1string_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1font_1face_1describe
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1face_1describe)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1face_1describe)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1face_1describe_FUNC);
-	rc = (jint)pango_font_face_describe((PangoFontFace *)arg0);
+	rc = (jlong)pango_font_face_describe((PangoFontFace *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1face_1describe_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1font_1family_1get_1name
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1family_1get_1name)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1family_1get_1name)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1family_1get_1name_FUNC);
-	rc = (jint)pango_font_family_get_name((PangoFontFamily *)arg0);
+	rc = (jlong)pango_font_family_get_name((PangoFontFamily *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1family_1get_1name_FUNC);
 	return rc;
 }
@@ -16909,28 +16909,28 @@
 
 #ifndef NO__1pango_1font_1family_1list_1faces
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1family_1list_1faces)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1family_1list_1faces_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	pango_font_family_list_faces((PangoFontFamily *)arg0, (PangoFontFace ***)lparg1, (int *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1family_1list_1faces_FUNC);
 }
 #endif
 
 #ifndef NO__1pango_1font_1get_1metrics
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1get_1metrics)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1font_1get_1metrics)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1get_1metrics_FUNC);
-	rc = (jint)pango_font_get_metrics((PangoFont *)arg0, (PangoLanguage *)arg1);
+	rc = (jlong)pango_font_get_metrics((PangoFont *)arg0, (PangoLanguage *)arg1);
 	OS_NATIVE_EXIT(env, that, _1pango_1font_1get_1metrics_FUNC);
 	return rc;
 }
@@ -16938,7 +16938,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1approximate_1char_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1approximate_1char_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1approximate_1char_1width_FUNC);
@@ -16950,7 +16950,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1ascent
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1ascent)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1ascent_FUNC);
@@ -16962,7 +16962,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1descent
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1descent)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1descent_FUNC);
@@ -16974,7 +16974,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1strikethrough_1position
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1strikethrough_1position)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1strikethrough_1position_FUNC);
@@ -16984,7 +16984,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -17003,7 +17003,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1strikethrough_1thickness
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1strikethrough_1thickness)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1strikethrough_1thickness_FUNC);
@@ -17013,7 +17013,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -17032,7 +17032,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1underline_1position
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1underline_1position)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1underline_1position_FUNC);
@@ -17042,7 +17042,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -17061,7 +17061,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1get_1underline_1thickness
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1font_1metrics_1get_1underline_1thickness)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1get_1underline_1thickness_FUNC);
@@ -17071,7 +17071,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef jint (*FPTR)(jint);
+		typedef jint (*FPTR)(jlong);
 		static FPTR fptr;
 		rc = 0;
 		if (!initialized) {
@@ -17090,7 +17090,7 @@
 
 #ifndef NO__1pango_1font_1metrics_1unref
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1font_1metrics_1unref)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1font_1metrics_1unref_FUNC);
 	pango_font_metrics_unref((PangoFontMetrics *)arg0);
@@ -17099,14 +17099,14 @@
 #endif
 
 #ifndef NO__1pango_1language_1from_1string
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1language_1from_1string)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1language_1from_1string)
 	(JNIEnv *env, jclass that, jbyteArray arg0)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1language_1from_1string_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
-	rc = (jint)pango_language_from_string((const char *)lparg0);
+	rc = (jlong)pango_language_from_string((const char *)lparg0);
 fail:
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, JNI_ABORT);
 	OS_NATIVE_EXIT(env, that, _1pango_1language_1from_1string_FUNC);
@@ -17116,7 +17116,7 @@
 
 #ifndef NO__1pango_1layout_1context_1changed
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1context_1changed)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1context_1changed_FUNC);
 	pango_layout_context_changed((PangoLayout *)arg0);
@@ -17126,7 +17126,7 @@
 
 #ifndef NO__1pango_1layout_1get_1alignment
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1alignment)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1alignment_FUNC);
@@ -17137,24 +17137,24 @@
 #endif
 
 #ifndef NO__1pango_1layout_1get_1attributes
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1attributes)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1attributes)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1attributes_FUNC);
-	rc = (jint)pango_layout_get_attributes((PangoLayout *)arg0);
+	rc = (jlong)pango_layout_get_attributes((PangoLayout *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1attributes_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1layout_1get_1context
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1context)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1context)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1context_FUNC);
-	rc = (jint)pango_layout_get_context((PangoLayout *)arg0);
+	rc = (jlong)pango_layout_get_context((PangoLayout *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1context_FUNC);
 	return rc;
 }
@@ -17162,7 +17162,7 @@
 
 #ifndef NO__1pango_1layout_1get_1indent
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1indent)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1indent_FUNC);
@@ -17173,12 +17173,12 @@
 #endif
 
 #ifndef NO__1pango_1layout_1get_1iter
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1iter)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1iter)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1iter_FUNC);
-	rc = (jint)pango_layout_get_iter((PangoLayout*)arg0);
+	rc = (jlong)pango_layout_get_iter((PangoLayout*)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1iter_FUNC);
 	return rc;
 }
@@ -17186,7 +17186,7 @@
 
 #ifndef NO__1pango_1layout_1get_1justify
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1layout_1get_1justify)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1justify_FUNC);
@@ -17197,12 +17197,12 @@
 #endif
 
 #ifndef NO__1pango_1layout_1get_1line
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1line)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1line)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1line_FUNC);
-	rc = (jint)pango_layout_get_line((PangoLayout *)arg0, arg1);
+	rc = (jlong)pango_layout_get_line((PangoLayout *)arg0, arg1);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1line_FUNC);
 	return rc;
 }
@@ -17210,7 +17210,7 @@
 
 #ifndef NO__1pango_1layout_1get_1line_1count
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1line_1count)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1line_1count_FUNC);
@@ -17222,24 +17222,24 @@
 
 #ifndef NO__1pango_1layout_1get_1log_1attrs
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1get_1log_1attrs)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jintArray arg2)
 {
-	jint *lparg1=NULL;
+	jlong *lparg1=NULL;
 	jint *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1log_1attrs_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
 	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	pango_layout_get_log_attrs((PangoLayout*)arg0, (PangoLogAttr **)lparg1, (int *)lparg2);
 fail:
 	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1log_1attrs_FUNC);
 }
 #endif
 
 #ifndef NO__1pango_1layout_1get_1size
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jintArray arg1, jintArray arg2)
 {
 	jint *lparg1=NULL;
 	jint *lparg2=NULL;
@@ -17256,7 +17256,7 @@
 
 #ifndef NO__1pango_1layout_1get_1spacing
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1spacing)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1spacing_FUNC);
@@ -17267,24 +17267,24 @@
 #endif
 
 #ifndef NO__1pango_1layout_1get_1tabs
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1tabs)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1tabs)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1tabs_FUNC);
-	rc = (jint)pango_layout_get_tabs((PangoLayout*)arg0);
+	rc = (jlong)pango_layout_get_tabs((PangoLayout*)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1tabs_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO__1pango_1layout_1get_1text
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1text)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1get_1text)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1text_FUNC);
-	rc = (jint)pango_layout_get_text((PangoLayout *)arg0);
+	rc = (jlong)pango_layout_get_text((PangoLayout *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1get_1text_FUNC);
 	return rc;
 }
@@ -17292,7 +17292,7 @@
 
 #ifndef NO__1pango_1layout_1get_1width
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1get_1width)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1get_1width_FUNC);
@@ -17304,7 +17304,7 @@
 
 #ifndef NO__1pango_1layout_1index_1to_1pos
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1index_1to_1pos)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jobject arg2)
 {
 	PangoRectangle _arg2, *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1index_1to_1pos_FUNC);
@@ -17318,7 +17318,7 @@
 
 #ifndef NO__1pango_1layout_1iter_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1iter_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1iter_1free_FUNC);
 	pango_layout_iter_free((PangoLayoutIter*)arg0);
@@ -17328,7 +17328,7 @@
 
 #ifndef NO__1pango_1layout_1iter_1get_1index
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1iter_1get_1index)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1iter_1get_1index_FUNC);
@@ -17340,7 +17340,7 @@
 
 #ifndef NO__1pango_1layout_1iter_1get_1line_1extents
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1iter_1get_1line_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jobject arg2)
 {
 	PangoRectangle _arg1, *lparg1=NULL;
 	PangoRectangle _arg2, *lparg2=NULL;
@@ -17356,12 +17356,12 @@
 #endif
 
 #ifndef NO__1pango_1layout_1iter_1get_1run
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1iter_1get_1run)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1iter_1get_1run)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1iter_1get_1run_FUNC);
-	rc = (jint)pango_layout_iter_get_run((PangoLayoutIter*)arg0);
+	rc = (jlong)pango_layout_iter_get_run((PangoLayoutIter*)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1iter_1get_1run_FUNC);
 	return rc;
 }
@@ -17369,7 +17369,7 @@
 
 #ifndef NO__1pango_1layout_1iter_1next_1line
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1layout_1iter_1next_1line)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1iter_1next_1line_FUNC);
@@ -17381,7 +17381,7 @@
 
 #ifndef NO__1pango_1layout_1iter_1next_1run
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1layout_1iter_1next_1run)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jboolean rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1iter_1next_1run_FUNC);
@@ -17393,7 +17393,7 @@
 
 #ifndef NO__1pango_1layout_1line_1get_1extents
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1line_1get_1extents)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jobject arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jobject arg2)
 {
 	PangoRectangle _arg1, *lparg1=NULL;
 	PangoRectangle _arg2, *lparg2=NULL;
@@ -17410,7 +17410,7 @@
 
 #ifndef NO__1pango_1layout_1line_1x_1to_1index
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1layout_1line_1x_1to_1index)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jintArray arg2, jintArray arg3)
 {
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
@@ -17428,12 +17428,12 @@
 #endif
 
 #ifndef NO__1pango_1layout_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1layout_1new)
-	(JNIEnv *env, jclass that, jint arg0)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1layout_1new)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1new_FUNC);
-	rc = (jint)pango_layout_new((PangoContext *)arg0);
+	rc = (jlong)pango_layout_new((PangoContext *)arg0);
 	OS_NATIVE_EXIT(env, that, _1pango_1layout_1new_FUNC);
 	return rc;
 }
@@ -17441,7 +17441,7 @@
 
 #ifndef NO__1pango_1layout_1set_1alignment
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1alignment)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1alignment_FUNC);
 	pango_layout_set_alignment((PangoLayout *)arg0, arg1);
@@ -17451,7 +17451,7 @@
 
 #ifndef NO__1pango_1layout_1set_1attributes
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1attributes)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1attributes_FUNC);
 	pango_layout_set_attributes((PangoLayout *)arg0, (PangoAttrList *)arg1);
@@ -17461,7 +17461,7 @@
 
 #ifndef NO__1pango_1layout_1set_1auto_1dir
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1auto_1dir)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1auto_1dir_FUNC);
 /*
@@ -17470,7 +17470,7 @@
 	{
 		static int initialized = 0;
 		static void *handle = NULL;
-		typedef void (*FPTR)(jint, jboolean);
+		typedef void (*FPTR)(jlong, jboolean);
 		static FPTR fptr;
 		if (!initialized) {
 			if (!handle) handle = dlopen(pango_layout_set_auto_dir_LIB, RTLD_LAZY);
@@ -17487,7 +17487,7 @@
 
 #ifndef NO__1pango_1layout_1set_1font_1description
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1font_1description)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1font_1description_FUNC);
 	pango_layout_set_font_description((PangoLayout *)arg0, (PangoFontDescription *)arg1);
@@ -17497,7 +17497,7 @@
 
 #ifndef NO__1pango_1layout_1set_1indent
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1indent)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1indent_FUNC);
 	pango_layout_set_indent((PangoLayout*)arg0, arg1);
@@ -17507,7 +17507,7 @@
 
 #ifndef NO__1pango_1layout_1set_1justify
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1justify)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1justify_FUNC);
 	pango_layout_set_justify((PangoLayout*)arg0, arg1);
@@ -17517,7 +17517,7 @@
 
 #ifndef NO__1pango_1layout_1set_1single_1paragraph_1mode
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1single_1paragraph_1mode)
-	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jboolean arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1single_1paragraph_1mode_FUNC);
 	pango_layout_set_single_paragraph_mode((PangoLayout *)arg0, (gboolean)arg1);
@@ -17527,7 +17527,7 @@
 
 #ifndef NO__1pango_1layout_1set_1spacing
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1spacing)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1spacing_FUNC);
 	pango_layout_set_spacing((PangoLayout *)arg0, arg1);
@@ -17537,7 +17537,7 @@
 
 #ifndef NO__1pango_1layout_1set_1tabs
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1tabs)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1tabs_FUNC);
 	pango_layout_set_tabs((PangoLayout *)arg0, (PangoTabArray *)arg1);
@@ -17547,7 +17547,7 @@
 
 #ifndef NO__1pango_1layout_1set_1text
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1text)
-	(JNIEnv *env, jclass that, jint arg0, jbyteArray arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jbyteArray arg1, jint arg2)
 {
 	jbyte *lparg1=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1text_FUNC);
@@ -17575,7 +17575,7 @@
 
 #ifndef NO__1pango_1layout_1set_1width
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1width)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1width_FUNC);
 	pango_layout_set_width((PangoLayout *)arg0, arg1);
@@ -17585,7 +17585,7 @@
 
 #ifndef NO__1pango_1layout_1set_1wrap
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1layout_1set_1wrap)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1layout_1set_1wrap_FUNC);
 	pango_layout_set_wrap((PangoLayout *)arg0, arg1);
@@ -17595,7 +17595,7 @@
 
 #ifndef NO__1pango_1layout_1xy_1to_1index
 JNIEXPORT jboolean JNICALL OS_NATIVE(_1pango_1layout_1xy_1to_1index)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4)
 {
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
@@ -17614,7 +17614,7 @@
 
 #ifndef NO__1pango_1tab_1array_1free
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1tab_1array_1free)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1tab_1array_1free_FUNC);
 	pango_tab_array_free((PangoTabArray *)arg0);
@@ -17624,7 +17624,7 @@
 
 #ifndef NO__1pango_1tab_1array_1get_1size
 JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1tab_1array_1get_1size)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1tab_1array_1get_1size_FUNC);
@@ -17636,28 +17636,28 @@
 
 #ifndef NO__1pango_1tab_1array_1get_1tabs
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1tab_1array_1get_1tabs)
-	(JNIEnv *env, jclass that, jint arg0, jintArray arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlongArray arg1, jlongArray arg2)
 {
-	jint *lparg1=NULL;
-	jint *lparg2=NULL;
+	jlong *lparg1=NULL;
+	jlong *lparg2=NULL;
 	OS_NATIVE_ENTER(env, that, _1pango_1tab_1array_1get_1tabs_FUNC);
-	if (arg1) if ((lparg1 = (*env)->GetIntArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	if (arg2) if ((lparg2 = (*env)->GetIntArrayElements(env, arg2, NULL)) == NULL) goto fail;
+	if (arg1) if ((lparg1 = (*env)->GetLongArrayElements(env, arg1, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = (*env)->GetLongArrayElements(env, arg2, NULL)) == NULL) goto fail;
 	pango_tab_array_get_tabs((PangoTabArray *)arg0, (PangoTabAlign **)lparg1, (int **)lparg2);
 fail:
-	if (arg2 && lparg2) (*env)->ReleaseIntArrayElements(env, arg2, lparg2, 0);
-	if (arg1 && lparg1) (*env)->ReleaseIntArrayElements(env, arg1, lparg1, 0);
+	if (arg2 && lparg2) (*env)->ReleaseLongArrayElements(env, arg2, lparg2, 0);
+	if (arg1 && lparg1) (*env)->ReleaseLongArrayElements(env, arg1, lparg1, 0);
 	OS_NATIVE_EXIT(env, that, _1pango_1tab_1array_1get_1tabs_FUNC);
 }
 #endif
 
 #ifndef NO__1pango_1tab_1array_1new
-JNIEXPORT jint JNICALL OS_NATIVE(_1pango_1tab_1array_1new)
+JNIEXPORT jlong JNICALL OS_NATIVE(_1pango_1tab_1array_1new)
 	(JNIEnv *env, jclass that, jint arg0, jboolean arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, _1pango_1tab_1array_1new_FUNC);
-	rc = (jint)pango_tab_array_new((gint)arg0, (gboolean)arg1);
+	rc = (jlong)pango_tab_array_new((gint)arg0, (gboolean)arg1);
 	OS_NATIVE_EXIT(env, that, _1pango_1tab_1array_1new_FUNC);
 	return rc;
 }
@@ -17665,7 +17665,7 @@
 
 #ifndef NO__1pango_1tab_1array_1set_1tab
 JNIEXPORT void JNICALL OS_NATIVE(_1pango_1tab_1array_1set_1tab)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlong arg2, jint arg3)
 {
 	OS_NATIVE_ENTER(env, that, _1pango_1tab_1array_1set_1tab_FUNC);
 	pango_tab_array_set_tab((PangoTabArray *)arg0, (gint)arg1, (PangoTabAlign)arg2, (gint)arg3);
@@ -17675,7 +17675,7 @@
 
 #ifndef NO_g_1main_1context_1wakeup
 JNIEXPORT void JNICALL OS_NATIVE(g_1main_1context_1wakeup)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	OS_NATIVE_ENTER(env, that, g_1main_1context_1wakeup_FUNC);
 	g_main_context_wakeup((GMainContext *)arg0);
@@ -17684,754 +17684,754 @@
 #endif
 
 #ifndef NO_localeconv_1decimal_1point
-JNIEXPORT jint JNICALL OS_NATIVE(localeconv_1decimal_1point)
+JNIEXPORT jlong JNICALL OS_NATIVE(localeconv_1decimal_1point)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, localeconv_1decimal_1point_FUNC);
-	rc = (jint)localeconv_decimal_point();
+	rc = (jlong)localeconv_decimal_point();
 	OS_NATIVE_EXIT(env, that, localeconv_1decimal_1point_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	GInterfaceInfo _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC);
 	if (arg1) if ((lparg1 = getGInterfaceInfoFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC);
 	if (arg1) getGObjectClassFields(env, arg1, (GObjectClass *)arg0);
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	GTypeInfo _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC);
 	if (arg1) if ((lparg1 = getGTypeInfoFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	GdkEventButton _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J_FUNC);
 	if (arg1) if ((lparg1 = getGdkEventButtonFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	GdkEventExpose _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J_FUNC);
 	if (arg1) if ((lparg1 = getGdkEventExposeFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	GdkEventMotion _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J_FUNC);
 	if (arg1) if ((lparg1 = getGdkEventMotionFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC);
 	if (arg1) getGtkAdjustmentFields(env, arg1, (GtkAdjustment *)arg0);
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC);
 	if (arg1) getGtkCellRendererClassFields(env, arg1, (GtkCellRendererClass *)arg0);
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC);
 	if (arg1) getGtkFixedFields(env, arg1, (GtkFixed *)arg0);
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	GtkTargetEntry _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J_FUNC);
 	if (arg1) if ((lparg1 = getGtkTargetEntryFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC);
 	if (arg1) getGtkWidgetClassFields(env, arg1, (GtkWidgetClass *)arg0);
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	PangoAttribute _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J_FUNC);
 	if (arg1) if ((lparg1 = getPangoAttributeFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XButtonEvent _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J_FUNC);
 	if (arg1) if ((lparg1 = getXButtonEventFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XClientMessageEvent _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J_FUNC);
 	if (arg1) if ((lparg1 = getXClientMessageEventFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XCrossingEvent _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J_FUNC);
 	if (arg1) if ((lparg1 = getXCrossingEventFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XExposeEvent _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J_FUNC);
 	if (arg1) if ((lparg1 = getXExposeEventFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jlong arg2)
 {
 	XFocusChangeEvent _arg1, *lparg1=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J_FUNC);
 	if (arg1) if ((lparg1 = getXFocusChangeEventFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
-	OS_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J_FUNC);
 	if (arg0) setGObjectClassFields(env, arg0, (GObjectClass *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GTypeQuery _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGTypeQueryFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkColor _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkColorFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkDragContext _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkDragContextFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventAny _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventAnyFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventButton _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventButtonFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventCrossing _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventCrossingFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventExpose _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventExposeFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventFocus _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventFocusFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventKey _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventKeyFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventMotion _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventMotionFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventScroll _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventScrollFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventVisibility _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventVisibilityFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEventWindowState _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventWindowStateFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J_FUNC);
 	if (arg0) setGdkImageFields(env, arg0, (GdkImage *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GdkRectangle _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGdkRectangleFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J_FUNC);
 	if (arg0) setGdkVisualFields(env, arg0, (GdkVisual *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J_FUNC);
 	if (arg0) setGtkAdjustmentFields(env, arg0, (GtkAdjustment *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GtkBorder _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGtkBorderFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J_FUNC);
 	if (arg0) setGtkCellRendererClassFields(env, arg0, (GtkCellRendererClass *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J_FUNC);
 	if (arg0) setGtkColorSelectionDialogFields(env, arg0, (GtkColorSelectionDialog *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J_FUNC);
 	if (arg0) setGtkComboFields(env, arg0, (GtkCombo *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J_FUNC);
 	if (arg0) setGtkFileSelectionFields(env, arg0, (GtkFileSelection *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J_FUNC);
 	if (arg0) setGtkFixedFields(env, arg0, (GtkFixed *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GtkSelectionData _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGtkSelectionDataFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	GtkTargetPair _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setGtkTargetPairFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1)
 {
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J_FUNC);
 	if (arg0) setGtkWidgetClassFields(env, arg0, (GtkWidgetClass *)arg1);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoAttrColor _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoAttrColorFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoAttrInt _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoAttrIntFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoAttribute _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoAttributeFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoItem _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoItemFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoLayoutLine _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoLayoutLineFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoLayoutRun _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoLayoutRunFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	PangoLogAttr _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setPangoLogAttrFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	XButtonEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setXButtonEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	XCrossingEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setXCrossingEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	XExposeEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setXExposeEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	XFocusChangeEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setXFocusChangeEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II
-JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ
+JNIEXPORT void JNICALL OS_NATIVE(memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jlong arg2)
 {
 	XVisibilityEvent _arg0, *lparg0=NULL;
-	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II_FUNC);
+	OS_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ_FUNC);
 	if (arg0) if ((lparg0 = &_arg0) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setXVisibilityEventFields(env, arg0, lparg0);
-	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II_FUNC);
+	OS_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ_FUNC);
 }
 #endif
 
 #ifndef NO_realpath
-JNIEXPORT jint JNICALL OS_NATIVE(realpath)
+JNIEXPORT jlong JNICALL OS_NATIVE(realpath)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jbyteArray arg1)
 {
 	jbyte *lparg0=NULL;
 	jbyte *lparg1=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	OS_NATIVE_ENTER(env, that, realpath_FUNC);
 	if (arg0) if ((lparg0 = (*env)->GetByteArrayElements(env, arg0, NULL)) == NULL) goto fail;
 	if (arg1) if ((lparg1 = (*env)->GetByteArrayElements(env, arg1, NULL)) == NULL) goto fail;
-	rc = (jint)realpath((const char *)lparg0, (char *)lparg1);
+	rc = (jlong)realpath((const char *)lparg0, (char *)lparg1);
 fail:
 	if (arg1 && lparg1) (*env)->ReleaseByteArrayElements(env, arg1, lparg1, 0);
 	if (arg0 && lparg0) (*env)->ReleaseByteArrayElements(env, arg0, lparg0, 0);
diff -ur x86/os_stats.c x86_64/os_stats.c
--- x86/os_stats.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/os_stats.c	2009-02-11 17:53:48.000000000 -0500
@@ -231,11 +231,11 @@
 	"_1g_1object_1get_1qdata",
 	"_1g_1object_1new",
 	"_1g_1object_1ref",
-	"_1g_1object_1set__I_3BFI",
-	"_1g_1object_1set__I_3BII",
-	"_1g_1object_1set__I_3BJI",
-	"_1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I",
-	"_1g_1object_1set__I_3BZI",
+	"_1g_1object_1set__J_3BFJ",
+	"_1g_1object_1set__J_3BIJ",
+	"_1g_1object_1set__J_3BJJ",
+	"_1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J",
+	"_1g_1object_1set__J_3BZJ",
 	"_1g_1object_1set_1qdata",
 	"_1g_1object_1unref",
 	"_1g_1quark_1from_1string",
@@ -245,10 +245,10 @@
 	"_1g_1signal_1connect_1after",
 	"_1g_1signal_1connect_1closure",
 	"_1g_1signal_1connect_1closure_1by_1id",
-	"_1g_1signal_1emit_1by_1name__I_3B",
-	"_1g_1signal_1emit_1by_1name__I_3BI",
-	"_1g_1signal_1emit_1by_1name__I_3BII",
-	"_1g_1signal_1emit_1by_1name__I_3B_3B",
+	"_1g_1signal_1emit_1by_1name__J_3B",
+	"_1g_1signal_1emit_1by_1name__J_3BJ",
+	"_1g_1signal_1emit_1by_1name__J_3BJJ",
+	"_1g_1signal_1emit_1by_1name__J_3B_3B",
 	"_1g_1signal_1handler_1disconnect",
 	"_1g_1signal_1handlers_1block_1matched",
 	"_1g_1signal_1handlers_1disconnect_1matched",
@@ -279,8 +279,8 @@
 	"_1g_1utf8_1offset_1to_1pointer",
 	"_1g_1utf8_1pointer_1to_1offset",
 	"_1g_1utf8_1strlen",
-	"_1g_1utf8_1to_1utf16__II_3I_3I_3I",
-	"_1g_1utf8_1to_1utf16___3BI_3I_3I_3I",
+	"_1g_1utf8_1to_1utf16__JJ_3J_3J_3J",
+	"_1g_1utf8_1to_1utf16___3BJ_3J_3J_3J",
 	"_1g_1value_1peek_1pointer",
 	"_1gdk_1atom_1intern",
 	"_1gdk_1atom_1name",
@@ -652,8 +652,8 @@
 	"_1gtk_1label_1set_1justify",
 	"_1gtk_1label_1set_1line_1wrap",
 	"_1gtk_1label_1set_1line_1wrap_1mode",
-	"_1gtk_1label_1set_1text__II",
-	"_1gtk_1label_1set_1text__I_3B",
+	"_1gtk_1label_1set_1text__JJ",
+	"_1gtk_1label_1set_1text__J_3B",
 	"_1gtk_1label_1set_1text_1with_1mnemonic",
 	"_1gtk_1list_1append_1items",
 	"_1gtk_1list_1clear_1items",
@@ -666,11 +666,11 @@
 	"_1gtk_1list_1store_1insert",
 	"_1gtk_1list_1store_1newv",
 	"_1gtk_1list_1store_1remove",
-	"_1gtk_1list_1store_1set__IIIII",
-	"_1gtk_1list_1store_1set__IIIJI",
-	"_1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I",
-	"_1gtk_1list_1store_1set__IIIZI",
-	"_1gtk_1list_1store_1set__III_3BI",
+	"_1gtk_1list_1store_1set__JJIIJ",
+	"_1gtk_1list_1store_1set__JJIJJ",
+	"_1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J",
+	"_1gtk_1list_1store_1set__JJIZJ",
+	"_1gtk_1list_1store_1set__JJI_3BJ",
 	"_1gtk_1list_1unselect_1all",
 	"_1gtk_1list_1unselect_1item",
 	"_1gtk_1main",
@@ -874,8 +874,8 @@
 	"_1gtk_1text_1buffer_1get_1selection_1bound",
 	"_1gtk_1text_1buffer_1get_1selection_1bounds",
 	"_1gtk_1text_1buffer_1get_1text",
-	"_1gtk_1text_1buffer_1insert__II_3BI",
-	"_1gtk_1text_1buffer_1insert__I_3B_3BI",
+	"_1gtk_1text_1buffer_1insert__JJ_3BI",
+	"_1gtk_1text_1buffer_1insert__J_3B_3BI",
 	"_1gtk_1text_1buffer_1move_1mark",
 	"_1gtk_1text_1buffer_1paste_1clipboard",
 	"_1gtk_1text_1buffer_1place_1cursor",
@@ -916,8 +916,8 @@
 	"_1gtk_1tooltips_1force_1window",
 	"_1gtk_1tooltips_1new",
 	"_1gtk_1tooltips_1set_1tip",
-	"_1gtk_1tree_1model_1get__III_3II",
-	"_1gtk_1tree_1model_1get__III_3JI",
+	"_1gtk_1tree_1model_1get__JJI_3IJ",
+	"_1gtk_1tree_1model_1get__JJI_3JJ",
 	"_1gtk_1tree_1model_1get_1iter",
 	"_1gtk_1tree_1model_1get_1iter_1first",
 	"_1gtk_1tree_1model_1get_1n_1columns",
@@ -935,7 +935,7 @@
 	"_1gtk_1tree_1path_1get_1indices",
 	"_1gtk_1tree_1path_1new",
 	"_1gtk_1tree_1path_1new_1first",
-	"_1gtk_1tree_1path_1new_1from_1string__I",
+	"_1gtk_1tree_1path_1new_1from_1string__J",
 	"_1gtk_1tree_1path_1new_1from_1string___3B",
 	"_1gtk_1tree_1path_1next",
 	"_1gtk_1tree_1path_1prev",
@@ -955,11 +955,11 @@
 	"_1gtk_1tree_1store_1insert",
 	"_1gtk_1tree_1store_1newv",
 	"_1gtk_1tree_1store_1remove",
-	"_1gtk_1tree_1store_1set__IIIII",
-	"_1gtk_1tree_1store_1set__IIIJI",
-	"_1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I",
-	"_1gtk_1tree_1store_1set__IIIZI",
-	"_1gtk_1tree_1store_1set__III_3BI",
+	"_1gtk_1tree_1store_1set__JJIIJ",
+	"_1gtk_1tree_1store_1set__JJIJJ",
+	"_1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J",
+	"_1gtk_1tree_1store_1set__JJIZJ",
+	"_1gtk_1tree_1store_1set__JJI_3BJ",
 	"_1gtk_1tree_1view_1collapse_1row",
 	"_1gtk_1tree_1view_1column_1add_1attribute",
 	"_1gtk_1tree_1view_1column_1cell_1get_1position",
@@ -1030,8 +1030,8 @@
 	"_1gtk_1widget_1add_1accelerator",
 	"_1gtk_1widget_1add_1events",
 	"_1gtk_1widget_1child_1focus",
-	"_1gtk_1widget_1create_1pango_1layout__II",
-	"_1gtk_1widget_1create_1pango_1layout__I_3B",
+	"_1gtk_1widget_1create_1pango_1layout__JJ",
+	"_1gtk_1widget_1create_1pango_1layout__J_3B",
 	"_1gtk_1widget_1destroy",
 	"_1gtk_1widget_1event",
 	"_1gtk_1widget_1get_1accessible",
@@ -1080,8 +1080,8 @@
 	"_1gtk_1widget_1show_1now",
 	"_1gtk_1widget_1size_1allocate",
 	"_1gtk_1widget_1size_1request",
-	"_1gtk_1widget_1style_1get__I_3B_3II",
-	"_1gtk_1widget_1style_1get__I_3B_3JI",
+	"_1gtk_1widget_1style_1get__J_3B_3IJ",
+	"_1gtk_1widget_1style_1get__J_3B_3JJ",
 	"_1gtk_1widget_1translate_1coordinates",
 	"_1gtk_1widget_1unrealize",
 	"_1gtk_1window_1activate_1default",
@@ -1229,63 +1229,63 @@
 	"_1pango_1tab_1array_1set_1tab",
 	"g_1main_1context_1wakeup",
 	"localeconv_1decimal_1point",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2",
-	"memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I",
-	"memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II",
-	"memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2",
+	"memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J",
+	"memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ",
+	"memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ",
 	"realpath",
 };
 
diff -ur x86/os_stats.h x86_64/os_stats.h
--- x86/os_stats.h	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/os_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -239,11 +239,11 @@
 	_1g_1object_1get_1qdata_FUNC,
 	_1g_1object_1new_FUNC,
 	_1g_1object_1ref_FUNC,
-	_1g_1object_1set__I_3BFI_FUNC,
-	_1g_1object_1set__I_3BII_FUNC,
-	_1g_1object_1set__I_3BJI_FUNC,
-	_1g_1object_1set__I_3BLorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC,
-	_1g_1object_1set__I_3BZI_FUNC,
+	_1g_1object_1set__J_3BFJ_FUNC,
+	_1g_1object_1set__J_3BIJ_FUNC,
+	_1g_1object_1set__J_3BJJ_FUNC,
+	_1g_1object_1set__J_3BLorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC,
+	_1g_1object_1set__J_3BZJ_FUNC,
 	_1g_1object_1set_1qdata_FUNC,
 	_1g_1object_1unref_FUNC,
 	_1g_1quark_1from_1string_FUNC,
@@ -253,10 +253,10 @@
 	_1g_1signal_1connect_1after_FUNC,
 	_1g_1signal_1connect_1closure_FUNC,
 	_1g_1signal_1connect_1closure_1by_1id_FUNC,
-	_1g_1signal_1emit_1by_1name__I_3B_FUNC,
-	_1g_1signal_1emit_1by_1name__I_3BI_FUNC,
-	_1g_1signal_1emit_1by_1name__I_3BII_FUNC,
-	_1g_1signal_1emit_1by_1name__I_3B_3B_FUNC,
+	_1g_1signal_1emit_1by_1name__J_3B_FUNC,
+	_1g_1signal_1emit_1by_1name__J_3BJ_FUNC,
+	_1g_1signal_1emit_1by_1name__J_3BJJ_FUNC,
+	_1g_1signal_1emit_1by_1name__J_3B_3B_FUNC,
 	_1g_1signal_1handler_1disconnect_FUNC,
 	_1g_1signal_1handlers_1block_1matched_FUNC,
 	_1g_1signal_1handlers_1disconnect_1matched_FUNC,
@@ -287,8 +287,8 @@
 	_1g_1utf8_1offset_1to_1pointer_FUNC,
 	_1g_1utf8_1pointer_1to_1offset_FUNC,
 	_1g_1utf8_1strlen_FUNC,
-	_1g_1utf8_1to_1utf16__II_3I_3I_3I_FUNC,
-	_1g_1utf8_1to_1utf16___3BI_3I_3I_3I_FUNC,
+	_1g_1utf8_1to_1utf16__JJ_3J_3J_3J_FUNC,
+	_1g_1utf8_1to_1utf16___3BJ_3J_3J_3J_FUNC,
 	_1g_1value_1peek_1pointer_FUNC,
 	_1gdk_1atom_1intern_FUNC,
 	_1gdk_1atom_1name_FUNC,
@@ -660,8 +660,8 @@
 	_1gtk_1label_1set_1justify_FUNC,
 	_1gtk_1label_1set_1line_1wrap_FUNC,
 	_1gtk_1label_1set_1line_1wrap_1mode_FUNC,
-	_1gtk_1label_1set_1text__II_FUNC,
-	_1gtk_1label_1set_1text__I_3B_FUNC,
+	_1gtk_1label_1set_1text__JJ_FUNC,
+	_1gtk_1label_1set_1text__J_3B_FUNC,
 	_1gtk_1label_1set_1text_1with_1mnemonic_FUNC,
 	_1gtk_1list_1append_1items_FUNC,
 	_1gtk_1list_1clear_1items_FUNC,
@@ -674,11 +674,11 @@
 	_1gtk_1list_1store_1insert_FUNC,
 	_1gtk_1list_1store_1newv_FUNC,
 	_1gtk_1list_1store_1remove_FUNC,
-	_1gtk_1list_1store_1set__IIIII_FUNC,
-	_1gtk_1list_1store_1set__IIIJI_FUNC,
-	_1gtk_1list_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC,
-	_1gtk_1list_1store_1set__IIIZI_FUNC,
-	_1gtk_1list_1store_1set__III_3BI_FUNC,
+	_1gtk_1list_1store_1set__JJIIJ_FUNC,
+	_1gtk_1list_1store_1set__JJIJJ_FUNC,
+	_1gtk_1list_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC,
+	_1gtk_1list_1store_1set__JJIZJ_FUNC,
+	_1gtk_1list_1store_1set__JJI_3BJ_FUNC,
 	_1gtk_1list_1unselect_1all_FUNC,
 	_1gtk_1list_1unselect_1item_FUNC,
 	_1gtk_1main_FUNC,
@@ -882,8 +882,8 @@
 	_1gtk_1text_1buffer_1get_1selection_1bound_FUNC,
 	_1gtk_1text_1buffer_1get_1selection_1bounds_FUNC,
 	_1gtk_1text_1buffer_1get_1text_FUNC,
-	_1gtk_1text_1buffer_1insert__II_3BI_FUNC,
-	_1gtk_1text_1buffer_1insert__I_3B_3BI_FUNC,
+	_1gtk_1text_1buffer_1insert__JJ_3BI_FUNC,
+	_1gtk_1text_1buffer_1insert__J_3B_3BI_FUNC,
 	_1gtk_1text_1buffer_1move_1mark_FUNC,
 	_1gtk_1text_1buffer_1paste_1clipboard_FUNC,
 	_1gtk_1text_1buffer_1place_1cursor_FUNC,
@@ -924,8 +924,8 @@
 	_1gtk_1tooltips_1force_1window_FUNC,
 	_1gtk_1tooltips_1new_FUNC,
 	_1gtk_1tooltips_1set_1tip_FUNC,
-	_1gtk_1tree_1model_1get__III_3II_FUNC,
-	_1gtk_1tree_1model_1get__III_3JI_FUNC,
+	_1gtk_1tree_1model_1get__JJI_3IJ_FUNC,
+	_1gtk_1tree_1model_1get__JJI_3JJ_FUNC,
 	_1gtk_1tree_1model_1get_1iter_FUNC,
 	_1gtk_1tree_1model_1get_1iter_1first_FUNC,
 	_1gtk_1tree_1model_1get_1n_1columns_FUNC,
@@ -943,7 +943,7 @@
 	_1gtk_1tree_1path_1get_1indices_FUNC,
 	_1gtk_1tree_1path_1new_FUNC,
 	_1gtk_1tree_1path_1new_1first_FUNC,
-	_1gtk_1tree_1path_1new_1from_1string__I_FUNC,
+	_1gtk_1tree_1path_1new_1from_1string__J_FUNC,
 	_1gtk_1tree_1path_1new_1from_1string___3B_FUNC,
 	_1gtk_1tree_1path_1next_FUNC,
 	_1gtk_1tree_1path_1prev_FUNC,
@@ -963,11 +963,11 @@
 	_1gtk_1tree_1store_1insert_FUNC,
 	_1gtk_1tree_1store_1newv_FUNC,
 	_1gtk_1tree_1store_1remove_FUNC,
-	_1gtk_1tree_1store_1set__IIIII_FUNC,
-	_1gtk_1tree_1store_1set__IIIJI_FUNC,
-	_1gtk_1tree_1store_1set__IIILorg_eclipse_swt_internal_gtk_GdkColor_2I_FUNC,
-	_1gtk_1tree_1store_1set__IIIZI_FUNC,
-	_1gtk_1tree_1store_1set__III_3BI_FUNC,
+	_1gtk_1tree_1store_1set__JJIIJ_FUNC,
+	_1gtk_1tree_1store_1set__JJIJJ_FUNC,
+	_1gtk_1tree_1store_1set__JJILorg_eclipse_swt_internal_gtk_GdkColor_2J_FUNC,
+	_1gtk_1tree_1store_1set__JJIZJ_FUNC,
+	_1gtk_1tree_1store_1set__JJI_3BJ_FUNC,
 	_1gtk_1tree_1view_1collapse_1row_FUNC,
 	_1gtk_1tree_1view_1column_1add_1attribute_FUNC,
 	_1gtk_1tree_1view_1column_1cell_1get_1position_FUNC,
@@ -1038,8 +1038,8 @@
 	_1gtk_1widget_1add_1accelerator_FUNC,
 	_1gtk_1widget_1add_1events_FUNC,
 	_1gtk_1widget_1child_1focus_FUNC,
-	_1gtk_1widget_1create_1pango_1layout__II_FUNC,
-	_1gtk_1widget_1create_1pango_1layout__I_3B_FUNC,
+	_1gtk_1widget_1create_1pango_1layout__JJ_FUNC,
+	_1gtk_1widget_1create_1pango_1layout__J_3B_FUNC,
 	_1gtk_1widget_1destroy_FUNC,
 	_1gtk_1widget_1event_FUNC,
 	_1gtk_1widget_1get_1accessible_FUNC,
@@ -1088,8 +1088,8 @@
 	_1gtk_1widget_1show_1now_FUNC,
 	_1gtk_1widget_1size_1allocate_FUNC,
 	_1gtk_1widget_1size_1request_FUNC,
-	_1gtk_1widget_1style_1get__I_3B_3II_FUNC,
-	_1gtk_1widget_1style_1get__I_3B_3JI_FUNC,
+	_1gtk_1widget_1style_1get__J_3B_3IJ_FUNC,
+	_1gtk_1widget_1style_1get__J_3B_3JJ_FUNC,
 	_1gtk_1widget_1translate_1coordinates_FUNC,
 	_1gtk_1widget_1unrealize_FUNC,
 	_1gtk_1window_1activate_1default_FUNC,
@@ -1237,62 +1237,62 @@
 	_1pango_1tab_1array_1set_1tab_FUNC,
 	g_1main_1context_1wakeup_FUNC,
 	localeconv_1decimal_1point_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GdkEventButton_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GdkEventExpose_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GdkEventMotion_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GtkTargetEntry_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_PangoAttribute_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_XButtonEvent_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_XClientMessageEvent_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_XCrossingEvent_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_XExposeEvent_2I_FUNC,
-	memmove__ILorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2II_FUNC,
-	memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2II_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GInterfaceInfo_2I_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GObjectClass_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GTypeInfo_2I_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GdkEventButton_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GdkEventExpose_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GdkEventMotion_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GtkAdjustment_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GtkFixed_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GtkTargetEntry_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_GtkWidgetClass_2_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_PangoAttribute_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_XButtonEvent_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_XClientMessageEvent_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_XCrossingEvent_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_XExposeEvent_2J_FUNC,
+	memmove__JLorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GObjectClass_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GTypeQuery_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkColor_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkDragContext_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventAny_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventButton_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventCrossing_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventExpose_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventFocus_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventKey_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventMotion_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventScroll_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventVisibility_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEventWindowState_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkEvent_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkImage_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkRectangle_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GdkVisual_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkAdjustment_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkBorder_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkCellRendererClass_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkColorSelectionDialog_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkCombo_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkFileSelection_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkFixed_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkSelectionData_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkTargetPair_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_GtkWidgetClass_2J_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrColor_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttrInt_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoAttribute_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoItem_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutLine_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoLayoutRun_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_PangoLogAttr_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_XButtonEvent_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_XCrossingEvent_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_XExposeEvent_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_XFocusChangeEvent_2JJ_FUNC,
+	memmove__Lorg_eclipse_swt_internal_gtk_XVisibilityEvent_2JJ_FUNC,
 	realpath_FUNC,
 } OS_FUNCS;
diff -ur x86/os_structs.c x86_64/os_structs.c
--- x86/os_structs.c	2009-06-24 21:14:02.000000000 -0400
+++ x86_64/os_structs.c	2009-02-11 17:53:46.000000000 -0500
@@ -29,27 +29,27 @@
 {
 	if (GInterfaceInfoFc.cached) return;
 	GInterfaceInfoFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GInterfaceInfoFc.interface_init = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_init", "I");
-	GInterfaceInfoFc.interface_finalize = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_finalize", "I");
-	GInterfaceInfoFc.interface_data = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_data", "I");
+	GInterfaceInfoFc.interface_init = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_init", "J");
+	GInterfaceInfoFc.interface_finalize = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_finalize", "J");
+	GInterfaceInfoFc.interface_data = (*env)->GetFieldID(env, GInterfaceInfoFc.clazz, "interface_data", "J");
 	GInterfaceInfoFc.cached = 1;
 }
 
 GInterfaceInfo *getGInterfaceInfoFields(JNIEnv *env, jobject lpObject, GInterfaceInfo *lpStruct)
 {
 	if (!GInterfaceInfoFc.cached) cacheGInterfaceInfoFields(env, lpObject);
-	lpStruct->interface_init = (GInterfaceInitFunc)(*env)->GetIntField(env, lpObject, GInterfaceInfoFc.interface_init);
-	lpStruct->interface_finalize = (GInterfaceFinalizeFunc)(*env)->GetIntField(env, lpObject, GInterfaceInfoFc.interface_finalize);
-	lpStruct->interface_data = (gpointer)(*env)->GetIntField(env, lpObject, GInterfaceInfoFc.interface_data);
+	lpStruct->interface_init = (GInterfaceInitFunc)(*env)->GetLongField(env, lpObject, GInterfaceInfoFc.interface_init);
+	lpStruct->interface_finalize = (GInterfaceFinalizeFunc)(*env)->GetLongField(env, lpObject, GInterfaceInfoFc.interface_finalize);
+	lpStruct->interface_data = (gpointer)(*env)->GetLongField(env, lpObject, GInterfaceInfoFc.interface_data);
 	return lpStruct;
 }
 
 void setGInterfaceInfoFields(JNIEnv *env, jobject lpObject, GInterfaceInfo *lpStruct)
 {
 	if (!GInterfaceInfoFc.cached) cacheGInterfaceInfoFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GInterfaceInfoFc.interface_init, (jint)lpStruct->interface_init);
-	(*env)->SetIntField(env, lpObject, GInterfaceInfoFc.interface_finalize, (jint)lpStruct->interface_finalize);
-	(*env)->SetIntField(env, lpObject, GInterfaceInfoFc.interface_data, (jint)lpStruct->interface_data);
+	(*env)->SetLongField(env, lpObject, GInterfaceInfoFc.interface_init, (jlong)lpStruct->interface_init);
+	(*env)->SetLongField(env, lpObject, GInterfaceInfoFc.interface_finalize, (jlong)lpStruct->interface_finalize);
+	(*env)->SetLongField(env, lpObject, GInterfaceInfoFc.interface_data, (jlong)lpStruct->interface_data);
 }
 #endif
 
@@ -66,39 +66,39 @@
 {
 	if (GObjectClassFc.cached) return;
 	GObjectClassFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GObjectClassFc.constructor = (*env)->GetFieldID(env, GObjectClassFc.clazz, "constructor", "I");
-	GObjectClassFc.set_property = (*env)->GetFieldID(env, GObjectClassFc.clazz, "set_property", "I");
-	GObjectClassFc.get_property = (*env)->GetFieldID(env, GObjectClassFc.clazz, "get_property", "I");
-	GObjectClassFc.dispose = (*env)->GetFieldID(env, GObjectClassFc.clazz, "dispose", "I");
-	GObjectClassFc.finalize = (*env)->GetFieldID(env, GObjectClassFc.clazz, "finalize", "I");
-	GObjectClassFc.dispatch_properties_changed = (*env)->GetFieldID(env, GObjectClassFc.clazz, "dispatch_properties_changed", "I");
-	GObjectClassFc.notify = (*env)->GetFieldID(env, GObjectClassFc.clazz, "notify", "I");
+	GObjectClassFc.constructor = (*env)->GetFieldID(env, GObjectClassFc.clazz, "constructor", "J");
+	GObjectClassFc.set_property = (*env)->GetFieldID(env, GObjectClassFc.clazz, "set_property", "J");
+	GObjectClassFc.get_property = (*env)->GetFieldID(env, GObjectClassFc.clazz, "get_property", "J");
+	GObjectClassFc.dispose = (*env)->GetFieldID(env, GObjectClassFc.clazz, "dispose", "J");
+	GObjectClassFc.finalize = (*env)->GetFieldID(env, GObjectClassFc.clazz, "finalize", "J");
+	GObjectClassFc.dispatch_properties_changed = (*env)->GetFieldID(env, GObjectClassFc.clazz, "dispatch_properties_changed", "J");
+	GObjectClassFc.notify = (*env)->GetFieldID(env, GObjectClassFc.clazz, "notify", "J");
 	GObjectClassFc.cached = 1;
 }
 
 GObjectClass *getGObjectClassFields(JNIEnv *env, jobject lpObject, GObjectClass *lpStruct)
 {
 	if (!GObjectClassFc.cached) cacheGObjectClassFields(env, lpObject);
-	lpStruct->constructor = (GObject *(*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.constructor);
-	lpStruct->set_property = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.set_property);
-	lpStruct->get_property = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.get_property);
-	lpStruct->dispose = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.dispose);
-	lpStruct->finalize = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.finalize);
-	lpStruct->dispatch_properties_changed = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.dispatch_properties_changed);
-	lpStruct->notify = (void (*)())(*env)->GetIntField(env, lpObject, GObjectClassFc.notify);
+	lpStruct->constructor = (GObject *(*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.constructor);
+	lpStruct->set_property = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.set_property);
+	lpStruct->get_property = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.get_property);
+	lpStruct->dispose = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.dispose);
+	lpStruct->finalize = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.finalize);
+	lpStruct->dispatch_properties_changed = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.dispatch_properties_changed);
+	lpStruct->notify = (void (*)())(*env)->GetLongField(env, lpObject, GObjectClassFc.notify);
 	return lpStruct;
 }
 
 void setGObjectClassFields(JNIEnv *env, jobject lpObject, GObjectClass *lpStruct)
 {
 	if (!GObjectClassFc.cached) cacheGObjectClassFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.constructor, (jint)lpStruct->constructor);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.set_property, (jint)lpStruct->set_property);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.get_property, (jint)lpStruct->get_property);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.dispose, (jint)lpStruct->dispose);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.finalize, (jint)lpStruct->finalize);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.dispatch_properties_changed, (jint)lpStruct->dispatch_properties_changed);
-	(*env)->SetIntField(env, lpObject, GObjectClassFc.notify, (jint)lpStruct->notify);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.constructor, (jlong)lpStruct->constructor);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.set_property, (jlong)lpStruct->set_property);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.get_property, (jlong)lpStruct->get_property);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.dispose, (jlong)lpStruct->dispose);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.finalize, (jlong)lpStruct->finalize);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.dispatch_properties_changed, (jlong)lpStruct->dispatch_properties_changed);
+	(*env)->SetLongField(env, lpObject, GObjectClassFc.notify, (jlong)lpStruct->notify);
 }
 #endif
 
@@ -116,15 +116,15 @@
 	if (GTypeInfoFc.cached) return;
 	GTypeInfoFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	GTypeInfoFc.class_size = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_size", "S");
-	GTypeInfoFc.base_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "base_init", "I");
-	GTypeInfoFc.base_finalize = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "base_finalize", "I");
-	GTypeInfoFc.class_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_init", "I");
-	GTypeInfoFc.class_finalize = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_finalize", "I");
-	GTypeInfoFc.class_data = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_data", "I");
+	GTypeInfoFc.base_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "base_init", "J");
+	GTypeInfoFc.base_finalize = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "base_finalize", "J");
+	GTypeInfoFc.class_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_init", "J");
+	GTypeInfoFc.class_finalize = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_finalize", "J");
+	GTypeInfoFc.class_data = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "class_data", "J");
 	GTypeInfoFc.instance_size = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "instance_size", "S");
 	GTypeInfoFc.n_preallocs = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "n_preallocs", "S");
-	GTypeInfoFc.instance_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "instance_init", "I");
-	GTypeInfoFc.value_table = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "value_table", "I");
+	GTypeInfoFc.instance_init = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "instance_init", "J");
+	GTypeInfoFc.value_table = (*env)->GetFieldID(env, GTypeInfoFc.clazz, "value_table", "J");
 	GTypeInfoFc.cached = 1;
 }
 
@@ -132,15 +132,15 @@
 {
 	if (!GTypeInfoFc.cached) cacheGTypeInfoFields(env, lpObject);
 	lpStruct->class_size = (guint16)(*env)->GetShortField(env, lpObject, GTypeInfoFc.class_size);
-	lpStruct->base_init = (GBaseInitFunc)(*env)->GetIntField(env, lpObject, GTypeInfoFc.base_init);
-	lpStruct->base_finalize = (GBaseFinalizeFunc)(*env)->GetIntField(env, lpObject, GTypeInfoFc.base_finalize);
-	lpStruct->class_init = (GClassInitFunc)(*env)->GetIntField(env, lpObject, GTypeInfoFc.class_init);
-	lpStruct->class_finalize = (GClassFinalizeFunc)(*env)->GetIntField(env, lpObject, GTypeInfoFc.class_finalize);
-	lpStruct->class_data = (gconstpointer)(*env)->GetIntField(env, lpObject, GTypeInfoFc.class_data);
+	lpStruct->base_init = (GBaseInitFunc)(*env)->GetLongField(env, lpObject, GTypeInfoFc.base_init);
+	lpStruct->base_finalize = (GBaseFinalizeFunc)(*env)->GetLongField(env, lpObject, GTypeInfoFc.base_finalize);
+	lpStruct->class_init = (GClassInitFunc)(*env)->GetLongField(env, lpObject, GTypeInfoFc.class_init);
+	lpStruct->class_finalize = (GClassFinalizeFunc)(*env)->GetLongField(env, lpObject, GTypeInfoFc.class_finalize);
+	lpStruct->class_data = (gconstpointer)(*env)->GetLongField(env, lpObject, GTypeInfoFc.class_data);
 	lpStruct->instance_size = (guint16)(*env)->GetShortField(env, lpObject, GTypeInfoFc.instance_size);
 	lpStruct->n_preallocs = (guint16)(*env)->GetShortField(env, lpObject, GTypeInfoFc.n_preallocs);
-	lpStruct->instance_init = (GInstanceInitFunc)(*env)->GetIntField(env, lpObject, GTypeInfoFc.instance_init);
-	lpStruct->value_table = (GTypeValueTable *)(*env)->GetIntField(env, lpObject, GTypeInfoFc.value_table);
+	lpStruct->instance_init = (GInstanceInitFunc)(*env)->GetLongField(env, lpObject, GTypeInfoFc.instance_init);
+	lpStruct->value_table = (GTypeValueTable *)(*env)->GetLongField(env, lpObject, GTypeInfoFc.value_table);
 	return lpStruct;
 }
 
@@ -148,15 +148,15 @@
 {
 	if (!GTypeInfoFc.cached) cacheGTypeInfoFields(env, lpObject);
 	(*env)->SetShortField(env, lpObject, GTypeInfoFc.class_size, (jshort)lpStruct->class_size);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.base_init, (jint)lpStruct->base_init);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.base_finalize, (jint)lpStruct->base_finalize);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.class_init, (jint)lpStruct->class_init);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.class_finalize, (jint)lpStruct->class_finalize);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.class_data, (jint)lpStruct->class_data);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.base_init, (jlong)lpStruct->base_init);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.base_finalize, (jlong)lpStruct->base_finalize);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.class_init, (jlong)lpStruct->class_init);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.class_finalize, (jlong)lpStruct->class_finalize);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.class_data, (jlong)lpStruct->class_data);
 	(*env)->SetShortField(env, lpObject, GTypeInfoFc.instance_size, (jshort)lpStruct->instance_size);
 	(*env)->SetShortField(env, lpObject, GTypeInfoFc.n_preallocs, (jshort)lpStruct->n_preallocs);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.instance_init, (jint)lpStruct->instance_init);
-	(*env)->SetIntField(env, lpObject, GTypeInfoFc.value_table, (jint)lpStruct->value_table);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.instance_init, (jlong)lpStruct->instance_init);
+	(*env)->SetLongField(env, lpObject, GTypeInfoFc.value_table, (jlong)lpStruct->value_table);
 }
 #endif
 
@@ -174,7 +174,7 @@
 	if (GTypeQueryFc.cached) return;
 	GTypeQueryFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	GTypeQueryFc.type = (*env)->GetFieldID(env, GTypeQueryFc.clazz, "type", "I");
-	GTypeQueryFc.type_name = (*env)->GetFieldID(env, GTypeQueryFc.clazz, "type_name", "I");
+	GTypeQueryFc.type_name = (*env)->GetFieldID(env, GTypeQueryFc.clazz, "type_name", "J");
 	GTypeQueryFc.class_size = (*env)->GetFieldID(env, GTypeQueryFc.clazz, "class_size", "I");
 	GTypeQueryFc.instance_size = (*env)->GetFieldID(env, GTypeQueryFc.clazz, "instance_size", "I");
 	GTypeQueryFc.cached = 1;
@@ -184,7 +184,7 @@
 {
 	if (!GTypeQueryFc.cached) cacheGTypeQueryFields(env, lpObject);
 	lpStruct->type = (GType)(*env)->GetIntField(env, lpObject, GTypeQueryFc.type);
-	lpStruct->type_name = (const gchar *)(*env)->GetIntField(env, lpObject, GTypeQueryFc.type_name);
+	lpStruct->type_name = (const gchar *)(*env)->GetLongField(env, lpObject, GTypeQueryFc.type_name);
 	lpStruct->class_size = (guint)(*env)->GetIntField(env, lpObject, GTypeQueryFc.class_size);
 	lpStruct->instance_size = (guint)(*env)->GetIntField(env, lpObject, GTypeQueryFc.instance_size);
 	return lpStruct;
@@ -194,7 +194,7 @@
 {
 	if (!GTypeQueryFc.cached) cacheGTypeQueryFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, GTypeQueryFc.type, (jint)lpStruct->type);
-	(*env)->SetIntField(env, lpObject, GTypeQueryFc.type_name, (jint)lpStruct->type_name);
+	(*env)->SetLongField(env, lpObject, GTypeQueryFc.type_name, (jlong)lpStruct->type_name);
 	(*env)->SetIntField(env, lpObject, GTypeQueryFc.class_size, (jint)lpStruct->class_size);
 	(*env)->SetIntField(env, lpObject, GTypeQueryFc.instance_size, (jint)lpStruct->instance_size);
 }
@@ -255,9 +255,9 @@
 	GdkDragContextFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	GdkDragContextFc.protocol = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "protocol", "I");
 	GdkDragContextFc.is_source = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "is_source", "Z");
-	GdkDragContextFc.source_window = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "source_window", "I");
-	GdkDragContextFc.dest_window = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "dest_window", "I");
-	GdkDragContextFc.targets = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "targets", "I");
+	GdkDragContextFc.source_window = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "source_window", "J");
+	GdkDragContextFc.dest_window = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "dest_window", "J");
+	GdkDragContextFc.targets = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "targets", "J");
 	GdkDragContextFc.actions = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "actions", "I");
 	GdkDragContextFc.suggested_action = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "suggested_action", "I");
 	GdkDragContextFc.action = (*env)->GetFieldID(env, GdkDragContextFc.clazz, "action", "I");
@@ -270,9 +270,9 @@
 	if (!GdkDragContextFc.cached) cacheGdkDragContextFields(env, lpObject);
 	lpStruct->protocol = (GdkDragProtocol)(*env)->GetIntField(env, lpObject, GdkDragContextFc.protocol);
 	lpStruct->is_source = (gboolean)(*env)->GetBooleanField(env, lpObject, GdkDragContextFc.is_source);
-	lpStruct->source_window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkDragContextFc.source_window);
-	lpStruct->dest_window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkDragContextFc.dest_window);
-	lpStruct->targets = (GList *)(*env)->GetIntField(env, lpObject, GdkDragContextFc.targets);
+	lpStruct->source_window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkDragContextFc.source_window);
+	lpStruct->dest_window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkDragContextFc.dest_window);
+	lpStruct->targets = (GList *)(*env)->GetLongField(env, lpObject, GdkDragContextFc.targets);
 	lpStruct->actions = (GdkDragAction)(*env)->GetIntField(env, lpObject, GdkDragContextFc.actions);
 	lpStruct->suggested_action = (GdkDragAction)(*env)->GetIntField(env, lpObject, GdkDragContextFc.suggested_action);
 	lpStruct->action = (GdkDragAction)(*env)->GetIntField(env, lpObject, GdkDragContextFc.action);
@@ -285,9 +285,9 @@
 	if (!GdkDragContextFc.cached) cacheGdkDragContextFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, GdkDragContextFc.protocol, (jint)lpStruct->protocol);
 	(*env)->SetBooleanField(env, lpObject, GdkDragContextFc.is_source, (jboolean)lpStruct->is_source);
-	(*env)->SetIntField(env, lpObject, GdkDragContextFc.source_window, (jint)lpStruct->source_window);
-	(*env)->SetIntField(env, lpObject, GdkDragContextFc.dest_window, (jint)lpStruct->dest_window);
-	(*env)->SetIntField(env, lpObject, GdkDragContextFc.targets, (jint)lpStruct->targets);
+	(*env)->SetLongField(env, lpObject, GdkDragContextFc.source_window, (jlong)lpStruct->source_window);
+	(*env)->SetLongField(env, lpObject, GdkDragContextFc.dest_window, (jlong)lpStruct->dest_window);
+	(*env)->SetLongField(env, lpObject, GdkDragContextFc.targets, (jlong)lpStruct->targets);
 	(*env)->SetIntField(env, lpObject, GdkDragContextFc.actions, (jint)lpStruct->actions);
 	(*env)->SetIntField(env, lpObject, GdkDragContextFc.suggested_action, (jint)lpStruct->suggested_action);
 	(*env)->SetIntField(env, lpObject, GdkDragContextFc.action, (jint)lpStruct->action);
@@ -340,7 +340,7 @@
 	if (GdkEventAnyFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventAnyFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventAnyFc.window = (*env)->GetFieldID(env, GdkEventAnyFc.clazz, "window", "I");
+	GdkEventAnyFc.window = (*env)->GetFieldID(env, GdkEventAnyFc.clazz, "window", "J");
 	GdkEventAnyFc.send_event = (*env)->GetFieldID(env, GdkEventAnyFc.clazz, "send_event", "B");
 	GdkEventAnyFc.cached = 1;
 }
@@ -349,7 +349,7 @@
 {
 	if (!GdkEventAnyFc.cached) cacheGdkEventAnyFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventAnyFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventAnyFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventAnyFc.send_event);
 	return lpStruct;
 }
@@ -358,7 +358,7 @@
 {
 	if (!GdkEventAnyFc.cached) cacheGdkEventAnyFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventAnyFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventAnyFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventAnyFc.send_event, (jbyte)lpStruct->send_event);
 }
 #endif
@@ -377,15 +377,15 @@
 	if (GdkEventButtonFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventButtonFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventButtonFc.window = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "window", "I");
+	GdkEventButtonFc.window = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "window", "J");
 	GdkEventButtonFc.send_event = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "send_event", "B");
 	GdkEventButtonFc.time = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "time", "I");
 	GdkEventButtonFc.x = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "x", "D");
 	GdkEventButtonFc.y = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "y", "D");
-	GdkEventButtonFc.axes = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "axes", "I");
+	GdkEventButtonFc.axes = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "axes", "J");
 	GdkEventButtonFc.state = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "state", "I");
 	GdkEventButtonFc.button = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "button", "I");
-	GdkEventButtonFc.device = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "device", "I");
+	GdkEventButtonFc.device = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "device", "J");
 	GdkEventButtonFc.x_root = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "x_root", "D");
 	GdkEventButtonFc.y_root = (*env)->GetFieldID(env, GdkEventButtonFc.clazz, "y_root", "D");
 	GdkEventButtonFc.cached = 1;
@@ -395,15 +395,15 @@
 {
 	if (!GdkEventButtonFc.cached) cacheGdkEventButtonFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventButtonFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventButtonFc.send_event);
 	lpStruct->time = (guint32)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.time);
 	lpStruct->x = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventButtonFc.x);
 	lpStruct->y = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventButtonFc.y);
-	lpStruct->axes = (gdouble *)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.axes);
+	lpStruct->axes = (gdouble *)(*env)->GetLongField(env, lpObject, GdkEventButtonFc.axes);
 	lpStruct->state = (guint)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.state);
 	lpStruct->button = (guint)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.button);
-	lpStruct->device = (GdkDevice *)(*env)->GetIntField(env, lpObject, GdkEventButtonFc.device);
+	lpStruct->device = (GdkDevice *)(*env)->GetLongField(env, lpObject, GdkEventButtonFc.device);
 	lpStruct->x_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventButtonFc.x_root);
 	lpStruct->y_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventButtonFc.y_root);
 	return lpStruct;
@@ -413,15 +413,15 @@
 {
 	if (!GdkEventButtonFc.cached) cacheGdkEventButtonFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventButtonFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventButtonFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.time, (jint)lpStruct->time);
 	(*env)->SetDoubleField(env, lpObject, GdkEventButtonFc.x, (jdouble)lpStruct->x);
 	(*env)->SetDoubleField(env, lpObject, GdkEventButtonFc.y, (jdouble)lpStruct->y);
-	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.axes, (jint)lpStruct->axes);
+	(*env)->SetLongField(env, lpObject, GdkEventButtonFc.axes, (jlong)lpStruct->axes);
 	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.state, (jint)lpStruct->state);
 	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.button, (jint)lpStruct->button);
-	(*env)->SetIntField(env, lpObject, GdkEventButtonFc.device, (jint)lpStruct->device);
+	(*env)->SetLongField(env, lpObject, GdkEventButtonFc.device, (jlong)lpStruct->device);
 	(*env)->SetDoubleField(env, lpObject, GdkEventButtonFc.x_root, (jdouble)lpStruct->x_root);
 	(*env)->SetDoubleField(env, lpObject, GdkEventButtonFc.y_root, (jdouble)lpStruct->y_root);
 }
@@ -441,9 +441,9 @@
 	if (GdkEventCrossingFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventCrossingFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventCrossingFc.window = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "window", "I");
+	GdkEventCrossingFc.window = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "window", "J");
 	GdkEventCrossingFc.send_event = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "send_event", "B");
-	GdkEventCrossingFc.subwindow = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "subwindow", "I");
+	GdkEventCrossingFc.subwindow = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "subwindow", "J");
 	GdkEventCrossingFc.time = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "time", "I");
 	GdkEventCrossingFc.x = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "x", "D");
 	GdkEventCrossingFc.y = (*env)->GetFieldID(env, GdkEventCrossingFc.clazz, "y", "D");
@@ -460,9 +460,9 @@
 {
 	if (!GdkEventCrossingFc.cached) cacheGdkEventCrossingFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventCrossingFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventCrossingFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventCrossingFc.send_event);
-	lpStruct->subwindow = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventCrossingFc.subwindow);
+	lpStruct->subwindow = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventCrossingFc.subwindow);
 	lpStruct->time = (*env)->GetIntField(env, lpObject, GdkEventCrossingFc.time);
 	lpStruct->x = (*env)->GetDoubleField(env, lpObject, GdkEventCrossingFc.x);
 	lpStruct->y = (*env)->GetDoubleField(env, lpObject, GdkEventCrossingFc.y);
@@ -479,9 +479,9 @@
 {
 	if (!GdkEventCrossingFc.cached) cacheGdkEventCrossingFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventCrossingFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventCrossingFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventCrossingFc.send_event, (jbyte)lpStruct->send_event);
-	(*env)->SetIntField(env, lpObject, GdkEventCrossingFc.subwindow, (jint)lpStruct->subwindow);
+	(*env)->SetLongField(env, lpObject, GdkEventCrossingFc.subwindow, (jlong)lpStruct->subwindow);
 	(*env)->SetIntField(env, lpObject, GdkEventCrossingFc.time, (jint)lpStruct->time);
 	(*env)->SetDoubleField(env, lpObject, GdkEventCrossingFc.x, (jdouble)lpStruct->x);
 	(*env)->SetDoubleField(env, lpObject, GdkEventCrossingFc.y, (jdouble)lpStruct->y);
@@ -508,13 +508,13 @@
 	if (GdkEventExposeFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventExposeFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventExposeFc.window = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "window", "I");
+	GdkEventExposeFc.window = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "window", "J");
 	GdkEventExposeFc.send_event = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "send_event", "B");
 	GdkEventExposeFc.area_x = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "area_x", "I");
 	GdkEventExposeFc.area_y = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "area_y", "I");
 	GdkEventExposeFc.area_width = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "area_width", "I");
 	GdkEventExposeFc.area_height = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "area_height", "I");
-	GdkEventExposeFc.region = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "region", "I");
+	GdkEventExposeFc.region = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "region", "J");
 	GdkEventExposeFc.count = (*env)->GetFieldID(env, GdkEventExposeFc.clazz, "count", "I");
 	GdkEventExposeFc.cached = 1;
 }
@@ -523,13 +523,13 @@
 {
 	if (!GdkEventExposeFc.cached) cacheGdkEventExposeFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventExposeFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventExposeFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventExposeFc.send_event);
 	lpStruct->area.x = (*env)->GetIntField(env, lpObject, GdkEventExposeFc.area_x);
 	lpStruct->area.y = (*env)->GetIntField(env, lpObject, GdkEventExposeFc.area_y);
 	lpStruct->area.width = (*env)->GetIntField(env, lpObject, GdkEventExposeFc.area_width);
 	lpStruct->area.height = (*env)->GetIntField(env, lpObject, GdkEventExposeFc.area_height);
-	lpStruct->region = (GdkRegion *)(*env)->GetIntField(env, lpObject, GdkEventExposeFc.region);
+	lpStruct->region = (GdkRegion *)(*env)->GetLongField(env, lpObject, GdkEventExposeFc.region);
 	lpStruct->count = (gint)(*env)->GetIntField(env, lpObject, GdkEventExposeFc.count);
 	return lpStruct;
 }
@@ -538,13 +538,13 @@
 {
 	if (!GdkEventExposeFc.cached) cacheGdkEventExposeFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventExposeFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventExposeFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.area_x, (jint)lpStruct->area.x);
 	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.area_y, (jint)lpStruct->area.y);
 	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.area_width, (jint)lpStruct->area.width);
 	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.area_height, (jint)lpStruct->area.height);
-	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.region, (jint)lpStruct->region);
+	(*env)->SetLongField(env, lpObject, GdkEventExposeFc.region, (jlong)lpStruct->region);
 	(*env)->SetIntField(env, lpObject, GdkEventExposeFc.count, (jint)lpStruct->count);
 }
 #endif
@@ -563,7 +563,7 @@
 	if (GdkEventFocusFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventFocusFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventFocusFc.window = (*env)->GetFieldID(env, GdkEventFocusFc.clazz, "window", "I");
+	GdkEventFocusFc.window = (*env)->GetFieldID(env, GdkEventFocusFc.clazz, "window", "J");
 	GdkEventFocusFc.send_event = (*env)->GetFieldID(env, GdkEventFocusFc.clazz, "send_event", "B");
 	GdkEventFocusFc.in = (*env)->GetFieldID(env, GdkEventFocusFc.clazz, "in", "S");
 	GdkEventFocusFc.cached = 1;
@@ -573,7 +573,7 @@
 {
 	if (!GdkEventFocusFc.cached) cacheGdkEventFocusFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventFocusFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventFocusFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventFocusFc.send_event);
 	lpStruct->in = (gint16)(*env)->GetShortField(env, lpObject, GdkEventFocusFc.in);
 	return lpStruct;
@@ -583,7 +583,7 @@
 {
 	if (!GdkEventFocusFc.cached) cacheGdkEventFocusFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventFocusFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventFocusFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventFocusFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetShortField(env, lpObject, GdkEventFocusFc.in, (jshort)lpStruct->in);
 }
@@ -603,13 +603,13 @@
 	if (GdkEventKeyFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventKeyFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventKeyFc.window = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "window", "I");
+	GdkEventKeyFc.window = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "window", "J");
 	GdkEventKeyFc.send_event = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "send_event", "B");
 	GdkEventKeyFc.time = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "time", "I");
 	GdkEventKeyFc.state = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "state", "I");
 	GdkEventKeyFc.keyval = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "keyval", "I");
 	GdkEventKeyFc.length = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "length", "I");
-	GdkEventKeyFc.string = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "string", "I");
+	GdkEventKeyFc.string = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "string", "J");
 	GdkEventKeyFc.hardware_keycode = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "hardware_keycode", "S");
 	GdkEventKeyFc.group = (*env)->GetFieldID(env, GdkEventKeyFc.clazz, "group", "B");
 	GdkEventKeyFc.cached = 1;
@@ -619,13 +619,13 @@
 {
 	if (!GdkEventKeyFc.cached) cacheGdkEventKeyFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventKeyFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventKeyFc.send_event);
 	lpStruct->time = (guint32)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.time);
 	lpStruct->state = (guint)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.state);
 	lpStruct->keyval = (guint)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.keyval);
 	lpStruct->length = (gint)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.length);
-	lpStruct->string = (gchar *)(*env)->GetIntField(env, lpObject, GdkEventKeyFc.string);
+	lpStruct->string = (gchar *)(*env)->GetLongField(env, lpObject, GdkEventKeyFc.string);
 	lpStruct->hardware_keycode = (guint16)(*env)->GetShortField(env, lpObject, GdkEventKeyFc.hardware_keycode);
 	lpStruct->group = (guint8)(*env)->GetByteField(env, lpObject, GdkEventKeyFc.group);
 	return lpStruct;
@@ -635,13 +635,13 @@
 {
 	if (!GdkEventKeyFc.cached) cacheGdkEventKeyFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventKeyFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventKeyFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.time, (jint)lpStruct->time);
 	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.state, (jint)lpStruct->state);
 	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.keyval, (jint)lpStruct->keyval);
 	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.length, (jint)lpStruct->length);
-	(*env)->SetIntField(env, lpObject, GdkEventKeyFc.string, (jint)lpStruct->string);
+	(*env)->SetLongField(env, lpObject, GdkEventKeyFc.string, (jlong)lpStruct->string);
 	(*env)->SetShortField(env, lpObject, GdkEventKeyFc.hardware_keycode, (jshort)lpStruct->hardware_keycode);
 	(*env)->SetByteField(env, lpObject, GdkEventKeyFc.group, (jbyte)lpStruct->group);
 }
@@ -661,15 +661,15 @@
 	if (GdkEventMotionFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventMotionFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventMotionFc.window = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "window", "I");
+	GdkEventMotionFc.window = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "window", "J");
 	GdkEventMotionFc.send_event = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "send_event", "B");
 	GdkEventMotionFc.time = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "time", "I");
 	GdkEventMotionFc.x = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "x", "D");
 	GdkEventMotionFc.y = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "y", "D");
-	GdkEventMotionFc.axes = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "axes", "I");
+	GdkEventMotionFc.axes = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "axes", "J");
 	GdkEventMotionFc.state = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "state", "I");
 	GdkEventMotionFc.is_hint = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "is_hint", "S");
-	GdkEventMotionFc.device = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "device", "I");
+	GdkEventMotionFc.device = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "device", "J");
 	GdkEventMotionFc.x_root = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "x_root", "D");
 	GdkEventMotionFc.y_root = (*env)->GetFieldID(env, GdkEventMotionFc.clazz, "y_root", "D");
 	GdkEventMotionFc.cached = 1;
@@ -679,15 +679,15 @@
 {
 	if (!GdkEventMotionFc.cached) cacheGdkEventMotionFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventMotionFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventMotionFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventMotionFc.send_event);
 	lpStruct->time = (guint32)(*env)->GetIntField(env, lpObject, GdkEventMotionFc.time);
 	lpStruct->x = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventMotionFc.x);
 	lpStruct->y = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventMotionFc.y);
-	lpStruct->axes = (gdouble *)(*env)->GetIntField(env, lpObject, GdkEventMotionFc.axes);
+	lpStruct->axes = (gdouble *)(*env)->GetLongField(env, lpObject, GdkEventMotionFc.axes);
 	lpStruct->state = (guint)(*env)->GetIntField(env, lpObject, GdkEventMotionFc.state);
 	lpStruct->is_hint = (gint16)(*env)->GetShortField(env, lpObject, GdkEventMotionFc.is_hint);
-	lpStruct->device = (GdkDevice *)(*env)->GetIntField(env, lpObject, GdkEventMotionFc.device);
+	lpStruct->device = (GdkDevice *)(*env)->GetLongField(env, lpObject, GdkEventMotionFc.device);
 	lpStruct->x_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventMotionFc.x_root);
 	lpStruct->y_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventMotionFc.y_root);
 	return lpStruct;
@@ -697,15 +697,15 @@
 {
 	if (!GdkEventMotionFc.cached) cacheGdkEventMotionFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventMotionFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventMotionFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventMotionFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventMotionFc.time, (jint)lpStruct->time);
 	(*env)->SetDoubleField(env, lpObject, GdkEventMotionFc.x, (jdouble)lpStruct->x);
 	(*env)->SetDoubleField(env, lpObject, GdkEventMotionFc.y, (jdouble)lpStruct->y);
-	(*env)->SetIntField(env, lpObject, GdkEventMotionFc.axes, (jint)lpStruct->axes);
+	(*env)->SetLongField(env, lpObject, GdkEventMotionFc.axes, (jlong)lpStruct->axes);
 	(*env)->SetIntField(env, lpObject, GdkEventMotionFc.state, (jint)lpStruct->state);
 	(*env)->SetShortField(env, lpObject, GdkEventMotionFc.is_hint, (jshort)lpStruct->is_hint);
-	(*env)->SetIntField(env, lpObject, GdkEventMotionFc.device, (jint)lpStruct->device);
+	(*env)->SetLongField(env, lpObject, GdkEventMotionFc.device, (jlong)lpStruct->device);
 	(*env)->SetDoubleField(env, lpObject, GdkEventMotionFc.x_root, (jdouble)lpStruct->x_root);
 	(*env)->SetDoubleField(env, lpObject, GdkEventMotionFc.y_root, (jdouble)lpStruct->y_root);
 }
@@ -725,14 +725,14 @@
 	if (GdkEventScrollFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventScrollFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventScrollFc.window = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "window", "I");
+	GdkEventScrollFc.window = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "window", "J");
 	GdkEventScrollFc.send_event = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "send_event", "B");
 	GdkEventScrollFc.time = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "time", "I");
 	GdkEventScrollFc.x = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "x", "D");
 	GdkEventScrollFc.y = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "y", "D");
 	GdkEventScrollFc.state = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "state", "I");
 	GdkEventScrollFc.direction = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "direction", "I");
-	GdkEventScrollFc.device = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "device", "I");
+	GdkEventScrollFc.device = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "device", "J");
 	GdkEventScrollFc.x_root = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "x_root", "D");
 	GdkEventScrollFc.y_root = (*env)->GetFieldID(env, GdkEventScrollFc.clazz, "y_root", "D");
 	GdkEventScrollFc.cached = 1;
@@ -742,14 +742,14 @@
 {
 	if (!GdkEventScrollFc.cached) cacheGdkEventScrollFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventScrollFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventScrollFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventScrollFc.send_event);
 	lpStruct->time = (guint32)(*env)->GetIntField(env, lpObject, GdkEventScrollFc.time);
 	lpStruct->x = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventScrollFc.x);
 	lpStruct->y = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventScrollFc.y);
 	lpStruct->state = (guint)(*env)->GetIntField(env, lpObject, GdkEventScrollFc.state);
 	lpStruct->direction = (GdkScrollDirection)(*env)->GetIntField(env, lpObject, GdkEventScrollFc.direction);
-	lpStruct->device = (GdkDevice *)(*env)->GetIntField(env, lpObject, GdkEventScrollFc.device);
+	lpStruct->device = (GdkDevice *)(*env)->GetLongField(env, lpObject, GdkEventScrollFc.device);
 	lpStruct->x_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventScrollFc.x_root);
 	lpStruct->y_root = (gdouble)(*env)->GetDoubleField(env, lpObject, GdkEventScrollFc.y_root);
 	return lpStruct;
@@ -759,14 +759,14 @@
 {
 	if (!GdkEventScrollFc.cached) cacheGdkEventScrollFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventScrollFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventScrollFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventScrollFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventScrollFc.time, (jint)lpStruct->time);
 	(*env)->SetDoubleField(env, lpObject, GdkEventScrollFc.x, (jdouble)lpStruct->x);
 	(*env)->SetDoubleField(env, lpObject, GdkEventScrollFc.y, (jdouble)lpStruct->y);
 	(*env)->SetIntField(env, lpObject, GdkEventScrollFc.state, (jint)lpStruct->state);
 	(*env)->SetIntField(env, lpObject, GdkEventScrollFc.direction, (jint)lpStruct->direction);
-	(*env)->SetIntField(env, lpObject, GdkEventScrollFc.device, (jint)lpStruct->device);
+	(*env)->SetLongField(env, lpObject, GdkEventScrollFc.device, (jlong)lpStruct->device);
 	(*env)->SetDoubleField(env, lpObject, GdkEventScrollFc.x_root, (jdouble)lpStruct->x_root);
 	(*env)->SetDoubleField(env, lpObject, GdkEventScrollFc.y_root, (jdouble)lpStruct->y_root);
 }
@@ -786,7 +786,7 @@
 	if (GdkEventVisibilityFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventVisibilityFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventVisibilityFc.window = (*env)->GetFieldID(env, GdkEventVisibilityFc.clazz, "window", "I");
+	GdkEventVisibilityFc.window = (*env)->GetFieldID(env, GdkEventVisibilityFc.clazz, "window", "J");
 	GdkEventVisibilityFc.send_event = (*env)->GetFieldID(env, GdkEventVisibilityFc.clazz, "send_event", "B");
 	GdkEventVisibilityFc.state = (*env)->GetFieldID(env, GdkEventVisibilityFc.clazz, "state", "I");
 	GdkEventVisibilityFc.cached = 1;
@@ -796,7 +796,7 @@
 {
 	if (!GdkEventVisibilityFc.cached) cacheGdkEventVisibilityFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventVisibilityFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventVisibilityFc.window);
 	lpStruct->send_event = (gint8)(*env)->GetByteField(env, lpObject, GdkEventVisibilityFc.send_event);
 	lpStruct->state = (GdkVisibilityState)(*env)->GetIntField(env, lpObject, GdkEventVisibilityFc.state);
 	return lpStruct;
@@ -806,7 +806,7 @@
 {
 	if (!GdkEventVisibilityFc.cached) cacheGdkEventVisibilityFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventVisibilityFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventVisibilityFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventVisibilityFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventVisibilityFc.state, (jint)lpStruct->state);
 }
@@ -826,7 +826,7 @@
 	if (GdkEventWindowStateFc.cached) return;
 	cacheGdkEventFields(env, lpObject);
 	GdkEventWindowStateFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkEventWindowStateFc.window = (*env)->GetFieldID(env, GdkEventWindowStateFc.clazz, "window", "I");
+	GdkEventWindowStateFc.window = (*env)->GetFieldID(env, GdkEventWindowStateFc.clazz, "window", "J");
 	GdkEventWindowStateFc.send_event = (*env)->GetFieldID(env, GdkEventWindowStateFc.clazz, "send_event", "B");
 	GdkEventWindowStateFc.changed_mask = (*env)->GetFieldID(env, GdkEventWindowStateFc.clazz, "changed_mask", "I");
 	GdkEventWindowStateFc.new_window_state = (*env)->GetFieldID(env, GdkEventWindowStateFc.clazz, "new_window_state", "I");
@@ -837,7 +837,7 @@
 {
 	if (!GdkEventWindowStateFc.cached) cacheGdkEventWindowStateFields(env, lpObject);
 	getGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	lpStruct->window = (GdkWindow *)(*env)->GetIntField(env, lpObject, GdkEventWindowStateFc.window);
+	lpStruct->window = (GdkWindow *)(*env)->GetLongField(env, lpObject, GdkEventWindowStateFc.window);
 	lpStruct->send_event = (*env)->GetByteField(env, lpObject, GdkEventWindowStateFc.send_event);
 	lpStruct->changed_mask = (*env)->GetIntField(env, lpObject, GdkEventWindowStateFc.changed_mask);
 	lpStruct->new_window_state = (*env)->GetIntField(env, lpObject, GdkEventWindowStateFc.new_window_state);
@@ -848,7 +848,7 @@
 {
 	if (!GdkEventWindowStateFc.cached) cacheGdkEventWindowStateFields(env, lpObject);
 	setGdkEventFields(env, lpObject, (GdkEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, GdkEventWindowStateFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, GdkEventWindowStateFc.window, (jlong)lpStruct->window);
 	(*env)->SetByteField(env, lpObject, GdkEventWindowStateFc.send_event, (jbyte)lpStruct->send_event);
 	(*env)->SetIntField(env, lpObject, GdkEventWindowStateFc.changed_mask, (jint)lpStruct->changed_mask);
 	(*env)->SetIntField(env, lpObject, GdkEventWindowStateFc.new_window_state, (jint)lpStruct->new_window_state);
@@ -876,12 +876,12 @@
 	GdkGCValuesFc.background_red = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "background_red", "S");
 	GdkGCValuesFc.background_green = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "background_green", "S");
 	GdkGCValuesFc.background_blue = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "background_blue", "S");
-	GdkGCValuesFc.font = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "font", "I");
-	GdkGCValuesFc.function = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "function", "I");
+	GdkGCValuesFc.font = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "font", "J");
+	GdkGCValuesFc.function = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "function", "J");
 	GdkGCValuesFc.fill = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "fill", "I");
-	GdkGCValuesFc.tile = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "tile", "I");
-	GdkGCValuesFc.stipple = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "stipple", "I");
-	GdkGCValuesFc.clip_mask = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "clip_mask", "I");
+	GdkGCValuesFc.tile = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "tile", "J");
+	GdkGCValuesFc.stipple = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "stipple", "J");
+	GdkGCValuesFc.clip_mask = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "clip_mask", "J");
 	GdkGCValuesFc.subwindow_mode = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "subwindow_mode", "I");
 	GdkGCValuesFc.ts_x_origin = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "ts_x_origin", "I");
 	GdkGCValuesFc.ts_y_origin = (*env)->GetFieldID(env, GdkGCValuesFc.clazz, "ts_y_origin", "I");
@@ -906,12 +906,12 @@
 	lpStruct->background.red = (guint16)(*env)->GetShortField(env, lpObject, GdkGCValuesFc.background_red);
 	lpStruct->background.green = (guint16)(*env)->GetShortField(env, lpObject, GdkGCValuesFc.background_green);
 	lpStruct->background.blue = (guint16)(*env)->GetShortField(env, lpObject, GdkGCValuesFc.background_blue);
-	lpStruct->font = (GdkFont *)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.font);
-	lpStruct->function = (GdkFunction)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.function);
+	lpStruct->font = (GdkFont *)(*env)->GetLongField(env, lpObject, GdkGCValuesFc.font);
+	lpStruct->function = (GdkFunction)(*env)->GetLongField(env, lpObject, GdkGCValuesFc.function);
 	lpStruct->fill = (GdkFill)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.fill);
-	lpStruct->tile = (GdkPixmap *)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.tile);
-	lpStruct->stipple = (GdkPixmap *)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.stipple);
-	lpStruct->clip_mask = (GdkPixmap *)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.clip_mask);
+	lpStruct->tile = (GdkPixmap *)(*env)->GetLongField(env, lpObject, GdkGCValuesFc.tile);
+	lpStruct->stipple = (GdkPixmap *)(*env)->GetLongField(env, lpObject, GdkGCValuesFc.stipple);
+	lpStruct->clip_mask = (GdkPixmap *)(*env)->GetLongField(env, lpObject, GdkGCValuesFc.clip_mask);
 	lpStruct->subwindow_mode = (GdkSubwindowMode)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.subwindow_mode);
 	lpStruct->ts_x_origin = (gint)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.ts_x_origin);
 	lpStruct->ts_y_origin = (gint)(*env)->GetIntField(env, lpObject, GdkGCValuesFc.ts_y_origin);
@@ -936,12 +936,12 @@
 	(*env)->SetShortField(env, lpObject, GdkGCValuesFc.background_red, (jshort)lpStruct->background.red);
 	(*env)->SetShortField(env, lpObject, GdkGCValuesFc.background_green, (jshort)lpStruct->background.green);
 	(*env)->SetShortField(env, lpObject, GdkGCValuesFc.background_blue, (jshort)lpStruct->background.blue);
-	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.font, (jint)lpStruct->font);
-	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.function, (jint)lpStruct->function);
+	(*env)->SetLongField(env, lpObject, GdkGCValuesFc.font, (jlong)lpStruct->font);
+	(*env)->SetLongField(env, lpObject, GdkGCValuesFc.function, (jlong)lpStruct->function);
 	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.fill, (jint)lpStruct->fill);
-	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.tile, (jint)lpStruct->tile);
-	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.stipple, (jint)lpStruct->stipple);
-	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.clip_mask, (jint)lpStruct->clip_mask);
+	(*env)->SetLongField(env, lpObject, GdkGCValuesFc.tile, (jlong)lpStruct->tile);
+	(*env)->SetLongField(env, lpObject, GdkGCValuesFc.stipple, (jlong)lpStruct->stipple);
+	(*env)->SetLongField(env, lpObject, GdkGCValuesFc.clip_mask, (jlong)lpStruct->clip_mask);
 	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.subwindow_mode, (jint)lpStruct->subwindow_mode);
 	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.ts_x_origin, (jint)lpStruct->ts_x_origin);
 	(*env)->SetIntField(env, lpObject, GdkGCValuesFc.ts_y_origin, (jint)lpStruct->ts_y_origin);
@@ -1030,7 +1030,7 @@
 	if (GdkImageFc.cached) return;
 	GdkImageFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	GdkImageFc.type = (*env)->GetFieldID(env, GdkImageFc.clazz, "type", "I");
-	GdkImageFc.visual = (*env)->GetFieldID(env, GdkImageFc.clazz, "visual", "I");
+	GdkImageFc.visual = (*env)->GetFieldID(env, GdkImageFc.clazz, "visual", "J");
 	GdkImageFc.byte_order = (*env)->GetFieldID(env, GdkImageFc.clazz, "byte_order", "I");
 	GdkImageFc.width = (*env)->GetFieldID(env, GdkImageFc.clazz, "width", "I");
 	GdkImageFc.height = (*env)->GetFieldID(env, GdkImageFc.clazz, "height", "I");
@@ -1038,9 +1038,9 @@
 	GdkImageFc.bpp = (*env)->GetFieldID(env, GdkImageFc.clazz, "bpp", "S");
 	GdkImageFc.bpl = (*env)->GetFieldID(env, GdkImageFc.clazz, "bpl", "S");
 	GdkImageFc.bits_per_pixel = (*env)->GetFieldID(env, GdkImageFc.clazz, "bits_per_pixel", "S");
-	GdkImageFc.mem = (*env)->GetFieldID(env, GdkImageFc.clazz, "mem", "I");
-	GdkImageFc.colormap = (*env)->GetFieldID(env, GdkImageFc.clazz, "colormap", "I");
-	GdkImageFc.windowing_data = (*env)->GetFieldID(env, GdkImageFc.clazz, "windowing_data", "I");
+	GdkImageFc.mem = (*env)->GetFieldID(env, GdkImageFc.clazz, "mem", "J");
+	GdkImageFc.colormap = (*env)->GetFieldID(env, GdkImageFc.clazz, "colormap", "J");
+	GdkImageFc.windowing_data = (*env)->GetFieldID(env, GdkImageFc.clazz, "windowing_data", "J");
 	GdkImageFc.cached = 1;
 }
 
@@ -1048,7 +1048,7 @@
 {
 	if (!GdkImageFc.cached) cacheGdkImageFields(env, lpObject);
 	lpStruct->type = (GdkImageType)(*env)->GetIntField(env, lpObject, GdkImageFc.type);
-	lpStruct->visual = (GdkVisual *)(*env)->GetIntField(env, lpObject, GdkImageFc.visual);
+	lpStruct->visual = (GdkVisual *)(*env)->GetLongField(env, lpObject, GdkImageFc.visual);
 	lpStruct->byte_order = (GdkByteOrder)(*env)->GetIntField(env, lpObject, GdkImageFc.byte_order);
 	lpStruct->width = (gint)(*env)->GetIntField(env, lpObject, GdkImageFc.width);
 	lpStruct->height = (gint)(*env)->GetIntField(env, lpObject, GdkImageFc.height);
@@ -1056,9 +1056,9 @@
 	lpStruct->bpp = (guint16)(*env)->GetShortField(env, lpObject, GdkImageFc.bpp);
 	lpStruct->bpl = (guint16)(*env)->GetShortField(env, lpObject, GdkImageFc.bpl);
 	lpStruct->bits_per_pixel = (guint16)(*env)->GetShortField(env, lpObject, GdkImageFc.bits_per_pixel);
-	lpStruct->mem = (gpointer)(*env)->GetIntField(env, lpObject, GdkImageFc.mem);
-	lpStruct->colormap = (GdkColormap *)(*env)->GetIntField(env, lpObject, GdkImageFc.colormap);
-	lpStruct->windowing_data = (gpointer)(*env)->GetIntField(env, lpObject, GdkImageFc.windowing_data);
+	lpStruct->mem = (gpointer)(*env)->GetLongField(env, lpObject, GdkImageFc.mem);
+	lpStruct->colormap = (GdkColormap *)(*env)->GetLongField(env, lpObject, GdkImageFc.colormap);
+	lpStruct->windowing_data = (gpointer)(*env)->GetLongField(env, lpObject, GdkImageFc.windowing_data);
 	return lpStruct;
 }
 
@@ -1066,7 +1066,7 @@
 {
 	if (!GdkImageFc.cached) cacheGdkImageFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, GdkImageFc.type, (jint)lpStruct->type);
-	(*env)->SetIntField(env, lpObject, GdkImageFc.visual, (jint)lpStruct->visual);
+	(*env)->SetLongField(env, lpObject, GdkImageFc.visual, (jlong)lpStruct->visual);
 	(*env)->SetIntField(env, lpObject, GdkImageFc.byte_order, (jint)lpStruct->byte_order);
 	(*env)->SetIntField(env, lpObject, GdkImageFc.width, (jint)lpStruct->width);
 	(*env)->SetIntField(env, lpObject, GdkImageFc.height, (jint)lpStruct->height);
@@ -1074,9 +1074,9 @@
 	(*env)->SetShortField(env, lpObject, GdkImageFc.bpp, (jshort)lpStruct->bpp);
 	(*env)->SetShortField(env, lpObject, GdkImageFc.bpl, (jshort)lpStruct->bpl);
 	(*env)->SetShortField(env, lpObject, GdkImageFc.bits_per_pixel, (jshort)lpStruct->bits_per_pixel);
-	(*env)->SetIntField(env, lpObject, GdkImageFc.mem, (jint)lpStruct->mem);
-	(*env)->SetIntField(env, lpObject, GdkImageFc.colormap, (jint)lpStruct->colormap);
-	(*env)->SetIntField(env, lpObject, GdkImageFc.windowing_data, (jint)lpStruct->windowing_data);
+	(*env)->SetLongField(env, lpObject, GdkImageFc.mem, (jlong)lpStruct->mem);
+	(*env)->SetLongField(env, lpObject, GdkImageFc.colormap, (jlong)lpStruct->colormap);
+	(*env)->SetLongField(env, lpObject, GdkImageFc.windowing_data, (jlong)lpStruct->windowing_data);
 }
 #endif
 
@@ -1203,19 +1203,19 @@
 {
 	if (GdkWindowAttrFc.cached) return;
 	GdkWindowAttrFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GdkWindowAttrFc.title = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "title", "I");
+	GdkWindowAttrFc.title = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "title", "J");
 	GdkWindowAttrFc.event_mask = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "event_mask", "I");
 	GdkWindowAttrFc.x = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "x", "I");
 	GdkWindowAttrFc.y = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "y", "I");
 	GdkWindowAttrFc.width = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "width", "I");
 	GdkWindowAttrFc.height = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "height", "I");
 	GdkWindowAttrFc.wclass = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "wclass", "I");
-	GdkWindowAttrFc.visual = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "visual", "I");
-	GdkWindowAttrFc.colormap = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "colormap", "I");
+	GdkWindowAttrFc.visual = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "visual", "J");
+	GdkWindowAttrFc.colormap = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "colormap", "J");
 	GdkWindowAttrFc.window_type = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "window_type", "I");
-	GdkWindowAttrFc.cursor = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "cursor", "I");
-	GdkWindowAttrFc.wmclass_name = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "wmclass_name", "I");
-	GdkWindowAttrFc.wmclass_class = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "wmclass_class", "I");
+	GdkWindowAttrFc.cursor = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "cursor", "J");
+	GdkWindowAttrFc.wmclass_name = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "wmclass_name", "J");
+	GdkWindowAttrFc.wmclass_class = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "wmclass_class", "J");
 	GdkWindowAttrFc.override_redirect = (*env)->GetFieldID(env, GdkWindowAttrFc.clazz, "override_redirect", "Z");
 	GdkWindowAttrFc.cached = 1;
 }
@@ -1223,19 +1223,19 @@
 GdkWindowAttr *getGdkWindowAttrFields(JNIEnv *env, jobject lpObject, GdkWindowAttr *lpStruct)
 {
 	if (!GdkWindowAttrFc.cached) cacheGdkWindowAttrFields(env, lpObject);
-	lpStruct->title = (gchar *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.title);
+	lpStruct->title = (gchar *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.title);
 	lpStruct->event_mask = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.event_mask);
 	lpStruct->x = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.x);
 	lpStruct->y = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.y);
 	lpStruct->width = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.width);
 	lpStruct->height = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.height);
 	lpStruct->wclass = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.wclass);
-	lpStruct->visual = (GdkVisual *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.visual);
-	lpStruct->colormap = (GdkColormap *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.colormap);
+	lpStruct->visual = (GdkVisual *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.visual);
+	lpStruct->colormap = (GdkColormap *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.colormap);
 	lpStruct->window_type = (*env)->GetIntField(env, lpObject, GdkWindowAttrFc.window_type);
-	lpStruct->cursor = (GdkCursor *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.cursor);
-	lpStruct->wmclass_name = (gchar *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.wmclass_name);
-	lpStruct->wmclass_class = (gchar *)(*env)->GetIntField(env, lpObject, GdkWindowAttrFc.wmclass_class);
+	lpStruct->cursor = (GdkCursor *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.cursor);
+	lpStruct->wmclass_name = (gchar *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.wmclass_name);
+	lpStruct->wmclass_class = (gchar *)(*env)->GetLongField(env, lpObject, GdkWindowAttrFc.wmclass_class);
 	lpStruct->override_redirect = (*env)->GetBooleanField(env, lpObject, GdkWindowAttrFc.override_redirect);
 	return lpStruct;
 }
@@ -1243,19 +1243,19 @@
 void setGdkWindowAttrFields(JNIEnv *env, jobject lpObject, GdkWindowAttr *lpStruct)
 {
 	if (!GdkWindowAttrFc.cached) cacheGdkWindowAttrFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.title, (jint)lpStruct->title);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.title, (jlong)lpStruct->title);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.event_mask, (jint)lpStruct->event_mask);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.x, (jint)lpStruct->x);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.y, (jint)lpStruct->y);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.width, (jint)lpStruct->width);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.height, (jint)lpStruct->height);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.wclass, (jint)lpStruct->wclass);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.visual, (jint)lpStruct->visual);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.colormap, (jint)lpStruct->colormap);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.visual, (jlong)lpStruct->visual);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.colormap, (jlong)lpStruct->colormap);
 	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.window_type, (jint)lpStruct->window_type);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.cursor, (jint)lpStruct->cursor);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.wmclass_name, (jint)lpStruct->wmclass_name);
-	(*env)->SetIntField(env, lpObject, GdkWindowAttrFc.wmclass_class, (jint)lpStruct->wmclass_class);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.cursor, (jlong)lpStruct->cursor);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.wmclass_name, (jlong)lpStruct->wmclass_name);
+	(*env)->SetLongField(env, lpObject, GdkWindowAttrFc.wmclass_class, (jlong)lpStruct->wmclass_class);
 	(*env)->SetBooleanField(env, lpObject, GdkWindowAttrFc.override_redirect, (jboolean)lpStruct->override_redirect);
 }
 #endif
@@ -1399,24 +1399,24 @@
 {
 	if (GtkCellRendererClassFc.cached) return;
 	GtkCellRendererClassFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkCellRendererClassFc.render = (*env)->GetFieldID(env, GtkCellRendererClassFc.clazz, "render", "I");
-	GtkCellRendererClassFc.get_size = (*env)->GetFieldID(env, GtkCellRendererClassFc.clazz, "get_size", "I");
+	GtkCellRendererClassFc.render = (*env)->GetFieldID(env, GtkCellRendererClassFc.clazz, "render", "J");
+	GtkCellRendererClassFc.get_size = (*env)->GetFieldID(env, GtkCellRendererClassFc.clazz, "get_size", "J");
 	GtkCellRendererClassFc.cached = 1;
 }
 
 GtkCellRendererClass *getGtkCellRendererClassFields(JNIEnv *env, jobject lpObject, GtkCellRendererClass *lpStruct)
 {
 	if (!GtkCellRendererClassFc.cached) cacheGtkCellRendererClassFields(env, lpObject);
-	lpStruct->render = (void(*)())(*env)->GetIntField(env, lpObject, GtkCellRendererClassFc.render);
-	lpStruct->get_size = (void(*)())(*env)->GetIntField(env, lpObject, GtkCellRendererClassFc.get_size);
+	lpStruct->render = (void(*)())(*env)->GetLongField(env, lpObject, GtkCellRendererClassFc.render);
+	lpStruct->get_size = (void(*)())(*env)->GetLongField(env, lpObject, GtkCellRendererClassFc.get_size);
 	return lpStruct;
 }
 
 void setGtkCellRendererClassFields(JNIEnv *env, jobject lpObject, GtkCellRendererClass *lpStruct)
 {
 	if (!GtkCellRendererClassFc.cached) cacheGtkCellRendererClassFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkCellRendererClassFc.render, (jint)lpStruct->render);
-	(*env)->SetIntField(env, lpObject, GtkCellRendererClassFc.get_size, (jint)lpStruct->get_size);
+	(*env)->SetLongField(env, lpObject, GtkCellRendererClassFc.render, (jlong)lpStruct->render);
+	(*env)->SetLongField(env, lpObject, GtkCellRendererClassFc.get_size, (jlong)lpStruct->get_size);
 }
 #endif
 
@@ -1433,30 +1433,30 @@
 {
 	if (GtkColorSelectionDialogFc.cached) return;
 	GtkColorSelectionDialogFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkColorSelectionDialogFc.colorsel = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "colorsel", "I");
-	GtkColorSelectionDialogFc.ok_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "ok_button", "I");
-	GtkColorSelectionDialogFc.cancel_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "cancel_button", "I");
-	GtkColorSelectionDialogFc.help_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "help_button", "I");
+	GtkColorSelectionDialogFc.colorsel = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "colorsel", "J");
+	GtkColorSelectionDialogFc.ok_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "ok_button", "J");
+	GtkColorSelectionDialogFc.cancel_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "cancel_button", "J");
+	GtkColorSelectionDialogFc.help_button = (*env)->GetFieldID(env, GtkColorSelectionDialogFc.clazz, "help_button", "J");
 	GtkColorSelectionDialogFc.cached = 1;
 }
 
 GtkColorSelectionDialog *getGtkColorSelectionDialogFields(JNIEnv *env, jobject lpObject, GtkColorSelectionDialog *lpStruct)
 {
 	if (!GtkColorSelectionDialogFc.cached) cacheGtkColorSelectionDialogFields(env, lpObject);
-	lpStruct->colorsel = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkColorSelectionDialogFc.colorsel);
-	lpStruct->ok_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkColorSelectionDialogFc.ok_button);
-	lpStruct->cancel_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkColorSelectionDialogFc.cancel_button);
-	lpStruct->help_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkColorSelectionDialogFc.help_button);
+	lpStruct->colorsel = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkColorSelectionDialogFc.colorsel);
+	lpStruct->ok_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkColorSelectionDialogFc.ok_button);
+	lpStruct->cancel_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkColorSelectionDialogFc.cancel_button);
+	lpStruct->help_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkColorSelectionDialogFc.help_button);
 	return lpStruct;
 }
 
 void setGtkColorSelectionDialogFields(JNIEnv *env, jobject lpObject, GtkColorSelectionDialog *lpStruct)
 {
 	if (!GtkColorSelectionDialogFc.cached) cacheGtkColorSelectionDialogFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkColorSelectionDialogFc.colorsel, (jint)lpStruct->colorsel);
-	(*env)->SetIntField(env, lpObject, GtkColorSelectionDialogFc.ok_button, (jint)lpStruct->ok_button);
-	(*env)->SetIntField(env, lpObject, GtkColorSelectionDialogFc.cancel_button, (jint)lpStruct->cancel_button);
-	(*env)->SetIntField(env, lpObject, GtkColorSelectionDialogFc.help_button, (jint)lpStruct->help_button);
+	(*env)->SetLongField(env, lpObject, GtkColorSelectionDialogFc.colorsel, (jlong)lpStruct->colorsel);
+	(*env)->SetLongField(env, lpObject, GtkColorSelectionDialogFc.ok_button, (jlong)lpStruct->ok_button);
+	(*env)->SetLongField(env, lpObject, GtkColorSelectionDialogFc.cancel_button, (jlong)lpStruct->cancel_button);
+	(*env)->SetLongField(env, lpObject, GtkColorSelectionDialogFc.help_button, (jlong)lpStruct->help_button);
 }
 #endif
 
@@ -1473,24 +1473,24 @@
 {
 	if (GtkComboFc.cached) return;
 	GtkComboFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkComboFc.entry = (*env)->GetFieldID(env, GtkComboFc.clazz, "entry", "I");
-	GtkComboFc.list = (*env)->GetFieldID(env, GtkComboFc.clazz, "list", "I");
+	GtkComboFc.entry = (*env)->GetFieldID(env, GtkComboFc.clazz, "entry", "J");
+	GtkComboFc.list = (*env)->GetFieldID(env, GtkComboFc.clazz, "list", "J");
 	GtkComboFc.cached = 1;
 }
 
 GtkCombo *getGtkComboFields(JNIEnv *env, jobject lpObject, GtkCombo *lpStruct)
 {
 	if (!GtkComboFc.cached) cacheGtkComboFields(env, lpObject);
-	lpStruct->entry = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkComboFc.entry);
-	lpStruct->list = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkComboFc.list);
+	lpStruct->entry = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkComboFc.entry);
+	lpStruct->list = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkComboFc.list);
 	return lpStruct;
 }
 
 void setGtkComboFields(JNIEnv *env, jobject lpObject, GtkCombo *lpStruct)
 {
 	if (!GtkComboFc.cached) cacheGtkComboFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkComboFc.entry, (jint)lpStruct->entry);
-	(*env)->SetIntField(env, lpObject, GtkComboFc.list, (jint)lpStruct->list);
+	(*env)->SetLongField(env, lpObject, GtkComboFc.entry, (jlong)lpStruct->entry);
+	(*env)->SetLongField(env, lpObject, GtkComboFc.list, (jlong)lpStruct->list);
 }
 #endif
 
@@ -1507,78 +1507,78 @@
 {
 	if (GtkFileSelectionFc.cached) return;
 	GtkFileSelectionFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkFileSelectionFc.dir_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "dir_list", "I");
-	GtkFileSelectionFc.file_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "file_list", "I");
-	GtkFileSelectionFc.selection_entry = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "selection_entry", "I");
-	GtkFileSelectionFc.selection_text = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "selection_text", "I");
-	GtkFileSelectionFc.main_vbox = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "main_vbox", "I");
-	GtkFileSelectionFc.ok_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "ok_button", "I");
-	GtkFileSelectionFc.cancel_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "cancel_button", "I");
-	GtkFileSelectionFc.help_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "help_button", "I");
-	GtkFileSelectionFc.history_pulldown = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_pulldown", "I");
-	GtkFileSelectionFc.history_menu = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_menu", "I");
-	GtkFileSelectionFc.history_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_list", "I");
-	GtkFileSelectionFc.fileop_dialog = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_dialog", "I");
-	GtkFileSelectionFc.fileop_entry = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_entry", "I");
-	GtkFileSelectionFc.fileop_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_file", "I");
-	GtkFileSelectionFc.cmpl_state = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "cmpl_state", "I");
-	GtkFileSelectionFc.fileop_c_dir = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_c_dir", "I");
-	GtkFileSelectionFc.fileop_del_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_del_file", "I");
-	GtkFileSelectionFc.fileop_ren_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_ren_file", "I");
-	GtkFileSelectionFc.button_area = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "button_area", "I");
-	GtkFileSelectionFc.action_area = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "action_area", "I");
+	GtkFileSelectionFc.dir_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "dir_list", "J");
+	GtkFileSelectionFc.file_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "file_list", "J");
+	GtkFileSelectionFc.selection_entry = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "selection_entry", "J");
+	GtkFileSelectionFc.selection_text = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "selection_text", "J");
+	GtkFileSelectionFc.main_vbox = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "main_vbox", "J");
+	GtkFileSelectionFc.ok_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "ok_button", "J");
+	GtkFileSelectionFc.cancel_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "cancel_button", "J");
+	GtkFileSelectionFc.help_button = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "help_button", "J");
+	GtkFileSelectionFc.history_pulldown = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_pulldown", "J");
+	GtkFileSelectionFc.history_menu = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_menu", "J");
+	GtkFileSelectionFc.history_list = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "history_list", "J");
+	GtkFileSelectionFc.fileop_dialog = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_dialog", "J");
+	GtkFileSelectionFc.fileop_entry = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_entry", "J");
+	GtkFileSelectionFc.fileop_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_file", "J");
+	GtkFileSelectionFc.cmpl_state = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "cmpl_state", "J");
+	GtkFileSelectionFc.fileop_c_dir = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_c_dir", "J");
+	GtkFileSelectionFc.fileop_del_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_del_file", "J");
+	GtkFileSelectionFc.fileop_ren_file = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "fileop_ren_file", "J");
+	GtkFileSelectionFc.button_area = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "button_area", "J");
+	GtkFileSelectionFc.action_area = (*env)->GetFieldID(env, GtkFileSelectionFc.clazz, "action_area", "J");
 	GtkFileSelectionFc.cached = 1;
 }
 
 GtkFileSelection *getGtkFileSelectionFields(JNIEnv *env, jobject lpObject, GtkFileSelection *lpStruct)
 {
 	if (!GtkFileSelectionFc.cached) cacheGtkFileSelectionFields(env, lpObject);
-	lpStruct->dir_list = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.dir_list);
-	lpStruct->file_list = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.file_list);
-	lpStruct->selection_entry = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.selection_entry);
-	lpStruct->selection_text = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.selection_text);
-	lpStruct->main_vbox = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.main_vbox);
-	lpStruct->ok_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.ok_button);
-	lpStruct->cancel_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.cancel_button);
-	lpStruct->help_button = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.help_button);
-	lpStruct->history_pulldown = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.history_pulldown);
-	lpStruct->history_menu = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.history_menu);
-	lpStruct->history_list = (GList *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.history_list);
-	lpStruct->fileop_dialog = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_dialog);
-	lpStruct->fileop_entry = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_entry);
-	lpStruct->fileop_file = (gchar *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_file);
-	lpStruct->cmpl_state = (gpointer)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.cmpl_state);
-	lpStruct->fileop_c_dir = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_c_dir);
-	lpStruct->fileop_del_file = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_del_file);
-	lpStruct->fileop_ren_file = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.fileop_ren_file);
-	lpStruct->button_area = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.button_area);
-	lpStruct->action_area = (GtkWidget *)(*env)->GetIntField(env, lpObject, GtkFileSelectionFc.action_area);
+	lpStruct->dir_list = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.dir_list);
+	lpStruct->file_list = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.file_list);
+	lpStruct->selection_entry = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.selection_entry);
+	lpStruct->selection_text = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.selection_text);
+	lpStruct->main_vbox = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.main_vbox);
+	lpStruct->ok_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.ok_button);
+	lpStruct->cancel_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.cancel_button);
+	lpStruct->help_button = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.help_button);
+	lpStruct->history_pulldown = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.history_pulldown);
+	lpStruct->history_menu = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.history_menu);
+	lpStruct->history_list = (GList *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.history_list);
+	lpStruct->fileop_dialog = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_dialog);
+	lpStruct->fileop_entry = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_entry);
+	lpStruct->fileop_file = (gchar *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_file);
+	lpStruct->cmpl_state = (gpointer)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.cmpl_state);
+	lpStruct->fileop_c_dir = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_c_dir);
+	lpStruct->fileop_del_file = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_del_file);
+	lpStruct->fileop_ren_file = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.fileop_ren_file);
+	lpStruct->button_area = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.button_area);
+	lpStruct->action_area = (GtkWidget *)(*env)->GetLongField(env, lpObject, GtkFileSelectionFc.action_area);
 	return lpStruct;
 }
 
 void setGtkFileSelectionFields(JNIEnv *env, jobject lpObject, GtkFileSelection *lpStruct)
 {
 	if (!GtkFileSelectionFc.cached) cacheGtkFileSelectionFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.dir_list, (jint)lpStruct->dir_list);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.file_list, (jint)lpStruct->file_list);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.selection_entry, (jint)lpStruct->selection_entry);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.selection_text, (jint)lpStruct->selection_text);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.main_vbox, (jint)lpStruct->main_vbox);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.ok_button, (jint)lpStruct->ok_button);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.cancel_button, (jint)lpStruct->cancel_button);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.help_button, (jint)lpStruct->help_button);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.history_pulldown, (jint)lpStruct->history_pulldown);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.history_menu, (jint)lpStruct->history_menu);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.history_list, (jint)lpStruct->history_list);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_dialog, (jint)lpStruct->fileop_dialog);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_entry, (jint)lpStruct->fileop_entry);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_file, (jint)lpStruct->fileop_file);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.cmpl_state, (jint)lpStruct->cmpl_state);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_c_dir, (jint)lpStruct->fileop_c_dir);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_del_file, (jint)lpStruct->fileop_del_file);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.fileop_ren_file, (jint)lpStruct->fileop_ren_file);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.button_area, (jint)lpStruct->button_area);
-	(*env)->SetIntField(env, lpObject, GtkFileSelectionFc.action_area, (jint)lpStruct->action_area);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.dir_list, (jlong)lpStruct->dir_list);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.file_list, (jlong)lpStruct->file_list);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.selection_entry, (jlong)lpStruct->selection_entry);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.selection_text, (jlong)lpStruct->selection_text);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.main_vbox, (jlong)lpStruct->main_vbox);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.ok_button, (jlong)lpStruct->ok_button);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.cancel_button, (jlong)lpStruct->cancel_button);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.help_button, (jlong)lpStruct->help_button);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.history_pulldown, (jlong)lpStruct->history_pulldown);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.history_menu, (jlong)lpStruct->history_menu);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.history_list, (jlong)lpStruct->history_list);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_dialog, (jlong)lpStruct->fileop_dialog);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_entry, (jlong)lpStruct->fileop_entry);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_file, (jlong)lpStruct->fileop_file);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.cmpl_state, (jlong)lpStruct->cmpl_state);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_c_dir, (jlong)lpStruct->fileop_c_dir);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_del_file, (jlong)lpStruct->fileop_del_file);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.fileop_ren_file, (jlong)lpStruct->fileop_ren_file);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.button_area, (jlong)lpStruct->button_area);
+	(*env)->SetLongField(env, lpObject, GtkFileSelectionFc.action_area, (jlong)lpStruct->action_area);
 }
 #endif
 
@@ -1595,21 +1595,21 @@
 {
 	if (GtkFixedFc.cached) return;
 	GtkFixedFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkFixedFc.children = (*env)->GetFieldID(env, GtkFixedFc.clazz, "children", "I");
+	GtkFixedFc.children = (*env)->GetFieldID(env, GtkFixedFc.clazz, "children", "J");
 	GtkFixedFc.cached = 1;
 }
 
 GtkFixed *getGtkFixedFields(JNIEnv *env, jobject lpObject, GtkFixed *lpStruct)
 {
 	if (!GtkFixedFc.cached) cacheGtkFixedFields(env, lpObject);
-	lpStruct->children = (GList *)(*env)->GetIntField(env, lpObject, GtkFixedFc.children);
+	lpStruct->children = (GList *)(*env)->GetLongField(env, lpObject, GtkFixedFc.children);
 	return lpStruct;
 }
 
 void setGtkFixedFields(JNIEnv *env, jobject lpObject, GtkFixed *lpStruct)
 {
 	if (!GtkFixedFc.cached) cacheGtkFixedFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkFixedFc.children, (jint)lpStruct->children);
+	(*env)->SetLongField(env, lpObject, GtkFixedFc.children, (jlong)lpStruct->children);
 }
 #endif
 
@@ -1660,11 +1660,11 @@
 {
 	if (GtkSelectionDataFc.cached) return;
 	GtkSelectionDataFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkSelectionDataFc.selection = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "selection", "I");
-	GtkSelectionDataFc.target = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "target", "I");
-	GtkSelectionDataFc.type = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "type", "I");
+	GtkSelectionDataFc.selection = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "selection", "J");
+	GtkSelectionDataFc.target = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "target", "J");
+	GtkSelectionDataFc.type = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "type", "J");
 	GtkSelectionDataFc.format = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "format", "I");
-	GtkSelectionDataFc.data = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "data", "I");
+	GtkSelectionDataFc.data = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "data", "J");
 	GtkSelectionDataFc.length = (*env)->GetFieldID(env, GtkSelectionDataFc.clazz, "length", "I");
 	GtkSelectionDataFc.cached = 1;
 }
@@ -1672,11 +1672,11 @@
 GtkSelectionData *getGtkSelectionDataFields(JNIEnv *env, jobject lpObject, GtkSelectionData *lpStruct)
 {
 	if (!GtkSelectionDataFc.cached) cacheGtkSelectionDataFields(env, lpObject);
-	lpStruct->selection = (GdkAtom)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.selection);
-	lpStruct->target = (GdkAtom)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.target);
-	lpStruct->type = (GdkAtom)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.type);
+	lpStruct->selection = (GdkAtom)(*env)->GetLongField(env, lpObject, GtkSelectionDataFc.selection);
+	lpStruct->target = (GdkAtom)(*env)->GetLongField(env, lpObject, GtkSelectionDataFc.target);
+	lpStruct->type = (GdkAtom)(*env)->GetLongField(env, lpObject, GtkSelectionDataFc.type);
 	lpStruct->format = (gint)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.format);
-	lpStruct->data = (guchar *)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.data);
+	lpStruct->data = (guchar *)(*env)->GetLongField(env, lpObject, GtkSelectionDataFc.data);
 	lpStruct->length = (gint)(*env)->GetIntField(env, lpObject, GtkSelectionDataFc.length);
 	return lpStruct;
 }
@@ -1684,11 +1684,11 @@
 void setGtkSelectionDataFields(JNIEnv *env, jobject lpObject, GtkSelectionData *lpStruct)
 {
 	if (!GtkSelectionDataFc.cached) cacheGtkSelectionDataFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.selection, (jint)lpStruct->selection);
-	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.target, (jint)lpStruct->target);
-	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.type, (jint)lpStruct->type);
+	(*env)->SetLongField(env, lpObject, GtkSelectionDataFc.selection, (jlong)lpStruct->selection);
+	(*env)->SetLongField(env, lpObject, GtkSelectionDataFc.target, (jlong)lpStruct->target);
+	(*env)->SetLongField(env, lpObject, GtkSelectionDataFc.type, (jlong)lpStruct->type);
 	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.format, (jint)lpStruct->format);
-	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.data, (jint)lpStruct->data);
+	(*env)->SetLongField(env, lpObject, GtkSelectionDataFc.data, (jlong)lpStruct->data);
 	(*env)->SetIntField(env, lpObject, GtkSelectionDataFc.length, (jint)lpStruct->length);
 }
 #endif
@@ -1706,7 +1706,7 @@
 {
 	if (GtkTargetEntryFc.cached) return;
 	GtkTargetEntryFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkTargetEntryFc.target = (*env)->GetFieldID(env, GtkTargetEntryFc.clazz, "target", "I");
+	GtkTargetEntryFc.target = (*env)->GetFieldID(env, GtkTargetEntryFc.clazz, "target", "J");
 	GtkTargetEntryFc.flags = (*env)->GetFieldID(env, GtkTargetEntryFc.clazz, "flags", "I");
 	GtkTargetEntryFc.info = (*env)->GetFieldID(env, GtkTargetEntryFc.clazz, "info", "I");
 	GtkTargetEntryFc.cached = 1;
@@ -1715,7 +1715,7 @@
 GtkTargetEntry *getGtkTargetEntryFields(JNIEnv *env, jobject lpObject, GtkTargetEntry *lpStruct)
 {
 	if (!GtkTargetEntryFc.cached) cacheGtkTargetEntryFields(env, lpObject);
-	lpStruct->target = (gchar *)(*env)->GetIntField(env, lpObject, GtkTargetEntryFc.target);
+	lpStruct->target = (gchar *)(*env)->GetLongField(env, lpObject, GtkTargetEntryFc.target);
 	lpStruct->flags = (guint)(*env)->GetIntField(env, lpObject, GtkTargetEntryFc.flags);
 	lpStruct->info = (guint)(*env)->GetIntField(env, lpObject, GtkTargetEntryFc.info);
 	return lpStruct;
@@ -1724,7 +1724,7 @@
 void setGtkTargetEntryFields(JNIEnv *env, jobject lpObject, GtkTargetEntry *lpStruct)
 {
 	if (!GtkTargetEntryFc.cached) cacheGtkTargetEntryFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkTargetEntryFc.target, (jint)lpStruct->target);
+	(*env)->SetLongField(env, lpObject, GtkTargetEntryFc.target, (jlong)lpStruct->target);
 	(*env)->SetIntField(env, lpObject, GtkTargetEntryFc.flags, (jint)lpStruct->flags);
 	(*env)->SetIntField(env, lpObject, GtkTargetEntryFc.info, (jint)lpStruct->info);
 }
@@ -1743,7 +1743,7 @@
 {
 	if (GtkTargetPairFc.cached) return;
 	GtkTargetPairFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	GtkTargetPairFc.target = (*env)->GetFieldID(env, GtkTargetPairFc.clazz, "target", "I");
+	GtkTargetPairFc.target = (*env)->GetFieldID(env, GtkTargetPairFc.clazz, "target", "J");
 	GtkTargetPairFc.flags = (*env)->GetFieldID(env, GtkTargetPairFc.clazz, "flags", "I");
 	GtkTargetPairFc.info = (*env)->GetFieldID(env, GtkTargetPairFc.clazz, "info", "I");
 	GtkTargetPairFc.cached = 1;
@@ -1752,7 +1752,7 @@
 GtkTargetPair *getGtkTargetPairFields(JNIEnv *env, jobject lpObject, GtkTargetPair *lpStruct)
 {
 	if (!GtkTargetPairFc.cached) cacheGtkTargetPairFields(env, lpObject);
-	lpStruct->target = (GdkAtom)(*env)->GetIntField(env, lpObject, GtkTargetPairFc.target);
+	lpStruct->target = (GdkAtom)(*env)->GetLongField(env, lpObject, GtkTargetPairFc.target);
 	lpStruct->flags = (guint)(*env)->GetIntField(env, lpObject, GtkTargetPairFc.flags);
 	lpStruct->info = (guint)(*env)->GetIntField(env, lpObject, GtkTargetPairFc.info);
 	return lpStruct;
@@ -1761,7 +1761,7 @@
 void setGtkTargetPairFields(JNIEnv *env, jobject lpObject, GtkTargetPair *lpStruct)
 {
 	if (!GtkTargetPairFc.cached) cacheGtkTargetPairFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, GtkTargetPairFc.target, (jint)lpStruct->target);
+	(*env)->SetLongField(env, lpObject, GtkTargetPairFc.target, (jlong)lpStruct->target);
 	(*env)->SetIntField(env, lpObject, GtkTargetPairFc.flags, (jint)lpStruct->flags);
 	(*env)->SetIntField(env, lpObject, GtkTargetPairFc.info, (jint)lpStruct->info);
 }
@@ -1783,68 +1783,68 @@
 	GtkWidgetClassFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	GtkWidgetClassFc.activate_signal = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "activate_signal", "I");
 	GtkWidgetClassFc.set_scroll_adjustments_signal = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "set_scroll_adjustments_signal", "I");
-	GtkWidgetClassFc.dispatch_child_properties_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "dispatch_child_properties_changed", "I");
-	GtkWidgetClassFc.show = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show", "I");
-	GtkWidgetClassFc.show_all = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show_all", "I");
-	GtkWidgetClassFc.hide = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hide", "I");
-	GtkWidgetClassFc.hide_all = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hide_all", "I");
-	GtkWidgetClassFc.map = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "map", "I");
-	GtkWidgetClassFc.unmap = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unmap", "I");
-	GtkWidgetClassFc.realize = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "realize", "I");
-	GtkWidgetClassFc.unrealize = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unrealize", "I");
-	GtkWidgetClassFc.size_request = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "size_request", "I");
-	GtkWidgetClassFc.size_allocate = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "size_allocate", "I");
-	GtkWidgetClassFc.state_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "state_changed", "I");
-	GtkWidgetClassFc.parent_set = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "parent_set", "I");
-	GtkWidgetClassFc.hierarchy_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hierarchy_changed", "I");
-	GtkWidgetClassFc.style_set = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "style_set", "I");
-	GtkWidgetClassFc.direction_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "direction_changed", "I");
-	GtkWidgetClassFc.grab_notify = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "grab_notify", "I");
-	GtkWidgetClassFc.child_notify = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "child_notify", "I");
-	GtkWidgetClassFc.mnemonic_activate = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "mnemonic_activate", "I");
-	GtkWidgetClassFc.grab_focus = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "grab_focus", "I");
-	GtkWidgetClassFc.focus = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus", "I");
-	GtkWidgetClassFc.event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "event", "I");
-	GtkWidgetClassFc.button_press_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "button_press_event", "I");
-	GtkWidgetClassFc.button_release_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "button_release_event", "I");
-	GtkWidgetClassFc.scroll_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "scroll_event", "I");
-	GtkWidgetClassFc.motion_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "motion_notify_event", "I");
-	GtkWidgetClassFc.delete_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "delete_event", "I");
-	GtkWidgetClassFc.destroy_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "destroy_event", "I");
-	GtkWidgetClassFc.expose_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "expose_event", "I");
-	GtkWidgetClassFc.key_press_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "key_press_event", "I");
-	GtkWidgetClassFc.key_release_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "key_release_event", "I");
-	GtkWidgetClassFc.enter_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "enter_notify_event", "I");
-	GtkWidgetClassFc.leave_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "leave_notify_event", "I");
-	GtkWidgetClassFc.configure_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "configure_event", "I");
-	GtkWidgetClassFc.focus_in_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus_in_event", "I");
-	GtkWidgetClassFc.focus_out_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus_out_event", "I");
-	GtkWidgetClassFc.map_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "map_event", "I");
-	GtkWidgetClassFc.unmap_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unmap_event", "I");
-	GtkWidgetClassFc.property_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "property_notify_event", "I");
-	GtkWidgetClassFc.selection_clear_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_clear_event", "I");
-	GtkWidgetClassFc.selection_request_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_request_event", "I");
-	GtkWidgetClassFc.selection_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_notify_event", "I");
-	GtkWidgetClassFc.proximity_in_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "proximity_in_event", "I");
-	GtkWidgetClassFc.proximity_out_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "proximity_out_event", "I");
-	GtkWidgetClassFc.visibility_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "visibility_notify_event", "I");
-	GtkWidgetClassFc.client_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "client_event", "I");
-	GtkWidgetClassFc.no_expose_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "no_expose_event", "I");
-	GtkWidgetClassFc.window_state_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "window_state_event", "I");
-	GtkWidgetClassFc.selection_get = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_get", "I");
-	GtkWidgetClassFc.selection_received = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_received", "I");
-	GtkWidgetClassFc.drag_begin = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_begin", "I");
-	GtkWidgetClassFc.drag_end = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_end", "I");
-	GtkWidgetClassFc.drag_data_get = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_get", "I");
-	GtkWidgetClassFc.drag_data_delete = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_delete", "I");
-	GtkWidgetClassFc.drag_leave = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_leave", "I");
-	GtkWidgetClassFc.drag_motion = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_motion", "I");
-	GtkWidgetClassFc.drag_drop = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_drop", "I");
-	GtkWidgetClassFc.drag_data_received = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_received", "I");
-	GtkWidgetClassFc.popup_menu = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "popup_menu", "I");
-	GtkWidgetClassFc.show_help = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show_help", "I");
-	GtkWidgetClassFc.get_accessible = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "get_accessible", "I");
-	GtkWidgetClassFc.screen_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "screen_changed", "I");
+	GtkWidgetClassFc.dispatch_child_properties_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "dispatch_child_properties_changed", "J");
+	GtkWidgetClassFc.show = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show", "J");
+	GtkWidgetClassFc.show_all = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show_all", "J");
+	GtkWidgetClassFc.hide = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hide", "J");
+	GtkWidgetClassFc.hide_all = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hide_all", "J");
+	GtkWidgetClassFc.map = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "map", "J");
+	GtkWidgetClassFc.unmap = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unmap", "J");
+	GtkWidgetClassFc.realize = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "realize", "J");
+	GtkWidgetClassFc.unrealize = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unrealize", "J");
+	GtkWidgetClassFc.size_request = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "size_request", "J");
+	GtkWidgetClassFc.size_allocate = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "size_allocate", "J");
+	GtkWidgetClassFc.state_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "state_changed", "J");
+	GtkWidgetClassFc.parent_set = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "parent_set", "J");
+	GtkWidgetClassFc.hierarchy_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "hierarchy_changed", "J");
+	GtkWidgetClassFc.style_set = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "style_set", "J");
+	GtkWidgetClassFc.direction_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "direction_changed", "J");
+	GtkWidgetClassFc.grab_notify = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "grab_notify", "J");
+	GtkWidgetClassFc.child_notify = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "child_notify", "J");
+	GtkWidgetClassFc.mnemonic_activate = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "mnemonic_activate", "J");
+	GtkWidgetClassFc.grab_focus = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "grab_focus", "J");
+	GtkWidgetClassFc.focus = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus", "J");
+	GtkWidgetClassFc.event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "event", "J");
+	GtkWidgetClassFc.button_press_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "button_press_event", "J");
+	GtkWidgetClassFc.button_release_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "button_release_event", "J");
+	GtkWidgetClassFc.scroll_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "scroll_event", "J");
+	GtkWidgetClassFc.motion_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "motion_notify_event", "J");
+	GtkWidgetClassFc.delete_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "delete_event", "J");
+	GtkWidgetClassFc.destroy_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "destroy_event", "J");
+	GtkWidgetClassFc.expose_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "expose_event", "J");
+	GtkWidgetClassFc.key_press_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "key_press_event", "J");
+	GtkWidgetClassFc.key_release_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "key_release_event", "J");
+	GtkWidgetClassFc.enter_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "enter_notify_event", "J");
+	GtkWidgetClassFc.leave_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "leave_notify_event", "J");
+	GtkWidgetClassFc.configure_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "configure_event", "J");
+	GtkWidgetClassFc.focus_in_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus_in_event", "J");
+	GtkWidgetClassFc.focus_out_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "focus_out_event", "J");
+	GtkWidgetClassFc.map_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "map_event", "J");
+	GtkWidgetClassFc.unmap_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "unmap_event", "J");
+	GtkWidgetClassFc.property_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "property_notify_event", "J");
+	GtkWidgetClassFc.selection_clear_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_clear_event", "J");
+	GtkWidgetClassFc.selection_request_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_request_event", "J");
+	GtkWidgetClassFc.selection_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_notify_event", "J");
+	GtkWidgetClassFc.proximity_in_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "proximity_in_event", "J");
+	GtkWidgetClassFc.proximity_out_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "proximity_out_event", "J");
+	GtkWidgetClassFc.visibility_notify_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "visibility_notify_event", "J");
+	GtkWidgetClassFc.client_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "client_event", "J");
+	GtkWidgetClassFc.no_expose_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "no_expose_event", "J");
+	GtkWidgetClassFc.window_state_event = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "window_state_event", "J");
+	GtkWidgetClassFc.selection_get = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_get", "J");
+	GtkWidgetClassFc.selection_received = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "selection_received", "J");
+	GtkWidgetClassFc.drag_begin = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_begin", "J");
+	GtkWidgetClassFc.drag_end = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_end", "J");
+	GtkWidgetClassFc.drag_data_get = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_get", "J");
+	GtkWidgetClassFc.drag_data_delete = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_delete", "J");
+	GtkWidgetClassFc.drag_leave = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_leave", "J");
+	GtkWidgetClassFc.drag_motion = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_motion", "J");
+	GtkWidgetClassFc.drag_drop = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_drop", "J");
+	GtkWidgetClassFc.drag_data_received = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "drag_data_received", "J");
+	GtkWidgetClassFc.popup_menu = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "popup_menu", "J");
+	GtkWidgetClassFc.show_help = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "show_help", "J");
+	GtkWidgetClassFc.get_accessible = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "get_accessible", "J");
+	GtkWidgetClassFc.screen_changed = (*env)->GetFieldID(env, GtkWidgetClassFc.clazz, "screen_changed", "J");
 	GtkWidgetClassFc.cached = 1;
 }
 
@@ -1854,68 +1854,68 @@
 	getGObjectClassFields(env, lpObject, (GObjectClass *)lpStruct);
 	lpStruct->activate_signal = (*env)->GetIntField(env, lpObject, GtkWidgetClassFc.activate_signal);
 	lpStruct->set_scroll_adjustments_signal = (*env)->GetIntField(env, lpObject, GtkWidgetClassFc.set_scroll_adjustments_signal);
-	lpStruct->dispatch_child_properties_changed = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.dispatch_child_properties_changed);
-	lpStruct->show = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.show);
-	lpStruct->show_all = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.show_all);
-	lpStruct->hide = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.hide);
-	lpStruct->hide_all = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.hide_all);
-	lpStruct->map = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.map);
-	lpStruct->unmap = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.unmap);
-	lpStruct->realize = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.realize);
-	lpStruct->unrealize = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.unrealize);
-	lpStruct->size_request = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.size_request);
-	lpStruct->size_allocate = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.size_allocate);
-	lpStruct->state_changed = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.state_changed);
-	lpStruct->parent_set = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.parent_set);
-	lpStruct->hierarchy_changed = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.hierarchy_changed);
-	lpStruct->style_set = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.style_set);
-	lpStruct->direction_changed = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.direction_changed);
-	lpStruct->grab_notify = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.grab_notify);
-	lpStruct->child_notify = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.child_notify);
-	lpStruct->mnemonic_activate = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.mnemonic_activate);
-	lpStruct->grab_focus = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.grab_focus);
-	lpStruct->focus = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.focus);
-	lpStruct->event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.event);
-	lpStruct->button_press_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.button_press_event);
-	lpStruct->button_release_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.button_release_event);
-	lpStruct->scroll_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.scroll_event);
-	lpStruct->motion_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.motion_notify_event);
-	lpStruct->delete_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.delete_event);
-	lpStruct->destroy_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.destroy_event);
-	lpStruct->expose_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.expose_event);
-	lpStruct->key_press_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.key_press_event);
-	lpStruct->key_release_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.key_release_event);
-	lpStruct->enter_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.enter_notify_event);
-	lpStruct->leave_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.leave_notify_event);
-	lpStruct->configure_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.configure_event);
-	lpStruct->focus_in_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.focus_in_event);
-	lpStruct->focus_out_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.focus_out_event);
-	lpStruct->map_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.map_event);
-	lpStruct->unmap_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.unmap_event);
-	lpStruct->property_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.property_notify_event);
-	lpStruct->selection_clear_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.selection_clear_event);
-	lpStruct->selection_request_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.selection_request_event);
-	lpStruct->selection_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.selection_notify_event);
-	lpStruct->proximity_in_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.proximity_in_event);
-	lpStruct->proximity_out_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.proximity_out_event);
-	lpStruct->visibility_notify_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.visibility_notify_event);
-	lpStruct->client_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.client_event);
-	lpStruct->no_expose_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.no_expose_event);
-	lpStruct->window_state_event = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.window_state_event);
-	lpStruct->selection_get = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.selection_get);
-	lpStruct->selection_received = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.selection_received);
-	lpStruct->drag_begin = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_begin);
-	lpStruct->drag_end = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_end);
-	lpStruct->drag_data_get = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_data_get);
-	lpStruct->drag_data_delete = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_data_delete);
-	lpStruct->drag_leave = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_leave);
-	lpStruct->drag_motion = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_motion);
-	lpStruct->drag_drop = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_drop);
-	lpStruct->drag_data_received = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.drag_data_received);
-	lpStruct->popup_menu = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.popup_menu);
-	lpStruct->show_help = (gboolean(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.show_help);
-	lpStruct->get_accessible = (AtkObject*(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.get_accessible);
-	lpStruct->screen_changed = (void(*)())(*env)->GetIntField(env, lpObject, GtkWidgetClassFc.screen_changed);
+	lpStruct->dispatch_child_properties_changed = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.dispatch_child_properties_changed);
+	lpStruct->show = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.show);
+	lpStruct->show_all = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.show_all);
+	lpStruct->hide = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.hide);
+	lpStruct->hide_all = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.hide_all);
+	lpStruct->map = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.map);
+	lpStruct->unmap = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.unmap);
+	lpStruct->realize = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.realize);
+	lpStruct->unrealize = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.unrealize);
+	lpStruct->size_request = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.size_request);
+	lpStruct->size_allocate = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.size_allocate);
+	lpStruct->state_changed = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.state_changed);
+	lpStruct->parent_set = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.parent_set);
+	lpStruct->hierarchy_changed = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.hierarchy_changed);
+	lpStruct->style_set = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.style_set);
+	lpStruct->direction_changed = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.direction_changed);
+	lpStruct->grab_notify = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.grab_notify);
+	lpStruct->child_notify = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.child_notify);
+	lpStruct->mnemonic_activate = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.mnemonic_activate);
+	lpStruct->grab_focus = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.grab_focus);
+	lpStruct->focus = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.focus);
+	lpStruct->event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.event);
+	lpStruct->button_press_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.button_press_event);
+	lpStruct->button_release_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.button_release_event);
+	lpStruct->scroll_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.scroll_event);
+	lpStruct->motion_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.motion_notify_event);
+	lpStruct->delete_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.delete_event);
+	lpStruct->destroy_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.destroy_event);
+	lpStruct->expose_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.expose_event);
+	lpStruct->key_press_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.key_press_event);
+	lpStruct->key_release_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.key_release_event);
+	lpStruct->enter_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.enter_notify_event);
+	lpStruct->leave_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.leave_notify_event);
+	lpStruct->configure_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.configure_event);
+	lpStruct->focus_in_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.focus_in_event);
+	lpStruct->focus_out_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.focus_out_event);
+	lpStruct->map_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.map_event);
+	lpStruct->unmap_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.unmap_event);
+	lpStruct->property_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.property_notify_event);
+	lpStruct->selection_clear_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.selection_clear_event);
+	lpStruct->selection_request_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.selection_request_event);
+	lpStruct->selection_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.selection_notify_event);
+	lpStruct->proximity_in_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.proximity_in_event);
+	lpStruct->proximity_out_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.proximity_out_event);
+	lpStruct->visibility_notify_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.visibility_notify_event);
+	lpStruct->client_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.client_event);
+	lpStruct->no_expose_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.no_expose_event);
+	lpStruct->window_state_event = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.window_state_event);
+	lpStruct->selection_get = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.selection_get);
+	lpStruct->selection_received = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.selection_received);
+	lpStruct->drag_begin = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_begin);
+	lpStruct->drag_end = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_end);
+	lpStruct->drag_data_get = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_data_get);
+	lpStruct->drag_data_delete = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_data_delete);
+	lpStruct->drag_leave = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_leave);
+	lpStruct->drag_motion = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_motion);
+	lpStruct->drag_drop = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_drop);
+	lpStruct->drag_data_received = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.drag_data_received);
+	lpStruct->popup_menu = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.popup_menu);
+	lpStruct->show_help = (gboolean(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.show_help);
+	lpStruct->get_accessible = (AtkObject*(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.get_accessible);
+	lpStruct->screen_changed = (void(*)())(*env)->GetLongField(env, lpObject, GtkWidgetClassFc.screen_changed);
 	return lpStruct;
 }
 
@@ -1925,68 +1925,68 @@
 	setGObjectClassFields(env, lpObject, (GObjectClass *)lpStruct);
 	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.activate_signal, (jint)lpStruct->activate_signal);
 	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.set_scroll_adjustments_signal, (jint)lpStruct->set_scroll_adjustments_signal);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.dispatch_child_properties_changed, (jint)lpStruct->dispatch_child_properties_changed);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.show, (jint)lpStruct->show);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.show_all, (jint)lpStruct->show_all);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.hide, (jint)lpStruct->hide);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.hide_all, (jint)lpStruct->hide_all);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.map, (jint)lpStruct->map);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.unmap, (jint)lpStruct->unmap);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.realize, (jint)lpStruct->realize);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.unrealize, (jint)lpStruct->unrealize);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.size_request, (jint)lpStruct->size_request);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.size_allocate, (jint)lpStruct->size_allocate);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.state_changed, (jint)lpStruct->state_changed);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.parent_set, (jint)lpStruct->parent_set);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.hierarchy_changed, (jint)lpStruct->hierarchy_changed);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.style_set, (jint)lpStruct->style_set);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.direction_changed, (jint)lpStruct->direction_changed);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.grab_notify, (jint)lpStruct->grab_notify);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.child_notify, (jint)lpStruct->child_notify);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.mnemonic_activate, (jint)lpStruct->mnemonic_activate);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.grab_focus, (jint)lpStruct->grab_focus);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.focus, (jint)lpStruct->focus);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.event, (jint)lpStruct->event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.button_press_event, (jint)lpStruct->button_press_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.button_release_event, (jint)lpStruct->button_release_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.scroll_event, (jint)lpStruct->scroll_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.motion_notify_event, (jint)lpStruct->motion_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.delete_event, (jint)lpStruct->delete_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.destroy_event, (jint)lpStruct->destroy_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.expose_event, (jint)lpStruct->expose_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.key_press_event, (jint)lpStruct->key_press_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.key_release_event, (jint)lpStruct->key_release_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.enter_notify_event, (jint)lpStruct->enter_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.leave_notify_event, (jint)lpStruct->leave_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.configure_event, (jint)lpStruct->configure_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.focus_in_event, (jint)lpStruct->focus_in_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.focus_out_event, (jint)lpStruct->focus_out_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.map_event, (jint)lpStruct->map_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.unmap_event, (jint)lpStruct->unmap_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.property_notify_event, (jint)lpStruct->property_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.selection_clear_event, (jint)lpStruct->selection_clear_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.selection_request_event, (jint)lpStruct->selection_request_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.selection_notify_event, (jint)lpStruct->selection_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.proximity_in_event, (jint)lpStruct->proximity_in_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.proximity_out_event, (jint)lpStruct->proximity_out_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.visibility_notify_event, (jint)lpStruct->visibility_notify_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.client_event, (jint)lpStruct->client_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.no_expose_event, (jint)lpStruct->no_expose_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.window_state_event, (jint)lpStruct->window_state_event);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.selection_get, (jint)lpStruct->selection_get);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.selection_received, (jint)lpStruct->selection_received);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_begin, (jint)lpStruct->drag_begin);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_end, (jint)lpStruct->drag_end);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_data_get, (jint)lpStruct->drag_data_get);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_data_delete, (jint)lpStruct->drag_data_delete);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_leave, (jint)lpStruct->drag_leave);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_motion, (jint)lpStruct->drag_motion);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_drop, (jint)lpStruct->drag_drop);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.drag_data_received, (jint)lpStruct->drag_data_received);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.popup_menu, (jint)lpStruct->popup_menu);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.show_help, (jint)lpStruct->show_help);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.get_accessible, (jint)lpStruct->get_accessible);
-	(*env)->SetIntField(env, lpObject, GtkWidgetClassFc.screen_changed, (jint)lpStruct->screen_changed);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.dispatch_child_properties_changed, (jlong)lpStruct->dispatch_child_properties_changed);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.show, (jlong)lpStruct->show);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.show_all, (jlong)lpStruct->show_all);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.hide, (jlong)lpStruct->hide);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.hide_all, (jlong)lpStruct->hide_all);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.map, (jlong)lpStruct->map);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.unmap, (jlong)lpStruct->unmap);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.realize, (jlong)lpStruct->realize);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.unrealize, (jlong)lpStruct->unrealize);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.size_request, (jlong)lpStruct->size_request);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.size_allocate, (jlong)lpStruct->size_allocate);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.state_changed, (jlong)lpStruct->state_changed);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.parent_set, (jlong)lpStruct->parent_set);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.hierarchy_changed, (jlong)lpStruct->hierarchy_changed);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.style_set, (jlong)lpStruct->style_set);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.direction_changed, (jlong)lpStruct->direction_changed);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.grab_notify, (jlong)lpStruct->grab_notify);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.child_notify, (jlong)lpStruct->child_notify);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.mnemonic_activate, (jlong)lpStruct->mnemonic_activate);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.grab_focus, (jlong)lpStruct->grab_focus);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.focus, (jlong)lpStruct->focus);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.event, (jlong)lpStruct->event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.button_press_event, (jlong)lpStruct->button_press_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.button_release_event, (jlong)lpStruct->button_release_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.scroll_event, (jlong)lpStruct->scroll_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.motion_notify_event, (jlong)lpStruct->motion_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.delete_event, (jlong)lpStruct->delete_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.destroy_event, (jlong)lpStruct->destroy_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.expose_event, (jlong)lpStruct->expose_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.key_press_event, (jlong)lpStruct->key_press_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.key_release_event, (jlong)lpStruct->key_release_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.enter_notify_event, (jlong)lpStruct->enter_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.leave_notify_event, (jlong)lpStruct->leave_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.configure_event, (jlong)lpStruct->configure_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.focus_in_event, (jlong)lpStruct->focus_in_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.focus_out_event, (jlong)lpStruct->focus_out_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.map_event, (jlong)lpStruct->map_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.unmap_event, (jlong)lpStruct->unmap_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.property_notify_event, (jlong)lpStruct->property_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.selection_clear_event, (jlong)lpStruct->selection_clear_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.selection_request_event, (jlong)lpStruct->selection_request_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.selection_notify_event, (jlong)lpStruct->selection_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.proximity_in_event, (jlong)lpStruct->proximity_in_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.proximity_out_event, (jlong)lpStruct->proximity_out_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.visibility_notify_event, (jlong)lpStruct->visibility_notify_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.client_event, (jlong)lpStruct->client_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.no_expose_event, (jlong)lpStruct->no_expose_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.window_state_event, (jlong)lpStruct->window_state_event);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.selection_get, (jlong)lpStruct->selection_get);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.selection_received, (jlong)lpStruct->selection_received);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_begin, (jlong)lpStruct->drag_begin);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_end, (jlong)lpStruct->drag_end);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_data_get, (jlong)lpStruct->drag_data_get);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_data_delete, (jlong)lpStruct->drag_data_delete);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_leave, (jlong)lpStruct->drag_leave);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_motion, (jlong)lpStruct->drag_motion);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_drop, (jlong)lpStruct->drag_drop);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.drag_data_received, (jlong)lpStruct->drag_data_received);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.popup_menu, (jlong)lpStruct->popup_menu);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.show_help, (jlong)lpStruct->show_help);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.get_accessible, (jlong)lpStruct->get_accessible);
+	(*env)->SetLongField(env, lpObject, GtkWidgetClassFc.screen_changed, (jlong)lpStruct->screen_changed);
 }
 #endif
 
@@ -2077,7 +2077,7 @@
 {
 	if (PangoAttributeFc.cached) return;
 	PangoAttributeFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	PangoAttributeFc.klass = (*env)->GetFieldID(env, PangoAttributeFc.clazz, "klass", "I");
+	PangoAttributeFc.klass = (*env)->GetFieldID(env, PangoAttributeFc.clazz, "klass", "J");
 	PangoAttributeFc.start_index = (*env)->GetFieldID(env, PangoAttributeFc.clazz, "start_index", "I");
 	PangoAttributeFc.end_index = (*env)->GetFieldID(env, PangoAttributeFc.clazz, "end_index", "I");
 	PangoAttributeFc.cached = 1;
@@ -2086,7 +2086,7 @@
 PangoAttribute *getPangoAttributeFields(JNIEnv *env, jobject lpObject, PangoAttribute *lpStruct)
 {
 	if (!PangoAttributeFc.cached) cachePangoAttributeFields(env, lpObject);
-	lpStruct->klass = (const PangoAttrClass *)(*env)->GetIntField(env, lpObject, PangoAttributeFc.klass);
+	lpStruct->klass = (const PangoAttrClass *)(*env)->GetLongField(env, lpObject, PangoAttributeFc.klass);
 	lpStruct->start_index = (*env)->GetIntField(env, lpObject, PangoAttributeFc.start_index);
 	lpStruct->end_index = (*env)->GetIntField(env, lpObject, PangoAttributeFc.end_index);
 	return lpStruct;
@@ -2095,7 +2095,7 @@
 void setPangoAttributeFields(JNIEnv *env, jobject lpObject, PangoAttribute *lpStruct)
 {
 	if (!PangoAttributeFc.cached) cachePangoAttributeFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, PangoAttributeFc.klass, (jint)lpStruct->klass);
+	(*env)->SetLongField(env, lpObject, PangoAttributeFc.klass, (jlong)lpStruct->klass);
 	(*env)->SetIntField(env, lpObject, PangoAttributeFc.start_index, (jint)lpStruct->start_index);
 	(*env)->SetIntField(env, lpObject, PangoAttributeFc.end_index, (jint)lpStruct->end_index);
 }
@@ -2117,12 +2117,12 @@
 	PangoItemFc.offset = (*env)->GetFieldID(env, PangoItemFc.clazz, "offset", "I");
 	PangoItemFc.length = (*env)->GetFieldID(env, PangoItemFc.clazz, "length", "I");
 	PangoItemFc.num_chars = (*env)->GetFieldID(env, PangoItemFc.clazz, "num_chars", "I");
-	PangoItemFc.analysis_shape_engine = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_shape_engine", "I");
-	PangoItemFc.analysis_lang_engine = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_lang_engine", "I");
-	PangoItemFc.analysis_font = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_font", "I");
+	PangoItemFc.analysis_shape_engine = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_shape_engine", "J");
+	PangoItemFc.analysis_lang_engine = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_lang_engine", "J");
+	PangoItemFc.analysis_font = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_font", "J");
 	PangoItemFc.analysis_level = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_level", "B");
-	PangoItemFc.analysis_language = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_language", "I");
-	PangoItemFc.analysis_extra_attrs = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_extra_attrs", "I");
+	PangoItemFc.analysis_language = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_language", "J");
+	PangoItemFc.analysis_extra_attrs = (*env)->GetFieldID(env, PangoItemFc.clazz, "analysis_extra_attrs", "J");
 	PangoItemFc.cached = 1;
 }
 
@@ -2132,12 +2132,12 @@
 	lpStruct->offset = (*env)->GetIntField(env, lpObject, PangoItemFc.offset);
 	lpStruct->length = (*env)->GetIntField(env, lpObject, PangoItemFc.length);
 	lpStruct->num_chars = (*env)->GetIntField(env, lpObject, PangoItemFc.num_chars);
-	lpStruct->analysis.shape_engine = (PangoEngineShape *)(*env)->GetIntField(env, lpObject, PangoItemFc.analysis_shape_engine);
-	lpStruct->analysis.lang_engine = (PangoEngineLang *)(*env)->GetIntField(env, lpObject, PangoItemFc.analysis_lang_engine);
-	lpStruct->analysis.font = (PangoFont *)(*env)->GetIntField(env, lpObject, PangoItemFc.analysis_font);
+	lpStruct->analysis.shape_engine = (PangoEngineShape *)(*env)->GetLongField(env, lpObject, PangoItemFc.analysis_shape_engine);
+	lpStruct->analysis.lang_engine = (PangoEngineLang *)(*env)->GetLongField(env, lpObject, PangoItemFc.analysis_lang_engine);
+	lpStruct->analysis.font = (PangoFont *)(*env)->GetLongField(env, lpObject, PangoItemFc.analysis_font);
 	lpStruct->analysis.level = (*env)->GetByteField(env, lpObject, PangoItemFc.analysis_level);
-	lpStruct->analysis.language = (PangoLanguage *)(*env)->GetIntField(env, lpObject, PangoItemFc.analysis_language);
-	lpStruct->analysis.extra_attrs = (GSList *)(*env)->GetIntField(env, lpObject, PangoItemFc.analysis_extra_attrs);
+	lpStruct->analysis.language = (PangoLanguage *)(*env)->GetLongField(env, lpObject, PangoItemFc.analysis_language);
+	lpStruct->analysis.extra_attrs = (GSList *)(*env)->GetLongField(env, lpObject, PangoItemFc.analysis_extra_attrs);
 	return lpStruct;
 }
 
@@ -2147,12 +2147,12 @@
 	(*env)->SetIntField(env, lpObject, PangoItemFc.offset, (jint)lpStruct->offset);
 	(*env)->SetIntField(env, lpObject, PangoItemFc.length, (jint)lpStruct->length);
 	(*env)->SetIntField(env, lpObject, PangoItemFc.num_chars, (jint)lpStruct->num_chars);
-	(*env)->SetIntField(env, lpObject, PangoItemFc.analysis_shape_engine, (jint)lpStruct->analysis.shape_engine);
-	(*env)->SetIntField(env, lpObject, PangoItemFc.analysis_lang_engine, (jint)lpStruct->analysis.lang_engine);
-	(*env)->SetIntField(env, lpObject, PangoItemFc.analysis_font, (jint)lpStruct->analysis.font);
+	(*env)->SetLongField(env, lpObject, PangoItemFc.analysis_shape_engine, (jlong)lpStruct->analysis.shape_engine);
+	(*env)->SetLongField(env, lpObject, PangoItemFc.analysis_lang_engine, (jlong)lpStruct->analysis.lang_engine);
+	(*env)->SetLongField(env, lpObject, PangoItemFc.analysis_font, (jlong)lpStruct->analysis.font);
 	(*env)->SetByteField(env, lpObject, PangoItemFc.analysis_level, (jbyte)lpStruct->analysis.level);
-	(*env)->SetIntField(env, lpObject, PangoItemFc.analysis_language, (jint)lpStruct->analysis.language);
-	(*env)->SetIntField(env, lpObject, PangoItemFc.analysis_extra_attrs, (jint)lpStruct->analysis.extra_attrs);
+	(*env)->SetLongField(env, lpObject, PangoItemFc.analysis_language, (jlong)lpStruct->analysis.language);
+	(*env)->SetLongField(env, lpObject, PangoItemFc.analysis_extra_attrs, (jlong)lpStruct->analysis.extra_attrs);
 }
 #endif
 
@@ -2169,30 +2169,30 @@
 {
 	if (PangoLayoutLineFc.cached) return;
 	PangoLayoutLineFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	PangoLayoutLineFc.layout = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "layout", "I");
+	PangoLayoutLineFc.layout = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "layout", "J");
 	PangoLayoutLineFc.start_index = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "start_index", "I");
 	PangoLayoutLineFc.length = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "length", "I");
-	PangoLayoutLineFc.runs = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "runs", "I");
+	PangoLayoutLineFc.runs = (*env)->GetFieldID(env, PangoLayoutLineFc.clazz, "runs", "J");
 	PangoLayoutLineFc.cached = 1;
 }
 
 PangoLayoutLine *getPangoLayoutLineFields(JNIEnv *env, jobject lpObject, PangoLayoutLine *lpStruct)
 {
 	if (!PangoLayoutLineFc.cached) cachePangoLayoutLineFields(env, lpObject);
-	lpStruct->layout = (PangoLayout *)(*env)->GetIntField(env, lpObject, PangoLayoutLineFc.layout);
+	lpStruct->layout = (PangoLayout *)(*env)->GetLongField(env, lpObject, PangoLayoutLineFc.layout);
 	lpStruct->start_index = (*env)->GetIntField(env, lpObject, PangoLayoutLineFc.start_index);
 	lpStruct->length = (*env)->GetIntField(env, lpObject, PangoLayoutLineFc.length);
-	lpStruct->runs = (GSList *)(*env)->GetIntField(env, lpObject, PangoLayoutLineFc.runs);
+	lpStruct->runs = (GSList *)(*env)->GetLongField(env, lpObject, PangoLayoutLineFc.runs);
 	return lpStruct;
 }
 
 void setPangoLayoutLineFields(JNIEnv *env, jobject lpObject, PangoLayoutLine *lpStruct)
 {
 	if (!PangoLayoutLineFc.cached) cachePangoLayoutLineFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, PangoLayoutLineFc.layout, (jint)lpStruct->layout);
+	(*env)->SetLongField(env, lpObject, PangoLayoutLineFc.layout, (jlong)lpStruct->layout);
 	(*env)->SetIntField(env, lpObject, PangoLayoutLineFc.start_index, (jint)lpStruct->start_index);
 	(*env)->SetIntField(env, lpObject, PangoLayoutLineFc.length, (jint)lpStruct->length);
-	(*env)->SetIntField(env, lpObject, PangoLayoutLineFc.runs, (jint)lpStruct->runs);
+	(*env)->SetLongField(env, lpObject, PangoLayoutLineFc.runs, (jlong)lpStruct->runs);
 }
 #endif
 
@@ -2209,24 +2209,24 @@
 {
 	if (PangoLayoutRunFc.cached) return;
 	PangoLayoutRunFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	PangoLayoutRunFc.item = (*env)->GetFieldID(env, PangoLayoutRunFc.clazz, "item", "I");
-	PangoLayoutRunFc.glyphs = (*env)->GetFieldID(env, PangoLayoutRunFc.clazz, "glyphs", "I");
+	PangoLayoutRunFc.item = (*env)->GetFieldID(env, PangoLayoutRunFc.clazz, "item", "J");
+	PangoLayoutRunFc.glyphs = (*env)->GetFieldID(env, PangoLayoutRunFc.clazz, "glyphs", "J");
 	PangoLayoutRunFc.cached = 1;
 }
 
 PangoLayoutRun *getPangoLayoutRunFields(JNIEnv *env, jobject lpObject, PangoLayoutRun *lpStruct)
 {
 	if (!PangoLayoutRunFc.cached) cachePangoLayoutRunFields(env, lpObject);
-	lpStruct->item = (PangoItem *)(*env)->GetIntField(env, lpObject, PangoLayoutRunFc.item);
-	lpStruct->glyphs = (PangoGlyphString *)(*env)->GetIntField(env, lpObject, PangoLayoutRunFc.glyphs);
+	lpStruct->item = (PangoItem *)(*env)->GetLongField(env, lpObject, PangoLayoutRunFc.item);
+	lpStruct->glyphs = (PangoGlyphString *)(*env)->GetLongField(env, lpObject, PangoLayoutRunFc.glyphs);
 	return lpStruct;
 }
 
 void setPangoLayoutRunFields(JNIEnv *env, jobject lpObject, PangoLayoutRun *lpStruct)
 {
 	if (!PangoLayoutRunFc.cached) cachePangoLayoutRunFields(env, lpObject);
-	(*env)->SetIntField(env, lpObject, PangoLayoutRunFc.item, (jint)lpStruct->item);
-	(*env)->SetIntField(env, lpObject, PangoLayoutRunFc.glyphs, (jint)lpStruct->glyphs);
+	(*env)->SetLongField(env, lpObject, PangoLayoutRunFc.item, (jlong)lpStruct->item);
+	(*env)->SetLongField(env, lpObject, PangoLayoutRunFc.glyphs, (jlong)lpStruct->glyphs);
 }
 #endif
 
@@ -2342,10 +2342,10 @@
 	if (XAnyEventFc.cached) return;
 	cacheXEventFields(env, lpObject);
 	XAnyEventFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	XAnyEventFc.serial = (*env)->GetFieldID(env, XAnyEventFc.clazz, "serial", "I");
+	XAnyEventFc.serial = (*env)->GetFieldID(env, XAnyEventFc.clazz, "serial", "J");
 	XAnyEventFc.send_event = (*env)->GetFieldID(env, XAnyEventFc.clazz, "send_event", "I");
-	XAnyEventFc.display = (*env)->GetFieldID(env, XAnyEventFc.clazz, "display", "I");
-	XAnyEventFc.window = (*env)->GetFieldID(env, XAnyEventFc.clazz, "window", "I");
+	XAnyEventFc.display = (*env)->GetFieldID(env, XAnyEventFc.clazz, "display", "J");
+	XAnyEventFc.window = (*env)->GetFieldID(env, XAnyEventFc.clazz, "window", "J");
 	XAnyEventFc.cached = 1;
 }
 
@@ -2353,10 +2353,10 @@
 {
 	if (!XAnyEventFc.cached) cacheXAnyEventFields(env, lpObject);
 	getXEventFields(env, lpObject, (XEvent *)lpStruct);
-	lpStruct->serial = (*env)->GetIntField(env, lpObject, XAnyEventFc.serial);
+	lpStruct->serial = (*env)->GetLongField(env, lpObject, XAnyEventFc.serial);
 	lpStruct->send_event = (*env)->GetIntField(env, lpObject, XAnyEventFc.send_event);
-	lpStruct->display = (Display *)(*env)->GetIntField(env, lpObject, XAnyEventFc.display);
-	lpStruct->window = (Window)(*env)->GetIntField(env, lpObject, XAnyEventFc.window);
+	lpStruct->display = (Display *)(*env)->GetLongField(env, lpObject, XAnyEventFc.display);
+	lpStruct->window = (Window)(*env)->GetLongField(env, lpObject, XAnyEventFc.window);
 	return lpStruct;
 }
 
@@ -2364,10 +2364,10 @@
 {
 	if (!XAnyEventFc.cached) cacheXAnyEventFields(env, lpObject);
 	setXEventFields(env, lpObject, (XEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, XAnyEventFc.serial, (jint)lpStruct->serial);
+	(*env)->SetLongField(env, lpObject, XAnyEventFc.serial, (jlong)lpStruct->serial);
 	(*env)->SetIntField(env, lpObject, XAnyEventFc.send_event, (jint)lpStruct->send_event);
-	(*env)->SetIntField(env, lpObject, XAnyEventFc.display, (jint)lpStruct->display);
-	(*env)->SetIntField(env, lpObject, XAnyEventFc.window, (jint)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, XAnyEventFc.display, (jlong)lpStruct->display);
+	(*env)->SetLongField(env, lpObject, XAnyEventFc.window, (jlong)lpStruct->window);
 }
 #endif
 
@@ -2446,13 +2446,13 @@
 	if (XClientMessageEventFc.cached) return;
 	XClientMessageEventFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	XClientMessageEventFc.type = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "type", "I");
-	XClientMessageEventFc.serial = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "serial", "I");
+	XClientMessageEventFc.serial = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "serial", "J");
 	XClientMessageEventFc.send_event = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "send_event", "Z");
-	XClientMessageEventFc.display = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "display", "I");
-	XClientMessageEventFc.window = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "window", "I");
-	XClientMessageEventFc.message_type = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "message_type", "I");
+	XClientMessageEventFc.display = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "display", "J");
+	XClientMessageEventFc.window = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "window", "J");
+	XClientMessageEventFc.message_type = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "message_type", "J");
 	XClientMessageEventFc.format = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "format", "I");
-	XClientMessageEventFc.data = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "data", "[I");
+	XClientMessageEventFc.data = (*env)->GetFieldID(env, XClientMessageEventFc.clazz, "data", "[J");
 	XClientMessageEventFc.cached = 1;
 }
 
@@ -2460,15 +2460,15 @@
 {
 	if (!XClientMessageEventFc.cached) cacheXClientMessageEventFields(env, lpObject);
 	lpStruct->type = (*env)->GetIntField(env, lpObject, XClientMessageEventFc.type);
-	lpStruct->serial = (*env)->GetIntField(env, lpObject, XClientMessageEventFc.serial);
+	lpStruct->serial = (*env)->GetLongField(env, lpObject, XClientMessageEventFc.serial);
 	lpStruct->send_event = (*env)->GetBooleanField(env, lpObject, XClientMessageEventFc.send_event);
-	lpStruct->display = (Display *)(*env)->GetIntField(env, lpObject, XClientMessageEventFc.display);
-	lpStruct->window = (Window)(*env)->GetIntField(env, lpObject, XClientMessageEventFc.window);
-	lpStruct->message_type = (Atom)(*env)->GetIntField(env, lpObject, XClientMessageEventFc.message_type);
+	lpStruct->display = (Display *)(*env)->GetLongField(env, lpObject, XClientMessageEventFc.display);
+	lpStruct->window = (Window)(*env)->GetLongField(env, lpObject, XClientMessageEventFc.window);
+	lpStruct->message_type = (Atom)(*env)->GetLongField(env, lpObject, XClientMessageEventFc.message_type);
 	lpStruct->format = (*env)->GetIntField(env, lpObject, XClientMessageEventFc.format);
 	{
-	jintArray lpObject1 = (jintArray)(*env)->GetObjectField(env, lpObject, XClientMessageEventFc.data);
-	(*env)->GetIntArrayRegion(env, lpObject1, 0, sizeof(lpStruct->data.l) / 4, (jint *)lpStruct->data.l);
+	jlongArray lpObject1 = (jlongArray)(*env)->GetObjectField(env, lpObject, XClientMessageEventFc.data);
+	(*env)->GetLongArrayRegion(env, lpObject1, 0, sizeof(lpStruct->data.l) / 8, (jlong *)lpStruct->data.l);
 	}
 	return lpStruct;
 }
@@ -2477,15 +2477,15 @@
 {
 	if (!XClientMessageEventFc.cached) cacheXClientMessageEventFields(env, lpObject);
 	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.type, (jint)lpStruct->type);
-	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.serial, (jint)lpStruct->serial);
+	(*env)->SetLongField(env, lpObject, XClientMessageEventFc.serial, (jlong)lpStruct->serial);
 	(*env)->SetBooleanField(env, lpObject, XClientMessageEventFc.send_event, (jboolean)lpStruct->send_event);
-	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.display, (jint)lpStruct->display);
-	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.window, (jint)lpStruct->window);
-	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.message_type, (jint)lpStruct->message_type);
+	(*env)->SetLongField(env, lpObject, XClientMessageEventFc.display, (jlong)lpStruct->display);
+	(*env)->SetLongField(env, lpObject, XClientMessageEventFc.window, (jlong)lpStruct->window);
+	(*env)->SetLongField(env, lpObject, XClientMessageEventFc.message_type, (jlong)lpStruct->message_type);
 	(*env)->SetIntField(env, lpObject, XClientMessageEventFc.format, (jint)lpStruct->format);
 	{
-	jintArray lpObject1 = (jintArray)(*env)->GetObjectField(env, lpObject, XClientMessageEventFc.data);
-	(*env)->SetIntArrayRegion(env, lpObject1, 0, sizeof(lpStruct->data.l) / 4, (jint *)lpStruct->data.l);
+	jlongArray lpObject1 = (jlongArray)(*env)->GetObjectField(env, lpObject, XClientMessageEventFc.data);
+	(*env)->SetLongArrayRegion(env, lpObject1, 0, sizeof(lpStruct->data.l) / 8, (jlong *)lpStruct->data.l);
 	}
 }
 #endif
@@ -2504,8 +2504,8 @@
 	if (XCrossingEventFc.cached) return;
 	cacheXAnyEventFields(env, lpObject);
 	XCrossingEventFc.clazz = (*env)->GetObjectClass(env, lpObject);
-	XCrossingEventFc.root = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "root", "I");
-	XCrossingEventFc.subwindow = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "subwindow", "I");
+	XCrossingEventFc.root = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "root", "J");
+	XCrossingEventFc.subwindow = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "subwindow", "J");
 	XCrossingEventFc.time = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "time", "I");
 	XCrossingEventFc.x = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "x", "I");
 	XCrossingEventFc.y = (*env)->GetFieldID(env, XCrossingEventFc.clazz, "y", "I");
@@ -2523,8 +2523,8 @@
 {
 	if (!XCrossingEventFc.cached) cacheXCrossingEventFields(env, lpObject);
 	getXAnyEventFields(env, lpObject, (XAnyEvent *)lpStruct);
-	lpStruct->root = (Window)(*env)->GetIntField(env, lpObject, XCrossingEventFc.root);
-	lpStruct->subwindow = (Window)(*env)->GetIntField(env, lpObject, XCrossingEventFc.subwindow);
+	lpStruct->root = (Window)(*env)->GetLongField(env, lpObject, XCrossingEventFc.root);
+	lpStruct->subwindow = (Window)(*env)->GetLongField(env, lpObject, XCrossingEventFc.subwindow);
 	lpStruct->time = (Time)(*env)->GetIntField(env, lpObject, XCrossingEventFc.time);
 	lpStruct->x = (*env)->GetIntField(env, lpObject, XCrossingEventFc.x);
 	lpStruct->y = (*env)->GetIntField(env, lpObject, XCrossingEventFc.y);
@@ -2542,8 +2542,8 @@
 {
 	if (!XCrossingEventFc.cached) cacheXCrossingEventFields(env, lpObject);
 	setXAnyEventFields(env, lpObject, (XAnyEvent *)lpStruct);
-	(*env)->SetIntField(env, lpObject, XCrossingEventFc.root, (jint)lpStruct->root);
-	(*env)->SetIntField(env, lpObject, XCrossingEventFc.subwindow, (jint)lpStruct->subwindow);
+	(*env)->SetLongField(env, lpObject, XCrossingEventFc.root, (jlong)lpStruct->root);
+	(*env)->SetLongField(env, lpObject, XCrossingEventFc.subwindow, (jlong)lpStruct->subwindow);
 	(*env)->SetIntField(env, lpObject, XCrossingEventFc.time, (jint)lpStruct->time);
 	(*env)->SetIntField(env, lpObject, XCrossingEventFc.x, (jint)lpStruct->x);
 	(*env)->SetIntField(env, lpObject, XCrossingEventFc.y, (jint)lpStruct->y);
@@ -2685,17 +2685,17 @@
 	if (XRenderPictureAttributesFc.cached) return;
 	XRenderPictureAttributesFc.clazz = (*env)->GetObjectClass(env, lpObject);
 	XRenderPictureAttributesFc.repeat = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "repeat", "Z");
-	XRenderPictureAttributesFc.alpha_map = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "alpha_map", "I");
+	XRenderPictureAttributesFc.alpha_map = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "alpha_map", "J");
 	XRenderPictureAttributesFc.alpha_x_origin = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "alpha_x_origin", "I");
 	XRenderPictureAttributesFc.alpha_y_origin = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "alpha_y_origin", "I");
 	XRenderPictureAttributesFc.clip_x_origin = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "clip_x_origin", "I");
 	XRenderPictureAttributesFc.clip_y_origin = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "clip_y_origin", "I");
-	XRenderPictureAttributesFc.clip_mask = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "clip_mask", "I");
+	XRenderPictureAttributesFc.clip_mask = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "clip_mask", "J");
 	XRenderPictureAttributesFc.graphics_exposures = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "graphics_exposures", "Z");
 	XRenderPictureAttributesFc.subwindow_mode = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "subwindow_mode", "I");
 	XRenderPictureAttributesFc.poly_edge = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "poly_edge", "I");
 	XRenderPictureAttributesFc.poly_mode = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "poly_mode", "I");
-	XRenderPictureAttributesFc.dither = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "dither", "I");
+	XRenderPictureAttributesFc.dither = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "dither", "J");
 	XRenderPictureAttributesFc.component_alpha = (*env)->GetFieldID(env, XRenderPictureAttributesFc.clazz, "component_alpha", "Z");
 	XRenderPictureAttributesFc.cached = 1;
 }
@@ -2704,17 +2704,17 @@
 {
 	if (!XRenderPictureAttributesFc.cached) cacheXRenderPictureAttributesFields(env, lpObject);
 	lpStruct->repeat = (*env)->GetBooleanField(env, lpObject, XRenderPictureAttributesFc.repeat);
-	lpStruct->alpha_map = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_map);
+	lpStruct->alpha_map = (*env)->GetLongField(env, lpObject, XRenderPictureAttributesFc.alpha_map);
 	lpStruct->alpha_x_origin = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_x_origin);
 	lpStruct->alpha_y_origin = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_y_origin);
 	lpStruct->clip_x_origin = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.clip_x_origin);
 	lpStruct->clip_y_origin = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.clip_y_origin);
-	lpStruct->clip_mask = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.clip_mask);
+	lpStruct->clip_mask = (*env)->GetLongField(env, lpObject, XRenderPictureAttributesFc.clip_mask);
 	lpStruct->graphics_exposures = (*env)->GetBooleanField(env, lpObject, XRenderPictureAttributesFc.graphics_exposures);
 	lpStruct->subwindow_mode = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.subwindow_mode);
 	lpStruct->poly_edge = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.poly_edge);
 	lpStruct->poly_mode = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.poly_mode);
-	lpStruct->dither = (*env)->GetIntField(env, lpObject, XRenderPictureAttributesFc.dither);
+	lpStruct->dither = (*env)->GetLongField(env, lpObject, XRenderPictureAttributesFc.dither);
 	lpStruct->component_alpha = (*env)->GetBooleanField(env, lpObject, XRenderPictureAttributesFc.component_alpha);
 	return lpStruct;
 }
@@ -2723,17 +2723,17 @@
 {
 	if (!XRenderPictureAttributesFc.cached) cacheXRenderPictureAttributesFields(env, lpObject);
 	(*env)->SetBooleanField(env, lpObject, XRenderPictureAttributesFc.repeat, (jboolean)lpStruct->repeat);
-	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_map, (jint)lpStruct->alpha_map);
+	(*env)->SetLongField(env, lpObject, XRenderPictureAttributesFc.alpha_map, (jlong)lpStruct->alpha_map);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_x_origin, (jint)lpStruct->alpha_x_origin);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.alpha_y_origin, (jint)lpStruct->alpha_y_origin);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.clip_x_origin, (jint)lpStruct->clip_x_origin);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.clip_y_origin, (jint)lpStruct->clip_y_origin);
-	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.clip_mask, (jint)lpStruct->clip_mask);
+	(*env)->SetLongField(env, lpObject, XRenderPictureAttributesFc.clip_mask, (jlong)lpStruct->clip_mask);
 	(*env)->SetBooleanField(env, lpObject, XRenderPictureAttributesFc.graphics_exposures, (jboolean)lpStruct->graphics_exposures);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.subwindow_mode, (jint)lpStruct->subwindow_mode);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.poly_edge, (jint)lpStruct->poly_edge);
 	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.poly_mode, (jint)lpStruct->poly_mode);
-	(*env)->SetIntField(env, lpObject, XRenderPictureAttributesFc.dither, (jint)lpStruct->dither);
+	(*env)->SetLongField(env, lpObject, XRenderPictureAttributesFc.dither, (jlong)lpStruct->dither);
 	(*env)->SetBooleanField(env, lpObject, XRenderPictureAttributesFc.component_alpha, (jboolean)lpStruct->component_alpha);
 }
 #endif
@@ -2790,7 +2790,7 @@
 	XWindowChangesFc.width = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "width", "I");
 	XWindowChangesFc.height = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "height", "I");
 	XWindowChangesFc.border_width = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "border_width", "I");
-	XWindowChangesFc.sibling = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "sibling", "I");
+	XWindowChangesFc.sibling = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "sibling", "J");
 	XWindowChangesFc.stack_mode = (*env)->GetFieldID(env, XWindowChangesFc.clazz, "stack_mode", "I");
 	XWindowChangesFc.cached = 1;
 }
@@ -2803,7 +2803,7 @@
 	lpStruct->width = (*env)->GetIntField(env, lpObject, XWindowChangesFc.width);
 	lpStruct->height = (*env)->GetIntField(env, lpObject, XWindowChangesFc.height);
 	lpStruct->border_width = (*env)->GetIntField(env, lpObject, XWindowChangesFc.border_width);
-	lpStruct->sibling = (*env)->GetIntField(env, lpObject, XWindowChangesFc.sibling);
+	lpStruct->sibling = (*env)->GetLongField(env, lpObject, XWindowChangesFc.sibling);
 	lpStruct->stack_mode = (*env)->GetIntField(env, lpObject, XWindowChangesFc.stack_mode);
 	return lpStruct;
 }
@@ -2816,7 +2816,7 @@
 	(*env)->SetIntField(env, lpObject, XWindowChangesFc.width, (jint)lpStruct->width);
 	(*env)->SetIntField(env, lpObject, XWindowChangesFc.height, (jint)lpStruct->height);
 	(*env)->SetIntField(env, lpObject, XWindowChangesFc.border_width, (jint)lpStruct->border_width);
-	(*env)->SetIntField(env, lpObject, XWindowChangesFc.sibling, (jint)lpStruct->sibling);
+	(*env)->SetLongField(env, lpObject, XWindowChangesFc.sibling, (jlong)lpStruct->sibling);
 	(*env)->SetIntField(env, lpObject, XWindowChangesFc.stack_mode, (jint)lpStruct->stack_mode);
 }
 #endif
diff -ur x86/xpcom.cpp x86_64/xpcom.cpp
--- x86/xpcom.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcom.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -16,17 +16,17 @@
 #define XPCOM_NATIVE(func) Java_org_eclipse_swt_internal_mozilla_XPCOM_##func
 
 #ifndef NO_Call
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(Call)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4, jint arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(Call)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4, jint arg5, jintArray arg6)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(Call)(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jbyteArray arg3, jint arg4, jint arg5, jintArray arg6);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(Call)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2, jbyteArray arg3, jint arg4, jint arg5, jintArray arg6)
 {
 	jbyte *lparg3=NULL;
 	jint *lparg6=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, Call_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((nsWriteSegmentFun)arg0)((nsIInputStream *)arg1, (void *)arg2, (const char *)lparg3, arg4, arg5, (PRUint32 *)lparg6);
+	rc = (jlong)((nsWriteSegmentFun)arg0)((nsIInputStream *)arg1, (void *)arg2, (const char *)lparg3, arg4, arg5, (PRUint32 *)lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
@@ -36,43 +36,43 @@
 #endif
 
 #ifndef NO_NS_1GetComponentManager
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetComponentManager)(JNIEnv *env, jclass that, jintArray arg0);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetComponentManager)(JNIEnv *env, jclass that, jlongArray arg0);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetComponentManager)
-	(JNIEnv *env, jclass that, jintArray arg0)
+	(JNIEnv *env, jclass that, jlongArray arg0)
 {
-	jint *lparg0=NULL;
+	jlong *lparg0=NULL;
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, NS_1GetComponentManager_FUNC);
-	if (arg0) if ((lparg0 = env->GetIntArrayElements(arg0, NULL)) == NULL) goto fail;
+	if (arg0) if ((lparg0 = env->GetLongArrayElements(arg0, NULL)) == NULL) goto fail;
 	rc = (jint)NS_GetComponentManager((nsIComponentManager**)lparg0);
 fail:
-	if (arg0 && lparg0) env->ReleaseIntArrayElements(arg0, lparg0, 0);
+	if (arg0 && lparg0) env->ReleaseLongArrayElements(arg0, lparg0, 0);
 	XPCOM_NATIVE_EXIT(env, that, NS_1GetComponentManager_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_NS_1GetServiceManager
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetServiceManager)(JNIEnv *env, jclass that, jintArray arg0);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetServiceManager)(JNIEnv *env, jclass that, jlongArray arg0);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1GetServiceManager)
-	(JNIEnv *env, jclass that, jintArray arg0)
+	(JNIEnv *env, jclass that, jlongArray arg0)
 {
-	jint *lparg0=NULL;
+	jlong *lparg0=NULL;
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, NS_1GetServiceManager_FUNC);
-	if (arg0) if ((lparg0 = env->GetIntArrayElements(arg0, NULL)) == NULL) goto fail;
+	if (arg0) if ((lparg0 = env->GetLongArrayElements(arg0, NULL)) == NULL) goto fail;
 	rc = (jint)NS_GetServiceManager((nsIServiceManager**)lparg0);
 fail:
-	if (arg0 && lparg0) env->ReleaseIntArrayElements(arg0, lparg0, 0);
+	if (arg0 && lparg0) env->ReleaseLongArrayElements(arg0, lparg0, 0);
 	XPCOM_NATIVE_EXIT(env, that, NS_1GetServiceManager_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_NS_1InitXPCOM2
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1InitXPCOM2)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1InitXPCOM2)(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1InitXPCOM2)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1, jlong arg2)
 {
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, NS_1InitXPCOM2_FUNC);
@@ -83,680 +83,680 @@
 #endif
 
 #ifndef NO_NS_1NewLocalFile
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1NewLocalFile)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1NewLocalFile)(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(NS_1NewLocalFile)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+	(JNIEnv *env, jclass that, jlong arg0, jint arg1, jlongArray arg2)
 {
-	jint *lparg2=NULL;
+	jlong *lparg2=NULL;
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, NS_1NewLocalFile_FUNC);
-	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
+	if (arg2) if ((lparg2 = env->GetLongArrayElements(arg2, NULL)) == NULL) goto fail;
 	rc = (jint)NS_NewLocalFile(*(nsAString *)arg0, arg1, (nsILocalFile**)lparg2);
 fail:
-	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
+	if (arg2 && lparg2) env->ReleaseLongArrayElements(arg2, lparg2, 0);
 	XPCOM_NATIVE_EXIT(env, that, NS_1NewLocalFile_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II)(JNIEnv *env, jclass that, jint arg0, jint arg1);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+#ifndef NO_VtblCall__IJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint))(*(jint **)arg1)[arg0])(arg1);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong))(*(jlong **)arg1)[arg0])(arg1);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIF
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIF)(JNIEnv *env, jclass that, jint arg0, jint arg1, jfloat arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIF)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jfloat arg2)
+#ifndef NO_VtblCall__IJF
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJF)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jfloat arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJF)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jfloat arg2)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIF_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jfloat))(*(jint **)arg1)[arg0])(arg1, arg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIF_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJF_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jfloat))(*(jlong **)arg1)[arg0])(arg1, arg2);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJF_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2)
+#ifndef NO_VtblCall__IJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3)
+#ifndef NO_VtblCall__IJII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4)
+#ifndef NO_VtblCall__IJIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+#ifndef NO_VtblCall__IJIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+#ifndef NO_VtblCall__IJIIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7)
+#ifndef NO_VtblCall__IJIIIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIIIIIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIIIIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIIIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+#ifndef NO_VtblCall__IJIIIIIIIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIIIIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIIIIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIIIIIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIIIIIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIIIIIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIIIIIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIIIIIIIIIIISI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIIIIIIIIIISI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jint arg16);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIIIIIIIIIISI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jint arg16)
+#ifndef NO_VtblCall__IJIIIIIIIIIIIIISI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIIIIIIIIIISI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jint arg16);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIIIIIIIIIISI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jint arg16)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIIIIIIIIIIISI_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jshort, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIIIIIIIIIIISI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIIIIIIIIIIISI_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jint, jshort, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIIIIIIIIIIISI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIIII_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIII_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jcharArray arg8, jintArray arg9, jintArray arg10);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIII_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jcharArray arg8, jintArray arg9, jintArray arg10)
+#ifndef NO_VtblCall__IJIIIIII_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIII_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jcharArray arg8, jintArray arg9, jintArray arg10);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIII_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jint arg6, jint arg7, jcharArray arg8, jintArray arg9, jintArray arg10)
 {
 	jchar *lparg8=NULL;
 	jint *lparg9=NULL;
 	jint *lparg10=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIIII_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIIII_3C_3I_3I_FUNC);
 	if (arg8) if ((lparg8 = env->GetCharArrayElements(arg8, NULL)) == NULL) goto fail;
 	if (arg9) if ((lparg9 = env->GetIntArrayElements(arg9, NULL)) == NULL) goto fail;
 	if (arg10) if ((lparg10 = env->GetIntArrayElements(arg10, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint, jint, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, lparg8, lparg9, lparg10);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint, jint, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, lparg8, lparg9, lparg10);
 fail:
 	if (arg10 && lparg10) env->ReleaseIntArrayElements(arg10, lparg10, 0);
 	if (arg9 && lparg9) env->ReleaseIntArrayElements(arg9, lparg9, 0);
 	if (arg8 && lparg8) env->ReleaseCharArrayElements(arg8, lparg8, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIIII_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIIII_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIIIJII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIJII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jlong arg6, jint arg7, jint arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIIIJII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jlong arg6, jint arg7, jint arg8)
+#ifndef NO_VtblCall__IJIIIIJII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIJII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jlong arg6, jint arg7, jint arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIIIJII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jlong arg6, jint arg7, jint arg8)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIIIJII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jlong, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIIIJII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIIIJII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jlong, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIIIJII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIII_3CIIIII_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3CIIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jintArray arg12, jintArray arg13);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3CIIIII_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jintArray arg12, jintArray arg13)
+#ifndef NO_VtblCall__IJIIII_3CIIIII_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3CIIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jintArray arg12, jintArray arg13);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3CIIIII_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jintArray arg12, jintArray arg13)
 {
 	jchar *lparg6=NULL;
 	jint *lparg12=NULL;
 	jint *lparg13=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIII_3CIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIII_3CIIIII_3I_3I_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg12) if ((lparg12 = env->GetIntArrayElements(arg12, NULL)) == NULL) goto fail;
 	if (arg13) if ((lparg13 = env->GetIntArrayElements(arg13, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jchar *, jint, jint, jint, jint, jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, arg7, arg8, arg9, arg10, arg11, lparg12, lparg13);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jchar *, jint, jint, jint, jint, jint, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, arg7, arg8, arg9, arg10, arg11, lparg12, lparg13);
 fail:
 	if (arg13 && lparg13) env->ReleaseIntArrayElements(arg13, lparg13, 0);
 	if (arg12 && lparg12) env->ReleaseIntArrayElements(arg12, lparg12, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIII_3CIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIII_3CIIIII_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIII_3C_3BIIIII_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3C_3BIIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jintArray arg13, jintArray arg14);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3C_3BIIIII_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jintArray arg13, jintArray arg14)
+#ifndef NO_VtblCall__IJIIII_3C_3BIIIII_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3C_3BIIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jintArray arg13, jintArray arg14);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3C_3BIIIII_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jintArray arg13, jintArray arg14)
 {
 	jchar *lparg6=NULL;
 	jbyte *lparg7=NULL;
 	jint *lparg13=NULL;
 	jint *lparg14=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIII_3C_3BIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIII_3C_3BIIIII_3I_3I_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetByteArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg13) if ((lparg13 = env->GetIntArrayElements(arg13, NULL)) == NULL) goto fail;
 	if (arg14) if ((lparg14 = env->GetIntArrayElements(arg14, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jchar *, jbyte *, jint, jint, jint, jint, jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, arg8, arg9, arg10, arg11, arg12, lparg13, lparg14);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jchar *, jbyte *, jint, jint, jint, jint, jint, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, arg8, arg9, arg10, arg11, arg12, lparg13, lparg14);
 fail:
 	if (arg14 && lparg14) env->ReleaseIntArrayElements(arg14, lparg14, 0);
 	if (arg13 && lparg13) env->ReleaseIntArrayElements(arg13, lparg13, 0);
 	if (arg7 && lparg7) env->ReleaseByteArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIII_3C_3BIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIII_3C_3BIIIII_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIII_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJIIII_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIII_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIII_3C_3I_3I_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIII_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIII_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIII_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jintArray arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIII_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5, jintArray arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJIIII_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jintArray arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIII_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jint arg5, jintArray arg6, jintArray arg7)
 {
 	jint *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIII_3I_3I_FUNC);
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIII_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIII_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIII_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jcharArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jcharArray arg5)
+#ifndef NO_VtblCall__IJIII_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jcharArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jcharArray arg5)
 {
 	jchar *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIII_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIII_3C_FUNC);
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIII_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIII_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIII_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIII_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jint arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJIII_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIII_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jint arg4, jintArray arg5)
 {
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIII_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIII_3I_FUNC);
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIII_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIII_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIIJJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIJJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIIJJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7)
+#ifndef NO_VtblCall__IJIIJJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIJJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIIJJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIIJJJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jlong, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIIJJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIIJJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jlong, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIIJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jbyteArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jbyteArray arg4)
+#ifndef NO_VtblCall__IJII_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jbyteArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jbyteArray arg4)
 {
 	jbyte *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3B_FUNC);
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jbyte *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jbyte *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4)
+#ifndef NO_VtblCall__IJII_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4)
 {
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3C_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3CIJI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3CIJI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3CIJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7)
+#ifndef NO_VtblCall__IJII_3CIJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3CIJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3CIJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7)
 {
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3CIJI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3CIJI_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jchar *, jint, jlong, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jchar *, jint, jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3CIJI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3CIJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3CJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3CJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3CJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7)
+#ifndef NO_VtblCall__IJII_3CJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3CJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3CJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7)
 {
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3CJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3CJJJ_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jchar *, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jchar *, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3CJJJ_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3CJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3C_3CI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3C_3CI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jcharArray arg5, jint arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3C_3CI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jcharArray arg4, jcharArray arg5, jint arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJII_3C_3CI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3C_3CI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jcharArray arg5, jint arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3C_3CI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jcharArray arg4, jcharArray arg5, jint arg6, jintArray arg7)
 {
 	jchar *lparg4=NULL;
 	jchar *lparg5=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3C_3CI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3C_3CI_3I_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jchar *, jchar *, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, lparg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jchar *, jchar *, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, lparg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3C_3CI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3C_3CI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJII_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jintArray arg4)
 {
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3I_FUNC);
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIII_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIII_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jint arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJII_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJII_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jint arg3, jlongArray arg4)
 {
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIII_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJII_3J_FUNC);
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIII_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJII_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIIJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jlong arg3, jlong arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIIJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jlong arg3, jlong arg4)
+#ifndef NO_VtblCall__IJIJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jlong arg3, jlong arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJIJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jlong arg3, jlong arg4)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIIJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIIJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJIJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJIJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3)
+#ifndef NO_VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jobject arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jobject arg3)
 {
 	nsID _arg3, *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, nsID *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, nsID *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jobject arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jobject arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jobject arg3, jintArray arg4)
 {
 	nsID _arg3, *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3)
+#ifndef NO_VtblCall__IJI_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3)
 {
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3B_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3BI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4)
+#ifndef NO_VtblCall__IJI_3BI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3BI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3BI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jint arg4)
 {
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3BI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3BI_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *, jint))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3BI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3BI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3BI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3BI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jint arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJI_3BI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jint arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3BI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jint arg4, jintArray arg5)
 {
 	jbyte *lparg3=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3BI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3BI_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3BI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3BI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3B_3B_3BI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3B_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jint arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3B_3BI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jint arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJI_3B_3B_3BI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3B_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jint arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3B_3BI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jint arg6, jintArray arg7)
 {
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jbyte *lparg5=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3B_3B_3BI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3B_3B_3BI_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetByteArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *, jbyte *, jbyte *, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *, jbyte *, jbyte *, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg5 && lparg5) env->ReleaseByteArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3B_3B_3BI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3B_3B_3BI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3B_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jcharArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jcharArray arg4)
+#ifndef NO_VtblCall__IJI_3B_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jcharArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jcharArray arg4)
 {
 	jbyte *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3B_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3B_3C_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3B_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3B_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3B_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3B_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jbyteArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJI_3B_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3B_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jbyteArray arg3, jintArray arg4)
 {
 	jbyte *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3B_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3B_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jbyte *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jbyte *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3B_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3B_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3)
+#ifndef NO_VtblCall__IJI_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3)
 {
 	jchar *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3CI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3CI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3CI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jint arg4)
+#ifndef NO_VtblCall__IJI_3CI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3CI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3CI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jint arg4)
 {
 	jchar *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3CI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3CI_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jint))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3CI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3CI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4)
+#ifndef NO_VtblCall__IJI_3C_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11)
+#ifndef NO_VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -767,7 +767,7 @@
 	jint *lparg10=NULL;
 	jint *lparg11=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
@@ -776,7 +776,7 @@
 	if (arg9) if ((lparg9 = env->GetCharArrayElements(arg9, NULL)) == NULL) goto fail;
 	if (arg10) if ((lparg10 = env->GetIntArrayElements(arg10, NULL)) == NULL) goto fail;
 	if (arg11) if ((lparg11 = env->GetIntArrayElements(arg11, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jint, jchar *, jchar *, jchar *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8, lparg9, lparg10, lparg11);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jint, jchar *, jchar *, jchar *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8, lparg9, lparg10, lparg11);
 fail:
 	if (arg11 && lparg11) env->ReleaseIntArrayElements(arg11, lparg11, 0);
 	if (arg10 && lparg10) env->ReleaseIntArrayElements(arg10, lparg10, 0);
@@ -786,15 +786,15 @@
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3CI_3I_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3CI_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jintArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3CI_3I_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jintArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJI_3C_3CI_3I_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3CI_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jintArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3CI_3I_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jint arg5, jintArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -802,54 +802,54 @@
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3CI_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3CI_3I_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jint, jint *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jint, jint *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3CI_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3CI_3I_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C_3C_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3C_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6)
+#ifndef NO_VtblCall__IJI_3C_3C_3C_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3C_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jchar *lparg5=NULL;
 	jint *lparg6=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_3C_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jchar *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jchar *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_3C_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJI_3C_3C_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -857,51 +857,51 @@
 	jint *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJI_3C_3C_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C_3I_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJI_3C_3C_3I_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -910,14 +910,14 @@
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_3I_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_3I_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jint *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jint *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
@@ -925,15 +925,15 @@
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_3I_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_3I_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3C_3C_3I_3I_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I_3I_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jintArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3C_3C_3I_3I_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jintArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9)
+#ifndef NO_VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jintArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jcharArray arg3, jcharArray arg4, jintArray arg5, jintArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -943,7 +943,7 @@
 	jint *lparg8=NULL;
 	jint *lparg9=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3C_3C_3I_3I_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
@@ -951,7 +951,7 @@
 	if (arg7) if ((lparg7 = env->GetCharArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
 	if (arg9) if ((lparg9 = env->GetIntArrayElements(arg9, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jchar *, jchar *, jint *, jint *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8, lparg9);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jchar *, jchar *, jint *, jint *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8, lparg9);
 fail:
 	if (arg9 && lparg9) env->ReleaseIntArrayElements(arg9, lparg9, 0);
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
@@ -960,658 +960,658 @@
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3C_3C_3I_3I_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3)
+#ifndef NO_VtblCall__IJI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jintArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jintArray arg3)
 {
 	jint *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__III_3I_3I_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3I_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__III_3I_3I_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jint arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6)
+#ifndef NO_VtblCall__IJI_3I_3I_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3I_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJI_3I_3I_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jint arg2, jintArray arg3, jintArray arg4, jintArray arg5, jintArray arg6)
 {
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint *lparg6=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__III_3I_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJI_3I_3I_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint, jint *, jint *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint, jint *, jint *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__III_3I_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJI_3I_3I_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2)
+#ifndef NO_VtblCall__IJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong))(*(jint **)arg1)[arg0])(arg1, arg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3)
+#ifndef NO_VtblCall__IJJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJI_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJI_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJIIJIIIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJIIIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJIIIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
+#ifndef NO_VtblCall__IJJIIJIIIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJIIIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJIIIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJIIJIIIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint, jint, jlong, jint, jint, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJIIJIIIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJIIJIIIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint, jint, jlong, jint, jint, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJIIJIIIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJIIJIIIIIIIIISJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJIIIIIIIIISJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jlong arg16);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJIIIIIIIIISJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jlong arg16)
+#ifndef NO_VtblCall__IJJIIJIIIIIIIIISJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJIIIIIIIIISJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jlong arg16);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJIIIIIIIIISJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jint arg6, jint arg7, jint arg8, jint arg9, jint arg10, jint arg11, jint arg12, jint arg13, jint arg14, jshort arg15, jlong arg16)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJIIJIIIIIIIIISJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint, jint, jlong, jint, jint, jint, jint, jint, jint, jint, jint, jint, jshort, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJIIJIIIIIIIIISJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJIIJIIIIIIIIISJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint, jint, jlong, jint, jint, jint, jint, jint, jint, jint, jint, jint, jshort, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9, arg10, arg11, arg12, arg13, arg14, arg15, arg16);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJIIJIIIIIIIIISJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJIIJ_3I_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJ_3I_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jintArray arg6, jlongArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJIIJ_3I_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jintArray arg6, jlongArray arg7)
+#ifndef NO_VtblCall__IJJIIJ_3I_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJ_3I_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jintArray arg6, jlongArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJIIJ_3I_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jint arg4, jlong arg5, jintArray arg6, jlongArray arg7)
 {
 	jint *lparg6=NULL;
 	jlong *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJIIJ_3I_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJIIJ_3I_3J_FUNC);
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetLongArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint, jint, jlong, jint *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint, jint, jlong, jint *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseLongArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJIIJ_3I_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJIIJ_3I_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJI_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJI_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJI_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jint arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJJI_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJI_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJI_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jint arg3, jlongArray arg4)
 {
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJI_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJI_3J_FUNC);
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJI_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJI_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3)
+#ifndef NO_VtblCall__IJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4)
+#ifndef NO_VtblCall__IJJJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJI_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJI_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jint arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jint arg5)
+#ifndef NO_VtblCall__IJJJII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jint arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jint arg5)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jint arg5, jint arg6, jint arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jint arg5, jint arg6, jint arg7)
+#ifndef NO_VtblCall__IJJJIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jint arg5, jint arg6, jint arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jint arg5, jint arg6, jint arg7)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJIIII_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJIIII_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJIJ_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJIJ_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jlong arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJIJ_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jlong arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJJJIJ_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJIJ_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jlong arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJIJ_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jlong arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJIJ_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJIJ_3C_3I_3I_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint, jlong, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint, jlong, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJIJ_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJIJ_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJI_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jcharArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jcharArray arg5)
+#ifndef NO_VtblCall__IJJJI_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jcharArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jcharArray arg5)
 {
 	jchar *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJI_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJI_3C_FUNC);
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJI_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJI_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jint arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJJJI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jint arg4, jintArray arg5)
 {
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJI_3I_FUNC);
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4)
+#ifndef NO_VtblCall__IJJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5)
+#ifndef NO_VtblCall__IJJJJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJI_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJI_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJI_3CJJIJI_3J_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI_3CJJIJI_3J_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jlong arg7, jlong arg8, jint arg9, jlong arg10, jint arg11, jlongArray arg12, jlongArray arg13);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI_3CJJIJI_3J_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jlong arg7, jlong arg8, jint arg9, jlong arg10, jint arg11, jlongArray arg12, jlongArray arg13)
+#ifndef NO_VtblCall__IJJJJI_3CJJIJI_3J_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI_3CJJIJI_3J_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jlong arg7, jlong arg8, jint arg9, jlong arg10, jint arg11, jlongArray arg12, jlongArray arg13);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI_3CJJIJI_3J_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jlong arg7, jlong arg8, jint arg9, jlong arg10, jint arg11, jlongArray arg12, jlongArray arg13)
 {
 	jchar *lparg6=NULL;
 	jlong *lparg12=NULL;
 	jlong *lparg13=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJI_3CJJIJI_3J_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJI_3CJJIJI_3J_3J_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg12) if ((lparg12 = env->GetLongArrayElements(arg12, NULL)) == NULL) goto fail;
 	if (arg13) if ((lparg13 = env->GetLongArrayElements(arg13, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jint, jchar *, jlong, jlong, jint, jlong, jint, jlong *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, arg7, arg8, arg9, arg10, arg11, lparg12, lparg13);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jint, jchar *, jlong, jlong, jint, jlong, jint, jlong *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, arg7, arg8, arg9, arg10, arg11, lparg12, lparg13);
 fail:
 	if (arg13 && lparg13) env->ReleaseLongArrayElements(arg13, lparg13, 0);
 	if (arg12 && lparg12) env->ReleaseLongArrayElements(arg12, lparg12, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJI_3CJJIJI_3J_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJI_3CJJIJI_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJI_3C_3BJJIJI_3J_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI_3C_3BJJIJI_3J_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jlong arg8, jlong arg9, jint arg10, jlong arg11, jint arg12, jlongArray arg13, jlongArray arg14);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJI_3C_3BJJIJI_3J_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jlong arg8, jlong arg9, jint arg10, jlong arg11, jint arg12, jlongArray arg13, jlongArray arg14)
+#ifndef NO_VtblCall__IJJJJI_3C_3BJJIJI_3J_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI_3C_3BJJIJI_3J_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jlong arg8, jlong arg9, jint arg10, jlong arg11, jint arg12, jlongArray arg13, jlongArray arg14);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJI_3C_3BJJIJI_3J_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jint arg5, jcharArray arg6, jbyteArray arg7, jlong arg8, jlong arg9, jint arg10, jlong arg11, jint arg12, jlongArray arg13, jlongArray arg14)
 {
 	jchar *lparg6=NULL;
 	jbyte *lparg7=NULL;
 	jlong *lparg13=NULL;
 	jlong *lparg14=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJI_3C_3BJJIJI_3J_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJI_3C_3BJJIJI_3J_3J_FUNC);
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetByteArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg13) if ((lparg13 = env->GetLongArrayElements(arg13, NULL)) == NULL) goto fail;
 	if (arg14) if ((lparg14 = env->GetLongArrayElements(arg14, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jint, jchar *, jbyte *, jlong, jlong, jint, jlong, jint, jlong *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, arg8, arg9, arg10, arg11, arg12, lparg13, lparg14);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jint, jchar *, jbyte *, jlong, jlong, jint, jlong, jint, jlong *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, lparg6, lparg7, arg8, arg9, arg10, arg11, arg12, lparg13, lparg14);
 fail:
 	if (arg14 && lparg14) env->ReleaseLongArrayElements(arg14, lparg14, 0);
 	if (arg13 && lparg13) env->ReleaseLongArrayElements(arg13, lparg13, 0);
 	if (arg7 && lparg7) env->ReleaseByteArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJI_3C_3BJJIJI_3J_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJI_3C_3BJJIJI_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJJIJ_3C_3I_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJIJ_3C_3I_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jint arg6, jlong arg7, jcharArray arg8, jintArray arg9, jlongArray arg10);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJIJ_3C_3I_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jint arg6, jlong arg7, jcharArray arg8, jintArray arg9, jlongArray arg10)
+#ifndef NO_VtblCall__IJJJJJIJ_3C_3I_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJIJ_3C_3I_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jint arg6, jlong arg7, jcharArray arg8, jintArray arg9, jlongArray arg10);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJIJ_3C_3I_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jint arg6, jlong arg7, jcharArray arg8, jintArray arg9, jlongArray arg10)
 {
 	jchar *lparg8=NULL;
 	jint *lparg9=NULL;
 	jlong *lparg10=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJJIJ_3C_3I_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJJIJ_3C_3I_3J_FUNC);
 	if (arg8) if ((lparg8 = env->GetCharArrayElements(arg8, NULL)) == NULL) goto fail;
 	if (arg9) if ((lparg9 = env->GetIntArrayElements(arg9, NULL)) == NULL) goto fail;
 	if (arg10) if ((lparg10 = env->GetLongArrayElements(arg10, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jlong, jint, jlong, jchar *, jint *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, lparg8, lparg9, lparg10);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jlong, jint, jlong, jchar *, jint *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, lparg8, lparg9, lparg10);
 fail:
 	if (arg10 && lparg10) env->ReleaseLongArrayElements(arg10, lparg10, 0);
 	if (arg9 && lparg9) env->ReleaseIntArrayElements(arg9, lparg9, 0);
 	if (arg8 && lparg8) env->ReleaseCharArrayElements(arg8, lparg8, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJJIJ_3C_3I_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJJIJ_3C_3I_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6)
+#ifndef NO_VtblCall__IJJJJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7)
+#ifndef NO_VtblCall__IJJJJJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJJJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJJJJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7, jlong arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJJJJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7, jlong arg8)
+#ifndef NO_VtblCall__IJJJJJJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7, jlong arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJJJJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jlong arg4, jlong arg5, jlong arg6, jlong arg7, jlong arg8)
 {
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJJJJJJ_FUNC);
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jlong, jlong, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJJJJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJJJJJJ_FUNC);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jlong, jlong, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJJJJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jbyteArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jbyteArray arg4)
+#ifndef NO_VtblCall__IJJJ_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jbyteArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jbyteArray arg4)
 {
 	jbyte *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_3B_FUNC);
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jbyte *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jbyte *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ_3CIJI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3CIJI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3CIJI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7)
+#ifndef NO_VtblCall__IJJJ_3CIJI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3CIJI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3CIJI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jint arg5, jlong arg6, jint arg7)
 {
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_3CIJI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_3CIJI_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jchar *, jint, jlong, jint))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jchar *, jint, jlong, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_3CIJI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_3CIJI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ_3CJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3CJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3CJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7)
+#ifndef NO_VtblCall__IJJJ_3CJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3CJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3CJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jlong arg5, jlong arg6, jlong arg7)
 {
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_3CJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_3CJJJ_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jchar *, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jchar *, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, arg5, arg6, arg7);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_3CJJJ_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_3CJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ_3C_3CI_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3C_3CI_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jcharArray arg5, jint arg6, jlongArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3C_3CI_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jcharArray arg4, jcharArray arg5, jint arg6, jlongArray arg7)
+#ifndef NO_VtblCall__IJJJ_3C_3CI_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3C_3CI_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jcharArray arg5, jint arg6, jlongArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3C_3CI_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jcharArray arg4, jcharArray arg5, jint arg6, jlongArray arg7)
 {
 	jchar *lparg4=NULL;
 	jchar *lparg5=NULL;
 	jlong *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_3C_3CI_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_3C_3CI_3J_FUNC);
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetLongArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jchar *, jchar *, jint, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4, lparg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jchar *, jchar *, jint, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4, lparg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseLongArrayElements(arg7, lparg7, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_3C_3CI_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_3C_3CI_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJJ_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJJ_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlong arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJJJ_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJJ_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlong arg3, jintArray arg4)
 {
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJJ_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJJ_3I_FUNC);
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJJ_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJJ_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jobject arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jobject arg3)
+#ifndef NO_VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jobject arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jobject arg3)
 {
 	nsID _arg3, *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, nsID *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, nsID *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jobject arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jobject arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jobject arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jobject arg3, jlongArray arg4)
 {
 	nsID _arg3, *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3)
+#ifndef NO_VtblCall__IJJ_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3)
 {
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3B_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jbyte *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jbyte *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3BI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jint arg4)
+#ifndef NO_VtblCall__IJJ_3BI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3BI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3BI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jint arg4)
 {
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3BI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3BI_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jbyte *, jint))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jbyte *, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3BI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3BI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3BJ_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3BJ_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jlong arg4, jlongArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3BJ_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jlong arg4, jlongArray arg5)
+#ifndef NO_VtblCall__IJJ_3BJ_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3BJ_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jlong arg4, jlongArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3BJ_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jlong arg4, jlongArray arg5)
 {
 	jbyte *lparg3=NULL;
 	jlong *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3BJ_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3BJ_3J_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jbyte *, jlong, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jbyte *, jlong, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3BJ_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3BJ_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3B_3B_3BJ_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B_3B_3BJ_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jlong arg6, jlongArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B_3B_3BJ_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jlong arg6, jlongArray arg7)
+#ifndef NO_VtblCall__IJJ_3B_3B_3BJ_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B_3B_3BJ_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jlong arg6, jlongArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B_3B_3BJ_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jbyteArray arg4, jbyteArray arg5, jlong arg6, jlongArray arg7)
 {
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jbyte *lparg5=NULL;
 	jlong *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3B_3B_3BJ_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3B_3B_3BJ_3J_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetByteArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetLongArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jbyte *, jbyte *, jbyte *, jlong, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jbyte *, jbyte *, jbyte *, jlong, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseLongArrayElements(arg7, lparg7, 0);
 	if (arg5 && lparg5) env->ReleaseByteArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3B_3B_3BJ_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3B_3B_3BJ_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3B_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jcharArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3B_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jbyteArray arg3, jcharArray arg4)
+#ifndef NO_VtblCall__IJJ_3B_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jcharArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3B_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jbyteArray arg3, jcharArray arg4)
 {
 	jbyte *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3B_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3B_3C_FUNC);
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jbyte *, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jbyte *, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3B_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3B_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3CI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3CI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3CI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jint arg4)
+#ifndef NO_VtblCall__IJJ_3CI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3CI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3CI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jint arg4)
 {
 	jchar *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3CI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3CI_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jint))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jint))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3CI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3CI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4)
+#ifndef NO_VtblCall__IJJ_3C_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11)
+#ifndef NO_VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jcharArray arg6, jcharArray arg7, jcharArray arg8, jcharArray arg9, jintArray arg10, jintArray arg11)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -1622,7 +1622,7 @@
 	jint *lparg10=NULL;
 	jint *lparg11=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
@@ -1631,7 +1631,7 @@
 	if (arg9) if ((lparg9 = env->GetCharArrayElements(arg9, NULL)) == NULL) goto fail;
 	if (arg10) if ((lparg10 = env->GetIntArrayElements(arg10, NULL)) == NULL) goto fail;
 	if (arg11) if ((lparg11 = env->GetIntArrayElements(arg11, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jint, jchar *, jchar *, jchar *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8, lparg9, lparg10, lparg11);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jint, jchar *, jchar *, jchar *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8, lparg9, lparg10, lparg11);
 fail:
 	if (arg11 && lparg11) env->ReleaseIntArrayElements(arg11, lparg11, 0);
 	if (arg10 && lparg10) env->ReleaseIntArrayElements(arg10, lparg10, 0);
@@ -1641,15 +1641,15 @@
 	if (arg6 && lparg6) env->ReleaseCharArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3CI_3J_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3CI_3J_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jlongArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3CI_3J_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jlongArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJJ_3C_3CI_3J_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3CI_3J_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jlongArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3CI_3J_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jint arg5, jlongArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -1657,54 +1657,54 @@
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3CI_3J_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3CI_3J_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetLongArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jint, jlong *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jint, jlong *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, arg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseLongArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3CI_3J_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3CI_3J_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3C_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3C_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6)
+#ifndef NO_VtblCall__IJJ_3C_3C_3C_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3C_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jchar *lparg5=NULL;
 	jint *lparg6=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3C_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jchar *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jchar *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3C_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJJ_3C_3C_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jcharArray arg5, jintArray arg6, jintArray arg7)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -1712,74 +1712,74 @@
 	jint *lparg6=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetCharArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseCharArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJJ_3C_3C_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jintArray arg5)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5)
+#ifndef NO_VtblCall__IJJ_3C_3C_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
 	jlong *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3J_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3J_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
+#ifndef NO_VtblCall__IJJ_3C_3C_3J_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jcharArray arg6, jintArray arg7, jintArray arg8)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -1788,14 +1788,14 @@
 	jint *lparg7=NULL;
 	jint *lparg8=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3J_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3J_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetCharArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jlong *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jlong *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8);
 fail:
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
@@ -1803,15 +1803,15 @@
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3J_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3J_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jlongArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jlongArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9)
+#ifndef NO_VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jlongArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jcharArray arg3, jcharArray arg4, jlongArray arg5, jlongArray arg6, jcharArray arg7, jintArray arg8, jintArray arg9)
 {
 	jchar *lparg3=NULL;
 	jchar *lparg4=NULL;
@@ -1821,7 +1821,7 @@
 	jint *lparg8=NULL;
 	jint *lparg9=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetCharArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
@@ -1829,7 +1829,7 @@
 	if (arg7) if ((lparg7 = env->GetCharArrayElements(arg7, NULL)) == NULL) goto fail;
 	if (arg8) if ((lparg8 = env->GetIntArrayElements(arg8, NULL)) == NULL) goto fail;
 	if (arg9) if ((lparg9 = env->GetIntArrayElements(arg9, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jchar *, jchar *, jlong *, jlong *, jchar *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8, lparg9);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jchar *, jchar *, jlong *, jlong *, jchar *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3, lparg4, lparg5, lparg6, lparg7, lparg8, lparg9);
 fail:
 	if (arg9 && lparg9) env->ReleaseIntArrayElements(arg9, lparg9, 0);
 	if (arg8 && lparg8) env->ReleaseIntArrayElements(arg8, lparg8, 0);
@@ -1838,198 +1838,198 @@
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseCharArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jintArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jintArray arg3)
+#ifndef NO_VtblCall__IJJ_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jintArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jintArray arg3)
 {
 	jint *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3I_FUNC);
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jint *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jint *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IIJ_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlongArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IIJ_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlong arg2, jlongArray arg3)
+#ifndef NO_VtblCall__IJJ_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlongArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJJ_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlong arg2, jlongArray arg3)
 {
 	jlong *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IIJ_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJJ_3J_FUNC);
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong, jlong *))(*(jint **)arg1)[arg0])(arg1, arg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong, jlong *))(*(jlong **)arg1)[arg0])(arg1, arg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IIJ_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJJ_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jint arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jint arg3)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jint arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jint arg3)
 {
 	nsID _arg2, *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3);
 fail:
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jint arg3, jobject arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jint arg3, jobject arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jint arg3, jobject arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jint arg3, jobject arg4, jintArray arg5)
 {
 	nsID _arg2, *lparg2=NULL;
 	nsID _arg4, *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = getnsIDFields(env, arg4, &_arg4)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jint, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jint, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) setnsIDFields(env, arg4, lparg4);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlong arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlong arg3)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlong arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlong arg3)
 {
 	nsID _arg2, *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jlong))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jlong))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3);
 fail:
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlong arg3, jobject arg4, jlongArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlong arg3, jobject arg4, jlongArray arg5)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4, jlongArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlong arg3, jobject arg4, jlongArray arg5)
 {
 	nsID _arg2, *lparg2=NULL;
 	nsID _arg4, *lparg4=NULL;
 	jlong *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = getnsIDFields(env, arg4, &_arg4)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jlong, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jlong, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) setnsIDFields(env, arg4, lparg4);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jobject arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jobject arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jobject arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jobject arg3, jintArray arg4)
 {
 	nsID _arg2, *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jobject arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jobject arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jobject arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jobject arg3, jlongArray arg4)
 {
 	nsID _arg2, *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5)
 {
 	nsID _arg2, *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jbyte *, jbyte *, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jbyte *, jbyte *, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5);
 fail:
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jbyteArray arg6, jbyteArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jbyteArray arg6, jbyteArray arg7)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jbyteArray arg6, jbyteArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jbyteArray arg6, jbyteArray arg7)
 {
 	nsID _arg2, *lparg2=NULL;
 	jbyte *lparg3=NULL;
@@ -2037,51 +2037,51 @@
 	jbyte *lparg6=NULL;
 	jbyte *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetByteArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetByteArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jbyte *, jbyte *, jint, jbyte *, jbyte *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jbyte *, jbyte *, jint, jbyte *, jbyte *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseByteArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseByteArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5)
 {
 	nsID _arg2, *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jbyte *, jbyte *, jlong))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jbyte *, jbyte *, jlong))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5);
 fail:
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5, jbyteArray arg6, jbyteArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5, jbyteArray arg6, jbyteArray arg7)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5, jbyteArray arg6, jbyteArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jbyteArray arg3, jbyteArray arg4, jlong arg5, jbyteArray arg6, jbyteArray arg7)
 {
 	nsID _arg2, *lparg2=NULL;
 	jbyte *lparg3=NULL;
@@ -2089,939 +2089,939 @@
 	jbyte *lparg6=NULL;
 	jbyte *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetByteArrayElements(arg6, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetByteArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jbyte *, jbyte *, jlong, jbyte *, jbyte *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, lparg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jbyte *, jbyte *, jlong, jbyte *, jbyte *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, lparg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseByteArrayElements(arg7, lparg7, 0);
 	if (arg6 && lparg6) env->ReleaseByteArrayElements(arg6, lparg6, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jintArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jintArray arg3)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jintArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jintArray arg3)
 {
 	nsID _arg2, *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlongArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jobject arg2, jlongArray arg3)
+#ifndef NO_VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlongArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jobject arg2, jlongArray arg3)
 {
 	nsID _arg2, *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg2) if ((lparg2 = getnsIDFields(env, arg2, &_arg2)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) setnsIDFields(env, arg2, lparg2);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2)
+#ifndef NO_VtblCall__IJ_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2)
 {
 	jbyte *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3)
+#ifndef NO_VtblCall__IJ_3BI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3)
 {
 	jbyte *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BI_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3);
 fail:
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BII_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jint arg4, jintArray arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BII_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jint arg4, jintArray arg5, jintArray arg6)
+#ifndef NO_VtblCall__IJ_3BII_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BII_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jint arg4, jintArray arg5, jintArray arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BII_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jint arg4, jintArray arg5, jintArray arg6)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg5=NULL;
 	jint *lparg6=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BII_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BII_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, arg4, lparg5, lparg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, jint, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, arg4, lparg5, lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BII_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BII_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BIJ_3J_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BIJ_3J_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jlong arg4, jlongArray arg5, jintArray arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BIJ_3J_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jlong arg4, jlongArray arg5, jintArray arg6)
+#ifndef NO_VtblCall__IJ_3BIJ_3J_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BIJ_3J_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jlong arg4, jlongArray arg5, jintArray arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BIJ_3J_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jlong arg4, jlongArray arg5, jintArray arg6)
 {
 	jbyte *lparg2=NULL;
 	jlong *lparg5=NULL;
 	jint *lparg6=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BIJ_3J_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BIJ_3J_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
 	if (arg6) if ((lparg6 = env->GetIntArrayElements(arg6, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, jlong, jlong *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, arg4, lparg5, lparg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, jlong, jlong *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, arg4, lparg5, lparg6);
 fail:
 	if (arg6 && lparg6) env->ReleaseIntArrayElements(arg6, lparg6, 0);
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BIJ_3J_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BIJ_3J_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jobject arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jobject arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jobject arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jobject arg4, jintArray arg5)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg4, *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = getnsIDFields(env, arg4, &_arg4)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) setnsIDFields(env, arg4, lparg4);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3BI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jintArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BI_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BI_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jintArray arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jintArray arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJ_3BI_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jintArray arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jintArray arg4, jintArray arg5)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BI_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BI_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BI_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BI_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BI_3J_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3J_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jlongArray arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BI_3J_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jint arg3, jlongArray arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJ_3BI_3J_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3J_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jlongArray arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BI_3J_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jint arg3, jlongArray arg4, jintArray arg5)
 {
 	jbyte *lparg2=NULL;
 	jlong *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BI_3J_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BI_3J_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint, jlong *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint, jlong *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BI_3J_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BI_3J_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlong arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlong arg3)
+#ifndef NO_VtblCall__IJ_3BJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlong arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlong arg3)
 {
 	jbyte *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BJ_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jlong))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jlong))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3);
 fail:
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BJ_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlong arg3, jobject arg4, jlongArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlong arg3, jobject arg4, jlongArray arg5)
+#ifndef NO_VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlong arg3, jobject arg4, jlongArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlong arg3, jobject arg4, jlongArray arg5)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg4, *lparg4=NULL;
 	jlong *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = getnsIDFields(env, arg4, &_arg4)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetLongArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jlong, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jlong, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseLongArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) setnsIDFields(env, arg4, lparg4);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jint arg4)
+#ifndef NO_VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jint arg4)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, nsID *, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, nsID *, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jlong arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jlong arg4)
+#ifndef NO_VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jlong arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jlong arg4)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, nsID *, jlong))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, nsID *, jlong))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jintArray arg4)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, nsID *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, nsID *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jobject arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jobject arg3, jlongArray arg4)
 {
 	jbyte *lparg2=NULL;
 	nsID _arg3, *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = getnsIDFields(env, arg3, &_arg3)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, nsID *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, nsID *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) setnsIDFields(env, arg3, lparg3);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3B
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3)
+#ifndef NO_VtblCall__IJ_3B_3B
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3B_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3B_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3B_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3B_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3BI)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jint arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3BI)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jint arg4)
+#ifndef NO_VtblCall__IJ_3B_3BI
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3BI)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jint arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3BI)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jint arg4)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3BI_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3BI_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, arg4);
 fail:
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3BI_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3BI_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3B_3BII_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3BII_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jintArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3BII_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jintArray arg7)
+#ifndef NO_VtblCall__IJ_3B_3B_3BII_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3BII_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jintArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3BII_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jintArray arg7)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jint *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3B_3BII_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3B_3BII_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetIntArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *, jbyte *, jint, jint, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *, jbyte *, jint, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseIntArrayElements(arg7, lparg7, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3B_3BII_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3B_3BII_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3B_3BII_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3BII_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jlongArray arg7);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3BII_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jlongArray arg7)
+#ifndef NO_VtblCall__IJ_3B_3B_3BII_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3BII_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jlongArray arg7);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3BII_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jbyteArray arg4, jint arg5, jint arg6, jlongArray arg7)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jbyte *lparg4=NULL;
 	jlong *lparg7=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3B_3BII_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3B_3BII_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetByteArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg7) if ((lparg7 = env->GetLongArrayElements(arg7, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *, jbyte *, jint, jint, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, arg6, lparg7);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *, jbyte *, jint, jint, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, arg5, arg6, lparg7);
 fail:
 	if (arg7 && lparg7) env->ReleaseLongArrayElements(arg7, lparg7, 0);
 	if (arg4 && lparg4) env->ReleaseByteArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3B_3BII_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3B_3BII_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3B_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3B_3B_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jintArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3B_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3B_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3B_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3B_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3B_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3B_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jbyteArray arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3B_3B_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3B_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jbyteArray arg3, jlongArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jbyte *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3B_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3B_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetByteArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jbyte *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jbyte *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseByteArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3B_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3B_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3)
+#ifndef NO_VtblCall__IJ_3B_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3B_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3, jintArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3I_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3I_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jintArray arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3B_3I_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3I_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jintArray arg3, jlongArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jint *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3I_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3I_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jint *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jint *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3I_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3I_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlongArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlongArray arg3)
+#ifndef NO_VtblCall__IJ_3B_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlongArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlongArray arg3)
 {
 	jbyte *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3B_3J_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3J_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlongArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3B_3J_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jbyteArray arg2, jlongArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3B_3J_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3J_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlongArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3B_3J_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jbyteArray arg2, jlongArray arg3, jintArray arg4)
 {
 	jbyte *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3B_3J_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3B_3J_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetByteArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jbyte *, jlong *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jbyte *, jlong *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseByteArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3B_3J_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3B_3J_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2)
+#ifndef NO_VtblCall__IJ_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2)
 {
 	jchar *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3C_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3CIIII
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CIIII)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jint arg4, jint arg5, jint arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CIIII)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jint arg4, jint arg5, jint arg6)
+#ifndef NO_VtblCall__IJ_3CIIII
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CIIII)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jint arg4, jint arg5, jint arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CIIII)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jint arg4, jint arg5, jint arg6)
 {
 	jchar *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3CIIII_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3CIIII_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *, jint, jint, jint, jint))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, arg4, arg5, arg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *, jint, jint, jint, jint))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, arg4, arg5, arg6);
 fail:
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3CIIII_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3CIIII_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3CIJJJ
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CIJJJ)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CIJJJ)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6)
+#ifndef NO_VtblCall__IJ_3CIJJJ
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CIJJJ)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CIJJJ)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jlong arg4, jlong arg5, jlong arg6)
 {
 	jchar *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3CIJJJ_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3CIJJJ_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *, jint, jlong, jlong, jlong))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, arg4, arg5, arg6);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *, jint, jlong, jlong, jlong))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, arg4, arg5, arg6);
 fail:
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3CIJJJ_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3CIJJJ_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3CI_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CI_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CI_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jint arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3CI_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CI_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CI_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jint arg3, jintArray arg4)
 {
 	jchar *lparg2=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3CI_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3CI_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *, jint, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *, jint, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3CI_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3CI_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3CJ_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CJ_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jlong arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3CJ_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jlong arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3CJ_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CJ_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jlong arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3CJ_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jlong arg3, jlongArray arg4)
 {
 	jchar *lparg2=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3CJ_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3CJ_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *, jlong, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *, jlong, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, arg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3CJ_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3CJ_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3C_3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3C_3C)(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jcharArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3C_3C)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jcharArray arg2, jcharArray arg3)
+#ifndef NO_VtblCall__IJ_3C_3C
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3C_3C)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jcharArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3C_3C)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jcharArray arg2, jcharArray arg3)
 {
 	jchar *lparg2=NULL;
 	jchar *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3C_3C_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3C_3C_FUNC);
 	if (arg2) if ((lparg2 = env->GetCharArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetCharArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jchar *, jchar *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jchar *, jchar *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseCharArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseCharArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3C_3C_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3C_3C_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3F
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3F)(JNIEnv *env, jclass that, jint arg0, jint arg1, jfloatArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3F)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jfloatArray arg2)
+#ifndef NO_VtblCall__IJ_3F
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3F)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jfloatArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3F)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jfloatArray arg2)
 {
 	jfloat *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3F_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3F_FUNC);
 	if (arg2) if ((lparg2 = env->GetFloatArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jfloat *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jfloat *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseFloatArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3F_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3F_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2)
+#ifndef NO_VtblCall__IJ_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2)
 {
 	jint *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3)
+#ifndef NO_VtblCall__IJ_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3)
 {
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3I_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3, jintArray arg4)
 {
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3I_3I_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3I_3I_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5)
+#ifndef NO_VtblCall__IJ_3I_3I_3I_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I_3I_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3I_3I_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jintArray arg3, jintArray arg4, jintArray arg5)
 {
 	jint *lparg2=NULL;
 	jint *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint *lparg5=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3I_3I_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetIntArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
 	if (arg5) if ((lparg5 = env->GetIntArrayElements(arg5, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jint *, jint *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, lparg5);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jint *, jint *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4, lparg5);
 fail:
 	if (arg5 && lparg5) env->ReleaseIntArrayElements(arg5, lparg5, 0);
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseIntArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3I_3I_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3I_3I_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3)
+#ifndef NO_VtblCall__IJ_3I_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3)
 {
 	jint *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3);
 fail:
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3J_3I
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J_3I)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3, jintArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J_3I)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3, jintArray arg4)
+#ifndef NO_VtblCall__IJ_3I_3J_3I
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J_3I)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3, jintArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J_3I)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3, jintArray arg4)
 {
 	jint *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jint *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3J_3I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3J_3I_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetIntArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jlong *, jint *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jlong *, jint *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseIntArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3J_3I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3J_3I_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3I_3J_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3I_3J_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jintArray arg2, jlongArray arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3I_3J_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3I_3J_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jintArray arg2, jlongArray arg3, jlongArray arg4)
 {
 	jint *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3I_3J_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3I_3J_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetIntArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jint *, jlong *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jint *, jlong *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseIntArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3I_3J_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3I_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlongArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlongArray arg2)
+#ifndef NO_VtblCall__IJ_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlongArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlongArray arg2)
 {
 	jlong *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetLongArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseLongArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3J_3J_3J
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3J_3J_3J)(JNIEnv *env, jclass that, jint arg0, jint arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3J_3J_3J)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
+#ifndef NO_VtblCall__IJ_3J_3J_3J
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3J_3J_3J)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3J_3J_3J)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jlongArray arg2, jlongArray arg3, jlongArray arg4)
 {
 	jlong *lparg2=NULL;
 	jlong *lparg3=NULL;
 	jlong *lparg4=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3J_3J_3J_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3J_3J_3J_FUNC);
 	if (arg2) if ((lparg2 = env->GetLongArrayElements(arg2, NULL)) == NULL) goto fail;
 	if (arg3) if ((lparg3 = env->GetLongArrayElements(arg3, NULL)) == NULL) goto fail;
 	if (arg4) if ((lparg4 = env->GetLongArrayElements(arg4, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jlong *, jlong *, jlong *))(*(jint **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jlong *, jlong *, jlong *))(*(jlong **)arg1)[arg0])(arg1, lparg2, lparg3, lparg4);
 fail:
 	if (arg4 && lparg4) env->ReleaseLongArrayElements(arg4, lparg4, 0);
 	if (arg3 && lparg3) env->ReleaseLongArrayElements(arg3, lparg3, 0);
 	if (arg2 && lparg2) env->ReleaseLongArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3J_3J_3J_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3J_3J_3J_FUNC);
 	return rc;
 }
 #endif
 
-#ifndef NO_VtblCall__II_3S
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3S)(JNIEnv *env, jclass that, jint arg0, jint arg1, jshortArray arg2);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__II_3S)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1, jshortArray arg2)
+#ifndef NO_VtblCall__IJ_3S
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3S)(JNIEnv *env, jclass that, jint arg0, jlong arg1, jshortArray arg2);
+JNIEXPORT jint JNICALL XPCOM_NATIVE(VtblCall__IJ_3S)
+	(JNIEnv *env, jclass that, jint arg0, jlong arg1, jshortArray arg2)
 {
 	jshort *lparg2=NULL;
 	jint rc = 0;
-	XPCOM_NATIVE_ENTER(env, that, VtblCall__II_3S_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, VtblCall__IJ_3S_FUNC);
 	if (arg2) if ((lparg2 = env->GetShortArrayElements(arg2, NULL)) == NULL) goto fail;
-	rc = (jint)((jint (STDMETHODCALLTYPE *)(jint, jshort *))(*(jint **)arg1)[arg0])(arg1, lparg2);
+	rc = (jint)((jint (STDMETHODCALLTYPE *)(jlong, jshort *))(*(jlong **)arg1)[arg0])(arg1, lparg2);
 fail:
 	if (arg2 && lparg2) env->ReleaseShortArrayElements(arg2, lparg2, 0);
-	XPCOM_NATIVE_EXIT(env, that, VtblCall__II_3S_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, VtblCall__IJ_3S_FUNC);
 	return rc;
 }
 #endif
@@ -3056,40 +3056,40 @@
 }
 #endif
 
-#ifndef NO_memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I
-extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2);
-JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I)
-	(JNIEnv *env, jclass that, jint arg0, jobject arg1, jint arg2)
+#ifndef NO_memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I
+extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I)(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2);
+JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I)
+	(JNIEnv *env, jclass that, jlong arg0, jobject arg1, jint arg2)
 {
 	nsID _arg1, *lparg1=NULL;
-	XPCOM_NATIVE_ENTER(env, that, memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 	if (arg1) if ((lparg1 = getnsIDFields(env, arg1, &_arg1)) == NULL) goto fail;
 	memmove((void *)arg0, (const void *)lparg1, (size_t)arg2);
 fail:
 	if (arg1 && lparg1) setnsIDFields(env, arg1, lparg1);
-	XPCOM_NATIVE_EXIT(env, that, memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC);
 }
 #endif
 
-#ifndef NO_memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II
-extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II)(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2);
-JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2)
+#ifndef NO_memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI
+extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI)(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jint arg2);
+JNIEXPORT void JNICALL XPCOM_NATIVE(memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI)
+	(JNIEnv *env, jclass that, jobject arg0, jlong arg1, jint arg2)
 {
 	nsID _arg0, *lparg0=NULL;
-	XPCOM_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II_FUNC);
+	XPCOM_NATIVE_ENTER(env, that, memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI_FUNC);
 	if (arg0) if ((lparg0 = getnsIDFields(env, arg0, &_arg0)) == NULL) goto fail;
 	memmove((void *)lparg0, (const void *)arg1, (size_t)arg2);
 fail:
 	if (arg0 && lparg0) setnsIDFields(env, arg0, lparg0);
-	XPCOM_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II_FUNC);
+	XPCOM_NATIVE_EXIT(env, that, memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI_FUNC);
 }
 #endif
 
 #ifndef NO_nsEmbedCString_1Length
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1Length)(JNIEnv *env, jclass that, jint arg0);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1Length)(JNIEnv *env, jclass that, jlong arg0);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1Length)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1Length_FUNC);
@@ -3100,9 +3100,9 @@
 #endif
 
 #ifndef NO_nsEmbedCString_1delete
-extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedCString_1delete)(JNIEnv *env, jclass that, jint arg0);
+extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedCString_1delete)(JNIEnv *env, jclass that, jlong arg0);
 JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedCString_1delete)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1delete_FUNC);
 	delete (nsEmbedCString *)arg0;
@@ -3111,54 +3111,54 @@
 #endif
 
 #ifndef NO_nsEmbedCString_1get
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1get)(JNIEnv *env, jclass that, jint arg0);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1get)
-	(JNIEnv *env, jclass that, jint arg0)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1get)(JNIEnv *env, jclass that, jlong arg0);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1get)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1get_FUNC);
-	rc = (jint)((nsEmbedCString *)arg0)->get();
+	rc = (jlong)((nsEmbedCString *)arg0)->get();
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedCString_1get_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_nsEmbedCString_1new__
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new__)(JNIEnv *env, jclass that);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new__)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new__)(JNIEnv *env, jclass that);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new__)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1new___FUNC);
-	rc = (jint)new nsEmbedCString();
+	rc = (jlong)new nsEmbedCString();
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedCString_1new___FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_nsEmbedCString_1new__II
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new__II)(JNIEnv *env, jclass that, jint arg0, jint arg1);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new__II)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new__II)(JNIEnv *env, jclass that, jint arg0, jint arg1);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new__II)
 	(JNIEnv *env, jclass that, jint arg0, jint arg1)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1new__II_FUNC);
-	rc = (jint)new nsEmbedCString((const char *)arg0, arg1);
+	rc = (jlong)new nsEmbedCString((const char *)arg0, arg1);
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedCString_1new__II_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_nsEmbedCString_1new___3BI
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new___3BI)(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedCString_1new___3BI)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new___3BI)(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedCString_1new___3BI)
 	(JNIEnv *env, jclass that, jbyteArray arg0, jint arg1)
 {
 	jbyte *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedCString_1new___3BI_FUNC);
 	if (arg0) if ((lparg0 = env->GetByteArrayElements(arg0, NULL)) == NULL) goto fail;
-	rc = (jint)new nsEmbedCString((const char *)lparg0, arg1);
+	rc = (jlong)new nsEmbedCString((const char *)lparg0, arg1);
 fail:
 	if (arg0 && lparg0) env->ReleaseByteArrayElements(arg0, lparg0, 0);
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedCString_1new___3BI_FUNC);
@@ -3167,9 +3167,9 @@
 #endif
 
 #ifndef NO_nsEmbedString_1Length
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1Length)(JNIEnv *env, jclass that, jint arg0);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1Length)(JNIEnv *env, jclass that, jlong arg0);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1Length)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedString_1Length_FUNC);
@@ -3180,9 +3180,9 @@
 #endif
 
 #ifndef NO_nsEmbedString_1delete
-extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedString_1delete)(JNIEnv *env, jclass that, jint arg0);
+extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedString_1delete)(JNIEnv *env, jclass that, jlong arg0);
 JNIEXPORT void JNICALL XPCOM_NATIVE(nsEmbedString_1delete)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedString_1delete_FUNC);
 	delete (nsEmbedString *)arg0;
@@ -3191,41 +3191,41 @@
 #endif
 
 #ifndef NO_nsEmbedString_1get
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1get)(JNIEnv *env, jclass that, jint arg0);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1get)
-	(JNIEnv *env, jclass that, jint arg0)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1get)(JNIEnv *env, jclass that, jlong arg0);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1get)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedString_1get_FUNC);
-	rc = (jint)((nsEmbedString *)arg0)->get();
+	rc = (jlong)((nsEmbedString *)arg0)->get();
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedString_1get_FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_nsEmbedString_1new__
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1new__)(JNIEnv *env, jclass that);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1new__)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1new__)(JNIEnv *env, jclass that);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1new__)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedString_1new___FUNC);
-	rc = (jint)new nsEmbedString();
+	rc = (jlong)new nsEmbedString();
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedString_1new___FUNC);
 	return rc;
 }
 #endif
 
 #ifndef NO_nsEmbedString_1new___3C
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1new___3C)(JNIEnv *env, jclass that, jcharArray arg0);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsEmbedString_1new___3C)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1new___3C)(JNIEnv *env, jclass that, jcharArray arg0);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsEmbedString_1new___3C)
 	(JNIEnv *env, jclass that, jcharArray arg0)
 {
 	jchar *lparg0=NULL;
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsEmbedString_1new___3C_FUNC);
 	if (arg0) if ((lparg0 = env->GetCharArrayElements(arg0, NULL)) == NULL) goto fail;
-	rc = (jint)new nsEmbedString((PRUnichar *)lparg0);
+	rc = (jlong)new nsEmbedString((PRUnichar *)lparg0);
 fail:
 	if (arg0 && lparg0) env->ReleaseCharArrayElements(arg0, lparg0, 0);
 	XPCOM_NATIVE_EXIT(env, that, nsEmbedString_1new___3C_FUNC);
@@ -3234,9 +3234,9 @@
 #endif
 
 #ifndef NO_nsID_1Equals
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsID_1Equals)(JNIEnv *env, jclass that, jint arg0, jint arg1);
+extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsID_1Equals)(JNIEnv *env, jclass that, jlong arg0, jlong arg1);
 JNIEXPORT jint JNICALL XPCOM_NATIVE(nsID_1Equals)
-	(JNIEnv *env, jclass that, jint arg0, jint arg1)
+	(JNIEnv *env, jclass that, jlong arg0, jlong arg1)
 {
 	jint rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsID_1Equals_FUNC);
@@ -3247,9 +3247,9 @@
 #endif
 
 #ifndef NO_nsID_1delete
-extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsID_1delete)(JNIEnv *env, jclass that, jint arg0);
+extern "C" JNIEXPORT void JNICALL XPCOM_NATIVE(nsID_1delete)(JNIEnv *env, jclass that, jlong arg0);
 JNIEXPORT void JNICALL XPCOM_NATIVE(nsID_1delete)
-	(JNIEnv *env, jclass that, jint arg0)
+	(JNIEnv *env, jclass that, jlong arg0)
 {
 	XPCOM_NATIVE_ENTER(env, that, nsID_1delete_FUNC);
 	delete (nsID *)arg0;
@@ -3258,13 +3258,13 @@
 #endif
 
 #ifndef NO_nsID_1new
-extern "C" JNIEXPORT jint JNICALL XPCOM_NATIVE(nsID_1new)(JNIEnv *env, jclass that);
-JNIEXPORT jint JNICALL XPCOM_NATIVE(nsID_1new)
+extern "C" JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsID_1new)(JNIEnv *env, jclass that);
+JNIEXPORT jlong JNICALL XPCOM_NATIVE(nsID_1new)
 	(JNIEnv *env, jclass that)
 {
-	jint rc = 0;
+	jlong rc = 0;
 	XPCOM_NATIVE_ENTER(env, that, nsID_1new_FUNC);
-	rc = (jint)new nsID();
+	rc = (jlong)new nsID();
 	XPCOM_NATIVE_EXIT(env, that, nsID_1new_FUNC);
 	return rc;
 }
diff -ur x86/xpcominit.cpp x86_64/xpcominit.cpp
--- x86/xpcominit.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcominit.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -29,9 +29,9 @@
 #endif
 
 #ifndef NO_GRE_1GetGREPathWithProperties
-extern "C" JNIEXPORT jint JNICALL XPCOMInit_NATIVE(GRE_1GetGREPathWithProperties)(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5);
+extern "C" JNIEXPORT jint JNICALL XPCOMInit_NATIVE(GRE_1GetGREPathWithProperties)(JNIEnv *env, jclass that, jobject arg0, jint arg1, jlong arg2, jint arg3, jlong arg4, jint arg5);
 JNIEXPORT jint JNICALL XPCOMInit_NATIVE(GRE_1GetGREPathWithProperties)
-	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jint arg2, jint arg3, jint arg4, jint arg5)
+	(JNIEnv *env, jclass that, jobject arg0, jint arg1, jlong arg2, jint arg3, jlong arg4, jint arg5)
 {
 	GREVersionRange _arg0, *lparg0=NULL;
 	jint rc = 0;
diff -ur x86/xpcominit_stats.cpp x86_64/xpcominit_stats.cpp
--- x86/xpcominit_stats.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcominit_stats.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/xpcominit_stats.h x86_64/xpcominit_stats.h
--- x86/xpcominit_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcominit_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/xpcominit_structs.cpp x86_64/xpcominit_structs.cpp
--- x86/xpcominit_structs.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcominit_structs.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
@@ -25,9 +25,9 @@
 {
 	if (GREVersionRangeFc.cached) return;
 	GREVersionRangeFc.clazz = env->GetObjectClass(lpObject);
-	GREVersionRangeFc.lower = env->GetFieldID(GREVersionRangeFc.clazz, "lower", "I");
+	GREVersionRangeFc.lower = env->GetFieldID(GREVersionRangeFc.clazz, "lower", "J");
 	GREVersionRangeFc.lowerInclusive = env->GetFieldID(GREVersionRangeFc.clazz, "lowerInclusive", "Z");
-	GREVersionRangeFc.upper = env->GetFieldID(GREVersionRangeFc.clazz, "upper", "I");
+	GREVersionRangeFc.upper = env->GetFieldID(GREVersionRangeFc.clazz, "upper", "J");
 	GREVersionRangeFc.upperInclusive = env->GetFieldID(GREVersionRangeFc.clazz, "upperInclusive", "Z");
 	GREVersionRangeFc.cached = 1;
 }
@@ -35,9 +35,9 @@
 GREVersionRange *getGREVersionRangeFields(JNIEnv *env, jobject lpObject, GREVersionRange *lpStruct)
 {
 	if (!GREVersionRangeFc.cached) cacheGREVersionRangeFields(env, lpObject);
-	lpStruct->lower = (const char *)env->GetIntField(lpObject, GREVersionRangeFc.lower);
+	lpStruct->lower = (const char *)env->GetLongField(lpObject, GREVersionRangeFc.lower);
 	lpStruct->lowerInclusive = env->GetBooleanField(lpObject, GREVersionRangeFc.lowerInclusive);
-	lpStruct->upper = (const char *)env->GetIntField(lpObject, GREVersionRangeFc.upper);
+	lpStruct->upper = (const char *)env->GetLongField(lpObject, GREVersionRangeFc.upper);
 	lpStruct->upperInclusive = env->GetBooleanField(lpObject, GREVersionRangeFc.upperInclusive);
 	return lpStruct;
 }
@@ -45,9 +45,9 @@
 void setGREVersionRangeFields(JNIEnv *env, jobject lpObject, GREVersionRange *lpStruct)
 {
 	if (!GREVersionRangeFc.cached) cacheGREVersionRangeFields(env, lpObject);
-	env->SetIntField(lpObject, GREVersionRangeFc.lower, (jint)lpStruct->lower);
+	env->SetLongField(lpObject, GREVersionRangeFc.lower, (jlong)lpStruct->lower);
 	env->SetBooleanField(lpObject, GREVersionRangeFc.lowerInclusive, (jboolean)lpStruct->lowerInclusive);
-	env->SetIntField(lpObject, GREVersionRangeFc.upper, (jint)lpStruct->upper);
+	env->SetLongField(lpObject, GREVersionRangeFc.upper, (jlong)lpStruct->upper);
 	env->SetBooleanField(lpObject, GREVersionRangeFc.upperInclusive, (jboolean)lpStruct->upperInclusive);
 }
 #endif
diff -ur x86/xpcominit_structs.h x86_64/xpcominit_structs.h
--- x86/xpcominit_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcominit_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/xpcom_stats.cpp x86_64/xpcom_stats.cpp
--- x86/xpcom_stats.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcom_stats.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -22,156 +22,156 @@
 	"NS_1GetServiceManager",
 	"NS_1InitXPCOM2",
 	"NS_1NewLocalFile",
-	"VtblCall__II",
-	"VtblCall__IIF",
-	"VtblCall__III",
-	"VtblCall__IIII",
-	"VtblCall__IIIII",
-	"VtblCall__IIIIII",
-	"VtblCall__IIIIIII",
-	"VtblCall__IIIIIIII",
-	"VtblCall__IIIIIIIIIIII",
-	"VtblCall__IIIIIIIIIIIIIIISI",
-	"VtblCall__IIIIIIII_3C_3I_3I",
-	"VtblCall__IIIIIIJII",
-	"VtblCall__IIIIII_3CIIIII_3I_3I",
-	"VtblCall__IIIIII_3C_3BIIIII_3I_3I",
-	"VtblCall__IIIIII_3C_3I_3I",
-	"VtblCall__IIIIII_3I_3I",
-	"VtblCall__IIIII_3C",
-	"VtblCall__IIIII_3I",
-	"VtblCall__IIIIJJJJ",
-	"VtblCall__IIII_3B",
-	"VtblCall__IIII_3C",
-	"VtblCall__IIII_3CIJI",
-	"VtblCall__IIII_3CJJJ",
-	"VtblCall__IIII_3C_3CI_3I",
-	"VtblCall__IIII_3I",
-	"VtblCall__IIII_3J",
-	"VtblCall__IIIJJ",
-	"VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2",
-	"VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__III_3B",
-	"VtblCall__III_3BI",
-	"VtblCall__III_3BI_3I",
-	"VtblCall__III_3B_3B_3BI_3I",
-	"VtblCall__III_3B_3C",
-	"VtblCall__III_3B_3I",
-	"VtblCall__III_3C",
-	"VtblCall__III_3CI",
-	"VtblCall__III_3C_3C",
-	"VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I",
-	"VtblCall__III_3C_3CI_3I_3I_3I",
-	"VtblCall__III_3C_3C_3C_3I",
-	"VtblCall__III_3C_3C_3C_3I_3I",
-	"VtblCall__III_3C_3C_3I",
-	"VtblCall__III_3C_3C_3I_3C_3I_3I",
-	"VtblCall__III_3C_3C_3I_3I_3C_3I_3I",
-	"VtblCall__III_3I",
-	"VtblCall__III_3I_3I_3I_3I",
-	"VtblCall__IIJ",
-	"VtblCall__IIJI",
-	"VtblCall__IIJIIJIIIIII",
-	"VtblCall__IIJIIJIIIIIIIIISJ",
-	"VtblCall__IIJIIJ_3I_3J",
-	"VtblCall__IIJI_3J",
-	"VtblCall__IIJJ",
-	"VtblCall__IIJJI",
-	"VtblCall__IIJJII",
-	"VtblCall__IIJJIIII",
-	"VtblCall__IIJJIJ_3C_3I_3I",
-	"VtblCall__IIJJI_3C",
-	"VtblCall__IIJJI_3I",
-	"VtblCall__IIJJJ",
-	"VtblCall__IIJJJI",
-	"VtblCall__IIJJJI_3CJJIJI_3J_3J",
-	"VtblCall__IIJJJI_3C_3BJJIJI_3J_3J",
-	"VtblCall__IIJJJJIJ_3C_3I_3J",
-	"VtblCall__IIJJJJJ",
-	"VtblCall__IIJJJJJJ",
-	"VtblCall__IIJJJJJJJ",
-	"VtblCall__IIJJ_3B",
-	"VtblCall__IIJJ_3CIJI",
-	"VtblCall__IIJJ_3CJJJ",
-	"VtblCall__IIJJ_3C_3CI_3J",
-	"VtblCall__IIJJ_3I",
-	"VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2",
-	"VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__IIJ_3B",
-	"VtblCall__IIJ_3BI",
-	"VtblCall__IIJ_3BJ_3J",
-	"VtblCall__IIJ_3B_3B_3BJ_3J",
-	"VtblCall__IIJ_3B_3C",
-	"VtblCall__IIJ_3CI",
-	"VtblCall__IIJ_3C_3C",
-	"VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I",
-	"VtblCall__IIJ_3C_3CI_3J_3I_3I",
-	"VtblCall__IIJ_3C_3C_3C_3I",
-	"VtblCall__IIJ_3C_3C_3C_3I_3I",
-	"VtblCall__IIJ_3C_3C_3I",
-	"VtblCall__IIJ_3C_3C_3J",
-	"VtblCall__IIJ_3C_3C_3J_3C_3I_3I",
-	"VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I",
-	"VtblCall__IIJ_3I",
-	"VtblCall__IIJ_3J",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__II_3B",
-	"VtblCall__II_3BI",
-	"VtblCall__II_3BII_3I_3I",
-	"VtblCall__II_3BIJ_3J_3I",
-	"VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__II_3BI_3I",
-	"VtblCall__II_3BI_3I_3I",
-	"VtblCall__II_3BI_3J_3I",
-	"VtblCall__II_3BJ",
-	"VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I",
-	"VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J",
-	"VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I",
-	"VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
-	"VtblCall__II_3B_3B",
-	"VtblCall__II_3B_3BI",
-	"VtblCall__II_3B_3B_3BII_3I",
-	"VtblCall__II_3B_3B_3BII_3J",
-	"VtblCall__II_3B_3B_3I",
-	"VtblCall__II_3B_3B_3J",
-	"VtblCall__II_3B_3I",
-	"VtblCall__II_3B_3I_3I",
-	"VtblCall__II_3B_3I_3J",
-	"VtblCall__II_3B_3J",
-	"VtblCall__II_3B_3J_3I",
-	"VtblCall__II_3C",
-	"VtblCall__II_3CIIII",
-	"VtblCall__II_3CIJJJ",
-	"VtblCall__II_3CI_3I",
-	"VtblCall__II_3CJ_3J",
-	"VtblCall__II_3C_3C",
-	"VtblCall__II_3F",
-	"VtblCall__II_3I",
-	"VtblCall__II_3I_3I",
-	"VtblCall__II_3I_3I_3I",
-	"VtblCall__II_3I_3I_3I_3I",
-	"VtblCall__II_3I_3J",
-	"VtblCall__II_3I_3J_3I",
-	"VtblCall__II_3I_3J_3J",
-	"VtblCall__II_3J",
-	"VtblCall__II_3J_3J_3J",
-	"VtblCall__II_3S",
+	"VtblCall__IJ",
+	"VtblCall__IJF",
+	"VtblCall__IJI",
+	"VtblCall__IJII",
+	"VtblCall__IJIII",
+	"VtblCall__IJIIII",
+	"VtblCall__IJIIIII",
+	"VtblCall__IJIIIIII",
+	"VtblCall__IJIIIIIIIIII",
+	"VtblCall__IJIIIIIIIIIIIIISI",
+	"VtblCall__IJIIIIII_3C_3I_3I",
+	"VtblCall__IJIIIIJII",
+	"VtblCall__IJIIII_3CIIIII_3I_3I",
+	"VtblCall__IJIIII_3C_3BIIIII_3I_3I",
+	"VtblCall__IJIIII_3C_3I_3I",
+	"VtblCall__IJIIII_3I_3I",
+	"VtblCall__IJIII_3C",
+	"VtblCall__IJIII_3I",
+	"VtblCall__IJIIJJJJ",
+	"VtblCall__IJII_3B",
+	"VtblCall__IJII_3C",
+	"VtblCall__IJII_3CIJI",
+	"VtblCall__IJII_3CJJJ",
+	"VtblCall__IJII_3C_3CI_3I",
+	"VtblCall__IJII_3I",
+	"VtblCall__IJII_3J",
+	"VtblCall__IJIJJ",
+	"VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2",
+	"VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJI_3B",
+	"VtblCall__IJI_3BI",
+	"VtblCall__IJI_3BI_3I",
+	"VtblCall__IJI_3B_3B_3BI_3I",
+	"VtblCall__IJI_3B_3C",
+	"VtblCall__IJI_3B_3I",
+	"VtblCall__IJI_3C",
+	"VtblCall__IJI_3CI",
+	"VtblCall__IJI_3C_3C",
+	"VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I",
+	"VtblCall__IJI_3C_3CI_3I_3I_3I",
+	"VtblCall__IJI_3C_3C_3C_3I",
+	"VtblCall__IJI_3C_3C_3C_3I_3I",
+	"VtblCall__IJI_3C_3C_3I",
+	"VtblCall__IJI_3C_3C_3I_3C_3I_3I",
+	"VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I",
+	"VtblCall__IJI_3I",
+	"VtblCall__IJI_3I_3I_3I_3I",
+	"VtblCall__IJJ",
+	"VtblCall__IJJI",
+	"VtblCall__IJJIIJIIIIII",
+	"VtblCall__IJJIIJIIIIIIIIISJ",
+	"VtblCall__IJJIIJ_3I_3J",
+	"VtblCall__IJJI_3J",
+	"VtblCall__IJJJ",
+	"VtblCall__IJJJI",
+	"VtblCall__IJJJII",
+	"VtblCall__IJJJIIII",
+	"VtblCall__IJJJIJ_3C_3I_3I",
+	"VtblCall__IJJJI_3C",
+	"VtblCall__IJJJI_3I",
+	"VtblCall__IJJJJ",
+	"VtblCall__IJJJJI",
+	"VtblCall__IJJJJI_3CJJIJI_3J_3J",
+	"VtblCall__IJJJJI_3C_3BJJIJI_3J_3J",
+	"VtblCall__IJJJJJIJ_3C_3I_3J",
+	"VtblCall__IJJJJJJ",
+	"VtblCall__IJJJJJJJ",
+	"VtblCall__IJJJJJJJJ",
+	"VtblCall__IJJJ_3B",
+	"VtblCall__IJJJ_3CIJI",
+	"VtblCall__IJJJ_3CJJJ",
+	"VtblCall__IJJJ_3C_3CI_3J",
+	"VtblCall__IJJJ_3I",
+	"VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2",
+	"VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJJ_3B",
+	"VtblCall__IJJ_3BI",
+	"VtblCall__IJJ_3BJ_3J",
+	"VtblCall__IJJ_3B_3B_3BJ_3J",
+	"VtblCall__IJJ_3B_3C",
+	"VtblCall__IJJ_3CI",
+	"VtblCall__IJJ_3C_3C",
+	"VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I",
+	"VtblCall__IJJ_3C_3CI_3J_3I_3I",
+	"VtblCall__IJJ_3C_3C_3C_3I",
+	"VtblCall__IJJ_3C_3C_3C_3I_3I",
+	"VtblCall__IJJ_3C_3C_3I",
+	"VtblCall__IJJ_3C_3C_3J",
+	"VtblCall__IJJ_3C_3C_3J_3C_3I_3I",
+	"VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I",
+	"VtblCall__IJJ_3I",
+	"VtblCall__IJJ_3J",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJ_3B",
+	"VtblCall__IJ_3BI",
+	"VtblCall__IJ_3BII_3I_3I",
+	"VtblCall__IJ_3BIJ_3J_3I",
+	"VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJ_3BI_3I",
+	"VtblCall__IJ_3BI_3I_3I",
+	"VtblCall__IJ_3BI_3J_3I",
+	"VtblCall__IJ_3BJ",
+	"VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I",
+	"VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J",
+	"VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I",
+	"VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J",
+	"VtblCall__IJ_3B_3B",
+	"VtblCall__IJ_3B_3BI",
+	"VtblCall__IJ_3B_3B_3BII_3I",
+	"VtblCall__IJ_3B_3B_3BII_3J",
+	"VtblCall__IJ_3B_3B_3I",
+	"VtblCall__IJ_3B_3B_3J",
+	"VtblCall__IJ_3B_3I",
+	"VtblCall__IJ_3B_3I_3I",
+	"VtblCall__IJ_3B_3I_3J",
+	"VtblCall__IJ_3B_3J",
+	"VtblCall__IJ_3B_3J_3I",
+	"VtblCall__IJ_3C",
+	"VtblCall__IJ_3CIIII",
+	"VtblCall__IJ_3CIJJJ",
+	"VtblCall__IJ_3CI_3I",
+	"VtblCall__IJ_3CJ_3J",
+	"VtblCall__IJ_3C_3C",
+	"VtblCall__IJ_3F",
+	"VtblCall__IJ_3I",
+	"VtblCall__IJ_3I_3I",
+	"VtblCall__IJ_3I_3I_3I",
+	"VtblCall__IJ_3I_3I_3I_3I",
+	"VtblCall__IJ_3I_3J",
+	"VtblCall__IJ_3I_3J_3I",
+	"VtblCall__IJ_3I_3J_3J",
+	"VtblCall__IJ_3J",
+	"VtblCall__IJ_3J_3J_3J",
+	"VtblCall__IJ_3S",
 	"XPCOMGlueShutdown",
 	"XPCOMGlueStartup",
-	"memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I",
-	"memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II",
+	"memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I",
+	"memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI",
 	"nsEmbedCString_1Length",
 	"nsEmbedCString_1delete",
 	"nsEmbedCString_1get",
diff -ur x86/xpcom_stats.h x86_64/xpcom_stats.h
--- x86/xpcom_stats.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcom_stats.h	2009-02-11 17:53:48.000000000 -0500
@@ -30,156 +30,156 @@
 	NS_1GetServiceManager_FUNC,
 	NS_1InitXPCOM2_FUNC,
 	NS_1NewLocalFile_FUNC,
-	VtblCall__II_FUNC,
-	VtblCall__IIF_FUNC,
-	VtblCall__III_FUNC,
-	VtblCall__IIII_FUNC,
-	VtblCall__IIIII_FUNC,
-	VtblCall__IIIIII_FUNC,
-	VtblCall__IIIIIII_FUNC,
-	VtblCall__IIIIIIII_FUNC,
-	VtblCall__IIIIIIIIIIII_FUNC,
-	VtblCall__IIIIIIIIIIIIIIISI_FUNC,
-	VtblCall__IIIIIIII_3C_3I_3I_FUNC,
-	VtblCall__IIIIIIJII_FUNC,
-	VtblCall__IIIIII_3CIIIII_3I_3I_FUNC,
-	VtblCall__IIIIII_3C_3BIIIII_3I_3I_FUNC,
-	VtblCall__IIIIII_3C_3I_3I_FUNC,
-	VtblCall__IIIIII_3I_3I_FUNC,
-	VtblCall__IIIII_3C_FUNC,
-	VtblCall__IIIII_3I_FUNC,
-	VtblCall__IIIIJJJJ_FUNC,
-	VtblCall__IIII_3B_FUNC,
-	VtblCall__IIII_3C_FUNC,
-	VtblCall__IIII_3CIJI_FUNC,
-	VtblCall__IIII_3CJJJ_FUNC,
-	VtblCall__IIII_3C_3CI_3I_FUNC,
-	VtblCall__IIII_3I_FUNC,
-	VtblCall__IIII_3J_FUNC,
-	VtblCall__IIIJJ_FUNC,
-	VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC,
-	VtblCall__IIILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__III_3B_FUNC,
-	VtblCall__III_3BI_FUNC,
-	VtblCall__III_3BI_3I_FUNC,
-	VtblCall__III_3B_3B_3BI_3I_FUNC,
-	VtblCall__III_3B_3C_FUNC,
-	VtblCall__III_3B_3I_FUNC,
-	VtblCall__III_3C_FUNC,
-	VtblCall__III_3CI_FUNC,
-	VtblCall__III_3C_3C_FUNC,
-	VtblCall__III_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC,
-	VtblCall__III_3C_3CI_3I_3I_3I_FUNC,
-	VtblCall__III_3C_3C_3C_3I_FUNC,
-	VtblCall__III_3C_3C_3C_3I_3I_FUNC,
-	VtblCall__III_3C_3C_3I_FUNC,
-	VtblCall__III_3C_3C_3I_3C_3I_3I_FUNC,
-	VtblCall__III_3C_3C_3I_3I_3C_3I_3I_FUNC,
-	VtblCall__III_3I_FUNC,
-	VtblCall__III_3I_3I_3I_3I_FUNC,
-	VtblCall__IIJ_FUNC,
-	VtblCall__IIJI_FUNC,
-	VtblCall__IIJIIJIIIIII_FUNC,
-	VtblCall__IIJIIJIIIIIIIIISJ_FUNC,
-	VtblCall__IIJIIJ_3I_3J_FUNC,
-	VtblCall__IIJI_3J_FUNC,
-	VtblCall__IIJJ_FUNC,
-	VtblCall__IIJJI_FUNC,
-	VtblCall__IIJJII_FUNC,
-	VtblCall__IIJJIIII_FUNC,
-	VtblCall__IIJJIJ_3C_3I_3I_FUNC,
-	VtblCall__IIJJI_3C_FUNC,
-	VtblCall__IIJJI_3I_FUNC,
-	VtblCall__IIJJJ_FUNC,
-	VtblCall__IIJJJI_FUNC,
-	VtblCall__IIJJJI_3CJJIJI_3J_3J_FUNC,
-	VtblCall__IIJJJI_3C_3BJJIJI_3J_3J_FUNC,
-	VtblCall__IIJJJJIJ_3C_3I_3J_FUNC,
-	VtblCall__IIJJJJJ_FUNC,
-	VtblCall__IIJJJJJJ_FUNC,
-	VtblCall__IIJJJJJJJ_FUNC,
-	VtblCall__IIJJ_3B_FUNC,
-	VtblCall__IIJJ_3CIJI_FUNC,
-	VtblCall__IIJJ_3CJJJ_FUNC,
-	VtblCall__IIJJ_3C_3CI_3J_FUNC,
-	VtblCall__IIJJ_3I_FUNC,
-	VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC,
-	VtblCall__IIJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__IIJ_3B_FUNC,
-	VtblCall__IIJ_3BI_FUNC,
-	VtblCall__IIJ_3BJ_3J_FUNC,
-	VtblCall__IIJ_3B_3B_3BJ_3J_FUNC,
-	VtblCall__IIJ_3B_3C_FUNC,
-	VtblCall__IIJ_3CI_FUNC,
-	VtblCall__IIJ_3C_3C_FUNC,
-	VtblCall__IIJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC,
-	VtblCall__IIJ_3C_3CI_3J_3I_3I_FUNC,
-	VtblCall__IIJ_3C_3C_3C_3I_FUNC,
-	VtblCall__IIJ_3C_3C_3C_3I_3I_FUNC,
-	VtblCall__IIJ_3C_3C_3I_FUNC,
-	VtblCall__IIJ_3C_3C_3J_FUNC,
-	VtblCall__IIJ_3C_3C_3J_3C_3I_3I_FUNC,
-	VtblCall__IIJ_3C_3C_3J_3J_3C_3I_3I_FUNC,
-	VtblCall__IIJ_3I_FUNC,
-	VtblCall__IIJ_3J_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__IILorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__II_3B_FUNC,
-	VtblCall__II_3BI_FUNC,
-	VtblCall__II_3BII_3I_3I_FUNC,
-	VtblCall__II_3BIJ_3J_3I_FUNC,
-	VtblCall__II_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__II_3BI_3I_FUNC,
-	VtblCall__II_3BI_3I_3I_FUNC,
-	VtblCall__II_3BI_3J_3I_FUNC,
-	VtblCall__II_3BJ_FUNC,
-	VtblCall__II_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
-	VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC,
-	VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
-	VtblCall__II_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
-	VtblCall__II_3B_3B_FUNC,
-	VtblCall__II_3B_3BI_FUNC,
-	VtblCall__II_3B_3B_3BII_3I_FUNC,
-	VtblCall__II_3B_3B_3BII_3J_FUNC,
-	VtblCall__II_3B_3B_3I_FUNC,
-	VtblCall__II_3B_3B_3J_FUNC,
-	VtblCall__II_3B_3I_FUNC,
-	VtblCall__II_3B_3I_3I_FUNC,
-	VtblCall__II_3B_3I_3J_FUNC,
-	VtblCall__II_3B_3J_FUNC,
-	VtblCall__II_3B_3J_3I_FUNC,
-	VtblCall__II_3C_FUNC,
-	VtblCall__II_3CIIII_FUNC,
-	VtblCall__II_3CIJJJ_FUNC,
-	VtblCall__II_3CI_3I_FUNC,
-	VtblCall__II_3CJ_3J_FUNC,
-	VtblCall__II_3C_3C_FUNC,
-	VtblCall__II_3F_FUNC,
-	VtblCall__II_3I_FUNC,
-	VtblCall__II_3I_3I_FUNC,
-	VtblCall__II_3I_3I_3I_FUNC,
-	VtblCall__II_3I_3I_3I_3I_FUNC,
-	VtblCall__II_3I_3J_FUNC,
-	VtblCall__II_3I_3J_3I_FUNC,
-	VtblCall__II_3I_3J_3J_FUNC,
-	VtblCall__II_3J_FUNC,
-	VtblCall__II_3J_3J_3J_FUNC,
-	VtblCall__II_3S_FUNC,
+	VtblCall__IJ_FUNC,
+	VtblCall__IJF_FUNC,
+	VtblCall__IJI_FUNC,
+	VtblCall__IJII_FUNC,
+	VtblCall__IJIII_FUNC,
+	VtblCall__IJIIII_FUNC,
+	VtblCall__IJIIIII_FUNC,
+	VtblCall__IJIIIIII_FUNC,
+	VtblCall__IJIIIIIIIIII_FUNC,
+	VtblCall__IJIIIIIIIIIIIIISI_FUNC,
+	VtblCall__IJIIIIII_3C_3I_3I_FUNC,
+	VtblCall__IJIIIIJII_FUNC,
+	VtblCall__IJIIII_3CIIIII_3I_3I_FUNC,
+	VtblCall__IJIIII_3C_3BIIIII_3I_3I_FUNC,
+	VtblCall__IJIIII_3C_3I_3I_FUNC,
+	VtblCall__IJIIII_3I_3I_FUNC,
+	VtblCall__IJIII_3C_FUNC,
+	VtblCall__IJIII_3I_FUNC,
+	VtblCall__IJIIJJJJ_FUNC,
+	VtblCall__IJII_3B_FUNC,
+	VtblCall__IJII_3C_FUNC,
+	VtblCall__IJII_3CIJI_FUNC,
+	VtblCall__IJII_3CJJJ_FUNC,
+	VtblCall__IJII_3C_3CI_3I_FUNC,
+	VtblCall__IJII_3I_FUNC,
+	VtblCall__IJII_3J_FUNC,
+	VtblCall__IJIJJ_FUNC,
+	VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_FUNC,
+	VtblCall__IJILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJI_3B_FUNC,
+	VtblCall__IJI_3BI_FUNC,
+	VtblCall__IJI_3BI_3I_FUNC,
+	VtblCall__IJI_3B_3B_3BI_3I_FUNC,
+	VtblCall__IJI_3B_3C_FUNC,
+	VtblCall__IJI_3B_3I_FUNC,
+	VtblCall__IJI_3C_FUNC,
+	VtblCall__IJI_3CI_FUNC,
+	VtblCall__IJI_3C_3C_FUNC,
+	VtblCall__IJI_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC,
+	VtblCall__IJI_3C_3CI_3I_3I_3I_FUNC,
+	VtblCall__IJI_3C_3C_3C_3I_FUNC,
+	VtblCall__IJI_3C_3C_3C_3I_3I_FUNC,
+	VtblCall__IJI_3C_3C_3I_FUNC,
+	VtblCall__IJI_3C_3C_3I_3C_3I_3I_FUNC,
+	VtblCall__IJI_3C_3C_3I_3I_3C_3I_3I_FUNC,
+	VtblCall__IJI_3I_FUNC,
+	VtblCall__IJI_3I_3I_3I_3I_FUNC,
+	VtblCall__IJJ_FUNC,
+	VtblCall__IJJI_FUNC,
+	VtblCall__IJJIIJIIIIII_FUNC,
+	VtblCall__IJJIIJIIIIIIIIISJ_FUNC,
+	VtblCall__IJJIIJ_3I_3J_FUNC,
+	VtblCall__IJJI_3J_FUNC,
+	VtblCall__IJJJ_FUNC,
+	VtblCall__IJJJI_FUNC,
+	VtblCall__IJJJII_FUNC,
+	VtblCall__IJJJIIII_FUNC,
+	VtblCall__IJJJIJ_3C_3I_3I_FUNC,
+	VtblCall__IJJJI_3C_FUNC,
+	VtblCall__IJJJI_3I_FUNC,
+	VtblCall__IJJJJ_FUNC,
+	VtblCall__IJJJJI_FUNC,
+	VtblCall__IJJJJI_3CJJIJI_3J_3J_FUNC,
+	VtblCall__IJJJJI_3C_3BJJIJI_3J_3J_FUNC,
+	VtblCall__IJJJJJIJ_3C_3I_3J_FUNC,
+	VtblCall__IJJJJJJ_FUNC,
+	VtblCall__IJJJJJJJ_FUNC,
+	VtblCall__IJJJJJJJJ_FUNC,
+	VtblCall__IJJJ_3B_FUNC,
+	VtblCall__IJJJ_3CIJI_FUNC,
+	VtblCall__IJJJ_3CJJJ_FUNC,
+	VtblCall__IJJJ_3C_3CI_3J_FUNC,
+	VtblCall__IJJJ_3I_FUNC,
+	VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_FUNC,
+	VtblCall__IJJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJJ_3B_FUNC,
+	VtblCall__IJJ_3BI_FUNC,
+	VtblCall__IJJ_3BJ_3J_FUNC,
+	VtblCall__IJJ_3B_3B_3BJ_3J_FUNC,
+	VtblCall__IJJ_3B_3C_FUNC,
+	VtblCall__IJJ_3CI_FUNC,
+	VtblCall__IJJ_3C_3C_FUNC,
+	VtblCall__IJJ_3C_3CI_3C_3C_3C_3C_3I_3I_FUNC,
+	VtblCall__IJJ_3C_3CI_3J_3I_3I_FUNC,
+	VtblCall__IJJ_3C_3C_3C_3I_FUNC,
+	VtblCall__IJJ_3C_3C_3C_3I_3I_FUNC,
+	VtblCall__IJJ_3C_3C_3I_FUNC,
+	VtblCall__IJJ_3C_3C_3J_FUNC,
+	VtblCall__IJJ_3C_3C_3J_3C_3I_3I_FUNC,
+	VtblCall__IJJ_3C_3C_3J_3J_3C_3I_3I_FUNC,
+	VtblCall__IJJ_3I_FUNC,
+	VtblCall__IJJ_3J_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2ILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2JLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2Lorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BI_3B_3B_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3B_3BJ_3B_3B_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJ_3B_FUNC,
+	VtblCall__IJ_3BI_FUNC,
+	VtblCall__IJ_3BII_3I_3I_FUNC,
+	VtblCall__IJ_3BIJ_3J_3I_FUNC,
+	VtblCall__IJ_3BILorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJ_3BI_3I_FUNC,
+	VtblCall__IJ_3BI_3I_3I_FUNC,
+	VtblCall__IJ_3BI_3J_3I_FUNC,
+	VtblCall__IJ_3BJ_FUNC,
+	VtblCall__IJ_3BJLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
+	VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2J_FUNC,
+	VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3I_FUNC,
+	VtblCall__IJ_3BLorg_eclipse_swt_internal_mozilla_nsID_2_3J_FUNC,
+	VtblCall__IJ_3B_3B_FUNC,
+	VtblCall__IJ_3B_3BI_FUNC,
+	VtblCall__IJ_3B_3B_3BII_3I_FUNC,
+	VtblCall__IJ_3B_3B_3BII_3J_FUNC,
+	VtblCall__IJ_3B_3B_3I_FUNC,
+	VtblCall__IJ_3B_3B_3J_FUNC,
+	VtblCall__IJ_3B_3I_FUNC,
+	VtblCall__IJ_3B_3I_3I_FUNC,
+	VtblCall__IJ_3B_3I_3J_FUNC,
+	VtblCall__IJ_3B_3J_FUNC,
+	VtblCall__IJ_3B_3J_3I_FUNC,
+	VtblCall__IJ_3C_FUNC,
+	VtblCall__IJ_3CIIII_FUNC,
+	VtblCall__IJ_3CIJJJ_FUNC,
+	VtblCall__IJ_3CI_3I_FUNC,
+	VtblCall__IJ_3CJ_3J_FUNC,
+	VtblCall__IJ_3C_3C_FUNC,
+	VtblCall__IJ_3F_FUNC,
+	VtblCall__IJ_3I_FUNC,
+	VtblCall__IJ_3I_3I_FUNC,
+	VtblCall__IJ_3I_3I_3I_FUNC,
+	VtblCall__IJ_3I_3I_3I_3I_FUNC,
+	VtblCall__IJ_3I_3J_FUNC,
+	VtblCall__IJ_3I_3J_3I_FUNC,
+	VtblCall__IJ_3I_3J_3J_FUNC,
+	VtblCall__IJ_3J_FUNC,
+	VtblCall__IJ_3J_3J_3J_FUNC,
+	VtblCall__IJ_3S_FUNC,
 	XPCOMGlueShutdown_FUNC,
 	XPCOMGlueStartup_FUNC,
-	memmove__ILorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
-	memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2II_FUNC,
+	memmove__JLorg_eclipse_swt_internal_mozilla_nsID_2I_FUNC,
+	memmove__Lorg_eclipse_swt_internal_mozilla_nsID_2JI_FUNC,
 	nsEmbedCString_1Length_FUNC,
 	nsEmbedCString_1delete_FUNC,
 	nsEmbedCString_1get_FUNC,
diff -ur x86/xpcom_structs.cpp x86_64/xpcom_structs.cpp
--- x86/xpcom_structs.cpp	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcom_structs.cpp	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
diff -ur x86/xpcom_structs.h x86_64/xpcom_structs.h
--- x86/xpcom_structs.h	2009-06-24 21:14:00.000000000 -0400
+++ x86_64/xpcom_structs.h	2009-02-11 17:53:48.000000000 -0500
@@ -1,5 +1,5 @@
 /*******************************************************************************
- * Copyright (c) 2000, 2007 IBM Corporation and others.
+ * Copyright (c) 2000, 2008 IBM Corporation and others.
  * All rights reserved. This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
